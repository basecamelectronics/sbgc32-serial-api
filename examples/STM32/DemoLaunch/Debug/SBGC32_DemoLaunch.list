
SBGC32_DemoLaunch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d970  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c38  0800db70  0800db70  0001db70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f7a8  0800f7a8  00020784  2**0
                  CONTENTS
  4 .ARM          00000008  0800f7a8  0800f7a8  0001f7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f7b0  0800f7b0  00020784  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f7b0  0800f7b0  0001f7b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f7b4  0800f7b4  0001f7b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000784  20000000  0800f7b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e4  20000784  0800ff3c  00020784  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e68  0800ff3c  00020e68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020784  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000207b2  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025c40  00000000  00000000  000207f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004648  00000000  00000000  00046435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d8  00000000  00000000  0004aa80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010d9  00000000  00000000  0004c058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d252  00000000  00000000  0004d131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000263c0  00000000  00000000  0007a383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107c6b  00000000  00000000  000a0743  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c54  00000000  00000000  001a83b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001af004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000784 	.word	0x20000784
 800021c:	00000000 	.word	0x00000000
 8000220:	0800db58 	.word	0x0800db58

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000788 	.word	0x20000788
 800023c:	0800db58 	.word	0x0800db58

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <MX_GPIO_Init+0x44>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a0e      	ldr	r2, [pc, #56]	; (8000a18 <MX_GPIO_Init+0x44>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <MX_GPIO_Init+0x44>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_GPIO_Init+0x44>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <MX_GPIO_Init+0x44>)
 80009f8:	f043 0302 	orr.w	r3, r3, #2
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_GPIO_Init+0x44>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	603b      	str	r3, [r7, #0]
 8000a08:	683b      	ldr	r3, [r7, #0]

}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	40023800 	.word	0x40023800

08000a1c <SerialAPI_GetStatus>:
 *	@param	gSBGC - pointer to serial connection descriptor
 *
 *	@return	sbgcGeneral_t._lastCommandStatus
 */
static inline sbgcCommandStatus_t SerialAPI_GetStatus (sbgcGeneral_t *gSBGC)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	return gSBGC->_lastCommandStatus;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	7a5b      	ldrb	r3, [r3, #9]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <SerialAPI_GetConfirmStatus>:
	 *	@param	*confirm - pointer to confirmation structure
	 *
	 *	@return	sbgcConfirm_t.status
	 */
	static inline sbgcConfirmStatus_t SerialAPI_GetConfirmStatus (sbgcConfirm_t *confirm)
	{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
		return confirm->status;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	79db      	ldrb	r3, [r3, #7]
	}
 8000a40:	4618      	mov	r0, r3
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr

08000a4c <SerialAPI_GetBytesAvailable>:
 *	@param	gSBGC - pointer to serial connection descriptor
 *
 *	@return Number of available bytes for reading
 */
static inline ui16 SerialAPI_GetBytesAvailable (sbgcGeneral_t *gSBGC)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	return gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	691b      	ldr	r3, [r3, #16]
 8000a5a:	687a      	ldr	r2, [r7, #4]
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	6812      	ldr	r2, [r2, #0]
 8000a60:	4610      	mov	r0, r2
 8000a62:	4798      	blx	r3
 8000a64:	4603      	mov	r3, r0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <ParserSBGC32_RTDC_FlagsToStream>:
 *	@param	*dataStreamInterval - data stream structure
 *	@param	flags - realtime data custom parameter. See
 *			@ref sbgcRealTimeDataCustomFlag_t enumeration
 */
static inline void ParserSBGC32_RTDC_FlagsToStream (sbgcDataStreamInterval_t *dataStreamInterval, ui32 flags)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	b083      	sub	sp, #12
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
 8000a76:	6039      	str	r1, [r7, #0]
	memcpy(dataStreamInterval->config, &flags, sizeof(flags));
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	3303      	adds	r3, #3
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	601a      	str	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a90:	f001 f909 	bl	8001ca6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a94:	f000 f89c 	bl	8000bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a98:	f7ff ff9c 	bl	80009d4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000a9c:	f000 fe82 	bl	80017a4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000aa0:	f000 fef2 	bl	8001888 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000aa4:	f000 ff20 	bl	80018e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* SimpleBGC32 Init */
	SBGC32_Init(&SBGC32_Device);
 8000aa8:	483f      	ldr	r0, [pc, #252]	; (8000ba8 <main+0x11c>)
 8000aaa:	f008 fd65 	bl	8009578 <SBGC32_Init>

	/* Control Configurations */
	ControlConfig.AxisCCtrl[PITCH].angleLPF = SBGC_CONTROL_AXES_LPF;
 8000aae:	4b3f      	ldr	r3, [pc, #252]	; (8000bac <main+0x120>)
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	739a      	strb	r2, [r3, #14]
	ControlConfig.AxisCCtrl[YAW].angleLPF = SBGC_CONTROL_AXES_LPF;
 8000ab4:	4b3d      	ldr	r3, [pc, #244]	; (8000bac <main+0x120>)
 8000ab6:	2202      	movs	r2, #2
 8000ab8:	755a      	strb	r2, [r3, #21]

	ControlConfig.AxisCCtrl[PITCH].speedLPF = SBGC_CONTROL_AXES_LPF;
 8000aba:	4b3c      	ldr	r3, [pc, #240]	; (8000bac <main+0x120>)
 8000abc:	2202      	movs	r2, #2
 8000abe:	73da      	strb	r2, [r3, #15]
	ControlConfig.AxisCCtrl[YAW].speedLPF = SBGC_CONTROL_AXES_LPF;
 8000ac0:	4b3a      	ldr	r3, [pc, #232]	; (8000bac <main+0x120>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	759a      	strb	r2, [r3, #22]

	ControlConfig.flags = CtrlCONFIG_FLAG_NO_CONFIRM;
 8000ac6:	4b39      	ldr	r3, [pc, #228]	; (8000bac <main+0x120>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f042 0201 	orr.w	r2, r2, #1
 8000ace:	775a      	strb	r2, [r3, #29]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	779a      	strb	r2, [r3, #30]

	Control.mode[PITCH] = CtrlMODE_ANGLE | CtrlFLAG_TARGET_PRECISE;
 8000ad4:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <main+0x124>)
 8000ad6:	2222      	movs	r2, #34	; 0x22
 8000ad8:	705a      	strb	r2, [r3, #1]
	Control.mode[YAW] = CtrlMODE_ANGLE | CtrlFLAG_TARGET_PRECISE;
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <main+0x124>)
 8000adc:	2222      	movs	r2, #34	; 0x22
 8000ade:	709a      	strb	r2, [r3, #2]

	Control.AxisC[PITCH].angle = 0;
 8000ae0:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <main+0x124>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	725a      	strb	r2, [r3, #9]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	729a      	strb	r2, [r3, #10]
	Control.AxisC[YAW].angle = 0;
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <main+0x124>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	735a      	strb	r2, [r3, #13]
 8000af0:	2200      	movs	r2, #0
 8000af2:	739a      	strb	r2, [r3, #14]

	Control.AxisC[PITCH].speed = sbgcSpeedToValue(25);
 8000af4:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <main+0x124>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	f062 0233 	orn	r2, r2, #51	; 0x33
 8000afc:	71da      	strb	r2, [r3, #7]
 8000afe:	2200      	movs	r2, #0
 8000b00:	721a      	strb	r2, [r3, #8]
	Control.AxisC[YAW].speed = sbgcSpeedToValue(50);
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <main+0x124>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	f062 0266 	orn	r2, r2, #102	; 0x66
 8000b0a:	72da      	strb	r2, [r3, #11]
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f042 0201 	orr.w	r2, r2, #1
 8000b12:	731a      	strb	r2, [r3, #12]

	/* Data Stream Configurations */
	DataStreamInterval.cmdID = DSC_CMD_REALTIME_DATA_CUSTOM;
 8000b14:	4b27      	ldr	r3, [pc, #156]	; (8000bb4 <main+0x128>)
 8000b16:	2258      	movs	r2, #88	; 0x58
 8000b18:	701a      	strb	r2, [r3, #0]
	DataStreamInterval.intervalMs = SBGC_DATA_STREAM_INTERVAL;
 8000b1a:	4b26      	ldr	r3, [pc, #152]	; (8000bb4 <main+0x128>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	f062 0217 	orn	r2, r2, #23
 8000b22:	705a      	strb	r2, [r3, #1]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f042 0203 	orr.w	r2, r2, #3
 8000b2a:	709a      	strb	r2, [r3, #2]
	DataStreamInterval.syncToData = STD_SYNC_OFF;
 8000b2c:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <main+0x128>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	72da      	strb	r2, [r3, #11]

	ParserSBGC32_RTDC_FlagsToStream(&DataStreamInterval, RTDCF_STATOR_ROTOR_ANGLE | RTDCF_GYRO_DATA | RTDCF_ACC_DATA);
 8000b32:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000b36:	481f      	ldr	r0, [pc, #124]	; (8000bb4 <main+0x128>)
 8000b38:	f7ff ff99 	bl	8000a6e <ParserSBGC32_RTDC_FlagsToStream>

	/* Adj Vars Setting. SBGC_ADJ_VARS_REF_INFO parameter must be sbgcON  */
	SerialAPI_InitAdjVar(&AdjVarGeneral[0], ADJ_VAR_ACC_LIMITER_ROLL);
 8000b3c:	2127      	movs	r1, #39	; 0x27
 8000b3e:	481e      	ldr	r0, [pc, #120]	; (8000bb8 <main+0x12c>)
 8000b40:	f007 ffc4 	bl	8008acc <SerialAPI_InitAdjVar>
	SerialAPI_InitAdjVar(&AdjVarGeneral[1], ADJ_VAR_ACC_LIMITER_PITCH);
 8000b44:	2128      	movs	r1, #40	; 0x28
 8000b46:	481d      	ldr	r0, [pc, #116]	; (8000bbc <main+0x130>)
 8000b48:	f007 ffc0 	bl	8008acc <SerialAPI_InitAdjVar>
	SerialAPI_InitAdjVar(&AdjVarGeneral[2], ADJ_VAR_ACC_LIMITER_YAW);
 8000b4c:	2129      	movs	r1, #41	; 0x29
 8000b4e:	481c      	ldr	r0, [pc, #112]	; (8000bc0 <main+0x134>)
 8000b50:	f007 ffbc 	bl	8008acc <SerialAPI_InitAdjVar>
	/* Program launch */
	/* SBGC32_Reset(&SBGC32_Device, RESET_FLAG_NEED_CONFIRMATION, 0);
	SBGC32_ExpectCommand(&SBGC32_Device, CMD_RESET);
	sbgcDelay(5000); */

	PrintBoardParameters(sbgcCURRENT_PROFILE);
 8000b54:	20ff      	movs	r0, #255	; 0xff
 8000b56:	f000 f8a9 	bl	8000cac <PrintBoardParameters>

	SBGC32_ControlConfig(&SBGC32_Device, &ControlConfig, SBGC_NO_CONFIRM);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4913      	ldr	r1, [pc, #76]	; (8000bac <main+0x120>)
 8000b5e:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <main+0x11c>)
 8000b60:	f008 f9af 	bl	8008ec2 <SBGC32_ControlConfig>

	DemoControl();
 8000b64:	f000 fac4 	bl	80010f0 <DemoControl>

	SBGC32_StartDataStream(&SBGC32_Device, &DataStreamInterval, &Confirm);
 8000b68:	4a16      	ldr	r2, [pc, #88]	; (8000bc4 <main+0x138>)
 8000b6a:	4912      	ldr	r1, [pc, #72]	; (8000bb4 <main+0x128>)
 8000b6c:	480e      	ldr	r0, [pc, #56]	; (8000ba8 <main+0x11c>)
 8000b6e:	f008 fada 	bl	8009126 <SBGC32_StartDataStream>

	if (SerialAPI_GetConfirmStatus(&Confirm) != sbgcCONFIRM_RECEIVED)
 8000b72:	4814      	ldr	r0, [pc, #80]	; (8000bc4 <main+0x138>)
 8000b74:	f7ff ff5e 	bl	8000a34 <SerialAPI_GetConfirmStatus>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d004      	beq.n	8000b88 <main+0xfc>
	{
		DebugSBGC32_PrintMessage(&SBGC32_Device, "Confirmation Error! Program is stopped");
 8000b7e:	4912      	ldr	r1, [pc, #72]	; (8000bc8 <main+0x13c>)
 8000b80:	4809      	ldr	r0, [pc, #36]	; (8000ba8 <main+0x11c>)
 8000b82:	f005 fbab 	bl	80062dc <DebugSBGC32_PrintMessage>

		/* There is no point in proceeding without starting the data stream */
		while (1);  // Stop the program here
 8000b86:	e7fe      	b.n	8000b86 <main+0xfa>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		/* Wait until get a full command */
		while (SerialAPI_GetBytesAvailable(&SBGC32_Device) < ((sizeof(RealTimeDataCustom) + SBGC_SERVICE_BYTES_NUM) * SBGC_DATA_STREAM_BUFF_DEPTH));
 8000b88:	bf00      	nop
 8000b8a:	4807      	ldr	r0, [pc, #28]	; (8000ba8 <main+0x11c>)
 8000b8c:	f7ff ff5e 	bl	8000a4c <SerialAPI_GetBytesAvailable>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b19      	cmp	r3, #25
 8000b94:	d9f9      	bls.n	8000b8a <main+0xfe>

		SBGC32_ReadDataStream(&SBGC32_Device, DSC_CMD_REALTIME_DATA_CUSTOM, &RealTimeDataCustom, sizeof(RealTimeDataCustom));
 8000b96:	2314      	movs	r3, #20
 8000b98:	4a0c      	ldr	r2, [pc, #48]	; (8000bcc <main+0x140>)
 8000b9a:	2158      	movs	r1, #88	; 0x58
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <main+0x11c>)
 8000b9e:	f008 fb7f 	bl	80092a0 <SBGC32_ReadDataStream>
		PrintDataStream();
 8000ba2:	f000 fbc1 	bl	8001328 <PrintDataStream>
		while (SerialAPI_GetBytesAvailable(&SBGC32_Device) < ((sizeof(RealTimeDataCustom) + SBGC_SERVICE_BYTES_NUM) * SBGC_DATA_STREAM_BUFF_DEPTH));
 8000ba6:	e7ef      	b.n	8000b88 <main+0xfc>
 8000ba8:	200007a0 	.word	0x200007a0
 8000bac:	200007f8 	.word	0x200007f8
 8000bb0:	200007e8 	.word	0x200007e8
 8000bb4:	20000b08 	.word	0x20000b08
 8000bb8:	200007ac 	.word	0x200007ac
 8000bbc:	200007c0 	.word	0x200007c0
 8000bc0:	200007d4 	.word	0x200007d4
 8000bc4:	20000b90 	.word	0x20000b90
 8000bc8:	0800db70 	.word	0x0800db70
 8000bcc:	20000b98 	.word	0x20000b98

08000bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b094      	sub	sp, #80	; 0x50
 8000bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bd6:	f107 031c 	add.w	r3, r7, #28
 8000bda:	2234      	movs	r2, #52	; 0x34
 8000bdc:	2100      	movs	r1, #0
 8000bde:	4618      	mov	r0, r3
 8000be0:	f009 fced 	bl	800a5be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000be4:	f107 0308 	add.w	r3, r7, #8
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <SystemClock_Config+0xd4>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	; (8000ca4 <SystemClock_Config+0xd4>)
 8000bfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000c00:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <SystemClock_Config+0xd4>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c0c:	4b26      	ldr	r3, [pc, #152]	; (8000ca8 <SystemClock_Config+0xd8>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a25      	ldr	r2, [pc, #148]	; (8000ca8 <SystemClock_Config+0xd8>)
 8000c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b23      	ldr	r3, [pc, #140]	; (8000ca8 <SystemClock_Config+0xd8>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c24:	2302      	movs	r3, #2
 8000c26:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c30:	2302      	movs	r3, #2
 8000c32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c34:	2300      	movs	r3, #0
 8000c36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c38:	2308      	movs	r3, #8
 8000c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c3c:	23d8      	movs	r3, #216	; 0xd8
 8000c3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4618      	mov	r0, r3
 8000c52:	f001 fc49 	bl	80024e8 <HAL_RCC_OscConfig>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000c5c:	f000 fc19 	bl	8001492 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c60:	f001 fbf2 	bl	8002448 <HAL_PWREx_EnableOverDrive>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c6a:	f000 fc12 	bl	8001492 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	230f      	movs	r3, #15
 8000c70:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c72:	2302      	movs	r3, #2
 8000c74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c7a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c84:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000c86:	f107 0308 	add.w	r3, r7, #8
 8000c8a:	2107      	movs	r1, #7
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f001 fed9 	bl	8002a44 <HAL_RCC_ClockConfig>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000c98:	f000 fbfb 	bl	8001492 <Error_Handler>
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	3750      	adds	r7, #80	; 0x50
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40007000 	.word	0x40007000

08000cac <PrintBoardParameters>:

/* USER CODE BEGIN 4 */

sbgcCommandStatus_t PrintBoardParameters (sbgcProfile_t profileID)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	char boardVersionStr [5];
	char firmwareVersionStr [8];

	SBGC32_ReadBoardInfo(&SBGC32_Device, &BoardInfo, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	49aa      	ldr	r1, [pc, #680]	; (8000f64 <PrintBoardParameters+0x2b8>)
 8000cba:	48ab      	ldr	r0, [pc, #684]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000cbc:	f008 fb61 	bl	8009382 <SBGC32_ReadBoardInfo>
	SBGC32_ReadBoardInfo3(&SBGC32_Device, &BoardInfo3);
 8000cc0:	49aa      	ldr	r1, [pc, #680]	; (8000f6c <PrintBoardParameters+0x2c0>)
 8000cc2:	48a9      	ldr	r0, [pc, #676]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000cc4:	f008 fb9d 	bl	8009402 <SBGC32_ReadBoardInfo3>

	SBGC32_ReadParams3(&SBGC32_Device, &MainParams3, profileID);
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	461a      	mov	r2, r3
 8000ccc:	49a8      	ldr	r1, [pc, #672]	; (8000f70 <PrintBoardParameters+0x2c4>)
 8000cce:	48a6      	ldr	r0, [pc, #664]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000cd0:	f008 f929 	bl	8008f26 <SBGC32_ReadParams3>
	SBGC32_ReadParamsExt(&SBGC32_Device, &MainParamsExt, profileID);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	49a6      	ldr	r1, [pc, #664]	; (8000f74 <PrintBoardParameters+0x2c8>)
 8000cda:	48a3      	ldr	r0, [pc, #652]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000cdc:	f008 f963 	bl	8008fa6 <SBGC32_ReadParamsExt>
	SBGC32_ReadParamsExt2(&SBGC32_Device, &MainParamsExt2, profileID);
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	49a4      	ldr	r1, [pc, #656]	; (8000f78 <PrintBoardParameters+0x2cc>)
 8000ce6:	48a0      	ldr	r0, [pc, #640]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000ce8:	f008 f99d 	bl	8009026 <SBGC32_ReadParamsExt2>
	SBGC32_ReadParamsExt3(&SBGC32_Device, &MainParamsExt3, profileID);
 8000cec:	79fb      	ldrb	r3, [r7, #7]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	49a2      	ldr	r1, [pc, #648]	; (8000f7c <PrintBoardParameters+0x2d0>)
 8000cf2:	489d      	ldr	r0, [pc, #628]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000cf4:	f008 f9d7 	bl	80090a6 <SBGC32_ReadParamsExt3>

	SBGC32_ReadRealTimeData4(&SBGC32_Device, &RealTimeData);
 8000cf8:	49a1      	ldr	r1, [pc, #644]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000cfa:	489b      	ldr	r0, [pc, #620]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000cfc:	f008 fb0a 	bl	8009314 <SBGC32_ReadRealTimeData4>

	ParserSBGC32_FormatBoardVersion(&SBGC32_Device, BoardInfo.boardVer, BUFF_SIZE_(boardVersionStr));
 8000d00:	4b98      	ldr	r3, [pc, #608]	; (8000f64 <PrintBoardParameters+0x2b8>)
 8000d02:	7819      	ldrb	r1, [r3, #0]
 8000d04:	f107 0210 	add.w	r2, r7, #16
 8000d08:	2305      	movs	r3, #5
 8000d0a:	4897      	ldr	r0, [pc, #604]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d0c:	f007 fbd0 	bl	80084b0 <ParserSBGC32_FormatBoardVersion>
	ParserSBGC32_FormatFirmwareVersion(&SBGC32_Device, BoardInfo.firmwareVer, BUFF_SIZE_(firmwareVersionStr));
 8000d10:	4b94      	ldr	r3, [pc, #592]	; (8000f64 <PrintBoardParameters+0x2b8>)
 8000d12:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000d16:	b299      	uxth	r1, r3
 8000d18:	f107 0208 	add.w	r2, r7, #8
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	4892      	ldr	r0, [pc, #584]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d20:	f007 fbf8 	bl	8008514 <ParserSBGC32_FormatFirmwareVersion>

	DebugSBGC32_PrintMessage(&SBGC32_Device, "Board Version: ");
 8000d24:	4997      	ldr	r1, [pc, #604]	; (8000f84 <PrintBoardParameters+0x2d8>)
 8000d26:	4890      	ldr	r0, [pc, #576]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d28:	f005 fad8 	bl	80062dc <DebugSBGC32_PrintMessage>
	DebugSBGC32_PrintMessage(&SBGC32_Device, boardVersionStr);
 8000d2c:	f107 0310 	add.w	r3, r7, #16
 8000d30:	4619      	mov	r1, r3
 8000d32:	488d      	ldr	r0, [pc, #564]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d34:	f005 fad2 	bl	80062dc <DebugSBGC32_PrintMessage>
	DebugSBGC32_PrintMessage(&SBGC32_Device, " \n");
 8000d38:	4993      	ldr	r1, [pc, #588]	; (8000f88 <PrintBoardParameters+0x2dc>)
 8000d3a:	488b      	ldr	r0, [pc, #556]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d3c:	f005 face 	bl	80062dc <DebugSBGC32_PrintMessage>
	DebugSBGC32_PrintMessage(&SBGC32_Device, "Firmware Version: ");
 8000d40:	4992      	ldr	r1, [pc, #584]	; (8000f8c <PrintBoardParameters+0x2e0>)
 8000d42:	4889      	ldr	r0, [pc, #548]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d44:	f005 faca 	bl	80062dc <DebugSBGC32_PrintMessage>
	DebugSBGC32_PrintMessage(&SBGC32_Device, firmwareVersionStr);
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4886      	ldr	r0, [pc, #536]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d50:	f005 fac4 	bl	80062dc <DebugSBGC32_PrintMessage>
	DebugSBGC32_PrintMessage(&SBGC32_Device, " \n");
 8000d54:	498c      	ldr	r1, [pc, #560]	; (8000f88 <PrintBoardParameters+0x2dc>)
 8000d56:	4884      	ldr	r0, [pc, #528]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d58:	f005 fac0 	bl	80062dc <DebugSBGC32_PrintMessage>

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &BoardInfo3.flashSize, "Flash Size =", sbgcUCHAR);
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	4a8c      	ldr	r2, [pc, #560]	; (8000f90 <PrintBoardParameters+0x2e4>)
 8000d60:	498c      	ldr	r1, [pc, #560]	; (8000f94 <PrintBoardParameters+0x2e8>)
 8000d62:	4881      	ldr	r0, [pc, #516]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d64:	f005 face 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.profileID, "Current profile #", sbgcUCHAR);  // Note: 0 --> 4
 8000d68:	2301      	movs	r3, #1
 8000d6a:	4a8b      	ldr	r2, [pc, #556]	; (8000f98 <PrintBoardParameters+0x2ec>)
 8000d6c:	4980      	ldr	r1, [pc, #512]	; (8000f70 <PrintBoardParameters+0x2c4>)
 8000d6e:	487e      	ldr	r0, [pc, #504]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d70:	f005 fac8 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[ROLL].p, "Roll P =", sbgcUCHAR);
 8000d74:	2301      	movs	r3, #1
 8000d76:	4a89      	ldr	r2, [pc, #548]	; (8000f9c <PrintBoardParameters+0x2f0>)
 8000d78:	4989      	ldr	r1, [pc, #548]	; (8000fa0 <PrintBoardParameters+0x2f4>)
 8000d7a:	487b      	ldr	r0, [pc, #492]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d7c:	f005 fac2 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[ROLL].i, "Roll I =", sbgcUCHAR);
 8000d80:	2301      	movs	r3, #1
 8000d82:	4a88      	ldr	r2, [pc, #544]	; (8000fa4 <PrintBoardParameters+0x2f8>)
 8000d84:	4988      	ldr	r1, [pc, #544]	; (8000fa8 <PrintBoardParameters+0x2fc>)
 8000d86:	4878      	ldr	r0, [pc, #480]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d88:	f005 fabc 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[ROLL].d, "Roll D =", sbgcUCHAR);
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4a87      	ldr	r2, [pc, #540]	; (8000fac <PrintBoardParameters+0x300>)
 8000d90:	4987      	ldr	r1, [pc, #540]	; (8000fb0 <PrintBoardParameters+0x304>)
 8000d92:	4875      	ldr	r0, [pc, #468]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000d94:	f005 fab6 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[PITCH].p, "Pitch P =", sbgcUCHAR);
 8000d98:	2301      	movs	r3, #1
 8000d9a:	4a86      	ldr	r2, [pc, #536]	; (8000fb4 <PrintBoardParameters+0x308>)
 8000d9c:	4986      	ldr	r1, [pc, #536]	; (8000fb8 <PrintBoardParameters+0x30c>)
 8000d9e:	4872      	ldr	r0, [pc, #456]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000da0:	f005 fab0 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[PITCH].i, "Pitch I =", sbgcUCHAR);
 8000da4:	2301      	movs	r3, #1
 8000da6:	4a85      	ldr	r2, [pc, #532]	; (8000fbc <PrintBoardParameters+0x310>)
 8000da8:	4985      	ldr	r1, [pc, #532]	; (8000fc0 <PrintBoardParameters+0x314>)
 8000daa:	486f      	ldr	r0, [pc, #444]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000dac:	f005 faaa 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[PITCH].d, "Pitch D =", sbgcUCHAR);
 8000db0:	2301      	movs	r3, #1
 8000db2:	4a84      	ldr	r2, [pc, #528]	; (8000fc4 <PrintBoardParameters+0x318>)
 8000db4:	4984      	ldr	r1, [pc, #528]	; (8000fc8 <PrintBoardParameters+0x31c>)
 8000db6:	486c      	ldr	r0, [pc, #432]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000db8:	f005 faa4 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[YAW].p, "Yaw P =", sbgcUCHAR);
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	4a83      	ldr	r2, [pc, #524]	; (8000fcc <PrintBoardParameters+0x320>)
 8000dc0:	4983      	ldr	r1, [pc, #524]	; (8000fd0 <PrintBoardParameters+0x324>)
 8000dc2:	4869      	ldr	r0, [pc, #420]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000dc4:	f005 fa9e 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[YAW].i, "Yaw I =", sbgcUCHAR);
 8000dc8:	2301      	movs	r3, #1
 8000dca:	4a82      	ldr	r2, [pc, #520]	; (8000fd4 <PrintBoardParameters+0x328>)
 8000dcc:	4982      	ldr	r1, [pc, #520]	; (8000fd8 <PrintBoardParameters+0x32c>)
 8000dce:	4866      	ldr	r0, [pc, #408]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000dd0:	f005 fa98 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisCMP3[YAW].d, "Yaw D =", sbgcUCHAR);
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	4a81      	ldr	r2, [pc, #516]	; (8000fdc <PrintBoardParameters+0x330>)
 8000dd8:	4981      	ldr	r1, [pc, #516]	; (8000fe0 <PrintBoardParameters+0x334>)
 8000dda:	4863      	ldr	r0, [pc, #396]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000ddc:	f005 fa92 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.accLimiterAll, "Acc Limiter All = ", sbgcUCHAR);
 8000de0:	2301      	movs	r3, #1
 8000de2:	4a80      	ldr	r2, [pc, #512]	; (8000fe4 <PrintBoardParameters+0x338>)
 8000de4:	4980      	ldr	r1, [pc, #512]	; (8000fe8 <PrintBoardParameters+0x33c>)
 8000de6:	4860      	ldr	r0, [pc, #384]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000de8:	f005 fa8c 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisRC_MP3[ROLL].RC_MaxAngle, "RC Max Angle =", sbgcSHORT);
 8000dec:	2304      	movs	r3, #4
 8000dee:	4a7f      	ldr	r2, [pc, #508]	; (8000fec <PrintBoardParameters+0x340>)
 8000df0:	497f      	ldr	r1, [pc, #508]	; (8000ff0 <PrintBoardParameters+0x344>)
 8000df2:	485d      	ldr	r0, [pc, #372]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000df4:	f005 fa86 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.AxisRC_MP3[YAW].RC_MinAngle, "RC Min Angle =", sbgcSHORT);
 8000df8:	2304      	movs	r3, #4
 8000dfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ff4 <PrintBoardParameters+0x348>)
 8000dfc:	497e      	ldr	r1, [pc, #504]	; (8000ff8 <PrintBoardParameters+0x34c>)
 8000dfe:	485a      	ldr	r0, [pc, #360]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e00:	f005 fa80 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapRoll, "RC Map Roll =", sbgcUCHAR);
 8000e04:	2301      	movs	r3, #1
 8000e06:	4a7d      	ldr	r2, [pc, #500]	; (8000ffc <PrintBoardParameters+0x350>)
 8000e08:	497d      	ldr	r1, [pc, #500]	; (8001000 <PrintBoardParameters+0x354>)
 8000e0a:	4857      	ldr	r0, [pc, #348]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e0c:	f005 fa7a 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapPitch, "RC Map Pitch =", sbgcUCHAR);
 8000e10:	2301      	movs	r3, #1
 8000e12:	4a7c      	ldr	r2, [pc, #496]	; (8001004 <PrintBoardParameters+0x358>)
 8000e14:	497c      	ldr	r1, [pc, #496]	; (8001008 <PrintBoardParameters+0x35c>)
 8000e16:	4854      	ldr	r0, [pc, #336]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e18:	f005 fa74 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapYaw, "RC Map Yaw =", sbgcUCHAR);
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	4a7b      	ldr	r2, [pc, #492]	; (800100c <PrintBoardParameters+0x360>)
 8000e20:	497b      	ldr	r1, [pc, #492]	; (8001010 <PrintBoardParameters+0x364>)
 8000e22:	4851      	ldr	r0, [pc, #324]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e24:	f005 fa6e 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapCmd, "RC Map Cmd =", sbgcUCHAR);
 8000e28:	2301      	movs	r3, #1
 8000e2a:	4a7a      	ldr	r2, [pc, #488]	; (8001014 <PrintBoardParameters+0x368>)
 8000e2c:	497a      	ldr	r1, [pc, #488]	; (8001018 <PrintBoardParameters+0x36c>)
 8000e2e:	484e      	ldr	r0, [pc, #312]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e30:	f005 fa68 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapFC_Roll, "RC Map FC Roll =", sbgcUCHAR);
 8000e34:	2301      	movs	r3, #1
 8000e36:	4a79      	ldr	r2, [pc, #484]	; (800101c <PrintBoardParameters+0x370>)
 8000e38:	4979      	ldr	r1, [pc, #484]	; (8001020 <PrintBoardParameters+0x374>)
 8000e3a:	484b      	ldr	r0, [pc, #300]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e3c:	f005 fa62 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParams3.RC_MapFC_Pitch, "RC Map FC Pitch =", sbgcUCHAR);
 8000e40:	2301      	movs	r3, #1
 8000e42:	4a78      	ldr	r2, [pc, #480]	; (8001024 <PrintBoardParameters+0x378>)
 8000e44:	4978      	ldr	r1, [pc, #480]	; (8001028 <PrintBoardParameters+0x37c>)
 8000e46:	4848      	ldr	r0, [pc, #288]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e48:	f005 fa5c 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParamsExt.LPF_Freq[ROLL], "LPF Frequency Roll =", sbgcUSHORT);
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	4a77      	ldr	r2, [pc, #476]	; (800102c <PrintBoardParameters+0x380>)
 8000e50:	4977      	ldr	r1, [pc, #476]	; (8001030 <PrintBoardParameters+0x384>)
 8000e52:	4845      	ldr	r0, [pc, #276]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e54:	f005 fa56 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParamsExt.LPF_Freq[PITCH], "LPF Frequency Pitch =", sbgcUSHORT);
 8000e58:	2303      	movs	r3, #3
 8000e5a:	4a76      	ldr	r2, [pc, #472]	; (8001034 <PrintBoardParameters+0x388>)
 8000e5c:	4976      	ldr	r1, [pc, #472]	; (8001038 <PrintBoardParameters+0x38c>)
 8000e5e:	4842      	ldr	r0, [pc, #264]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e60:	f005 fa50 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParamsExt.LPF_Freq[YAW], "LPF Frequency Yaw =", sbgcUSHORT);
 8000e64:	2303      	movs	r3, #3
 8000e66:	4a75      	ldr	r2, [pc, #468]	; (800103c <PrintBoardParameters+0x390>)
 8000e68:	4975      	ldr	r1, [pc, #468]	; (8001040 <PrintBoardParameters+0x394>)
 8000e6a:	483f      	ldr	r0, [pc, #252]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e6c:	f005 fa4a 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParamsExt2.frameIMU_LPF_Freq, "Frame IMU LPF Freq =", sbgcUCHAR);
 8000e70:	2301      	movs	r3, #1
 8000e72:	4a74      	ldr	r2, [pc, #464]	; (8001044 <PrintBoardParameters+0x398>)
 8000e74:	4974      	ldr	r1, [pc, #464]	; (8001048 <PrintBoardParameters+0x39c>)
 8000e76:	483c      	ldr	r0, [pc, #240]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e78:	f005 fa44 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParamsExt2.timelapseTime, "Timelapse Time =", sbgcUSHORT);
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	4a73      	ldr	r2, [pc, #460]	; (800104c <PrintBoardParameters+0x3a0>)
 8000e80:	4973      	ldr	r1, [pc, #460]	; (8001050 <PrintBoardParameters+0x3a4>)
 8000e82:	4839      	ldr	r0, [pc, #228]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e84:	f005 fa3e 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &MainParamsExt3.motorStartupDelay, "Motor Startup Delay =", sbgcUSHORT);
 8000e88:	2303      	movs	r3, #3
 8000e8a:	4a72      	ldr	r2, [pc, #456]	; (8001054 <PrintBoardParameters+0x3a8>)
 8000e8c:	4972      	ldr	r1, [pc, #456]	; (8001058 <PrintBoardParameters+0x3ac>)
 8000e8e:	4836      	ldr	r0, [pc, #216]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e90:	f005 fa38 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintMessage(&SBGC32_Device, " \n");
 8000e94:	493c      	ldr	r1, [pc, #240]	; (8000f88 <PrintBoardParameters+0x2dc>)
 8000e96:	4834      	ldr	r0, [pc, #208]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000e98:	f005 fa20 	bl	80062dc <DebugSBGC32_PrintMessage>

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeData.AxisRTD[ROLL].accData, "Acc Roll =", sbgcSHORT);
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	4a6f      	ldr	r2, [pc, #444]	; (800105c <PrintBoardParameters+0x3b0>)
 8000ea0:	4937      	ldr	r1, [pc, #220]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000ea2:	4831      	ldr	r0, [pc, #196]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000ea4:	f005 fa2e 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeData.AxisRTD[PITCH].accData, "Acc Pitch =", sbgcSHORT);
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	4a6d      	ldr	r2, [pc, #436]	; (8001060 <PrintBoardParameters+0x3b4>)
 8000eac:	496d      	ldr	r1, [pc, #436]	; (8001064 <PrintBoardParameters+0x3b8>)
 8000eae:	482e      	ldr	r0, [pc, #184]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000eb0:	f005 fa28 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeData.AxisRTD[YAW].accData, "Acc Yaw =", sbgcSHORT);
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	4a6c      	ldr	r2, [pc, #432]	; (8001068 <PrintBoardParameters+0x3bc>)
 8000eb8:	496c      	ldr	r1, [pc, #432]	; (800106c <PrintBoardParameters+0x3c0>)
 8000eba:	482b      	ldr	r0, [pc, #172]	; (8000f68 <PrintBoardParameters+0x2bc>)
 8000ebc:	f005 fa22 	bl	8006304 <DebugSBGC32_PrintStructElement>

	RealTimeData.frameCamAngle[ROLL] = sbgcDegreeToAngle(RealTimeData.frameCamAngle[ROLL]);
 8000ec0:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000ec2:	f9b3 303f 	ldrsh.w	r3, [r3, #63]	; 0x3f
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d011      	beq.n	8000ef0 <PrintBoardParameters+0x244>
 8000ecc:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000ece:	f9b3 303f 	ldrsh.w	r3, [r3, #63]	; 0x3f
 8000ed2:	b21b      	sxth	r3, r3
 8000ed4:	ee07 3a90 	vmov	s15, r3
 8000ed8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000edc:	eddf 6a64 	vldr	s13, [pc, #400]	; 8001070 <PrintBoardParameters+0x3c4>
 8000ee0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ee4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ee8:	ee17 3a90 	vmov	r3, s15
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	e000      	b.n	8000ef2 <PrintBoardParameters+0x246>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000ef4:	f8a2 303f 	strh.w	r3, [r2, #63]	; 0x3f
	RealTimeData.frameCamAngle[PITCH] = sbgcDegreeToAngle(RealTimeData.frameCamAngle[PITCH]);
 8000ef8:	4b21      	ldr	r3, [pc, #132]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000efa:	f9b3 3041 	ldrsh.w	r3, [r3, #65]	; 0x41
 8000efe:	b21b      	sxth	r3, r3
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d011      	beq.n	8000f28 <PrintBoardParameters+0x27c>
 8000f04:	4b1e      	ldr	r3, [pc, #120]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000f06:	f9b3 3041 	ldrsh.w	r3, [r3, #65]	; 0x41
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	ee07 3a90 	vmov	s15, r3
 8000f10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f14:	eddf 6a56 	vldr	s13, [pc, #344]	; 8001070 <PrintBoardParameters+0x3c4>
 8000f18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f20:	ee17 3a90 	vmov	r3, s15
 8000f24:	b21b      	sxth	r3, r3
 8000f26:	e000      	b.n	8000f2a <PrintBoardParameters+0x27e>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4a15      	ldr	r2, [pc, #84]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000f2c:	f8a2 3041 	strh.w	r3, [r2, #65]	; 0x41
	RealTimeData.frameCamAngle[YAW] = sbgcDegreeToAngle(RealTimeData.frameCamAngle[YAW]);
 8000f30:	4b13      	ldr	r3, [pc, #76]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000f32:	f9b3 3043 	ldrsh.w	r3, [r3, #67]	; 0x43
 8000f36:	b21b      	sxth	r3, r3
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 809b 	beq.w	8001074 <PrintBoardParameters+0x3c8>
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <PrintBoardParameters+0x2d4>)
 8000f40:	f9b3 3043 	ldrsh.w	r3, [r3, #67]	; 0x43
 8000f44:	b21b      	sxth	r3, r3
 8000f46:	ee07 3a90 	vmov	s15, r3
 8000f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f4e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8001070 <PrintBoardParameters+0x3c4>
 8000f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f56:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f5a:	ee17 3a90 	vmov	r3, s15
 8000f5e:	b21b      	sxth	r3, r3
 8000f60:	e089      	b.n	8001076 <PrintBoardParameters+0x3ca>
 8000f62:	bf00      	nop
 8000f64:	20000b20 	.word	0x20000b20
 8000f68:	200007a0 	.word	0x200007a0
 8000f6c:	20000b34 	.word	0x20000b34
 8000f70:	20000824 	.word	0x20000824
 8000f74:	200008ac 	.word	0x200008ac
 8000f78:	20000914 	.word	0x20000914
 8000f7c:	200009ac 	.word	0x200009ac
 8000f80:	20000a8c 	.word	0x20000a8c
 8000f84:	0800db98 	.word	0x0800db98
 8000f88:	0800dba8 	.word	0x0800dba8
 8000f8c:	0800dbac 	.word	0x0800dbac
 8000f90:	0800dbc0 	.word	0x0800dbc0
 8000f94:	20000b59 	.word	0x20000b59
 8000f98:	0800dbd0 	.word	0x0800dbd0
 8000f9c:	0800dbe4 	.word	0x0800dbe4
 8000fa0:	20000825 	.word	0x20000825
 8000fa4:	0800dbf0 	.word	0x0800dbf0
 8000fa8:	20000826 	.word	0x20000826
 8000fac:	0800dbfc 	.word	0x0800dbfc
 8000fb0:	20000827 	.word	0x20000827
 8000fb4:	0800dc08 	.word	0x0800dc08
 8000fb8:	2000082b 	.word	0x2000082b
 8000fbc:	0800dc14 	.word	0x0800dc14
 8000fc0:	2000082c 	.word	0x2000082c
 8000fc4:	0800dc20 	.word	0x0800dc20
 8000fc8:	2000082d 	.word	0x2000082d
 8000fcc:	0800dc2c 	.word	0x0800dc2c
 8000fd0:	20000831 	.word	0x20000831
 8000fd4:	0800dc34 	.word	0x0800dc34
 8000fd8:	20000832 	.word	0x20000832
 8000fdc:	0800dc3c 	.word	0x0800dc3c
 8000fe0:	20000833 	.word	0x20000833
 8000fe4:	0800dc44 	.word	0x0800dc44
 8000fe8:	20000837 	.word	0x20000837
 8000fec:	0800dc58 	.word	0x0800dc58
 8000ff0:	2000083c 	.word	0x2000083c
 8000ff4:	0800dc68 	.word	0x0800dc68
 8000ff8:	2000084a 	.word	0x2000084a
 8000ffc:	0800dc78 	.word	0x0800dc78
 8001000:	2000085c 	.word	0x2000085c
 8001004:	0800dc88 	.word	0x0800dc88
 8001008:	2000085d 	.word	0x2000085d
 800100c:	0800dc98 	.word	0x0800dc98
 8001010:	2000085e 	.word	0x2000085e
 8001014:	0800dca8 	.word	0x0800dca8
 8001018:	2000085f 	.word	0x2000085f
 800101c:	0800dcb8 	.word	0x0800dcb8
 8001020:	20000860 	.word	0x20000860
 8001024:	0800dccc 	.word	0x0800dccc
 8001028:	20000861 	.word	0x20000861
 800102c:	0800dce0 	.word	0x0800dce0
 8001030:	200008bf 	.word	0x200008bf
 8001034:	0800dcf8 	.word	0x0800dcf8
 8001038:	200008c1 	.word	0x200008c1
 800103c:	0800dd10 	.word	0x0800dd10
 8001040:	200008c3 	.word	0x200008c3
 8001044:	0800dd24 	.word	0x0800dd24
 8001048:	20000931 	.word	0x20000931
 800104c:	0800dd3c 	.word	0x0800dd3c
 8001050:	2000094a 	.word	0x2000094a
 8001054:	0800dd50 	.word	0x0800dd50
 8001058:	200009fb 	.word	0x200009fb
 800105c:	0800dd68 	.word	0x0800dd68
 8001060:	0800dd74 	.word	0x0800dd74
 8001064:	20000a90 	.word	0x20000a90
 8001068:	0800dd80 	.word	0x0800dd80
 800106c:	20000a94 	.word	0x20000a94
 8001070:	42360b61 	.word	0x42360b61
 8001074:	2300      	movs	r3, #0
 8001076:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <PrintBoardParameters+0x418>)
 8001078:	f8a2 3043 	strh.w	r3, [r2, #67]	; 0x43

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeData.frameCamAngle[ROLL], "Current Angle Roll =", sbgcSHORT);
 800107c:	2304      	movs	r3, #4
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <PrintBoardParameters+0x41c>)
 8001080:	4912      	ldr	r1, [pc, #72]	; (80010cc <PrintBoardParameters+0x420>)
 8001082:	4813      	ldr	r0, [pc, #76]	; (80010d0 <PrintBoardParameters+0x424>)
 8001084:	f005 f93e 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeData.frameCamAngle[PITCH], "Current Angle Pitch =", sbgcSHORT);
 8001088:	2304      	movs	r3, #4
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <PrintBoardParameters+0x428>)
 800108c:	4912      	ldr	r1, [pc, #72]	; (80010d8 <PrintBoardParameters+0x42c>)
 800108e:	4810      	ldr	r0, [pc, #64]	; (80010d0 <PrintBoardParameters+0x424>)
 8001090:	f005 f938 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeData.frameCamAngle[YAW], "Current Angle Yaw =", sbgcSHORT);
 8001094:	2304      	movs	r3, #4
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <PrintBoardParameters+0x430>)
 8001098:	4911      	ldr	r1, [pc, #68]	; (80010e0 <PrintBoardParameters+0x434>)
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <PrintBoardParameters+0x424>)
 800109c:	f005 f932 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeData.IMU_Temperature, "IMU Temperature =", sbgcCHAR);
 80010a0:	2302      	movs	r3, #2
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <PrintBoardParameters+0x438>)
 80010a4:	4910      	ldr	r1, [pc, #64]	; (80010e8 <PrintBoardParameters+0x43c>)
 80010a6:	480a      	ldr	r0, [pc, #40]	; (80010d0 <PrintBoardParameters+0x424>)
 80010a8:	f005 f92c 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintMessage(&SBGC32_Device, "____________________________\n\n");
 80010ac:	490f      	ldr	r1, [pc, #60]	; (80010ec <PrintBoardParameters+0x440>)
 80010ae:	4808      	ldr	r0, [pc, #32]	; (80010d0 <PrintBoardParameters+0x424>)
 80010b0:	f005 f914 	bl	80062dc <DebugSBGC32_PrintMessage>

	return SerialAPI_GetStatus(&SBGC32_Device);
 80010b4:	4806      	ldr	r0, [pc, #24]	; (80010d0 <PrintBoardParameters+0x424>)
 80010b6:	f7ff fcb1 	bl	8000a1c <SerialAPI_GetStatus>
 80010ba:	4603      	mov	r3, r0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000a8c 	.word	0x20000a8c
 80010c8:	0800dd8c 	.word	0x0800dd8c
 80010cc:	20000acb 	.word	0x20000acb
 80010d0:	200007a0 	.word	0x200007a0
 80010d4:	0800dda4 	.word	0x0800dda4
 80010d8:	20000acd 	.word	0x20000acd
 80010dc:	0800ddbc 	.word	0x0800ddbc
 80010e0:	20000acf 	.word	0x20000acf
 80010e4:	0800ddd0 	.word	0x0800ddd0
 80010e8:	20000ae0 	.word	0x20000ae0
 80010ec:	0800dde4 	.word	0x0800dde4

080010f0 <DemoControl>:


sbgcCommandStatus_t DemoControl (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
	/* Getting adjvars values */
	SBGC32_GetAdjVarValues(&SBGC32_Device, AdjVarGeneral, countof_(AdjVarGeneral));
 80010f6:	2203      	movs	r2, #3
 80010f8:	4985      	ldr	r1, [pc, #532]	; (8001310 <DemoControl+0x220>)
 80010fa:	4886      	ldr	r0, [pc, #536]	; (8001314 <DemoControl+0x224>)
 80010fc:	f007 fe4c 	bl	8008d98 <SBGC32_GetAdjVarValues>

	for (ui8 i = 0; i < countof_(AdjVarGeneral); i++)
 8001100:	2300      	movs	r3, #0
 8001102:	71fb      	strb	r3, [r7, #7]
 8001104:	e00d      	b.n	8001122 <DemoControl+0x32>
	/* Start with 0 values */
		SerialAPI_EditAdjVarValue(&AdjVarGeneral[i], 0);
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	4613      	mov	r3, r2
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	4413      	add	r3, r2
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	4a7f      	ldr	r2, [pc, #508]	; (8001310 <DemoControl+0x220>)
 8001112:	4413      	add	r3, r2
 8001114:	2100      	movs	r1, #0
 8001116:	4618      	mov	r0, r3
 8001118:	f007 fd0c 	bl	8008b34 <SerialAPI_EditAdjVarValue>
	for (ui8 i = 0; i < countof_(AdjVarGeneral); i++)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	3301      	adds	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d9ee      	bls.n	8001106 <DemoControl+0x16>

	sbgcDelay(500);
 8001128:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800112c:	f000 fe18 	bl	8001d60 <HAL_Delay>

	/* Run the Demonstration Cycle */
	for (ui8 i = 0; i < SBGC_DEMO_CONTROL_ITERATIONS; i++)
 8001130:	2300      	movs	r3, #0
 8001132:	71bb      	strb	r3, [r7, #6]
 8001134:	e0b2      	b.n	800129c <DemoControl+0x1ac>
	{
		/* Printing. SBGC_ADJ_VARS_NAMES parameter must be sbgcON */
		for (ui8 k = 0; k < countof_(AdjVarGeneral); k++)
 8001136:	2300      	movs	r3, #0
 8001138:	717b      	strb	r3, [r7, #5]
 800113a:	e018      	b.n	800116e <DemoControl+0x7e>
			DebugSBGC32_PrintStructElement(&SBGC32_Device, &AdjVarGeneral[k].value, AdjVarGeneral[k].name, sbgcSHORT);
 800113c:	797a      	ldrb	r2, [r7, #5]
 800113e:	4613      	mov	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	4413      	add	r3, r2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	3308      	adds	r3, #8
 8001148:	4a71      	ldr	r2, [pc, #452]	; (8001310 <DemoControl+0x220>)
 800114a:	4413      	add	r3, r2
 800114c:	1d19      	adds	r1, r3, #4
 800114e:	797a      	ldrb	r2, [r7, #5]
 8001150:	486f      	ldr	r0, [pc, #444]	; (8001310 <DemoControl+0x220>)
 8001152:	4613      	mov	r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4403      	add	r3, r0
 800115c:	3304      	adds	r3, #4
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2304      	movs	r3, #4
 8001162:	486c      	ldr	r0, [pc, #432]	; (8001314 <DemoControl+0x224>)
 8001164:	f005 f8ce 	bl	8006304 <DebugSBGC32_PrintStructElement>
		for (ui8 k = 0; k < countof_(AdjVarGeneral); k++)
 8001168:	797b      	ldrb	r3, [r7, #5]
 800116a:	3301      	adds	r3, #1
 800116c:	717b      	strb	r3, [r7, #5]
 800116e:	797b      	ldrb	r3, [r7, #5]
 8001170:	2b02      	cmp	r3, #2
 8001172:	d9e3      	bls.n	800113c <DemoControl+0x4c>

		Control.AxisC[YAW].angle = sbgcAngleToDegree(50);
 8001174:	4b68      	ldr	r3, [pc, #416]	; (8001318 <DemoControl+0x228>)
 8001176:	2200      	movs	r2, #0
 8001178:	f062 021c 	orn	r2, r2, #28
 800117c:	735a      	strb	r2, [r3, #13]
 800117e:	2200      	movs	r2, #0
 8001180:	f042 0208 	orr.w	r2, r2, #8
 8001184:	739a      	strb	r2, [r3, #14]
		Control.AxisC[PITCH].angle = sbgcAngleToDegree(-25);
 8001186:	4b64      	ldr	r3, [pc, #400]	; (8001318 <DemoControl+0x228>)
 8001188:	2200      	movs	r2, #0
 800118a:	f062 0270 	orn	r2, r2, #112	; 0x70
 800118e:	725a      	strb	r2, [r3, #9]
 8001190:	2200      	movs	r2, #0
 8001192:	f062 0204 	orn	r2, r2, #4
 8001196:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC32_Device, &Control);
 8001198:	495f      	ldr	r1, [pc, #380]	; (8001318 <DemoControl+0x228>)
 800119a:	485e      	ldr	r0, [pc, #376]	; (8001314 <DemoControl+0x224>)
 800119c:	f007 fe6e 	bl	8008e7c <SBGC32_Control>
		sbgcDelay(5000);
 80011a0:	f241 3088 	movw	r0, #5000	; 0x1388
 80011a4:	f000 fddc 	bl	8001d60 <HAL_Delay>

		Control.AxisC[PITCH].angle = sbgcAngleToDegree(25);
 80011a8:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <DemoControl+0x228>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f042 0271 	orr.w	r2, r2, #113	; 0x71
 80011b0:	725a      	strb	r2, [r3, #9]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f042 0204 	orr.w	r2, r2, #4
 80011b8:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC32_Device, &Control);
 80011ba:	4957      	ldr	r1, [pc, #348]	; (8001318 <DemoControl+0x228>)
 80011bc:	4855      	ldr	r0, [pc, #340]	; (8001314 <DemoControl+0x224>)
 80011be:	f007 fe5d 	bl	8008e7c <SBGC32_Control>
		sbgcDelay(5000);
 80011c2:	f241 3088 	movw	r0, #5000	; 0x1388
 80011c6:	f000 fdcb 	bl	8001d60 <HAL_Delay>

		Control.AxisC[YAW].angle = sbgcAngleToDegree(-50);
 80011ca:	4b53      	ldr	r3, [pc, #332]	; (8001318 <DemoControl+0x228>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f042 021d 	orr.w	r2, r2, #29
 80011d2:	735a      	strb	r2, [r3, #13]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f062 0208 	orn	r2, r2, #8
 80011da:	739a      	strb	r2, [r3, #14]
		SBGC32_Control(&SBGC32_Device, &Control);
 80011dc:	494e      	ldr	r1, [pc, #312]	; (8001318 <DemoControl+0x228>)
 80011de:	484d      	ldr	r0, [pc, #308]	; (8001314 <DemoControl+0x224>)
 80011e0:	f007 fe4c 	bl	8008e7c <SBGC32_Control>
		sbgcDelay(5000);
 80011e4:	f241 3088 	movw	r0, #5000	; 0x1388
 80011e8:	f000 fdba 	bl	8001d60 <HAL_Delay>

		Control.AxisC[PITCH].angle = sbgcAngleToDegree(-25);
 80011ec:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <DemoControl+0x228>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f062 0270 	orn	r2, r2, #112	; 0x70
 80011f4:	725a      	strb	r2, [r3, #9]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f062 0204 	orn	r2, r2, #4
 80011fc:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC32_Device, &Control);
 80011fe:	4946      	ldr	r1, [pc, #280]	; (8001318 <DemoControl+0x228>)
 8001200:	4844      	ldr	r0, [pc, #272]	; (8001314 <DemoControl+0x224>)
 8001202:	f007 fe3b 	bl	8008e7c <SBGC32_Control>
		sbgcDelay(5000);
 8001206:	f241 3088 	movw	r0, #5000	; 0x1388
 800120a:	f000 fda9 	bl	8001d60 <HAL_Delay>

		Control.AxisC[YAW].angle = 0;
 800120e:	4b42      	ldr	r3, [pc, #264]	; (8001318 <DemoControl+0x228>)
 8001210:	2200      	movs	r2, #0
 8001212:	735a      	strb	r2, [r3, #13]
 8001214:	2200      	movs	r2, #0
 8001216:	739a      	strb	r2, [r3, #14]
		Control.AxisC[PITCH].angle = 0;
 8001218:	4b3f      	ldr	r3, [pc, #252]	; (8001318 <DemoControl+0x228>)
 800121a:	2200      	movs	r2, #0
 800121c:	725a      	strb	r2, [r3, #9]
 800121e:	2200      	movs	r2, #0
 8001220:	729a      	strb	r2, [r3, #10]
		SBGC32_Control(&SBGC32_Device, &Control);
 8001222:	493d      	ldr	r1, [pc, #244]	; (8001318 <DemoControl+0x228>)
 8001224:	483b      	ldr	r0, [pc, #236]	; (8001314 <DemoControl+0x224>)
 8001226:	f007 fe29 	bl	8008e7c <SBGC32_Control>
		sbgcDelay(5000);
 800122a:	f241 3088 	movw	r0, #5000	; 0x1388
 800122e:	f000 fd97 	bl	8001d60 <HAL_Delay>

		BeeperSettings.mode = BEEP_MODE_COMPLETE;
 8001232:	4b3a      	ldr	r3, [pc, #232]	; (800131c <DemoControl+0x22c>)
 8001234:	2220      	movs	r2, #32
 8001236:	801a      	strh	r2, [r3, #0]
		SBGC32_PlayBeeper(&SBGC32_Device, &BeeperSettings);
 8001238:	4938      	ldr	r1, [pc, #224]	; (800131c <DemoControl+0x22c>)
 800123a:	4836      	ldr	r0, [pc, #216]	; (8001314 <DemoControl+0x224>)
 800123c:	f008 f918 	bl	8009470 <SBGC32_PlayBeeper>

		/* Adjustable variables re-setting */
		for (ui8 k = 0; k < countof_(AdjVarGeneral); k++)
 8001240:	2300      	movs	r3, #0
 8001242:	713b      	strb	r3, [r7, #4]
 8001244:	e016      	b.n	8001274 <DemoControl+0x184>
			SerialAPI_EditAdjVarValue(&AdjVarGeneral[k], AdjVarGeneral[k].value + SBGC_ADJ_VAR_INCREASING_STEP);
 8001246:	793a      	ldrb	r2, [r7, #4]
 8001248:	4613      	mov	r3, r2
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	4413      	add	r3, r2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <DemoControl+0x220>)
 8001252:	1898      	adds	r0, r3, r2
 8001254:	793a      	ldrb	r2, [r7, #4]
 8001256:	492e      	ldr	r1, [pc, #184]	; (8001310 <DemoControl+0x220>)
 8001258:	4613      	mov	r3, r2
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	330c      	adds	r3, #12
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	33c8      	adds	r3, #200	; 0xc8
 8001268:	4619      	mov	r1, r3
 800126a:	f007 fc63 	bl	8008b34 <SerialAPI_EditAdjVarValue>
		for (ui8 k = 0; k < countof_(AdjVarGeneral); k++)
 800126e:	793b      	ldrb	r3, [r7, #4]
 8001270:	3301      	adds	r3, #1
 8001272:	713b      	strb	r3, [r7, #4]
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	2b02      	cmp	r3, #2
 8001278:	d9e5      	bls.n	8001246 <DemoControl+0x156>

		SBGC32_SetAdjVarValues(&SBGC32_Device, AdjVarGeneral, countof_(AdjVarGeneral), &Confirm);
 800127a:	4b29      	ldr	r3, [pc, #164]	; (8001320 <DemoControl+0x230>)
 800127c:	2203      	movs	r2, #3
 800127e:	4924      	ldr	r1, [pc, #144]	; (8001310 <DemoControl+0x220>)
 8001280:	4824      	ldr	r0, [pc, #144]	; (8001314 <DemoControl+0x224>)
 8001282:	f007 fca9 	bl	8008bd8 <SBGC32_SetAdjVarValues>

		DebugSBGC32_PrintMessage(&SBGC32_Device, "____________________________\n\n");
 8001286:	4927      	ldr	r1, [pc, #156]	; (8001324 <DemoControl+0x234>)
 8001288:	4822      	ldr	r0, [pc, #136]	; (8001314 <DemoControl+0x224>)
 800128a:	f005 f827 	bl	80062dc <DebugSBGC32_PrintMessage>

		sbgcDelay(500);
 800128e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001292:	f000 fd65 	bl	8001d60 <HAL_Delay>
	for (ui8 i = 0; i < SBGC_DEMO_CONTROL_ITERATIONS; i++)
 8001296:	79bb      	ldrb	r3, [r7, #6]
 8001298:	3301      	adds	r3, #1
 800129a:	71bb      	strb	r3, [r7, #6]
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	f67f af49 	bls.w	8001136 <DemoControl+0x46>
	}

	for (ui8 i = 0; i < countof_(AdjVarGeneral); i++)
 80012a4:	2300      	movs	r3, #0
 80012a6:	70fb      	strb	r3, [r7, #3]
 80012a8:	e018      	b.n	80012dc <DemoControl+0x1ec>
		DebugSBGC32_PrintStructElement(&SBGC32_Device, &AdjVarGeneral[i].value, AdjVarGeneral[i].name, sbgcSHORT);
 80012aa:	78fa      	ldrb	r2, [r7, #3]
 80012ac:	4613      	mov	r3, r2
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	4413      	add	r3, r2
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	3308      	adds	r3, #8
 80012b6:	4a16      	ldr	r2, [pc, #88]	; (8001310 <DemoControl+0x220>)
 80012b8:	4413      	add	r3, r2
 80012ba:	1d19      	adds	r1, r3, #4
 80012bc:	78fa      	ldrb	r2, [r7, #3]
 80012be:	4814      	ldr	r0, [pc, #80]	; (8001310 <DemoControl+0x220>)
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4403      	add	r3, r0
 80012ca:	3304      	adds	r3, #4
 80012cc:	681a      	ldr	r2, [r3, #0]
 80012ce:	2304      	movs	r3, #4
 80012d0:	4810      	ldr	r0, [pc, #64]	; (8001314 <DemoControl+0x224>)
 80012d2:	f005 f817 	bl	8006304 <DebugSBGC32_PrintStructElement>
	for (ui8 i = 0; i < countof_(AdjVarGeneral); i++)
 80012d6:	78fb      	ldrb	r3, [r7, #3]
 80012d8:	3301      	adds	r3, #1
 80012da:	70fb      	strb	r3, [r7, #3]
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d9e3      	bls.n	80012aa <DemoControl+0x1ba>

	DebugSBGC32_PrintMessage(&SBGC32_Device, "____________________________\n\n");
 80012e2:	4910      	ldr	r1, [pc, #64]	; (8001324 <DemoControl+0x234>)
 80012e4:	480b      	ldr	r0, [pc, #44]	; (8001314 <DemoControl+0x224>)
 80012e6:	f004 fff9 	bl	80062dc <DebugSBGC32_PrintMessage>

	Control.mode[PITCH] = CtrlMODE_NO_CONTROL;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <DemoControl+0x228>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	705a      	strb	r2, [r3, #1]
	Control.mode[YAW] = CtrlMODE_NO_CONTROL;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <DemoControl+0x228>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	709a      	strb	r2, [r3, #2]
	SBGC32_Control(&SBGC32_Device, &Control);
 80012f6:	4908      	ldr	r1, [pc, #32]	; (8001318 <DemoControl+0x228>)
 80012f8:	4806      	ldr	r0, [pc, #24]	; (8001314 <DemoControl+0x224>)
 80012fa:	f007 fdbf 	bl	8008e7c <SBGC32_Control>
		for (ui8 i = 0; i < countof_(AdjVarGeneral); i++)
			AdjVarGeneral[i].saveFlag = AV_SAVED; */

	/* or SBGC32_SaveAdjVarsToEEPROM(&SBGC32_Device, AdjVarGeneral, countof_(AdjVarGeneral), SBGC_NO_CONFIRM); */

	return SerialAPI_GetStatus(&SBGC32_Device);
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <DemoControl+0x224>)
 8001300:	f7ff fb8c 	bl	8000a1c <SerialAPI_GetStatus>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200007ac 	.word	0x200007ac
 8001314:	200007a0 	.word	0x200007a0
 8001318:	200007e8 	.word	0x200007e8
 800131c:	20000b7c 	.word	0x20000b7c
 8001320:	20000b90 	.word	0x20000b90
 8001324:	0800dde4 	.word	0x0800dde4

08001328 <PrintDataStream>:


void PrintDataStream (void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
	i16 frameCamAngleTemp;

	frameCamAngleTemp = sbgcDegreeToAngle(RealTimeDataCustom.frameCamAngle[ROLL]);
 800132e:	4b43      	ldr	r3, [pc, #268]	; (800143c <PrintDataStream+0x114>)
 8001330:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d010      	beq.n	800135a <PrintDataStream+0x32>
 8001338:	4b40      	ldr	r3, [pc, #256]	; (800143c <PrintDataStream+0x114>)
 800133a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800133e:	ee07 3a90 	vmov	s15, r3
 8001342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001346:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001440 <PrintDataStream+0x118>
 800134a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800134e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001352:	ee17 3a90 	vmov	r3, s15
 8001356:	b21b      	sxth	r3, r3
 8001358:	e000      	b.n	800135c <PrintDataStream+0x34>
 800135a:	2300      	movs	r3, #0
 800135c:	80fb      	strh	r3, [r7, #6]
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &frameCamAngleTemp, "Current Angle Roll =", sbgcSHORT);
 800135e:	1db9      	adds	r1, r7, #6
 8001360:	2304      	movs	r3, #4
 8001362:	4a38      	ldr	r2, [pc, #224]	; (8001444 <PrintDataStream+0x11c>)
 8001364:	4838      	ldr	r0, [pc, #224]	; (8001448 <PrintDataStream+0x120>)
 8001366:	f004 ffcd 	bl	8006304 <DebugSBGC32_PrintStructElement>

	frameCamAngleTemp = sbgcDegreeToAngle(RealTimeDataCustom.frameCamAngle[PITCH]);
 800136a:	4b34      	ldr	r3, [pc, #208]	; (800143c <PrintDataStream+0x114>)
 800136c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d010      	beq.n	8001396 <PrintDataStream+0x6e>
 8001374:	4b31      	ldr	r3, [pc, #196]	; (800143c <PrintDataStream+0x114>)
 8001376:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800137a:	ee07 3a90 	vmov	s15, r3
 800137e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001382:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001440 <PrintDataStream+0x118>
 8001386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800138a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	b21b      	sxth	r3, r3
 8001394:	e000      	b.n	8001398 <PrintDataStream+0x70>
 8001396:	2300      	movs	r3, #0
 8001398:	80fb      	strh	r3, [r7, #6]
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &frameCamAngleTemp, "Current Angle Pitch =", sbgcSHORT);
 800139a:	1db9      	adds	r1, r7, #6
 800139c:	2304      	movs	r3, #4
 800139e:	4a2b      	ldr	r2, [pc, #172]	; (800144c <PrintDataStream+0x124>)
 80013a0:	4829      	ldr	r0, [pc, #164]	; (8001448 <PrintDataStream+0x120>)
 80013a2:	f004 ffaf 	bl	8006304 <DebugSBGC32_PrintStructElement>

	frameCamAngleTemp = sbgcDegreeToAngle(RealTimeDataCustom.frameCamAngle[YAW]);
 80013a6:	4b25      	ldr	r3, [pc, #148]	; (800143c <PrintDataStream+0x114>)
 80013a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d010      	beq.n	80013d2 <PrintDataStream+0xaa>
 80013b0:	4b22      	ldr	r3, [pc, #136]	; (800143c <PrintDataStream+0x114>)
 80013b2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013be:	eddf 6a20 	vldr	s13, [pc, #128]	; 8001440 <PrintDataStream+0x118>
 80013c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ca:	ee17 3a90 	vmov	r3, s15
 80013ce:	b21b      	sxth	r3, r3
 80013d0:	e000      	b.n	80013d4 <PrintDataStream+0xac>
 80013d2:	2300      	movs	r3, #0
 80013d4:	80fb      	strh	r3, [r7, #6]
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &frameCamAngleTemp, "Current Angle Yaw =", sbgcSHORT);
 80013d6:	1db9      	adds	r1, r7, #6
 80013d8:	2304      	movs	r3, #4
 80013da:	4a1d      	ldr	r2, [pc, #116]	; (8001450 <PrintDataStream+0x128>)
 80013dc:	481a      	ldr	r0, [pc, #104]	; (8001448 <PrintDataStream+0x120>)
 80013de:	f004 ff91 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.gyroData[ROLL], "Gyro Roll =", sbgcSHORT);
 80013e2:	2304      	movs	r3, #4
 80013e4:	4a1b      	ldr	r2, [pc, #108]	; (8001454 <PrintDataStream+0x12c>)
 80013e6:	491c      	ldr	r1, [pc, #112]	; (8001458 <PrintDataStream+0x130>)
 80013e8:	4817      	ldr	r0, [pc, #92]	; (8001448 <PrintDataStream+0x120>)
 80013ea:	f004 ff8b 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.gyroData[PITCH], "Gyro Pitch =", sbgcSHORT);
 80013ee:	2304      	movs	r3, #4
 80013f0:	4a1a      	ldr	r2, [pc, #104]	; (800145c <PrintDataStream+0x134>)
 80013f2:	491b      	ldr	r1, [pc, #108]	; (8001460 <PrintDataStream+0x138>)
 80013f4:	4814      	ldr	r0, [pc, #80]	; (8001448 <PrintDataStream+0x120>)
 80013f6:	f004 ff85 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.gyroData[YAW], "Gyro Yaw =", sbgcSHORT);
 80013fa:	2304      	movs	r3, #4
 80013fc:	4a19      	ldr	r2, [pc, #100]	; (8001464 <PrintDataStream+0x13c>)
 80013fe:	491a      	ldr	r1, [pc, #104]	; (8001468 <PrintDataStream+0x140>)
 8001400:	4811      	ldr	r0, [pc, #68]	; (8001448 <PrintDataStream+0x120>)
 8001402:	f004 ff7f 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.accData[ROLL], "Acc Roll =", sbgcSHORT);
 8001406:	2304      	movs	r3, #4
 8001408:	4a18      	ldr	r2, [pc, #96]	; (800146c <PrintDataStream+0x144>)
 800140a:	4919      	ldr	r1, [pc, #100]	; (8001470 <PrintDataStream+0x148>)
 800140c:	480e      	ldr	r0, [pc, #56]	; (8001448 <PrintDataStream+0x120>)
 800140e:	f004 ff79 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.accData[PITCH], "Acc Pitch =", sbgcSHORT);
 8001412:	2304      	movs	r3, #4
 8001414:	4a17      	ldr	r2, [pc, #92]	; (8001474 <PrintDataStream+0x14c>)
 8001416:	4918      	ldr	r1, [pc, #96]	; (8001478 <PrintDataStream+0x150>)
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <PrintDataStream+0x120>)
 800141a:	f004 ff73 	bl	8006304 <DebugSBGC32_PrintStructElement>
	DebugSBGC32_PrintStructElement(&SBGC32_Device, &RealTimeDataCustom.accData[YAW], "Acc Yaw =", sbgcSHORT);
 800141e:	2304      	movs	r3, #4
 8001420:	4a16      	ldr	r2, [pc, #88]	; (800147c <PrintDataStream+0x154>)
 8001422:	4917      	ldr	r1, [pc, #92]	; (8001480 <PrintDataStream+0x158>)
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <PrintDataStream+0x120>)
 8001426:	f004 ff6d 	bl	8006304 <DebugSBGC32_PrintStructElement>

	DebugSBGC32_PrintMessage(&SBGC32_Device, "____________________________\n\n");
 800142a:	4916      	ldr	r1, [pc, #88]	; (8001484 <PrintDataStream+0x15c>)
 800142c:	4806      	ldr	r0, [pc, #24]	; (8001448 <PrintDataStream+0x120>)
 800142e:	f004 ff55 	bl	80062dc <DebugSBGC32_PrintMessage>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000b98 	.word	0x20000b98
 8001440:	42360b61 	.word	0x42360b61
 8001444:	0800dd8c 	.word	0x0800dd8c
 8001448:	200007a0 	.word	0x200007a0
 800144c:	0800dda4 	.word	0x0800dda4
 8001450:	0800ddbc 	.word	0x0800ddbc
 8001454:	0800de04 	.word	0x0800de04
 8001458:	20000ba0 	.word	0x20000ba0
 800145c:	0800de10 	.word	0x0800de10
 8001460:	20000ba2 	.word	0x20000ba2
 8001464:	0800de20 	.word	0x0800de20
 8001468:	20000ba4 	.word	0x20000ba4
 800146c:	0800dd68 	.word	0x0800dd68
 8001470:	20000ba6 	.word	0x20000ba6
 8001474:	0800dd74 	.word	0x0800dd74
 8001478:	20000ba8 	.word	0x20000ba8
 800147c:	0800dd80 	.word	0x0800dd80
 8001480:	20000baa 	.word	0x20000baa
 8001484:	0800dde4 	.word	0x0800dde4

08001488 <SerialAPI_FatalErrorHandler>:


void SerialAPI_FatalErrorHandler (void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800148c:	b672      	cpsid	i
}
 800148e:	bf00      	nop
	/* User common error handler */
	__disable_irq();

	while (1);
 8001490:	e7fe      	b.n	8001490 <SerialAPI_FatalErrorHandler+0x8>

08001492 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001496:	b672      	cpsid	i
}
 8001498:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149a:	e7fe      	b.n	800149a <Error_Handler+0x8>

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_MspInit+0x44>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_MspInit+0x44>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_MspInit+0x44>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <HAL_MspInit+0x44>)
 80014bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014be:	4a08      	ldr	r2, [pc, #32]	; (80014e0 <HAL_MspInit+0x44>)
 80014c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014c4:	6453      	str	r3, [r2, #68]	; 0x44
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_MspInit+0x44>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <NMI_Handler+0x4>

080014ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ea:	b480      	push	{r7}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ee:	e7fe      	b.n	80014ee <HardFault_Handler+0x4>

080014f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <MemManage_Handler+0x4>

080014f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <BusFault_Handler+0x4>

080014fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <UsageFault_Handler+0x4>

08001502 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr

0800151e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001530:	f000 fbf6 	bl	8001d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001534:	bf00      	nop
 8001536:	bd80      	pop	{r7, pc}

08001538 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/*  - - - - - TIM2 Interrupt Flags Check - - - - - */

	sbgcTimerIRQ_Handler(&SBGC32_Device);
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <TIM2_IRQHandler+0x38>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	2b01      	cmp	r3, #1
 8001548:	d10c      	bne.n	8001564 <TIM2_IRQHandler+0x2c>
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <TIM2_IRQHandler+0x38>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	f003 0301 	and.w	r3, r3, #1
 8001554:	2b01      	cmp	r3, #1
 8001556:	d105      	bne.n	8001564 <TIM2_IRQHandler+0x2c>
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <TIM2_IRQHandler+0x3c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f007 f937 	bl	80087d2 <DriverSBGC32_TimerCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <TIM2_IRQHandler+0x38>)
 8001566:	f002 f94b 	bl	8003800 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000bb0 	.word	0x20000bb0
 8001574:	200007a0 	.word	0x200007a0

08001578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/* - - - - - UART1 Interrupt Flags Check - - - - - */

	sbgcUART_IRQ_Handler(&SBGC32_Device);
 800157c:	4b1b      	ldr	r3, [pc, #108]	; (80015ec <USART1_IRQHandler+0x74>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001586:	2b40      	cmp	r3, #64	; 0x40
 8001588:	d10c      	bne.n	80015a4 <USART1_IRQHandler+0x2c>
 800158a:	4b18      	ldr	r3, [pc, #96]	; (80015ec <USART1_IRQHandler+0x74>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001594:	2b00      	cmp	r3, #0
 8001596:	d005      	beq.n	80015a4 <USART1_IRQHandler+0x2c>
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <USART1_IRQHandler+0x78>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f007 f986 	bl	80088b0 <DriverSBGC32_UART_TxCallBack>
 80015a4:	4b11      	ldr	r3, [pc, #68]	; (80015ec <USART1_IRQHandler+0x74>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 0320 	and.w	r3, r3, #32
 80015ae:	2b20      	cmp	r3, #32
 80015b0:	d10c      	bne.n	80015cc <USART1_IRQHandler+0x54>
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <USART1_IRQHandler+0x74>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0320 	and.w	r3, r3, #32
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <USART1_IRQHandler+0x54>
 80015c0:	4b0b      	ldr	r3, [pc, #44]	; (80015f0 <USART1_IRQHandler+0x78>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f007 fa14 	bl	80089f4 <DriverSBGC32_UART_RxCallBack>
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <USART1_IRQHandler+0x74>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b08      	cmp	r3, #8
 80015d8:	d103      	bne.n	80015e2 <USART1_IRQHandler+0x6a>
 80015da:	4b04      	ldr	r3, [pc, #16]	; (80015ec <USART1_IRQHandler+0x74>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2208      	movs	r2, #8
 80015e0:	621a      	str	r2, [r3, #32]

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015e2:	4802      	ldr	r0, [pc, #8]	; (80015ec <USART1_IRQHandler+0x74>)
 80015e4:	f002 fde0 	bl	80041a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000bfc 	.word	0x20000bfc
 80015f0:	200007a0 	.word	0x200007a0

080015f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
	return 1;
 80015f8:	2301      	movs	r3, #1
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <_kill>:

int _kill(int pid, int sig)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800160e:	f009 f84b 	bl	800a6a8 <__errno>
 8001612:	4603      	mov	r3, r0
 8001614:	2216      	movs	r2, #22
 8001616:	601a      	str	r2, [r3, #0]
	return -1;
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <_exit>:

void _exit (int status)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800162c:	f04f 31ff 	mov.w	r1, #4294967295
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ffe7 	bl	8001604 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001636:	e7fe      	b.n	8001636 <_exit+0x12>

08001638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	60b9      	str	r1, [r7, #8]
 8001642:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	e00a      	b.n	8001660 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800164a:	f3af 8000 	nop.w
 800164e:	4601      	mov	r1, r0
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	1c5a      	adds	r2, r3, #1
 8001654:	60ba      	str	r2, [r7, #8]
 8001656:	b2ca      	uxtb	r2, r1
 8001658:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	dbf0      	blt.n	800164a <_read+0x12>
	}

return len;
 8001668:	687b      	ldr	r3, [r7, #4]
}
 800166a:	4618      	mov	r0, r3
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}

08001672 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b086      	sub	sp, #24
 8001676:	af00      	add	r7, sp, #0
 8001678:	60f8      	str	r0, [r7, #12]
 800167a:	60b9      	str	r1, [r7, #8]
 800167c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	e009      	b.n	8001698 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	3301      	adds	r3, #1
 8001696:	617b      	str	r3, [r7, #20]
 8001698:	697a      	ldr	r2, [r7, #20]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	429a      	cmp	r2, r3
 800169e:	dbf1      	blt.n	8001684 <_write+0x12>
	}
	return len;
 80016a0:	687b      	ldr	r3, [r7, #4]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <_close>:

int _close(int file)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
	return -1;
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr

080016c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c2:	b480      	push	{r7}
 80016c4:	b083      	sub	sp, #12
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d2:	605a      	str	r2, [r3, #4]
	return 0;
 80016d4:	2300      	movs	r3, #0
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_isatty>:

int _isatty(int file)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
	return 1;
 80016ea:	2301      	movs	r3, #1
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
	return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3714      	adds	r7, #20
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f008 ffb0 	bl	800a6a8 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20080000 	.word	0x20080000
 8001774:	00000400 	.word	0x00000400
 8001778:	20000bac 	.word	0x20000bac
 800177c:	20000e68 	.word	0x20000e68

08001780 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <SystemInit+0x20>)
 8001786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178a:	4a05      	ldr	r2, [pc, #20]	; (80017a0 <SystemInit+0x20>)
 800178c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0310 	add.w	r3, r7, #16
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017c2:	4b1e      	ldr	r3, [pc, #120]	; (800183c <MX_TIM2_Init+0x98>)
 80017c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80017ca:	4b1c      	ldr	r3, [pc, #112]	; (800183c <MX_TIM2_Init+0x98>)
 80017cc:	226b      	movs	r2, #107	; 0x6b
 80017ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d0:	4b1a      	ldr	r3, [pc, #104]	; (800183c <MX_TIM2_Init+0x98>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80017d6:	4b19      	ldr	r3, [pc, #100]	; (800183c <MX_TIM2_Init+0x98>)
 80017d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80017dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017de:	4b17      	ldr	r3, [pc, #92]	; (800183c <MX_TIM2_Init+0x98>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e4:	4b15      	ldr	r3, [pc, #84]	; (800183c <MX_TIM2_Init+0x98>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ea:	4814      	ldr	r0, [pc, #80]	; (800183c <MX_TIM2_Init+0x98>)
 80017ec:	f001 ff38 	bl	8003660 <HAL_TIM_Base_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017f6:	f7ff fe4c 	bl	8001492 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4619      	mov	r1, r3
 8001806:	480d      	ldr	r0, [pc, #52]	; (800183c <MX_TIM2_Init+0x98>)
 8001808:	f002 f91a 	bl	8003a40 <HAL_TIM_ConfigClockSource>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001812:	f7ff fe3e 	bl	8001492 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001816:	2320      	movs	r3, #32
 8001818:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800181a:	2300      	movs	r3, #0
 800181c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800181e:	1d3b      	adds	r3, r7, #4
 8001820:	4619      	mov	r1, r3
 8001822:	4806      	ldr	r0, [pc, #24]	; (800183c <MX_TIM2_Init+0x98>)
 8001824:	f002 fb42 	bl	8003eac <HAL_TIMEx_MasterConfigSynchronization>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800182e:	f7ff fe30 	bl	8001492 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	3720      	adds	r7, #32
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000bb0 	.word	0x20000bb0

08001840 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001850:	d113      	bne.n	800187a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_TIM_Base_MspInit+0x44>)
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_TIM_Base_MspInit+0x44>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	6413      	str	r3, [r2, #64]	; 0x40
 800185e:	4b09      	ldr	r3, [pc, #36]	; (8001884 <HAL_TIM_Base_MspInit+0x44>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800186a:	2200      	movs	r2, #0
 800186c:	2105      	movs	r1, #5
 800186e:	201c      	movs	r0, #28
 8001870:	f000 fb75 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001874:	201c      	movs	r0, #28
 8001876:	f000 fb8e 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023800 	.word	0x40023800

08001888 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 800188e:	4a15      	ldr	r2, [pc, #84]	; (80018e4 <MX_USART1_UART_Init+0x5c>)
 8001890:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 8001894:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001898:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 80018ae:	220c      	movs	r2, #12
 80018b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART1_UART_Init+0x58>)
 80018cc:	f002 fb9a 	bl	8004004 <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80018d6:	f7ff fddc 	bl	8001492 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000bfc 	.word	0x20000bfc
 80018e4:	40011000 	.word	0x40011000

080018e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018ec:	4b14      	ldr	r3, [pc, #80]	; (8001940 <MX_USART2_UART_Init+0x58>)
 80018ee:	4a15      	ldr	r2, [pc, #84]	; (8001944 <MX_USART2_UART_Init+0x5c>)
 80018f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018f2:	4b13      	ldr	r3, [pc, #76]	; (8001940 <MX_USART2_UART_Init+0x58>)
 80018f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <MX_USART2_UART_Init+0x58>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001900:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <MX_USART2_UART_Init+0x58>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <MX_USART2_UART_Init+0x58>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_USART2_UART_Init+0x58>)
 800190e:	220c      	movs	r2, #12
 8001910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_USART2_UART_Init+0x58>)
 8001914:	2200      	movs	r2, #0
 8001916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_USART2_UART_Init+0x58>)
 800191a:	2200      	movs	r2, #0
 800191c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_USART2_UART_Init+0x58>)
 8001920:	2200      	movs	r2, #0
 8001922:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_USART2_UART_Init+0x58>)
 8001926:	2200      	movs	r2, #0
 8001928:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800192a:	4805      	ldr	r0, [pc, #20]	; (8001940 <MX_USART2_UART_Init+0x58>)
 800192c:	f002 fb6a 	bl	8004004 <HAL_UART_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001936:	f7ff fdac 	bl	8001492 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000c84 	.word	0x20000c84
 8001944:	40004400 	.word	0x40004400

08001948 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b0b0      	sub	sp, #192	; 0xc0
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	2290      	movs	r2, #144	; 0x90
 8001966:	2100      	movs	r1, #0
 8001968:	4618      	mov	r0, r3
 800196a:	f008 fe28 	bl	800a5be <memset>
  if(uartHandle->Instance==USART1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a51      	ldr	r2, [pc, #324]	; (8001ab8 <HAL_UART_MspInit+0x170>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d15a      	bne.n	8001a2e <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001978:	2340      	movs	r3, #64	; 0x40
 800197a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800197c:	2300      	movs	r3, #0
 800197e:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001980:	f107 031c 	add.w	r3, r7, #28
 8001984:	4618      	mov	r0, r3
 8001986:	f001 fa43 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001990:	f7ff fd7f 	bl	8001492 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001994:	4b49      	ldr	r3, [pc, #292]	; (8001abc <HAL_UART_MspInit+0x174>)
 8001996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001998:	4a48      	ldr	r2, [pc, #288]	; (8001abc <HAL_UART_MspInit+0x174>)
 800199a:	f043 0310 	orr.w	r3, r3, #16
 800199e:	6453      	str	r3, [r2, #68]	; 0x44
 80019a0:	4b46      	ldr	r3, [pc, #280]	; (8001abc <HAL_UART_MspInit+0x174>)
 80019a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a4:	f003 0310 	and.w	r3, r3, #16
 80019a8:	61bb      	str	r3, [r7, #24]
 80019aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ac:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_UART_MspInit+0x174>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	4a42      	ldr	r2, [pc, #264]	; (8001abc <HAL_UART_MspInit+0x174>)
 80019b2:	f043 0302 	orr.w	r3, r3, #2
 80019b6:	6313      	str	r3, [r2, #48]	; 0x30
 80019b8:	4b40      	ldr	r3, [pc, #256]	; (8001abc <HAL_UART_MspInit+0x174>)
 80019ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80019c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019cc:	2302      	movs	r3, #2
 80019ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d8:	2303      	movs	r3, #3
 80019da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80019de:	2304      	movs	r3, #4
 80019e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80019e8:	4619      	mov	r1, r3
 80019ea:	4835      	ldr	r0, [pc, #212]	; (8001ac0 <HAL_UART_MspInit+0x178>)
 80019ec:	f000 fb80 	bl	80020f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001a0a:	2304      	movs	r3, #4
 8001a0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a10:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a14:	4619      	mov	r1, r3
 8001a16:	482a      	ldr	r0, [pc, #168]	; (8001ac0 <HAL_UART_MspInit+0x178>)
 8001a18:	f000 fb6a 	bl	80020f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2101      	movs	r1, #1
 8001a20:	2025      	movs	r0, #37	; 0x25
 8001a22:	f000 fa9c 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001a26:	2025      	movs	r0, #37	; 0x25
 8001a28:	f000 fab5 	bl	8001f96 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a2c:	e03f      	b.n	8001aae <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a24      	ldr	r2, [pc, #144]	; (8001ac4 <HAL_UART_MspInit+0x17c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d13a      	bne.n	8001aae <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4618      	mov	r0, r3
 8001a46:	f001 f9e3 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8001a50:	f7ff fd1f 	bl	8001492 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a54:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_UART_MspInit+0x174>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	4a18      	ldr	r2, [pc, #96]	; (8001abc <HAL_UART_MspInit+0x174>)
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a60:	4b16      	ldr	r3, [pc, #88]	; (8001abc <HAL_UART_MspInit+0x174>)
 8001a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_UART_MspInit+0x174>)
 8001a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_UART_MspInit+0x174>)
 8001a72:	f043 0301 	orr.w	r3, r3, #1
 8001a76:	6313      	str	r3, [r2, #48]	; 0x30
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <HAL_UART_MspInit+0x174>)
 8001a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a84:	230c      	movs	r3, #12
 8001a86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a96:	2303      	movs	r3, #3
 8001a98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a9c:	2307      	movs	r3, #7
 8001a9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4807      	ldr	r0, [pc, #28]	; (8001ac8 <HAL_UART_MspInit+0x180>)
 8001aaa:	f000 fb21 	bl	80020f0 <HAL_GPIO_Init>
}
 8001aae:	bf00      	nop
 8001ab0:	37c0      	adds	r7, #192	; 0xc0
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40011000 	.word	0x40011000
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	40020000 	.word	0x40020000

08001acc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad0:	480d      	ldr	r0, [pc, #52]	; (8001b08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ad2:	490e      	ldr	r1, [pc, #56]	; (8001b0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae8:	4c0b      	ldr	r4, [pc, #44]	; (8001b18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001af6:	f7ff fe43 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f008 fddb 	bl	800a6b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001afe:	f7fe ffc5 	bl	8000a8c <main>
  bx  lr    
 8001b02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b04:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001b08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b0c:	20000784 	.word	0x20000784
  ldr r2, =_sidata
 8001b10:	0800f7b8 	.word	0x0800f7b8
  ldr r2, =_sbss
 8001b14:	20000784 	.word	0x20000784
  ldr r4, =_ebss
 8001b18:	20000e68 	.word	0x20000e68

08001b1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC_IRQHandler>

08001b1e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8001b1e:	b580      	push	{r7, lr}
 8001b20:	b082      	sub	sp, #8
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d104      	bne.n	8001b36 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b2c:	b672      	cpsid	i
}
 8001b2e:	bf00      	nop
 8001b30:	f7ff fcaf 	bl	8001492 <Error_Handler>
 8001b34:	e7fe      	b.n	8001b34 <stm32_lock_init+0x16>
  lock->flag = 0;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	705a      	strb	r2, [r3, #1]
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b084      	sub	sp, #16
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b52:	f3ef 8310 	mrs	r3, PRIMASK
 8001b56:	60bb      	str	r3, [r7, #8]
  return(result);
 8001b58:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b62:	b672      	cpsid	i
}
 8001b64:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b66:	f3bf 8f4f 	dsb	sy
}
 8001b6a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b6c:	f3bf 8f6f 	isb	sy
}
 8001b70:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d104      	bne.n	8001b82 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b78:	b672      	cpsid	i
}
 8001b7a:	bf00      	nop
 8001b7c:	f7ff fc89 	bl	8001492 <Error_Handler>
 8001b80:	e7fe      	b.n	8001b80 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	785b      	ldrb	r3, [r3, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d103      	bne.n	8001b92 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	7bfa      	ldrb	r2, [r7, #15]
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e008      	b.n	8001ba4 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	785b      	ldrb	r3, [r3, #1]
 8001b96:	2bff      	cmp	r3, #255	; 0xff
 8001b98:	d104      	bne.n	8001ba4 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b9a:	b672      	cpsid	i
}
 8001b9c:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001b9e:	f7ff fc78 	bl	8001492 <Error_Handler>
 8001ba2:	e7fe      	b.n	8001ba2 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	785b      	ldrb	r3, [r3, #1]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	705a      	strb	r2, [r3, #1]
}
 8001bb0:	bf00      	nop
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d104      	bne.n	8001bd0 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc6:	b672      	cpsid	i
}
 8001bc8:	bf00      	nop
 8001bca:	f7ff fc62 	bl	8001492 <Error_Handler>
 8001bce:	e7fe      	b.n	8001bce <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	785b      	ldrb	r3, [r3, #1]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d104      	bne.n	8001be2 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 8001bdc:	f7ff fc59 	bl	8001492 <Error_Handler>
 8001be0:	e7fe      	b.n	8001be0 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	785b      	ldrb	r3, [r3, #1]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	b2da      	uxtb	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	785b      	ldrb	r3, [r3, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d105      	bne.n	8001c02 <stm32_lock_release+0x4a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001bfe:	b662      	cpsie	i
}
 8001c00:	bf00      	nop
  {
    __enable_irq();
  }
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d105      	bne.n	8001c24 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001c18:	f008 fd46 	bl	800a6a8 <__errno>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2216      	movs	r2, #22
 8001c20:	601a      	str	r2, [r3, #0]
    return;
 8001c22:	e015      	b.n	8001c50 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001c24:	2002      	movs	r0, #2
 8001c26:	f007 fcb3 	bl	8009590 <malloc>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff ff6d 	bl	8001b1e <stm32_lock_init>
    return;
 8001c44:	e004      	b.n	8001c50 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c46:	b672      	cpsid	i
}
 8001c48:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001c4a:	f7ff fc22 	bl	8001492 <Error_Handler>
 8001c4e:	e7fe      	b.n	8001c4e <__retarget_lock_init_recursive+0x44>
}
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d104      	bne.n	8001c6e <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c64:	b672      	cpsid	i
}
 8001c66:	bf00      	nop
 8001c68:	f7ff fc13 	bl	8001492 <Error_Handler>
 8001c6c:	e7fe      	b.n	8001c6c <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff6a 	bl	8001b4a <stm32_lock_acquire>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d104      	bne.n	8001c96 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
 8001c90:	f7ff fbff 	bl	8001492 <Error_Handler>
 8001c94:	e7fe      	b.n	8001c94 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff8d 	bl	8001bb8 <stm32_lock_release>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001caa:	2003      	movs	r0, #3
 8001cac:	f000 f94c 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb0:	200f      	movs	r0, #15
 8001cb2:	f000 f805 	bl	8001cc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb6:	f7ff fbf1 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cc8:	4b12      	ldr	r3, [pc, #72]	; (8001d14 <HAL_InitTick+0x54>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x58>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 f967 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00e      	b.n	8001d0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2b0f      	cmp	r3, #15
 8001cf2:	d80a      	bhi.n	8001d0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f000 f92f 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d00:	4a06      	ldr	r2, [pc, #24]	; (8001d1c <HAL_InitTick+0x5c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d06:	2300      	movs	r3, #0
 8001d08:	e000      	b.n	8001d0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000008 	.word	0x20000008
 8001d1c:	20000004 	.word	0x20000004

08001d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d24:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_IncTick+0x20>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x24>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
 8001d30:	4a04      	ldr	r2, [pc, #16]	; (8001d44 <HAL_IncTick+0x24>)
 8001d32:	6013      	str	r3, [r2, #0]
}
 8001d34:	bf00      	nop
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000008 	.word	0x20000008
 8001d44:	20000d14 	.word	0x20000d14

08001d48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	; (8001d5c <HAL_GetTick+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000d14 	.word	0x20000d14

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff ffee 	bl	8001d48 <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffde 	bl	8001d48 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000008 	.word	0x20000008

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0b      	ldr	r3, [pc, #44]	; (8001de8 <__NVIC_SetPriorityGrouping+0x40>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x40>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00
 8001dec:	05fa0000 	.word	0x05fa0000

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4907      	ldr	r1, [pc, #28]	; (8001e44 <__NVIC_EnableIRQ+0x38>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	; (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	; (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	; 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	; 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f7ff ff8e 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff29 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff3e 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff8e 	bl	8001e9c <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5d 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff31 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa2 	bl	8001f04 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7ff feb6 	bl	8001d48 <HAL_GetTick>
 8001fdc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d008      	beq.n	8001ffc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2280      	movs	r2, #128	; 0x80
 8001fee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e052      	b.n	80020a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0216 	bic.w	r2, r2, #22
 800200a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800201a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	2b00      	cmp	r3, #0
 8002022:	d103      	bne.n	800202c <HAL_DMA_Abort+0x62>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002028:	2b00      	cmp	r3, #0
 800202a:	d007      	beq.n	800203c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f022 0208 	bic.w	r2, r2, #8
 800203a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0201 	bic.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800204c:	e013      	b.n	8002076 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800204e:	f7ff fe7b 	bl	8001d48 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b05      	cmp	r3, #5
 800205a:	d90c      	bls.n	8002076 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2220      	movs	r2, #32
 8002060:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2203      	movs	r2, #3
 8002066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e015      	b.n	80020a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0301 	and.w	r3, r3, #1
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1e4      	bne.n	800204e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	223f      	movs	r2, #63	; 0x3f
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b083      	sub	sp, #12
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d004      	beq.n	80020c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2280      	movs	r2, #128	; 0x80
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e00c      	b.n	80020e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2205      	movs	r2, #5
 80020cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0201 	bic.w	r2, r2, #1
 80020de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b089      	sub	sp, #36	; 0x24
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80020fa:	2300      	movs	r3, #0
 80020fc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800210a:	2300      	movs	r3, #0
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	e175      	b.n	80023fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002110:	2201      	movs	r2, #1
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4013      	ands	r3, r2
 8002122:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002124:	693a      	ldr	r2, [r7, #16]
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	429a      	cmp	r2, r3
 800212a:	f040 8164 	bne.w	80023f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	2b01      	cmp	r3, #1
 8002138:	d005      	beq.n	8002146 <HAL_GPIO_Init+0x56>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d130      	bne.n	80021a8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	2203      	movs	r2, #3
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	43db      	mvns	r3, r3
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	4013      	ands	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800217c:	2201      	movs	r2, #1
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0201 	and.w	r2, r3, #1
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d017      	beq.n	80021e4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d123      	bne.n	8002238 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	08da      	lsrs	r2, r3, #3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3208      	adds	r2, #8
 80021f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	220f      	movs	r2, #15
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	691a      	ldr	r2, [r3, #16]
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	08da      	lsrs	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3208      	adds	r2, #8
 8002232:	69b9      	ldr	r1, [r7, #24]
 8002234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	2203      	movs	r2, #3
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f003 0203 	and.w	r2, r3, #3
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 80be 	beq.w	80023f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800227a:	4b66      	ldr	r3, [pc, #408]	; (8002414 <HAL_GPIO_Init+0x324>)
 800227c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227e:	4a65      	ldr	r2, [pc, #404]	; (8002414 <HAL_GPIO_Init+0x324>)
 8002280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002284:	6453      	str	r3, [r2, #68]	; 0x44
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_GPIO_Init+0x324>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002292:	4a61      	ldr	r2, [pc, #388]	; (8002418 <HAL_GPIO_Init+0x328>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_GPIO_Init+0x32c>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d037      	beq.n	800232e <HAL_GPIO_Init+0x23e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a57      	ldr	r2, [pc, #348]	; (8002420 <HAL_GPIO_Init+0x330>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d031      	beq.n	800232a <HAL_GPIO_Init+0x23a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a56      	ldr	r2, [pc, #344]	; (8002424 <HAL_GPIO_Init+0x334>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d02b      	beq.n	8002326 <HAL_GPIO_Init+0x236>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a55      	ldr	r2, [pc, #340]	; (8002428 <HAL_GPIO_Init+0x338>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d025      	beq.n	8002322 <HAL_GPIO_Init+0x232>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a54      	ldr	r2, [pc, #336]	; (800242c <HAL_GPIO_Init+0x33c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01f      	beq.n	800231e <HAL_GPIO_Init+0x22e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a53      	ldr	r2, [pc, #332]	; (8002430 <HAL_GPIO_Init+0x340>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d019      	beq.n	800231a <HAL_GPIO_Init+0x22a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a52      	ldr	r2, [pc, #328]	; (8002434 <HAL_GPIO_Init+0x344>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_GPIO_Init+0x226>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a51      	ldr	r2, [pc, #324]	; (8002438 <HAL_GPIO_Init+0x348>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00d      	beq.n	8002312 <HAL_GPIO_Init+0x222>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a50      	ldr	r2, [pc, #320]	; (800243c <HAL_GPIO_Init+0x34c>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <HAL_GPIO_Init+0x21e>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4f      	ldr	r2, [pc, #316]	; (8002440 <HAL_GPIO_Init+0x350>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_GPIO_Init+0x21a>
 8002306:	2309      	movs	r3, #9
 8002308:	e012      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800230a:	230a      	movs	r3, #10
 800230c:	e010      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800230e:	2308      	movs	r3, #8
 8002310:	e00e      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002312:	2307      	movs	r3, #7
 8002314:	e00c      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002316:	2306      	movs	r3, #6
 8002318:	e00a      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800231a:	2305      	movs	r3, #5
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800231e:	2304      	movs	r3, #4
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x240>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x240>
 800232e:	2300      	movs	r3, #0
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002340:	4935      	ldr	r1, [pc, #212]	; (8002418 <HAL_GPIO_Init+0x328>)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234e:	4b3d      	ldr	r3, [pc, #244]	; (8002444 <HAL_GPIO_Init+0x354>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	43db      	mvns	r3, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4013      	ands	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002372:	4a34      	ldr	r2, [pc, #208]	; (8002444 <HAL_GPIO_Init+0x354>)
 8002374:	69bb      	ldr	r3, [r7, #24]
 8002376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002378:	4b32      	ldr	r3, [pc, #200]	; (8002444 <HAL_GPIO_Init+0x354>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800239c:	4a29      	ldr	r2, [pc, #164]	; (8002444 <HAL_GPIO_Init+0x354>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023a2:	4b28      	ldr	r3, [pc, #160]	; (8002444 <HAL_GPIO_Init+0x354>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c6:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <HAL_GPIO_Init+0x354>)
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023cc:	4b1d      	ldr	r3, [pc, #116]	; (8002444 <HAL_GPIO_Init+0x354>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023f0:	4a14      	ldr	r2, [pc, #80]	; (8002444 <HAL_GPIO_Init+0x354>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3301      	adds	r3, #1
 80023fa:	61fb      	str	r3, [r7, #28]
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	2b0f      	cmp	r3, #15
 8002400:	f67f ae86 	bls.w	8002110 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	3724      	adds	r7, #36	; 0x24
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	40023800 	.word	0x40023800
 8002418:	40013800 	.word	0x40013800
 800241c:	40020000 	.word	0x40020000
 8002420:	40020400 	.word	0x40020400
 8002424:	40020800 	.word	0x40020800
 8002428:	40020c00 	.word	0x40020c00
 800242c:	40021000 	.word	0x40021000
 8002430:	40021400 	.word	0x40021400
 8002434:	40021800 	.word	0x40021800
 8002438:	40021c00 	.word	0x40021c00
 800243c:	40022000 	.word	0x40022000
 8002440:	40022400 	.word	0x40022400
 8002444:	40013c00 	.word	0x40013c00

08002448 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	4a22      	ldr	r2, [pc, #136]	; (80024e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6413      	str	r3, [r2, #64]	; 0x40
 800245e:	4b20      	ldr	r3, [pc, #128]	; (80024e0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800246a:	4b1e      	ldr	r3, [pc, #120]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1d      	ldr	r2, [pc, #116]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002474:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002476:	f7ff fc67 	bl	8001d48 <HAL_GetTick>
 800247a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800247c:	e009      	b.n	8002492 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800247e:	f7ff fc63 	bl	8001d48 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800248c:	d901      	bls.n	8002492 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e022      	b.n	80024d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800249a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800249e:	d1ee      	bne.n	800247e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80024a0:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a0f      	ldr	r2, [pc, #60]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024aa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024ac:	f7ff fc4c 	bl	8001d48 <HAL_GetTick>
 80024b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024b2:	e009      	b.n	80024c8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80024b4:	f7ff fc48 	bl	8001d48 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024c2:	d901      	bls.n	80024c8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e007      	b.n	80024d8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80024c8:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024d4:	d1ee      	bne.n	80024b4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000

080024e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e29b      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8087 	beq.w	800261a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800250c:	4b96      	ldr	r3, [pc, #600]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f003 030c 	and.w	r3, r3, #12
 8002514:	2b04      	cmp	r3, #4
 8002516:	d00c      	beq.n	8002532 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002518:	4b93      	ldr	r3, [pc, #588]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f003 030c 	and.w	r3, r3, #12
 8002520:	2b08      	cmp	r3, #8
 8002522:	d112      	bne.n	800254a <HAL_RCC_OscConfig+0x62>
 8002524:	4b90      	ldr	r3, [pc, #576]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002530:	d10b      	bne.n	800254a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002532:	4b8d      	ldr	r3, [pc, #564]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06c      	beq.n	8002618 <HAL_RCC_OscConfig+0x130>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d168      	bne.n	8002618 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e275      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x7a>
 8002554:	4b84      	ldr	r3, [pc, #528]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a83      	ldr	r2, [pc, #524]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e02e      	b.n	80025c0 <HAL_RCC_OscConfig+0xd8>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x9c>
 800256a:	4b7f      	ldr	r3, [pc, #508]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7e      	ldr	r2, [pc, #504]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b7c      	ldr	r3, [pc, #496]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a7b      	ldr	r2, [pc, #492]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800257c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e01d      	b.n	80025c0 <HAL_RCC_OscConfig+0xd8>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800258c:	d10c      	bne.n	80025a8 <HAL_RCC_OscConfig+0xc0>
 800258e:	4b76      	ldr	r3, [pc, #472]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a75      	ldr	r2, [pc, #468]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b73      	ldr	r3, [pc, #460]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a72      	ldr	r2, [pc, #456]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e00b      	b.n	80025c0 <HAL_RCC_OscConfig+0xd8>
 80025a8:	4b6f      	ldr	r3, [pc, #444]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a6e      	ldr	r2, [pc, #440]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b2:	6013      	str	r3, [r2, #0]
 80025b4:	4b6c      	ldr	r3, [pc, #432]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a6b      	ldr	r2, [pc, #428]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7ff fbbe 	bl	8001d48 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff fbba 	bl	8001d48 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b64      	cmp	r3, #100	; 0x64
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e229      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e2:	4b61      	ldr	r3, [pc, #388]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0xe8>
 80025ee:	e014      	b.n	800261a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7ff fbaa 	bl	8001d48 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025f8:	f7ff fba6 	bl	8001d48 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b64      	cmp	r3, #100	; 0x64
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e215      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800260a:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1f0      	bne.n	80025f8 <HAL_RCC_OscConfig+0x110>
 8002616:	e000      	b.n	800261a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d069      	beq.n	80026fa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002626:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 030c 	and.w	r3, r3, #12
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00b      	beq.n	800264a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002632:	4b4d      	ldr	r3, [pc, #308]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 030c 	and.w	r3, r3, #12
 800263a:	2b08      	cmp	r3, #8
 800263c:	d11c      	bne.n	8002678 <HAL_RCC_OscConfig+0x190>
 800263e:	4b4a      	ldr	r3, [pc, #296]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d116      	bne.n	8002678 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <HAL_RCC_OscConfig+0x17a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d001      	beq.n	8002662 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e1e9      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	493d      	ldr	r1, [pc, #244]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002672:	4313      	orrs	r3, r2
 8002674:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002676:	e040      	b.n	80026fa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002680:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a38      	ldr	r2, [pc, #224]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800268c:	f7ff fb5c 	bl	8001d48 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002694:	f7ff fb58 	bl	8001d48 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e1c7      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026a6:	4b30      	ldr	r3, [pc, #192]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4929      	ldr	r1, [pc, #164]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026c2:	4313      	orrs	r3, r2
 80026c4:	600b      	str	r3, [r1, #0]
 80026c6:	e018      	b.n	80026fa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026c8:	4b27      	ldr	r3, [pc, #156]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a26      	ldr	r2, [pc, #152]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026ce:	f023 0301 	bic.w	r3, r3, #1
 80026d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7ff fb38 	bl	8001d48 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026dc:	f7ff fb34 	bl	8001d48 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1a3      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ee:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0308 	and.w	r3, r3, #8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d038      	beq.n	8002778 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d019      	beq.n	8002742 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800270e:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002712:	4a15      	ldr	r2, [pc, #84]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271a:	f7ff fb15 	bl	8001d48 <HAL_GetTick>
 800271e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002720:	e008      	b.n	8002734 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002722:	f7ff fb11 	bl	8001d48 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d901      	bls.n	8002734 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002730:	2303      	movs	r3, #3
 8002732:	e180      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002736:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0f0      	beq.n	8002722 <HAL_RCC_OscConfig+0x23a>
 8002740:	e01a      	b.n	8002778 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_RCC_OscConfig+0x280>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274e:	f7ff fafb 	bl	8001d48 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	e00a      	b.n	800276c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002756:	f7ff faf7 	bl	8001d48 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d903      	bls.n	800276c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e166      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
 8002768:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800276c:	4b92      	ldr	r3, [pc, #584]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800276e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1ee      	bne.n	8002756 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a4 	beq.w	80028ce <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002786:	4b8c      	ldr	r3, [pc, #560]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d10d      	bne.n	80027ae <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002792:	4b89      	ldr	r3, [pc, #548]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	4a88      	ldr	r2, [pc, #544]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800279c:	6413      	str	r3, [r2, #64]	; 0x40
 800279e:	4b86      	ldr	r3, [pc, #536]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a6:	60bb      	str	r3, [r7, #8]
 80027a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027aa:	2301      	movs	r3, #1
 80027ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027ae:	4b83      	ldr	r3, [pc, #524]	; (80029bc <HAL_RCC_OscConfig+0x4d4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d118      	bne.n	80027ec <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80027ba:	4b80      	ldr	r3, [pc, #512]	; (80029bc <HAL_RCC_OscConfig+0x4d4>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7f      	ldr	r2, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0x4d4>)
 80027c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c6:	f7ff fabf 	bl	8001d48 <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027cc:	e008      	b.n	80027e0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ce:	f7ff fabb 	bl	8001d48 <HAL_GetTick>
 80027d2:	4602      	mov	r2, r0
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	1ad3      	subs	r3, r2, r3
 80027d8:	2b64      	cmp	r3, #100	; 0x64
 80027da:	d901      	bls.n	80027e0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027dc:	2303      	movs	r3, #3
 80027de:	e12a      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027e0:	4b76      	ldr	r3, [pc, #472]	; (80029bc <HAL_RCC_OscConfig+0x4d4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0f0      	beq.n	80027ce <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x31a>
 80027f4:	4b70      	ldr	r3, [pc, #448]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f8:	4a6f      	ldr	r2, [pc, #444]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6713      	str	r3, [r2, #112]	; 0x70
 8002800:	e02d      	b.n	800285e <HAL_RCC_OscConfig+0x376>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d10c      	bne.n	8002824 <HAL_RCC_OscConfig+0x33c>
 800280a:	4b6b      	ldr	r3, [pc, #428]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280e:	4a6a      	ldr	r2, [pc, #424]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002810:	f023 0301 	bic.w	r3, r3, #1
 8002814:	6713      	str	r3, [r2, #112]	; 0x70
 8002816:	4b68      	ldr	r3, [pc, #416]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	4a67      	ldr	r2, [pc, #412]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	6713      	str	r3, [r2, #112]	; 0x70
 8002822:	e01c      	b.n	800285e <HAL_RCC_OscConfig+0x376>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d10c      	bne.n	8002846 <HAL_RCC_OscConfig+0x35e>
 800282c:	4b62      	ldr	r3, [pc, #392]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800282e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002830:	4a61      	ldr	r2, [pc, #388]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002832:	f043 0304 	orr.w	r3, r3, #4
 8002836:	6713      	str	r3, [r2, #112]	; 0x70
 8002838:	4b5f      	ldr	r3, [pc, #380]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800283a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283c:	4a5e      	ldr	r2, [pc, #376]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6713      	str	r3, [r2, #112]	; 0x70
 8002844:	e00b      	b.n	800285e <HAL_RCC_OscConfig+0x376>
 8002846:	4b5c      	ldr	r3, [pc, #368]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a5b      	ldr	r2, [pc, #364]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
 8002852:	4b59      	ldr	r3, [pc, #356]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002858:	f023 0304 	bic.w	r3, r3, #4
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d015      	beq.n	8002892 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7ff fa6f 	bl	8001d48 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286c:	e00a      	b.n	8002884 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286e:	f7ff fa6b 	bl	8001d48 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	4293      	cmp	r3, r2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e0d8      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002884:	4b4c      	ldr	r3, [pc, #304]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002886:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0ee      	beq.n	800286e <HAL_RCC_OscConfig+0x386>
 8002890:	e014      	b.n	80028bc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002892:	f7ff fa59 	bl	8001d48 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	e00a      	b.n	80028b0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800289a:	f7ff fa55 	bl	8001d48 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e0c2      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b0:	4b41      	ldr	r3, [pc, #260]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ee      	bne.n	800289a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028bc:	7dfb      	ldrb	r3, [r7, #23]
 80028be:	2b01      	cmp	r3, #1
 80028c0:	d105      	bne.n	80028ce <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	4a3c      	ldr	r2, [pc, #240]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80ae 	beq.w	8002a34 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028d8:	4b37      	ldr	r3, [pc, #220]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 030c 	and.w	r3, r3, #12
 80028e0:	2b08      	cmp	r3, #8
 80028e2:	d06d      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d14b      	bne.n	8002984 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80028f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff fa26 	bl	8001d48 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7ff fa22 	bl	8001d48 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e091      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f0      	bne.n	8002900 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69da      	ldr	r2, [r3, #28]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	431a      	orrs	r2, r3
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	431a      	orrs	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002934:	085b      	lsrs	r3, r3, #1
 8002936:	3b01      	subs	r3, #1
 8002938:	041b      	lsls	r3, r3, #16
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	061b      	lsls	r3, r3, #24
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002948:	071b      	lsls	r3, r3, #28
 800294a:	491b      	ldr	r1, [pc, #108]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800294c:	4313      	orrs	r3, r2
 800294e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7ff f9f4 	bl	8001d48 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002964:	f7ff f9f0 	bl	8001d48 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e05f      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002976:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x47c>
 8002982:	e057      	b.n	8002a34 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002984:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 800298a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800298e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7ff f9da 	bl	8001d48 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7ff f9d6 	bl	8001d48 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e045      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x4b0>
 80029b6:	e03d      	b.n	8002a34 <HAL_RCC_OscConfig+0x54c>
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80029c0:	4b1f      	ldr	r3, [pc, #124]	; (8002a40 <HAL_RCC_OscConfig+0x558>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d030      	beq.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d129      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d122      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d119      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d10f      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a2a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0d0      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 030f 	and.w	r3, r3, #15
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d910      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b67      	ldr	r3, [pc, #412]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 020f 	bic.w	r2, r3, #15
 8002a72:	4965      	ldr	r1, [pc, #404]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002aaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ac2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d040      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b41      	ldr	r3, [pc, #260]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e073      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06b      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b39      	ldr	r3, [pc, #228]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4936      	ldr	r1, [pc, #216]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b38:	f7ff f906 	bl	8001d48 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7ff f902 	bl	8001d48 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e053      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2d      	ldr	r3, [pc, #180]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b27      	ldr	r3, [pc, #156]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d210      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b24      	ldr	r3, [pc, #144]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 020f 	bic.w	r2, r3, #15
 8002b7e:	4922      	ldr	r1, [pc, #136]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f821 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	; (8002c10 <HAL_RCC_ClockConfig+0x1cc>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	; (8002c14 <HAL_RCC_ClockConfig+0x1d0>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1d4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7ff f862 	bl	8001cc0 <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40023c00 	.word	0x40023c00
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	0800f368 	.word	0x0800f368
 8002c14:	20000000 	.word	0x20000000
 8002c18:	20000004 	.word	0x20000004

08002c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c20:	b090      	sub	sp, #64	; 0x40
 8002c22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	637b      	str	r3, [r7, #52]	; 0x34
 8002c28:	2300      	movs	r3, #0
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002c30:	2300      	movs	r3, #0
 8002c32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c34:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f003 030c 	and.w	r3, r3, #12
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d00d      	beq.n	8002c5c <HAL_RCC_GetSysClockFreq+0x40>
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	f200 80a1 	bhi.w	8002d88 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x34>
 8002c4a:	2b04      	cmp	r3, #4
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c4e:	e09b      	b.n	8002d88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c50:	4b53      	ldr	r3, [pc, #332]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c54:	e09b      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c5a:	e098      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c64:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c66:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d028      	beq.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b4a      	ldr	r3, [pc, #296]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	2200      	movs	r2, #0
 8002c7a:	623b      	str	r3, [r7, #32]
 8002c7c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c84:	2100      	movs	r1, #0
 8002c86:	4b47      	ldr	r3, [pc, #284]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c88:	fb03 f201 	mul.w	r2, r3, r1
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	fb00 f303 	mul.w	r3, r0, r3
 8002c92:	4413      	add	r3, r2
 8002c94:	4a43      	ldr	r2, [pc, #268]	; (8002da4 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c96:	fba0 1202 	umull	r1, r2, r0, r2
 8002c9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c9c:	460a      	mov	r2, r1
 8002c9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ca0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ca2:	4413      	add	r3, r2
 8002ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ca8:	2200      	movs	r2, #0
 8002caa:	61bb      	str	r3, [r7, #24]
 8002cac:	61fa      	str	r2, [r7, #28]
 8002cae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002cb6:	f7fd fcd7 	bl	8000668 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cc2:	e053      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cc4:	4b35      	ldr	r3, [pc, #212]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	099b      	lsrs	r3, r3, #6
 8002cca:	2200      	movs	r2, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	617a      	str	r2, [r7, #20]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cd6:	f04f 0b00 	mov.w	fp, #0
 8002cda:	4652      	mov	r2, sl
 8002cdc:	465b      	mov	r3, fp
 8002cde:	f04f 0000 	mov.w	r0, #0
 8002ce2:	f04f 0100 	mov.w	r1, #0
 8002ce6:	0159      	lsls	r1, r3, #5
 8002ce8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cec:	0150      	lsls	r0, r2, #5
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	ebb2 080a 	subs.w	r8, r2, sl
 8002cf6:	eb63 090b 	sbc.w	r9, r3, fp
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d0e:	ebb2 0408 	subs.w	r4, r2, r8
 8002d12:	eb63 0509 	sbc.w	r5, r3, r9
 8002d16:	f04f 0200 	mov.w	r2, #0
 8002d1a:	f04f 0300 	mov.w	r3, #0
 8002d1e:	00eb      	lsls	r3, r5, #3
 8002d20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d24:	00e2      	lsls	r2, r4, #3
 8002d26:	4614      	mov	r4, r2
 8002d28:	461d      	mov	r5, r3
 8002d2a:	eb14 030a 	adds.w	r3, r4, sl
 8002d2e:	603b      	str	r3, [r7, #0]
 8002d30:	eb45 030b 	adc.w	r3, r5, fp
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d42:	4629      	mov	r1, r5
 8002d44:	028b      	lsls	r3, r1, #10
 8002d46:	4621      	mov	r1, r4
 8002d48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d4c:	4621      	mov	r1, r4
 8002d4e:	028a      	lsls	r2, r1, #10
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d56:	2200      	movs	r2, #0
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	60fa      	str	r2, [r7, #12]
 8002d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d60:	f7fd fc82 	bl	8000668 <__aeabi_uldivmod>
 8002d64:	4602      	mov	r2, r0
 8002d66:	460b      	mov	r3, r1
 8002d68:	4613      	mov	r3, r2
 8002d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	3301      	adds	r3, #1
 8002d78:	005b      	lsls	r3, r3, #1
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002d7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d84:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d86:	e002      	b.n	8002d8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d8a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3740      	adds	r7, #64	; 0x40
 8002d94:	46bd      	mov	sp, r7
 8002d96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	00f42400 	.word	0x00f42400
 8002da4:	017d7840 	.word	0x017d7840

08002da8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002da8:	b480      	push	{r7}
 8002daa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002dac:	4b03      	ldr	r3, [pc, #12]	; (8002dbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000000 	.word	0x20000000

08002dc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	4b05      	ldr	r3, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	0a9b      	lsrs	r3, r3, #10
 8002dd0:	f003 0307 	and.w	r3, r3, #7
 8002dd4:	4903      	ldr	r1, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dd6:	5ccb      	ldrb	r3, [r1, r3]
 8002dd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	40023800 	.word	0x40023800
 8002de4:	0800f378 	.word	0x0800f378

08002de8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dec:	f7ff ffdc 	bl	8002da8 <HAL_RCC_GetHCLKFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	0b5b      	lsrs	r3, r3, #13
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	4903      	ldr	r1, [pc, #12]	; (8002e0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	0800f378 	.word	0x0800f378

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d012      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e38:	4b69      	ldr	r3, [pc, #420]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a68      	ldr	r2, [pc, #416]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e42:	6093      	str	r3, [r2, #8]
 8002e44:	4b66      	ldr	r3, [pc, #408]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4c:	4964      	ldr	r1, [pc, #400]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d017      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e6a:	4b5d      	ldr	r3, [pc, #372]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	4959      	ldr	r1, [pc, #356]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e88:	d101      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d017      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ea6:	4b4e      	ldr	r3, [pc, #312]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eac:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	494a      	ldr	r1, [pc, #296]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ec4:	d101      	bne.n	8002eca <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	f000 808b 	beq.w	800300a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	4a39      	ldr	r2, [pc, #228]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efe:	6413      	str	r3, [r2, #64]	; 0x40
 8002f00:	4b37      	ldr	r3, [pc, #220]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f0c:	4b35      	ldr	r3, [pc, #212]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a34      	ldr	r2, [pc, #208]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f18:	f7fe ff16 	bl	8001d48 <HAL_GetTick>
 8002f1c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f20:	f7fe ff12 	bl	8001d48 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	; 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e38f      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f32:	4b2c      	ldr	r3, [pc, #176]	; (8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f3e:	4b28      	ldr	r3, [pc, #160]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f46:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d035      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d02e      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f5c:	4b20      	ldr	r3, [pc, #128]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f64:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f66:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6a:	4a1d      	ldr	r2, [pc, #116]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f70:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f72:	4b1b      	ldr	r3, [pc, #108]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f76:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f7e:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f84:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d114      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe feda 	bl	8001d48 <HAL_GetTick>
 8002f94:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f96:	e00a      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fed6 	bl	8001d48 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e351      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fae:	4b0c      	ldr	r3, [pc, #48]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d0ee      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc6:	d111      	bne.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd4:	4b04      	ldr	r3, [pc, #16]	; (8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fd6:	400b      	ands	r3, r1
 8002fd8:	4901      	ldr	r1, [pc, #4]	; (8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	608b      	str	r3, [r1, #8]
 8002fde:	e00b      	b.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000
 8002fe8:	0ffffcff 	.word	0x0ffffcff
 8002fec:	4bac      	ldr	r3, [pc, #688]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4aab      	ldr	r2, [pc, #684]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ff6:	6093      	str	r3, [r2, #8]
 8002ff8:	4ba9      	ldr	r3, [pc, #676]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003004:	49a6      	ldr	r1, [pc, #664]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003006:	4313      	orrs	r3, r2
 8003008:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d010      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003016:	4ba2      	ldr	r3, [pc, #648]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800301c:	4aa0      	ldr	r2, [pc, #640]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003022:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003026:	4b9e      	ldr	r3, [pc, #632]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003028:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003030:	499b      	ldr	r1, [pc, #620]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003044:	4b96      	ldr	r3, [pc, #600]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003052:	4993      	ldr	r1, [pc, #588]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003066:	4b8e      	ldr	r3, [pc, #568]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003074:	498a      	ldr	r1, [pc, #552]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00a      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003088:	4b85      	ldr	r3, [pc, #532]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800308e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003096:	4982      	ldr	r1, [pc, #520]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003098:	4313      	orrs	r3, r2
 800309a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030aa:	4b7d      	ldr	r3, [pc, #500]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b8:	4979      	ldr	r1, [pc, #484]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d00a      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030cc:	4b74      	ldr	r3, [pc, #464]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f023 0203 	bic.w	r2, r3, #3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4971      	ldr	r1, [pc, #452]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030dc:	4313      	orrs	r3, r2
 80030de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00a      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030ee:	4b6c      	ldr	r3, [pc, #432]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f4:	f023 020c 	bic.w	r2, r3, #12
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030fc:	4968      	ldr	r1, [pc, #416]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003110:	4b63      	ldr	r3, [pc, #396]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003116:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	4960      	ldr	r1, [pc, #384]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00a      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003132:	4b5b      	ldr	r3, [pc, #364]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003138:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003140:	4957      	ldr	r1, [pc, #348]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003142:	4313      	orrs	r3, r2
 8003144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003154:	4b52      	ldr	r3, [pc, #328]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	494f      	ldr	r1, [pc, #316]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003164:	4313      	orrs	r3, r2
 8003166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003176:	4b4a      	ldr	r3, [pc, #296]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003184:	4946      	ldr	r1, [pc, #280]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003186:	4313      	orrs	r3, r2
 8003188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00a      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003198:	4b41      	ldr	r3, [pc, #260]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	493e      	ldr	r1, [pc, #248]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a8:	4313      	orrs	r3, r2
 80031aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00a      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80031ba:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c8:	4935      	ldr	r1, [pc, #212]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031e2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ea:	492d      	ldr	r1, [pc, #180]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ec:	4313      	orrs	r3, r2
 80031ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d011      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031fe:	4b28      	ldr	r3, [pc, #160]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003204:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800320c:	4924      	ldr	r1, [pc, #144]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800320e:	4313      	orrs	r3, r2
 8003210:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800321c:	d101      	bne.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800321e:	2301      	movs	r3, #1
 8003220:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800322e:	2301      	movs	r3, #1
 8003230:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800323e:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003244:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800324c:	4914      	ldr	r1, [pc, #80]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324e:	4313      	orrs	r3, r2
 8003250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00b      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003260:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003266:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003270:	490b      	ldr	r1, [pc, #44]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00f      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800328a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003294:	4902      	ldr	r1, [pc, #8]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003296:	4313      	orrs	r3, r2
 8003298:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800329c:	e002      	b.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800329e:	bf00      	nop
 80032a0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032b0:	4b8a      	ldr	r3, [pc, #552]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c0:	4986      	ldr	r1, [pc, #536]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00b      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032d4:	4b81      	ldr	r3, [pc, #516]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032da:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032e4:	497d      	ldr	r1, [pc, #500]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e6:	4313      	orrs	r3, r2
 80032e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d006      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	f000 80d6 	beq.w	80034ac <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003300:	4b76      	ldr	r3, [pc, #472]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a75      	ldr	r2, [pc, #468]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003306:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800330a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800330c:	f7fe fd1c 	bl	8001d48 <HAL_GetTick>
 8003310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003314:	f7fe fd18 	bl	8001d48 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e195      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003326:	4b6d      	ldr	r3, [pc, #436]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b00      	cmp	r3, #0
 800333c:	d021      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003342:	2b00      	cmp	r3, #0
 8003344:	d11d      	bne.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003346:	4b65      	ldr	r3, [pc, #404]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003354:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003356:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335a:	0e1b      	lsrs	r3, r3, #24
 800335c:	f003 030f 	and.w	r3, r3, #15
 8003360:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	019a      	lsls	r2, r3, #6
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	041b      	lsls	r3, r3, #16
 800336c:	431a      	orrs	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	061b      	lsls	r3, r3, #24
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	071b      	lsls	r3, r3, #28
 800337a:	4958      	ldr	r1, [pc, #352]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338a:	2b00      	cmp	r3, #0
 800338c:	d004      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003396:	d00a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d02e      	beq.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033ac:	d129      	bne.n	8003402 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033ae:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b4:	0c1b      	lsrs	r3, r3, #16
 80033b6:	f003 0303 	and.w	r3, r3, #3
 80033ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033bc:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c2:	0f1b      	lsrs	r3, r3, #28
 80033c4:	f003 0307 	and.w	r3, r3, #7
 80033c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	019a      	lsls	r2, r3, #6
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	061b      	lsls	r3, r3, #24
 80033dc:	431a      	orrs	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	071b      	lsls	r3, r3, #28
 80033e2:	493e      	ldr	r1, [pc, #248]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033ea:	4b3c      	ldr	r3, [pc, #240]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f0:	f023 021f 	bic.w	r2, r3, #31
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	3b01      	subs	r3, #1
 80033fa:	4938      	ldr	r1, [pc, #224]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d01d      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800340e:	4b33      	ldr	r3, [pc, #204]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003414:	0e1b      	lsrs	r3, r3, #24
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800341c:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800341e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003422:	0f1b      	lsrs	r3, r3, #28
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	019a      	lsls	r2, r3, #6
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	691b      	ldr	r3, [r3, #16]
 8003434:	041b      	lsls	r3, r3, #16
 8003436:	431a      	orrs	r2, r3
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	061b      	lsls	r3, r3, #24
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	4926      	ldr	r1, [pc, #152]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d011      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	019a      	lsls	r2, r3, #6
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	041b      	lsls	r3, r3, #16
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	061b      	lsls	r3, r3, #24
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	071b      	lsls	r3, r3, #28
 8003472:	491a      	ldr	r1, [pc, #104]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800347a:	4b18      	ldr	r3, [pc, #96]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a17      	ldr	r2, [pc, #92]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003480:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003486:	f7fe fc5f 	bl	8001d48 <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800348e:	f7fe fc5b 	bl	8001d48 <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b64      	cmp	r3, #100	; 0x64
 800349a:	d901      	bls.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0d8      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034a0:	4b0e      	ldr	r3, [pc, #56]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	f040 80ce 	bne.w	8003650 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a08      	ldr	r2, [pc, #32]	; (80034dc <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c0:	f7fe fc42 	bl	8001d48 <HAL_GetTick>
 80034c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034c6:	e00b      	b.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034c8:	f7fe fc3e 	bl	8001d48 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d904      	bls.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e0bb      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034e0:	4b5e      	ldr	r3, [pc, #376]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ec:	d0ec      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d003      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800350a:	2b00      	cmp	r3, #0
 800350c:	d02e      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	2b00      	cmp	r3, #0
 8003514:	d12a      	bne.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003516:	4b51      	ldr	r3, [pc, #324]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003524:	4b4d      	ldr	r3, [pc, #308]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352a:	0f1b      	lsrs	r3, r3, #28
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	019a      	lsls	r2, r3, #6
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	041b      	lsls	r3, r3, #16
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	431a      	orrs	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	071b      	lsls	r3, r3, #28
 800354a:	4944      	ldr	r1, [pc, #272]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800354c:	4313      	orrs	r3, r2
 800354e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003552:	4b42      	ldr	r3, [pc, #264]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003558:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003560:	3b01      	subs	r3, #1
 8003562:	021b      	lsls	r3, r3, #8
 8003564:	493d      	ldr	r1, [pc, #244]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d022      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003580:	d11d      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003582:	4b36      	ldr	r3, [pc, #216]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003588:	0e1b      	lsrs	r3, r3, #24
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003590:	4b32      	ldr	r3, [pc, #200]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003596:	0f1b      	lsrs	r3, r3, #28
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	019a      	lsls	r2, r3, #6
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	061b      	lsls	r3, r3, #24
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	071b      	lsls	r3, r3, #28
 80035b6:	4929      	ldr	r1, [pc, #164]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d028      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035ca:	4b24      	ldr	r3, [pc, #144]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d0:	0e1b      	lsrs	r3, r3, #24
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035d8:	4b20      	ldr	r3, [pc, #128]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	0c1b      	lsrs	r3, r3, #16
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	019a      	lsls	r2, r3, #6
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	041b      	lsls	r3, r3, #16
 80035f0:	431a      	orrs	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	061b      	lsls	r3, r3, #24
 80035f6:	431a      	orrs	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	071b      	lsls	r3, r3, #28
 80035fe:	4917      	ldr	r1, [pc, #92]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003606:	4b15      	ldr	r3, [pc, #84]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003608:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800360c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4911      	ldr	r1, [pc, #68]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003616:	4313      	orrs	r3, r2
 8003618:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800361c:	4b0f      	ldr	r3, [pc, #60]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0e      	ldr	r2, [pc, #56]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003628:	f7fe fb8e 	bl	8001d48 <HAL_GetTick>
 800362c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003630:	f7fe fb8a 	bl	8001d48 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b64      	cmp	r3, #100	; 0x64
 800363c:	d901      	bls.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e007      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003642:	4b06      	ldr	r3, [pc, #24]	; (800365c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800364a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800364e:	d1ef      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40023800 	.word	0x40023800

08003660 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e049      	b.n	8003706 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d106      	bne.n	800368c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2200      	movs	r2, #0
 8003682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7fe f8da 	bl	8001840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2202      	movs	r2, #2
 8003690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	3304      	adds	r3, #4
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f000 faca 	bl	8003c38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3708      	adds	r7, #8
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d001      	beq.n	8003728 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e054      	b.n	80037d2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2202      	movs	r2, #2
 800372c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	68da      	ldr	r2, [r3, #12]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a26      	ldr	r2, [pc, #152]	; (80037e0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d01d      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <HAL_TIM_Base_Start_IT+0xd4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a21      	ldr	r2, [pc, #132]	; (80037e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1f      	ldr	r2, [pc, #124]	; (80037ec <HAL_TIM_Base_Start_IT+0xdc>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1e      	ldr	r2, [pc, #120]	; (80037f0 <HAL_TIM_Base_Start_IT+0xe0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a1c      	ldr	r2, [pc, #112]	; (80037f4 <HAL_TIM_Base_Start_IT+0xe4>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIM_Base_Start_IT+0x80>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1b      	ldr	r2, [pc, #108]	; (80037f8 <HAL_TIM_Base_Start_IT+0xe8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d115      	bne.n	80037bc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	4b19      	ldr	r3, [pc, #100]	; (80037fc <HAL_TIM_Base_Start_IT+0xec>)
 8003798:	4013      	ands	r3, r2
 800379a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d015      	beq.n	80037ce <HAL_TIM_Base_Start_IT+0xbe>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037a8:	d011      	beq.n	80037ce <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ba:	e008      	b.n	80037ce <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0201 	orr.w	r2, r2, #1
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	e000      	b.n	80037d0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037ce:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3714      	adds	r7, #20
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40000400 	.word	0x40000400
 80037e8:	40000800 	.word	0x40000800
 80037ec:	40000c00 	.word	0x40000c00
 80037f0:	40010400 	.word	0x40010400
 80037f4:	40014000 	.word	0x40014000
 80037f8:	40001800 	.word	0x40001800
 80037fc:	00010007 	.word	0x00010007

08003800 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d122      	bne.n	800385c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b02      	cmp	r3, #2
 8003822:	d11b      	bne.n	800385c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0202 	mvn.w	r2, #2
 800382c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 f9da 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003848:	e005      	b.n	8003856 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f9cc 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f9dd 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d122      	bne.n	80038b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b04      	cmp	r3, #4
 8003876:	d11b      	bne.n	80038b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f06f 0204 	mvn.w	r2, #4
 8003880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2202      	movs	r2, #2
 8003886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003892:	2b00      	cmp	r3, #0
 8003894:	d003      	beq.n	800389e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f9b0 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 800389c:	e005      	b.n	80038aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f000 f9a2 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 f9b3 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b08      	cmp	r3, #8
 80038bc:	d122      	bne.n	8003904 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0308 	and.w	r3, r3, #8
 80038c8:	2b08      	cmp	r3, #8
 80038ca:	d11b      	bne.n	8003904 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f06f 0208 	mvn.w	r2, #8
 80038d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2204      	movs	r2, #4
 80038da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f000 f986 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 80038f0:	e005      	b.n	80038fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f000 f978 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f989 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0310 	and.w	r3, r3, #16
 800390e:	2b10      	cmp	r3, #16
 8003910:	d122      	bne.n	8003958 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0310 	and.w	r3, r3, #16
 800391c:	2b10      	cmp	r3, #16
 800391e:	d11b      	bne.n	8003958 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0210 	mvn.w	r2, #16
 8003928:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2208      	movs	r2, #8
 800392e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f000 f95c 	bl	8003bfc <HAL_TIM_IC_CaptureCallback>
 8003944:	e005      	b.n	8003952 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f94e 	bl	8003be8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f95f 	bl	8003c10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2200      	movs	r2, #0
 8003956:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	2b01      	cmp	r3, #1
 8003964:	d10e      	bne.n	8003984 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d107      	bne.n	8003984 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f06f 0201 	mvn.w	r2, #1
 800397c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f928 	bl	8003bd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b80      	cmp	r3, #128	; 0x80
 8003990:	d10e      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800399c:	2b80      	cmp	r3, #128	; 0x80
 800399e:	d107      	bne.n	80039b0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 fb16 	bl	8003fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039be:	d10e      	bne.n	80039de <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d107      	bne.n	80039de <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80039d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fb09 	bl	8003ff0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d10e      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d107      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f90d 	bl	8003c24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d10e      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d107      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f06f 0220 	mvn.w	r2, #32
 8003a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fac9 	bl	8003fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
 8003a48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d101      	bne.n	8003a5c <HAL_TIM_ConfigClockSource+0x1c>
 8003a58:	2302      	movs	r3, #2
 8003a5a:	e0b4      	b.n	8003bc6 <HAL_TIM_ConfigClockSource+0x186>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2202      	movs	r2, #2
 8003a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	4b56      	ldr	r3, [pc, #344]	; (8003bd0 <HAL_TIM_ConfigClockSource+0x190>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a94:	d03e      	beq.n	8003b14 <HAL_TIM_ConfigClockSource+0xd4>
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	f200 8087 	bhi.w	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa2:	f000 8086 	beq.w	8003bb2 <HAL_TIM_ConfigClockSource+0x172>
 8003aa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aaa:	d87f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003aac:	2b70      	cmp	r3, #112	; 0x70
 8003aae:	d01a      	beq.n	8003ae6 <HAL_TIM_ConfigClockSource+0xa6>
 8003ab0:	2b70      	cmp	r3, #112	; 0x70
 8003ab2:	d87b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003ab4:	2b60      	cmp	r3, #96	; 0x60
 8003ab6:	d050      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x11a>
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d877      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003abc:	2b50      	cmp	r3, #80	; 0x50
 8003abe:	d03c      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0xfa>
 8003ac0:	2b50      	cmp	r3, #80	; 0x50
 8003ac2:	d873      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003ac4:	2b40      	cmp	r3, #64	; 0x40
 8003ac6:	d058      	beq.n	8003b7a <HAL_TIM_ConfigClockSource+0x13a>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d86f      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003acc:	2b30      	cmp	r3, #48	; 0x30
 8003ace:	d064      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d86b      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003ad4:	2b20      	cmp	r3, #32
 8003ad6:	d060      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d867      	bhi.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d05c      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ae0:	2b10      	cmp	r3, #16
 8003ae2:	d05a      	beq.n	8003b9a <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	e062      	b.n	8003bac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003af6:	f000 f9b9 	bl	8003e6c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	609a      	str	r2, [r3, #8]
      break;
 8003b12:	e04f      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b24:	f000 f9a2 	bl	8003e6c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b36:	609a      	str	r2, [r3, #8]
      break;
 8003b38:	e03c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b46:	461a      	mov	r2, r3
 8003b48:	f000 f916 	bl	8003d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2150      	movs	r1, #80	; 0x50
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 f96f 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003b58:	e02c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b66:	461a      	mov	r2, r3
 8003b68:	f000 f935 	bl	8003dd6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2160      	movs	r1, #96	; 0x60
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f95f 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003b78:	e01c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b86:	461a      	mov	r2, r3
 8003b88:	f000 f8f6 	bl	8003d78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2140      	movs	r1, #64	; 0x40
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 f94f 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003b98:	e00c      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f000 f946 	bl	8003e36 <TIM_ITRx_SetConfig>
      break;
 8003baa:	e003      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bac:	2301      	movs	r3, #1
 8003bae:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb0:	e000      	b.n	8003bb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	fffeff88 	.word	0xfffeff88

08003bd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr

08003c24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a40      	ldr	r2, [pc, #256]	; (8003d4c <TIM_Base_SetConfig+0x114>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d013      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c56:	d00f      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a3d      	ldr	r2, [pc, #244]	; (8003d50 <TIM_Base_SetConfig+0x118>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d00b      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a3c      	ldr	r2, [pc, #240]	; (8003d54 <TIM_Base_SetConfig+0x11c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d007      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a3b      	ldr	r2, [pc, #236]	; (8003d58 <TIM_Base_SetConfig+0x120>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d003      	beq.n	8003c78 <TIM_Base_SetConfig+0x40>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a3a      	ldr	r2, [pc, #232]	; (8003d5c <TIM_Base_SetConfig+0x124>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d108      	bne.n	8003c8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a2f      	ldr	r2, [pc, #188]	; (8003d4c <TIM_Base_SetConfig+0x114>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02b      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c98:	d027      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a2c      	ldr	r2, [pc, #176]	; (8003d50 <TIM_Base_SetConfig+0x118>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d023      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a2b      	ldr	r2, [pc, #172]	; (8003d54 <TIM_Base_SetConfig+0x11c>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d01f      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a2a      	ldr	r2, [pc, #168]	; (8003d58 <TIM_Base_SetConfig+0x120>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d01b      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a29      	ldr	r2, [pc, #164]	; (8003d5c <TIM_Base_SetConfig+0x124>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d017      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a28      	ldr	r2, [pc, #160]	; (8003d60 <TIM_Base_SetConfig+0x128>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d013      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a27      	ldr	r2, [pc, #156]	; (8003d64 <TIM_Base_SetConfig+0x12c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d00f      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a26      	ldr	r2, [pc, #152]	; (8003d68 <TIM_Base_SetConfig+0x130>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00b      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a25      	ldr	r2, [pc, #148]	; (8003d6c <TIM_Base_SetConfig+0x134>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d007      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <TIM_Base_SetConfig+0x138>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d003      	beq.n	8003cea <TIM_Base_SetConfig+0xb2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <TIM_Base_SetConfig+0x13c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d108      	bne.n	8003cfc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a0a      	ldr	r2, [pc, #40]	; (8003d4c <TIM_Base_SetConfig+0x114>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_Base_SetConfig+0xf8>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a0c      	ldr	r2, [pc, #48]	; (8003d5c <TIM_Base_SetConfig+0x124>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d103      	bne.n	8003d38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	615a      	str	r2, [r3, #20]
}
 8003d3e:	bf00      	nop
 8003d40:	3714      	adds	r7, #20
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40000400 	.word	0x40000400
 8003d54:	40000800 	.word	0x40000800
 8003d58:	40000c00 	.word	0x40000c00
 8003d5c:	40010400 	.word	0x40010400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800
 8003d6c:	40001800 	.word	0x40001800
 8003d70:	40001c00 	.word	0x40001c00
 8003d74:	40002000 	.word	0x40002000

08003d78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b087      	sub	sp, #28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a1b      	ldr	r3, [r3, #32]
 8003d88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	f023 0201 	bic.w	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003da2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	f023 030a 	bic.w	r3, r3, #10
 8003db4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	697a      	ldr	r2, [r7, #20]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b087      	sub	sp, #28
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	60f8      	str	r0, [r7, #12]
 8003dde:	60b9      	str	r1, [r7, #8]
 8003de0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	f023 0210 	bic.w	r2, r3, #16
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	699b      	ldr	r3, [r3, #24]
 8003df2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	031b      	lsls	r3, r3, #12
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	621a      	str	r2, [r3, #32]
}
 8003e2a:	bf00      	nop
 8003e2c:	371c      	adds	r7, #28
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e36:	b480      	push	{r7}
 8003e38:	b085      	sub	sp, #20
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
 8003e3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f043 0307 	orr.w	r3, r3, #7
 8003e58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68fa      	ldr	r2, [r7, #12]
 8003e5e:	609a      	str	r2, [r3, #8]
}
 8003e60:	bf00      	nop
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
 8003e78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	021a      	lsls	r2, r3, #8
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	4313      	orrs	r3, r2
 8003e98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	609a      	str	r2, [r3, #8]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e06d      	b.n	8003fa0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a30      	ldr	r2, [pc, #192]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d004      	beq.n	8003ef8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a2f      	ldr	r2, [pc, #188]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d108      	bne.n	8003f0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003efe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a20      	ldr	r2, [pc, #128]	; (8003fac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d022      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f36:	d01d      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a1d      	ldr	r2, [pc, #116]	; (8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d018      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a1c      	ldr	r2, [pc, #112]	; (8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d013      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a1a      	ldr	r2, [pc, #104]	; (8003fbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00e      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a15      	ldr	r2, [pc, #84]	; (8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d009      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a16      	ldr	r2, [pc, #88]	; (8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d004      	beq.n	8003f74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d10c      	bne.n	8003f8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40010000 	.word	0x40010000
 8003fb0:	40010400 	.word	0x40010400
 8003fb4:	40000400 	.word	0x40000400
 8003fb8:	40000800 	.word	0x40000800
 8003fbc:	40000c00 	.word	0x40000c00
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40001800 	.word	0x40001800

08003fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fe4:	bf00      	nop
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e040      	b.n	8004098 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7fd fc8e 	bl	8001948 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2224      	movs	r2, #36	; 0x24
 8004030:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fbc2 	bl	80047cc <UART_SetConfig>
 8004048:	4603      	mov	r3, r0
 800404a:	2b01      	cmp	r3, #1
 800404c:	d101      	bne.n	8004052 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e022      	b.n	8004098 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fe1a 	bl	8004c94 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800406e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800407e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 fea1 	bl	8004dd8 <UART_CheckIdleState>
 8004096:	4603      	mov	r3, r0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3708      	adds	r7, #8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	603b      	str	r3, [r7, #0]
 80040ac:	4613      	mov	r3, r2
 80040ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d171      	bne.n	800419c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_UART_Transmit+0x24>
 80040be:	88fb      	ldrh	r3, [r7, #6]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e06a      	b.n	800419e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2221      	movs	r2, #33	; 0x21
 80040d4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040d6:	f7fd fe37 	bl	8001d48 <HAL_GetTick>
 80040da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	88fa      	ldrh	r2, [r7, #6]
 80040e0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	88fa      	ldrh	r2, [r7, #6]
 80040e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f4:	d108      	bne.n	8004108 <HAL_UART_Transmit+0x68>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d104      	bne.n	8004108 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	61bb      	str	r3, [r7, #24]
 8004106:	e003      	b.n	8004110 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800410c:	2300      	movs	r3, #0
 800410e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004110:	e02c      	b.n	800416c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	2180      	movs	r1, #128	; 0x80
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fea8 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e038      	b.n	800419e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	881b      	ldrh	r3, [r3, #0]
 8004136:	461a      	mov	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004140:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	3302      	adds	r3, #2
 8004146:	61bb      	str	r3, [r7, #24]
 8004148:	e007      	b.n	800415a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	781a      	ldrb	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	3301      	adds	r3, #1
 8004158:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004160:	b29b      	uxth	r3, r3
 8004162:	3b01      	subs	r3, #1
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004172:	b29b      	uxth	r3, r3
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1cc      	bne.n	8004112 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	2200      	movs	r2, #0
 8004180:	2140      	movs	r1, #64	; 0x40
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 fe75 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d001      	beq.n	8004192 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e005      	b.n	800419e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2220      	movs	r2, #32
 8004196:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004198:	2300      	movs	r3, #0
 800419a:	e000      	b.n	800419e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800419c:	2302      	movs	r3, #2
  }
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b0ba      	sub	sp, #232	; 0xe8
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80041ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80041d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80041d6:	4013      	ands	r3, r2
 80041d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80041dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d115      	bne.n	8004210 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80041e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e8:	f003 0320 	and.w	r3, r3, #32
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00f      	beq.n	8004210 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f4:	f003 0320 	and.w	r3, r3, #32
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d009      	beq.n	8004210 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 82ac 	beq.w	800475e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
      }
      return;
 800420e:	e2a6      	b.n	800475e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004214:	2b00      	cmp	r3, #0
 8004216:	f000 8117 	beq.w	8004448 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800421a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800421e:	f003 0301 	and.w	r3, r3, #1
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004226:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800422a:	4b85      	ldr	r3, [pc, #532]	; (8004440 <HAL_UART_IRQHandler+0x298>)
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 810a 	beq.w	8004448 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	d011      	beq.n	8004264 <HAL_UART_IRQHandler+0xbc>
 8004240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00b      	beq.n	8004264 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2201      	movs	r2, #1
 8004252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425a:	f043 0201 	orr.w	r2, r3, #1
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d011      	beq.n	8004294 <HAL_UART_IRQHandler+0xec>
 8004270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00b      	beq.n	8004294 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2202      	movs	r2, #2
 8004282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428a:	f043 0204 	orr.w	r2, r3, #4
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d011      	beq.n	80042c4 <HAL_UART_IRQHandler+0x11c>
 80042a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042a4:	f003 0301 	and.w	r3, r3, #1
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00b      	beq.n	80042c4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2204      	movs	r2, #4
 80042b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042ba:	f043 0202 	orr.w	r2, r3, #2
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80042c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d017      	beq.n	8004300 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042d4:	f003 0320 	and.w	r3, r3, #32
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d105      	bne.n	80042e8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80042dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80042e0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2208      	movs	r2, #8
 80042ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042f6:	f043 0208 	orr.w	r2, r3, #8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004308:	2b00      	cmp	r3, #0
 800430a:	d012      	beq.n	8004332 <HAL_UART_IRQHandler+0x18a>
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00c      	beq.n	8004332 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004328:	f043 0220 	orr.w	r2, r3, #32
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 8212 	beq.w	8004762 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800433e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004342:	f003 0320 	and.w	r3, r3, #32
 8004346:	2b00      	cmp	r3, #0
 8004348:	d00d      	beq.n	8004366 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800434a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800434e:	f003 0320 	and.w	r3, r3, #32
 8004352:	2b00      	cmp	r3, #0
 8004354:	d007      	beq.n	8004366 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800436c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800437a:	2b40      	cmp	r3, #64	; 0x40
 800437c:	d005      	beq.n	800438a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800437e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004382:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004386:	2b00      	cmp	r3, #0
 8004388:	d04f      	beq.n	800442a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 fe37 	bl	8004ffe <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b40      	cmp	r3, #64	; 0x40
 800439c:	d141      	bne.n	8004422 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80043ac:	e853 3f00 	ldrex	r3, [r3]
 80043b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80043b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80043b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80043ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80043ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80043d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80043e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1d9      	bne.n	800439e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d013      	beq.n	800441a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f6:	4a13      	ldr	r2, [pc, #76]	; (8004444 <HAL_UART_IRQHandler+0x29c>)
 80043f8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fd fe53 	bl	80020aa <HAL_DMA_Abort_IT>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d017      	beq.n	800443a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004414:	4610      	mov	r0, r2
 8004416:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004418:	e00f      	b.n	800443a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f000 f9b6 	bl	800478c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004420:	e00b      	b.n	800443a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f000 f9b2 	bl	800478c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	e007      	b.n	800443a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9ae 	bl	800478c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8004438:	e193      	b.n	8004762 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800443a:	bf00      	nop
    return;
 800443c:	e191      	b.n	8004762 <HAL_UART_IRQHandler+0x5ba>
 800443e:	bf00      	nop
 8004440:	04000120 	.word	0x04000120
 8004444:	080050c7 	.word	0x080050c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444c:	2b01      	cmp	r3, #1
 800444e:	f040 814c 	bne.w	80046ea <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 8145 	beq.w	80046ea <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004464:	f003 0310 	and.w	r3, r3, #16
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 813e 	beq.w	80046ea <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2210      	movs	r2, #16
 8004474:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	f040 80b6 	bne.w	80045f2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004492:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8165 	beq.w	8004766 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044a6:	429a      	cmp	r2, r3
 80044a8:	f080 815d 	bcs.w	8004766 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80044b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c0:	f000 8086 	beq.w	80045d0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80044d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80044f2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80044fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004506:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1da      	bne.n	80044c4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	3308      	adds	r3, #8
 8004514:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800451e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004520:	f023 0301 	bic.w	r3, r3, #1
 8004524:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	3308      	adds	r3, #8
 800452e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004532:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004536:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800453a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800453e:	e841 2300 	strex	r3, r2, [r1]
 8004542:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004544:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1e1      	bne.n	800450e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3308      	adds	r3, #8
 8004550:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004552:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004554:	e853 3f00 	ldrex	r3, [r3]
 8004558:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800455a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800455c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004560:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3308      	adds	r3, #8
 800456a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800456e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004570:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004574:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800457c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e3      	bne.n	800454a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2220      	movs	r2, #32
 8004586:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004596:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004598:	e853 3f00 	ldrex	r3, [r3]
 800459c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a0:	f023 0310 	bic.w	r3, r3, #16
 80045a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80045b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80045b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e4      	bne.n	8004590 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd fcfd 	bl	8001fca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f8d8 	bl	80047a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045f0:	e0b9      	b.n	8004766 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045fe:	b29b      	uxth	r3, r3
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	f000 80ab 	beq.w	800476a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80a6 	beq.w	800476a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004632:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	461a      	mov	r2, r3
 800463c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004640:	647b      	str	r3, [r7, #68]	; 0x44
 8004642:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004644:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004646:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004648:	e841 2300 	strex	r3, r2, [r1]
 800464c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800464e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1e4      	bne.n	800461e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3308      	adds	r3, #8
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	e853 3f00 	ldrex	r3, [r3]
 8004662:	623b      	str	r3, [r7, #32]
   return(result);
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	f023 0301 	bic.w	r3, r3, #1
 800466a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3308      	adds	r3, #8
 8004674:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004678:	633a      	str	r2, [r7, #48]	; 0x30
 800467a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800467e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004680:	e841 2300 	strex	r3, r2, [r1]
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e3      	bne.n	8004654 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2220      	movs	r2, #32
 8004690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	e853 3f00 	ldrex	r3, [r3]
 80046ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f023 0310 	bic.w	r3, r3, #16
 80046b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	461a      	mov	r2, r3
 80046be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046c2:	61fb      	str	r3, [r7, #28]
 80046c4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c6:	69b9      	ldr	r1, [r7, #24]
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	e841 2300 	strex	r3, r2, [r1]
 80046ce:	617b      	str	r3, [r7, #20]
   return(result);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1e4      	bne.n	80046a0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80046e0:	4619      	mov	r1, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f85c 	bl	80047a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80046e8:	e03f      	b.n	800476a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80046ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00e      	beq.n	8004714 <HAL_UART_IRQHandler+0x56c>
 80046f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d008      	beq.n	8004714 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800470a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f853 	bl	80047b8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004712:	e02d      	b.n	8004770 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00e      	beq.n	800473e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004730:	2b00      	cmp	r3, #0
 8004732:	d01c      	beq.n	800476e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	4798      	blx	r3
    }
    return;
 800473c:	e017      	b.n	800476e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800473e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d012      	beq.n	8004770 <HAL_UART_IRQHandler+0x5c8>
 800474a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800474e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00c      	beq.n	8004770 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 fccb 	bl	80050f2 <UART_EndTransmit_IT>
    return;
 800475c:	e008      	b.n	8004770 <HAL_UART_IRQHandler+0x5c8>
      return;
 800475e:	bf00      	nop
 8004760:	e006      	b.n	8004770 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004762:	bf00      	nop
 8004764:	e004      	b.n	8004770 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004766:	bf00      	nop
 8004768:	e002      	b.n	8004770 <HAL_UART_IRQHandler+0x5c8>
      return;
 800476a:	bf00      	nop
 800476c:	e000      	b.n	8004770 <HAL_UART_IRQHandler+0x5c8>
    return;
 800476e:	bf00      	nop
  }

}
 8004770:	37e8      	adds	r7, #232	; 0xe8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop

08004778 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	460b      	mov	r3, r1
 80047aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b6:	4770      	bx	lr

080047b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b088      	sub	sp, #32
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	4ba6      	ldr	r3, [pc, #664]	; (8004a90 <UART_SetConfig+0x2c4>)
 80047f8:	4013      	ands	r3, r2
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	6812      	ldr	r2, [r2, #0]
 80047fe:	6979      	ldr	r1, [r7, #20]
 8004800:	430b      	orrs	r3, r1
 8004802:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	430a      	orrs	r2, r1
 8004818:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a1b      	ldr	r3, [r3, #32]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	4313      	orrs	r3, r2
 8004828:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	430a      	orrs	r2, r1
 800483c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a94      	ldr	r2, [pc, #592]	; (8004a94 <UART_SetConfig+0x2c8>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d120      	bne.n	800488a <UART_SetConfig+0xbe>
 8004848:	4b93      	ldr	r3, [pc, #588]	; (8004a98 <UART_SetConfig+0x2cc>)
 800484a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	2b03      	cmp	r3, #3
 8004854:	d816      	bhi.n	8004884 <UART_SetConfig+0xb8>
 8004856:	a201      	add	r2, pc, #4	; (adr r2, 800485c <UART_SetConfig+0x90>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	0800486d 	.word	0x0800486d
 8004860:	08004879 	.word	0x08004879
 8004864:	08004873 	.word	0x08004873
 8004868:	0800487f 	.word	0x0800487f
 800486c:	2301      	movs	r3, #1
 800486e:	77fb      	strb	r3, [r7, #31]
 8004870:	e150      	b.n	8004b14 <UART_SetConfig+0x348>
 8004872:	2302      	movs	r3, #2
 8004874:	77fb      	strb	r3, [r7, #31]
 8004876:	e14d      	b.n	8004b14 <UART_SetConfig+0x348>
 8004878:	2304      	movs	r3, #4
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e14a      	b.n	8004b14 <UART_SetConfig+0x348>
 800487e:	2308      	movs	r3, #8
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e147      	b.n	8004b14 <UART_SetConfig+0x348>
 8004884:	2310      	movs	r3, #16
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e144      	b.n	8004b14 <UART_SetConfig+0x348>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a83      	ldr	r2, [pc, #524]	; (8004a9c <UART_SetConfig+0x2d0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d132      	bne.n	80048fa <UART_SetConfig+0x12e>
 8004894:	4b80      	ldr	r3, [pc, #512]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489a:	f003 030c 	and.w	r3, r3, #12
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d828      	bhi.n	80048f4 <UART_SetConfig+0x128>
 80048a2:	a201      	add	r2, pc, #4	; (adr r2, 80048a8 <UART_SetConfig+0xdc>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048dd 	.word	0x080048dd
 80048ac:	080048f5 	.word	0x080048f5
 80048b0:	080048f5 	.word	0x080048f5
 80048b4:	080048f5 	.word	0x080048f5
 80048b8:	080048e9 	.word	0x080048e9
 80048bc:	080048f5 	.word	0x080048f5
 80048c0:	080048f5 	.word	0x080048f5
 80048c4:	080048f5 	.word	0x080048f5
 80048c8:	080048e3 	.word	0x080048e3
 80048cc:	080048f5 	.word	0x080048f5
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048f5 	.word	0x080048f5
 80048d8:	080048ef 	.word	0x080048ef
 80048dc:	2300      	movs	r3, #0
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e118      	b.n	8004b14 <UART_SetConfig+0x348>
 80048e2:	2302      	movs	r3, #2
 80048e4:	77fb      	strb	r3, [r7, #31]
 80048e6:	e115      	b.n	8004b14 <UART_SetConfig+0x348>
 80048e8:	2304      	movs	r3, #4
 80048ea:	77fb      	strb	r3, [r7, #31]
 80048ec:	e112      	b.n	8004b14 <UART_SetConfig+0x348>
 80048ee:	2308      	movs	r3, #8
 80048f0:	77fb      	strb	r3, [r7, #31]
 80048f2:	e10f      	b.n	8004b14 <UART_SetConfig+0x348>
 80048f4:	2310      	movs	r3, #16
 80048f6:	77fb      	strb	r3, [r7, #31]
 80048f8:	e10c      	b.n	8004b14 <UART_SetConfig+0x348>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a68      	ldr	r2, [pc, #416]	; (8004aa0 <UART_SetConfig+0x2d4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d120      	bne.n	8004946 <UART_SetConfig+0x17a>
 8004904:	4b64      	ldr	r3, [pc, #400]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800490e:	2b30      	cmp	r3, #48	; 0x30
 8004910:	d013      	beq.n	800493a <UART_SetConfig+0x16e>
 8004912:	2b30      	cmp	r3, #48	; 0x30
 8004914:	d814      	bhi.n	8004940 <UART_SetConfig+0x174>
 8004916:	2b20      	cmp	r3, #32
 8004918:	d009      	beq.n	800492e <UART_SetConfig+0x162>
 800491a:	2b20      	cmp	r3, #32
 800491c:	d810      	bhi.n	8004940 <UART_SetConfig+0x174>
 800491e:	2b00      	cmp	r3, #0
 8004920:	d002      	beq.n	8004928 <UART_SetConfig+0x15c>
 8004922:	2b10      	cmp	r3, #16
 8004924:	d006      	beq.n	8004934 <UART_SetConfig+0x168>
 8004926:	e00b      	b.n	8004940 <UART_SetConfig+0x174>
 8004928:	2300      	movs	r3, #0
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e0f2      	b.n	8004b14 <UART_SetConfig+0x348>
 800492e:	2302      	movs	r3, #2
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e0ef      	b.n	8004b14 <UART_SetConfig+0x348>
 8004934:	2304      	movs	r3, #4
 8004936:	77fb      	strb	r3, [r7, #31]
 8004938:	e0ec      	b.n	8004b14 <UART_SetConfig+0x348>
 800493a:	2308      	movs	r3, #8
 800493c:	77fb      	strb	r3, [r7, #31]
 800493e:	e0e9      	b.n	8004b14 <UART_SetConfig+0x348>
 8004940:	2310      	movs	r3, #16
 8004942:	77fb      	strb	r3, [r7, #31]
 8004944:	e0e6      	b.n	8004b14 <UART_SetConfig+0x348>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a56      	ldr	r2, [pc, #344]	; (8004aa4 <UART_SetConfig+0x2d8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d120      	bne.n	8004992 <UART_SetConfig+0x1c6>
 8004950:	4b51      	ldr	r3, [pc, #324]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004956:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800495a:	2bc0      	cmp	r3, #192	; 0xc0
 800495c:	d013      	beq.n	8004986 <UART_SetConfig+0x1ba>
 800495e:	2bc0      	cmp	r3, #192	; 0xc0
 8004960:	d814      	bhi.n	800498c <UART_SetConfig+0x1c0>
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d009      	beq.n	800497a <UART_SetConfig+0x1ae>
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d810      	bhi.n	800498c <UART_SetConfig+0x1c0>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d002      	beq.n	8004974 <UART_SetConfig+0x1a8>
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d006      	beq.n	8004980 <UART_SetConfig+0x1b4>
 8004972:	e00b      	b.n	800498c <UART_SetConfig+0x1c0>
 8004974:	2300      	movs	r3, #0
 8004976:	77fb      	strb	r3, [r7, #31]
 8004978:	e0cc      	b.n	8004b14 <UART_SetConfig+0x348>
 800497a:	2302      	movs	r3, #2
 800497c:	77fb      	strb	r3, [r7, #31]
 800497e:	e0c9      	b.n	8004b14 <UART_SetConfig+0x348>
 8004980:	2304      	movs	r3, #4
 8004982:	77fb      	strb	r3, [r7, #31]
 8004984:	e0c6      	b.n	8004b14 <UART_SetConfig+0x348>
 8004986:	2308      	movs	r3, #8
 8004988:	77fb      	strb	r3, [r7, #31]
 800498a:	e0c3      	b.n	8004b14 <UART_SetConfig+0x348>
 800498c:	2310      	movs	r3, #16
 800498e:	77fb      	strb	r3, [r7, #31]
 8004990:	e0c0      	b.n	8004b14 <UART_SetConfig+0x348>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a44      	ldr	r2, [pc, #272]	; (8004aa8 <UART_SetConfig+0x2dc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d125      	bne.n	80049e8 <UART_SetConfig+0x21c>
 800499c:	4b3e      	ldr	r3, [pc, #248]	; (8004a98 <UART_SetConfig+0x2cc>)
 800499e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049aa:	d017      	beq.n	80049dc <UART_SetConfig+0x210>
 80049ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049b0:	d817      	bhi.n	80049e2 <UART_SetConfig+0x216>
 80049b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b6:	d00b      	beq.n	80049d0 <UART_SetConfig+0x204>
 80049b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049bc:	d811      	bhi.n	80049e2 <UART_SetConfig+0x216>
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <UART_SetConfig+0x1fe>
 80049c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049c6:	d006      	beq.n	80049d6 <UART_SetConfig+0x20a>
 80049c8:	e00b      	b.n	80049e2 <UART_SetConfig+0x216>
 80049ca:	2300      	movs	r3, #0
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e0a1      	b.n	8004b14 <UART_SetConfig+0x348>
 80049d0:	2302      	movs	r3, #2
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e09e      	b.n	8004b14 <UART_SetConfig+0x348>
 80049d6:	2304      	movs	r3, #4
 80049d8:	77fb      	strb	r3, [r7, #31]
 80049da:	e09b      	b.n	8004b14 <UART_SetConfig+0x348>
 80049dc:	2308      	movs	r3, #8
 80049de:	77fb      	strb	r3, [r7, #31]
 80049e0:	e098      	b.n	8004b14 <UART_SetConfig+0x348>
 80049e2:	2310      	movs	r3, #16
 80049e4:	77fb      	strb	r3, [r7, #31]
 80049e6:	e095      	b.n	8004b14 <UART_SetConfig+0x348>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a2f      	ldr	r2, [pc, #188]	; (8004aac <UART_SetConfig+0x2e0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d125      	bne.n	8004a3e <UART_SetConfig+0x272>
 80049f2:	4b29      	ldr	r3, [pc, #164]	; (8004a98 <UART_SetConfig+0x2cc>)
 80049f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a00:	d017      	beq.n	8004a32 <UART_SetConfig+0x266>
 8004a02:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a06:	d817      	bhi.n	8004a38 <UART_SetConfig+0x26c>
 8004a08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a0c:	d00b      	beq.n	8004a26 <UART_SetConfig+0x25a>
 8004a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a12:	d811      	bhi.n	8004a38 <UART_SetConfig+0x26c>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <UART_SetConfig+0x254>
 8004a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1c:	d006      	beq.n	8004a2c <UART_SetConfig+0x260>
 8004a1e:	e00b      	b.n	8004a38 <UART_SetConfig+0x26c>
 8004a20:	2301      	movs	r3, #1
 8004a22:	77fb      	strb	r3, [r7, #31]
 8004a24:	e076      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a26:	2302      	movs	r3, #2
 8004a28:	77fb      	strb	r3, [r7, #31]
 8004a2a:	e073      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a2c:	2304      	movs	r3, #4
 8004a2e:	77fb      	strb	r3, [r7, #31]
 8004a30:	e070      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a32:	2308      	movs	r3, #8
 8004a34:	77fb      	strb	r3, [r7, #31]
 8004a36:	e06d      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e06a      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1b      	ldr	r2, [pc, #108]	; (8004ab0 <UART_SetConfig+0x2e4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d138      	bne.n	8004aba <UART_SetConfig+0x2ee>
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <UART_SetConfig+0x2cc>)
 8004a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a56:	d017      	beq.n	8004a88 <UART_SetConfig+0x2bc>
 8004a58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a5c:	d82a      	bhi.n	8004ab4 <UART_SetConfig+0x2e8>
 8004a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a62:	d00b      	beq.n	8004a7c <UART_SetConfig+0x2b0>
 8004a64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a68:	d824      	bhi.n	8004ab4 <UART_SetConfig+0x2e8>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <UART_SetConfig+0x2aa>
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d006      	beq.n	8004a82 <UART_SetConfig+0x2b6>
 8004a74:	e01e      	b.n	8004ab4 <UART_SetConfig+0x2e8>
 8004a76:	2300      	movs	r3, #0
 8004a78:	77fb      	strb	r3, [r7, #31]
 8004a7a:	e04b      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	77fb      	strb	r3, [r7, #31]
 8004a80:	e048      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a82:	2304      	movs	r3, #4
 8004a84:	77fb      	strb	r3, [r7, #31]
 8004a86:	e045      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a88:	2308      	movs	r3, #8
 8004a8a:	77fb      	strb	r3, [r7, #31]
 8004a8c:	e042      	b.n	8004b14 <UART_SetConfig+0x348>
 8004a8e:	bf00      	nop
 8004a90:	efff69f3 	.word	0xefff69f3
 8004a94:	40011000 	.word	0x40011000
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40004400 	.word	0x40004400
 8004aa0:	40004800 	.word	0x40004800
 8004aa4:	40004c00 	.word	0x40004c00
 8004aa8:	40005000 	.word	0x40005000
 8004aac:	40011400 	.word	0x40011400
 8004ab0:	40007800 	.word	0x40007800
 8004ab4:	2310      	movs	r3, #16
 8004ab6:	77fb      	strb	r3, [r7, #31]
 8004ab8:	e02c      	b.n	8004b14 <UART_SetConfig+0x348>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a72      	ldr	r2, [pc, #456]	; (8004c88 <UART_SetConfig+0x4bc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d125      	bne.n	8004b10 <UART_SetConfig+0x344>
 8004ac4:	4b71      	ldr	r3, [pc, #452]	; (8004c8c <UART_SetConfig+0x4c0>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004ace:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ad2:	d017      	beq.n	8004b04 <UART_SetConfig+0x338>
 8004ad4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004ad8:	d817      	bhi.n	8004b0a <UART_SetConfig+0x33e>
 8004ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ade:	d00b      	beq.n	8004af8 <UART_SetConfig+0x32c>
 8004ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae4:	d811      	bhi.n	8004b0a <UART_SetConfig+0x33e>
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d003      	beq.n	8004af2 <UART_SetConfig+0x326>
 8004aea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004aee:	d006      	beq.n	8004afe <UART_SetConfig+0x332>
 8004af0:	e00b      	b.n	8004b0a <UART_SetConfig+0x33e>
 8004af2:	2300      	movs	r3, #0
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e00d      	b.n	8004b14 <UART_SetConfig+0x348>
 8004af8:	2302      	movs	r3, #2
 8004afa:	77fb      	strb	r3, [r7, #31]
 8004afc:	e00a      	b.n	8004b14 <UART_SetConfig+0x348>
 8004afe:	2304      	movs	r3, #4
 8004b00:	77fb      	strb	r3, [r7, #31]
 8004b02:	e007      	b.n	8004b14 <UART_SetConfig+0x348>
 8004b04:	2308      	movs	r3, #8
 8004b06:	77fb      	strb	r3, [r7, #31]
 8004b08:	e004      	b.n	8004b14 <UART_SetConfig+0x348>
 8004b0a:	2310      	movs	r3, #16
 8004b0c:	77fb      	strb	r3, [r7, #31]
 8004b0e:	e001      	b.n	8004b14 <UART_SetConfig+0x348>
 8004b10:	2310      	movs	r3, #16
 8004b12:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1c:	d15b      	bne.n	8004bd6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004b1e:	7ffb      	ldrb	r3, [r7, #31]
 8004b20:	2b08      	cmp	r3, #8
 8004b22:	d828      	bhi.n	8004b76 <UART_SetConfig+0x3aa>
 8004b24:	a201      	add	r2, pc, #4	; (adr r2, 8004b2c <UART_SetConfig+0x360>)
 8004b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b2a:	bf00      	nop
 8004b2c:	08004b51 	.word	0x08004b51
 8004b30:	08004b59 	.word	0x08004b59
 8004b34:	08004b61 	.word	0x08004b61
 8004b38:	08004b77 	.word	0x08004b77
 8004b3c:	08004b67 	.word	0x08004b67
 8004b40:	08004b77 	.word	0x08004b77
 8004b44:	08004b77 	.word	0x08004b77
 8004b48:	08004b77 	.word	0x08004b77
 8004b4c:	08004b6f 	.word	0x08004b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b50:	f7fe f936 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8004b54:	61b8      	str	r0, [r7, #24]
        break;
 8004b56:	e013      	b.n	8004b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b58:	f7fe f946 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8004b5c:	61b8      	str	r0, [r7, #24]
        break;
 8004b5e:	e00f      	b.n	8004b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b60:	4b4b      	ldr	r3, [pc, #300]	; (8004c90 <UART_SetConfig+0x4c4>)
 8004b62:	61bb      	str	r3, [r7, #24]
        break;
 8004b64:	e00c      	b.n	8004b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b66:	f7fe f859 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8004b6a:	61b8      	str	r0, [r7, #24]
        break;
 8004b6c:	e008      	b.n	8004b80 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b72:	61bb      	str	r3, [r7, #24]
        break;
 8004b74:	e004      	b.n	8004b80 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b7e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d074      	beq.n	8004c70 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	005a      	lsls	r2, r3, #1
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	441a      	add	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b0f      	cmp	r3, #15
 8004ba0:	d916      	bls.n	8004bd0 <UART_SetConfig+0x404>
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba8:	d212      	bcs.n	8004bd0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	f023 030f 	bic.w	r3, r3, #15
 8004bb2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	085b      	lsrs	r3, r3, #1
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f003 0307 	and.w	r3, r3, #7
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	89fb      	ldrh	r3, [r7, #14]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	89fa      	ldrh	r2, [r7, #14]
 8004bcc:	60da      	str	r2, [r3, #12]
 8004bce:	e04f      	b.n	8004c70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	77bb      	strb	r3, [r7, #30]
 8004bd4:	e04c      	b.n	8004c70 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004bd6:	7ffb      	ldrb	r3, [r7, #31]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d828      	bhi.n	8004c2e <UART_SetConfig+0x462>
 8004bdc:	a201      	add	r2, pc, #4	; (adr r2, 8004be4 <UART_SetConfig+0x418>)
 8004bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004c09 	.word	0x08004c09
 8004be8:	08004c11 	.word	0x08004c11
 8004bec:	08004c19 	.word	0x08004c19
 8004bf0:	08004c2f 	.word	0x08004c2f
 8004bf4:	08004c1f 	.word	0x08004c1f
 8004bf8:	08004c2f 	.word	0x08004c2f
 8004bfc:	08004c2f 	.word	0x08004c2f
 8004c00:	08004c2f 	.word	0x08004c2f
 8004c04:	08004c27 	.word	0x08004c27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c08:	f7fe f8da 	bl	8002dc0 <HAL_RCC_GetPCLK1Freq>
 8004c0c:	61b8      	str	r0, [r7, #24]
        break;
 8004c0e:	e013      	b.n	8004c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c10:	f7fe f8ea 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
 8004c14:	61b8      	str	r0, [r7, #24]
        break;
 8004c16:	e00f      	b.n	8004c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c18:	4b1d      	ldr	r3, [pc, #116]	; (8004c90 <UART_SetConfig+0x4c4>)
 8004c1a:	61bb      	str	r3, [r7, #24]
        break;
 8004c1c:	e00c      	b.n	8004c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c1e:	f7fd fffd 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8004c22:	61b8      	str	r0, [r7, #24]
        break;
 8004c24:	e008      	b.n	8004c38 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c2a:	61bb      	str	r3, [r7, #24]
        break;
 8004c2c:	e004      	b.n	8004c38 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
 8004c34:	77bb      	strb	r3, [r7, #30]
        break;
 8004c36:	bf00      	nop
    }

    if (pclk != 0U)
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d018      	beq.n	8004c70 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	085a      	lsrs	r2, r3, #1
 8004c44:	69bb      	ldr	r3, [r7, #24]
 8004c46:	441a      	add	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c50:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	2b0f      	cmp	r3, #15
 8004c56:	d909      	bls.n	8004c6c <UART_SetConfig+0x4a0>
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5e:	d205      	bcs.n	8004c6c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	60da      	str	r2, [r3, #12]
 8004c6a:	e001      	b.n	8004c70 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c7c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3720      	adds	r7, #32
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40007c00 	.word	0x40007c00
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	00f42400 	.word	0x00f42400

08004c94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b083      	sub	sp, #12
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc2:	f003 0302 	and.w	r3, r3, #2
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	430a      	orrs	r2, r1
 8004d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	430a      	orrs	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4a:	f003 0320 	and.w	r3, r3, #32
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d01a      	beq.n	8004daa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	430a      	orrs	r2, r1
 8004d88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d92:	d10a      	bne.n	8004daa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00a      	beq.n	8004dcc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	605a      	str	r2, [r3, #4]
  }
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af02      	add	r7, sp, #8
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004de8:	f7fc ffae 	bl	8001d48 <HAL_GetTick>
 8004dec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0308 	and.w	r3, r3, #8
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d10e      	bne.n	8004e1a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dfc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f831 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e027      	b.n	8004e6a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b04      	cmp	r3, #4
 8004e26:	d10e      	bne.n	8004e46 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f81b 	bl	8004e72 <UART_WaitOnFlagUntilTimeout>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e011      	b.n	8004e6a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}

08004e72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b09c      	sub	sp, #112	; 0x70
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	60f8      	str	r0, [r7, #12]
 8004e7a:	60b9      	str	r1, [r7, #8]
 8004e7c:	603b      	str	r3, [r7, #0]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e82:	e0a7      	b.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8a:	f000 80a3 	beq.w	8004fd4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8e:	f7fc ff5b 	bl	8001d48 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d302      	bcc.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d13f      	bne.n	8004f24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004eac:	e853 3f00 	ldrex	r3, [r3]
 8004eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004eb8:	667b      	str	r3, [r7, #100]	; 0x64
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ec4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004ec8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1e6      	bne.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3308      	adds	r3, #8
 8004edc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	663b      	str	r3, [r7, #96]	; 0x60
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ef6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ef8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004efc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2220      	movs	r2, #32
 8004f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e068      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d050      	beq.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f40:	d148      	bne.n	8004fd4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f54:	e853 3f00 	ldrex	r3, [r3]
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	461a      	mov	r2, r3
 8004f68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e6      	bne.n	8004f4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	3308      	adds	r3, #8
 8004f84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	e853 3f00 	ldrex	r3, [r3]
 8004f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f023 0301 	bic.w	r3, r3, #1
 8004f94:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3308      	adds	r3, #8
 8004f9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f9e:	623a      	str	r2, [r7, #32]
 8004fa0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa2:	69f9      	ldr	r1, [r7, #28]
 8004fa4:	6a3a      	ldr	r2, [r7, #32]
 8004fa6:	e841 2300 	strex	r3, r2, [r1]
 8004faa:	61bb      	str	r3, [r7, #24]
   return(result);
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1e5      	bne.n	8004f7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2220      	movs	r2, #32
 8004fb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2220      	movs	r2, #32
 8004fbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2220      	movs	r2, #32
 8004fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fd0:	2303      	movs	r3, #3
 8004fd2:	e010      	b.n	8004ff6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	68ba      	ldr	r2, [r7, #8]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	bf0c      	ite	eq
 8004fe4:	2301      	moveq	r3, #1
 8004fe6:	2300      	movne	r3, #0
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	461a      	mov	r2, r3
 8004fec:	79fb      	ldrb	r3, [r7, #7]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	f43f af48 	beq.w	8004e84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3770      	adds	r7, #112	; 0x70
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b095      	sub	sp, #84	; 0x54
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800500e:	e853 3f00 	ldrex	r3, [r3]
 8005012:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005016:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800501a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005024:	643b      	str	r3, [r7, #64]	; 0x40
 8005026:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005028:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800502a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800502c:	e841 2300 	strex	r3, r2, [r1]
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005034:	2b00      	cmp	r3, #0
 8005036:	d1e6      	bne.n	8005006 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3308      	adds	r3, #8
 800503e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005040:	6a3b      	ldr	r3, [r7, #32]
 8005042:	e853 3f00 	ldrex	r3, [r3]
 8005046:	61fb      	str	r3, [r7, #28]
   return(result);
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f023 0301 	bic.w	r3, r3, #1
 800504e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	3308      	adds	r3, #8
 8005056:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005058:	62fa      	str	r2, [r7, #44]	; 0x2c
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800505e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005060:	e841 2300 	strex	r3, r2, [r1]
 8005064:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1e5      	bne.n	8005038 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005070:	2b01      	cmp	r3, #1
 8005072:	d118      	bne.n	80050a6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	e853 3f00 	ldrex	r3, [r3]
 8005080:	60bb      	str	r3, [r7, #8]
   return(result);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f023 0310 	bic.w	r3, r3, #16
 8005088:	647b      	str	r3, [r7, #68]	; 0x44
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	461a      	mov	r2, r3
 8005090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005092:	61bb      	str	r3, [r7, #24]
 8005094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005096:	6979      	ldr	r1, [r7, #20]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	e841 2300 	strex	r3, r2, [r1]
 800509e:	613b      	str	r3, [r7, #16]
   return(result);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1e6      	bne.n	8005074 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80050ba:	bf00      	nop
 80050bc:	3754      	adds	r7, #84	; 0x54
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff fb51 	bl	800478c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050ea:	bf00      	nop
 80050ec:	3710      	adds	r7, #16
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b088      	sub	sp, #32
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	e853 3f00 	ldrex	r3, [r3]
 8005106:	60bb      	str	r3, [r7, #8]
   return(result);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800510e:	61fb      	str	r3, [r7, #28]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	461a      	mov	r2, r3
 8005116:	69fb      	ldr	r3, [r7, #28]
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511c:	6979      	ldr	r1, [r7, #20]
 800511e:	69ba      	ldr	r2, [r7, #24]
 8005120:	e841 2300 	strex	r3, r2, [r1]
 8005124:	613b      	str	r3, [r7, #16]
   return(result);
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d1e6      	bne.n	80050fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2220      	movs	r2, #32
 8005130:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f7ff fb1d 	bl	8004778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800513e:	bf00      	nop
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <SerialAPI_WriteByte>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	byte - byte to write
 */
static void SerialAPI_WriteByte (sbgcGeneral_t *gSBGC, ui8 byte)
{
 8005146:	b480      	push	{r7}
 8005148:	b083      	sub	sp, #12
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d152      	bne.n	8005202 <SerialAPI_WriteByte+0xbc>

	if (calculateFreeTx_() < sizeof(ui8))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	685b      	ldr	r3, [r3, #4]
 8005160:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d310      	bcc.n	8005192 <SerialAPI_WriteByte+0x4c>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005178:	461a      	mov	r2, r3
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005188:	bf0c      	ite	eq
 800518a:	2301      	moveq	r3, #1
 800518c:	2300      	movne	r3, #0
 800518e:	b2db      	uxtb	r3, r3
 8005190:	e00c      	b.n	80051ac <SerialAPI_WriteByte+0x66>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80051a2:	429a      	cmp	r2, r3
 80051a4:	bf0c      	ite	eq
 80051a6:	2301      	moveq	r3, #1
 80051a8:	2300      	movne	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <SerialAPI_WriteByte+0x7e>
		serialAPI_Abort()
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2203      	movs	r2, #3
 80051b6:	701a      	strb	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051be:	2205      	movs	r2, #5
 80051c0:	769a      	strb	r2, [r3, #26]
 80051c2:	e01e      	b.n	8005202 <SerialAPI_WriteByte+0xbc>

	serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize] = byte;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	6852      	ldr	r2, [r2, #4]
 80051d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051d2:	7f12      	ldrb	r2, [r2, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	78fa      	ldrb	r2, [r7, #3]
 80051d8:	701a      	strb	r2, [r3, #0]
	serialAPI_CurCmd_->_payloadSize += sizeof(ui8);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e0:	7f1a      	ldrb	r2, [r3, #28]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	3201      	adds	r2, #1
 80051ea:	b2d2      	uxtb	r2, r2
 80051ec:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += sizeof(ui8);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	3201      	adds	r2, #1
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <SerialAPI_ReadByte>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read byte
 */
static ui8 SerialAPI_ReadByte (sbgcGeneral_t *gSBGC)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	ui8 byte = (ui8)*serialAPI_CurCmd_->_payload;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	73fb      	strb	r3, [r7, #15]

	if (((uintptr_t)serialAPI_CurCmd_->_payload) != calculateEndRx_())
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	461a      	mov	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005230:	33ff      	adds	r3, #255	; 0xff
 8005232:	429a      	cmp	r2, r3
 8005234:	d006      	beq.n	8005244 <SerialAPI_ReadByte+0x38>
		serialAPI_CurCmd_->_payload++;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523c:	6a1a      	ldr	r2, [r3, #32]
 800523e:	3201      	adds	r2, #1
 8005240:	621a      	str	r2, [r3, #32]
 8005242:	e006      	b.n	8005252 <SerialAPI_ReadByte+0x46>

	else
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005250:	621a      	str	r2, [r3, #32]

	return byte;
 8005252:	7bfb      	ldrb	r3, [r7, #15]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <SerialAPI_WriteWord>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	word - two bytes to write
 */
static void SerialAPI_WriteWord (sbgcGeneral_t *gSBGC, ui16 word)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	807b      	strh	r3, [r7, #2]
	serialAPI_Assert()
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	685b      	ldr	r3, [r3, #4]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d159      	bne.n	800532a <SerialAPI_WriteWord+0xca>

	if (calculateFreeTx_() < sizeof(ui16))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005286:	429a      	cmp	r2, r3
 8005288:	d311      	bcc.n	80052ae <SerialAPI_WriteWord+0x4e>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005292:	461a      	mov	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	bf94      	ite	ls
 80052a6:	2301      	movls	r3, #1
 80052a8:	2300      	movhi	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	e00e      	b.n	80052cc <SerialAPI_WriteWord+0x6c>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80052b6:	461a      	mov	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	bf94      	ite	ls
 80052c6:	2301      	movls	r3, #1
 80052c8:	2300      	movhi	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <SerialAPI_WriteWord+0x84>
		serialAPI_Abort()
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2203      	movs	r2, #3
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	2205      	movs	r2, #5
 80052e0:	769a      	strb	r2, [r3, #26]
 80052e2:	e022      	b.n	800532a <SerialAPI_WriteWord+0xca>

	gSBGC->_api->toLE(&word, &serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], sizeof(ui16));
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	6852      	ldr	r2, [r2, #4]
 80052ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052f0:	6a12      	ldr	r2, [r2, #32]
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	6849      	ldr	r1, [r1, #4]
 80052f6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80052f8:	7f09      	ldrb	r1, [r1, #28]
 80052fa:	4411      	add	r1, r2
 80052fc:	1cb8      	adds	r0, r7, #2
 80052fe:	2202      	movs	r2, #2
 8005300:	4798      	blx	r3
	serialAPI_CurCmd_->_payloadSize += sizeof(ui16);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005308:	7f1a      	ldrb	r2, [r3, #28]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	3202      	adds	r2, #2
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += sizeof(ui16);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	3202      	adds	r2, #2
 8005324:	b2d2      	uxtb	r2, r2
 8005326:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <SerialAPI_ReadWord>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read word
 */
static ui16 SerialAPI_ReadWord (sbgcGeneral_t *gSBGC)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	ui16 word;

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (sizeof(ui16) - 1)))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	3301      	adds	r3, #1
 800534c:	429a      	cmp	r2, r3
 800534e:	d225      	bcs.n	800539c <SerialAPI_ReadWord+0x6c>
	{
		ui8 wordBuff [2];

		wordBuff[0] = *serialAPI_CurCmd_->_payload;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	733b      	strb	r3, [r7, #12]
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005366:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005368:	621a      	str	r2, [r3, #32]
		wordBuff[1] = *serialAPI_CurCmd_->_payload;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	737b      	strb	r3, [r7, #13]
		serialAPI_CurCmd_->_payload += sizeof(ui8);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537c:	6a1a      	ldr	r2, [r3, #32]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005384:	3201      	adds	r2, #1
 8005386:	621a      	str	r2, [r3, #32]
		gSBGC->_api->fromLE(&word, wordBuff, sizeof(ui16));
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538e:	f107 010c 	add.w	r1, r7, #12
 8005392:	f107 000e 	add.w	r0, r7, #14
 8005396:	2202      	movs	r2, #2
 8005398:	4798      	blx	r3
 800539a:	e013      	b.n	80053c4 <SerialAPI_ReadWord+0x94>
	}

	else
	{
		gSBGC->_api->fromLE(&word, serialAPI_CurCmd_->_payload, sizeof(ui16));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6852      	ldr	r2, [r2, #4]
 80053a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80053a8:	6a11      	ldr	r1, [r2, #32]
 80053aa:	f107 000e 	add.w	r0, r7, #14
 80053ae:	2202      	movs	r2, #2
 80053b0:	4798      	blx	r3
		serialAPI_CurCmd_->_payload += sizeof(ui16);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b8:	6a1a      	ldr	r2, [r3, #32]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c0:	3202      	adds	r2, #2
 80053c2:	621a      	str	r2, [r3, #32]
	}

	if (((uintptr_t)serialAPI_CurCmd_->_payload) > calculateEndRx_())
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	6a1b      	ldr	r3, [r3, #32]
 80053cc:	461a      	mov	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d4:	33ff      	adds	r3, #255	; 0xff
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d906      	bls.n	80053e8 <SerialAPI_ReadWord+0xb8>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053e6:	621a      	str	r2, [r3, #32]

	return word;
 80053e8:	89fb      	ldrh	r3, [r7, #14]
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3710      	adds	r7, #16
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <SerialAPI_WriteLong>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	dword - four bytes to write
 */
static void SerialAPI_WriteLong (sbgcGeneral_t *gSBGC, ui32 dword)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b082      	sub	sp, #8
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	6078      	str	r0, [r7, #4]
 80053fa:	6039      	str	r1, [r7, #0]
	serialAPI_Assert()
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d159      	bne.n	80054ba <SerialAPI_WriteLong+0xc8>

	if (calculateFreeTx_() < sizeof(ui32))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005416:	429a      	cmp	r2, r3
 8005418:	d311      	bcc.n	800543e <SerialAPI_WriteLong+0x4c>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005422:	461a      	mov	r2, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005432:	2b03      	cmp	r3, #3
 8005434:	bf94      	ite	ls
 8005436:	2301      	movls	r3, #1
 8005438:	2300      	movhi	r3, #0
 800543a:	b2db      	uxtb	r3, r3
 800543c:	e00e      	b.n	800545c <SerialAPI_WriteLong+0x6a>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005446:	461a      	mov	r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b03      	cmp	r3, #3
 8005454:	bf94      	ite	ls
 8005456:	2301      	movls	r3, #1
 8005458:	2300      	movhi	r3, #0
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b00      	cmp	r3, #0
 800545e:	d009      	beq.n	8005474 <SerialAPI_WriteLong+0x82>
		serialAPI_Abort()
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	2203      	movs	r2, #3
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	2205      	movs	r2, #5
 8005470:	769a      	strb	r2, [r3, #26]
 8005472:	e022      	b.n	80054ba <SerialAPI_WriteLong+0xc8>

	gSBGC->_api->toLE(&dword, &serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], 4);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6852      	ldr	r2, [r2, #4]
 800547e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005480:	6a12      	ldr	r2, [r2, #32]
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	6849      	ldr	r1, [r1, #4]
 8005486:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8005488:	7f09      	ldrb	r1, [r1, #28]
 800548a:	4411      	add	r1, r2
 800548c:	4638      	mov	r0, r7
 800548e:	2204      	movs	r2, #4
 8005490:	4798      	blx	r3
	serialAPI_CurCmd_->_payloadSize += sizeof(ui32);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	7f1a      	ldrb	r2, [r3, #28]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	3204      	adds	r2, #4
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += sizeof(ui32);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	3204      	adds	r2, #4
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <SerialAPI_ReadLong>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read long
 */
static ui32 SerialAPI_ReadLong (sbgcGeneral_t *gSBGC)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b086      	sub	sp, #24
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
	ui32 dword;

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (sizeof(ui32) - 1)))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	3303      	adds	r3, #3
 80054dc:	429a      	cmp	r2, r3
 80054de:	d23e      	bcs.n	800555e <SerialAPI_ReadLong+0x9e>
	{
		ui8 longBuff [4];
		ui8 cutSize = (calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	75fb      	strb	r3, [r7, #23]

		memcpy(longBuff, serialAPI_CurCmd_->_payload, cutSize);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	6a19      	ldr	r1, [r3, #32]
 80054fc:	7dfa      	ldrb	r2, [r7, #23]
 80054fe:	f107 030c 	add.w	r3, r7, #12
 8005502:	4618      	mov	r0, r3
 8005504:	f005 f8fa 	bl	800a6fc <memcpy>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685a      	ldr	r2, [r3, #4]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005514:	621a      	str	r2, [r3, #32]
		memcpy(&longBuff[cutSize], serialAPI_CurCmd_->_payload, sizeof(ui32) - cutSize);
 8005516:	7dfb      	ldrb	r3, [r7, #23]
 8005518:	f107 020c 	add.w	r2, r7, #12
 800551c:	18d0      	adds	r0, r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005524:	6a19      	ldr	r1, [r3, #32]
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	f1c3 0304 	rsb	r3, r3, #4
 800552c:	461a      	mov	r2, r3
 800552e:	f005 f8e5 	bl	800a6fc <memcpy>
		serialAPI_CurCmd_->_payload += sizeof(ui32) - cutSize;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005538:	6a19      	ldr	r1, [r3, #32]
 800553a:	7dfb      	ldrb	r3, [r7, #23]
 800553c:	f1c3 0204 	rsb	r2, r3, #4
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	440a      	add	r2, r1
 8005548:	621a      	str	r2, [r3, #32]
		gSBGC->_api->fromLE(&dword, longBuff, sizeof(ui32));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	f107 010c 	add.w	r1, r7, #12
 8005554:	f107 0010 	add.w	r0, r7, #16
 8005558:	2204      	movs	r2, #4
 800555a:	4798      	blx	r3
 800555c:	e013      	b.n	8005586 <SerialAPI_ReadLong+0xc6>
	}

	else
	{
		gSBGC->_api->fromLE(&dword, serialAPI_CurCmd_->_payload, sizeof(ui32));
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	6852      	ldr	r2, [r2, #4]
 8005568:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800556a:	6a11      	ldr	r1, [r2, #32]
 800556c:	f107 0010 	add.w	r0, r7, #16
 8005570:	2204      	movs	r2, #4
 8005572:	4798      	blx	r3
		serialAPI_CurCmd_->_payload += 4;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557a:	6a1a      	ldr	r2, [r3, #32]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	3204      	adds	r2, #4
 8005584:	621a      	str	r2, [r3, #32]
	}

	if (((uintptr_t)serialAPI_CurCmd_->_payload) > calculateEndRx_())
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	461a      	mov	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005596:	33ff      	adds	r3, #255	; 0xff
 8005598:	429a      	cmp	r2, r3
 800559a:	d906      	bls.n	80055aa <SerialAPI_ReadLong+0xea>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80055a8:	621a      	str	r2, [r3, #32]

	return dword;
 80055aa:	693b      	ldr	r3, [r7, #16]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <SerialAPI_WriteBuff>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*buff - written data
 *	@param	size - written data size
 */
static void SerialAPI_WriteBuff (sbgcGeneral_t *gSBGC, const void *buff, ui8 size)
{
 80055b4:	b590      	push	{r4, r7, lr}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	4613      	mov	r3, r2
 80055c0:	71fb      	strb	r3, [r7, #7]
	serialAPI_Assert()
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d15b      	bne.n	8005684 <SerialAPI_WriteBuff+0xd0>

	if (!size) return;
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d057      	beq.n	8005682 <SerialAPI_WriteBuff+0xce>

	if (calculateFreeTx_() < size)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d30c      	bcc.n	8005600 <SerialAPI_WriteBuff+0x4c>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80055ee:	461a      	mov	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80055fe:	e009      	b.n	8005614 <SerialAPI_WriteBuff+0x60>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005608:	461a      	mov	r2, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	79fa      	ldrb	r2, [r7, #7]
 8005616:	4293      	cmp	r3, r2
 8005618:	da09      	bge.n	800562e <SerialAPI_WriteBuff+0x7a>
		serialAPI_Abort()
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2203      	movs	r2, #3
 8005620:	701a      	strb	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	2205      	movs	r2, #5
 800562a:	769a      	strb	r2, [r3, #26]
 800562c:	e02a      	b.n	8005684 <SerialAPI_WriteBuff+0xd0>

	#if (SBGC_SYS_BIG_ENDIAN)
		sbgcParserMap_t parserMap = gSBGC->_api->getCmdPM(serialAPI_CurCmd_);
	#else
		sbgcParserMap_t parserMap = PM_DEFAULT_8BIT;
 800562e:	2300      	movs	r3, #0
 8005630:	75fb      	strb	r3, [r7, #23]
	#endif

	serialAPI_CurCmd_->_payloadSize +=
			gSBGC->_api->convWithPM(&serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], buff, size, parserMap);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	6852      	ldr	r2, [r2, #4]
 8005644:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005646:	7f12      	ldrb	r2, [r2, #28]
 8005648:	1898      	adds	r0, r3, r2
 800564a:	7dfb      	ldrb	r3, [r7, #23]
 800564c:	79fa      	ldrb	r2, [r7, #7]
 800564e:	68b9      	ldr	r1, [r7, #8]
 8005650:	47a0      	blx	r4
 8005652:	4603      	mov	r3, r0
 8005654:	4619      	mov	r1, r3
	serialAPI_CurCmd_->_payloadSize +=
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800565c:	7f1a      	ldrb	r2, [r3, #28]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005664:	440a      	add	r2, r1
 8005666:	b2d2      	uxtb	r2, r2
 8005668:	771a      	strb	r2, [r3, #28]

	gSBGC->_api->txCommandBuffHead += size;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	79fa      	ldrb	r2, [r7, #7]
 8005678:	440a      	add	r2, r1
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8005680:	e000      	b.n	8005684 <SerialAPI_WriteBuff+0xd0>
	if (!size) return;
 8005682:	bf00      	nop
}
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	bd90      	pop	{r4, r7, pc}

0800568a <SerialAPI_ReadBuff>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*buff - where data will be written
 *	@param	size - read data size
 */
static void SerialAPI_ReadBuff (sbgcGeneral_t *gSBGC, void *buff, ui8 size)
{
 800568a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800568e:	b089      	sub	sp, #36	; 0x24
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	71fb      	strb	r3, [r7, #7]
	sbgcParserMap_t parserMap = gSBGC->_api->getCmdPM(serialAPI_CurCmd_);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	6852      	ldr	r2, [r2, #4]
 80056a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056a6:	4610      	mov	r0, r2
 80056a8:	4798      	blx	r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	77fb      	strb	r3, [r7, #31]

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (size - 1)))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b4:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	4619      	mov	r1, r3
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	440b      	add	r3, r1
 80056c6:	3b01      	subs	r3, #1
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d266      	bcs.n	800579a <SerialAPI_ReadBuff+0x110>
	{
 80056cc:	466b      	mov	r3, sp
 80056ce:	461e      	mov	r6, r3
		ui8 buffTemp [size];
 80056d0:	79f9      	ldrb	r1, [r7, #7]
 80056d2:	460b      	mov	r3, r1
 80056d4:	3b01      	subs	r3, #1
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	b2cb      	uxtb	r3, r1
 80056da:	2200      	movs	r2, #0
 80056dc:	4698      	mov	r8, r3
 80056de:	4691      	mov	r9, r2
 80056e0:	f04f 0200 	mov.w	r2, #0
 80056e4:	f04f 0300 	mov.w	r3, #0
 80056e8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056f0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056f4:	b2cb      	uxtb	r3, r1
 80056f6:	2200      	movs	r2, #0
 80056f8:	461c      	mov	r4, r3
 80056fa:	4615      	mov	r5, r2
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	00eb      	lsls	r3, r5, #3
 8005706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800570a:	00e2      	lsls	r2, r4, #3
 800570c:	460b      	mov	r3, r1
 800570e:	3307      	adds	r3, #7
 8005710:	08db      	lsrs	r3, r3, #3
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	ebad 0d03 	sub.w	sp, sp, r3
 8005718:	466b      	mov	r3, sp
 800571a:	3300      	adds	r3, #0
 800571c:	617b      	str	r3, [r7, #20]
		ui8 cutSize = (calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	461a      	mov	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	74fb      	strb	r3, [r7, #19]

		memcpy(buffTemp, serialAPI_CurCmd_->_payload, cutSize);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	7cfa      	ldrb	r2, [r7, #19]
 800573c:	4619      	mov	r1, r3
 800573e:	6978      	ldr	r0, [r7, #20]
 8005740:	f004 ffdc 	bl	800a6fc <memcpy>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005750:	621a      	str	r2, [r3, #32]
		memcpy(&buffTemp[cutSize], serialAPI_CurCmd_->_payload, size - cutSize);
 8005752:	7cfb      	ldrb	r3, [r7, #19]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	18d0      	adds	r0, r2, r3
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575e:	6a19      	ldr	r1, [r3, #32]
 8005760:	79fa      	ldrb	r2, [r7, #7]
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	461a      	mov	r2, r3
 8005768:	f004 ffc8 	bl	800a6fc <memcpy>
		serialAPI_CurCmd_->_payload += size - cutSize;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005772:	6a1a      	ldr	r2, [r3, #32]
 8005774:	79f9      	ldrb	r1, [r7, #7]
 8005776:	7cfb      	ldrb	r3, [r7, #19]
 8005778:	1acb      	subs	r3, r1, r3
 800577a:	4619      	mov	r1, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	440a      	add	r2, r1
 8005784:	621a      	str	r2, [r3, #32]
		gSBGC->_api->convWithPM(buff, buffTemp, size, parserMap);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 800578c:	7ffb      	ldrb	r3, [r7, #31]
 800578e:	79fa      	ldrb	r2, [r7, #7]
 8005790:	6979      	ldr	r1, [r7, #20]
 8005792:	68b8      	ldr	r0, [r7, #8]
 8005794:	47a0      	blx	r4
 8005796:	46b5      	mov	sp, r6
	}

	else
		serialAPI_CurCmd_->_payload += gSBGC->_api->convWithPM(buff, serialAPI_CurCmd_->_payload, size, parserMap);
}
 8005798:	e015      	b.n	80057c6 <SerialAPI_ReadBuff+0x13c>
		serialAPI_CurCmd_->_payload += gSBGC->_api->convWithPM(buff, serialAPI_CurCmd_->_payload, size, parserMap);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	6a19      	ldr	r1, [r3, #32]
 80057a8:	7ffb      	ldrb	r3, [r7, #31]
 80057aa:	79fa      	ldrb	r2, [r7, #7]
 80057ac:	68b8      	ldr	r0, [r7, #8]
 80057ae:	47a0      	blx	r4
 80057b0:	4603      	mov	r3, r0
 80057b2:	4619      	mov	r1, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ba:	6a1a      	ldr	r2, [r3, #32]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c2:	440a      	add	r2, r1
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	3724      	adds	r7, #36	; 0x24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080057d0 <SerialAPI_WriteEmptyBuff>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	size - size of filled with zeros data
 */
static void SerialAPI_WriteEmptyBuff (sbgcGeneral_t *gSBGC, ui8 size)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	460b      	mov	r3, r1
 80057da:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d151      	bne.n	800588a <SerialAPI_WriteEmptyBuff+0xba>

	if (calculateFreeTx_() < size)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d30c      	bcc.n	8005814 <SerialAPI_WriteEmptyBuff+0x44>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005802:	461a      	mov	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005812:	e009      	b.n	8005828 <SerialAPI_WriteEmptyBuff+0x58>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800581c:	461a      	mov	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	4293      	cmp	r3, r2
 800582c:	da09      	bge.n	8005842 <SerialAPI_WriteEmptyBuff+0x72>
		serialAPI_Abort()
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	2203      	movs	r2, #3
 8005834:	701a      	strb	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	2205      	movs	r2, #5
 800583e:	769a      	strb	r2, [r3, #26]
 8005840:	e023      	b.n	800588a <SerialAPI_WriteEmptyBuff+0xba>

	memset(&serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], 0, size);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6852      	ldr	r2, [r2, #4]
 800584e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005850:	7f12      	ldrb	r2, [r2, #28]
 8005852:	4413      	add	r3, r2
 8005854:	78fa      	ldrb	r2, [r7, #3]
 8005856:	2100      	movs	r1, #0
 8005858:	4618      	mov	r0, r3
 800585a:	f004 feb0 	bl	800a5be <memset>
	serialAPI_CurCmd_->_payloadSize += size;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005864:	7f19      	ldrb	r1, [r3, #28]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	440a      	add	r2, r1
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += size;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	78fa      	ldrb	r2, [r7, #3]
 8005882:	440a      	add	r2, r1
 8005884:	b2d2      	uxtb	r2, r2
 8005886:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800588a:	3708      	adds	r7, #8
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <SerialAPI_SkipBytes>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	size - size of skipped data
 */
static void SerialAPI_SkipBytes (sbgcGeneral_t *gSBGC, ui8 size)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	460b      	mov	r3, r1
 800589a:	70fb      	strb	r3, [r7, #3]
	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + size))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	4619      	mov	r1, r3
 80058b0:	78fb      	ldrb	r3, [r7, #3]
 80058b2:	440b      	add	r3, r1
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d216      	bcs.n	80058e6 <SerialAPI_SkipBytes+0x56>
	{
		ui8 restSize = size - ((calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	78fb      	ldrb	r3, [r7, #3]
 80058ce:	4413      	add	r3, r2
 80058d0:	73fb      	strb	r3, [r7, #15]

		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff + restSize;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80058d8:	7bfa      	ldrb	r2, [r7, #15]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	440a      	add	r2, r1
 80058e2:	621a      	str	r2, [r3, #32]
	}

	else
		serialAPI_CurCmd_->_payload += size;
}
 80058e4:	e009      	b.n	80058fa <SerialAPI_SkipBytes+0x6a>
		serialAPI_CurCmd_->_payload += size;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ec:	6a19      	ldr	r1, [r3, #32]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f6:	440a      	add	r2, r1
 80058f8:	621a      	str	r2, [r3, #32]
}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr

08005906 <SerialAPI_StartWrite>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	cmdID - SBGC32 command identifier
 */
static void SerialAPI_StartWrite (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID
								  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8005906:	b580      	push	{r7, lr}
 8005908:	b082      	sub	sp, #8
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	70fb      	strb	r3, [r7, #3]
	/* Lock all SerialAPI operations to add a new command */
	serialAPI_Lock()
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d14f      	bne.n	80059bc <SerialAPI_StartWrite+0xb6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	701a      	strb	r2, [r3, #0]
				return;
			}

	#endif

	if (gSBGC->_api->commandNumber >= SBGC_MAX_COMMAND_NUM)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	7f1b      	ldrb	r3, [r3, #28]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d007      	beq.n	800593e <SerialAPI_StartWrite+0x38>
	{
		gSBGC->_lastCommandStatus = sbgcCOMMAND_BUFFER_OVERFLOW_ERROR;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2209      	movs	r2, #9
 8005932:	725a      	strb	r2, [r3, #9]
		serialAPI_Error()
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2203      	movs	r2, #3
 800593a:	701a      	strb	r2, [r3, #0]
 800593c:	e03e      	b.n	80059bc <SerialAPI_StartWrite+0xb6>
			}

	#endif

	/* Begin to registration for a new command */
	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[gSBGC->_api->commandNumber];
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	699a      	ldr	r2, [r3, #24]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	7f1b      	ldrb	r3, [r3, #28]
 800594a:	4619      	mov	r1, r3
 800594c:	460b      	mov	r3, r1
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	440b      	add	r3, r1
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4619      	mov	r1, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	440a      	add	r2, r1
 800595c:	625a      	str	r2, [r3, #36]	; 0x24
	gSBGC->_api->commandNumber++;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	7f1a      	ldrb	r2, [r3, #28]
 8005964:	3201      	adds	r2, #1
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	771a      	strb	r2, [r3, #28]

	clearCmd_(serialAPI_CurCmd_);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005970:	2224      	movs	r2, #36	; 0x24
 8005972:	2100      	movs	r1, #0
 8005974:	4618      	mov	r0, r3
 8005976:	f004 fe22 	bl	800a5be <memset>

	serialAPI_CurCmd_->_payload = &gSBGC->_api->txCommandBuff[gSBGC->_api->txCommandBuffHead];
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005988:	4619      	mov	r1, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005990:	440a      	add	r2, r1
 8005992:	621a      	str	r2, [r3, #32]

	serialAPI_CurCmd_->_id = ++gSBGC->_api->commandTotalCount;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	6a1a      	ldr	r2, [r3, #32]
 800599a:	3201      	adds	r2, #1
 800599c:	621a      	str	r2, [r3, #32]
 800599e:	687a      	ldr	r2, [r7, #4]
 80059a0:	6852      	ldr	r2, [r2, #4]
 80059a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	6093      	str	r3, [r2, #8]
	serialAPI_CurCmd_->_state = SCState_FORMING;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	2201      	movs	r2, #1
 80059b0:	769a      	strb	r2, [r3, #26]
	serialAPI_CurCmd_->_commandID = cmdID;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b8:	78fa      	ldrb	r2, [r7, #3]
 80059ba:	76da      	strb	r2, [r3, #27]
		#endif

		gSBGC->_api->commandSortFlag = sbgcFALSE;

	#endif
}
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <SerialAPI_StartRead>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	cmdID - SBGC32 command identifier
 */
static void SerialAPI_StartRead (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID
								 /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b082      	sub	sp, #8
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	460b      	mov	r3, r1
 80059cc:	70fb      	strb	r3, [r7, #3]
	/* The SerialAPI is always locked at here */

	serialAPI_Assert()
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d143      	bne.n	8005a60 <SerialAPI_StartRead+0x9e>
				return;
			}

	#endif

	if (gSBGC->_api->commandNumber >= SBGC_MAX_COMMAND_NUM)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	7f1b      	ldrb	r3, [r3, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <SerialAPI_StartRead+0x30>
	{
		gSBGC->_lastCommandStatus = sbgcCOMMAND_BUFFER_OVERFLOW_ERROR;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2209      	movs	r2, #9
 80059e6:	725a      	strb	r2, [r3, #9]
		serialAPI_Error()
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	2203      	movs	r2, #3
 80059ee:	701a      	strb	r2, [r3, #0]
 80059f0:	e036      	b.n	8005a60 <SerialAPI_StartRead+0x9e>
			}

	#endif

	/* Begin to registration for a new command */
	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[gSBGC->_api->commandNumber];
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	7f1b      	ldrb	r3, [r3, #28]
 80059fe:	4619      	mov	r1, r3
 8005a00:	460b      	mov	r3, r1
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	440b      	add	r3, r1
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4619      	mov	r1, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	440a      	add	r2, r1
 8005a10:	625a      	str	r2, [r3, #36]	; 0x24
	gSBGC->_api->commandNumber++;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	7f1a      	ldrb	r2, [r3, #28]
 8005a18:	3201      	adds	r2, #1
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	771a      	strb	r2, [r3, #28]

	clearCmd_(serialAPI_CurCmd_);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	2224      	movs	r2, #36	; 0x24
 8005a26:	2100      	movs	r1, #0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f004 fdc8 	bl	800a5be <memset>

	serialAPI_CurCmd_->_id = ++gSBGC->_api->commandTotalCount;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	3201      	adds	r2, #1
 8005a36:	621a      	str	r2, [r3, #32]
 8005a38:	687a      	ldr	r2, [r7, #4]
 8005a3a:	6852      	ldr	r2, [r2, #4]
 8005a3c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	6093      	str	r3, [r2, #8]
	serialAPI_CurCmd_->_state = SCState_FORMING;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	2201      	movs	r2, #1
 8005a4a:	769a      	strb	r2, [r3, #26]
	serialAPI_CurCmd_->_commandID = cmdID;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a52:	78fa      	ldrb	r2, [r7, #3]
 8005a54:	76da      	strb	r2, [r3, #27]
	serialAPI_CurCmd_->parameters = SCParam_RX;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a5c:	2280      	movs	r2, #128	; 0x80
 8005a5e:	701a      	strb	r2, [r3, #0]
		#endif

		gSBGC->_api->commandSortFlag = sbgcFALSE;

	#endif
}
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <SerialAPI_FinishWrite>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_FinishWrite (sbgcGeneral_t *gSBGC)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b082      	sub	sp, #8
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
	serialAPI_Assert()
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d116      	bne.n	8005aa6 <SerialAPI_FinishWrite+0x40>

	#if (SBGC_USES_BLOCKING_MODE)

		gSBGC->_api->process(gSBGC, 0);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a80:	2100      	movs	r1, #0
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	7a1b      	ldrb	r3, [r3, #8]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d007      	beq.n	8005a9e <SerialAPI_FinishWrite+0x38>
		{
			gSBGC->_lastCommandStatus = sbgcCOMMAND_TX_ERROR;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2203      	movs	r2, #3
 8005a92:	725a      	strb	r2, [r3, #9]

			/* Close SerialAPI to prevent superfluous RX command registration */
			serialAPI_Error()
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2203      	movs	r2, #3
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	e003      	b.n	8005aa6 <SerialAPI_FinishWrite+0x40>
		}

		else
		{
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	725a      	strb	r2, [r3, #9]
			return;
 8005aa4:	bf00      	nop
	#if (SBGC_USES_TOKENS)
		gSBGC->_api->lastCommandToken = ((sbgcCommandToken_t)serialAPI_CurCmd_->_id) & 0x000000FF;
	#endif

	serialAPI_CurCmd_->_state = SCState_PREPARED;
}
 8005aa6:	3708      	adds	r7, #8
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <SerialAPI_FinishRead>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_FinishRead (sbgcGeneral_t *gSBGC)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
	serialAPI_Assert()
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	781b      	ldrb	r3, [r3, #0]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d116      	bne.n	8005aec <SerialAPI_FinishRead+0x40>

	#if (SBGC_USES_BLOCKING_MODE)

		gSBGC->_api->process(gSBGC, 0);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ac6:	2100      	movs	r1, #0
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	7a1b      	ldrb	r3, [r3, #8]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d003      	beq.n	8005adc <SerialAPI_FinishRead+0x30>
			gSBGC->_lastCommandStatus = sbgcCOMMAND_RX_ERROR;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2204      	movs	r2, #4
 8005ad8:	725a      	strb	r2, [r3, #9]
 8005ada:	e002      	b.n	8005ae2 <SerialAPI_FinishRead+0x36>

		else
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	725a      	strb	r2, [r3, #9]

		gSBGC->_api->serialAPI_Status = serialAPI_OK;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	685b      	ldr	r3, [r3, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	701a      	strb	r2, [r3, #0]
		return;
 8005aea:	bf00      	nop
		gSBGC->_api->lastCommandToken |= (((sbgcCommandToken_t)serialAPI_CurCmd_->_id) << 8) & 0x0000FF00;

	#endif

	serialAPI_CurCmd_->_state = SCState_PREPARED;
}
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <SerialAPI_AbortLastCmd>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_AbortLastCmd (sbgcGeneral_t *gSBGC)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b082      	sub	sp, #8
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
	#if (SBGC_USES_LOGS)
		gSBGC->_api->writeLog(gSBGC, &lastCommand_);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	6999      	ldr	r1, [r3, #24]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	7f1b      	ldrb	r3, [r3, #28]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	4603      	mov	r3, r0
 8005b10:	00db      	lsls	r3, r3, #3
 8005b12:	4403      	add	r3, r0
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	3b24      	subs	r3, #36	; 0x24
 8005b18:	440b      	add	r3, r1
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4790      	blx	r2
	#endif

	clearCmd_(&lastCommand_);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	699a      	ldr	r2, [r3, #24]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	7f1b      	ldrb	r3, [r3, #28]
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	460b      	mov	r3, r1
 8005b30:	00db      	lsls	r3, r3, #3
 8005b32:	440b      	add	r3, r1
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	3b24      	subs	r3, #36	; 0x24
 8005b38:	4413      	add	r3, r2
 8005b3a:	2224      	movs	r2, #36	; 0x24
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f004 fd3d 	bl	800a5be <memset>
	gSBGC->_api->commandNumber--;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	7f1a      	ldrb	r2, [r3, #28]
 8005b4a:	3a01      	subs	r2, #1
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	771a      	strb	r2, [r3, #28]
}
 8005b50:	bf00      	nop
 8005b52:	3708      	adds	r7, #8
 8005b54:	46bd      	mov	sp, r7
 8005b56:	bd80      	pop	{r7, pc}

08005b58 <PostCheckConfirmation>:
	 *			See @ref SerialAPI_AddConfirmationCommand function
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 */
	static void PostCheckConfirmation (sbgcGeneral_t *gSBGC)
	{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
		sbgcConfirm_t *confirm = (sbgcConfirm_t*)serialAPI_CurCmdDest_;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	60fb      	str	r3, [r7, #12]

		SerialAPI_SkipBytes(gSBGC, 1);  // Skip commandID
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f7ff fe8f 	bl	8005890 <SerialAPI_SkipBytes>

		if (serialAPI_CurCmd_->_commandID == CMD_CONFIRM)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b78:	7edb      	ldrb	r3, [r3, #27]
 8005b7a:	2b43      	cmp	r3, #67	; 0x43
 8005b7c:	d120      	bne.n	8005bc0 <PostCheckConfirmation+0x68>
		{
			if (serialAPI_CurCmd_->_payloadSize == 2)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	7f1b      	ldrb	r3, [r3, #28]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d108      	bne.n	8005b9c <PostCheckConfirmation+0x44>
				confirm->cmdData = SerialAPI_ReadByte(gSBGC);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f7ff fb3e 	bl	800520c <SerialAPI_ReadByte>
 8005b90:	4603      	mov	r3, r0
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f8a3 2001 	strh.w	r2, [r3, #1]
 8005b9a:	e00d      	b.n	8005bb8 <PostCheckConfirmation+0x60>

			else if (serialAPI_CurCmd_->_payloadSize == 3)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	7f1b      	ldrb	r3, [r3, #28]
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d107      	bne.n	8005bb8 <PostCheckConfirmation+0x60>
				confirm->cmdData = SerialAPI_ReadWord(gSBGC);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fbc1 	bl	8005330 <SerialAPI_ReadWord>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f8a3 2001 	strh.w	r2, [r3, #1]

			confirm->status = sbgcCONFIRM_RECEIVED;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	71da      	strb	r2, [r3, #7]
			if (serialAPI_CurCmd_->_payloadSize > 1)
				SerialAPI_ReadBuff(gSBGC, confirm->errorData, 4);

			confirm->status = sbgcCONFIRM_ERROR;
		}
	}
 8005bbe:	e01c      	b.n	8005bfa <PostCheckConfirmation+0xa2>
		else if (serialAPI_CurCmd_->_commandID == CMD_ERROR)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc6:	7edb      	ldrb	r3, [r3, #27]
 8005bc8:	2bff      	cmp	r3, #255	; 0xff
 8005bca:	d116      	bne.n	8005bfa <PostCheckConfirmation+0xa2>
			confirm->errorCode = SerialAPI_ReadByte(gSBGC);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f7ff fb1d 	bl	800520c <SerialAPI_ReadByte>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	705a      	strb	r2, [r3, #1]
			if (serialAPI_CurCmd_->_payloadSize > 1)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be0:	7f1b      	ldrb	r3, [r3, #28]
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d906      	bls.n	8005bf4 <PostCheckConfirmation+0x9c>
				SerialAPI_ReadBuff(gSBGC, confirm->errorData, 4);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	3302      	adds	r3, #2
 8005bea:	2204      	movs	r2, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7ff fd4b 	bl	800568a <SerialAPI_ReadBuff>
			confirm->status = sbgcCONFIRM_ERROR;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2202      	movs	r2, #2
 8005bf8:	71da      	strb	r2, [r3, #7]
	}
 8005bfa:	bf00      	nop
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <SerialAPI_AssignSystemEvent>:
 *			directly to pDestination
 *	@param	*pDestination - where the data will be written or changed
 *	@param	size - destination buffer size
 */
static void SerialAPI_AssignSystemEvent (sbgcGeneral_t *gSBGC, serialAPI_Event_t serialAPI_Event, void *pDestination, ui16 size)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	607a      	str	r2, [r7, #4]
 8005c0e:	807b      	strh	r3, [r7, #2]
	serialAPI_Assert()
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d10e      	bne.n	8005c38 <SerialAPI_AssignSystemEvent+0x36>
		if (pDestination == NULL)
			serialAPI_Abort()

	#endif

	serialAPI_CurCmd_->_serialAPI_Event = serialAPI_Event;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	611a      	str	r2, [r3, #16]
	serialAPI_CurCmd_->_pDestination = pDestination;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	615a      	str	r2, [r3, #20]
	serialAPI_CurCmd_->_destinationSize = size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	887a      	ldrh	r2, [r7, #2]
 8005c36:	831a      	strh	r2, [r3, #24]
}
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
	...

08005c44 <SerialAPI_AddConfirmationCommand>:
 *	@param	cmdID - identifier of the command
 *			that needs to be confirmed
 */
static void SerialAPI_AddConfirmationCommand (sbgcGeneral_t *gSBGC, sbgcConfirm_t *confirm, serialAPI_CommandID_t cmdID
											  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	71fb      	strb	r3, [r7, #7]
	serialAPI_Assert()
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b01      	cmp	r3, #1
 8005c5a:	d119      	bne.n	8005c90 <SerialAPI_AddConfirmationCommand+0x4c>

	if (confirm == SBGC_NO_CONFIRM) return;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d015      	beq.n	8005c8e <SerialAPI_AddConfirmationCommand+0x4a>
				return;

		#endif

		/* Clear confirmation command */
		memset(confirm, 0, sizeof(sbgcConfirm_t));
 8005c62:	2208      	movs	r2, #8
 8005c64:	2100      	movs	r1, #0
 8005c66:	68b8      	ldr	r0, [r7, #8]
 8005c68:	f004 fca9 	bl	800a5be <memset>

		/* Assign command ID to confirm */
		confirm->commandID = cmdID;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	79fa      	ldrb	r2, [r7, #7]
 8005c70:	701a      	strb	r2, [r3, #0]

		/* Start read */
		SerialAPI_StartRead(gSBGC, CMD_CONFIRM SBGC_ADVANCED_ARGS__);
 8005c72:	2143      	movs	r1, #67	; 0x43
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7ff fea4 	bl	80059c2 <SerialAPI_StartRead>
		SerialAPI_AssignSystemEvent(gSBGC, PostCheckConfirmation, confirm, sizeof(sbgcConfirm_t));
 8005c7a:	2308      	movs	r3, #8
 8005c7c:	68ba      	ldr	r2, [r7, #8]
 8005c7e:	4906      	ldr	r1, [pc, #24]	; (8005c98 <SerialAPI_AddConfirmationCommand+0x54>)
 8005c80:	68f8      	ldr	r0, [r7, #12]
 8005c82:	f7ff ffbe 	bl	8005c02 <SerialAPI_AssignSystemEvent>
		SerialAPI_FinishRead(gSBGC);
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f7ff ff10 	bl	8005aac <SerialAPI_FinishRead>
 8005c8c:	e000      	b.n	8005c90 <SerialAPI_AddConfirmationCommand+0x4c>
	if (confirm == SBGC_NO_CONFIRM) return;
 8005c8e:	bf00      	nop

	#else
		unused_(gSBGC);
	#endif
}
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	08005b59 	.word	0x08005b59

08005c9c <SerialAPI_DefinePayloadSize>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	payloadSize - how many bytes command waits
 */
static void SerialAPI_DefinePayloadSize (sbgcGeneral_t *gSBGC, ui8 payloadSize)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d104      	bne.n	8005cbc <SerialAPI_DefinePayloadSize+0x20>

	serialAPI_CurCmd_->_payloadSize = payloadSize;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb8:	78fa      	ldrb	r2, [r7, #3]
 8005cba:	771a      	strb	r2, [r3, #28]
}
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <SerialAPI_BoundCommands>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_BoundCommands (sbgcGeneral_t *gSBGC)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
	#if (SBGC_USES_BLOCKING_MODE)
		return;
 8005cce:	bf00      	nop
			TxCmd->callback = NULL;
			TxCmd->callbackArg = NULL;
		}

	#endif
}
 8005cd0:	370c      	adds	r7, #12
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <SerialAPI_Exit>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
static sbgcCommandStatus_t SerialAPI_Exit (sbgcGeneral_t *gSBGC)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b082      	sub	sp, #8
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
	if (gSBGC->_api->serialAPI_Status == serialAPI_ERROR)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d11f      	bne.n	8005d2c <SerialAPI_Exit+0x52>
	/* Check what's wrong */
	{
		while ((lastCommand_._state == SCState_ABORTED) && gSBGC->_api->commandNumber)
 8005cec:	e002      	b.n	8005cf4 <SerialAPI_Exit+0x1a>
		/* Delete all corrupted commands */
			SerialAPI_AbortLastCmd(gSBGC);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f7ff feff 	bl	8005af2 <SerialAPI_AbortLastCmd>
		while ((lastCommand_._state == SCState_ABORTED) && gSBGC->_api->commandNumber)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	699a      	ldr	r2, [r3, #24]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	7f1b      	ldrb	r3, [r3, #28]
 8005d00:	4619      	mov	r1, r3
 8005d02:	460b      	mov	r3, r1
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	440b      	add	r3, r1
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	3b24      	subs	r3, #36	; 0x24
 8005d0c:	4413      	add	r3, r2
 8005d0e:	7e9b      	ldrb	r3, [r3, #26]
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d104      	bne.n	8005d1e <SerialAPI_Exit+0x44>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	7f1b      	ldrb	r3, [r3, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1e7      	bne.n	8005cee <SerialAPI_Exit+0x14>

        serialAPI_Unlock()
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	701a      	strb	r2, [r3, #0]

		/* Return error code */
		return gSBGC->_lastCommandStatus;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	7a5b      	ldrb	r3, [r3, #9]
 8005d2a:	e005      	b.n	8005d38 <SerialAPI_Exit+0x5e>
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
		#endif

	#endif

	serialAPI_Unlock()
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	701a      	strb	r2, [r3, #0]

	return gSBGC->_lastCommandStatus;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	7a5b      	ldrb	r3, [r3, #9]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <PrivateSerialAPI_LinkCommandBuild>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkCommandBuild (sbgcGeneral_t *gSBGC)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
	gSBGC->_api->writeByte	= SerialAPI_WriteByte;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	4a2d      	ldr	r2, [pc, #180]	; (8005e04 <PrivateSerialAPI_LinkCommandBuild+0xc4>)
 8005d4e:	651a      	str	r2, [r3, #80]	; 0x50
	gSBGC->_api->readByte	= SerialAPI_ReadByte;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	4a2c      	ldr	r2, [pc, #176]	; (8005e08 <PrivateSerialAPI_LinkCommandBuild+0xc8>)
 8005d56:	65da      	str	r2, [r3, #92]	; 0x5c
	gSBGC->_api->writeWord	= SerialAPI_WriteWord;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	4a2b      	ldr	r2, [pc, #172]	; (8005e0c <PrivateSerialAPI_LinkCommandBuild+0xcc>)
 8005d5e:	655a      	str	r2, [r3, #84]	; 0x54
	gSBGC->_api->readWord	= SerialAPI_ReadWord;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	4a2a      	ldr	r2, [pc, #168]	; (8005e10 <PrivateSerialAPI_LinkCommandBuild+0xd0>)
 8005d66:	661a      	str	r2, [r3, #96]	; 0x60
	gSBGC->_api->writeLong	= SerialAPI_WriteLong;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	4a29      	ldr	r2, [pc, #164]	; (8005e14 <PrivateSerialAPI_LinkCommandBuild+0xd4>)
 8005d6e:	659a      	str	r2, [r3, #88]	; 0x58
	gSBGC->_api->readLong	= SerialAPI_ReadLong;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	4a28      	ldr	r2, [pc, #160]	; (8005e18 <PrivateSerialAPI_LinkCommandBuild+0xd8>)
 8005d76:	665a      	str	r2, [r3, #100]	; 0x64
	gSBGC->_api->writeBuff	= SerialAPI_WriteBuff;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	4a27      	ldr	r2, [pc, #156]	; (8005e1c <PrivateSerialAPI_LinkCommandBuild+0xdc>)
 8005d7e:	669a      	str	r2, [r3, #104]	; 0x68
	gSBGC->_api->readBuff	= SerialAPI_ReadBuff;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	4a26      	ldr	r2, [pc, #152]	; (8005e20 <PrivateSerialAPI_LinkCommandBuild+0xe0>)
 8005d86:	66da      	str	r2, [r3, #108]	; 0x6c
	gSBGC->_api->writeEmptyBuff
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_WriteEmptyBuff;
 8005d8c:	4a25      	ldr	r2, [pc, #148]	; (8005e24 <PrivateSerialAPI_LinkCommandBuild+0xe4>)
 8005d8e:	671a      	str	r2, [r3, #112]	; 0x70
	gSBGC->_api->skipBytes	= SerialAPI_SkipBytes;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	4a24      	ldr	r2, [pc, #144]	; (8005e28 <PrivateSerialAPI_LinkCommandBuild+0xe8>)
 8005d96:	675a      	str	r2, [r3, #116]	; 0x74
	gSBGC->_api->startWrite	= SerialAPI_StartWrite;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	4a23      	ldr	r2, [pc, #140]	; (8005e2c <PrivateSerialAPI_LinkCommandBuild+0xec>)
 8005d9e:	679a      	str	r2, [r3, #120]	; 0x78
	gSBGC->_api->startRead	= SerialAPI_StartRead;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	4a22      	ldr	r2, [pc, #136]	; (8005e30 <PrivateSerialAPI_LinkCommandBuild+0xf0>)
 8005da6:	67da      	str	r2, [r3, #124]	; 0x7c
	gSBGC->_api->finishWrite
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_FinishWrite;
 8005dac:	4a21      	ldr	r2, [pc, #132]	; (8005e34 <PrivateSerialAPI_LinkCommandBuild+0xf4>)
 8005dae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	gSBGC->_api->finishRead	= SerialAPI_FinishRead;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	4a20      	ldr	r2, [pc, #128]	; (8005e38 <PrivateSerialAPI_LinkCommandBuild+0xf8>)
 8005db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	gSBGC->_api->abortLast	= SerialAPI_AbortLastCmd;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4a1e      	ldr	r2, [pc, #120]	; (8005e3c <PrivateSerialAPI_LinkCommandBuild+0xfc>)
 8005dc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	gSBGC->_api->addConfirm	= SerialAPI_AddConfirmationCommand;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	4a1d      	ldr	r2, [pc, #116]	; (8005e40 <PrivateSerialAPI_LinkCommandBuild+0x100>)
 8005dcc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	gSBGC->_api->assignEvent
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_AssignSystemEvent;
 8005dd4:	4a1b      	ldr	r2, [pc, #108]	; (8005e44 <PrivateSerialAPI_LinkCommandBuild+0x104>)
 8005dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	gSBGC->_api->definePayload
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_DefinePayloadSize;
 8005dde:	4a1a      	ldr	r2, [pc, #104]	; (8005e48 <PrivateSerialAPI_LinkCommandBuild+0x108>)
 8005de0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	gSBGC->_api->bound		= SerialAPI_BoundCommands;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <PrivateSerialAPI_LinkCommandBuild+0x10c>)
 8005dea:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gSBGC->_api->exit		= SerialAPI_Exit;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	4a17      	ldr	r2, [pc, #92]	; (8005e50 <PrivateSerialAPI_LinkCommandBuild+0x110>)
 8005df4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	08005147 	.word	0x08005147
 8005e08:	0800520d 	.word	0x0800520d
 8005e0c:	08005261 	.word	0x08005261
 8005e10:	08005331 	.word	0x08005331
 8005e14:	080053f3 	.word	0x080053f3
 8005e18:	080054c1 	.word	0x080054c1
 8005e1c:	080055b5 	.word	0x080055b5
 8005e20:	0800568b 	.word	0x0800568b
 8005e24:	080057d1 	.word	0x080057d1
 8005e28:	08005891 	.word	0x08005891
 8005e2c:	08005907 	.word	0x08005907
 8005e30:	080059c3 	.word	0x080059c3
 8005e34:	08005a67 	.word	0x08005a67
 8005e38:	08005aad 	.word	0x08005aad
 8005e3c:	08005af3 	.word	0x08005af3
 8005e40:	08005c45 	.word	0x08005c45
 8005e44:	08005c03 	.word	0x08005c03
 8005e48:	08005c9d 	.word	0x08005c9d
 8005e4c:	08005cc7 	.word	0x08005cc7
 8005e50:	08005cdb 	.word	0x08005cdb

08005e54 <SerialAPI_CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
static ui16 SerialAPI_CRC16_Calculate (ui8 const *data, ui16 length)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	807b      	strh	r3, [r7, #2]
	ui16 CRC_Register = 0;
 8005e60:	2300      	movs	r3, #0
 8005e62:	81fb      	strh	r3, [r7, #14]
	ui8 shiftRegister, dataBit, CRC_Bit;

	for (ui16 i = 0; i < length; i++)
 8005e64:	2300      	movs	r3, #0
 8005e66:	817b      	strh	r3, [r7, #10]
 8005e68:	e02a      	b.n	8005ec0 <SerialAPI_CRC16_Calculate+0x6c>
	{
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	737b      	strb	r3, [r7, #13]
 8005e6e:	e021      	b.n	8005eb4 <SerialAPI_CRC16_Calculate+0x60>
		{
			dataBit = (data[i] & shiftRegister) ? 1 : 0;
 8005e70:	897b      	ldrh	r3, [r7, #10]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	4413      	add	r3, r2
 8005e76:	781a      	ldrb	r2, [r3, #0]
 8005e78:	7b7b      	ldrb	r3, [r7, #13]
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	bf14      	ite	ne
 8005e82:	2301      	movne	r3, #1
 8005e84:	2300      	moveq	r3, #0
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	727b      	strb	r3, [r7, #9]
			CRC_Bit = CRC_Register >> 15;
 8005e8a:	89fb      	ldrh	r3, [r7, #14]
 8005e8c:	0bdb      	lsrs	r3, r3, #15
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	723b      	strb	r3, [r7, #8]
			CRC_Register <<= 1;
 8005e92:	89fb      	ldrh	r3, [r7, #14]
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	81fb      	strh	r3, [r7, #14]

			if (dataBit != CRC_Bit)
 8005e98:	7a7a      	ldrb	r2, [r7, #9]
 8005e9a:	7a3b      	ldrb	r3, [r7, #8]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d006      	beq.n	8005eae <SerialAPI_CRC16_Calculate+0x5a>
				CRC_Register ^= SBGC_CRC16_POLYNOM;
 8005ea0:	89fb      	ldrh	r3, [r7, #14]
 8005ea2:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8005ea6:	f083 037a 	eor.w	r3, r3, #122	; 0x7a
 8005eaa:	43db      	mvns	r3, r3
 8005eac:	81fb      	strh	r3, [r7, #14]
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8005eae:	7b7b      	ldrb	r3, [r7, #13]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	737b      	strb	r3, [r7, #13]
 8005eb4:	7b7b      	ldrb	r3, [r7, #13]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1da      	bne.n	8005e70 <SerialAPI_CRC16_Calculate+0x1c>
	for (ui16 i = 0; i < length; i++)
 8005eba:	897b      	ldrh	r3, [r7, #10]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	817b      	strh	r3, [r7, #10]
 8005ec0:	897a      	ldrh	r2, [r7, #10]
 8005ec2:	887b      	ldrh	r3, [r7, #2]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d3d0      	bcc.n	8005e6a <SerialAPI_CRC16_Calculate+0x16>
		}
	}

	return CRC_Register;
 8005ec8:	89fb      	ldrh	r3, [r7, #14]
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <SBGC32_TX>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SBGC32_TX (sbgcGeneral_t *gSBGC)
{
 8005ed6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	466b      	mov	r3, sp
 8005ee2:	461e      	mov	r6, r3
	ui8 dataBuff [gSBGC->_api->currentSerialCommand->_payloadSize + SBGC_SERVICE_BYTES_NUM];
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	7f1b      	ldrb	r3, [r3, #28]
 8005eec:	1d99      	adds	r1, r3, #6
 8005eee:	1e4b      	subs	r3, r1, #1
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	460a      	mov	r2, r1
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4690      	mov	r8, r2
 8005ef8:	4699      	mov	r9, r3
 8005efa:	f04f 0200 	mov.w	r2, #0
 8005efe:	f04f 0300 	mov.w	r3, #0
 8005f02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f0e:	460a      	mov	r2, r1
 8005f10:	2300      	movs	r3, #0
 8005f12:	4614      	mov	r4, r2
 8005f14:	461d      	mov	r5, r3
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	00eb      	lsls	r3, r5, #3
 8005f20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f24:	00e2      	lsls	r2, r4, #3
 8005f26:	460b      	mov	r3, r1
 8005f28:	3307      	adds	r3, #7
 8005f2a:	08db      	lsrs	r3, r3, #3
 8005f2c:	00db      	lsls	r3, r3, #3
 8005f2e:	ebad 0d03 	sub.w	sp, sp, r3
 8005f32:	466b      	mov	r3, sp
 8005f34:	3300      	adds	r3, #0
 8005f36:	617b      	str	r3, [r7, #20]

	/* Forming the command */
	dataBuff[0] = (SBGC_PROTOCOL_VERSION - 1) ? SBGC_P2_START_CHARACTER : SBGC_P1_START_CHARACTER;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	2224      	movs	r2, #36	; 0x24
 8005f3c:	701a      	strb	r2, [r3, #0]
	dataBuff[1] = gSBGC->_api->currentSerialCommand->_commandID;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	7eda      	ldrb	r2, [r3, #27]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	705a      	strb	r2, [r3, #1]
	dataBuff[2] = gSBGC->_api->currentSerialCommand->_payloadSize;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f50:	7f1a      	ldrb	r2, [r3, #28]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	709a      	strb	r2, [r3, #2]
	dataBuff[3] = dataBuff[1] + dataBuff[2];  // No need Modulo256 calculation
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	785a      	ldrb	r2, [r3, #1]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	789b      	ldrb	r3, [r3, #2]
 8005f5e:	4413      	add	r3, r2
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	70da      	strb	r2, [r3, #3]

	memcpy(&dataBuff[4], gSBGC->_api->currentSerialCommand->_payload, gSBGC->_api->currentSerialCommand->_payloadSize);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	1d18      	adds	r0, r3, #4
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f70:	6a19      	ldr	r1, [r3, #32]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f78:	7f1b      	ldrb	r3, [r3, #28]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f004 fbbe 	bl	800a6fc <memcpy>

	/* ui8 size = real size current gSBGC->_api->currentSerialCommand */
	ui8 size = gSBGC->_api->currentSerialCommand->_payloadSize + SBGC_SERVICE_BYTES_NUM;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f86:	7f1b      	ldrb	r3, [r3, #28]
 8005f88:	3306      	adds	r3, #6
 8005f8a:	74fb      	strb	r3, [r7, #19]
		dataBuff[4 + gSBGC->_api->currentSerialCommand->_payloadSize] =
				SerialAPI_Modulo256_Calculate(gSBGC->_api->currentSerialCommand->_payload, gSBGC->_api->currentSerialCommand->_payloadSize);

	else  // V.2
	{
		ui16 CRC16_Res = SerialAPI_CRC16_Calculate(&dataBuff[1], (4 + gSBGC->_api->currentSerialCommand->_payloadSize) - 1);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	7f1b      	ldrb	r3, [r3, #28]
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3303      	adds	r3, #3
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f7ff ff57 	bl	8005e54 <SerialAPI_CRC16_Calculate>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	817b      	strh	r3, [r7, #10]
		memcpy(&dataBuff[4 + gSBGC->_api->currentSerialCommand->_payloadSize], &CRC16_Res, sizeof(CRC16_Res));
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	7f1b      	ldrb	r3, [r3, #28]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	697a      	ldr	r2, [r7, #20]
 8005fb6:	4413      	add	r3, r2
 8005fb8:	897a      	ldrh	r2, [r7, #10]
 8005fba:	801a      	strh	r2, [r3, #0]
	}

	#if (SBGC_USES_BLOCKING_MODE)

		/* Launch timer */
		sbgcTicks_t launchTime = serialAPI_GetTick();
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	6812      	ldr	r2, [r2, #0]
 8005fc8:	4610      	mov	r0, r2
 8005fca:	4798      	blx	r3
 8005fcc:	60f8      	str	r0, [r7, #12]

	#endif

	/* Transmit now */
	ui8 txStatus = gSBGC->_ll->drvTx(gSBGC->_ll->drv, dataBuff, size);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	689b      	ldr	r3, [r3, #8]
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	6812      	ldr	r2, [r2, #0]
 8005fd8:	6810      	ldr	r0, [r2, #0]
 8005fda:	7cfa      	ldrb	r2, [r7, #19]
 8005fdc:	b292      	uxth	r2, r2
 8005fde:	6979      	ldr	r1, [r7, #20]
 8005fe0:	4798      	blx	r3
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	77fb      	strb	r3, [r7, #31]
		if (txStatus != SBGC_DRV_TX_OK_FLAG)
		{

	#else

		while ((serialAPI_GetTick() - launchTime) < gSBGC->_api->currentSerialCommand->timeout &&
 8005fe6:	e00b      	b.n	8006000 <SBGC32_TX+0x12a>
			   (txStatus != SBGC_DRV_TX_OK_FLAG))
		/* Try to transmit the command while its time isn't over */
			txStatus = gSBGC->_ll->drvTx(gSBGC->_ll->drv, dataBuff, size);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	6812      	ldr	r2, [r2, #0]
 8005ff2:	6810      	ldr	r0, [r2, #0]
 8005ff4:	7cfa      	ldrb	r2, [r7, #19]
 8005ff6:	b292      	uxth	r2, r2
 8005ff8:	6979      	ldr	r1, [r7, #20]
 8005ffa:	4798      	blx	r3
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	77fb      	strb	r3, [r7, #31]
		while ((serialAPI_GetTick() - launchTime) < gSBGC->_api->currentSerialCommand->timeout &&
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6812      	ldr	r2, [r2, #0]
 800600a:	6812      	ldr	r2, [r2, #0]
 800600c:	4610      	mov	r0, r2
 800600e:	4798      	blx	r3
 8006010:	4602      	mov	r2, r0
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1ad2      	subs	r2, r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	429a      	cmp	r2, r3
 8006020:	d202      	bcs.n	8006028 <SBGC32_TX+0x152>
 8006022:	7ffb      	ldrb	r3, [r7, #31]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1df      	bne.n	8005fe8 <SBGC32_TX+0x112>

		if (txStatus != SBGC_DRV_TX_OK_FLAG)
 8006028:	7ffb      	ldrb	r3, [r7, #31]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d004      	beq.n	8006038 <SBGC32_TX+0x162>
		{

	#endif

			gSBGC->_lastSerialCommandStatus = serialAPI_TX_BUS_BUSY_ERROR;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	721a      	strb	r2, [r3, #8]
			return;
 8006034:	46b5      	mov	sp, r6
 8006036:	e003      	b.n	8006040 <SBGC32_TX+0x16a>
		}

	/* Command was transmitted fine */
	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	721a      	strb	r2, [r3, #8]
 800603e:	46b5      	mov	sp, r6
}
 8006040:	3724      	adds	r7, #36	; 0x24
 8006042:	46bd      	mov	sp, r7
 8006044:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006048 <SBGC32_RX>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SBGC32_RX (sbgcGeneral_t *gSBGC)
{
 8006048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800604c:	b089      	sub	sp, #36	; 0x24
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
	/* Parser initializing */
	static ui8 headBuff [3];  /* Header buffer:
	headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */

	ui8 startSymSample = (SBGC_PROTOCOL_VERSION - 1) ? SBGC_P2_START_CHARACTER : SBGC_P1_START_CHARACTER;
 8006052:	2324      	movs	r3, #36	; 0x24
 8006054:	777b      	strb	r3, [r7, #29]
		// Next - a command received OK

	}	parserState = STATE_IDLE;

	/* Start parse */
	switch (parserState)
 8006056:	4b94      	ldr	r3, [pc, #592]	; (80062a8 <SBGC32_RX+0x260>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b03      	cmp	r3, #3
 800605c:	d07b      	beq.n	8006156 <SBGC32_RX+0x10e>
 800605e:	2b03      	cmp	r3, #3
 8006060:	f300 811d 	bgt.w	800629e <SBGC32_RX+0x256>
 8006064:	2b01      	cmp	r3, #1
 8006066:	dc02      	bgt.n	800606e <SBGC32_RX+0x26>
 8006068:	2b00      	cmp	r3, #0
 800606a:	da03      	bge.n	8006074 <SBGC32_RX+0x2c>
 800606c:	e117      	b.n	800629e <SBGC32_RX+0x256>
 800606e:	2b02      	cmp	r3, #2
 8006070:	d02e      	beq.n	80060d0 <SBGC32_RX+0x88>
 8006072:	e114      	b.n	800629e <SBGC32_RX+0x256>
	{
		/* Waiting start byte */
		case STATE_IDLE :
		case STATE_RESYNC :
		{
			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	4610      	mov	r0, r2
 8006082:	4798      	blx	r3
 8006084:	4603      	mov	r3, r0
 8006086:	837b      	strh	r3, [r7, #26]

			if (availableBytes && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 8006088:	8b7b      	ldrh	r3, [r7, #26]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d018      	beq.n	80060c0 <SBGC32_RX+0x78>
 800608e:	8b7b      	ldrh	r3, [r7, #26]
 8006090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <SBGC32_RX+0x78>
			{
				ui8 startSym = 0;
 8006098:	2300      	movs	r3, #0
 800609a:	737b      	strb	r3, [r7, #13]

				gSBGC->_ll->drvRx(gSBGC->_ll->drv, &startSym);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	6812      	ldr	r2, [r2, #0]
 80060a8:	f107 010d 	add.w	r1, r7, #13
 80060ac:	4610      	mov	r0, r2
 80060ae:	4798      	blx	r3

				if (startSym != startSymSample)
 80060b0:	7b7b      	ldrb	r3, [r7, #13]
 80060b2:	7f7a      	ldrb	r2, [r7, #29]
 80060b4:	429a      	cmp	r2, r3
 80060b6:	d007      	beq.n	80060c8 <SBGC32_RX+0x80>
				{
					gSBGC->_lastSerialCommandStatus = serialAPI_RX_EMPTY_BUFF_ERROR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2202      	movs	r2, #2
 80060bc:	721a      	strb	r2, [r3, #8]
 80060be:	e0ee      	b.n	800629e <SBGC32_RX+0x256>
				}
			}

			else
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_EMPTY_BUFF_ERROR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	721a      	strb	r2, [r3, #8]
				break;
 80060c6:	e0ea      	b.n	800629e <SBGC32_RX+0x256>
			{
 80060c8:	bf00      	nop
			}

			parserState = STATE_CHECK_HEADER;
 80060ca:	4b77      	ldr	r3, [pc, #476]	; (80062a8 <SBGC32_RX+0x260>)
 80060cc:	2202      	movs	r2, #2
 80060ce:	701a      	strb	r2, [r3, #0]
		}

		/* Waiting whole header */
		case STATE_CHECK_HEADER :
		{
			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	6812      	ldr	r2, [r2, #0]
 80060da:	6812      	ldr	r2, [r2, #0]
 80060dc:	4610      	mov	r0, r2
 80060de:	4798      	blx	r3
 80060e0:	4603      	mov	r3, r0
 80060e2:	837b      	strh	r3, [r7, #26]

			if ((availableBytes >= 3) && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 80060e4:	8b7b      	ldrh	r3, [r7, #26]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d919      	bls.n	800611e <SBGC32_RX+0xd6>
 80060ea:	8b7b      	ldrh	r3, [r7, #26]
 80060ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d014      	beq.n	800611e <SBGC32_RX+0xd6>
				for (ui8 i = 0; i < 3; i++)
 80060f4:	2300      	movs	r3, #0
 80060f6:	77fb      	strb	r3, [r7, #31]
 80060f8:	e00d      	b.n	8006116 <SBGC32_RX+0xce>
					gSBGC->_ll->drvRx(gSBGC->_ll->drv, &headBuff[i]);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6812      	ldr	r2, [r2, #0]
 8006104:	6810      	ldr	r0, [r2, #0]
 8006106:	7ffa      	ldrb	r2, [r7, #31]
 8006108:	4968      	ldr	r1, [pc, #416]	; (80062ac <SBGC32_RX+0x264>)
 800610a:	440a      	add	r2, r1
 800610c:	4611      	mov	r1, r2
 800610e:	4798      	blx	r3
				for (ui8 i = 0; i < 3; i++)
 8006110:	7ffb      	ldrb	r3, [r7, #31]
 8006112:	3301      	adds	r3, #1
 8006114:	77fb      	strb	r3, [r7, #31]
 8006116:	7ffb      	ldrb	r3, [r7, #31]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d9ee      	bls.n	80060fa <SBGC32_RX+0xb2>
 800611c:	e003      	b.n	8006126 <SBGC32_RX+0xde>

			else
			/* The parser could not read the next 3 header bytes. Try again in the next time */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_BUFFER_REALTIME_ERROR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2203      	movs	r2, #3
 8006122:	721a      	strb	r2, [r3, #8]
				break;
 8006124:	e0bb      	b.n	800629e <SBGC32_RX+0x256>
			}

			if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8006126:	4b61      	ldr	r3, [pc, #388]	; (80062ac <SBGC32_RX+0x264>)
 8006128:	781a      	ldrb	r2, [r3, #0]
 800612a:	4b60      	ldr	r3, [pc, #384]	; (80062ac <SBGC32_RX+0x264>)
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	4413      	add	r3, r2
 8006130:	b2da      	uxtb	r2, r3
 8006132:	4b5e      	ldr	r3, [pc, #376]	; (80062ac <SBGC32_RX+0x264>)
 8006134:	789b      	ldrb	r3, [r3, #2]
 8006136:	429a      	cmp	r2, r3
 8006138:	d103      	bne.n	8006142 <SBGC32_RX+0xfa>
				(headBuff[0] == 0))
 800613a:	4b5c      	ldr	r3, [pc, #368]	; (80062ac <SBGC32_RX+0x264>)
 800613c:	781b      	ldrb	r3, [r3, #0]
			if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <SBGC32_RX+0x108>
			/* The header checksum is wrong. Break this command and look forward for a new command */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_HEADER_CHECKSUM_ERROR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2204      	movs	r2, #4
 8006146:	721a      	strb	r2, [r3, #8]
				parserState = STATE_RESYNC;
 8006148:	4b57      	ldr	r3, [pc, #348]	; (80062a8 <SBGC32_RX+0x260>)
 800614a:	2201      	movs	r2, #1
 800614c:	701a      	strb	r2, [r3, #0]
				break;
 800614e:	e0a6      	b.n	800629e <SBGC32_RX+0x256>
			}

			parserState = STATE_CHECK_PAYLOAD;
 8006150:	4b55      	ldr	r3, [pc, #340]	; (80062a8 <SBGC32_RX+0x260>)
 8006152:	2203      	movs	r2, #3
 8006154:	701a      	strb	r2, [r3, #0]
			/* Passing to the next state */
		}

		/* Waiting whole payload and checksum */
		case STATE_CHECK_PAYLOAD :
		{
 8006156:	466b      	mov	r3, sp
 8006158:	461e      	mov	r6, r3
			ui8 checksumSize = SBGC_PROTOCOL_VERSION;
 800615a:	2302      	movs	r3, #2
 800615c:	767b      	strb	r3, [r7, #25]
			ui8 complexBuff [sizeof(headBuff) + headBuff[1] + checksumSize];  // (Header + payloadSize + checksum) buffer
 800615e:	4b53      	ldr	r3, [pc, #332]	; (80062ac <SBGC32_RX+0x264>)
 8006160:	785b      	ldrb	r3, [r3, #1]
 8006162:	461a      	mov	r2, r3
 8006164:	7e7b      	ldrb	r3, [r7, #25]
 8006166:	4413      	add	r3, r2
 8006168:	1cd9      	adds	r1, r3, #3
 800616a:	460b      	mov	r3, r1
 800616c:	3b01      	subs	r3, #1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	2300      	movs	r3, #0
 8006172:	4688      	mov	r8, r1
 8006174:	4699      	mov	r9, r3
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006182:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006186:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800618a:	2300      	movs	r3, #0
 800618c:	460c      	mov	r4, r1
 800618e:	461d      	mov	r5, r3
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	f04f 0300 	mov.w	r3, #0
 8006198:	00eb      	lsls	r3, r5, #3
 800619a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800619e:	00e2      	lsls	r2, r4, #3
 80061a0:	1dcb      	adds	r3, r1, #7
 80061a2:	08db      	lsrs	r3, r3, #3
 80061a4:	00db      	lsls	r3, r3, #3
 80061a6:	ebad 0d03 	sub.w	sp, sp, r3
 80061aa:	466b      	mov	r3, sp
 80061ac:	3300      	adds	r3, #0
 80061ae:	613b      	str	r3, [r7, #16]

			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	6812      	ldr	r2, [r2, #0]
 80061ba:	6812      	ldr	r2, [r2, #0]
 80061bc:	4610      	mov	r0, r2
 80061be:	4798      	blx	r3
 80061c0:	4603      	mov	r3, r0
 80061c2:	837b      	strh	r3, [r7, #26]

			if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 80061c4:	8b7a      	ldrh	r2, [r7, #26]
 80061c6:	4b39      	ldr	r3, [pc, #228]	; (80062ac <SBGC32_RX+0x264>)
 80061c8:	785b      	ldrb	r3, [r3, #1]
 80061ca:	4619      	mov	r1, r3
 80061cc:	7e7b      	ldrb	r3, [r7, #25]
 80061ce:	440b      	add	r3, r1
 80061d0:	429a      	cmp	r2, r3
 80061d2:	db1f      	blt.n	8006214 <SBGC32_RX+0x1cc>
 80061d4:	8b7b      	ldrh	r3, [r7, #26]
 80061d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80061da:	4293      	cmp	r3, r2
 80061dc:	d01a      	beq.n	8006214 <SBGC32_RX+0x1cc>
				for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 80061de:	2300      	movs	r3, #0
 80061e0:	77bb      	strb	r3, [r7, #30]
 80061e2:	e00e      	b.n	8006202 <SBGC32_RX+0x1ba>
					gSBGC->_ll->drvRx(gSBGC->_ll->drv, &complexBuff[i + 3]);  // Offset from header space
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68db      	ldr	r3, [r3, #12]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	6812      	ldr	r2, [r2, #0]
 80061ee:	6810      	ldr	r0, [r2, #0]
 80061f0:	7fba      	ldrb	r2, [r7, #30]
 80061f2:	3203      	adds	r2, #3
 80061f4:	6939      	ldr	r1, [r7, #16]
 80061f6:	440a      	add	r2, r1
 80061f8:	4611      	mov	r1, r2
 80061fa:	4798      	blx	r3
				for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 80061fc:	7fbb      	ldrb	r3, [r7, #30]
 80061fe:	3301      	adds	r3, #1
 8006200:	77bb      	strb	r3, [r7, #30]
 8006202:	7fba      	ldrb	r2, [r7, #30]
 8006204:	4b29      	ldr	r3, [pc, #164]	; (80062ac <SBGC32_RX+0x264>)
 8006206:	785b      	ldrb	r3, [r3, #1]
 8006208:	4619      	mov	r1, r3
 800620a:	7e7b      	ldrb	r3, [r7, #25]
 800620c:	440b      	add	r3, r1
 800620e:	429a      	cmp	r2, r3
 8006210:	dbe8      	blt.n	80061e4 <SBGC32_RX+0x19c>
 8006212:	e003      	b.n	800621c <SBGC32_RX+0x1d4>

			else
			/* The parser could not read the next payload in the full volume. Try again in the next time */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_BUFFER_REALTIME_ERROR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2203      	movs	r2, #3
 8006218:	721a      	strb	r2, [r3, #8]
				break;
 800621a:	e03f      	b.n	800629c <SBGC32_RX+0x254>
				}
			}

			else  // V.2
			{
				memcpy(complexBuff, headBuff, 3);
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	4a23      	ldr	r2, [pc, #140]	; (80062ac <SBGC32_RX+0x264>)
 8006220:	8811      	ldrh	r1, [r2, #0]
 8006222:	7892      	ldrb	r2, [r2, #2]
 8006224:	8019      	strh	r1, [r3, #0]
 8006226:	709a      	strb	r2, [r3, #2]
				ui16 CRC_Res = SerialAPI_CRC16_Calculate(complexBuff, headBuff[1] + 3);
 8006228:	4b20      	ldr	r3, [pc, #128]	; (80062ac <SBGC32_RX+0x264>)
 800622a:	785b      	ldrb	r3, [r3, #1]
 800622c:	b29b      	uxth	r3, r3
 800622e:	3303      	adds	r3, #3
 8006230:	b29b      	uxth	r3, r3
 8006232:	4619      	mov	r1, r3
 8006234:	6938      	ldr	r0, [r7, #16]
 8006236:	f7ff fe0d 	bl	8005e54 <SerialAPI_CRC16_Calculate>
 800623a:	4603      	mov	r3, r0
 800623c:	81fb      	strh	r3, [r7, #14]

				if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 800623e:	89fb      	ldrh	r3, [r7, #14]
 8006240:	b2db      	uxtb	r3, r3
 8006242:	4a1a      	ldr	r2, [pc, #104]	; (80062ac <SBGC32_RX+0x264>)
 8006244:	7852      	ldrb	r2, [r2, #1]
 8006246:	3203      	adds	r2, #3
 8006248:	6939      	ldr	r1, [r7, #16]
 800624a:	5c8a      	ldrb	r2, [r1, r2]
 800624c:	4293      	cmp	r3, r2
 800624e:	d011      	beq.n	8006274 <SBGC32_RX+0x22c>
				   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 8006250:	89fb      	ldrh	r3, [r7, #14]
 8006252:	0a1b      	lsrs	r3, r3, #8
 8006254:	b29b      	uxth	r3, r3
 8006256:	b2db      	uxtb	r3, r3
 8006258:	4a14      	ldr	r2, [pc, #80]	; (80062ac <SBGC32_RX+0x264>)
 800625a:	7852      	ldrb	r2, [r2, #1]
 800625c:	3204      	adds	r2, #4
 800625e:	6939      	ldr	r1, [r7, #16]
 8006260:	5c8a      	ldrb	r2, [r1, r2]
				if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8006262:	4293      	cmp	r3, r2
 8006264:	d006      	beq.n	8006274 <SBGC32_RX+0x22c>
				/* The command came corrupted. Break it, look forward for a new command */
				{
					gSBGC->_lastSerialCommandStatus = serialAPI_RX_PAYLOAD_CHECKSUM_ERROR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2205      	movs	r2, #5
 800626a:	721a      	strb	r2, [r3, #8]
					parserState = STATE_RESYNC;
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <SBGC32_RX+0x260>)
 800626e:	2201      	movs	r2, #1
 8006270:	701a      	strb	r2, [r3, #0]
					break;
 8006272:	e013      	b.n	800629c <SBGC32_RX+0x254>
				}

			#endif

			/* Data passed all checks. Fill the new serialCommand struct */
			gSBGC->_api->saveCmd(gSBGC, (serialAPI_CommandID_t)headBuff[0], headBuff[1], &complexBuff[3]);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
 800627c:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <SBGC32_RX+0x264>)
 800627e:	7819      	ldrb	r1, [r3, #0]
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <SBGC32_RX+0x264>)
 8006282:	785a      	ldrb	r2, [r3, #1]
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	3303      	adds	r3, #3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	47a0      	blx	r4

			/* Prepare parser for new reading */
			parserState = STATE_IDLE;
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <SBGC32_RX+0x260>)
 800628e:	2200      	movs	r2, #0
 8006290:	701a      	strb	r2, [r3, #0]

			gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	721a      	strb	r2, [r3, #8]
			return;
 8006298:	46b5      	mov	sp, r6
 800629a:	e000      	b.n	800629e <SBGC32_RX+0x256>
				break;
 800629c:	46b5      	mov	sp, r6
		}
	}

	/* The command wasn't received. Exit */
}
 800629e:	3724      	adds	r7, #36	; 0x24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062a6:	bf00      	nop
 80062a8:	20000d18 	.word	0x20000d18
 80062ac:	20000d1c 	.word	0x20000d1c

080062b0 <PrivateSerialAPI_LinkLowLayer>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkLowLayer (sbgcGeneral_t *gSBGC)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	gSBGC->_ll->tx = SBGC32_TX;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4a05      	ldr	r2, [pc, #20]	; (80062d4 <PrivateSerialAPI_LinkLowLayer+0x24>)
 80062be:	61da      	str	r2, [r3, #28]
	gSBGC->_ll->rx = SBGC32_RX;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <PrivateSerialAPI_LinkLowLayer+0x28>)
 80062c6:	621a      	str	r2, [r3, #32]
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	08005ed7 	.word	0x08005ed7
 80062d8:	08006049 	.word	0x08006049

080062dc <DebugSBGC32_PrintMessage>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*str - printable string
 */
void DebugSBGC32_PrintMessage (sbgcGeneral_t *gSBGC, const char *str)
{
 80062dc:	b590      	push	{r4, r7, lr}
 80062de:	b083      	sub	sp, #12
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
	#if (SBGC_NEED_ASSERTS)
		if (gSBGC->_ll->drvTxDebug == NULL) return;
	#endif

	gSBGC->_ll->drvTxDebug((char*)str, strlen(str));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	695c      	ldr	r4, [r3, #20]
 80062ec:	6838      	ldr	r0, [r7, #0]
 80062ee:	f7f9 fff7 	bl	80002e0 <strlen>
 80062f2:	4603      	mov	r3, r0
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	4619      	mov	r1, r3
 80062f8:	6838      	ldr	r0, [r7, #0]
 80062fa:	47a0      	blx	r4
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bd90      	pop	{r4, r7, pc}

08006304 <DebugSBGC32_PrintStructElement>:
 *	@param	*pValue - printable variable
 *	@param	*str - debug info string
 *	@param	vType - type of variable
 */
void DebugSBGC32_PrintStructElement (sbgcGeneral_t *gSBGC, void *pValue, const char *str, sbgcVarType_t vType)
{
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b0bb      	sub	sp, #236	; 0xec
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
 8006310:	70fb      	strb	r3, [r7, #3]
	char debugStr [SBGC_DEBUG_BUFF_SIZE] = { 0 };
 8006312:	2300      	movs	r3, #0
 8006314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006318:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800631c:	223c      	movs	r2, #60	; 0x3c
 800631e:	2100      	movs	r1, #0
 8006320:	4618      	mov	r0, r3
 8006322:	f004 f94c 	bl	800a5be <memset>

	if (!(vType & sbgcFLAG))
 8006326:	78fb      	ldrb	r3, [r7, #3]
 8006328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	f040 8105 	bne.w	800653c <DebugSBGC32_PrintStructElement+0x238>
	/* Simple values */
	{
		switch (vType)
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	3b01      	subs	r3, #1
 8006336:	2b06      	cmp	r3, #6
 8006338:	f200 81f7 	bhi.w	800672a <DebugSBGC32_PrintStructElement+0x426>
 800633c:	a201      	add	r2, pc, #4	; (adr r2, 8006344 <DebugSBGC32_PrintStructElement+0x40>)
 800633e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006342:	bf00      	nop
 8006344:	08006361 	.word	0x08006361
 8006348:	08006427 	.word	0x08006427
 800634c:	080063a3 	.word	0x080063a3
 8006350:	0800646b 	.word	0x0800646b
 8006354:	080063e5 	.word	0x080063e5
 8006358:	080064af 	.word	0x080064af
 800635c:	080064f1 	.word	0x080064f1
		{
			case sbgcUCHAR :
			{
				char valueStr [4];

				gSBGC->_ll->debugSprintf(valueStr, "%u", *(ui8*)pValue);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	68ba      	ldr	r2, [r7, #8]
 8006368:	7812      	ldrb	r2, [r2, #0]
 800636a:	f107 0094 	add.w	r0, r7, #148	; 0x94
 800636e:	49ad      	ldr	r1, [pc, #692]	; (8006624 <DebugSBGC32_PrintStructElement+0x320>)
 8006370:	4798      	blx	r3

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7f9 ffb4 	bl	80002e0 <strlen>
 8006378:	4603      	mov	r3, r0
 800637a:	2b3c      	cmp	r3, #60	; 0x3c
 800637c:	d906      	bls.n	800638c <DebugSBGC32_PrintStructElement+0x88>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 800637e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006382:	223c      	movs	r2, #60	; 0x3c
 8006384:	6879      	ldr	r1, [r7, #4]
 8006386:	4618      	mov	r0, r3
 8006388:	f004 f921 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	699c      	ldr	r4, [r3, #24]
 8006392:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006396:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	49a2      	ldr	r1, [pc, #648]	; (8006628 <DebugSBGC32_PrintStructElement+0x324>)
 800639e:	47a0      	blx	r4
				break;
 80063a0:	e1c4      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>

			case sbgcUSHORT :
			{
				char valueStr [6];

				gSBGC->_ll->debugSprintf(valueStr, "%u", *(ui16*)pValue);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	8812      	ldrh	r2, [r2, #0]
 80063ac:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80063b0:	499c      	ldr	r1, [pc, #624]	; (8006624 <DebugSBGC32_PrintStructElement+0x320>)
 80063b2:	4798      	blx	r3

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7f9 ff93 	bl	80002e0 <strlen>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b3a      	cmp	r3, #58	; 0x3a
 80063be:	d906      	bls.n	80063ce <DebugSBGC32_PrintStructElement+0xca>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 80063c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80063c4:	223a      	movs	r2, #58	; 0x3a
 80063c6:	6879      	ldr	r1, [r7, #4]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f004 f900 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	699c      	ldr	r4, [r3, #24]
 80063d4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80063d8:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	4992      	ldr	r1, [pc, #584]	; (8006628 <DebugSBGC32_PrintStructElement+0x324>)
 80063e0:	47a0      	blx	r4
				break;
 80063e2:	e1a3      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>
				char valueStr [11];

				#ifdef _L32__
					gSBGC->_ll->debugSprintf(valueStr, "%u", *(ui32*)pValue);
				#else
					gSBGC->_ll->debugSprintf(valueStr, "%lu", *(ui32*)pValue);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80063f2:	498e      	ldr	r1, [pc, #568]	; (800662c <DebugSBGC32_PrintStructElement+0x328>)
 80063f4:	4798      	blx	r3
				#endif

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f7f9 ff72 	bl	80002e0 <strlen>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b35      	cmp	r3, #53	; 0x35
 8006400:	d906      	bls.n	8006410 <DebugSBGC32_PrintStructElement+0x10c>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 8006402:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006406:	2235      	movs	r2, #53	; 0x35
 8006408:	6879      	ldr	r1, [r7, #4]
 800640a:	4618      	mov	r0, r3
 800640c:	f004 f8df 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699c      	ldr	r4, [r3, #24]
 8006416:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800641a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	4981      	ldr	r1, [pc, #516]	; (8006628 <DebugSBGC32_PrintStructElement+0x324>)
 8006422:	47a0      	blx	r4
				break;
 8006424:	e182      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>

			case sbgcCHAR :
			{
				char valueStr [5];

				gSBGC->_ll->debugSprintf(valueStr, "%i", *(i8*)pValue);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	f992 2000 	ldrsb.w	r2, [r2]
 8006432:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8006436:	497e      	ldr	r1, [pc, #504]	; (8006630 <DebugSBGC32_PrintStructElement+0x32c>)
 8006438:	4798      	blx	r3

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7f9 ff50 	bl	80002e0 <strlen>
 8006440:	4603      	mov	r3, r0
 8006442:	2b3b      	cmp	r3, #59	; 0x3b
 8006444:	d906      	bls.n	8006454 <DebugSBGC32_PrintStructElement+0x150>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 8006446:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800644a:	223b      	movs	r2, #59	; 0x3b
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4618      	mov	r0, r3
 8006450:	f004 f8bd 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	699c      	ldr	r4, [r3, #24]
 800645a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800645e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4970      	ldr	r1, [pc, #448]	; (8006628 <DebugSBGC32_PrintStructElement+0x324>)
 8006466:	47a0      	blx	r4
				break;
 8006468:	e160      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>

			case sbgcSHORT :
			{
				char valueStr [7];

				gSBGC->_ll->debugSprintf(valueStr, "%i", *(i16*)pValue);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006476:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800647a:	496d      	ldr	r1, [pc, #436]	; (8006630 <DebugSBGC32_PrintStructElement+0x32c>)
 800647c:	4798      	blx	r3

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7f9 ff2e 	bl	80002e0 <strlen>
 8006484:	4603      	mov	r3, r0
 8006486:	2b39      	cmp	r3, #57	; 0x39
 8006488:	d906      	bls.n	8006498 <DebugSBGC32_PrintStructElement+0x194>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 800648a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800648e:	2239      	movs	r2, #57	; 0x39
 8006490:	6879      	ldr	r1, [r7, #4]
 8006492:	4618      	mov	r0, r3
 8006494:	f004 f89b 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	699c      	ldr	r4, [r3, #24]
 800649e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80064a2:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	495f      	ldr	r1, [pc, #380]	; (8006628 <DebugSBGC32_PrintStructElement+0x324>)
 80064aa:	47a0      	blx	r4
				break;
 80064ac:	e13e      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>
				char valueStr [12];

				#ifdef _L32__
					gSBGC->_ll->debugSprintf(valueStr, "%i", *(i32*)pValue);
				#else
					gSBGC->_ll->debugSprintf(valueStr, "%li", *(i32*)pValue);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	f107 0064 	add.w	r0, r7, #100	; 0x64
 80064bc:	495d      	ldr	r1, [pc, #372]	; (8006634 <DebugSBGC32_PrintStructElement+0x330>)
 80064be:	4798      	blx	r3
				#endif

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7f9 ff0d 	bl	80002e0 <strlen>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b34      	cmp	r3, #52	; 0x34
 80064ca:	d906      	bls.n	80064da <DebugSBGC32_PrintStructElement+0x1d6>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 80064cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80064d0:	2234      	movs	r2, #52	; 0x34
 80064d2:	6879      	ldr	r1, [r7, #4]
 80064d4:	4618      	mov	r0, r3
 80064d6:	f004 f87a 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	699c      	ldr	r4, [r3, #24]
 80064e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80064e4:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	494f      	ldr	r1, [pc, #316]	; (8006628 <DebugSBGC32_PrintStructElement+0x324>)
 80064ec:	47a0      	blx	r4
				break;
 80064ee:	e11d      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>

			case sbgcFLOAT :
			{
				char valueStr [16];

				gSBGC->_ll->debugSprintf(valueStr, "%.3f", *(float*)pValue);  // .3f is default. May be changed
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	699c      	ldr	r4, [r3, #24]
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	edd3 7a00 	vldr	s15, [r3]
 80064fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006500:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006504:	ec53 2b17 	vmov	r2, r3, d7
 8006508:	494b      	ldr	r1, [pc, #300]	; (8006638 <DebugSBGC32_PrintStructElement+0x334>)
 800650a:	47a0      	blx	r4

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7f9 fee7 	bl	80002e0 <strlen>
 8006512:	4603      	mov	r3, r0
 8006514:	2b30      	cmp	r3, #48	; 0x30
 8006516:	d906      	bls.n	8006526 <DebugSBGC32_PrintStructElement+0x222>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 8006518:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800651c:	2230      	movs	r2, #48	; 0x30
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	4618      	mov	r0, r3
 8006522:	f004 f854 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	699c      	ldr	r4, [r3, #24]
 800652c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006530:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	493c      	ldr	r1, [pc, #240]	; (8006628 <DebugSBGC32_PrintStructElement+0x324>)
 8006538:	47a0      	blx	r4
				break;
 800653a:	e0f7      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>
	}

	else
	/* Flags */
	{
		switch (vType & CLEAN_TYPE_MASK)
 800653c:	78fb      	ldrb	r3, [r7, #3]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	2b05      	cmp	r3, #5
 8006544:	f000 80a7 	beq.w	8006696 <DebugSBGC32_PrintStructElement+0x392>
 8006548:	2b05      	cmp	r3, #5
 800654a:	f300 80ef 	bgt.w	800672c <DebugSBGC32_PrintStructElement+0x428>
 800654e:	2b01      	cmp	r3, #1
 8006550:	d002      	beq.n	8006558 <DebugSBGC32_PrintStructElement+0x254>
 8006552:	2b03      	cmp	r3, #3
 8006554:	d049      	beq.n	80065ea <DebugSBGC32_PrintStructElement+0x2e6>
 8006556:	e0e9      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>
		{
			case sbgcUCHAR :
			{
				char flagStr [9];
				ui8 valueTemp = *(ui8*)pValue;
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9

				for (ui8 i = 0; i < 8; i++)
 8006560:	2300      	movs	r3, #0
 8006562:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8006566:	e021      	b.n	80065ac <DebugSBGC32_PrintStructElement+0x2a8>
				{
					if (valueTemp & (1 << i))
 8006568:	f897 20d9 	ldrb.w	r2, [r7, #217]	; 0xd9
 800656c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006570:	fa42 f303 	asr.w	r3, r2, r3
 8006574:	f003 0301 	and.w	r3, r3, #1
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <DebugSBGC32_PrintStructElement+0x28c>
						flagStr[7 - i] = '1';
 800657c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006580:	f1c3 0307 	rsb	r3, r3, #7
 8006584:	33e8      	adds	r3, #232	; 0xe8
 8006586:	443b      	add	r3, r7
 8006588:	2231      	movs	r2, #49	; 0x31
 800658a:	f803 2ca0 	strb.w	r2, [r3, #-160]
 800658e:	e008      	b.n	80065a2 <DebugSBGC32_PrintStructElement+0x29e>

					else
						flagStr[7 - i] = '0';
 8006590:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006594:	f1c3 0307 	rsb	r3, r3, #7
 8006598:	33e8      	adds	r3, #232	; 0xe8
 800659a:	443b      	add	r3, r7
 800659c:	2230      	movs	r2, #48	; 0x30
 800659e:	f803 2ca0 	strb.w	r2, [r3, #-160]
				for (ui8 i = 0; i < 8; i++)
 80065a2:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80065a6:	3301      	adds	r3, #1
 80065a8:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80065ac:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80065b0:	2b07      	cmp	r3, #7
 80065b2:	d9d9      	bls.n	8006568 <DebugSBGC32_PrintStructElement+0x264>
				}

				flagStr[8] = '\0';
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr)))
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7f9 fe90 	bl	80002e0 <strlen>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b37      	cmp	r3, #55	; 0x37
 80065c4:	d906      	bls.n	80065d4 <DebugSBGC32_PrintStructElement+0x2d0>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr));
 80065c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80065ca:	2237      	movs	r2, #55	; 0x37
 80065cc:	6879      	ldr	r1, [r7, #4]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f003 fffd 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, flagStr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699c      	ldr	r4, [r3, #24]
 80065da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80065de:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80065e2:	687a      	ldr	r2, [r7, #4]
 80065e4:	4910      	ldr	r1, [pc, #64]	; (8006628 <DebugSBGC32_PrintStructElement+0x324>)
 80065e6:	47a0      	blx	r4
				break;
 80065e8:	e0a0      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>
			}

			case sbgcUSHORT :
			{
				char flagStr [17];
				ui16 valueTemp = *(ui16*)pValue;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

				for (ui16 i = 0; i < 16; i++)
 80065f2:	2300      	movs	r3, #0
 80065f4:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 80065f8:	e02e      	b.n	8006658 <DebugSBGC32_PrintStructElement+0x354>
				{
					if (valueTemp & (1 << i))
 80065fa:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 80065fe:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8006602:	fa42 f303 	asr.w	r3, r2, r3
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d016      	beq.n	800663c <DebugSBGC32_PrintStructElement+0x338>
						flagStr[15 - i] = '1';
 800660e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8006612:	f1c3 030f 	rsb	r3, r3, #15
 8006616:	33e8      	adds	r3, #232	; 0xe8
 8006618:	443b      	add	r3, r7
 800661a:	2231      	movs	r2, #49	; 0x31
 800661c:	f803 2cb4 	strb.w	r2, [r3, #-180]
 8006620:	e015      	b.n	800664e <DebugSBGC32_PrintStructElement+0x34a>
 8006622:	bf00      	nop
 8006624:	0800de2c 	.word	0x0800de2c
 8006628:	0800de30 	.word	0x0800de30
 800662c:	0800de38 	.word	0x0800de38
 8006630:	0800de3c 	.word	0x0800de3c
 8006634:	0800de40 	.word	0x0800de40
 8006638:	0800de44 	.word	0x0800de44

					else
						flagStr[15 - i] = '0';
 800663c:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8006640:	f1c3 030f 	rsb	r3, r3, #15
 8006644:	33e8      	adds	r3, #232	; 0xe8
 8006646:	443b      	add	r3, r7
 8006648:	2230      	movs	r2, #48	; 0x30
 800664a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for (ui16 i = 0; i < 16; i++)
 800664e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8006652:	3301      	adds	r3, #1
 8006654:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8006658:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 800665c:	2b0f      	cmp	r3, #15
 800665e:	d9cc      	bls.n	80065fa <DebugSBGC32_PrintStructElement+0x2f6>
				}

				flagStr[16] = '\0';
 8006660:	2300      	movs	r3, #0
 8006662:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr)))
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f7f9 fe3a 	bl	80002e0 <strlen>
 800666c:	4603      	mov	r3, r0
 800666e:	2b2f      	cmp	r3, #47	; 0x2f
 8006670:	d906      	bls.n	8006680 <DebugSBGC32_PrintStructElement+0x37c>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr));
 8006672:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006676:	222f      	movs	r2, #47	; 0x2f
 8006678:	6879      	ldr	r1, [r7, #4]
 800667a:	4618      	mov	r0, r3
 800667c:	f003 ffa7 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, flagStr);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699c      	ldr	r4, [r3, #24]
 8006686:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800668a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800668e:	687a      	ldr	r2, [r7, #4]
 8006690:	492b      	ldr	r1, [pc, #172]	; (8006740 <DebugSBGC32_PrintStructElement+0x43c>)
 8006692:	47a0      	blx	r4
				break;
 8006694:	e04a      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>
			}

			case sbgcUINT :
			{
				char flagStr [33];
				ui32 valueTemp = *(ui32*)pValue;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

				for (ui32 i = 0; i < 32; i++)
 800669e:	2300      	movs	r3, #0
 80066a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066a4:	e022      	b.n	80066ec <DebugSBGC32_PrintStructElement+0x3e8>
				{
					if (valueTemp & (1 << i))
 80066a6:	2201      	movs	r2, #1
 80066a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066ac:	fa02 f303 	lsl.w	r3, r2, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b6:	4013      	ands	r3, r2
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d009      	beq.n	80066d0 <DebugSBGC32_PrintStructElement+0x3cc>
						flagStr[31 - i] = '1';
 80066bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c0:	f1c3 031f 	rsb	r3, r3, #31
 80066c4:	33e8      	adds	r3, #232	; 0xe8
 80066c6:	443b      	add	r3, r7
 80066c8:	2231      	movs	r2, #49	; 0x31
 80066ca:	f803 2cd8 	strb.w	r2, [r3, #-216]
 80066ce:	e008      	b.n	80066e2 <DebugSBGC32_PrintStructElement+0x3de>

					else
						flagStr[31 - i] = '0';
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d4:	f1c3 031f 	rsb	r3, r3, #31
 80066d8:	33e8      	adds	r3, #232	; 0xe8
 80066da:	443b      	add	r3, r7
 80066dc:	2230      	movs	r2, #48	; 0x30
 80066de:	f803 2cd8 	strb.w	r2, [r3, #-216]
				for (ui32 i = 0; i < 32; i++)
 80066e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066e6:	3301      	adds	r3, #1
 80066e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80066ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f0:	2b1f      	cmp	r3, #31
 80066f2:	d9d8      	bls.n	80066a6 <DebugSBGC32_PrintStructElement+0x3a2>
				}

				flagStr[32] = '\0';
 80066f4:	2300      	movs	r3, #0
 80066f6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr)))
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7f9 fdf0 	bl	80002e0 <strlen>
 8006700:	4603      	mov	r3, r0
 8006702:	2b1f      	cmp	r3, #31
 8006704:	d906      	bls.n	8006714 <DebugSBGC32_PrintStructElement+0x410>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr));
 8006706:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800670a:	221f      	movs	r2, #31
 800670c:	6879      	ldr	r1, [r7, #4]
 800670e:	4618      	mov	r0, r3
 8006710:	f003 ff5d 	bl	800a5ce <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, flagStr);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	699c      	ldr	r4, [r3, #24]
 800671a:	f107 0310 	add.w	r3, r7, #16
 800671e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	4906      	ldr	r1, [pc, #24]	; (8006740 <DebugSBGC32_PrintStructElement+0x43c>)
 8006726:	47a0      	blx	r4
				break;
 8006728:	e000      	b.n	800672c <DebugSBGC32_PrintStructElement+0x428>
				break;
 800672a:	bf00      	nop
			}
		}
	}

	DebugSBGC32_PrintMessage(gSBGC, debugStr);
 800672c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006730:	4619      	mov	r1, r3
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fdd2 	bl	80062dc <DebugSBGC32_PrintMessage>
}
 8006738:	bf00      	nop
 800673a:	37ec      	adds	r7, #236	; 0xec
 800673c:	46bd      	mov	sp, r7
 800673e:	bd90      	pop	{r4, r7, pc}
 8006740:	0800de30 	.word	0x0800de30

08006744 <DebugSBGC32_WriteLog>:
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 *	@param	*serialCommand - pointer to a serial command
	 */
	static void DebugSBGC32_WriteLog (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
	{
 8006744:	b580      	push	{r7, lr}
 8006746:	b094      	sub	sp, #80	; 0x50
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
		if (serialCommand->parameters & SCParam_NO_NEED_LOG) return;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	781b      	ldrb	r3, [r3, #0]
 8006752:	f003 0308 	and.w	r3, r3, #8
 8006756:	2b00      	cmp	r3, #0
 8006758:	f040 80b7 	bne.w	80068ca <DebugSBGC32_WriteLog+0x186>

		char logBuffer [SBGC_DEBUG_BUFF_SIZE] = { 0 };
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]
 8006760:	f107 0310 	add.w	r3, r7, #16
 8006764:	223c      	movs	r2, #60	; 0x3c
 8006766:	2100      	movs	r1, #0
 8006768:	4618      	mov	r0, r3
 800676a:	f003 ff28 	bl	800a5be <memset>
		ui8 pointer = 0;
 800676e:	2300      	movs	r3, #0
 8006770:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		#if (SBGC_LOG_COMMAND_NUMBER)

			#ifdef _L32__
				pointer += gSBGC->_ll->debugSprintf(logBuffer, "%u. ", serialCommand->_id);
			#else
				pointer += gSBGC->_ll->debugSprintf(logBuffer, "%lu. ", serialCommand->_id);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	699b      	ldr	r3, [r3, #24]
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	6892      	ldr	r2, [r2, #8]
 800677e:	f107 000c 	add.w	r0, r7, #12
 8006782:	4954      	ldr	r1, [pc, #336]	; (80068d4 <DebugSBGC32_WriteLog+0x190>)
 8006784:	4798      	blx	r3
 8006786:	4603      	mov	r3, r0
 8006788:	b2da      	uxtb	r2, r3
 800678a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800678e:	4413      	add	r3, r2
 8006790:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		#endif

		#if (SBGC_LOG_COMMAND_DIR)

			pointer += (serialCommand->parameters & SCParam_RX) ?
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	b25b      	sxtb	r3, r3
						gSBGC->_ll->debugSprintf(&logBuffer[pointer], "<-- ", serialCommand->_id) :
 800679a:	2b00      	cmp	r3, #0
 800679c:	da0d      	bge.n	80067ba <DebugSBGC32_WriteLog+0x76>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80067a8:	f107 010c 	add.w	r1, r7, #12
 80067ac:	1888      	adds	r0, r1, r2
 80067ae:	683a      	ldr	r2, [r7, #0]
 80067b0:	6892      	ldr	r2, [r2, #8]
 80067b2:	4949      	ldr	r1, [pc, #292]	; (80068d8 <DebugSBGC32_WriteLog+0x194>)
 80067b4:	4798      	blx	r3
 80067b6:	4603      	mov	r3, r0
 80067b8:	e00c      	b.n	80067d4 <DebugSBGC32_WriteLog+0x90>
						gSBGC->_ll->debugSprintf(&logBuffer[pointer], "--> ", serialCommand->_id);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	699b      	ldr	r3, [r3, #24]
 80067c0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80067c4:	f107 010c 	add.w	r1, r7, #12
 80067c8:	1888      	adds	r0, r1, r2
 80067ca:	683a      	ldr	r2, [r7, #0]
 80067cc:	6892      	ldr	r2, [r2, #8]
 80067ce:	4943      	ldr	r1, [pc, #268]	; (80068dc <DebugSBGC32_WriteLog+0x198>)
 80067d0:	4798      	blx	r3
 80067d2:	4603      	mov	r3, r0
			pointer += (serialCommand->parameters & SCParam_RX) ?
 80067d4:	b2da      	uxtb	r2, r3
 80067d6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80067da:	4413      	add	r3, r2
 80067dc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		#endif

		#if (SBGC_LOG_COMMAND_NAME)
			pointer += ParserSBGC32_ConvertCommandID_ToString(serialCommand, &logBuffer[pointer], SBGC_DEBUG_BUFF_SIZE - pointer);
 80067e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80067e4:	f107 020c 	add.w	r2, r7, #12
 80067e8:	18d1      	adds	r1, r2, r3
 80067ea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80067ee:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	6838      	ldr	r0, [r7, #0]
 80067f8:	f001 f83e 	bl	8007878 <ParserSBGC32_ConvertCommandID_ToString>
 80067fc:	4603      	mov	r3, r0
 80067fe:	461a      	mov	r2, r3
 8006800:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006804:	4413      	add	r3, r2
 8006806:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], " ");
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006814:	f107 010c 	add.w	r1, r7, #12
 8006818:	440a      	add	r2, r1
 800681a:	4931      	ldr	r1, [pc, #196]	; (80068e0 <DebugSBGC32_WriteLog+0x19c>)
 800681c:	4610      	mov	r0, r2
 800681e:	4798      	blx	r3
 8006820:	4603      	mov	r3, r0
 8006822:	b2da      	uxtb	r2, r3
 8006824:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006828:	4413      	add	r3, r2
 800682a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		#endif

		#if (SBGC_LOG_COMMAND_ID)
			pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], "(#%d): ", serialCommand->_commandID);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006838:	f107 010c 	add.w	r1, r7, #12
 800683c:	1888      	adds	r0, r1, r2
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	7ed2      	ldrb	r2, [r2, #27]
 8006842:	4928      	ldr	r1, [pc, #160]	; (80068e4 <DebugSBGC32_WriteLog+0x1a0>)
 8006844:	4798      	blx	r3
 8006846:	4603      	mov	r3, r0
 8006848:	b2da      	uxtb	r2, r3
 800684a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800684e:	4413      	add	r3, r2
 8006850:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		#endif

		#if (SBGC_LOG_COMMAND_STATUS)
			pointer += ParserSBGC32_ConvertCommandStatusToString(serialCommand, &logBuffer[pointer], SBGC_DEBUG_BUFF_SIZE - pointer);
 8006854:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006858:	f107 020c 	add.w	r2, r7, #12
 800685c:	18d1      	adds	r1, r2, r3
 800685e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006862:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	6838      	ldr	r0, [r7, #0]
 800686c:	f001 fdb8 	bl	80083e0 <ParserSBGC32_ConvertCommandStatusToString>
 8006870:	4603      	mov	r3, r0
 8006872:	461a      	mov	r2, r3
 8006874:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006878:	4413      	add	r3, r2
 800687a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], " ");
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	699b      	ldr	r3, [r3, #24]
 8006884:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006888:	f107 010c 	add.w	r1, r7, #12
 800688c:	440a      	add	r2, r1
 800688e:	4914      	ldr	r1, [pc, #80]	; (80068e0 <DebugSBGC32_WriteLog+0x19c>)
 8006890:	4610      	mov	r0, r2
 8006892:	4798      	blx	r3
 8006894:	4603      	mov	r3, r0
 8006896:	b2da      	uxtb	r2, r3
 8006898:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800689c:	4413      	add	r3, r2
 800689e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], " [%d]:", serialCommand->_payloadSize);

			else
		#endif

				logBuffer[pointer] = '\n';
 80068a2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80068a6:	3350      	adds	r3, #80	; 0x50
 80068a8:	443b      	add	r3, r7
 80068aa:	220a      	movs	r2, #10
 80068ac:	f803 2c44 	strb.w	r2, [r3, #-68]

		if (pointer >= SBGC_DEBUG_BUFF_SIZE)
 80068b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80068b4:	2b3f      	cmp	r3, #63	; 0x3f
 80068b6:	d901      	bls.n	80068bc <DebugSBGC32_WriteLog+0x178>
			SerialAPI_FatalErrorHandler();
 80068b8:	f7fa fde6 	bl	8001488 <SerialAPI_FatalErrorHandler>

		DebugSBGC32_PrintMessage(gSBGC, logBuffer);
 80068bc:	f107 030c 	add.w	r3, r7, #12
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff fd0a 	bl	80062dc <DebugSBGC32_PrintMessage>
 80068c8:	e000      	b.n	80068cc <DebugSBGC32_WriteLog+0x188>
		if (serialCommand->parameters & SCParam_NO_NEED_LOG) return;
 80068ca:	bf00      	nop

				payloadOffset += (SBGC_DEBUG_BUFF_SIZE / 4);
			}

		#endif
	}
 80068cc:	3750      	adds	r7, #80	; 0x50
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	0800de4c 	.word	0x0800de4c
 80068d8:	0800de54 	.word	0x0800de54
 80068dc:	0800de5c 	.word	0x0800de5c
 80068e0:	0800de64 	.word	0x0800de64
 80068e4:	0800de68 	.word	0x0800de68

080068e8 <PrivateSerialAPI_LinkDebug>:
	 *	@note	Quasi-private function
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 */
	void PrivateSerialAPI_LinkDebug (sbgcGeneral_t *gSBGC)
	{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
		gSBGC->_api->writeLog = DebugSBGC32_WriteLog;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	4a03      	ldr	r2, [pc, #12]	; (8006904 <PrivateSerialAPI_LinkDebug+0x1c>)
 80068f6:	64da      	str	r2, [r3, #76]	; 0x4c
	}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	08006745 	.word	0x08006745

08006908 <SerialAPI_DeleteSentCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to command
 */
static void SerialAPI_DeleteSentCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
	if (serialCommand->_payloadSize == 0)
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	7f1b      	ldrb	r3, [r3, #28]
 8006916:	2b00      	cmp	r3, #0
 8006918:	f000 8085 	beq.w	8006a26 <SerialAPI_DeleteSentCommand+0x11e>
		return;

	ui16 buffPointer = (ui16)(serialCommand->_payload - gSBGC->_api->txCommandBuff);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	6a1a      	ldr	r2, [r3, #32]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	1ad3      	subs	r3, r2, r3
 8006928:	81bb      	strh	r3, [r7, #12]
	ui16 shiftSize = calcFreeSpaceFIFO(gSBGC->_api->txCommandBuffHead, buffPointer, SBGC_TX_BUFF_TOTAL_SIZE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006932:	b29b      	uxth	r3, r3
 8006934:	89ba      	ldrh	r2, [r7, #12]
 8006936:	429a      	cmp	r2, r3
 8006938:	d30b      	bcc.n	8006952 <SerialAPI_DeleteSentCommand+0x4a>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006942:	b29a      	uxth	r2, r3
 8006944:	89bb      	ldrh	r3, [r7, #12]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	b29b      	uxth	r3, r3
 800694a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800694e:	b29b      	uxth	r3, r3
 8006950:	e007      	b.n	8006962 <SerialAPI_DeleteSentCommand+0x5a>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800695a:	b29a      	uxth	r2, r3
 800695c:	89bb      	ldrh	r3, [r7, #12]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	b29b      	uxth	r3, r3
 8006962:	817b      	strh	r3, [r7, #10]
	shiftSize = (shiftSize == SBGC_TX_BUFF_TOTAL_SIZE) ? 0 : shiftSize;
 8006964:	897b      	ldrh	r3, [r7, #10]
 8006966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800696a:	d001      	beq.n	8006970 <SerialAPI_DeleteSentCommand+0x68>
 800696c:	897b      	ldrh	r3, [r7, #10]
 800696e:	e000      	b.n	8006972 <SerialAPI_DeleteSentCommand+0x6a>
 8006970:	2300      	movs	r3, #0
 8006972:	817b      	strh	r3, [r7, #10]

	if (buffPointer != gSBGC->_api->txCommandBuffTail)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800697c:	b29b      	uxth	r3, r3
 800697e:	89ba      	ldrh	r2, [r7, #12]
 8006980:	429a      	cmp	r2, r3
 8006982:	d043      	beq.n	8006a0c <SerialAPI_DeleteSentCommand+0x104>
	/* This command isn't first */
	{
		if (((buffPointer + serialCommand->_payloadSize) & SBGC_TX_BUFF_SIZE_MASK) == gSBGC->_api->txCommandBuffHead)
 8006984:	89bb      	ldrh	r3, [r7, #12]
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	7f12      	ldrb	r2, [r2, #28]
 800698a:	4413      	add	r3, r2
 800698c:	b2db      	uxtb	r3, r3
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	6852      	ldr	r2, [r2, #4]
 8006992:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006996:	4293      	cmp	r3, r2
 8006998:	d10c      	bne.n	80069b4 <SerialAPI_DeleteSentCommand+0xac>
		/* This command is latest */
		{
			gSBGC->_api->txCommandBuffHead -= serialCommand->_payloadSize;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80069a2:	683b      	ldr	r3, [r7, #0]
 80069a4:	7f1a      	ldrb	r2, [r3, #28]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	1a8a      	subs	r2, r1, r2
 80069ac:	b2d2      	uxtb	r2, r2
 80069ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			return;
 80069b2:	e039      	b.n	8006a28 <SerialAPI_DeleteSentCommand+0x120>
		}

		/* This command is between other commands */
		for (ui16 i = 0; i < shiftSize; i++)
 80069b4:	2300      	movs	r3, #0
 80069b6:	81fb      	strh	r3, [r7, #14]
 80069b8:	e017      	b.n	80069ea <SerialAPI_DeleteSentCommand+0xe2>
		/* Shifting */
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
					gSBGC->_api->txCommandBuff[((buffPointer + serialCommand->_payloadSize + i) & SBGC_TX_BUFF_SIZE_MASK)];
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069c0:	89bb      	ldrh	r3, [r7, #12]
 80069c2:	6839      	ldr	r1, [r7, #0]
 80069c4:	7f09      	ldrb	r1, [r1, #28]
 80069c6:	4419      	add	r1, r3
 80069c8:	89fb      	ldrh	r3, [r7, #14]
 80069ca:	440b      	add	r3, r1
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	441a      	add	r2, r3
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80069d6:	89b8      	ldrh	r0, [r7, #12]
 80069d8:	89fb      	ldrh	r3, [r7, #14]
 80069da:	4403      	add	r3, r0
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	440b      	add	r3, r1
					gSBGC->_api->txCommandBuff[((buffPointer + serialCommand->_payloadSize + i) & SBGC_TX_BUFF_SIZE_MASK)];
 80069e0:	7812      	ldrb	r2, [r2, #0]
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
 80069e2:	701a      	strb	r2, [r3, #0]
		for (ui16 i = 0; i < shiftSize; i++)
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	3301      	adds	r3, #1
 80069e8:	81fb      	strh	r3, [r7, #14]
 80069ea:	89fa      	ldrh	r2, [r7, #14]
 80069ec:	897b      	ldrh	r3, [r7, #10]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d3e3      	bcc.n	80069ba <SerialAPI_DeleteSentCommand+0xb2>

		/* Shift head after buffer shifting */
		gSBGC->_api->txCommandBuffHead -= serialCommand->_payloadSize;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	7f1a      	ldrb	r2, [r3, #28]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	1a8a      	subs	r2, r1, r2
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8006a0a:	e00d      	b.n	8006a28 <SerialAPI_DeleteSentCommand+0x120>
	}

	else
	/* This command is first */
		gSBGC->_api->txCommandBuffTail += serialCommand->_payloadSize;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	7f1a      	ldrb	r2, [r3, #28]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	b2d2      	uxtb	r2, r2
 8006a20:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006a24:	e000      	b.n	8006a28 <SerialAPI_DeleteSentCommand+0x120>
		return;
 8006a26:	bf00      	nop
}
 8006a28:	3714      	adds	r7, #20
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr

08006a32 <SerialAPI_SaveReceivedCommand>:
 *	@param	cmdID - ID part of serial command
 *	@param	payloadSize - size part of serial command
 *	@param	*payload - pointer to payload part of serial command
 */
static void SerialAPI_SaveReceivedCommand (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID, ui8 payloadSize, ui8 const *payload)
{
 8006a32:	b490      	push	{r4, r7}
 8006a34:	b086      	sub	sp, #24
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	607b      	str	r3, [r7, #4]
 8006a3c:	460b      	mov	r3, r1
 8006a3e:	72fb      	strb	r3, [r7, #11]
 8006a40:	4613      	mov	r3, r2
 8006a42:	72bb      	strb	r3, [r7, #10]
	if ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)) &&
 8006a44:	7abb      	ldrb	r3, [r7, #10]
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a58:	4299      	cmp	r1, r3
 8006a5a:	d30c      	bcc.n	8006a76 <SerialAPI_SaveReceivedCommand+0x44>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a64:	4619      	mov	r1, r3
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a6e:	1acb      	subs	r3, r1, r3
 8006a70:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006a74:	e009      	b.n	8006a8a <SerialAPI_SaveReceivedCommand+0x58>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006a7e:	4619      	mov	r1, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	685b      	ldr	r3, [r3, #4]
 8006a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a88:	1acb      	subs	r3, r1, r3
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	dc4e      	bgt.n	8006b2c <SerialAPI_SaveReceivedCommand+0xfa>
		(gSBGC->_api->rxCommandBuffHead != gSBGC->_api->rxCommandBuffTail))
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)) &&
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d044      	beq.n	8006b2c <SerialAPI_SaveReceivedCommand+0xfa>
			return;

		#else

			/* It's necessary to clean the space for a new serial command */
			while ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)))
 8006aa2:	e016      	b.n	8006ad2 <SerialAPI_SaveReceivedCommand+0xa0>
				gSBGC->_api->rxCommandBuffTail += gSBGC->_api->rxCommandBuff[(gSBGC->_api->rxCommandBuffTail + 1) & SBGC_RX_BUFF_SIZE_MASK] + 2;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006aba:	3301      	adds	r3, #1
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	440b      	add	r3, r1
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	3202      	adds	r2, #2
 8006acc:	b2d2      	uxtb	r2, r2
 8006ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			while ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)))
 8006ad2:	7abb      	ldrb	r3, [r7, #10]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ae6:	4299      	cmp	r1, r3
 8006ae8:	d30c      	bcc.n	8006b04 <SerialAPI_SaveReceivedCommand+0xd2>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006af2:	4619      	mov	r1, r3
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006afc:	1acb      	subs	r3, r1, r3
 8006afe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006b02:	e009      	b.n	8006b18 <SerialAPI_SaveReceivedCommand+0xe6>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b16:	1acb      	subs	r3, r1, r3
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	ddc3      	ble.n	8006aa4 <SerialAPI_SaveReceivedCommand+0x72>

			gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006b28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

		#endif
	}

	gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = cmdID;
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8006b3a:	1c50      	adds	r0, r2, #1
 8006b3c:	b2c0      	uxtb	r0, r0
 8006b3e:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
 8006b42:	4613      	mov	r3, r2
 8006b44:	440b      	add	r3, r1
 8006b46:	7afa      	ldrb	r2, [r7, #11]
 8006b48:	701a      	strb	r2, [r3, #0]
	gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = payloadSize;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	685b      	ldr	r3, [r3, #4]
 8006b4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8006b58:	1c50      	adds	r0, r2, #1
 8006b5a:	b2c0      	uxtb	r0, r0
 8006b5c:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
 8006b60:	4613      	mov	r3, r2
 8006b62:	440b      	add	r3, r1
 8006b64:	7aba      	ldrb	r2, [r7, #10]
 8006b66:	701a      	strb	r2, [r3, #0]

	for (ui16 i = 0; i < payloadSize; i++)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	82fb      	strh	r3, [r7, #22]
 8006b6c:	e014      	b.n	8006b98 <SerialAPI_SaveReceivedCommand+0x166>
		gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = payload[i];
 8006b6e:	8afb      	ldrh	r3, [r7, #22]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	18d1      	adds	r1, r2, r3
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8006b82:	1c54      	adds	r4, r2, #1
 8006b84:	b2e4      	uxtb	r4, r4
 8006b86:	f883 4035 	strb.w	r4, [r3, #53]	; 0x35
 8006b8a:	4613      	mov	r3, r2
 8006b8c:	4403      	add	r3, r0
 8006b8e:	780a      	ldrb	r2, [r1, #0]
 8006b90:	701a      	strb	r2, [r3, #0]
	for (ui16 i = 0; i < payloadSize; i++)
 8006b92:	8afb      	ldrh	r3, [r7, #22]
 8006b94:	3301      	adds	r3, #1
 8006b96:	82fb      	strh	r3, [r7, #22]
 8006b98:	7abb      	ldrb	r3, [r7, #10]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8afa      	ldrh	r2, [r7, #22]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d3e5      	bcc.n	8006b6e <SerialAPI_SaveReceivedCommand+0x13c>
}
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bc90      	pop	{r4, r7}
 8006bac:	4770      	bx	lr

08006bae <SerialAPI_ReadReceivedCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to command
 */
static ui8 SerialAPI_ReadReceivedCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b085      	sub	sp, #20
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
	serialCommand->_commandID = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP++];
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006bc6:	1c50      	adds	r0, r2, #1
 8006bc8:	b2c0      	uxtb	r0, r0
 8006bca:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
 8006bce:	4613      	mov	r3, r2
 8006bd0:	440b      	add	r3, r1
 8006bd2:	781a      	ldrb	r2, [r3, #0]
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	76da      	strb	r2, [r3, #27]

	ui8 payloadSize = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP++];
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006be6:	1c50      	adds	r0, r2, #1
 8006be8:	b2c0      	uxtb	r0, r0
 8006bea:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
 8006bee:	4613      	mov	r3, r2
 8006bf0:	440b      	add	r3, r1
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	73fb      	strb	r3, [r7, #15]

	serialCommand->_payload = &gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP];
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6852      	ldr	r2, [r2, #4]
 8006c00:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006c04:	441a      	add	r2, r3
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	621a      	str	r2, [r3, #32]
	gSBGC->_api->rxCommandBuffCurP += payloadSize;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	7bfa      	ldrb	r2, [r7, #15]
 8006c18:	440a      	add	r2, r1
 8006c1a:	b2d2      	uxtb	r2, r2
 8006c1c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return payloadSize;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <SerialAPI_DeleteReceivedCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*payload - pointer to command's payload
 */
static void SerialAPI_DeleteReceivedCommand (sbgcGeneral_t *gSBGC, ui8 const *payload)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
 8006c36:	6039      	str	r1, [r7, #0]
	if (payload == NULL)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f000 80ab 	beq.w	8006d96 <SerialAPI_DeleteReceivedCommand+0x168>
		return;

	/* Note: gSBGC->_api->rxCommandBuffCurP aren't available to read here */

	ui16 buffPointer = (((((uintptr_t)payload) - 2) & SBGC_RX_BUFF_SIZE_MASK) - (uintptr_t)gSBGC->_api->rxCommandBuff) & SBGC_RX_BUFF_SIZE_MASK;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	687a      	ldr	r2, [r7, #4]
 8006c44:	6852      	ldr	r2, [r2, #4]
 8006c46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c48:	1a9b      	subs	r3, r3, r2
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b02      	subs	r3, #2
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	81bb      	strh	r3, [r7, #12]
	ui8 cmdSize = gSBGC->_api->rxCommandBuff[((buffPointer + 1) & SBGC_RX_BUFF_SIZE_MASK)] + 2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5a:	89bb      	ldrh	r3, [r7, #12]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	b2db      	uxtb	r3, r3
 8006c60:	4413      	add	r3, r2
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	3302      	adds	r3, #2
 8006c66:	72fb      	strb	r3, [r7, #11]
	ui16 shiftSize = calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffHead, (buffPointer + cmdSize) & SBGC_RX_BUFF_SIZE_MASK,
 8006c68:	89ba      	ldrh	r2, [r7, #12]
 8006c6a:	7afb      	ldrb	r3, [r7, #11]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6852      	ldr	r2, [r2, #4]
 8006c74:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	db11      	blt.n	8006ca0 <SerialAPI_DeleteReceivedCommand+0x72>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c84:	b29a      	uxth	r2, r3
 8006c86:	7afb      	ldrb	r3, [r7, #11]
 8006c88:	b299      	uxth	r1, r3
 8006c8a:	89bb      	ldrh	r3, [r7, #12]
 8006c8c:	440b      	add	r3, r1
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	b29b      	uxth	r3, r3
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	e00d      	b.n	8006cbc <SerialAPI_DeleteReceivedCommand+0x8e>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	7afb      	ldrb	r3, [r7, #11]
 8006cac:	b299      	uxth	r1, r3
 8006cae:	89bb      	ldrh	r3, [r7, #12]
 8006cb0:	440b      	add	r3, r1
 8006cb2:	b29b      	uxth	r3, r3
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	813b      	strh	r3, [r7, #8]
									   SBGC_RX_BUFF_TOTAL_SIZE);
	shiftSize = (shiftSize == SBGC_RX_BUFF_TOTAL_SIZE) ? 0 : shiftSize;
 8006cbe:	893b      	ldrh	r3, [r7, #8]
 8006cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cc4:	d001      	beq.n	8006cca <SerialAPI_DeleteReceivedCommand+0x9c>
 8006cc6:	893b      	ldrh	r3, [r7, #8]
 8006cc8:	e000      	b.n	8006ccc <SerialAPI_DeleteReceivedCommand+0x9e>
 8006cca:	2300      	movs	r3, #0
 8006ccc:	813b      	strh	r3, [r7, #8]

	if (buffPointer != gSBGC->_api->rxCommandBuffTail)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	89ba      	ldrh	r2, [r7, #12]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d047      	beq.n	8006d6e <SerialAPI_DeleteReceivedCommand+0x140>
	/* This command isn't first */
	{
		if (((buffPointer + cmdSize) & SBGC_RX_BUFF_SIZE_MASK) == gSBGC->_api->rxCommandBuffHead)
 8006cde:	89ba      	ldrh	r2, [r7, #12]
 8006ce0:	7afb      	ldrb	r3, [r7, #11]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	6852      	ldr	r2, [r2, #4]
 8006cea:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d113      	bne.n	8006d1a <SerialAPI_DeleteReceivedCommand+0xec>
		/* This command is latest */
		{
			gSBGC->_api->rxCommandBuffHead -= cmdSize;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	685b      	ldr	r3, [r3, #4]
 8006cfe:	7afa      	ldrb	r2, [r7, #11]
 8006d00:	1a8a      	subs	r2, r1, r2
 8006d02:	b2d2      	uxtb	r2, r2
 8006d04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			/* Prepare the parser for next reading */
			gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	685a      	ldr	r2, [r3, #4]
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006d14:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			return;
 8006d18:	e03e      	b.n	8006d98 <SerialAPI_DeleteReceivedCommand+0x16a>
		}

		/* This command is between other commands */
		for (ui16 i = 0; i < shiftSize; i++)
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	81fb      	strh	r3, [r7, #14]
 8006d1e:	e016      	b.n	8006d4e <SerialAPI_DeleteReceivedCommand+0x120>
		/* Shifting */
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
					gSBGC->_api->rxCommandBuff[((buffPointer + cmdSize + i) & SBGC_RX_BUFF_SIZE_MASK)];
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d26:	89b9      	ldrh	r1, [r7, #12]
 8006d28:	7afb      	ldrb	r3, [r7, #11]
 8006d2a:	4419      	add	r1, r3
 8006d2c:	89fb      	ldrh	r3, [r7, #14]
 8006d2e:	440b      	add	r3, r1
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	441a      	add	r2, r3
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006d3a:	89b8      	ldrh	r0, [r7, #12]
 8006d3c:	89fb      	ldrh	r3, [r7, #14]
 8006d3e:	4403      	add	r3, r0
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	440b      	add	r3, r1
					gSBGC->_api->rxCommandBuff[((buffPointer + cmdSize + i) & SBGC_RX_BUFF_SIZE_MASK)];
 8006d44:	7812      	ldrb	r2, [r2, #0]
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
 8006d46:	701a      	strb	r2, [r3, #0]
		for (ui16 i = 0; i < shiftSize; i++)
 8006d48:	89fb      	ldrh	r3, [r7, #14]
 8006d4a:	3301      	adds	r3, #1
 8006d4c:	81fb      	strh	r3, [r7, #14]
 8006d4e:	89fa      	ldrh	r2, [r7, #14]
 8006d50:	893b      	ldrh	r3, [r7, #8]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d3e4      	bcc.n	8006d20 <SerialAPI_DeleteReceivedCommand+0xf2>

		/* Shift head after buffer shifting */
		gSBGC->_api->rxCommandBuffHead -= cmdSize;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	7afa      	ldrb	r2, [r7, #11]
 8006d64:	1a8a      	subs	r2, r1, r2
 8006d66:	b2d2      	uxtb	r2, r2
 8006d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006d6c:	e00a      	b.n	8006d84 <SerialAPI_DeleteReceivedCommand+0x156>
	}

	else
	/* This command is first */
		gSBGC->_api->rxCommandBuffTail += cmdSize;  // Shift head pointer
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	7afa      	ldrb	r2, [r7, #11]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Prepare the parser for next reading */
	gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006d90:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006d94:	e000      	b.n	8006d98 <SerialAPI_DeleteReceivedCommand+0x16a>
		return;
 8006d96:	bf00      	nop
}
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr

08006da2 <SerialAPI_DeleteCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	index - command sequence number
 */
static void SerialAPI_DeleteCommand (sbgcGeneral_t *gSBGC, ui8 index)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
 8006daa:	460b      	mov	r3, r1
 8006dac:	70fb      	strb	r3, [r7, #3]
	if ((index >= gSBGC->_api->commandNumber) || (gSBGC->_api->commandNumber == 0))
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	7f1b      	ldrb	r3, [r3, #28]
 8006db4:	78fa      	ldrb	r2, [r7, #3]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d27e      	bcs.n	8006eb8 <SerialAPI_DeleteCommand+0x116>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	7f1b      	ldrb	r3, [r3, #28]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d079      	beq.n	8006eb8 <SerialAPI_DeleteCommand+0x116>
		return;

	if (gSBGC->_api->commandBuff[index]._state != SCState_FORMING)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	6999      	ldr	r1, [r3, #24]
 8006dca:	78fa      	ldrb	r2, [r7, #3]
 8006dcc:	4613      	mov	r3, r2
 8006dce:	00db      	lsls	r3, r3, #3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	7e9b      	ldrb	r3, [r3, #26]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d03c      	beq.n	8006e56 <SerialAPI_DeleteCommand+0xb4>
	/* A command was in runtime */
	{
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006ddc:	2300      	movs	r3, #0
 8006dde:	60fb      	str	r3, [r7, #12]
 8006de0:	e01e      	b.n	8006e20 <SerialAPI_DeleteCommand+0x7e>
			memcpy(&gSBGC->_api->commandBuff[index + i], &gSBGC->_api->commandBuff[index + i + 1], sizeof(serialAPI_Command_t));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	699a      	ldr	r2, [r3, #24]
 8006de8:	78f9      	ldrb	r1, [r7, #3]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	440b      	add	r3, r1
 8006dee:	4619      	mov	r1, r3
 8006df0:	460b      	mov	r3, r1
 8006df2:	00db      	lsls	r3, r3, #3
 8006df4:	440b      	add	r3, r1
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	18d0      	adds	r0, r2, r3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	6999      	ldr	r1, [r3, #24]
 8006e00:	78fa      	ldrb	r2, [r7, #3]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	1c5a      	adds	r2, r3, #1
 8006e08:	4613      	mov	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	2224      	movs	r2, #36	; 0x24
 8006e14:	4619      	mov	r1, r3
 8006e16:	f003 fc71 	bl	800a6fc <memcpy>
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	60fb      	str	r3, [r7, #12]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	7f1b      	ldrb	r3, [r3, #28]
 8006e26:	461a      	mov	r2, r3
 8006e28:	78fb      	ldrb	r3, [r7, #3]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	68fa      	ldr	r2, [r7, #12]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	dbd6      	blt.n	8006de2 <SerialAPI_DeleteCommand+0x40>

		gSBGC->_api->commandNumber--;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	7f1a      	ldrb	r2, [r3, #28]
 8006e3a:	3a01      	subs	r2, #1
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	771a      	strb	r2, [r3, #28]
		gSBGC->_api->commandNumber = constrain_(gSBGC->_api->commandNumber, 0, SBGC_MAX_COMMAND_NUM);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	7f1a      	ldrb	r2, [r3, #28]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2a01      	cmp	r2, #1
 8006e4c:	bf28      	it	cs
 8006e4e:	2201      	movcs	r2, #1
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	771a      	strb	r2, [r3, #28]
 8006e54:	e02b      	b.n	8006eae <SerialAPI_DeleteCommand+0x10c>
	}

	else
	/* A command cannot continue to exist cause a daughter command doesn't fit to the command buffer */
	{
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	60bb      	str	r3, [r7, #8]
 8006e5a:	e01e      	b.n	8006e9a <SerialAPI_DeleteCommand+0xf8>
			memcpy(&gSBGC->_api->commandBuff[index + i], &gSBGC->_api->commandBuff[index + i + 1], sizeof(serialAPI_Command_t));
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	699a      	ldr	r2, [r3, #24]
 8006e62:	78f9      	ldrb	r1, [r7, #3]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	440b      	add	r3, r1
 8006e68:	4619      	mov	r1, r3
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	00db      	lsls	r3, r3, #3
 8006e6e:	440b      	add	r3, r1
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	18d0      	adds	r0, r2, r3
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	6999      	ldr	r1, [r3, #24]
 8006e7a:	78fa      	ldrb	r2, [r7, #3]
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	4413      	add	r3, r2
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	4613      	mov	r3, r2
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	440b      	add	r3, r1
 8006e8c:	2224      	movs	r2, #36	; 0x24
 8006e8e:	4619      	mov	r1, r3
 8006e90:	f003 fc34 	bl	800a6fc <memcpy>
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	3301      	adds	r3, #1
 8006e98:	60bb      	str	r3, [r7, #8]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	7f1b      	ldrb	r3, [r3, #28]
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	78fb      	ldrb	r3, [r7, #3]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	dbd6      	blt.n	8006e5c <SerialAPI_DeleteCommand+0xba>
	}

	serialAPI_CurCmd_ = NULL;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	625a      	str	r2, [r3, #36]	; 0x24
 8006eb6:	e000      	b.n	8006eba <SerialAPI_DeleteCommand+0x118>
		return;
 8006eb8:	bf00      	nop
}
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <SerialAPI_FindCommandByID>:
 *	@param	ID - serialAPI_Command_t.ID
 *
 *	@return Pointer to found serial command
 */
static serialAPI_Command_t *SerialAPI_FindCommandByID (sbgcGeneral_t *gSBGC, ui32 ID)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
	for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	73fb      	strb	r3, [r7, #15]
 8006ece:	e019      	b.n	8006f04 <SerialAPI_FindCommandByID+0x44>
		if (gSBGC->_api->commandBuff[i]._id == ID)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	6999      	ldr	r1, [r3, #24]
 8006ed6:	7bfa      	ldrb	r2, [r7, #15]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	683a      	ldr	r2, [r7, #0]
 8006ee6:	429a      	cmp	r2, r3
 8006ee8:	d109      	bne.n	8006efe <SerialAPI_FindCommandByID+0x3e>
			return &gSBGC->_api->commandBuff[i];
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	6999      	ldr	r1, [r3, #24]
 8006ef0:	7bfa      	ldrb	r2, [r7, #15]
 8006ef2:	4613      	mov	r3, r2
 8006ef4:	00db      	lsls	r3, r3, #3
 8006ef6:	4413      	add	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	440b      	add	r3, r1
 8006efc:	e009      	b.n	8006f12 <SerialAPI_FindCommandByID+0x52>
	for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8006efe:	7bfb      	ldrb	r3, [r7, #15]
 8006f00:	3301      	adds	r3, #1
 8006f02:	73fb      	strb	r3, [r7, #15]
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	7f1b      	ldrb	r3, [r3, #28]
 8006f0a:	7bfa      	ldrb	r2, [r7, #15]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d3df      	bcc.n	8006ed0 <SerialAPI_FindCommandByID+0x10>

	return NULL;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3714      	adds	r7, #20
 8006f16:	46bd      	mov	sp, r7
 8006f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1c:	4770      	bx	lr

08006f1e <SerialAPI_DetermineAdjVarsNumber>:
	 *	@note	Private function
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 */
	static void SerialAPI_DetermineAdjVarsNumber (sbgcGeneral_t *gSBGC)
	{
 8006f1e:	b480      	push	{r7}
 8006f20:	b083      	sub	sp, #12
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	6078      	str	r0, [r7, #4]
		if (gSBGC->_api->baseFirmwareVersion < 2687) gSBGC->_api->adjVarsNumber = 50;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	889b      	ldrh	r3, [r3, #4]
 8006f2c:	f640 227e 	movw	r2, #2686	; 0xa7e
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d803      	bhi.n	8006f3c <SerialAPI_DetermineAdjVarsNumber+0x1e>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	2232      	movs	r2, #50	; 0x32
 8006f3a:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2688) gSBGC->_api->adjVarsNumber = 51;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	889b      	ldrh	r3, [r3, #4]
 8006f42:	f5b3 6f28 	cmp.w	r3, #2688	; 0xa80
 8006f46:	d203      	bcs.n	8006f50 <SerialAPI_DetermineAdjVarsNumber+0x32>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	2233      	movs	r2, #51	; 0x33
 8006f4e:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2689) gSBGC->_api->adjVarsNumber = 57;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	889b      	ldrh	r3, [r3, #4]
 8006f56:	f5b3 6f28 	cmp.w	r3, #2688	; 0xa80
 8006f5a:	d803      	bhi.n	8006f64 <SerialAPI_DetermineAdjVarsNumber+0x46>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	2239      	movs	r2, #57	; 0x39
 8006f62:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2693) gSBGC->_api->adjVarsNumber = 61;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	889b      	ldrh	r3, [r3, #4]
 8006f6a:	f640 2284 	movw	r2, #2692	; 0xa84
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d803      	bhi.n	8006f7a <SerialAPI_DetermineAdjVarsNumber+0x5c>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	223d      	movs	r2, #61	; 0x3d
 8006f78:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2704) gSBGC->_api->adjVarsNumber = 65;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	889b      	ldrh	r3, [r3, #4]
 8006f80:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8006f84:	d203      	bcs.n	8006f8e <SerialAPI_DetermineAdjVarsNumber+0x70>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2241      	movs	r2, #65	; 0x41
 8006f8c:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2720) gSBGC->_api->adjVarsNumber = 66;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	889b      	ldrh	r3, [r3, #4]
 8006f94:	f5b3 6f2a 	cmp.w	r3, #2720	; 0xaa0
 8006f98:	d203      	bcs.n	8006fa2 <SerialAPI_DetermineAdjVarsNumber+0x84>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	2242      	movs	r2, #66	; 0x42
 8006fa0:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2730) gSBGC->_api->adjVarsNumber = 76;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	889b      	ldrh	r3, [r3, #4]
 8006fa8:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d803      	bhi.n	8006fb8 <SerialAPI_DetermineAdjVarsNumber+0x9a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	685b      	ldr	r3, [r3, #4]
 8006fb4:	224c      	movs	r2, #76	; 0x4c
 8006fb6:	741a      	strb	r2, [r3, #16]
	}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <SBGC32_SendCommand>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to completed structure
 *			ready to be transmitted
 */
static void SBGC32_SendCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
	#if (SBGC_USES_BLOCKING_MODE)

		serialCommand->_state = SCState_PROCESSING;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	2203      	movs	r2, #3
 8006fd2:	769a      	strb	r2, [r3, #26]
		serialCommand->timeout = SBGC_DEFAULT_TIMEOUT;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2264      	movs	r2, #100	; 0x64
 8006fd8:	605a      	str	r2, [r3, #4]

		/* Transmit */
		gSBGC->_ll->tx(gSBGC);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	69db      	ldr	r3, [r3, #28]
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	7a1b      	ldrb	r3, [r3, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d103      	bne.n	8006ff4 <SBGC32_SendCommand+0x30>
			serialCommand->_state = SCState_PROCESSED;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	22ff      	movs	r2, #255	; 0xff
 8006ff0:	769a      	strb	r2, [r3, #26]
				gSBGC->_api->txErrorsCount++;
			}
		}

	#endif
}
 8006ff2:	e008      	b.n	8007006 <SBGC32_SendCommand+0x42>
			serialCommand->_state = SCState_ERROR;
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	2206      	movs	r2, #6
 8006ff8:	769a      	strb	r2, [r3, #26]
			gSBGC->_api->txErrorsCount++;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	8a5a      	ldrh	r2, [r3, #18]
 8007000:	3201      	adds	r2, #1
 8007002:	b292      	uxth	r2, r2
 8007004:	825a      	strh	r2, [r3, #18]
}
 8007006:	bf00      	nop
 8007008:	3708      	adds	r7, #8
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}

0800700e <SerialAPI_FilterSerialCommand>:
 *	@param	payloadSize - size of received command
 *
 *	@return	Whether the command will be accepted or not
 */
static sbgcBoolean_t SerialAPI_FilterSerialCommand (serialAPI_Command_t *serialCommand, ui8 payloadSize)
{
 800700e:	b480      	push	{r7}
 8007010:	b085      	sub	sp, #20
 8007012:	af00      	add	r7, sp, #0
 8007014:	6078      	str	r0, [r7, #4]
 8007016:	460b      	mov	r3, r1
 8007018:	70fb      	strb	r3, [r7, #3]
	/* Check the expected payload size */
	if ((serialCommand->_payloadSize != 0) && (serialCommand->_payloadSize != payloadSize))
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	7f1b      	ldrb	r3, [r3, #28]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d006      	beq.n	8007030 <SerialAPI_FilterSerialCommand+0x22>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	7f1b      	ldrb	r3, [r3, #28]
 8007026:	78fa      	ldrb	r2, [r7, #3]
 8007028:	429a      	cmp	r2, r3
 800702a:	d001      	beq.n	8007030 <SerialAPI_FilterSerialCommand+0x22>
		return sbgcFALSE;
 800702c:	2300      	movs	r3, #0
 800702e:	e01c      	b.n	800706a <SerialAPI_FilterSerialCommand+0x5c>

	serialCommand->_payloadSize = payloadSize;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	78fa      	ldrb	r2, [r7, #3]
 8007034:	771a      	strb	r2, [r3, #28]

	switch (serialCommand->_commandID)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	7edb      	ldrb	r3, [r3, #27]
 800703a:	2b43      	cmp	r3, #67	; 0x43
 800703c:	d001      	beq.n	8007042 <SerialAPI_FilterSerialCommand+0x34>
 800703e:	2bff      	cmp	r3, #255	; 0xff
 8007040:	d10f      	bne.n	8007062 <SerialAPI_FilterSerialCommand+0x54>
		case CMD_CONFIRM :
		case CMD_ERROR :
		{
			#if (SBGC_NEED_CONFIRM_CMD)

				if (serialCommand->_pDestination)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	695b      	ldr	r3, [r3, #20]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00d      	beq.n	8007066 <SerialAPI_FilterSerialCommand+0x58>
				{
					sbgcConfirm_t *confirm = (sbgcConfirm_t*)serialCommand->_pDestination;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	695b      	ldr	r3, [r3, #20]
 800704e:	60fb      	str	r3, [r7, #12]

					if (confirm->commandID != serialCommand->_payload[0])
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a1b      	ldr	r3, [r3, #32]
 8007058:	781b      	ldrb	r3, [r3, #0]
 800705a:	429a      	cmp	r2, r3
 800705c:	d003      	beq.n	8007066 <SerialAPI_FilterSerialCommand+0x58>
						return sbgcFALSE;
 800705e:	2300      	movs	r3, #0
 8007060:	e003      	b.n	800706a <SerialAPI_FilterSerialCommand+0x5c>
				break;
			#endif
		}

		default :
			break;
 8007062:	bf00      	nop
 8007064:	e000      	b.n	8007068 <SerialAPI_FilterSerialCommand+0x5a>
				break;
 8007066:	bf00      	nop
	}

	return sbgcTRUE;
 8007068:	2301      	movs	r3, #1
}
 800706a:	4618      	mov	r0, r3
 800706c:	3714      	adds	r7, #20
 800706e:	46bd      	mov	sp, r7
 8007070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007074:	4770      	bx	lr

08007076 <SBGC32_FindCommand>:
 *	@param	*serialCommand - pointer to a structure, into which
 *			the found serial command will be overwritten
 *	@param	cmdID - SBGC32 command identifier
 */
static void SBGC32_FindCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand, serialAPI_CommandID_t cmdID)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b086      	sub	sp, #24
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	4613      	mov	r3, r2
 8007082:	71fb      	strb	r3, [r7, #7]
	serialAPI_CommandID_t cmdID_Temp;

	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	721a      	strb	r2, [r3, #8]
	/* It's always sbgcCOMMAND_OK until in the rxCommandBuff isn't empty */

	#if (SBGC_USES_BLOCKING_MODE)

		sbgcTicks_t launchTime = serialAPI_GetTick();
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	6812      	ldr	r2, [r2, #0]
 8007096:	4610      	mov	r0, r2
 8007098:	4798      	blx	r3
 800709a:	6178      	str	r0, [r7, #20]

		serialCommand->_state = SCState_PROCESSING;
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2203      	movs	r2, #3
 80070a0:	769a      	strb	r2, [r3, #26]
		serialCommand->timeout = SBGC_DEFAULT_TIMEOUT;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2264      	movs	r2, #100	; 0x64
 80070a6:	605a      	str	r2, [r3, #4]
			serialCommand->_state = SCState_PROCESSING;
		}

	#endif

	gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80070b4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Start high-layer parsing */
	while (1)
	{
		if (gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d104      	bne.n	80070d6 <SBGC32_FindCommand+0x60>
		/* Read a new data if the Rx buffer is empty or there wasn't a needed command there */
			gSBGC->_ll->rx(gSBGC);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a1b      	ldr	r3, [r3, #32]
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	4798      	blx	r3

		cmdID_Temp = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP];
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	6852      	ldr	r2, [r2, #4]
 80070e0:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80070e4:	4413      	add	r3, r2
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	74fb      	strb	r3, [r7, #19]

		/* Handling */
		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	7a1b      	ldrb	r3, [r3, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d144      	bne.n	800717c <SBGC32_FindCommand+0x106>
		/* We have some serial command */
		{
			if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 80070f2:	79fb      	ldrb	r3, [r7, #7]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d00c      	beq.n	8007112 <SBGC32_FindCommand+0x9c>
 80070f8:	7cfa      	ldrb	r2, [r7, #19]
 80070fa:	79fb      	ldrb	r3, [r7, #7]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d008      	beq.n	8007112 <SBGC32_FindCommand+0x9c>
				(cmdID_Temp == cmdID) ||
 8007100:	79fb      	ldrb	r3, [r7, #7]
 8007102:	2b43      	cmp	r3, #67	; 0x43
 8007104:	d002      	beq.n	800710c <SBGC32_FindCommand+0x96>
				(((cmdID == CMD_CONFIRM) || (cmdID == CMD_CAN_DEVICE_SCAN)) && (cmdID_Temp == CMD_ERROR)))
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	2b60      	cmp	r3, #96	; 0x60
 800710a:	d11a      	bne.n	8007142 <SBGC32_FindCommand+0xcc>
 800710c:	7cfb      	ldrb	r3, [r7, #19]
 800710e:	2bff      	cmp	r3, #255	; 0xff
 8007110:	d117      	bne.n	8007142 <SBGC32_FindCommand+0xcc>
			/* A correct command has parsed (or a CMD_ERROR have come while we wait a CMD_CONFIRM or a CMD_CAN_DEVICE_SCAN) */
			{
				ui8 payloadSize = SerialAPI_ReadReceivedCommand(gSBGC, serialCommand);
 8007112:	68b9      	ldr	r1, [r7, #8]
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff fd4a 	bl	8006bae <SerialAPI_ReadReceivedCommand>
 800711a:	4603      	mov	r3, r0
 800711c:	74bb      	strb	r3, [r7, #18]

				if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d007      	beq.n	8007134 <SBGC32_FindCommand+0xbe>
					SerialAPI_FilterSerialCommand(serialCommand, payloadSize))
 8007124:	7cbb      	ldrb	r3, [r7, #18]
 8007126:	4619      	mov	r1, r3
 8007128:	68b8      	ldr	r0, [r7, #8]
 800712a:	f7ff ff70 	bl	800700e <SerialAPI_FilterSerialCommand>
 800712e:	4603      	mov	r3, r0
				if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 8007130:	2b00      	cmp	r3, #0
 8007132:	d022      	beq.n	800717a <SBGC32_FindCommand+0x104>
				/* Search command has required advanced searching patterns, or they aren't requested.
				   Or pass next if receiving any command */
				{
					serialCommand->_payloadSize = payloadSize;
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	7cba      	ldrb	r2, [r7, #18]
 8007138:	771a      	strb	r2, [r3, #28]
					serialCommand->_state = SCState_PROCESSED;
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	769a      	strb	r2, [r3, #26]

					/* Command was received fine, exit */
					return;
 8007140:	e052      	b.n	80071e8 <SBGC32_FindCommand+0x172>
				}

				/* Else search command doesn't correspond advanced searching patterns. Go next */
			}

			else if (cmdID_Temp != cmdID)
 8007142:	7cfa      	ldrb	r2, [r7, #19]
 8007144:	79fb      	ldrb	r3, [r7, #7]
 8007146:	429a      	cmp	r2, r3
 8007148:	d018      	beq.n	800717c <SBGC32_FindCommand+0x106>
			/* Has wrong command parsed or  */
				gSBGC->_api->rxCommandBuffCurP += gSBGC->_api->rxCommandBuff[(gSBGC->_api->rxCommandBuffCurP + 1) & SBGC_RX_BUFF_SIZE_MASK] + 2;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007160:	3301      	adds	r3, #1
 8007162:	b2db      	uxtb	r3, r3
 8007164:	440b      	add	r3, r1
 8007166:	781b      	ldrb	r3, [r3, #0]
 8007168:	4413      	add	r3, r2
 800716a:	b2da      	uxtb	r2, r3
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	3202      	adds	r2, #2
 8007172:	b2d2      	uxtb	r2, r2
 8007174:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8007178:	e000      	b.n	800717c <SBGC32_FindCommand+0x106>
			{
 800717a:	bf00      	nop
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK))
			/* There wasn't a needed command anywhere */

		#else

			if (((gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead) &&
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800718c:	429a      	cmp	r2, r3
 800718e:	d193      	bne.n	80070b8 <SBGC32_FindCommand+0x42>
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)) &&
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	7a1b      	ldrb	r3, [r3, #8]
			if (((gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead) &&
 8007194:	2b00      	cmp	r3, #0
 8007196:	d08f      	beq.n	80070b8 <SBGC32_FindCommand+0x42>
				((serialAPI_GetTick() - launchTime) >= serialCommand->timeout))
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	68fa      	ldr	r2, [r7, #12]
 80071a0:	6812      	ldr	r2, [r2, #0]
 80071a2:	6812      	ldr	r2, [r2, #0]
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	4602      	mov	r2, r0
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	1ad2      	subs	r2, r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	685b      	ldr	r3, [r3, #4]
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)) &&
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d380      	bcc.n	80070b8 <SBGC32_FindCommand+0x42>

		#endif

			{
				/* Return rxCommandBuffCurP to the buffer start */
				gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80071c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
							}
						}

					#else

						serialCommand->_state = SCState_ERROR;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	2206      	movs	r2, #6
 80071ca:	769a      	strb	r2, [r3, #26]
						gSBGC->_api->rxErrorsCount++;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	8a9a      	ldrh	r2, [r3, #20]
 80071d2:	3201      	adds	r2, #1
 80071d4:	b292      	uxth	r2, r2
 80071d6:	829a      	strh	r2, [r3, #20]

					#endif

					if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	7a1b      	ldrb	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d102      	bne.n	80071e6 <SBGC32_FindCommand+0x170>
					/* For example a case when a stream clogs serialAPI */
						gSBGC->_lastSerialCommandStatus = serialAPI_RX_NOT_FOUND_ERROR;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2206      	movs	r2, #6
 80071e4:	721a      	strb	r2, [r3, #8]

				#endif

				return;
 80071e6:	bf00      	nop
			}
	}
}
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <SerialAPI_ProcessCommand>:
 *	@param	index - command sequence number
 *
 *	@return	True if command wasn't deleted, false otherwise
 */
static sbgcBoolean_t SerialAPI_ProcessCommand (sbgcGeneral_t *gSBGC, ui8 index)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	460b      	mov	r3, r1
 80071f8:	70fb      	strb	r3, [r7, #3]
	sbgcBoolean_t commandExist = sbgcTRUE;
 80071fa:	2301      	movs	r3, #1
 80071fc:	73fb      	strb	r3, [r7, #15]

	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[index];
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	6999      	ldr	r1, [r3, #24]
 8007204:	78fa      	ldrb	r2, [r7, #3]
 8007206:	4613      	mov	r3, r2
 8007208:	00db      	lsls	r3, r3, #3
 800720a:	4413      	add	r3, r2
 800720c:	009b      	lsls	r3, r3, #2
 800720e:	461a      	mov	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	440a      	add	r2, r1
 8007216:	625a      	str	r2, [r3, #36]	; 0x24

	sbgcBoolean_t thisCommandRx = (serialAPI_CurCmd_->parameters & SCParam_RX) ? sbgcTRUE : sbgcFALSE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	09db      	lsrs	r3, r3, #7
 8007222:	73bb      	strb	r3, [r7, #14]

	if (thisCommandRx)
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00b      	beq.n	8007242 <SerialAPI_ProcessCommand+0x54>
	{
		/* Don't find command yet if the library uses OS functional */
		#if (SBGC_USES_OS_SUPPORT == sbgcOFF)
			SBGC32_FindCommand(gSBGC, serialAPI_CurCmd_, serialAPI_CurCmd_->_commandID);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	7edb      	ldrb	r3, [r3, #27]
 8007238:	461a      	mov	r2, r3
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff ff1b 	bl	8007076 <SBGC32_FindCommand>
 8007240:	e006      	b.n	8007250 <SerialAPI_ProcessCommand+0x62>
		#endif
	}

	else
		SBGC32_SendCommand(gSBGC, serialAPI_CurCmd_);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff feba 	bl	8006fc4 <SBGC32_SendCommand>

	/* After physical operations... */
	switch (serialAPI_CurCmd_->_state)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007256:	7e9b      	ldrb	r3, [r3, #26]
 8007258:	2bff      	cmp	r3, #255	; 0xff
 800725a:	d007      	beq.n	800726c <SerialAPI_ProcessCommand+0x7e>
 800725c:	2bff      	cmp	r3, #255	; 0xff
 800725e:	f300 8089 	bgt.w	8007374 <SerialAPI_ProcessCommand+0x186>
 8007262:	2b04      	cmp	r3, #4
 8007264:	d077      	beq.n	8007356 <SerialAPI_ProcessCommand+0x168>
 8007266:	2b06      	cmp	r3, #6
 8007268:	f040 8084 	bne.w	8007374 <SerialAPI_ProcessCommand+0x186>
		{
			/* Finish the command */
			#if (SBGC_USES_LOGS)

				/* Print log */
				gSBGC->_api->writeLog(gSBGC, serialAPI_CurCmd_);
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	6852      	ldr	r2, [r2, #4]
 8007276:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007278:	4611      	mov	r1, r2
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	4798      	blx	r3

			#endif

			/* It's necessary to save payload pointer cause the next actions may shift it */
			void *payloadTemp = serialAPI_CurCmd_->_payload;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	60bb      	str	r3, [r7, #8]

			if ((serialAPI_CurCmd_->_state == SCState_PROCESSED) || (serialAPI_CurCmd_->parameters & SCParam_EVENT_ANYWAY))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728e:	7e9b      	ldrb	r3, [r3, #26]
 8007290:	2bff      	cmp	r3, #255	; 0xff
 8007292:	d007      	beq.n	80072a4 <SerialAPI_ProcessCommand+0xb6>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d035      	beq.n	8007310 <SerialAPI_ProcessCommand+0x122>
			/* Execute SerialAPI event */
			{
				if (serialAPI_CurCmd_->_serialAPI_Event)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d006      	beq.n	80072be <SerialAPI_ProcessCommand+0xd0>
					((serialAPI_Event_t)serialAPI_CurCmd_->_serialAPI_Event)(gSBGC);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	4798      	blx	r3
 80072bc:	e023      	b.n	8007306 <SerialAPI_ProcessCommand+0x118>

				else if (thisCommandRx && (serialAPI_CurCmd_->_pDestination != NULL))  // and it don't have an event
 80072be:	7bbb      	ldrb	r3, [r7, #14]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d020      	beq.n	8007306 <SerialAPI_ProcessCommand+0x118>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	695b      	ldr	r3, [r3, #20]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01a      	beq.n	8007306 <SerialAPI_ProcessCommand+0x118>
				{
					if (serialAPI_CurCmd_->_destinationSize < serialAPI_CurCmd_->_payloadSize)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d6:	8b1a      	ldrh	r2, [r3, #24]
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072de:	7f1b      	ldrb	r3, [r3, #28]
 80072e0:	b29b      	uxth	r3, r3
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d202      	bcs.n	80072ec <SerialAPI_ProcessCommand+0xfe>
						SerialAPI_FatalErrorHandler();
 80072e6:	f7fa f8cf 	bl	8001488 <SerialAPI_FatalErrorHandler>
 80072ea:	e00c      	b.n	8007306 <SerialAPI_ProcessCommand+0x118>

					else
						gSBGC->_api->readBuff(gSBGC, serialAPI_CurCmd_->_pDestination, serialAPI_CurCmd_->_payloadSize);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6852      	ldr	r2, [r2, #4]
 80072f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072f8:	6951      	ldr	r1, [r2, #20]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	6852      	ldr	r2, [r2, #4]
 80072fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007300:	7f12      	ldrb	r2, [r2, #28]
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	4798      	blx	r3
				}

				/* Return payload pointer to the start */
				serialAPI_CurCmd_->_payload = payloadTemp;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	685b      	ldr	r3, [r3, #4]
 800730a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	621a      	str	r2, [r3, #32]
				/* Command processed fine. Reload it */
					serialAPI_CurCmd_->_state = SCState_RELOAD;

			#endif

			if (thisCommandRx)
 8007310:	7bbb      	ldrb	r3, [r7, #14]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d004      	beq.n	8007320 <SerialAPI_ProcessCommand+0x132>
			/* Delete command ID, size and payload from Rx buffer in any case */
				SerialAPI_DeleteReceivedCommand(gSBGC, payloadTemp);
 8007316:	68b9      	ldr	r1, [r7, #8]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff fc88 	bl	8006c2e <SerialAPI_DeleteReceivedCommand>
 800731e:	e006      	b.n	800732e <SerialAPI_ProcessCommand+0x140>

			else
			/* Delete command payload from Tx buffer and command object from main command buffer */
				SerialAPI_DeleteSentCommand(gSBGC, serialAPI_CurCmd_);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007326:	4619      	mov	r1, r3
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7ff faed 	bl	8006908 <SerialAPI_DeleteSentCommand>
					/* Return here from another thread and finish */
				}

			#endif

			if (serialAPI_CurCmd_->_state != SCState_RELOAD)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	7e9b      	ldrb	r3, [r3, #26]
 8007336:	2b04      	cmp	r3, #4
 8007338:	d007      	beq.n	800734a <SerialAPI_ProcessCommand+0x15c>
			{
				commandExist = sbgcFALSE;
 800733a:	2300      	movs	r3, #0
 800733c:	73fb      	strb	r3, [r7, #15]
				SerialAPI_DeleteCommand(gSBGC, index);
 800733e:	78fb      	ldrb	r3, [r7, #3]
 8007340:	4619      	mov	r1, r3
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff fd2d 	bl	8006da2 <SerialAPI_DeleteCommand>

			else
			/* Reload serial command */
				serialAPI_CurCmd_->_state = SCState_PREPARED;

			break;
 8007348:	e015      	b.n	8007376 <SerialAPI_ProcessCommand+0x188>
				serialAPI_CurCmd_->_state = SCState_PREPARED;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007350:	2202      	movs	r2, #2
 8007352:	769a      	strb	r2, [r3, #26]
			break;
 8007354:	e00f      	b.n	8007376 <SerialAPI_ProcessCommand+0x188>
		case SCState_RELOAD :

			#if (SBGC_USES_LOGS)

				/* Print log */
				gSBGC->_api->writeLog(gSBGC, serialAPI_CurCmd_);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6852      	ldr	r2, [r2, #4]
 8007360:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007362:	4611      	mov	r1, r2
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	4798      	blx	r3

			#endif

			/* Reload serial command */
			serialAPI_CurCmd_->_state = SCState_PREPARED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800736e:	2202      	movs	r2, #2
 8007370:	769a      	strb	r2, [r3, #26]

			break;
 8007372:	e000      	b.n	8007376 <SerialAPI_ProcessCommand+0x188>

		default :
			break;
 8007374:	bf00      	nop
	}

	return commandExist;
 8007376:	7bfb      	ldrb	r3, [r7, #15]
}
 8007378:	4618      	mov	r0, r3
 800737a:	3710      	adds	r7, #16
 800737c:	46bd      	mov	sp, r7
 800737e:	bd80      	pop	{r7, pc}

08007380 <PostSetupLibrary>:
 *			See @ref SBGC32_SetupLibrary function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostSetupLibrary (sbgcGeneral_t *gSBGC)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b088      	sub	sp, #32
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
	/* Read all data manually only */

	if (serialAPI_CurCmd_->_commandID == CMD_BOARD_INFO)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	7edb      	ldrb	r3, [r3, #27]
 8007390:	2b56      	cmp	r3, #86	; 0x56
 8007392:	d14e      	bne.n	8007432 <PostSetupLibrary+0xb2>
	/* Getting board information */
	{
		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	7a1b      	ldrb	r3, [r3, #8]
 8007398:	2b00      	cmp	r3, #0
 800739a:	f040 80af 	bne.w	80074fc <PostSetupLibrary+0x17c>
		{
			ui32 boardFeatures;

			/* Don't care about _payload pointer verge cause there is a first command */
			gSBGC->_api->boardVersion = *(serialAPI_CurCmd_->_payload + BI_BOARD_VER_OFFSET);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a4:	6a1a      	ldr	r2, [r3, #32]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	7812      	ldrb	r2, [r2, #0]
 80073ac:	705a      	strb	r2, [r3, #1]
			gSBGC->_api->fromLE(&gSBGC->_api->firmwareVersion, serialAPI_CurCmd_->_payload + BI_FRW_VER_OFFSET,
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	685b      	ldr	r3, [r3, #4]
 80073b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6852      	ldr	r2, [r2, #4]
 80073b8:	1c90      	adds	r0, r2, #2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6852      	ldr	r2, [r2, #4]
 80073be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073c0:	6a12      	ldr	r2, [r2, #32]
 80073c2:	1c51      	adds	r1, r2, #1
 80073c4:	2202      	movs	r2, #2
 80073c6:	4798      	blx	r3
								sizeof(gSBGC->_api->firmwareVersion));

			boardFeatures = (((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_OFFSET))) & 0x0000FFFF) |
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	3304      	adds	r3, #4
 80073d2:	881b      	ldrh	r3, [r3, #0]
 80073d4:	461a      	mov	r2, r3
					((((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_E_OFFSET))) << 16) & 0xFFFF0000);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	330b      	adds	r3, #11
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	041b      	lsls	r3, r3, #16
			boardFeatures = (((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_OFFSET))) & 0x0000FFFF) |
 80073e4:	4313      	orrs	r3, r2
 80073e6:	61fb      	str	r3, [r7, #28]

			gSBGC->_api->fromLE(&gSBGC->_api->boardFeatures, (ui8*)(&boardFeatures), sizeof(gSBGC->_api->boardFeatures));
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	6852      	ldr	r2, [r2, #4]
 80073f2:	f102 0008 	add.w	r0, r2, #8
 80073f6:	f107 011c 	add.w	r1, r7, #28
 80073fa:	2204      	movs	r2, #4
 80073fc:	4798      	blx	r3

			gSBGC->_api->fromLE(&gSBGC->_api->baseFirmwareVersion, serialAPI_CurCmd_->_payload + BI_BASE_FRW_VER_OFFSET,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6852      	ldr	r2, [r2, #4]
 8007408:	1d10      	adds	r0, r2, #4
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	6852      	ldr	r2, [r2, #4]
 800740e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007410:	6a12      	ldr	r2, [r2, #32]
 8007412:	f102 0110 	add.w	r1, r2, #16
 8007416:	2202      	movs	r2, #2
 8007418:	4798      	blx	r3
								sizeof(gSBGC->_api->baseFirmwareVersion));

			if (gSBGC->_api->baseFirmwareVersion == 0)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	889b      	ldrh	r3, [r3, #4]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d177      	bne.n	8007514 <PostSetupLibrary+0x194>
			/* Some SBGC32 boards have no this data field */
				gSBGC->_api->baseFirmwareVersion = gSBGC->_api->firmwareVersion;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	685a      	ldr	r2, [r3, #4]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	8852      	ldrh	r2, [r2, #2]
 800742e:	809a      	strh	r2, [r3, #4]
 8007430:	e070      	b.n	8007514 <PostSetupLibrary+0x194>

			return;
		}
	}

	else if (serialAPI_CurCmd_->_commandID == CMD_BOARD_INFO_3)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	7edb      	ldrb	r3, [r3, #27]
 800743a:	2b14      	cmp	r3, #20
 800743c:	d15e      	bne.n	80074fc <PostSetupLibrary+0x17c>
	/* Getting total adjustable variables number */
	{
		if (gSBGC->_api->firmwareVersion && (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	885b      	ldrh	r3, [r3, #2]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d059      	beq.n	80074fc <PostSetupLibrary+0x17c>
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7a1b      	ldrb	r3, [r3, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d155      	bne.n	80074fc <PostSetupLibrary+0x17c>
		{
			gSBGC->_api->fromLE(&gSBGC->_api->boardFeatures2, serialAPI_CurCmd_->_payload + BI3_BOARD_FTR_E2_OFFSET,
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	6852      	ldr	r2, [r2, #4]
 800745a:	f102 000c 	add.w	r0, r2, #12
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	6852      	ldr	r2, [r2, #4]
 8007462:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007464:	6a12      	ldr	r2, [r2, #32]
 8007466:	f102 0134 	add.w	r1, r2, #52	; 0x34
 800746a:	2204      	movs	r2, #4
 800746c:	4798      	blx	r3
								sizeof(gSBGC->_api->boardFeatures2));

			#if (SBGC_ADJVAR_MODULE)

				if (gSBGC->_api->baseFirmwareVersion < 2730)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	889b      	ldrh	r3, [r3, #4]
 8007474:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8007478:	4293      	cmp	r3, r2
 800747a:	d803      	bhi.n	8007484 <PostSetupLibrary+0x104>
					SerialAPI_DetermineAdjVarsNumber(gSBGC);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff fd4e 	bl	8006f1e <SerialAPI_DetermineAdjVarsNumber>
 8007482:	e008      	b.n	8007496 <PostSetupLibrary+0x116>

				else
					gSBGC->_api->adjVarsNumber = *(serialAPI_CurCmd_->_payload + BI3_ADJ_VAR_NUM_OFFSET);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	6a1a      	ldr	r2, [r3, #32]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8007494:	741a      	strb	r2, [r3, #16]
			#if (SBGC_NEED_DEBUG)

				char boardVersionStr [5],
					 firmwareVersionStr [8];

				ParserSBGC32_FormatBoardVersion(gSBGC, gSBGC->_api->boardVersion, BUFF_SIZE_(boardVersionStr));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	685b      	ldr	r3, [r3, #4]
 800749a:	7859      	ldrb	r1, [r3, #1]
 800749c:	f107 0214 	add.w	r2, r7, #20
 80074a0:	2305      	movs	r3, #5
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f001 f804 	bl	80084b0 <ParserSBGC32_FormatBoardVersion>
				ParserSBGC32_FormatFirmwareVersion(gSBGC, gSBGC->_api->firmwareVersion, BUFF_SIZE_(firmwareVersionStr));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	8859      	ldrh	r1, [r3, #2]
 80074ae:	f107 020c 	add.w	r2, r7, #12
 80074b2:	2308      	movs	r3, #8
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 f82d 	bl	8008514 <ParserSBGC32_FormatFirmwareVersion>

				DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n");
 80074ba:	4918      	ldr	r1, [pc, #96]	; (800751c <PostSetupLibrary+0x19c>)
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7fe ff0d 	bl	80062dc <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, "The system is ready to go!\n");
 80074c2:	4917      	ldr	r1, [pc, #92]	; (8007520 <PostSetupLibrary+0x1a0>)
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f7fe ff09 	bl	80062dc <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, "Board Version: ");
 80074ca:	4916      	ldr	r1, [pc, #88]	; (8007524 <PostSetupLibrary+0x1a4>)
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f7fe ff05 	bl	80062dc <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, boardVersionStr);
 80074d2:	f107 0314 	add.w	r3, r7, #20
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f7fe feff 	bl	80062dc <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, "\nFirmware Version: ");
 80074de:	4912      	ldr	r1, [pc, #72]	; (8007528 <PostSetupLibrary+0x1a8>)
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f7fe fefb 	bl	80062dc <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, firmwareVersionStr);
 80074e6:	f107 030c 	add.w	r3, r7, #12
 80074ea:	4619      	mov	r1, r3
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7fe fef5 	bl	80062dc <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n\n");
 80074f2:	490e      	ldr	r1, [pc, #56]	; (800752c <PostSetupLibrary+0x1ac>)
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f7fe fef1 	bl	80062dc <DebugSBGC32_PrintMessage>
 80074fa:	e00b      	b.n	8007514 <PostSetupLibrary+0x194>
		}
	}

	#if (SBGC_NEED_DEBUG)

		DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n");
 80074fc:	4907      	ldr	r1, [pc, #28]	; (800751c <PostSetupLibrary+0x19c>)
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7fe feec 	bl	80062dc <DebugSBGC32_PrintMessage>
		DebugSBGC32_PrintMessage(gSBGC, "Communication Error!\n");
 8007504:	490a      	ldr	r1, [pc, #40]	; (8007530 <PostSetupLibrary+0x1b0>)
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7fe fee8 	bl	80062dc <DebugSBGC32_PrintMessage>
		DebugSBGC32_PrintMessage(gSBGC, "********************************\n\n");
 800750c:	4909      	ldr	r1, [pc, #36]	; (8007534 <PostSetupLibrary+0x1b4>)
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7fe fee4 	bl	80062dc <DebugSBGC32_PrintMessage>

	#endif
}
 8007514:	3720      	adds	r7, #32
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	0800de70 	.word	0x0800de70
 8007520:	0800de94 	.word	0x0800de94
 8007524:	0800deb0 	.word	0x0800deb0
 8007528:	0800dec0 	.word	0x0800dec0
 800752c:	0800ded4 	.word	0x0800ded4
 8007530:	0800def8 	.word	0x0800def8
 8007534:	0800df10 	.word	0x0800df10

08007538 <SBGC32_SetupLibrary>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_SetupLibrary (sbgcGeneral_t *gSBGC)
{
 8007538:	b590      	push	{r4, r7, lr}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
	gSBGC->_api = (serialAPI_General_t*)sbgcMalloc(sizeof(serialAPI_General_t));
 8007540:	20ac      	movs	r0, #172	; 0xac
 8007542:	f002 f825 	bl	8009590 <malloc>
 8007546:	4603      	mov	r3, r0
 8007548:	461a      	mov	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	605a      	str	r2, [r3, #4]

	PrivateSerialAPI_LinkLowLayer(gSBGC);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fe feae 	bl	80062b0 <PrivateSerialAPI_LinkLowLayer>
	PrivateSerialAPI_LinkConverter(gSBGC);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f001 f8a7 	bl	80086a8 <PrivateSerialAPI_LinkConverter>

	#if (SBGC_USES_LOGS)
		PrivateSerialAPI_LinkDebug(gSBGC);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f7ff f9c4 	bl	80068e8 <PrivateSerialAPI_LinkDebug>
	#endif

	PrivateSerialAPI_LinkCommandBuild(gSBGC);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7fe fbed 	bl	8005d40 <PrivateSerialAPI_LinkCommandBuild>

	/* Link high-layer service functions */
	gSBGC->_api->saveCmd = SerialAPI_SaveReceivedCommand;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	4a93      	ldr	r2, [pc, #588]	; (80077b8 <SBGC32_SetupLibrary+0x280>)
 800756c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	gSBGC->_api->findCmd = SerialAPI_FindCommandByID;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	685b      	ldr	r3, [r3, #4]
 8007574:	4a91      	ldr	r2, [pc, #580]	; (80077bc <SBGC32_SetupLibrary+0x284>)
 8007576:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	#if (SBGC_USES_BLOCKING_MODE || SBGC_SEND_IMMEDIATELY)
		gSBGC->_api->process = SerialAPI_ProcessCommand;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	4a90      	ldr	r2, [pc, #576]	; (80077c0 <SBGC32_SetupLibrary+0x288>)
 8007580:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		SystemSBGC32_CreateMutex(&gSBGC->_api->mutexSerialAPI);
		SystemSBGC32_GiveMutex(&gSBGC->_api->mutexSerialAPI);

	#endif

	gSBGC->_api->serialAPI_Status = serialAPI_OK;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]

	gSBGC->_api->boardVersion = 0;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	705a      	strb	r2, [r3, #1]
	gSBGC->_api->firmwareVersion = 0;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	805a      	strh	r2, [r3, #2]
	gSBGC->_api->baseFirmwareVersion = 0;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	809a      	strh	r2, [r3, #4]

	#if (SBGC_ADJVAR_MODULE)
		gSBGC->_api->adjVarsNumber = SBGC_ADJ_VARS_MIN_QUANTITY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	2232      	movs	r2, #50	; 0x32
 80075aa:	741a      	strb	r2, [r3, #16]
	#endif

	gSBGC->_api->txErrorsCount = 0;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	825a      	strh	r2, [r3, #18]
	gSBGC->_api->rxErrorsCount = 0;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2200      	movs	r2, #0
 80075ba:	829a      	strh	r2, [r3, #20]

	gSBGC->_api->commandBuff = (serialAPI_Command_t*)sbgcMalloc(sizeof(serialAPI_Command_t) * SBGC_MAX_COMMAND_NUM);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685c      	ldr	r4, [r3, #4]
 80075c0:	2024      	movs	r0, #36	; 0x24
 80075c2:	f001 ffe5 	bl	8009590 <malloc>
 80075c6:	4603      	mov	r3, r0
 80075c8:	61a3      	str	r3, [r4, #24]
	gSBGC->_api->commandNumber = 0;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->commandTotalCount = 0;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	621a      	str	r2, [r3, #32]

	gSBGC->_api->currentSerialCommand = NULL;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	685b      	ldr	r3, [r3, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	625a      	str	r2, [r3, #36]	; 0x24

	#if (SBGC_USES_TOKENS)
		gSBGC->_api->lastCommandToken = 0;
	#endif

	gSBGC->_api->txCommandBuff = (ui8*)sbgcMalloc(SBGC_TX_BUFF_TOTAL_SIZE);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685c      	ldr	r4, [r3, #4]
 80075e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80075ea:	f001 ffd1 	bl	8009590 <malloc>
 80075ee:	4603      	mov	r3, r0
 80075f0:	62a3      	str	r3, [r4, #40]	; 0x28
	gSBGC->_api->txCommandBuffTail = 0;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gSBGC->_api->txCommandBuffHead = 0;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2200      	movs	r2, #0
 8007602:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	gSBGC->_api->rxCommandBuff = (ui8*)sbgcMalloc(SBGC_RX_BUFF_TOTAL_SIZE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685c      	ldr	r4, [r3, #4]
 800760a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800760e:	f001 ffbf 	bl	8009590 <malloc>
 8007612:	4603      	mov	r3, r0
 8007614:	6323      	str	r3, [r4, #48]	; 0x30
	gSBGC->_api->rxCommandBuffTail = 0;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	gSBGC->_api->rxCommandBuffHead = 0;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	gSBGC->_api->rxCommandBuffCurP = 0;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	721a      	strb	r2, [r3, #8]
	gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	725a      	strb	r2, [r3, #9]

	/* Startup delay */
	sbgcTicks_t launchTime = serialAPI_GetTick();
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	6812      	ldr	r2, [r2, #0]
 800764a:	6812      	ldr	r2, [r2, #0]
 800764c:	4610      	mov	r0, r2
 800764e:	4798      	blx	r3
 8007650:	60f8      	str	r0, [r7, #12]

	while ((serialAPI_GetTick() - launchTime) < SBGC_STARTUP_DELAY);
 8007652:	bf00      	nop
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	6812      	ldr	r2, [r2, #0]
 800765e:	6812      	ldr	r2, [r2, #0]
 8007660:	4610      	mov	r0, r2
 8007662:	4798      	blx	r3
 8007664:	4602      	mov	r2, r0
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800766e:	d3f1      	bcc.n	8007654 <SBGC32_SetupLibrary+0x11c>

	/* Getting board information */
	gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO SBGC_DEFAULT_ARGS__);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007676:	2156      	movs	r1, #86	; 0x56
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	4798      	blx	r3
	gSBGC->_api->writeWord(gSBGC, 0);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	2100      	movs	r1, #0
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	4798      	blx	r3
	serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	781a      	ldrb	r2, [r3, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800769a:	b2d2      	uxtb	r2, r2
 800769c:	701a      	strb	r2, [r3, #0]

	#if (SBGC_USES_OS_SUPPORT)
		serialAPI_CurCmd_->priority = SCPrior_SUPREME;
	#endif

	gSBGC->_api->finishWrite(gSBGC);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3

	serialAPI_Unlock()
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
		sbgcBlockQueue(SBGC32_TransmitAllCommands(gSBGC));
	#endif

	serialAPI_LockRead();
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	781b      	ldrb	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <SBGC32_SetupLibrary+0x188>
 80076bc:	230a      	movs	r3, #10
 80076be:	e077      	b.n	80077b0 <SBGC32_SetupLibrary+0x278>
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	685b      	ldr	r3, [r3, #4]
 80076c4:	2201      	movs	r2, #1
 80076c6:	701a      	strb	r2, [r3, #0]

	gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO SBGC_DEFAULT_ARGS__);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076ce:	2156      	movs	r1, #86	; 0x56
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, PostSetupLibrary, gSBGC, SBGC_MAX_PAYLOAD_SIZE);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80076dc:	23ff      	movs	r3, #255	; 0xff
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	4938      	ldr	r1, [pc, #224]	; (80077c4 <SBGC32_SetupLibrary+0x28c>)
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	47a0      	blx	r4
	serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ec:	781a      	ldrb	r2, [r3, #0]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	701a      	strb	r2, [r3, #0]

	#if (SBGC_USES_OS_SUPPORT)
		serialAPI_CurCmd_->priority = SCPrior_SUPREME;
	#endif

	gSBGC->_api->finishRead(gSBGC);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	4798      	blx	r3

	serialAPI_Unlock()
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
		sbgcBlockQueue(SBGC32_ReceiveAllCommands(gSBGC));
	#endif

	if (gSBGC->_lastCommandStatus == sbgcCOMMAND_OK)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	7a5b      	ldrb	r3, [r3, #9]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d149      	bne.n	80077ac <SBGC32_SetupLibrary+0x274>
	/* Getting the second features part and total adjustable variables number */
	{
		gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO_3 SBGC_DEFAULT_ARGS__);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800771e:	2114      	movs	r1, #20
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	4798      	blx	r3
		serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	685b      	ldr	r3, [r3, #4]
 8007728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800772a:	781a      	ldrb	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007736:	b2d2      	uxtb	r2, r2
 8007738:	701a      	strb	r2, [r3, #0]

		#if (SBGC_USES_OS_SUPPORT)
			serialAPI_CurCmd_->priority = SCPrior_SUPREME;
		#endif

		gSBGC->_api->finishWrite(gSBGC);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	4798      	blx	r3

		serialAPI_Unlock()
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]

		#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
			sbgcBlockQueue(SBGC32_TransmitAllCommands(gSBGC));
		#endif

		serialAPI_LockRead();
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <SBGC32_SetupLibrary+0x224>
 8007758:	230a      	movs	r3, #10
 800775a:	e029      	b.n	80077b0 <SBGC32_SetupLibrary+0x278>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	2201      	movs	r2, #1
 8007762:	701a      	strb	r2, [r3, #0]

		gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO_3 SBGC_DEFAULT_ARGS__);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800776a:	2114      	movs	r1, #20
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	4798      	blx	r3
		gSBGC->_api->assignEvent(gSBGC, PostSetupLibrary, gSBGC, SBGC_MAX_PAYLOAD_SIZE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8007778:	23ff      	movs	r3, #255	; 0xff
 800777a:	687a      	ldr	r2, [r7, #4]
 800777c:	4911      	ldr	r1, [pc, #68]	; (80077c4 <SBGC32_SetupLibrary+0x28c>)
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	47a0      	blx	r4
		serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	781a      	ldrb	r2, [r3, #0]
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	701a      	strb	r2, [r3, #0]

		#if (SBGC_USES_OS_SUPPORT)
			serialAPI_CurCmd_->priority = SCPrior_SUPREME;
		#endif

		gSBGC->_api->finishRead(gSBGC);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	4798      	blx	r3

		serialAPI_Unlock()
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	2200      	movs	r2, #0
 80077aa:	701a      	strb	r2, [r3, #0]
		#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
			sbgcBlockQueue(SBGC32_ReceiveAllCommands(gSBGC));
		#endif
	}

	return gSBGC->_lastCommandStatus;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	7a5b      	ldrb	r3, [r3, #9]
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd90      	pop	{r4, r7, pc}
 80077b8:	08006a33 	.word	0x08006a33
 80077bc:	08006ec1 	.word	0x08006ec1
 80077c0:	080071ef 	.word	0x080071ef
 80077c4:	08007381 	.word	0x08007381

080077c8 <SerialAPI_LinkDriver>:
 *			current time in milliseconds
 */
void SerialAPI_LinkDriver (sbgcGeneral_t *gSBGC, sbgcTx_t tx, sbgcRx_t rx,
						   sbgcAvailableBytes_t availableBytes, sbgcTxDebug_t txDebug,
						   sbgcGetTime_t getTime)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	60f8      	str	r0, [r7, #12]
 80077d0:	60b9      	str	r1, [r7, #8]
 80077d2:	607a      	str	r2, [r7, #4]
 80077d4:	603b      	str	r3, [r7, #0]
	gSBGC->_ll = (sbgcLowLayer_t*)sbgcMalloc(sizeof(sbgcLowLayer_t));
 80077d6:	2024      	movs	r0, #36	; 0x24
 80077d8:	f001 feda 	bl	8009590 <malloc>
 80077dc:	4603      	mov	r3, r0
 80077de:	461a      	mov	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	601a      	str	r2, [r3, #0]

	gSBGC->_ll->drvTx = tx;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	609a      	str	r2, [r3, #8]
	gSBGC->_ll->drvRx = rx;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	60da      	str	r2, [r3, #12]
	gSBGC->_ll->drvAvailableBytes = availableBytes;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	611a      	str	r2, [r3, #16]

	#if (SBGC_NEED_DEBUG)
		gSBGC->_ll->drvTxDebug = txDebug;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	615a      	str	r2, [r3, #20]
	#else
		gSBGC->_ll->drvTxDebug = NULL;
	#endif

	gSBGC->_ll->drvGetTime = getTime;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	605a      	str	r2, [r3, #4]

	#if (SBGC_USES_CUSTOM_SPRINTF)
		SerialAPI_LinkSprintf(gSBGC);
	#else
		gSBGC->_ll->debugSprintf = sprintf;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a02      	ldr	r2, [pc, #8]	; (800781c <SerialAPI_LinkDriver+0x54>)
 8007812:	619a      	str	r2, [r3, #24]
	#endif
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	0800a4f9 	.word	0x0800a4f9

08007820 <ParserSBGC32_ConvertTypeToSize>:
 */
/**	@addtogroup	Data_Parse
 *	@{
 */
static ui8 ParserSBGC32_ConvertTypeToSize (sbgcVarType_t varType)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	71fb      	strb	r3, [r7, #7]
	ui8 res = 0;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]

	switch (varType & CLEAN_TYPE_MASK)
 800782e:	79fb      	ldrb	r3, [r7, #7]
 8007830:	f003 0307 	and.w	r3, r3, #7
 8007834:	2b81      	cmp	r3, #129	; 0x81
 8007836:	d00e      	beq.n	8007856 <ParserSBGC32_ConvertTypeToSize+0x36>
 8007838:	2b81      	cmp	r3, #129	; 0x81
 800783a:	dc15      	bgt.n	8007868 <ParserSBGC32_ConvertTypeToSize+0x48>
 800783c:	2b07      	cmp	r3, #7
 800783e:	dc13      	bgt.n	8007868 <ParserSBGC32_ConvertTypeToSize+0x48>
 8007840:	2b05      	cmp	r3, #5
 8007842:	da0e      	bge.n	8007862 <ParserSBGC32_ConvertTypeToSize+0x42>
 8007844:	2b02      	cmp	r3, #2
 8007846:	dc02      	bgt.n	800784e <ParserSBGC32_ConvertTypeToSize+0x2e>
 8007848:	2b00      	cmp	r3, #0
 800784a:	dc04      	bgt.n	8007856 <ParserSBGC32_ConvertTypeToSize+0x36>
		case sbgcFLOAT :
			res = 4;
			break;

		default :
			break;
 800784c:	e00c      	b.n	8007868 <ParserSBGC32_ConvertTypeToSize+0x48>
 800784e:	3b03      	subs	r3, #3
	switch (varType & CLEAN_TYPE_MASK)
 8007850:	2b01      	cmp	r3, #1
 8007852:	d809      	bhi.n	8007868 <ParserSBGC32_ConvertTypeToSize+0x48>
 8007854:	e002      	b.n	800785c <ParserSBGC32_ConvertTypeToSize+0x3c>
			res = 1;
 8007856:	2301      	movs	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]
			break;
 800785a:	e006      	b.n	800786a <ParserSBGC32_ConvertTypeToSize+0x4a>
			res = 2;
 800785c:	2302      	movs	r3, #2
 800785e:	73fb      	strb	r3, [r7, #15]
			break;
 8007860:	e003      	b.n	800786a <ParserSBGC32_ConvertTypeToSize+0x4a>
			res = 4;
 8007862:	2304      	movs	r3, #4
 8007864:	73fb      	strb	r3, [r7, #15]
			break;
 8007866:	e000      	b.n	800786a <ParserSBGC32_ConvertTypeToSize+0x4a>
			break;
 8007868:	bf00      	nop
	}

	return res;
 800786a:	7bfb      	ldrb	r3, [r7, #15]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <ParserSBGC32_ConvertCommandID_ToString>:
 *	@param	size - buffer size
 *
 *	@return	Length of a writable string
 */
ui8 ParserSBGC32_ConvertCommandID_ToString (serialAPI_Command_t *serialCommand, char *str, ui8 size)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	4613      	mov	r3, r2
 8007884:	71fb      	strb	r3, [r7, #7]
	if (size < SBGC_CMD_ID_NAME_MAX_LEN) return 0;
 8007886:	79fb      	ldrb	r3, [r7, #7]
 8007888:	2b1f      	cmp	r3, #31
 800788a:	d802      	bhi.n	8007892 <ParserSBGC32_ConvertCommandID_ToString+0x1a>
 800788c:	2300      	movs	r3, #0
 800788e:	f000 bd9c 	b.w	80083ca <ParserSBGC32_ConvertCommandID_ToString+0xb52>

	switch (serialCommand->_commandID)
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	7edb      	ldrb	r3, [r3, #27]
 8007896:	3b01      	subs	r3, #1
 8007898:	2bfe      	cmp	r3, #254	; 0xfe
 800789a:	f200 8591 	bhi.w	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
 800789e:	a201      	add	r2, pc, #4	; (adr r2, 80078a4 <ParserSBGC32_ConvertCommandID_ToString+0x2c>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080083c1 	.word	0x080083c1
 80078a8:	080083c1 	.word	0x080083c1
 80078ac:	080083c1 	.word	0x080083c1
 80078b0:	080083c1 	.word	0x080083c1
 80078b4:	080083c1 	.word	0x080083c1
 80078b8:	080083c1 	.word	0x080083c1
 80078bc:	080083c1 	.word	0x080083c1
 80078c0:	080083c1 	.word	0x080083c1
 80078c4:	080083c1 	.word	0x080083c1
 80078c8:	080083c1 	.word	0x080083c1
 80078cc:	080083c1 	.word	0x080083c1
 80078d0:	080083c1 	.word	0x080083c1
 80078d4:	080083c1 	.word	0x080083c1
 80078d8:	080083c1 	.word	0x080083c1
 80078dc:	080083c1 	.word	0x080083c1
 80078e0:	080083c1 	.word	0x080083c1
 80078e4:	080083c1 	.word	0x080083c1
 80078e8:	080083c1 	.word	0x080083c1
 80078ec:	080083c1 	.word	0x080083c1
 80078f0:	08007ca1 	.word	0x08007ca1
 80078f4:	08007cad 	.word	0x08007cad
 80078f8:	08007cb9 	.word	0x08007cb9
 80078fc:	08007cc5 	.word	0x08007cc5
 8007900:	08007cd1 	.word	0x08007cd1
 8007904:	08007cdd 	.word	0x08007cdd
 8007908:	08007ce9 	.word	0x08007ce9
 800790c:	08007cf5 	.word	0x08007cf5
 8007910:	08007d01 	.word	0x08007d01
 8007914:	08007d0d 	.word	0x08007d0d
 8007918:	08007d19 	.word	0x08007d19
 800791c:	08007d25 	.word	0x08007d25
 8007920:	08007d31 	.word	0x08007d31
 8007924:	08007d3d 	.word	0x08007d3d
 8007928:	08007d49 	.word	0x08007d49
 800792c:	08007d55 	.word	0x08007d55
 8007930:	08007d61 	.word	0x08007d61
 8007934:	080083c1 	.word	0x080083c1
 8007938:	080083c1 	.word	0x080083c1
 800793c:	08007d6d 	.word	0x08007d6d
 8007940:	08007d79 	.word	0x08007d79
 8007944:	08007d85 	.word	0x08007d85
 8007948:	08007d91 	.word	0x08007d91
 800794c:	08007d9d 	.word	0x08007d9d
 8007950:	08007da9 	.word	0x08007da9
 8007954:	08007db5 	.word	0x08007db5
 8007958:	08007dc1 	.word	0x08007dc1
 800795c:	08007dcd 	.word	0x08007dcd
 8007960:	08007dd9 	.word	0x08007dd9
 8007964:	08007de5 	.word	0x08007de5
 8007968:	08007df1 	.word	0x08007df1
 800796c:	08007dfd 	.word	0x08007dfd
 8007970:	08007e09 	.word	0x08007e09
 8007974:	08007e15 	.word	0x08007e15
 8007978:	08007e21 	.word	0x08007e21
 800797c:	08007e2d 	.word	0x08007e2d
 8007980:	08007e39 	.word	0x08007e39
 8007984:	08007e45 	.word	0x08007e45
 8007988:	08007e51 	.word	0x08007e51
 800798c:	08007e5d 	.word	0x08007e5d
 8007990:	080083c1 	.word	0x080083c1
 8007994:	08007e69 	.word	0x08007e69
 8007998:	08007e75 	.word	0x08007e75
 800799c:	08007e81 	.word	0x08007e81
 80079a0:	08007e8d 	.word	0x08007e8d
 80079a4:	08007e99 	.word	0x08007e99
 80079a8:	08007ea5 	.word	0x08007ea5
 80079ac:	08007eb1 	.word	0x08007eb1
 80079b0:	08007ed3 	.word	0x08007ed3
 80079b4:	08007edf 	.word	0x08007edf
 80079b8:	08007eeb 	.word	0x08007eeb
 80079bc:	08007ef7 	.word	0x08007ef7
 80079c0:	08007f03 	.word	0x08007f03
 80079c4:	08007f0f 	.word	0x08007f0f
 80079c8:	08007f1b 	.word	0x08007f1b
 80079cc:	08007f27 	.word	0x08007f27
 80079d0:	080083c1 	.word	0x080083c1
 80079d4:	08007f33 	.word	0x08007f33
 80079d8:	080083c1 	.word	0x080083c1
 80079dc:	0800801d 	.word	0x0800801d
 80079e0:	08008029 	.word	0x08008029
 80079e4:	080083c1 	.word	0x080083c1
 80079e8:	08008035 	.word	0x08008035
 80079ec:	080083c1 	.word	0x080083c1
 80079f0:	08008041 	.word	0x08008041
 80079f4:	0800804d 	.word	0x0800804d
 80079f8:	08008059 	.word	0x08008059
 80079fc:	08008065 	.word	0x08008065
 8007a00:	08008071 	.word	0x08008071
 8007a04:	0800807d 	.word	0x0800807d
 8007a08:	08008089 	.word	0x08008089
 8007a0c:	08008095 	.word	0x08008095
 8007a10:	080080a1 	.word	0x080080a1
 8007a14:	080080ad 	.word	0x080080ad
 8007a18:	080080b9 	.word	0x080080b9
 8007a1c:	080080c5 	.word	0x080080c5
 8007a20:	080080d1 	.word	0x080080d1
 8007a24:	080080dd 	.word	0x080080dd
 8007a28:	080080e9 	.word	0x080080e9
 8007a2c:	080080f5 	.word	0x080080f5
 8007a30:	08008101 	.word	0x08008101
 8007a34:	0800810d 	.word	0x0800810d
 8007a38:	08008119 	.word	0x08008119
 8007a3c:	08008125 	.word	0x08008125
 8007a40:	08008131 	.word	0x08008131
 8007a44:	0800813d 	.word	0x0800813d
 8007a48:	08008149 	.word	0x08008149
 8007a4c:	08008155 	.word	0x08008155
 8007a50:	08008161 	.word	0x08008161
 8007a54:	0800816d 	.word	0x0800816d
 8007a58:	08008179 	.word	0x08008179
 8007a5c:	08008185 	.word	0x08008185
 8007a60:	08008191 	.word	0x08008191
 8007a64:	0800819d 	.word	0x0800819d
 8007a68:	080081a9 	.word	0x080081a9
 8007a6c:	080081b5 	.word	0x080081b5
 8007a70:	080081c1 	.word	0x080081c1
 8007a74:	080081cd 	.word	0x080081cd
 8007a78:	080081d9 	.word	0x080081d9
 8007a7c:	080081e5 	.word	0x080081e5
 8007a80:	080081f1 	.word	0x080081f1
 8007a84:	080081fd 	.word	0x080081fd
 8007a88:	080083c1 	.word	0x080083c1
 8007a8c:	08008209 	.word	0x08008209
 8007a90:	080083c1 	.word	0x080083c1
 8007a94:	080083c1 	.word	0x080083c1
 8007a98:	080083c1 	.word	0x080083c1
 8007a9c:	08008215 	.word	0x08008215
 8007aa0:	08008221 	.word	0x08008221
 8007aa4:	0800822d 	.word	0x0800822d
 8007aa8:	08008239 	.word	0x08008239
 8007aac:	08008245 	.word	0x08008245
 8007ab0:	08008251 	.word	0x08008251
 8007ab4:	080083c1 	.word	0x080083c1
 8007ab8:	080083c1 	.word	0x080083c1
 8007abc:	080083c1 	.word	0x080083c1
 8007ac0:	080083c1 	.word	0x080083c1
 8007ac4:	080083c1 	.word	0x080083c1
 8007ac8:	080083c1 	.word	0x080083c1
 8007acc:	080083c1 	.word	0x080083c1
 8007ad0:	0800825d 	.word	0x0800825d
 8007ad4:	08008269 	.word	0x08008269
 8007ad8:	08008275 	.word	0x08008275
 8007adc:	080083c1 	.word	0x080083c1
 8007ae0:	080083c1 	.word	0x080083c1
 8007ae4:	080083c1 	.word	0x080083c1
 8007ae8:	080083c1 	.word	0x080083c1
 8007aec:	080083c1 	.word	0x080083c1
 8007af0:	080083c1 	.word	0x080083c1
 8007af4:	080083c1 	.word	0x080083c1
 8007af8:	08008281 	.word	0x08008281
 8007afc:	0800828d 	.word	0x0800828d
 8007b00:	080083c1 	.word	0x080083c1
 8007b04:	080083c1 	.word	0x080083c1
 8007b08:	080083c1 	.word	0x080083c1
 8007b0c:	080083c1 	.word	0x080083c1
 8007b10:	080083c1 	.word	0x080083c1
 8007b14:	080083c1 	.word	0x080083c1
 8007b18:	080083c1 	.word	0x080083c1
 8007b1c:	080083c1 	.word	0x080083c1
 8007b20:	080083c1 	.word	0x080083c1
 8007b24:	080083c1 	.word	0x080083c1
 8007b28:	080083c1 	.word	0x080083c1
 8007b2c:	080083c1 	.word	0x080083c1
 8007b30:	080083c1 	.word	0x080083c1
 8007b34:	080083c1 	.word	0x080083c1
 8007b38:	080083c1 	.word	0x080083c1
 8007b3c:	080083c1 	.word	0x080083c1
 8007b40:	080083c1 	.word	0x080083c1
 8007b44:	080083c1 	.word	0x080083c1
 8007b48:	080083c1 	.word	0x080083c1
 8007b4c:	080083c1 	.word	0x080083c1
 8007b50:	080083c1 	.word	0x080083c1
 8007b54:	080083c1 	.word	0x080083c1
 8007b58:	080083c1 	.word	0x080083c1
 8007b5c:	080083c1 	.word	0x080083c1
 8007b60:	080083c1 	.word	0x080083c1
 8007b64:	080083c1 	.word	0x080083c1
 8007b68:	080083c1 	.word	0x080083c1
 8007b6c:	080083c1 	.word	0x080083c1
 8007b70:	080083c1 	.word	0x080083c1
 8007b74:	080083c1 	.word	0x080083c1
 8007b78:	080083c1 	.word	0x080083c1
 8007b7c:	080083c1 	.word	0x080083c1
 8007b80:	080083c1 	.word	0x080083c1
 8007b84:	080083c1 	.word	0x080083c1
 8007b88:	080083c1 	.word	0x080083c1
 8007b8c:	080083c1 	.word	0x080083c1
 8007b90:	080083c1 	.word	0x080083c1
 8007b94:	080083c1 	.word	0x080083c1
 8007b98:	080083c1 	.word	0x080083c1
 8007b9c:	080083c1 	.word	0x080083c1
 8007ba0:	080083c1 	.word	0x080083c1
 8007ba4:	080083c1 	.word	0x080083c1
 8007ba8:	080083c1 	.word	0x080083c1
 8007bac:	080083c1 	.word	0x080083c1
 8007bb0:	080083c1 	.word	0x080083c1
 8007bb4:	080083c1 	.word	0x080083c1
 8007bb8:	080083c1 	.word	0x080083c1
 8007bbc:	080083c1 	.word	0x080083c1
 8007bc0:	080083c1 	.word	0x080083c1
 8007bc4:	080083c1 	.word	0x080083c1
 8007bc8:	080083c1 	.word	0x080083c1
 8007bcc:	080083c1 	.word	0x080083c1
 8007bd0:	080083c1 	.word	0x080083c1
 8007bd4:	080083c1 	.word	0x080083c1
 8007bd8:	080083c1 	.word	0x080083c1
 8007bdc:	080083c1 	.word	0x080083c1
 8007be0:	080083c1 	.word	0x080083c1
 8007be4:	080083c1 	.word	0x080083c1
 8007be8:	080083c1 	.word	0x080083c1
 8007bec:	080083c1 	.word	0x080083c1
 8007bf0:	080083c1 	.word	0x080083c1
 8007bf4:	080083c1 	.word	0x080083c1
 8007bf8:	080083c1 	.word	0x080083c1
 8007bfc:	080083c1 	.word	0x080083c1
 8007c00:	080083c1 	.word	0x080083c1
 8007c04:	080083c1 	.word	0x080083c1
 8007c08:	080083c1 	.word	0x080083c1
 8007c0c:	080083c1 	.word	0x080083c1
 8007c10:	080083c1 	.word	0x080083c1
 8007c14:	080083c1 	.word	0x080083c1
 8007c18:	080083c1 	.word	0x080083c1
 8007c1c:	080083c1 	.word	0x080083c1
 8007c20:	080083c1 	.word	0x080083c1
 8007c24:	080083c1 	.word	0x080083c1
 8007c28:	080083c1 	.word	0x080083c1
 8007c2c:	080083c1 	.word	0x080083c1
 8007c30:	080083c1 	.word	0x080083c1
 8007c34:	080083c1 	.word	0x080083c1
 8007c38:	080083c1 	.word	0x080083c1
 8007c3c:	080083c1 	.word	0x080083c1
 8007c40:	080083c1 	.word	0x080083c1
 8007c44:	080083c1 	.word	0x080083c1
 8007c48:	080083c1 	.word	0x080083c1
 8007c4c:	080083c1 	.word	0x080083c1
 8007c50:	080083c1 	.word	0x080083c1
 8007c54:	080083c1 	.word	0x080083c1
 8007c58:	080083c1 	.word	0x080083c1
 8007c5c:	080083c1 	.word	0x080083c1
 8007c60:	080083c1 	.word	0x080083c1
 8007c64:	080083c1 	.word	0x080083c1
 8007c68:	080083c1 	.word	0x080083c1
 8007c6c:	080083c1 	.word	0x080083c1
 8007c70:	080083c1 	.word	0x080083c1
 8007c74:	080083c1 	.word	0x080083c1
 8007c78:	080083c1 	.word	0x080083c1
 8007c7c:	080083c1 	.word	0x080083c1
 8007c80:	080083c1 	.word	0x080083c1
 8007c84:	08008299 	.word	0x08008299
 8007c88:	080082a5 	.word	0x080082a5
 8007c8c:	080082b1 	.word	0x080082b1
 8007c90:	080083c1 	.word	0x080083c1
 8007c94:	0800839d 	.word	0x0800839d
 8007c98:	080083a9 	.word	0x080083a9
 8007c9c:	080083b5 	.word	0x080083b5
	{
		case sbgcANY_SERIAL_COMMAND :				break;

		case CMD_BOARD_INFO_3 :						memcpy(str, TEXT_LENGTH_("CMD_BOARD_INFO_3")); break;
 8007ca0:	2210      	movs	r2, #16
 8007ca2:	49a7      	ldr	r1, [pc, #668]	; (8007f40 <ParserSBGC32_ConvertCommandID_ToString+0x6c8>)
 8007ca4:	68b8      	ldr	r0, [r7, #8]
 8007ca6:	f002 fd29 	bl	800a6fc <memcpy>
 8007caa:	e389      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_PARAMS_3 :					memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS_3")); break;
 8007cac:	2211      	movs	r2, #17
 8007cae:	49a5      	ldr	r1, [pc, #660]	; (8007f44 <ParserSBGC32_ConvertCommandID_ToString+0x6cc>)
 8007cb0:	68b8      	ldr	r0, [r7, #8]
 8007cb2:	f002 fd23 	bl	800a6fc <memcpy>
 8007cb6:	e383      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_PARAMS_3 :					memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_3")); break;
 8007cb8:	2212      	movs	r2, #18
 8007cba:	49a3      	ldr	r1, [pc, #652]	; (8007f48 <ParserSBGC32_ConvertCommandID_ToString+0x6d0>)
 8007cbc:	68b8      	ldr	r0, [r7, #8]
 8007cbe:	f002 fd1d 	bl	800a6fc <memcpy>
 8007cc2:	e37d      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_REALTIME_DATA_3 :					memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA_3")); break;
 8007cc4:	2213      	movs	r2, #19
 8007cc6:	49a1      	ldr	r1, [pc, #644]	; (8007f4c <ParserSBGC32_ConvertCommandID_ToString+0x6d4>)
 8007cc8:	68b8      	ldr	r0, [r7, #8]
 8007cca:	f002 fd17 	bl	800a6fc <memcpy>
 8007cce:	e377      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SELECT_IMU_3 :						memcpy(str, TEXT_LENGTH_("CMD_SELECT_IMU_3")); break;
 8007cd0:	2210      	movs	r2, #16
 8007cd2:	499f      	ldr	r1, [pc, #636]	; (8007f50 <ParserSBGC32_ConvertCommandID_ToString+0x6d8>)
 8007cd4:	68b8      	ldr	r0, [r7, #8]
 8007cd6:	f002 fd11 	bl	800a6fc <memcpy>
 8007cda:	e371      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_REALTIME_DATA_4 :					memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA_4")); break;
 8007cdc:	2213      	movs	r2, #19
 8007cde:	499d      	ldr	r1, [pc, #628]	; (8007f54 <ParserSBGC32_ConvertCommandID_ToString+0x6dc>)
 8007ce0:	68b8      	ldr	r0, [r7, #8]
 8007ce2:	f002 fd0b 	bl	800a6fc <memcpy>
 8007ce6:	e36b      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_ENCODERS_CALIB_OFFSET_4 :			memcpy(str, TEXT_LENGTH_("CMD_ENCODERS_CALIB_OFFSET_4")); break;
 8007ce8:	221b      	movs	r2, #27
 8007cea:	499b      	ldr	r1, [pc, #620]	; (8007f58 <ParserSBGC32_ConvertCommandID_ToString+0x6e0>)
 8007cec:	68b8      	ldr	r0, [r7, #8]
 8007cee:	f002 fd05 	bl	800a6fc <memcpy>
 8007cf2:	e365      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_ENCODERS_CALIB_FLD_OFFSET_4 :		memcpy(str, TEXT_LENGTH_("CMD_ENCODERS_CALIB_FLD_OFFSET_4")); break;
 8007cf4:	221f      	movs	r2, #31
 8007cf6:	4999      	ldr	r1, [pc, #612]	; (8007f5c <ParserSBGC32_ConvertCommandID_ToString+0x6e4>)
 8007cf8:	68b8      	ldr	r0, [r7, #8]
 8007cfa:	f002 fcff 	bl	800a6fc <memcpy>
 8007cfe:	e35f      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_PROFILE_NAMES :				memcpy(str, TEXT_LENGTH_("CMD_READ_PROFILE_NAMES")); break;
 8007d00:	2216      	movs	r2, #22
 8007d02:	4997      	ldr	r1, [pc, #604]	; (8007f60 <ParserSBGC32_ConvertCommandID_ToString+0x6e8>)
 8007d04:	68b8      	ldr	r0, [r7, #8]
 8007d06:	f002 fcf9 	bl	800a6fc <memcpy>
 8007d0a:	e359      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_PROFILE_NAMES :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_PROFILE_NAMES")); break;
 8007d0c:	2217      	movs	r2, #23
 8007d0e:	4995      	ldr	r1, [pc, #596]	; (8007f64 <ParserSBGC32_ConvertCommandID_ToString+0x6ec>)
 8007d10:	68b8      	ldr	r0, [r7, #8]
 8007d12:	f002 fcf3 	bl	800a6fc <memcpy>
 8007d16:	e353      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_QUEUE_PARAMS_INFO_3 :				memcpy(str, TEXT_LENGTH_("CMD_QUEUE_PARAMS_INFO_3")); break;
 8007d18:	2217      	movs	r2, #23
 8007d1a:	4993      	ldr	r1, [pc, #588]	; (8007f68 <ParserSBGC32_ConvertCommandID_ToString+0x6f0>)
 8007d1c:	68b8      	ldr	r0, [r7, #8]
 8007d1e:	f002 fced 	bl	800a6fc <memcpy>
 8007d22:	e34d      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SET_ADJ_VARS_VAL :					memcpy(str, TEXT_LENGTH_("CMD_SET_ADJ_VARS_VAL")); break;
 8007d24:	2214      	movs	r2, #20
 8007d26:	4991      	ldr	r1, [pc, #580]	; (8007f6c <ParserSBGC32_ConvertCommandID_ToString+0x6f4>)
 8007d28:	68b8      	ldr	r0, [r7, #8]
 8007d2a:	f002 fce7 	bl	800a6fc <memcpy>
 8007d2e:	e347      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SAVE_PARAMS_3 :					memcpy(str, TEXT_LENGTH_("CMD_SAVE_PARAMS_3")); break;
 8007d30:	2211      	movs	r2, #17
 8007d32:	498f      	ldr	r1, [pc, #572]	; (8007f70 <ParserSBGC32_ConvertCommandID_ToString+0x6f8>)
 8007d34:	68b8      	ldr	r0, [r7, #8]
 8007d36:	f002 fce1 	bl	800a6fc <memcpy>
 8007d3a:	e341      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_PARAMS_EXT :					memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS_EXT")); break;
 8007d3c:	2213      	movs	r2, #19
 8007d3e:	498d      	ldr	r1, [pc, #564]	; (8007f74 <ParserSBGC32_ConvertCommandID_ToString+0x6fc>)
 8007d40:	68b8      	ldr	r0, [r7, #8]
 8007d42:	f002 fcdb 	bl	800a6fc <memcpy>
 8007d46:	e33b      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_PARAMS_EXT :					memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_EXT")); break;
 8007d48:	2214      	movs	r2, #20
 8007d4a:	498b      	ldr	r1, [pc, #556]	; (8007f78 <ParserSBGC32_ConvertCommandID_ToString+0x700>)
 8007d4c:	68b8      	ldr	r0, [r7, #8]
 8007d4e:	f002 fcd5 	bl	800a6fc <memcpy>
 8007d52:	e335      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_AUTO_PID :							memcpy(str, TEXT_LENGTH_("CMD_AUTO_PID")); break;
 8007d54:	220c      	movs	r2, #12
 8007d56:	4989      	ldr	r1, [pc, #548]	; (8007f7c <ParserSBGC32_ConvertCommandID_ToString+0x704>)
 8007d58:	68b8      	ldr	r0, [r7, #8]
 8007d5a:	f002 fccf 	bl	800a6fc <memcpy>
 8007d5e:	e32f      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SERVO_OUT :						memcpy(str, TEXT_LENGTH_("CMD_SERVO_OUT")); break;
 8007d60:	220d      	movs	r2, #13
 8007d62:	4987      	ldr	r1, [pc, #540]	; (8007f80 <ParserSBGC32_ConvertCommandID_ToString+0x708>)
 8007d64:	68b8      	ldr	r0, [r7, #8]
 8007d66:	f002 fcc9 	bl	800a6fc <memcpy>
 8007d6a:	e329      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_I2C_WRITE_REG_BUF :				memcpy(str, TEXT_LENGTH_("CMD_I2C_WRITE_REG_BUF")); break;
 8007d6c:	2215      	movs	r2, #21
 8007d6e:	4985      	ldr	r1, [pc, #532]	; (8007f84 <ParserSBGC32_ConvertCommandID_ToString+0x70c>)
 8007d70:	68b8      	ldr	r0, [r7, #8]
 8007d72:	f002 fcc3 	bl	800a6fc <memcpy>
 8007d76:	e323      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_I2C_READ_REG_BUF :					memcpy(str, TEXT_LENGTH_("CMD_I2C_READ_REG_BUF")); break;
 8007d78:	2214      	movs	r2, #20
 8007d7a:	4983      	ldr	r1, [pc, #524]	; (8007f88 <ParserSBGC32_ConvertCommandID_ToString+0x710>)
 8007d7c:	68b8      	ldr	r0, [r7, #8]
 8007d7e:	f002 fcbd 	bl	800a6fc <memcpy>
 8007d82:	e31d      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_EXTERNAL_DATA :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_EXTERNAL_DATA")); break;
 8007d84:	2217      	movs	r2, #23
 8007d86:	4981      	ldr	r1, [pc, #516]	; (8007f8c <ParserSBGC32_ConvertCommandID_ToString+0x714>)
 8007d88:	68b8      	ldr	r0, [r7, #8]
 8007d8a:	f002 fcb7 	bl	800a6fc <memcpy>
 8007d8e:	e317      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_EXTERNAL_DATA :				memcpy(str, TEXT_LENGTH_("CMD_READ_EXTERNAL_DATA")); break;
 8007d90:	2216      	movs	r2, #22
 8007d92:	497f      	ldr	r1, [pc, #508]	; (8007f90 <ParserSBGC32_ConvertCommandID_ToString+0x718>)
 8007d94:	68b8      	ldr	r0, [r7, #8]
 8007d96:	f002 fcb1 	bl	800a6fc <memcpy>
 8007d9a:	e311      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_ADJ_VARS_CFG :				memcpy(str, TEXT_LENGTH_("CMD_READ_ADJ_VARS_CFG")); break;
 8007d9c:	2215      	movs	r2, #21
 8007d9e:	497d      	ldr	r1, [pc, #500]	; (8007f94 <ParserSBGC32_ConvertCommandID_ToString+0x71c>)
 8007da0:	68b8      	ldr	r0, [r7, #8]
 8007da2:	f002 fcab 	bl	800a6fc <memcpy>
 8007da6:	e30b      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_ADJ_VARS_CFG :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_ADJ_VARS_CFG")); break;
 8007da8:	2216      	movs	r2, #22
 8007daa:	497b      	ldr	r1, [pc, #492]	; (8007f98 <ParserSBGC32_ConvertCommandID_ToString+0x720>)
 8007dac:	68b8      	ldr	r0, [r7, #8]
 8007dae:	f002 fca5 	bl	800a6fc <memcpy>
 8007db2:	e305      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_API_VIRT_CH_CONTROL :				memcpy(str, TEXT_LENGTH_("CMD_API_VIRT_CH_CONTROL")); break;
 8007db4:	2217      	movs	r2, #23
 8007db6:	4979      	ldr	r1, [pc, #484]	; (8007f9c <ParserSBGC32_ConvertCommandID_ToString+0x724>)
 8007db8:	68b8      	ldr	r0, [r7, #8]
 8007dba:	f002 fc9f 	bl	800a6fc <memcpy>
 8007dbe:	e2ff      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_ADJ_VARS_STATE :					memcpy(str, TEXT_LENGTH_("CMD_ADJ_VARS_STATE")); break;
 8007dc0:	2212      	movs	r2, #18
 8007dc2:	4977      	ldr	r1, [pc, #476]	; (8007fa0 <ParserSBGC32_ConvertCommandID_ToString+0x728>)
 8007dc4:	68b8      	ldr	r0, [r7, #8]
 8007dc6:	f002 fc99 	bl	800a6fc <memcpy>
 8007dca:	e2f9      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EEPROM_WRITE :						memcpy(str, TEXT_LENGTH_("CMD_EEPROM_WRITE")); break;
 8007dcc:	2210      	movs	r2, #16
 8007dce:	4975      	ldr	r1, [pc, #468]	; (8007fa4 <ParserSBGC32_ConvertCommandID_ToString+0x72c>)
 8007dd0:	68b8      	ldr	r0, [r7, #8]
 8007dd2:	f002 fc93 	bl	800a6fc <memcpy>
 8007dd6:	e2f3      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EEPROM_READ :						memcpy(str, TEXT_LENGTH_("CMD_EEPROM_READ")); break;
 8007dd8:	220f      	movs	r2, #15
 8007dda:	4973      	ldr	r1, [pc, #460]	; (8007fa8 <ParserSBGC32_ConvertCommandID_ToString+0x730>)
 8007ddc:	68b8      	ldr	r0, [r7, #8]
 8007dde:	f002 fc8d 	bl	800a6fc <memcpy>
 8007de2:	e2ed      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_INFO :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_INFO")); break;
 8007de4:	220e      	movs	r2, #14
 8007de6:	4971      	ldr	r1, [pc, #452]	; (8007fac <ParserSBGC32_ConvertCommandID_ToString+0x734>)
 8007de8:	68b8      	ldr	r0, [r7, #8]
 8007dea:	f002 fc87 	bl	800a6fc <memcpy>
 8007dee:	e2e7      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SIGN_MESSAGE :						memcpy(str, TEXT_LENGTH_("CMD_SIGN_MESSAGE")); break;
 8007df0:	2210      	movs	r2, #16
 8007df2:	496f      	ldr	r1, [pc, #444]	; (8007fb0 <ParserSBGC32_ConvertCommandID_ToString+0x738>)
 8007df4:	68b8      	ldr	r0, [r7, #8]
 8007df6:	f002 fc81 	bl	800a6fc <memcpy>
 8007dfa:	e2e1      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_BOOT_MODE_3 :						memcpy(str, TEXT_LENGTH_("CMD_BOOT_MODE_3")); break;
 8007dfc:	220f      	movs	r2, #15
 8007dfe:	496d      	ldr	r1, [pc, #436]	; (8007fb4 <ParserSBGC32_ConvertCommandID_ToString+0x73c>)
 8007e00:	68b8      	ldr	r0, [r7, #8]
 8007e02:	f002 fc7b 	bl	800a6fc <memcpy>
 8007e06:	e2db      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SYSTEM_STATE :						memcpy(str, TEXT_LENGTH_("CMD_SYSTEM_STATE")); break;
 8007e08:	2210      	movs	r2, #16
 8007e0a:	496b      	ldr	r1, [pc, #428]	; (8007fb8 <ParserSBGC32_ConvertCommandID_ToString+0x740>)
 8007e0c:	68b8      	ldr	r0, [r7, #8]
 8007e0e:	f002 fc75 	bl	800a6fc <memcpy>
 8007e12:	e2d5      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_FILE :						memcpy(str, TEXT_LENGTH_("CMD_READ_FILE")); break;
 8007e14:	220d      	movs	r2, #13
 8007e16:	4969      	ldr	r1, [pc, #420]	; (8007fbc <ParserSBGC32_ConvertCommandID_ToString+0x744>)
 8007e18:	68b8      	ldr	r0, [r7, #8]
 8007e1a:	f002 fc6f 	bl	800a6fc <memcpy>
 8007e1e:	e2cf      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_FILE :						memcpy(str, TEXT_LENGTH_("CMD_WRITE_FILE")); break;
 8007e20:	220e      	movs	r2, #14
 8007e22:	4967      	ldr	r1, [pc, #412]	; (8007fc0 <ParserSBGC32_ConvertCommandID_ToString+0x748>)
 8007e24:	68b8      	ldr	r0, [r7, #8]
 8007e26:	f002 fc69 	bl	800a6fc <memcpy>
 8007e2a:	e2c9      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_FS_CLEAR_ALL :						memcpy(str, TEXT_LENGTH_("CMD_FS_CLEAR_ALL")); break;
 8007e2c:	2210      	movs	r2, #16
 8007e2e:	4965      	ldr	r1, [pc, #404]	; (8007fc4 <ParserSBGC32_ConvertCommandID_ToString+0x74c>)
 8007e30:	68b8      	ldr	r0, [r7, #8]
 8007e32:	f002 fc63 	bl	800a6fc <memcpy>
 8007e36:	e2c3      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_AHRS_HELPER :						memcpy(str, TEXT_LENGTH_("CMD_AHRS_HELPER")); break;
 8007e38:	220f      	movs	r2, #15
 8007e3a:	4963      	ldr	r1, [pc, #396]	; (8007fc8 <ParserSBGC32_ConvertCommandID_ToString+0x750>)
 8007e3c:	68b8      	ldr	r0, [r7, #8]
 8007e3e:	f002 fc5d 	bl	800a6fc <memcpy>
 8007e42:	e2bd      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_RUN_SCRIPT :						memcpy(str, TEXT_LENGTH_("CMD_RUN_SCRIPT")); break;
 8007e44:	220e      	movs	r2, #14
 8007e46:	4961      	ldr	r1, [pc, #388]	; (8007fcc <ParserSBGC32_ConvertCommandID_ToString+0x754>)
 8007e48:	68b8      	ldr	r0, [r7, #8]
 8007e4a:	f002 fc57 	bl	800a6fc <memcpy>
 8007e4e:	e2b7      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SCRIPT_DEBUG :						memcpy(str, TEXT_LENGTH_("CMD_SCRIPT_DEBUG")); break;
 8007e50:	2210      	movs	r2, #16
 8007e52:	495f      	ldr	r1, [pc, #380]	; (8007fd0 <ParserSBGC32_ConvertCommandID_ToString+0x758>)
 8007e54:	68b8      	ldr	r0, [r7, #8]
 8007e56:	f002 fc51 	bl	800a6fc <memcpy>
 8007e5a:	e2b1      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_MAG :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_MAG")); break;
 8007e5c:	220d      	movs	r2, #13
 8007e5e:	495d      	ldr	r1, [pc, #372]	; (8007fd4 <ParserSBGC32_ConvertCommandID_ToString+0x75c>)
 8007e60:	68b8      	ldr	r0, [r7, #8]
 8007e62:	f002 fc4b 	bl	800a6fc <memcpy>
 8007e66:	e2ab      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_GET_ANGLES_EXT :					memcpy(str, TEXT_LENGTH_("CMD_GET_ANGLES_EXT")); break;
 8007e68:	2212      	movs	r2, #18
 8007e6a:	495b      	ldr	r1, [pc, #364]	; (8007fd8 <ParserSBGC32_ConvertCommandID_ToString+0x760>)
 8007e6c:	68b8      	ldr	r0, [r7, #8]
 8007e6e:	f002 fc45 	bl	800a6fc <memcpy>
 8007e72:	e2a5      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_PARAMS_EXT2 :					memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS_EXT2")); break;
 8007e74:	2214      	movs	r2, #20
 8007e76:	4959      	ldr	r1, [pc, #356]	; (8007fdc <ParserSBGC32_ConvertCommandID_ToString+0x764>)
 8007e78:	68b8      	ldr	r0, [r7, #8]
 8007e7a:	f002 fc3f 	bl	800a6fc <memcpy>
 8007e7e:	e29f      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_PARAMS_EXT2 :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_EXT2")); break;
 8007e80:	2215      	movs	r2, #21
 8007e82:	4957      	ldr	r1, [pc, #348]	; (8007fe0 <ParserSBGC32_ConvertCommandID_ToString+0x768>)
 8007e84:	68b8      	ldr	r0, [r7, #8]
 8007e86:	f002 fc39 	bl	800a6fc <memcpy>
 8007e8a:	e299      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_GET_ADJ_VARS_VAL :					memcpy(str, TEXT_LENGTH_("CMD_GET_ADJ_VARS_VAL")); break;
 8007e8c:	2214      	movs	r2, #20
 8007e8e:	4955      	ldr	r1, [pc, #340]	; (8007fe4 <ParserSBGC32_ConvertCommandID_ToString+0x76c>)
 8007e90:	68b8      	ldr	r0, [r7, #8]
 8007e92:	f002 fc33 	bl	800a6fc <memcpy>
 8007e96:	e293      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_ACC :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_ACC")); break;
 8007e98:	220d      	movs	r2, #13
 8007e9a:	4953      	ldr	r1, [pc, #332]	; (8007fe8 <ParserSBGC32_ConvertCommandID_ToString+0x770>)
 8007e9c:	68b8      	ldr	r0, [r7, #8]
 8007e9e:	f002 fc2d 	bl	800a6fc <memcpy>
 8007ea2:	e28d      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_BAT :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_BAT")); break;
 8007ea4:	220d      	movs	r2, #13
 8007ea6:	4951      	ldr	r1, [pc, #324]	; (8007fec <ParserSBGC32_ConvertCommandID_ToString+0x774>)
 8007ea8:	68b8      	ldr	r0, [r7, #8]
 8007eaa:	f002 fc27 	bl	800a6fc <memcpy>
 8007eae:	e287      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case 67 :
			/* CMD_CONFIRM or CMD_CONTROL */
			if (serialCommand->parameters &
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	781b      	ldrb	r3, [r3, #0]
 8007eb4:	b25b      	sxtb	r3, r3
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da05      	bge.n	8007ec6 <ParserSBGC32_ConvertCommandID_ToString+0x64e>
				SCParam_RX)							memcpy(str, TEXT_LENGTH_("CMD_CONFIRM"));
 8007eba:	220b      	movs	r2, #11
 8007ebc:	494c      	ldr	r1, [pc, #304]	; (8007ff0 <ParserSBGC32_ConvertCommandID_ToString+0x778>)
 8007ebe:	68b8      	ldr	r0, [r7, #8]
 8007ec0:	f002 fc1c 	bl	800a6fc <memcpy>
			else									memcpy(str, TEXT_LENGTH_("CMD_CONTROL"));
			break;
 8007ec4:	e27c      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
			else									memcpy(str, TEXT_LENGTH_("CMD_CONTROL"));
 8007ec6:	220b      	movs	r2, #11
 8007ec8:	494a      	ldr	r1, [pc, #296]	; (8007ff4 <ParserSBGC32_ConvertCommandID_ToString+0x77c>)
 8007eca:	68b8      	ldr	r0, [r7, #8]
 8007ecc:	f002 fc16 	bl	800a6fc <memcpy>
			break;
 8007ed0:	e276      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_REALTIME_DATA :					memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA")); break;
 8007ed2:	2211      	movs	r2, #17
 8007ed4:	4948      	ldr	r1, [pc, #288]	; (8007ff8 <ParserSBGC32_ConvertCommandID_ToString+0x780>)
 8007ed6:	68b8      	ldr	r0, [r7, #8]
 8007ed8:	f002 fc10 	bl	800a6fc <memcpy>
 8007edc:	e270      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EXECUTE_MENU :						memcpy(str, TEXT_LENGTH_("CMD_EXECUTE_MENU")); break;
 8007ede:	2210      	movs	r2, #16
 8007ee0:	4946      	ldr	r1, [pc, #280]	; (8007ffc <ParserSBGC32_ConvertCommandID_ToString+0x784>)
 8007ee2:	68b8      	ldr	r0, [r7, #8]
 8007ee4:	f002 fc0a 	bl	800a6fc <memcpy>
 8007ee8:	e26a      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_USE_DEFAULTS :						memcpy(str, TEXT_LENGTH_("CMD_USE_DEFAULTS")); break;
 8007eea:	2210      	movs	r2, #16
 8007eec:	4944      	ldr	r1, [pc, #272]	; (8008000 <ParserSBGC32_ConvertCommandID_ToString+0x788>)
 8007eee:	68b8      	ldr	r0, [r7, #8]
 8007ef0:	f002 fc04 	bl	800a6fc <memcpy>
 8007ef4:	e264      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_EXT_GAIN :					memcpy(str, TEXT_LENGTH_("CMD_CALIB_EXT_GAIN")); break;
 8007ef6:	2212      	movs	r2, #18
 8007ef8:	4942      	ldr	r1, [pc, #264]	; (8008004 <ParserSBGC32_ConvertCommandID_ToString+0x78c>)
 8007efa:	68b8      	ldr	r0, [r7, #8]
 8007efc:	f002 fbfe 	bl	800a6fc <memcpy>
 8007f00:	e25e      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_HELPER_DATA :						memcpy(str, TEXT_LENGTH_("CMD_HELPER_DATA")); break;
 8007f02:	220f      	movs	r2, #15
 8007f04:	4940      	ldr	r1, [pc, #256]	; (8008008 <ParserSBGC32_ConvertCommandID_ToString+0x790>)
 8007f06:	68b8      	ldr	r0, [r7, #8]
 8007f08:	f002 fbf8 	bl	800a6fc <memcpy>
 8007f0c:	e258      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_GET_ANGLES :						memcpy(str, TEXT_LENGTH_("CMD_GET_ANGLES")); break;
 8007f0e:	220e      	movs	r2, #14
 8007f10:	493e      	ldr	r1, [pc, #248]	; (800800c <ParserSBGC32_ConvertCommandID_ToString+0x794>)
 8007f12:	68b8      	ldr	r0, [r7, #8]
 8007f14:	f002 fbf2 	bl	800a6fc <memcpy>
 8007f18:	e252      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_MOTOR_MAG_LINK :				memcpy(str, TEXT_LENGTH_("CMD_CALIB_MOTOR_MAG_LINK")); break;
 8007f1a:	2218      	movs	r2, #24
 8007f1c:	493c      	ldr	r1, [pc, #240]	; (8008010 <ParserSBGC32_ConvertCommandID_ToString+0x798>)
 8007f1e:	68b8      	ldr	r0, [r7, #8]
 8007f20:	f002 fbec 	bl	800a6fc <memcpy>
 8007f24:	e24c      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_GYRO_CORRECTION :					memcpy(str, TEXT_LENGTH_("CMD_GYRO_CORRECTION")); break;
 8007f26:	2213      	movs	r2, #19
 8007f28:	493a      	ldr	r1, [pc, #232]	; (8008014 <ParserSBGC32_ConvertCommandID_ToString+0x79c>)
 8007f2a:	68b8      	ldr	r0, [r7, #8]
 8007f2c:	f002 fbe6 	bl	800a6fc <memcpy>
 8007f30:	e246      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_MOTORS_ON :						memcpy(str, TEXT_LENGTH_("CMD_MOTORS_ON")); break;
 8007f32:	220d      	movs	r2, #13
 8007f34:	4938      	ldr	r1, [pc, #224]	; (8008018 <ParserSBGC32_ConvertCommandID_ToString+0x7a0>)
 8007f36:	68b8      	ldr	r0, [r7, #8]
 8007f38:	f002 fbe0 	bl	800a6fc <memcpy>
 8007f3c:	e240      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
 8007f3e:	bf00      	nop
 8007f40:	0800e100 	.word	0x0800e100
 8007f44:	0800e114 	.word	0x0800e114
 8007f48:	0800e128 	.word	0x0800e128
 8007f4c:	0800e13c 	.word	0x0800e13c
 8007f50:	0800e150 	.word	0x0800e150
 8007f54:	0800e164 	.word	0x0800e164
 8007f58:	0800e178 	.word	0x0800e178
 8007f5c:	0800e194 	.word	0x0800e194
 8007f60:	0800e1b4 	.word	0x0800e1b4
 8007f64:	0800e1cc 	.word	0x0800e1cc
 8007f68:	0800e1e4 	.word	0x0800e1e4
 8007f6c:	0800e1fc 	.word	0x0800e1fc
 8007f70:	0800e214 	.word	0x0800e214
 8007f74:	0800e228 	.word	0x0800e228
 8007f78:	0800e23c 	.word	0x0800e23c
 8007f7c:	0800e254 	.word	0x0800e254
 8007f80:	0800e264 	.word	0x0800e264
 8007f84:	0800e274 	.word	0x0800e274
 8007f88:	0800e28c 	.word	0x0800e28c
 8007f8c:	0800e2a4 	.word	0x0800e2a4
 8007f90:	0800e2bc 	.word	0x0800e2bc
 8007f94:	0800e2d4 	.word	0x0800e2d4
 8007f98:	0800e2ec 	.word	0x0800e2ec
 8007f9c:	0800e304 	.word	0x0800e304
 8007fa0:	0800e31c 	.word	0x0800e31c
 8007fa4:	0800e330 	.word	0x0800e330
 8007fa8:	0800e344 	.word	0x0800e344
 8007fac:	0800e354 	.word	0x0800e354
 8007fb0:	0800e364 	.word	0x0800e364
 8007fb4:	0800e378 	.word	0x0800e378
 8007fb8:	0800e388 	.word	0x0800e388
 8007fbc:	0800e39c 	.word	0x0800e39c
 8007fc0:	0800e3ac 	.word	0x0800e3ac
 8007fc4:	0800e3bc 	.word	0x0800e3bc
 8007fc8:	0800e3d0 	.word	0x0800e3d0
 8007fcc:	0800e3e0 	.word	0x0800e3e0
 8007fd0:	0800e3f0 	.word	0x0800e3f0
 8007fd4:	0800e404 	.word	0x0800e404
 8007fd8:	0800e414 	.word	0x0800e414
 8007fdc:	0800e428 	.word	0x0800e428
 8007fe0:	0800e440 	.word	0x0800e440
 8007fe4:	0800e458 	.word	0x0800e458
 8007fe8:	0800e470 	.word	0x0800e470
 8007fec:	0800e480 	.word	0x0800e480
 8007ff0:	0800e490 	.word	0x0800e490
 8007ff4:	0800e49c 	.word	0x0800e49c
 8007ff8:	0800e4a8 	.word	0x0800e4a8
 8007ffc:	0800e4bc 	.word	0x0800e4bc
 8008000:	0800e4d0 	.word	0x0800e4d0
 8008004:	0800e4e4 	.word	0x0800e4e4
 8008008:	0800e4f8 	.word	0x0800e4f8
 800800c:	0800e508 	.word	0x0800e508
 8008010:	0800e518 	.word	0x0800e518
 8008014:	0800e534 	.word	0x0800e534
 8008018:	0800e548 	.word	0x0800e548
		case CMD_CALIB_OFFSET :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_OFFSET")); break;
 800801c:	2210      	movs	r2, #16
 800801e:	49a7      	ldr	r1, [pc, #668]	; (80082bc <ParserSBGC32_ConvertCommandID_ToString+0xa44>)
 8008020:	68b8      	ldr	r0, [r7, #8]
 8008022:	f002 fb6b 	bl	800a6fc <memcpy>
 8008026:	e1cb      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_POLES :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_POLES")); break;
 8008028:	220f      	movs	r2, #15
 800802a:	49a5      	ldr	r1, [pc, #660]	; (80082c0 <ParserSBGC32_ConvertCommandID_ToString+0xa48>)
 800802c:	68b8      	ldr	r0, [r7, #8]
 800802e:	f002 fb65 	bl	800a6fc <memcpy>
 8008032:	e1c5      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_PARAMS :						memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS")); break;
 8008034:	220f      	movs	r2, #15
 8008036:	49a3      	ldr	r1, [pc, #652]	; (80082c4 <ParserSBGC32_ConvertCommandID_ToString+0xa4c>)
 8008038:	68b8      	ldr	r0, [r7, #8]
 800803a:	f002 fb5f 	bl	800a6fc <memcpy>
 800803e:	e1bf      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_TRIGGER_PIN :						memcpy(str, TEXT_LENGTH_("CMD_TRIGGER_PIN")); break;
 8008040:	220f      	movs	r2, #15
 8008042:	49a1      	ldr	r1, [pc, #644]	; (80082c8 <ParserSBGC32_ConvertCommandID_ToString+0xa50>)
 8008044:	68b8      	ldr	r0, [r7, #8]
 8008046:	f002 fb59 	bl	800a6fc <memcpy>
 800804a:	e1b9      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_DATA_STREAM_INTERVAL :				memcpy(str, TEXT_LENGTH_("CMD_DATA_STREAM_INTERVAL")); break;
 800804c:	2218      	movs	r2, #24
 800804e:	499f      	ldr	r1, [pc, #636]	; (80082cc <ParserSBGC32_ConvertCommandID_ToString+0xa54>)
 8008050:	68b8      	ldr	r0, [r7, #8]
 8008052:	f002 fb53 	bl	800a6fc <memcpy>
 8008056:	e1b3      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_BOARD_INFO :						memcpy(str, TEXT_LENGTH_("CMD_BOARD_INFO")); break;
 8008058:	220e      	movs	r2, #14
 800805a:	499d      	ldr	r1, [pc, #628]	; (80082d0 <ParserSBGC32_ConvertCommandID_ToString+0xa58>)
 800805c:	68b8      	ldr	r0, [r7, #8]
 800805e:	f002 fb4d 	bl	800a6fc <memcpy>
 8008062:	e1ad      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_PARAMS :						memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS")); break;
 8008064:	2210      	movs	r2, #16
 8008066:	499b      	ldr	r1, [pc, #620]	; (80082d4 <ParserSBGC32_ConvertCommandID_ToString+0xa5c>)
 8008068:	68b8      	ldr	r0, [r7, #8]
 800806a:	f002 fb47 	bl	800a6fc <memcpy>
 800806e:	e1a7      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_REALTIME_DATA_CUSTOM :				memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA_CUSTOM")); break;
 8008070:	2218      	movs	r2, #24
 8008072:	4999      	ldr	r1, [pc, #612]	; (80082d8 <ParserSBGC32_ConvertCommandID_ToString+0xa60>)
 8008074:	68b8      	ldr	r0, [r7, #8]
 8008076:	f002 fb41 	bl	800a6fc <memcpy>
 800807a:	e1a1      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_BEEP_SOUND :						memcpy(str, TEXT_LENGTH_("CMD_BEEP_SOUND")); break;
 800807c:	220e      	movs	r2, #14
 800807e:	4997      	ldr	r1, [pc, #604]	; (80082dc <ParserSBGC32_ConvertCommandID_ToString+0xa64>)
 8008080:	68b8      	ldr	r0, [r7, #8]
 8008082:	f002 fb3b 	bl	800a6fc <memcpy>
 8008086:	e19b      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CONTROL_CONFIG :					memcpy(str, TEXT_LENGTH_("CMD_CONTROL_CONFIG")); break;
 8008088:	2212      	movs	r2, #18
 800808a:	4995      	ldr	r1, [pc, #596]	; (80082e0 <ParserSBGC32_ConvertCommandID_ToString+0xa68>)
 800808c:	68b8      	ldr	r0, [r7, #8]
 800808e:	f002 fb35 	bl	800a6fc <memcpy>
 8008092:	e195      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_ORIENT_CORR :				memcpy(str, TEXT_LENGTH_("CMD_CALIB_ORIENT_CORR")); break;
 8008094:	2215      	movs	r2, #21
 8008096:	4993      	ldr	r1, [pc, #588]	; (80082e4 <ParserSBGC32_ConvertCommandID_ToString+0xa6c>)
 8008098:	68b8      	ldr	r0, [r7, #8]
 800809a:	f002 fb2f 	bl	800a6fc <memcpy>
 800809e:	e18f      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_COGGING_CALIB_INFO :				memcpy(str, TEXT_LENGTH_("CMD_COGGING_CALIB_INFO")); break;
 80080a0:	2216      	movs	r2, #22
 80080a2:	4991      	ldr	r1, [pc, #580]	; (80082e8 <ParserSBGC32_ConvertCommandID_ToString+0xa70>)
 80080a4:	68b8      	ldr	r0, [r7, #8]
 80080a6:	f002 fb29 	bl	800a6fc <memcpy>
 80080aa:	e189      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_COGGING :					memcpy(str, TEXT_LENGTH_("CMD_CALIB_COGGING")); break;
 80080ac:	2211      	movs	r2, #17
 80080ae:	498f      	ldr	r1, [pc, #572]	; (80082ec <ParserSBGC32_ConvertCommandID_ToString+0xa74>)
 80080b0:	68b8      	ldr	r0, [r7, #8]
 80080b2:	f002 fb23 	bl	800a6fc <memcpy>
 80080b6:	e183      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_ACC_EXT_REF :				memcpy(str, TEXT_LENGTH_("CMD_CALIB_ACC_EXT_REF")); break;
 80080b8:	2215      	movs	r2, #21
 80080ba:	498d      	ldr	r1, [pc, #564]	; (80082f0 <ParserSBGC32_ConvertCommandID_ToString+0xa78>)
 80080bc:	68b8      	ldr	r0, [r7, #8]
 80080be:	f002 fb1d 	bl	800a6fc <memcpy>
 80080c2:	e17d      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_PROFILE_SET :						memcpy(str, TEXT_LENGTH_("CMD_PROFILE_SET")); break;
 80080c4:	220f      	movs	r2, #15
 80080c6:	498b      	ldr	r1, [pc, #556]	; (80082f4 <ParserSBGC32_ConvertCommandID_ToString+0xa7c>)
 80080c8:	68b8      	ldr	r0, [r7, #8]
 80080ca:	f002 fb17 	bl	800a6fc <memcpy>
 80080ce:	e177      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CAN_DEVICE_SCAN :					memcpy(str, TEXT_LENGTH_("CMD_CAN_DEVICE_SCAN")); break;
 80080d0:	2213      	movs	r2, #19
 80080d2:	4989      	ldr	r1, [pc, #548]	; (80082f8 <ParserSBGC32_ConvertCommandID_ToString+0xa80>)
 80080d4:	68b8      	ldr	r0, [r7, #8]
 80080d6:	f002 fb11 	bl	800a6fc <memcpy>
 80080da:	e171      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CAN_DRV_HARD_PARAMS :				memcpy(str, TEXT_LENGTH_("CMD_CAN_DRV_HARD_PARAMS")); break;
 80080dc:	2217      	movs	r2, #23
 80080de:	4987      	ldr	r1, [pc, #540]	; (80082fc <ParserSBGC32_ConvertCommandID_ToString+0xa84>)
 80080e0:	68b8      	ldr	r0, [r7, #8]
 80080e2:	f002 fb0b 	bl	800a6fc <memcpy>
 80080e6:	e16b      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CAN_DRV_STATE :					memcpy(str, TEXT_LENGTH_("CMD_CAN_DRV_STATE")); break;
 80080e8:	2211      	movs	r2, #17
 80080ea:	4985      	ldr	r1, [pc, #532]	; (8008300 <ParserSBGC32_ConvertCommandID_ToString+0xa88>)
 80080ec:	68b8      	ldr	r0, [r7, #8]
 80080ee:	f002 fb05 	bl	800a6fc <memcpy>
 80080f2:	e165      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CAN_DRV_CALIBRATE :				memcpy(str, TEXT_LENGTH_("CMD_CAN_DRV_CALIBRATE")); break;
 80080f4:	2215      	movs	r2, #21
 80080f6:	4983      	ldr	r1, [pc, #524]	; (8008304 <ParserSBGC32_ConvertCommandID_ToString+0xa8c>)
 80080f8:	68b8      	ldr	r0, [r7, #8]
 80080fa:	f002 faff 	bl	800a6fc <memcpy>
 80080fe:	e15f      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_RC_INPUTS :					memcpy(str, TEXT_LENGTH_("CMD_READ_RC_INPUTS")); break;
 8008100:	2212      	movs	r2, #18
 8008102:	4981      	ldr	r1, [pc, #516]	; (8008308 <ParserSBGC32_ConvertCommandID_ToString+0xa90>)
 8008104:	68b8      	ldr	r0, [r7, #8]
 8008106:	f002 faf9 	bl	800a6fc <memcpy>
 800810a:	e159      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_REALTIME_DATA_CAN_DRV :			memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA_CAN_DRV")); break;
 800810c:	2219      	movs	r2, #25
 800810e:	497f      	ldr	r1, [pc, #508]	; (800830c <ParserSBGC32_ConvertCommandID_ToString+0xa94>)
 8008110:	68b8      	ldr	r0, [r7, #8]
 8008112:	f002 faf3 	bl	800a6fc <memcpy>
 8008116:	e153      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EVENT :							memcpy(str, TEXT_LENGTH_("CMD_EVENT")); break;
 8008118:	2209      	movs	r2, #9
 800811a:	497d      	ldr	r1, [pc, #500]	; (8008310 <ParserSBGC32_ConvertCommandID_ToString+0xa98>)
 800811c:	68b8      	ldr	r0, [r7, #8]
 800811e:	f002 faed 	bl	800a6fc <memcpy>
 8008122:	e14d      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_GYRO :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_GYRO")); break;
 8008124:	220e      	movs	r2, #14
 8008126:	497b      	ldr	r1, [pc, #492]	; (8008314 <ParserSBGC32_ConvertCommandID_ToString+0xa9c>)
 8008128:	68b8      	ldr	r0, [r7, #8]
 800812a:	f002 fae7 	bl	800a6fc <memcpy>
 800812e:	e147      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_PARAMS_EXT3 :					memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS_EXT3")); break;
 8008130:	2214      	movs	r2, #20
 8008132:	4979      	ldr	r1, [pc, #484]	; (8008318 <ParserSBGC32_ConvertCommandID_ToString+0xaa0>)
 8008134:	68b8      	ldr	r0, [r7, #8]
 8008136:	f002 fae1 	bl	800a6fc <memcpy>
 800813a:	e141      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_PARAMS_EXT3 :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_EXT3")); break;
 800813c:	2215      	movs	r2, #21
 800813e:	4977      	ldr	r1, [pc, #476]	; (800831c <ParserSBGC32_ConvertCommandID_ToString+0xaa4>)
 8008140:	68b8      	ldr	r0, [r7, #8]
 8008142:	f002 fadb 	bl	800a6fc <memcpy>
 8008146:	e13b      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EXT_IMU_DEBUG_INFO :				memcpy(str, TEXT_LENGTH_("CMD_EXT_IMU_DEBUG_INFO")); break;
 8008148:	2216      	movs	r2, #22
 800814a:	4975      	ldr	r1, [pc, #468]	; (8008320 <ParserSBGC32_ConvertCommandID_ToString+0xaa8>)
 800814c:	68b8      	ldr	r0, [r7, #8]
 800814e:	f002 fad5 	bl	800a6fc <memcpy>
 8008152:	e135      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SET_DEVICE_ADDR :					memcpy(str, TEXT_LENGTH_("CMD_SET_DEVICE_ADDR")); break;
 8008154:	2213      	movs	r2, #19
 8008156:	4973      	ldr	r1, [pc, #460]	; (8008324 <ParserSBGC32_ConvertCommandID_ToString+0xaac>)
 8008158:	68b8      	ldr	r0, [r7, #8]
 800815a:	f002 facf 	bl	800a6fc <memcpy>
 800815e:	e12f      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_AUTO_PID2 :						memcpy(str, TEXT_LENGTH_("CMD_AUTO_PID2")); break;
 8008160:	220d      	movs	r2, #13
 8008162:	4971      	ldr	r1, [pc, #452]	; (8008328 <ParserSBGC32_ConvertCommandID_ToString+0xab0>)
 8008164:	68b8      	ldr	r0, [r7, #8]
 8008166:	f002 fac9 	bl	800a6fc <memcpy>
 800816a:	e129      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_MOTORS_OFF :						memcpy(str, TEXT_LENGTH_("CMD_MOTORS_OFF")); break;
 800816c:	220e      	movs	r2, #14
 800816e:	496f      	ldr	r1, [pc, #444]	; (800832c <ParserSBGC32_ConvertCommandID_ToString+0xab4>)
 8008170:	68b8      	ldr	r0, [r7, #8]
 8008172:	f002 fac3 	bl	800a6fc <memcpy>
 8008176:	e123      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EXT_IMU_CMD :						memcpy(str, TEXT_LENGTH_("CMD_EXT_IMU_CMD")); break;
 8008178:	220f      	movs	r2, #15
 800817a:	496d      	ldr	r1, [pc, #436]	; (8008330 <ParserSBGC32_ConvertCommandID_ToString+0xab8>)
 800817c:	68b8      	ldr	r0, [r7, #8]
 800817e:	f002 fabd 	bl	800a6fc <memcpy>
 8008182:	e11d      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_READ_STATE_VARS :					memcpy(str, TEXT_LENGTH_("CMD_READ_STATE_VARS")); break;
 8008184:	2213      	movs	r2, #19
 8008186:	496b      	ldr	r1, [pc, #428]	; (8008334 <ParserSBGC32_ConvertCommandID_ToString+0xabc>)
 8008188:	68b8      	ldr	r0, [r7, #8]
 800818a:	f002 fab7 	bl	800a6fc <memcpy>
 800818e:	e117      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_STATE_VARS :					memcpy(str, TEXT_LENGTH_("CMD_WRITE_STATE_VARS")); break;
 8008190:	2214      	movs	r2, #20
 8008192:	4969      	ldr	r1, [pc, #420]	; (8008338 <ParserSBGC32_ConvertCommandID_ToString+0xac0>)
 8008194:	68b8      	ldr	r0, [r7, #8]
 8008196:	f002 fab1 	bl	800a6fc <memcpy>
 800819a:	e111      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SERIAL_PROXY :						memcpy(str, TEXT_LENGTH_("CMD_SERIAL_PROXY")); break;
 800819c:	2210      	movs	r2, #16
 800819e:	4967      	ldr	r1, [pc, #412]	; (800833c <ParserSBGC32_ConvertCommandID_ToString+0xac4>)
 80081a0:	68b8      	ldr	r0, [r7, #8]
 80081a2:	f002 faab 	bl	800a6fc <memcpy>
 80081a6:	e10b      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_RESET :							memcpy(str, TEXT_LENGTH_("CMD_RESET")); break;
 80081a8:	2209      	movs	r2, #9
 80081aa:	4965      	ldr	r1, [pc, #404]	; (8008340 <ParserSBGC32_ConvertCommandID_ToString+0xac8>)
 80081ac:	68b8      	ldr	r0, [r7, #8]
 80081ae:	f002 faa5 	bl	800a6fc <memcpy>
 80081b2:	e105      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_IMU_ADVANCED_CALIB :				memcpy(str, TEXT_LENGTH_("CMD_IMU_ADVANCED_CALIB")); break;
 80081b4:	2216      	movs	r2, #22
 80081b6:	4963      	ldr	r1, [pc, #396]	; (8008344 <ParserSBGC32_ConvertCommandID_ToString+0xacc>)
 80081b8:	68b8      	ldr	r0, [r7, #8]
 80081ba:	f002 fa9f 	bl	800a6fc <memcpy>
 80081be:	e0ff      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_API_VIRT_CH_HIGH_RES :				memcpy(str, TEXT_LENGTH_("CMD_API_VIRT_CH_HIGH_RES")); break;
 80081c0:	2218      	movs	r2, #24
 80081c2:	4961      	ldr	r1, [pc, #388]	; (8008348 <ParserSBGC32_ConvertCommandID_ToString+0xad0>)
 80081c4:	68b8      	ldr	r0, [r7, #8]
 80081c6:	f002 fa99 	bl	800a6fc <memcpy>
 80081ca:	e0f9      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_ENCODER_LUT :				memcpy(str, TEXT_LENGTH_("CMD_CALIB_ENCODER_LUT")); break;
 80081cc:	2215      	movs	r2, #21
 80081ce:	495f      	ldr	r1, [pc, #380]	; (800834c <ParserSBGC32_ConvertCommandID_ToString+0xad4>)
 80081d0:	68b8      	ldr	r0, [r7, #8]
 80081d2:	f002 fa93 	bl	800a6fc <memcpy>
 80081d6:	e0f3      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_ENCODER_LUT_RES :			memcpy(str, TEXT_LENGTH_("CMD_CALIB_ENCODER_LUT_RES")); break;
 80081d8:	2219      	movs	r2, #25
 80081da:	495d      	ldr	r1, [pc, #372]	; (8008350 <ParserSBGC32_ConvertCommandID_ToString+0xad8>)
 80081dc:	68b8      	ldr	r0, [r7, #8]
 80081de:	f002 fa8d 	bl	800a6fc <memcpy>
 80081e2:	e0ed      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_WRITE_PARAMS_SET :					memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_SET")); break;
 80081e4:	2214      	movs	r2, #20
 80081e6:	495b      	ldr	r1, [pc, #364]	; (8008354 <ParserSBGC32_ConvertCommandID_ToString+0xadc>)
 80081e8:	68b8      	ldr	r0, [r7, #8]
 80081ea:	f002 fa87 	bl	800a6fc <memcpy>
 80081ee:	e0e7      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CALIB_CUR_SENS :					memcpy(str, TEXT_LENGTH_("CMD_CALIB_CUR_SENS")); break;
 80081f0:	2212      	movs	r2, #18
 80081f2:	4959      	ldr	r1, [pc, #356]	; (8008358 <ParserSBGC32_ConvertCommandID_ToString+0xae0>)
 80081f4:	68b8      	ldr	r0, [r7, #8]
 80081f6:	f002 fa81 	bl	800a6fc <memcpy>
 80081fa:	e0e1      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CONTROL_EXT :						memcpy(str, TEXT_LENGTH_("CMD_CONTROL_EXT")); break;
 80081fc:	220f      	movs	r2, #15
 80081fe:	4957      	ldr	r1, [pc, #348]	; (800835c <ParserSBGC32_ConvertCommandID_ToString+0xae4>)
 8008200:	68b8      	ldr	r0, [r7, #8]
 8008202:	f002 fa7b 	bl	800a6fc <memcpy>
 8008206:	e0db      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SYNC_MOTORS :						memcpy(str, TEXT_LENGTH_("CMD_SYNC_MOTORS")); break;
 8008208:	220f      	movs	r2, #15
 800820a:	4955      	ldr	r1, [pc, #340]	; (8008360 <ParserSBGC32_ConvertCommandID_ToString+0xae8>)
 800820c:	68b8      	ldr	r0, [r7, #8]
 800820e:	f002 fa75 	bl	800a6fc <memcpy>
 8008212:	e0d5      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CAN_DRV_TELEMETRY :				memcpy(str, TEXT_LENGTH_("CMD_CAN_DRV_TELEMETRY")); break;
 8008214:	2215      	movs	r2, #21
 8008216:	4953      	ldr	r1, [pc, #332]	; (8008364 <ParserSBGC32_ConvertCommandID_ToString+0xaec>)
 8008218:	68b8      	ldr	r0, [r7, #8]
 800821a:	f002 fa6f 	bl	800a6fc <memcpy>
 800821e:	e0cf      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EXT_MOTORS_ACTION :				memcpy(str, TEXT_LENGTH_("CMD_EXT_MOTORS_ACTION")); break;
 8008220:	2215      	movs	r2, #21
 8008222:	4951      	ldr	r1, [pc, #324]	; (8008368 <ParserSBGC32_ConvertCommandID_ToString+0xaf0>)
 8008224:	68b8      	ldr	r0, [r7, #8]
 8008226:	f002 fa69 	bl	800a6fc <memcpy>
 800822a:	e0c9      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EXT_MOTORS_CONTROL :				memcpy(str, TEXT_LENGTH_("CMD_EXT_MOTORS_CONTROL")); break;
 800822c:	2216      	movs	r2, #22
 800822e:	494f      	ldr	r1, [pc, #316]	; (800836c <ParserSBGC32_ConvertCommandID_ToString+0xaf4>)
 8008230:	68b8      	ldr	r0, [r7, #8]
 8008232:	f002 fa63 	bl	800a6fc <memcpy>
 8008236:	e0c3      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EXT_MOTORS_CONTROL_CONFIG :		memcpy(str, TEXT_LENGTH_("CMD_EXT_MOTORS_CONTROL_CONFIG")); break;
 8008238:	221d      	movs	r2, #29
 800823a:	494d      	ldr	r1, [pc, #308]	; (8008370 <ParserSBGC32_ConvertCommandID_ToString+0xaf8>)
 800823c:	68b8      	ldr	r0, [r7, #8]
 800823e:	f002 fa5d 	bl	800a6fc <memcpy>
 8008242:	e0bd      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EXT_MOTORS_STATE :					memcpy(str, TEXT_LENGTH_("CMD_EXT_MOTORS_STATE")); break;
 8008244:	2214      	movs	r2, #20
 8008246:	494b      	ldr	r1, [pc, #300]	; (8008374 <ParserSBGC32_ConvertCommandID_ToString+0xafc>)
 8008248:	68b8      	ldr	r0, [r7, #8]
 800824a:	f002 fa57 	bl	800a6fc <memcpy>
 800824e:	e0b7      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_ADJ_VARS_INFO :					memcpy(str, TEXT_LENGTH_("CMD_ADJ_VARS_INFO")); break;
 8008250:	2211      	movs	r2, #17
 8008252:	4949      	ldr	r1, [pc, #292]	; (8008378 <ParserSBGC32_ConvertCommandID_ToString+0xb00>)
 8008254:	68b8      	ldr	r0, [r7, #8]
 8008256:	f002 fa51 	bl	800a6fc <memcpy>
 800825a:	e0b1      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CONTROL_QUAT :						memcpy(str, TEXT_LENGTH_("CMD_CONTROL_QUAT")); break;
 800825c:	2210      	movs	r2, #16
 800825e:	4947      	ldr	r1, [pc, #284]	; (800837c <ParserSBGC32_ConvertCommandID_ToString+0xb04>)
 8008260:	68b8      	ldr	r0, [r7, #8]
 8008262:	f002 fa4b 	bl	800a6fc <memcpy>
 8008266:	e0ab      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CONTROL_QUAT_STATUS :				memcpy(str, TEXT_LENGTH_("CMD_CONTROL_QUAT_STATUS")); break;
 8008268:	2217      	movs	r2, #23
 800826a:	4945      	ldr	r1, [pc, #276]	; (8008380 <ParserSBGC32_ConvertCommandID_ToString+0xb08>)
 800826c:	68b8      	ldr	r0, [r7, #8]
 800826e:	f002 fa45 	bl	800a6fc <memcpy>
 8008272:	e0a5      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_CONTROL_QUAT_CONFIG :				memcpy(str, TEXT_LENGTH_("CMD_CONTROL_QUAT_CONFIG")); break;
 8008274:	2217      	movs	r2, #23
 8008276:	4943      	ldr	r1, [pc, #268]	; (8008384 <ParserSBGC32_ConvertCommandID_ToString+0xb0c>)
 8008278:	68b8      	ldr	r0, [r7, #8]
 800827a:	f002 fa3f 	bl	800a6fc <memcpy>
 800827e:	e09f      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_EXT_SENS_CMD :						memcpy(str, TEXT_LENGTH_("CMD_EXT_SENS_CMD")); break;
 8008280:	2210      	movs	r2, #16
 8008282:	4941      	ldr	r1, [pc, #260]	; (8008388 <ParserSBGC32_ConvertCommandID_ToString+0xb10>)
 8008284:	68b8      	ldr	r0, [r7, #8]
 8008286:	f002 fa39 	bl	800a6fc <memcpy>
 800828a:	e099      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_TRANSPARENT_SAPI :					memcpy(str, TEXT_LENGTH_("CMD_TRANSPARENT_SAPI")); break;
 800828c:	2214      	movs	r2, #20
 800828e:	493f      	ldr	r1, [pc, #252]	; (800838c <ParserSBGC32_ConvertCommandID_ToString+0xb14>)
 8008290:	68b8      	ldr	r0, [r7, #8]
 8008292:	f002 fa33 	bl	800a6fc <memcpy>
 8008296:	e093      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_SET_DEBUG_PORT :					memcpy(str, TEXT_LENGTH_("CMD_SET_DEBUG_PORT")); break;
 8008298:	2212      	movs	r2, #18
 800829a:	493d      	ldr	r1, [pc, #244]	; (8008390 <ParserSBGC32_ConvertCommandID_ToString+0xb18>)
 800829c:	68b8      	ldr	r0, [r7, #8]
 800829e:	f002 fa2d 	bl	800a6fc <memcpy>
 80082a2:	e08d      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_MAVLINK_INFO :						memcpy(str, TEXT_LENGTH_("CMD_MAVLINK_INFO")); break;
 80082a4:	2210      	movs	r2, #16
 80082a6:	493b      	ldr	r1, [pc, #236]	; (8008394 <ParserSBGC32_ConvertCommandID_ToString+0xb1c>)
 80082a8:	68b8      	ldr	r0, [r7, #8]
 80082aa:	f002 fa27 	bl	800a6fc <memcpy>
 80082ae:	e087      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_MAVLINK_DEBUG :					memcpy(str, TEXT_LENGTH_("CMD_MAVLINK_DEBUG")); break;
 80082b0:	2211      	movs	r2, #17
 80082b2:	4939      	ldr	r1, [pc, #228]	; (8008398 <ParserSBGC32_ConvertCommandID_ToString+0xb20>)
 80082b4:	68b8      	ldr	r0, [r7, #8]
 80082b6:	f002 fa21 	bl	800a6fc <memcpy>
 80082ba:	e081      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
 80082bc:	0800e558 	.word	0x0800e558
 80082c0:	0800e56c 	.word	0x0800e56c
 80082c4:	0800e57c 	.word	0x0800e57c
 80082c8:	0800e58c 	.word	0x0800e58c
 80082cc:	0800e59c 	.word	0x0800e59c
 80082d0:	0800e5b8 	.word	0x0800e5b8
 80082d4:	0800e5c8 	.word	0x0800e5c8
 80082d8:	0800e5dc 	.word	0x0800e5dc
 80082dc:	0800e5f8 	.word	0x0800e5f8
 80082e0:	0800e608 	.word	0x0800e608
 80082e4:	0800e61c 	.word	0x0800e61c
 80082e8:	0800e634 	.word	0x0800e634
 80082ec:	0800e64c 	.word	0x0800e64c
 80082f0:	0800e660 	.word	0x0800e660
 80082f4:	0800e678 	.word	0x0800e678
 80082f8:	0800e688 	.word	0x0800e688
 80082fc:	0800e69c 	.word	0x0800e69c
 8008300:	0800e6b4 	.word	0x0800e6b4
 8008304:	0800e6c8 	.word	0x0800e6c8
 8008308:	0800e6e0 	.word	0x0800e6e0
 800830c:	0800e6f4 	.word	0x0800e6f4
 8008310:	0800e710 	.word	0x0800e710
 8008314:	0800e71c 	.word	0x0800e71c
 8008318:	0800e72c 	.word	0x0800e72c
 800831c:	0800e744 	.word	0x0800e744
 8008320:	0800e75c 	.word	0x0800e75c
 8008324:	0800e774 	.word	0x0800e774
 8008328:	0800e788 	.word	0x0800e788
 800832c:	0800e798 	.word	0x0800e798
 8008330:	0800e7a8 	.word	0x0800e7a8
 8008334:	0800e7b8 	.word	0x0800e7b8
 8008338:	0800e7cc 	.word	0x0800e7cc
 800833c:	0800e7e4 	.word	0x0800e7e4
 8008340:	0800e7f8 	.word	0x0800e7f8
 8008344:	0800e804 	.word	0x0800e804
 8008348:	0800e81c 	.word	0x0800e81c
 800834c:	0800e838 	.word	0x0800e838
 8008350:	0800e850 	.word	0x0800e850
 8008354:	0800e86c 	.word	0x0800e86c
 8008358:	0800e884 	.word	0x0800e884
 800835c:	0800e898 	.word	0x0800e898
 8008360:	0800e8a8 	.word	0x0800e8a8
 8008364:	0800e8b8 	.word	0x0800e8b8
 8008368:	0800e8d0 	.word	0x0800e8d0
 800836c:	0800e8e8 	.word	0x0800e8e8
 8008370:	0800e900 	.word	0x0800e900
 8008374:	0800e920 	.word	0x0800e920
 8008378:	0800e938 	.word	0x0800e938
 800837c:	0800e94c 	.word	0x0800e94c
 8008380:	0800e960 	.word	0x0800e960
 8008384:	0800e978 	.word	0x0800e978
 8008388:	0800e990 	.word	0x0800e990
 800838c:	0800e9a4 	.word	0x0800e9a4
 8008390:	0800e9bc 	.word	0x0800e9bc
 8008394:	0800e9d0 	.word	0x0800e9d0
 8008398:	0800e9e4 	.word	0x0800e9e4
		case CMD_DEBUG_VARS_INFO_3 :				memcpy(str, TEXT_LENGTH_("CMD_DEBUG_VARS_INFO_3")); break;
 800839c:	2215      	movs	r2, #21
 800839e:	490d      	ldr	r1, [pc, #52]	; (80083d4 <ParserSBGC32_ConvertCommandID_ToString+0xb5c>)
 80083a0:	68b8      	ldr	r0, [r7, #8]
 80083a2:	f002 f9ab 	bl	800a6fc <memcpy>
 80083a6:	e00b      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_DEBUG_VARS_3 :						memcpy(str, TEXT_LENGTH_("CMD_DEBUG_VARS_3")); break;
 80083a8:	2210      	movs	r2, #16
 80083aa:	490b      	ldr	r1, [pc, #44]	; (80083d8 <ParserSBGC32_ConvertCommandID_ToString+0xb60>)
 80083ac:	68b8      	ldr	r0, [r7, #8]
 80083ae:	f002 f9a5 	bl	800a6fc <memcpy>
 80083b2:	e005      	b.n	80083c0 <ParserSBGC32_ConvertCommandID_ToString+0xb48>
		case CMD_ERROR :							memcpy(str, TEXT_LENGTH_("CMD_ERROR")); break;
 80083b4:	2209      	movs	r2, #9
 80083b6:	4909      	ldr	r1, [pc, #36]	; (80083dc <ParserSBGC32_ConvertCommandID_ToString+0xb64>)
 80083b8:	68b8      	ldr	r0, [r7, #8]
 80083ba:	f002 f99f 	bl	800a6fc <memcpy>
 80083be:	bf00      	nop
	}

	return strlen(str);
 80083c0:	68b8      	ldr	r0, [r7, #8]
 80083c2:	f7f7 ff8d 	bl	80002e0 <strlen>
 80083c6:	4603      	mov	r3, r0
 80083c8:	b2db      	uxtb	r3, r3
}
 80083ca:	4618      	mov	r0, r3
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
 80083d2:	bf00      	nop
 80083d4:	0800e9f8 	.word	0x0800e9f8
 80083d8:	0800ea10 	.word	0x0800ea10
 80083dc:	0800ea24 	.word	0x0800ea24

080083e0 <ParserSBGC32_ConvertCommandStatusToString>:
 *	@param	size - buffer size
 *
 *	@return	Length of a writable string
 */
ui8 ParserSBGC32_ConvertCommandStatusToString (serialAPI_Command_t *serialCommand, char *str, ui8 size)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	4613      	mov	r3, r2
 80083ec:	71fb      	strb	r3, [r7, #7]
	if (size < SBGC_CMD_STATUS_NAME_MAX_LEN) return 0;
 80083ee:	79fb      	ldrb	r3, [r7, #7]
 80083f0:	2b09      	cmp	r3, #9
 80083f2:	d801      	bhi.n	80083f8 <ParserSBGC32_ConvertCommandStatusToString+0x18>
 80083f4:	2300      	movs	r3, #0
 80083f6:	e049      	b.n	800848c <ParserSBGC32_ConvertCommandStatusToString+0xac>

	switch (serialCommand->_state)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	7e9b      	ldrb	r3, [r3, #26]
 80083fc:	2b06      	cmp	r3, #6
 80083fe:	dc13      	bgt.n	8008428 <ParserSBGC32_ConvertCommandStatusToString+0x48>
 8008400:	2b00      	cmp	r3, #0
 8008402:	dd3e      	ble.n	8008482 <ParserSBGC32_ConvertCommandStatusToString+0xa2>
 8008404:	3b01      	subs	r3, #1
 8008406:	2b05      	cmp	r3, #5
 8008408:	d83b      	bhi.n	8008482 <ParserSBGC32_ConvertCommandStatusToString+0xa2>
 800840a:	a201      	add	r2, pc, #4	; (adr r2, 8008410 <ParserSBGC32_ConvertCommandStatusToString+0x30>)
 800840c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008410:	0800842f 	.word	0x0800842f
 8008414:	08008447 	.word	0x08008447
 8008418:	08008453 	.word	0x08008453
 800841c:	0800845f 	.word	0x0800845f
 8008420:	0800843b 	.word	0x0800843b
 8008424:	0800846b 	.word	0x0800846b
 8008428:	2bff      	cmp	r3, #255	; 0xff
 800842a:	d024      	beq.n	8008476 <ParserSBGC32_ConvertCommandStatusToString+0x96>
 800842c:	e029      	b.n	8008482 <ParserSBGC32_ConvertCommandStatusToString+0xa2>
	{
		case SCState_FORMING :						memcpy(str, TEXT_LENGTH_("FORMING")); break;
 800842e:	2207      	movs	r2, #7
 8008430:	4918      	ldr	r1, [pc, #96]	; (8008494 <ParserSBGC32_ConvertCommandStatusToString+0xb4>)
 8008432:	68b8      	ldr	r0, [r7, #8]
 8008434:	f002 f962 	bl	800a6fc <memcpy>
 8008438:	e023      	b.n	8008482 <ParserSBGC32_ConvertCommandStatusToString+0xa2>
		case SCState_ABORTED :						memcpy(str, TEXT_LENGTH_("ABORTED")); break;
 800843a:	2207      	movs	r2, #7
 800843c:	4916      	ldr	r1, [pc, #88]	; (8008498 <ParserSBGC32_ConvertCommandStatusToString+0xb8>)
 800843e:	68b8      	ldr	r0, [r7, #8]
 8008440:	f002 f95c 	bl	800a6fc <memcpy>
 8008444:	e01d      	b.n	8008482 <ParserSBGC32_ConvertCommandStatusToString+0xa2>
		case SCState_PREPARED :						memcpy(str, TEXT_LENGTH_("PREPARED")); break;
 8008446:	2208      	movs	r2, #8
 8008448:	4914      	ldr	r1, [pc, #80]	; (800849c <ParserSBGC32_ConvertCommandStatusToString+0xbc>)
 800844a:	68b8      	ldr	r0, [r7, #8]
 800844c:	f002 f956 	bl	800a6fc <memcpy>
 8008450:	e017      	b.n	8008482 <ParserSBGC32_ConvertCommandStatusToString+0xa2>
		case SCState_PROCESSING :					memcpy(str, TEXT_LENGTH_("PROCESSING")); break;
 8008452:	220a      	movs	r2, #10
 8008454:	4912      	ldr	r1, [pc, #72]	; (80084a0 <ParserSBGC32_ConvertCommandStatusToString+0xc0>)
 8008456:	68b8      	ldr	r0, [r7, #8]
 8008458:	f002 f950 	bl	800a6fc <memcpy>
 800845c:	e011      	b.n	8008482 <ParserSBGC32_ConvertCommandStatusToString+0xa2>
		case SCState_RELOAD :						memcpy(str, TEXT_LENGTH_("RELOAD")); break;
 800845e:	2206      	movs	r2, #6
 8008460:	4910      	ldr	r1, [pc, #64]	; (80084a4 <ParserSBGC32_ConvertCommandStatusToString+0xc4>)
 8008462:	68b8      	ldr	r0, [r7, #8]
 8008464:	f002 f94a 	bl	800a6fc <memcpy>
 8008468:	e00b      	b.n	8008482 <ParserSBGC32_ConvertCommandStatusToString+0xa2>
		case SCState_ERROR :						memcpy(str, TEXT_LENGTH_("ERROR")); break;
 800846a:	2205      	movs	r2, #5
 800846c:	490e      	ldr	r1, [pc, #56]	; (80084a8 <ParserSBGC32_ConvertCommandStatusToString+0xc8>)
 800846e:	68b8      	ldr	r0, [r7, #8]
 8008470:	f002 f944 	bl	800a6fc <memcpy>
 8008474:	e005      	b.n	8008482 <ParserSBGC32_ConvertCommandStatusToString+0xa2>
		case SCState_PROCESSED :					memcpy(str, TEXT_LENGTH_("PROCESSED")); break;
 8008476:	2209      	movs	r2, #9
 8008478:	490c      	ldr	r1, [pc, #48]	; (80084ac <ParserSBGC32_ConvertCommandStatusToString+0xcc>)
 800847a:	68b8      	ldr	r0, [r7, #8]
 800847c:	f002 f93e 	bl	800a6fc <memcpy>
 8008480:	bf00      	nop
	}

	return strlen(str);
 8008482:	68b8      	ldr	r0, [r7, #8]
 8008484:	f7f7 ff2c 	bl	80002e0 <strlen>
 8008488:	4603      	mov	r3, r0
 800848a:	b2db      	uxtb	r3, r3
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}
 8008494:	0800ea30 	.word	0x0800ea30
 8008498:	0800ea38 	.word	0x0800ea38
 800849c:	0800ea40 	.word	0x0800ea40
 80084a0:	0800ea4c 	.word	0x0800ea4c
 80084a4:	0800ea58 	.word	0x0800ea58
 80084a8:	0800ea60 	.word	0x0800ea60
 80084ac:	0800ea68 	.word	0x0800ea68

080084b0 <ParserSBGC32_FormatBoardVersion>:
 *	@param	boardVer - sbgcBoardInfo_t.boardVer
 *	@param	*pBuff - buffer to write
 *	@param	size - buffer size
 */
void ParserSBGC32_FormatBoardVersion (sbgcGeneral_t *gSBGC, ui8 boardVer, char *pBuff, ui8 size)
{
 80084b0:	b590      	push	{r4, r7, lr}
 80084b2:	b087      	sub	sp, #28
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	60f8      	str	r0, [r7, #12]
 80084b8:	607a      	str	r2, [r7, #4]
 80084ba:	461a      	mov	r2, r3
 80084bc:	460b      	mov	r3, r1
 80084be:	72fb      	strb	r3, [r7, #11]
 80084c0:	4613      	mov	r3, r2
 80084c2:	72bb      	strb	r3, [r7, #10]
	if ((!pBuff) || (size < SBGC_BOARD_VERSION_MAX_LEN)) return;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d01c      	beq.n	8008504 <ParserSBGC32_FormatBoardVersion+0x54>
 80084ca:	7abb      	ldrb	r3, [r7, #10]
 80084cc:	2b04      	cmp	r3, #4
 80084ce:	d919      	bls.n	8008504 <ParserSBGC32_FormatBoardVersion+0x54>

	ui8 majorVer = boardVer / 10;
 80084d0:	7afb      	ldrb	r3, [r7, #11]
 80084d2:	4a0e      	ldr	r2, [pc, #56]	; (800850c <ParserSBGC32_FormatBoardVersion+0x5c>)
 80084d4:	fba2 2303 	umull	r2, r3, r2, r3
 80084d8:	08db      	lsrs	r3, r3, #3
 80084da:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = boardVer % 10;
 80084dc:	7afa      	ldrb	r2, [r7, #11]
 80084de:	4b0b      	ldr	r3, [pc, #44]	; (800850c <ParserSBGC32_FormatBoardVersion+0x5c>)
 80084e0:	fba3 1302 	umull	r1, r3, r3, r2
 80084e4:	08d9      	lsrs	r1, r3, #3
 80084e6:	460b      	mov	r3, r1
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	440b      	add	r3, r1
 80084ec:	005b      	lsls	r3, r3, #1
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	75bb      	strb	r3, [r7, #22]
	gSBGC->_ll->debugSprintf(pBuff, "%u.%u", majorVer, minorVer);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	699c      	ldr	r4, [r3, #24]
 80084f8:	7dfa      	ldrb	r2, [r7, #23]
 80084fa:	7dbb      	ldrb	r3, [r7, #22]
 80084fc:	4904      	ldr	r1, [pc, #16]	; (8008510 <ParserSBGC32_FormatBoardVersion+0x60>)
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	47a0      	blx	r4
 8008502:	e000      	b.n	8008506 <ParserSBGC32_FormatBoardVersion+0x56>
	if ((!pBuff) || (size < SBGC_BOARD_VERSION_MAX_LEN)) return;
 8008504:	bf00      	nop
}
 8008506:	371c      	adds	r7, #28
 8008508:	46bd      	mov	sp, r7
 800850a:	bd90      	pop	{r4, r7, pc}
 800850c:	cccccccd 	.word	0xcccccccd
 8008510:	0800ea74 	.word	0x0800ea74

08008514 <ParserSBGC32_FormatFirmwareVersion>:
 *	@param	firmwareVer - sbgcBoardInfo_t.firmwareVer
 *	@param	*pBuff - buffer to write
 *	@param	size - buffer size
 */
void ParserSBGC32_FormatFirmwareVersion (sbgcGeneral_t *gSBGC, ui16 firmwareVer, char *pBuff, ui8 size)
{
 8008514:	b590      	push	{r4, r7, lr}
 8008516:	b089      	sub	sp, #36	; 0x24
 8008518:	af02      	add	r7, sp, #8
 800851a:	60f8      	str	r0, [r7, #12]
 800851c:	607a      	str	r2, [r7, #4]
 800851e:	461a      	mov	r2, r3
 8008520:	460b      	mov	r3, r1
 8008522:	817b      	strh	r3, [r7, #10]
 8008524:	4613      	mov	r3, r2
 8008526:	727b      	strb	r3, [r7, #9]
	if ((!pBuff) || (size < SBGC_FIRMWARE_VERSION_MAX_LEN)) return;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d057      	beq.n	80085de <ParserSBGC32_FormatFirmwareVersion+0xca>
 800852e:	7a7b      	ldrb	r3, [r7, #9]
 8008530:	2b07      	cmp	r3, #7
 8008532:	d954      	bls.n	80085de <ParserSBGC32_FormatFirmwareVersion+0xca>

	ui8 majorVer = firmwareVer / 1000;
 8008534:	897b      	ldrh	r3, [r7, #10]
 8008536:	4a2c      	ldr	r2, [pc, #176]	; (80085e8 <ParserSBGC32_FormatFirmwareVersion+0xd4>)
 8008538:	fba2 2303 	umull	r2, r3, r2, r3
 800853c:	099b      	lsrs	r3, r3, #6
 800853e:	b29b      	uxth	r3, r3
 8008540:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = (firmwareVer % 1000) / 10;
 8008542:	897b      	ldrh	r3, [r7, #10]
 8008544:	4a28      	ldr	r2, [pc, #160]	; (80085e8 <ParserSBGC32_FormatFirmwareVersion+0xd4>)
 8008546:	fba2 1203 	umull	r1, r2, r2, r3
 800854a:	0992      	lsrs	r2, r2, #6
 800854c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008550:	fb01 f202 	mul.w	r2, r1, r2
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	b29b      	uxth	r3, r3
 8008558:	4a24      	ldr	r2, [pc, #144]	; (80085ec <ParserSBGC32_FormatFirmwareVersion+0xd8>)
 800855a:	fba2 2303 	umull	r2, r3, r2, r3
 800855e:	08db      	lsrs	r3, r3, #3
 8008560:	b29b      	uxth	r3, r3
 8008562:	75bb      	strb	r3, [r7, #22]
	ui8 betaVer = firmwareVer % 10;
 8008564:	897a      	ldrh	r2, [r7, #10]
 8008566:	4b21      	ldr	r3, [pc, #132]	; (80085ec <ParserSBGC32_FormatFirmwareVersion+0xd8>)
 8008568:	fba3 1302 	umull	r1, r3, r3, r2
 800856c:	08d9      	lsrs	r1, r3, #3
 800856e:	460b      	mov	r3, r1
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	1ad3      	subs	r3, r2, r3
 8008578:	b29b      	uxth	r3, r3
 800857a:	757b      	strb	r3, [r7, #21]

	if (betaVer && (firmwareVer < 2730))
 800857c:	7d7b      	ldrb	r3, [r7, #21]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d010      	beq.n	80085a4 <ParserSBGC32_FormatFirmwareVersion+0x90>
 8008582:	897b      	ldrh	r3, [r7, #10]
 8008584:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8008588:	4293      	cmp	r3, r2
 800858a:	d80b      	bhi.n	80085a4 <ParserSBGC32_FormatFirmwareVersion+0x90>
		gSBGC->_ll->debugSprintf(pBuff, "%u.%ub%u", majorVer, minorVer, betaVer);
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	699c      	ldr	r4, [r3, #24]
 8008592:	7dfa      	ldrb	r2, [r7, #23]
 8008594:	7db9      	ldrb	r1, [r7, #22]
 8008596:	7d7b      	ldrb	r3, [r7, #21]
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	460b      	mov	r3, r1
 800859c:	4914      	ldr	r1, [pc, #80]	; (80085f0 <ParserSBGC32_FormatFirmwareVersion+0xdc>)
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	47a0      	blx	r4
 80085a2:	e01d      	b.n	80085e0 <ParserSBGC32_FormatFirmwareVersion+0xcc>

	else if (betaVer && (firmwareVer >= 2730))
 80085a4:	7d7b      	ldrb	r3, [r7, #21]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d010      	beq.n	80085cc <ParserSBGC32_FormatFirmwareVersion+0xb8>
 80085aa:	897b      	ldrh	r3, [r7, #10]
 80085ac:	f640 22a9 	movw	r2, #2729	; 0xaa9
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d90b      	bls.n	80085cc <ParserSBGC32_FormatFirmwareVersion+0xb8>
		gSBGC->_ll->debugSprintf(pBuff, "%u.%u.%u", majorVer, minorVer, betaVer);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699c      	ldr	r4, [r3, #24]
 80085ba:	7dfa      	ldrb	r2, [r7, #23]
 80085bc:	7db9      	ldrb	r1, [r7, #22]
 80085be:	7d7b      	ldrb	r3, [r7, #21]
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	460b      	mov	r3, r1
 80085c4:	490b      	ldr	r1, [pc, #44]	; (80085f4 <ParserSBGC32_FormatFirmwareVersion+0xe0>)
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	47a0      	blx	r4
 80085ca:	e009      	b.n	80085e0 <ParserSBGC32_FormatFirmwareVersion+0xcc>

	else
		gSBGC->_ll->debugSprintf(pBuff, "%u.%u", majorVer, minorVer);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	699c      	ldr	r4, [r3, #24]
 80085d2:	7dfa      	ldrb	r2, [r7, #23]
 80085d4:	7dbb      	ldrb	r3, [r7, #22]
 80085d6:	4908      	ldr	r1, [pc, #32]	; (80085f8 <ParserSBGC32_FormatFirmwareVersion+0xe4>)
 80085d8:	6878      	ldr	r0, [r7, #4]
 80085da:	47a0      	blx	r4
 80085dc:	e000      	b.n	80085e0 <ParserSBGC32_FormatFirmwareVersion+0xcc>
	if ((!pBuff) || (size < SBGC_FIRMWARE_VERSION_MAX_LEN)) return;
 80085de:	bf00      	nop
}
 80085e0:	371c      	adds	r7, #28
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd90      	pop	{r4, r7, pc}
 80085e6:	bf00      	nop
 80085e8:	10624dd3 	.word	0x10624dd3
 80085ec:	cccccccd 	.word	0xcccccccd
 80085f0:	0800ea7c 	.word	0x0800ea7c
 80085f4:	0800ea88 	.word	0x0800ea88
 80085f8:	0800ea74 	.word	0x0800ea74

080085fc <ParserSBGC32_ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
static void ParserSBGC32_ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	2b04      	cmp	r3, #4
 800860e:	d80b      	bhi.n	8008628 <ParserSBGC32_ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	2b03      	cmp	r3, #3
 8008614:	d101      	bne.n	800861a <ParserSBGC32_ToLittleEndian+0x1e>
 8008616:	2304      	movs	r3, #4
 8008618:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 800861a:	79fb      	ldrb	r3, [r7, #7]
 800861c:	461a      	mov	r2, r3
 800861e:	68f9      	ldr	r1, [r7, #12]
 8008620:	68b8      	ldr	r0, [r7, #8]
 8008622:	f002 f86b 	bl	800a6fc <memcpy>
 8008626:	e000      	b.n	800862a <ParserSBGC32_ToLittleEndian+0x2e>
	if (size > 4) return;
 8008628:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			ParserSBGC32_SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 800862a:	3710      	adds	r7, #16
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <ParserSBGC32_FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
static void ParserSBGC32_FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	4613      	mov	r3, r2
 800863c:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	2b04      	cmp	r3, #4
 8008642:	d80b      	bhi.n	800865c <ParserSBGC32_FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 8008644:	79fb      	ldrb	r3, [r7, #7]
 8008646:	2b03      	cmp	r3, #3
 8008648:	d101      	bne.n	800864e <ParserSBGC32_FromLittleEndian+0x1e>
 800864a:	2304      	movs	r3, #4
 800864c:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 800864e:	79fb      	ldrb	r3, [r7, #7]
 8008650:	461a      	mov	r2, r3
 8008652:	68b9      	ldr	r1, [r7, #8]
 8008654:	68f8      	ldr	r0, [r7, #12]
 8008656:	f002 f851 	bl	800a6fc <memcpy>
 800865a:	e000      	b.n	800865e <ParserSBGC32_FromLittleEndian+0x2e>
	if (size > 4) return;
 800865c:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			ParserSBGC32_SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <ParserSBGC32_GetCommandParserMap>:
 *	@param	*serialCommand - pointer to command
 *
 *	@return	Parser mapping pattern
 */
static sbgcParserMap_t ParserSBGC32_GetCommandParserMap (serialAPI_Command_t *serialCommand)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
	#if (SBGC_SYS_BIG_ENDIAN == sbgcOFF)

		unused_(serialCommand);
		return PM_DEFAULT_8BIT;
 800866c:	2300      	movs	r3, #0

			default :																return PM_DEFAULT_8BIT;
		}

	#endif
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <ParserSBGC32_ConvertWithPM>:
 *	@param	parserMap - data type required for correct parsing
 *
 *	@return	Size of written data
 */
static ui8 ParserSBGC32_ConvertWithPM (void *pDestination, const void *pSource, ui8 size, sbgcParserMap_t parserMap)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	4611      	mov	r1, r2
 8008686:	461a      	mov	r2, r3
 8008688:	460b      	mov	r3, r1
 800868a:	71fb      	strb	r3, [r7, #7]
 800868c:	4613      	mov	r3, r2
 800868e:	71bb      	strb	r3, [r7, #6]
	#if (SBGC_NEED_ASSERTS)
		if ((pDestination == NULL) || (size == 0)) return 0;
	#endif

	memcpy(pDestination, pSource, size);
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	461a      	mov	r2, r3
 8008694:	68b9      	ldr	r1, [r7, #8]
 8008696:	68f8      	ldr	r0, [r7, #12]
 8008698:	f002 f830 	bl	800a6fc <memcpy>
		ParserSBGC32_SwapBytesInStruct((ui8*)pDestination, size, parserMap);
	#else
		unused_(parserMap);
	#endif

	return size;
 800869c:	79fb      	ldrb	r3, [r7, #7]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <PrivateSerialAPI_LinkConverter>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkConverter (sbgcGeneral_t *gSBGC)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	gSBGC->_api->typeToSize	= ParserSBGC32_ConvertTypeToSize;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	4a0b      	ldr	r2, [pc, #44]	; (80086e4 <PrivateSerialAPI_LinkConverter+0x3c>)
 80086b6:	639a      	str	r2, [r3, #56]	; 0x38

	#if (SBGC_USES_REF_INFO)
		gSBGC->_api->assignByPM	= ParserSBGC32_AssignStructByParserMap;
	#endif

	gSBGC->_api->toLE		= ParserSBGC32_ToLittleEndian;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	4a0a      	ldr	r2, [pc, #40]	; (80086e8 <PrivateSerialAPI_LinkConverter+0x40>)
 80086be:	63da      	str	r2, [r3, #60]	; 0x3c
	gSBGC->_api->fromLE		= ParserSBGC32_FromLittleEndian;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	4a09      	ldr	r2, [pc, #36]	; (80086ec <PrivateSerialAPI_LinkConverter+0x44>)
 80086c6:	641a      	str	r2, [r3, #64]	; 0x40
	gSBGC->_api->getCmdPM	= ParserSBGC32_GetCommandParserMap;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	4a08      	ldr	r2, [pc, #32]	; (80086f0 <PrivateSerialAPI_LinkConverter+0x48>)
 80086ce:	645a      	str	r2, [r3, #68]	; 0x44
	gSBGC->_api->convWithPM	= ParserSBGC32_ConvertWithPM;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	4a07      	ldr	r2, [pc, #28]	; (80086f4 <PrivateSerialAPI_LinkConverter+0x4c>)
 80086d6:	649a      	str	r2, [r3, #72]	; 0x48
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	08007821 	.word	0x08007821
 80086e8:	080085fd 	.word	0x080085fd
 80086ec:	08008631 	.word	0x08008631
 80086f0:	08008665 	.word	0x08008665
 80086f4:	0800867b 	.word	0x0800867b

080086f8 <DriverSBGC32_Init>:
 *	@param	**driver - main hardware driver object
 *	@param	*uart - user defined UART object
 *	@param	*tim - user defined timer object
 */
void DriverSBGC32_Init (void **driver, SBGC_DRV_UART_TYPE_DEF__ *uart, SBGC_DRV_TIMER_TYPE_DEF__ *tim)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
	*driver = sbgcMalloc(sizeof(sbgcDriver_t));
 8008704:	201c      	movs	r0, #28
 8008706:	f000 ff43 	bl	8009590 <malloc>
 800870a:	4603      	mov	r3, r0
 800870c:	461a      	mov	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	601a      	str	r2, [r3, #0]

	sbgcDriver_t *drv = (sbgcDriver_t*)(*driver);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	617b      	str	r3, [r7, #20]

	#if (SBGC_DRV_HAL_TIMER || SBGC_DRV_LL_TIMER)
		/* Timer */
		drv->tim = tim;
 8008718:	697b      	ldr	r3, [r7, #20]
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	601a      	str	r2, [r3, #0]
		drv->timCount = 0;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2200      	movs	r2, #0
 8008722:	605a      	str	r2, [r3, #4]
	#else
		unused_(tim);
	#endif

    /* UART */
	drv->uart = uart;
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	609a      	str	r2, [r3, #8]

		DriverSBGC32_UART_Init(drv);

	#endif

	drv->txBuffer = (ui8*)sbgcMalloc(SBGC_DRV_TX_BUFF_TOTAL_SIZE);
 800872a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800872e:	f000 ff2f 	bl	8009590 <malloc>
 8008732:	4603      	mov	r3, r0
 8008734:	461a      	mov	r2, r3
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	60da      	str	r2, [r3, #12]
	drv->rxBuffer = (ui8*)sbgcMalloc(SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 800873a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800873e:	f000 ff27 	bl	8009590 <malloc>
 8008742:	4603      	mov	r3, r0
 8008744:	461a      	mov	r2, r3
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	615a      	str	r2, [r3, #20]

	DriverSBGC32_ClearTxBuff(drv);
 800874a:	6978      	ldr	r0, [r7, #20]
 800874c:	f000 f8da 	bl	8008904 <DriverSBGC32_ClearTxBuff>
	DriverSBGC32_ClearRxBuff(drv);
 8008750:	6978      	ldr	r0, [r7, #20]
 8008752:	f000 f98e 	bl	8008a72 <DriverSBGC32_ClearRxBuff>

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
		/* UART Interrupts executable code */
		DISABLE_UART_CR1_TCIE(drv->uart);
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	689b      	ldr	r3, [r3, #8]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008768:	601a      	str	r2, [r3, #0]
		ENABLE_UART_CR1_RXNEIE(drv->uart);
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f042 0220 	orr.w	r2, r2, #32
 800877c:	601a      	str	r2, [r3, #0]
		DISABLE_UART_CR1_IDLEIE(drv->uart);
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681a      	ldr	r2, [r3, #0]
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	689b      	ldr	r3, [r3, #8]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 0210 	bic.w	r2, r2, #16
 8008790:	601a      	str	r2, [r3, #0]

		(void)READ_UART_BYTE(drv->uart);
 8008792:	697b      	ldr	r3, [r7, #20]
 8008794:	689b      	ldr	r3, [r3, #8]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		CLEAR_UART_ORE(drv->uart);
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2208      	movs	r2, #8
 80087a2:	621a      	str	r2, [r3, #32]
		LL_DMA_EnableStream(SBGC_DMA_UART_RX, SBGC_DMA_UART_RX_STREAM);

	#endif

	#if (SBGC_DRV_HAL_TIMER || SBGC_DRV_LL_TIMER)
		START_TIMER(drv->tim);
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f7fa ffb1 	bl	8003710 <HAL_TIM_Base_Start_IT>
	#endif
}
 80087ae:	bf00      	nop
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <DriverSBGC32_GetTimeMs>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Current time
 */
sbgcTicks_t DriverSBGC32_GetTimeMs (void *driver)
{
 80087b6:	b480      	push	{r7}
 80087b8:	b085      	sub	sp, #20
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	60fb      	str	r3, [r7, #12]

	#if (SBGC_USES_OS_SUPPORT)
		drv->timCount = sbgcGetTick();
	#endif

	return drv->timCount;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	685b      	ldr	r3, [r3, #4]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3714      	adds	r7, #20
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <DriverSBGC32_TimerCallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_TimerCallBack (void *driver)
{
 80087d2:	b480      	push	{r7}
 80087d4:	b085      	sub	sp, #20
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	605a      	str	r2, [r3, #4]

	#if (SBGC_DRV_LL_TIMER)
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 80087e8:	bf00      	nop
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <DriverSBGC32_UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx status
 */
ui8 DriverSBGC32_UartTransmitData (void *driver, ui8 *data, ui16 size)
{
 80087f4:	b490      	push	{r4, r7}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	60f8      	str	r0, [r7, #12]
 80087fc:	60b9      	str	r1, [r7, #8]
 80087fe:	4613      	mov	r3, r2
 8008800:	80fb      	strh	r3, [r7, #6]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	617b      	str	r3, [r7, #20]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->txTail != drv->txHead)
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	7c1a      	ldrb	r2, [r3, #16]
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	7c5b      	ldrb	r3, [r3, #17]
 800880e:	429a      	cmp	r2, r3
 8008810:	d009      	beq.n	8008826 <DriverSBGC32_UartTransmitData+0x32>
			ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008824:	601a      	str	r2, [r3, #0]

		/* Free space check */
		if (calcFreeSpaceFIFO(drv->txTail, drv->txHead, SBGC_DRV_TX_BUFF_TOTAL_SIZE) <= size)
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	7c5a      	ldrb	r2, [r3, #17]
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	7c1b      	ldrb	r3, [r3, #16]
 800882e:	429a      	cmp	r2, r3
 8008830:	d308      	bcc.n	8008844 <DriverSBGC32_UartTransmitData+0x50>
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	7c5b      	ldrb	r3, [r3, #17]
 8008836:	461a      	mov	r2, r3
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	7c1b      	ldrb	r3, [r3, #16]
 800883c:	1ad3      	subs	r3, r2, r3
 800883e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008842:	e005      	b.n	8008850 <DriverSBGC32_UartTransmitData+0x5c>
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	7c1b      	ldrb	r3, [r3, #16]
 8008848:	461a      	mov	r2, r3
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	7c5b      	ldrb	r3, [r3, #17]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	88fa      	ldrh	r2, [r7, #6]
 8008852:	4293      	cmp	r3, r2
 8008854:	dc0f      	bgt.n	8008876 <DriverSBGC32_UartTransmitData+0x82>
		{
			/*  - - - User Tx Buffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return SBGC_DRV_TX_BUFF_OVERFLOW_FLAG;
 8008856:	2301      	movs	r3, #1
 8008858:	e025      	b.n	80088a6 <DriverSBGC32_UartTransmitData+0xb2>
		}

		while (size--)
			drv->txBuffer[drv->txHead++] = *(data++);
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	1c5a      	adds	r2, r3, #1
 800885e:	60ba      	str	r2, [r7, #8]
 8008860:	697a      	ldr	r2, [r7, #20]
 8008862:	68d1      	ldr	r1, [r2, #12]
 8008864:	697a      	ldr	r2, [r7, #20]
 8008866:	7c52      	ldrb	r2, [r2, #17]
 8008868:	1c50      	adds	r0, r2, #1
 800886a:	b2c4      	uxtb	r4, r0
 800886c:	6978      	ldr	r0, [r7, #20]
 800886e:	7444      	strb	r4, [r0, #17]
 8008870:	440a      	add	r2, r1
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	7013      	strb	r3, [r2, #0]
		while (size--)
 8008876:	88fb      	ldrh	r3, [r7, #6]
 8008878:	1e5a      	subs	r2, r3, #1
 800887a:	80fa      	strh	r2, [r7, #6]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d1ec      	bne.n	800885a <DriverSBGC32_UartTransmitData+0x66>

		if (!GET_FLAG_UART_CR1_TCIE(drv->uart))
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800888c:	2b00      	cmp	r3, #0
 800888e:	d109      	bne.n	80088a4 <DriverSBGC32_UartTransmitData+0xb0>
			ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	689b      	ldr	r3, [r3, #8]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088a2:	601a      	str	r2, [r3, #0]
			LL_DMA_EnableStream(SBGC_DMA_UART_TX, SBGC_DMA_UART_TX_STREAM);
		}

	#endif

	return SBGC_DRV_TX_OK_FLAG;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bc90      	pop	{r4, r7}
 80088ae:	4770      	bx	lr

080088b0 <DriverSBGC32_UART_TxCallBack>:
/**	@brief	UART transfer completion interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_UART_TxCallBack (void *driver)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)

		WRITE_UART_BYTE(drv->uart, drv->txBuffer[drv->txTail++] & (ui32)0xFF);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	68da      	ldr	r2, [r3, #12]
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	7c1b      	ldrb	r3, [r3, #16]
 80088c4:	1c59      	adds	r1, r3, #1
 80088c6:	b2c8      	uxtb	r0, r1
 80088c8:	68f9      	ldr	r1, [r7, #12]
 80088ca:	7408      	strb	r0, [r1, #16]
 80088cc:	4413      	add	r3, r2
 80088ce:	781a      	ldrb	r2, [r3, #0]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	629a      	str	r2, [r3, #40]	; 0x28

		if (drv->txTail == drv->txHead)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	7c1a      	ldrb	r2, [r3, #16]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	7c5b      	ldrb	r3, [r3, #17]
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d109      	bne.n	80088f8 <DriverSBGC32_UART_TxCallBack+0x48>
		{
			DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	689b      	ldr	r3, [r3, #8]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	689b      	ldr	r3, [r3, #8]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80088f6:	601a      	str	r2, [r3, #0]
			drv->txHead = 0;

		drv->txTail = drv->txHead;

	#endif
}
 80088f8:	bf00      	nop
 80088fa:	3714      	adds	r7, #20
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <DriverSBGC32_ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_ClearTxBuff (void *driver)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	60fb      	str	r3, [r7, #12]

	memset(drv->txBuffer, 0, SBGC_DRV_TX_BUFF_TOTAL_SIZE);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008918:	2100      	movs	r1, #0
 800891a:	4618      	mov	r0, r3
 800891c:	f001 fe4f 	bl	800a5be <memset>
	drv->txTail = 0;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	2200      	movs	r2, #0
 8008924:	741a      	strb	r2, [r3, #16]
	drv->txHead = 0;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2200      	movs	r2, #0
 800892a:	745a      	strb	r2, [r3, #17]
}
 800892c:	bf00      	nop
 800892e:	3710      	adds	r7, #16
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <DriverSBGC32_GetAvailableBytes>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 DriverSBGC32_GetAvailableBytes (void *driver)
{
 8008934:	b480      	push	{r7}
 8008936:	b085      	sub	sp, #20
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->rxOverflowFlag)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	7e9b      	ldrb	r3, [r3, #26]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d002      	beq.n	800894e <DriverSBGC32_GetAvailableBytes+0x1a>
			return SBGC_RX_BUFFER_OVERFLOW_FLAG;
 8008948:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800894c:	e023      	b.n	8008996 <DriverSBGC32_GetAvailableBytes+0x62>

		ui16 availableBytes = calcFreeSpaceFIFO(drv->rxHead, drv->rxTail, SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	7e1a      	ldrb	r2, [r3, #24]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	7e5b      	ldrb	r3, [r3, #25]
 8008956:	429a      	cmp	r2, r3
 8008958:	d30b      	bcc.n	8008972 <DriverSBGC32_GetAvailableBytes+0x3e>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	7e5b      	ldrb	r3, [r3, #25]
 800895e:	b29a      	uxth	r2, r3
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	7e1b      	ldrb	r3, [r3, #24]
 8008964:	b29b      	uxth	r3, r3
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	b29b      	uxth	r3, r3
 800896a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800896e:	b29b      	uxth	r3, r3
 8008970:	e007      	b.n	8008982 <DriverSBGC32_GetAvailableBytes+0x4e>
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	7e5b      	ldrb	r3, [r3, #25]
 8008976:	b29a      	uxth	r2, r3
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	7e1b      	ldrb	r3, [r3, #24]
 800897c:	b29b      	uxth	r3, r3
 800897e:	1ad3      	subs	r3, r2, r3
 8008980:	b29b      	uxth	r3, r3
 8008982:	817b      	strh	r3, [r7, #10]
		availableBytes = (availableBytes == SBGC_DRV_RX_BUFF_TOTAL_SIZE) ? 0 : availableBytes;
 8008984:	897b      	ldrh	r3, [r7, #10]
 8008986:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800898a:	d001      	beq.n	8008990 <DriverSBGC32_GetAvailableBytes+0x5c>
 800898c:	897b      	ldrh	r3, [r7, #10]
 800898e:	e000      	b.n	8008992 <DriverSBGC32_GetAvailableBytes+0x5e>
 8008990:	2300      	movs	r3, #0
 8008992:	817b      	strh	r3, [r7, #10]

		return availableBytes;
 8008994:	897b      	ldrh	r3, [r7, #10]

		drv->rxHead = SBGC_DRV_RX_BUFF_TOTAL_SIZE - GET_DMA_RX_COUNTER(SBGC_DMA_UART_RX);
		return (drv->rxHead - drv->rxTail) & SBGC_DRV_RX_BUFF_SIZE_MASK;

	#endif
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <DriverSBGC32_UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Rx status
 */
ui8 DriverSBGC32_UartReceiveByte (void *driver, ui8 *data)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b085      	sub	sp, #20
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	6039      	str	r1, [r7, #0]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->rxTail == drv->rxHead)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	7e1a      	ldrb	r2, [r3, #24]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	7e5b      	ldrb	r3, [r3, #25]
 80089b8:	429a      	cmp	r2, r3
 80089ba:	d101      	bne.n	80089c0 <DriverSBGC32_UartReceiveByte+0x1e>
		{
			/*  - - - - User Receive-Complete Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return SBGC_DRV_RX_BUFF_EMPTY_FLAG;
 80089bc:	2301      	movs	r3, #1
 80089be:	e013      	b.n	80089e8 <DriverSBGC32_UartReceiveByte+0x46>
		}

		*data = drv->rxBuffer[drv->rxTail++];
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	695a      	ldr	r2, [r3, #20]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	7e1b      	ldrb	r3, [r3, #24]
 80089c8:	1c59      	adds	r1, r3, #1
 80089ca:	b2c8      	uxtb	r0, r1
 80089cc:	68f9      	ldr	r1, [r7, #12]
 80089ce:	7608      	strb	r0, [r1, #24]
 80089d0:	4413      	add	r3, r2
 80089d2:	781a      	ldrb	r2, [r3, #0]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	701a      	strb	r2, [r3, #0]

		if (drv->rxOverflowFlag == 1)  // Reset the overflow flag
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	7e9b      	ldrb	r3, [r3, #26]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d102      	bne.n	80089e6 <DriverSBGC32_UartReceiveByte+0x44>
			drv->rxOverflowFlag = 0;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	769a      	strb	r2, [r3, #26]
		if (drv->rxTail != drv->rxHead)
			drv->rxTail++;

	#endif

	return SBGC_DRV_RX_BUSY_FLAG;  // Rx ring buffer isn't empty
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <DriverSBGC32_UART_RxCallBack>:
	/**	@brief	UART receive completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void DriverSBGC32_UART_RxCallBack (void *driver)
	{
 80089f4:	b490      	push	{r4, r7}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
		sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	60fb      	str	r3, [r7, #12]

		if (!calcFreeSpaceFIFO(drv->rxTail, drv->rxHead, SBGC_DRV_RX_BUFF_TOTAL_SIZE))
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	7e5a      	ldrb	r2, [r3, #25]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	7e1b      	ldrb	r3, [r3, #24]
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d30c      	bcc.n	8008a26 <DriverSBGC32_UART_RxCallBack+0x32>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	7e5b      	ldrb	r3, [r3, #25]
 8008a10:	461a      	mov	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	7e1b      	ldrb	r3, [r3, #24]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a1c:	bf0c      	ite	eq
 8008a1e:	2301      	moveq	r3, #1
 8008a20:	2300      	movne	r3, #0
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	e008      	b.n	8008a38 <DriverSBGC32_UART_RxCallBack+0x44>
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	7e1a      	ldrb	r2, [r3, #24]
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	7e5b      	ldrb	r3, [r3, #25]
 8008a2e:	429a      	cmp	r2, r3
 8008a30:	bf0c      	ite	eq
 8008a32:	2301      	moveq	r3, #1
 8008a34:	2300      	movne	r3, #0
 8008a36:	b2db      	uxtb	r3, r3
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d007      	beq.n	8008a4c <DriverSBGC32_UART_RxCallBack+0x58>
		{
			/* - - - - User rxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */

			(void)READ_UART_BYTE(drv->uart);  // Prevent hardware overflow error (USART_ISR_ORE)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24

			drv->rxOverflowFlag = 1;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	769a      	strb	r2, [r3, #26]

			return;
 8008a4a:	e00e      	b.n	8008a6a <DriverSBGC32_UART_RxCallBack+0x76>
		}

		drv->rxBuffer[drv->rxHead++] = READ_UART_BYTE(drv->uart);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	695a      	ldr	r2, [r3, #20]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	7e5b      	ldrb	r3, [r3, #25]
 8008a5c:	1c59      	adds	r1, r3, #1
 8008a5e:	b2cc      	uxtb	r4, r1
 8008a60:	68f9      	ldr	r1, [r7, #12]
 8008a62:	764c      	strb	r4, [r1, #25]
 8008a64:	4413      	add	r3, r2
 8008a66:	b2c2      	uxtb	r2, r0
 8008a68:	701a      	strb	r2, [r3, #0]
	}
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc90      	pop	{r4, r7}
 8008a70:	4770      	bx	lr

08008a72 <DriverSBGC32_ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_ClearRxBuff (void *driver)
{
 8008a72:	b580      	push	{r7, lr}
 8008a74:	b084      	sub	sp, #16
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60fb      	str	r3, [r7, #12]

	memset(drv->rxBuffer, 0, SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a86:	2100      	movs	r1, #0
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f001 fd98 	bl	800a5be <memset>
	drv->rxTail = 0;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2200      	movs	r2, #0
 8008a92:	761a      	strb	r2, [r3, #24]
	drv->rxHead = 0;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2200      	movs	r2, #0
 8008a98:	765a      	strb	r2, [r3, #25]
	drv->rxOverflowFlag = 0;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	769a      	strb	r2, [r3, #26]
}
 8008aa0:	bf00      	nop
 8008aa2:	3710      	adds	r7, #16
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <DriverSBGC32_UartTransmitDebugData>:
 *
 *	@param	*data - debug data
 *	@param	length - size of debug data
 */
void DriverSBGC32_UartTransmitDebugData (char *data, ui16 length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	807b      	strh	r3, [r7, #2]
	#if (SBGC_DRV_USE_UART_DEBUG && (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_HAL_DMA_UART))

		/* UART HAL executable code */
		HAL_UART_Transmit(SBGC_DEBUG_SERIAL_PORT, (ui8*)data, length, 100);
 8008ab4:	887a      	ldrh	r2, [r7, #2]
 8008ab6:	2364      	movs	r3, #100	; 0x64
 8008ab8:	6879      	ldr	r1, [r7, #4]
 8008aba:	4803      	ldr	r0, [pc, #12]	; (8008ac8 <DriverSBGC32_UartTransmitDebugData+0x20>)
 8008abc:	f7fb faf0 	bl	80040a0 <HAL_UART_Transmit>

			LL_USART_TransmitData8(SBGC_DEBUG_SERIAL_PORT, *(data++));
		}

	#endif
}
 8008ac0:	bf00      	nop
 8008ac2:	3708      	adds	r7, #8
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	20000c84 	.word	0x20000c84

08008acc <SerialAPI_InitAdjVar>:
	 *
	 *	@param	*adjVarGeneral - general adjustable variables structure
	 *	@param	ID - adjustable variable identifier
	 */
	void SerialAPI_InitAdjVar (sbgcAdjVarGeneral_t *adjVarGeneral, sbgcAdjVarID_t ID)
	{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b082      	sub	sp, #8
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	70fb      	strb	r3, [r7, #3]
		memset(adjVarGeneral, 0, sizeof(sbgcAdjVarGeneral_t));
 8008ad8:	2214      	movs	r2, #20
 8008ada:	2100      	movs	r1, #0
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 fd6e 	bl	800a5be <memset>

		adjVarGeneral->ID = ID;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	701a      	strb	r2, [r3, #0]

		#if (SBGC_ADJ_VARS_NAMES)
			adjVarGeneral->name = adjVarsReferenceInfoArray[ID].name;
 8008ae8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008aec:	4a10      	ldr	r2, [pc, #64]	; (8008b30 <SerialAPI_InitAdjVar+0x64>)
 8008aee:	011b      	lsls	r3, r3, #4
 8008af0:	4413      	add	r3, r2
 8008af2:	3304      	adds	r3, #4
 8008af4:	681a      	ldr	r2, [r3, #0]
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	605a      	str	r2, [r3, #4]
		#endif

		adjVarGeneral->minValue = (i16)adjVarsReferenceInfoArray[ID].minValue;
 8008afa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008afe:	4a0c      	ldr	r2, [pc, #48]	; (8008b30 <SerialAPI_InitAdjVar+0x64>)
 8008b00:	011b      	lsls	r3, r3, #4
 8008b02:	4413      	add	r3, r2
 8008b04:	3308      	adds	r3, #8
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	b21a      	sxth	r2, r3
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	811a      	strh	r2, [r3, #8]
		adjVarGeneral->maxValue = (i16)adjVarsReferenceInfoArray[ID].maxValue;
 8008b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b12:	4a07      	ldr	r2, [pc, #28]	; (8008b30 <SerialAPI_InitAdjVar+0x64>)
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	4413      	add	r3, r2
 8008b18:	330c      	adds	r3, #12
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	b21a      	sxth	r2, r3
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	815a      	strh	r2, [r3, #10]

		adjVarGeneral->syncFlag = AV_NOT_SYNCHRONIZED;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2200      	movs	r2, #0
 8008b26:	741a      	strb	r2, [r3, #16]
	}
 8008b28:	bf00      	nop
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}
 8008b30:	2000000c 	.word	0x2000000c

08008b34 <SerialAPI_EditAdjVarValue>:
 *
 *	@param	*adjVarGeneral - general adjustable variables structure
 *	@param	value - new value of adjustable variable
 */
void SerialAPI_EditAdjVarValue (sbgcAdjVarGeneral_t *adjVarGeneral, i32 value)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
		/* Values' borders checking */
		value = constrain_(value, adjVarGeneral->minValue, adjVarGeneral->maxValue);

	#endif

	adjVarGeneral->value = value;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	60da      	str	r2, [r3, #12]
	adjVarGeneral->syncFlag = AV_NOT_SYNCHRONIZED;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2200      	movs	r2, #0
 8008b48:	741a      	strb	r2, [r3, #16]
}
 8008b4a:	bf00      	nop
 8008b4c:	370c      	adds	r7, #12
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b54:	4770      	bx	lr

08008b56 <PostSetAdjVarValues>:
 *			See @ref SBGC32_SetAdjVarValues function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostSetAdjVarValues (sbgcGeneral_t *gSBGC)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b086      	sub	sp, #24
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
	sbgcAdjVarGeneral_t *adjVarGeneral = (sbgcAdjVarGeneral_t*)serialAPI_CurCmdDest_;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	613b      	str	r3, [r7, #16]

	ui8 adjVarQuan = gSBGC->_api->readByte(gSBGC);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	4798      	blx	r3
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]

	if (serialAPI_CurCmd_->_destinationSize < (sizeof(sbgcAdjVarGeneral_t) * adjVarQuan))
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b7c:	8b1b      	ldrh	r3, [r3, #24]
 8008b7e:	4619      	mov	r1, r3
 8008b80:	7bfa      	ldrb	r2, [r7, #15]
 8008b82:	4613      	mov	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	4413      	add	r3, r2
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	4299      	cmp	r1, r3
 8008b8c:	d201      	bcs.n	8008b92 <PostSetAdjVarValues+0x3c>
		SerialAPI_FatalErrorHandler();
 8008b8e:	f7f8 fc7b 	bl	8001488 <SerialAPI_FatalErrorHandler>

	for (ui8 i = 0; i < adjVarQuan; i++)
 8008b92:	2300      	movs	r3, #0
 8008b94:	75fb      	strb	r3, [r7, #23]
 8008b96:	e016      	b.n	8008bc6 <PostSetAdjVarValues+0x70>
	{
		adjVarGeneral[i].syncFlag = AV_SYNCHRONIZED;
 8008b98:	7dfa      	ldrb	r2, [r7, #23]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	2201      	movs	r2, #1
 8008baa:	741a      	strb	r2, [r3, #16]
		adjVarGeneral[i].saveFlag = AV_NOT_SAVED;
 8008bac:	7dfa      	ldrb	r2, [r7, #23]
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	4413      	add	r3, r2
 8008bbc:	2201      	movs	r2, #1
 8008bbe:	745a      	strb	r2, [r3, #17]
	for (ui8 i = 0; i < adjVarQuan; i++)
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	75fb      	strb	r3, [r7, #23]
 8008bc6:	7dfa      	ldrb	r2, [r7, #23]
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d3e4      	bcc.n	8008b98 <PostSetAdjVarValues+0x42>
	}
}
 8008bce:	bf00      	nop
 8008bd0:	bf00      	nop
 8008bd2:	3718      	adds	r7, #24
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <SBGC32_SetAdjVarValues>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_SetAdjVarValues (sbgcGeneral_t *gSBGC, sbgcAdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan, sbgcConfirm_t *confirm
											/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8008bd8:	b590      	push	{r4, r7, lr}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	4613      	mov	r3, r2
 8008be6:	71fb      	strb	r3, [r7, #7]
	sbgcAssertAdjVars(adjVarGeneral, adjVarQuan)
	sbgcAssertParam(adjVarQuan, 1 , SBGC_ADJ_VARS_MAX_NUM_PACKET)

	ui8 numParams = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	75fb      	strb	r3, [r7, #23]

	for (ui8 i = 0; i < adjVarQuan; i++)
 8008bec:	2300      	movs	r3, #0
 8008bee:	75bb      	strb	r3, [r7, #22]
 8008bf0:	e010      	b.n	8008c14 <SBGC32_SetAdjVarValues+0x3c>
		if (adjVarGeneral[i].syncFlag == AV_NOT_SYNCHRONIZED)
 8008bf2:	7dba      	ldrb	r2, [r7, #22]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	009b      	lsls	r3, r3, #2
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	4413      	add	r3, r2
 8008c02:	7c1b      	ldrb	r3, [r3, #16]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d102      	bne.n	8008c0e <SBGC32_SetAdjVarValues+0x36>
			numParams++;
 8008c08:	7dfb      	ldrb	r3, [r7, #23]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	75fb      	strb	r3, [r7, #23]
	for (ui8 i = 0; i < adjVarQuan; i++)
 8008c0e:	7dbb      	ldrb	r3, [r7, #22]
 8008c10:	3301      	adds	r3, #1
 8008c12:	75bb      	strb	r3, [r7, #22]
 8008c14:	7dba      	ldrb	r2, [r7, #22]
 8008c16:	79fb      	ldrb	r3, [r7, #7]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d3ea      	bcc.n	8008bf2 <SBGC32_SetAdjVarValues+0x1a>

	#if (SBGC_NEED_ASSERTS)
        if (numParams == 0) return sbgcCOMMAND_PARAM_ASSERT_ERROR;
	#endif

	gSBGC->_api->startWrite(gSBGC, CMD_SET_ADJ_VARS_VAL SBGC_ADVANCED_ARGS__);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c22:	211f      	movs	r1, #31
 8008c24:	68f8      	ldr	r0, [r7, #12]
 8008c26:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, numParams);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c2e:	7dfa      	ldrb	r2, [r7, #23]
 8008c30:	4611      	mov	r1, r2
 8008c32:	68f8      	ldr	r0, [r7, #12]
 8008c34:	4798      	blx	r3

	for (ui8 i = 0; i < adjVarQuan; i++)
 8008c36:	2300      	movs	r3, #0
 8008c38:	757b      	strb	r3, [r7, #21]
 8008c3a:	e02d      	b.n	8008c98 <SBGC32_SetAdjVarValues+0xc0>
		if (adjVarGeneral[i].syncFlag == AV_NOT_SYNCHRONIZED)
 8008c3c:	7d7a      	ldrb	r2, [r7, #21]
 8008c3e:	4613      	mov	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	4413      	add	r3, r2
 8008c44:	009b      	lsls	r3, r3, #2
 8008c46:	461a      	mov	r2, r3
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	7c1b      	ldrb	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d11f      	bne.n	8008c92 <SBGC32_SetAdjVarValues+0xba>
		{
			gSBGC->_api->writeByte(gSBGC, adjVarGeneral[i].ID);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8008c58:	7d7a      	ldrb	r2, [r7, #21]
 8008c5a:	4613      	mov	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	4413      	add	r3, r2
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	461a      	mov	r2, r3
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	4413      	add	r3, r2
 8008c68:	f993 3000 	ldrsb.w	r3, [r3]
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	4619      	mov	r1, r3
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	47a0      	blx	r4
			gSBGC->_api->writeLong(gSBGC, adjVarGeneral[i].value);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	685b      	ldr	r3, [r3, #4]
 8008c78:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 8008c7a:	7d7a      	ldrb	r2, [r7, #21]
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	009b      	lsls	r3, r3, #2
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	461a      	mov	r2, r3
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	4413      	add	r3, r2
 8008c8a:	68db      	ldr	r3, [r3, #12]
 8008c8c:	4619      	mov	r1, r3
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	47a0      	blx	r4
	for (ui8 i = 0; i < adjVarQuan; i++)
 8008c92:	7d7b      	ldrb	r3, [r7, #21]
 8008c94:	3301      	adds	r3, #1
 8008c96:	757b      	strb	r3, [r7, #21]
 8008c98:	7d7a      	ldrb	r2, [r7, #21]
 8008c9a:	79fb      	ldrb	r3, [r7, #7]
 8008c9c:	429a      	cmp	r2, r3
 8008c9e:	d3cd      	bcc.n	8008c3c <SBGC32_SetAdjVarValues+0x64>
		}

	gSBGC->_api->assignEvent(gSBGC, PostSetAdjVarValues, adjVarGeneral, sizeof(sbgcAdjVarGeneral_t) * adjVarQuan);
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	685b      	ldr	r3, [r3, #4]
 8008ca4:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	461a      	mov	r2, r3
 8008cae:	0092      	lsls	r2, r2, #2
 8008cb0:	4413      	add	r3, r2
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	b29b      	uxth	r3, r3
 8008cb6:	68ba      	ldr	r2, [r7, #8]
 8008cb8:	4910      	ldr	r1, [pc, #64]	; (8008cfc <SBGC32_SetAdjVarValues+0x124>)
 8008cba:	68f8      	ldr	r0, [r7, #12]
 8008cbc:	47a0      	blx	r4
	gSBGC->_api->finishWrite(gSBGC);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008cc6:	68f8      	ldr	r0, [r7, #12]
 8008cc8:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_SET_ADJ_VARS_VAL SBGC_ADVANCED_ARGS__);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	685b      	ldr	r3, [r3, #4]
 8008cce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cd2:	221f      	movs	r2, #31
 8008cd4:	6839      	ldr	r1, [r7, #0]
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008ce2:	68f8      	ldr	r0, [r7, #12]
 8008ce4:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	685b      	ldr	r3, [r3, #4]
 8008cea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008cee:	68f8      	ldr	r0, [r7, #12]
 8008cf0:	4798      	blx	r3
 8008cf2:	4603      	mov	r3, r0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	371c      	adds	r7, #28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd90      	pop	{r4, r7, pc}
 8008cfc:	08008b57 	.word	0x08008b57

08008d00 <PostGetAdjVarValues>:
 *			See @ref SBGC32_GetAdjVarValues function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostGetAdjVarValues (sbgcGeneral_t *gSBGC)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b086      	sub	sp, #24
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
	sbgcAdjVarGeneral_t *adjVarGeneral = (sbgcAdjVarGeneral_t*)serialAPI_CurCmdDest_;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	613b      	str	r3, [r7, #16]

	ui8 adjVarQuan = gSBGC->_api->readByte(gSBGC);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	4798      	blx	r3
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	73fb      	strb	r3, [r7, #15]

	if (serialAPI_CurCmd_->_destinationSize < (sizeof(sbgcAdjVarGeneral_t) * adjVarQuan))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d26:	8b1b      	ldrh	r3, [r3, #24]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	7bfa      	ldrb	r2, [r7, #15]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	4413      	add	r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	4299      	cmp	r1, r3
 8008d36:	d201      	bcs.n	8008d3c <PostGetAdjVarValues+0x3c>
		SerialAPI_FatalErrorHandler();
 8008d38:	f7f8 fba6 	bl	8001488 <SerialAPI_FatalErrorHandler>

	for (ui8 i = 0; i < adjVarQuan; i++)
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]
 8008d40:	e021      	b.n	8008d86 <PostGetAdjVarValues+0x86>
				(void)gSBGC->_api->readLong(gSBGC);  // skip
				continue;
			}

		#else
			(void)gSBGC->_api->readByte(gSBGC);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	4798      	blx	r3
		#endif

		adjVarGeneral[i].value = (i32)gSBGC->_api->readLong(gSBGC);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	4798      	blx	r3
 8008d56:	4601      	mov	r1, r0
 8008d58:	7dfa      	ldrb	r2, [r7, #23]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	461a      	mov	r2, r3
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	4413      	add	r3, r2
 8008d68:	460a      	mov	r2, r1
 8008d6a:	60da      	str	r2, [r3, #12]
		adjVarGeneral[i].syncFlag = AV_SYNCHRONIZED;
 8008d6c:	7dfa      	ldrb	r2, [r7, #23]
 8008d6e:	4613      	mov	r3, r2
 8008d70:	009b      	lsls	r3, r3, #2
 8008d72:	4413      	add	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	461a      	mov	r2, r3
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	741a      	strb	r2, [r3, #16]
	for (ui8 i = 0; i < adjVarQuan; i++)
 8008d80:	7dfb      	ldrb	r3, [r7, #23]
 8008d82:	3301      	adds	r3, #1
 8008d84:	75fb      	strb	r3, [r7, #23]
 8008d86:	7dfa      	ldrb	r2, [r7, #23]
 8008d88:	7bfb      	ldrb	r3, [r7, #15]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d3d9      	bcc.n	8008d42 <PostGetAdjVarValues+0x42>
	}
}
 8008d8e:	bf00      	nop
 8008d90:	bf00      	nop
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <SBGC32_GetAdjVarValues>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_GetAdjVarValues (sbgcGeneral_t *gSBGC, sbgcAdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan
											/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8008d98:	b590      	push	{r4, r7, lr}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	4613      	mov	r3, r2
 8008da4:	71fb      	strb	r3, [r7, #7]
	sbgcAssertAdjVars(adjVarGeneral, adjVarQuan)
	sbgcAssertParam(adjVarQuan, 1, SBGC_ADJ_VARS_MAX_NUM_PACKET)

	gSBGC->_api->startWrite(gSBGC, CMD_GET_ADJ_VARS_VAL SBGC_ADVANCED_ARGS__);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	685b      	ldr	r3, [r3, #4]
 8008daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008dac:	2140      	movs	r1, #64	; 0x40
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, adjVarQuan);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db8:	79fa      	ldrb	r2, [r7, #7]
 8008dba:	4611      	mov	r1, r2
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	4798      	blx	r3

	for (ui8 i = 0; i < adjVarQuan; i++)
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	75fb      	strb	r3, [r7, #23]
 8008dc4:	e013      	b.n	8008dee <SBGC32_GetAdjVarValues+0x56>
		gSBGC->_api->writeByte(gSBGC, adjVarGeneral[i].ID);
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8008dcc:	7dfa      	ldrb	r2, [r7, #23]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	461a      	mov	r2, r3
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f993 3000 	ldrsb.w	r3, [r3]
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	4619      	mov	r1, r3
 8008de4:	68f8      	ldr	r0, [r7, #12]
 8008de6:	47a0      	blx	r4
	for (ui8 i = 0; i < adjVarQuan; i++)
 8008de8:	7dfb      	ldrb	r3, [r7, #23]
 8008dea:	3301      	adds	r3, #1
 8008dec:	75fb      	strb	r3, [r7, #23]
 8008dee:	7dfa      	ldrb	r2, [r7, #23]
 8008df0:	79fb      	ldrb	r3, [r7, #7]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d3e7      	bcc.n	8008dc6 <SBGC32_GetAdjVarValues+0x2e>

	gSBGC->_api->finishWrite(gSBGC);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_SET_ADJ_VARS_VAL SBGC_ADVANCED_ARGS__);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	685b      	ldr	r3, [r3, #4]
 8008e06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e08:	211f      	movs	r1, #31
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, PostGetAdjVarValues, adjVarGeneral, sizeof(sbgcAdjVarGeneral_t) * adjVarQuan);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	461a      	mov	r2, r3
 8008e1c:	0092      	lsls	r2, r2, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	4914      	ldr	r1, [pc, #80]	; (8008e78 <SBGC32_GetAdjVarValues+0xe0>)
 8008e28:	68f8      	ldr	r0, [r7, #12]
 8008e2a:	47a0      	blx	r4
	gSBGC->_api->definePayload(gSBGC, (adjVarQuan * (4 + 1)) + 1);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8008e34:	79fb      	ldrb	r3, [r7, #7]
 8008e36:	4619      	mov	r1, r3
 8008e38:	0089      	lsls	r1, r1, #2
 8008e3a:	440b      	add	r3, r1
 8008e3c:	b2db      	uxtb	r3, r3
 8008e3e:	3301      	adds	r3, #1
 8008e40:	b2db      	uxtb	r3, r3
 8008e42:	4619      	mov	r1, r3
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	4790      	blx	r2
	gSBGC->_api->finishRead(gSBGC);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008e68:	68f8      	ldr	r0, [r7, #12]
 8008e6a:	4798      	blx	r3
 8008e6c:	4603      	mov	r3, r0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd90      	pop	{r4, r7, pc}
 8008e76:	bf00      	nop
 8008e78:	08008d01 	.word	0x08008d01

08008e7c <SBGC32_Control>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_Control (sbgcGeneral_t *gSBGC, const sbgcControl_t *control
									/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
	gSBGC->_api->startWrite(gSBGC, CMD_CONTROL SBGC_ADVANCED_ARGS__);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	685b      	ldr	r3, [r3, #4]
 8008e8a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e8c:	2143      	movs	r1, #67	; 0x43
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	4798      	blx	r3
	gSBGC->_api->writeBuff(gSBGC, control, sizeof(sbgcControl_t));
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e98:	220f      	movs	r2, #15
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	4798      	blx	r3
 8008eb8:	4603      	mov	r3, r0
}
 8008eba:	4618      	mov	r0, r3
 8008ebc:	3708      	adds	r7, #8
 8008ebe:	46bd      	mov	sp, r7
 8008ec0:	bd80      	pop	{r7, pc}

08008ec2 <SBGC32_ControlConfig>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ControlConfig (sbgcGeneral_t *gSBGC, const sbgcControlConfig_t *controlConfig, sbgcConfirm_t *confirm
										  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	60f8      	str	r0, [r7, #12]
 8008eca:	60b9      	str	r1, [r7, #8]
 8008ecc:	607a      	str	r2, [r7, #4]
	sbgcAssertFrwVer(2610)

	gSBGC->_api->startWrite(gSBGC, CMD_CONTROL_CONFIG SBGC_ADVANCED_ARGS__);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	685b      	ldr	r3, [r3, #4]
 8008ed2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ed4:	215a      	movs	r1, #90	; 0x5a
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	4798      	blx	r3
	gSBGC->_api->writeBuff(gSBGC, controlConfig, sizeof(sbgcControlConfig_t));
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ee0:	2229      	movs	r2, #41	; 0x29
 8008ee2:	68b9      	ldr	r1, [r7, #8]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	685b      	ldr	r3, [r3, #4]
 8008eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ef0:	68f8      	ldr	r0, [r7, #12]
 8008ef2:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_CONTROL_CONFIG SBGC_ADVANCED_ARGS__);
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008efc:	225a      	movs	r2, #90	; 0x5a
 8008efe:	6879      	ldr	r1, [r7, #4]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	4798      	blx	r3
 8008f1c:	4603      	mov	r3, r0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <SBGC32_ReadParams3>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadParams3 (sbgcGeneral_t *gSBGC, sbgcMainParams3_t *mainParams3, sbgcProfile_t profileID
										/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8008f26:	b590      	push	{r4, r7, lr}
 8008f28:	b085      	sub	sp, #20
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	4613      	mov	r3, r2
 8008f32:	71fb      	strb	r3, [r7, #7]
	#if (SBGC_NEED_ASSERTS)
		if ((profileID > sbgcPROFILE_5) && (profileID != sbgcCURRENT_PROFILE)) return sbgcCOMMAND_PARAM_ASSERT_ERROR;
	#endif

	gSBGC->_api->startWrite(gSBGC, CMD_READ_PARAMS_3 SBGC_ADVANCED_ARGS__);
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	685b      	ldr	r3, [r3, #4]
 8008f38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f3a:	2115      	movs	r1, #21
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, profileID);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f46:	79fa      	ldrb	r2, [r7, #7]
 8008f48:	4611      	mov	r1, r2
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_READ_PARAMS_3 SBGC_ADVANCED_ARGS__);
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	685b      	ldr	r3, [r3, #4]
 8008f5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f60:	2115      	movs	r1, #21
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, NULL, mainParams3, sizeof(sbgcMainParams3_t));
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	685b      	ldr	r3, [r3, #4]
 8008f6a:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8008f6e:	2386      	movs	r3, #134	; 0x86
 8008f70:	68ba      	ldr	r2, [r7, #8]
 8008f72:	2100      	movs	r1, #0
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008f98:	68f8      	ldr	r0, [r7, #12]
 8008f9a:	4798      	blx	r3
 8008f9c:	4603      	mov	r3, r0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3714      	adds	r7, #20
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd90      	pop	{r4, r7, pc}

08008fa6 <SBGC32_ReadParamsExt>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadParamsExt (sbgcGeneral_t *gSBGC, sbgcMainParamsExt_t *mainParamsExt, sbgcProfile_t profileID
										  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8008fa6:	b590      	push	{r4, r7, lr}
 8008fa8:	b085      	sub	sp, #20
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	60f8      	str	r0, [r7, #12]
 8008fae:	60b9      	str	r1, [r7, #8]
 8008fb0:	4613      	mov	r3, r2
 8008fb2:	71fb      	strb	r3, [r7, #7]
	#if (SBGC_NEED_ASSERTS)
		if ((profileID > sbgcPROFILE_5) && (profileID != sbgcCURRENT_PROFILE)) return sbgcCOMMAND_PARAM_ASSERT_ERROR;
	#endif

	gSBGC->_api->startWrite(gSBGC, CMD_READ_PARAMS_EXT SBGC_ADVANCED_ARGS__);
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008fba:	2121      	movs	r1, #33	; 0x21
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, profileID);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	685b      	ldr	r3, [r3, #4]
 8008fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fc6:	79fa      	ldrb	r2, [r7, #7]
 8008fc8:	4611      	mov	r1, r2
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_READ_PARAMS_EXT SBGC_ADVANCED_ARGS__);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	685b      	ldr	r3, [r3, #4]
 8008fde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fe0:	2121      	movs	r1, #33	; 0x21
 8008fe2:	68f8      	ldr	r0, [r7, #12]
 8008fe4:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, NULL, mainParamsExt, sizeof(sbgcMainParamsExt_t));
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8008fee:	2368      	movs	r3, #104	; 0x68
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	2100      	movs	r1, #0
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009000:	68f8      	ldr	r0, [r7, #12]
 8009002:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009018:	68f8      	ldr	r0, [r7, #12]
 800901a:	4798      	blx	r3
 800901c:	4603      	mov	r3, r0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3714      	adds	r7, #20
 8009022:	46bd      	mov	sp, r7
 8009024:	bd90      	pop	{r4, r7, pc}

08009026 <SBGC32_ReadParamsExt2>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadParamsExt2 (sbgcGeneral_t *gSBGC, sbgcMainParamsExt2_t *mainParamsExt2, sbgcProfile_t profileID
										   /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009026:	b590      	push	{r4, r7, lr}
 8009028:	b085      	sub	sp, #20
 800902a:	af00      	add	r7, sp, #0
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	4613      	mov	r3, r2
 8009032:	71fb      	strb	r3, [r7, #7]
	#if (SBGC_NEED_ASSERTS)
		if ((profileID > sbgcPROFILE_5) && (profileID != sbgcCURRENT_PROFILE)) return sbgcCOMMAND_PARAM_ASSERT_ERROR;
	#endif

	gSBGC->_api->startWrite(gSBGC, CMD_READ_PARAMS_EXT2 SBGC_ADVANCED_ARGS__);
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800903a:	213e      	movs	r1, #62	; 0x3e
 800903c:	68f8      	ldr	r0, [r7, #12]
 800903e:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, profileID);
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009046:	79fa      	ldrb	r2, [r7, #7]
 8009048:	4611      	mov	r1, r2
 800904a:	68f8      	ldr	r0, [r7, #12]
 800904c:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_READ_PARAMS_EXT2 SBGC_ADVANCED_ARGS__);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009060:	213e      	movs	r1, #62	; 0x3e
 8009062:	68f8      	ldr	r0, [r7, #12]
 8009064:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, NULL, mainParamsExt2, sizeof(sbgcMainParamsExt2_t));
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 800906e:	2397      	movs	r3, #151	; 0x97
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	2100      	movs	r1, #0
 8009074:	68f8      	ldr	r0, [r7, #12]
 8009076:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009080:	68f8      	ldr	r0, [r7, #12]
 8009082:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	4798      	blx	r3
 800909c:	4603      	mov	r3, r0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3714      	adds	r7, #20
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd90      	pop	{r4, r7, pc}

080090a6 <SBGC32_ReadParamsExt3>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadParamsExt3 (sbgcGeneral_t *gSBGC, sbgcMainParamsExt3_t *mainParamsExt3, sbgcProfile_t profileID
										   /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80090a6:	b590      	push	{r4, r7, lr}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	60f8      	str	r0, [r7, #12]
 80090ae:	60b9      	str	r1, [r7, #8]
 80090b0:	4613      	mov	r3, r2
 80090b2:	71fb      	strb	r3, [r7, #7]
		if ((profileID > sbgcPROFILE_5) && (profileID != sbgcCURRENT_PROFILE)) return sbgcCOMMAND_PARAM_ASSERT_ERROR;
	#endif

	sbgcAssertFrwVer(2660)

	gSBGC->_api->startWrite(gSBGC, CMD_READ_PARAMS_EXT3 SBGC_ADVANCED_ARGS__);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80090ba:	2168      	movs	r1, #104	; 0x68
 80090bc:	68f8      	ldr	r0, [r7, #12]
 80090be:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, profileID);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090c6:	79fa      	ldrb	r2, [r7, #7]
 80090c8:	4611      	mov	r1, r2
 80090ca:	68f8      	ldr	r0, [r7, #12]
 80090cc:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_READ_PARAMS_EXT3 SBGC_ADVANCED_ARGS__);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80090e0:	2168      	movs	r1, #104	; 0x68
 80090e2:	68f8      	ldr	r0, [r7, #12]
 80090e4:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, NULL, mainParamsExt3, sizeof(sbgcMainParamsExt3_t));
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80090ee:	23dd      	movs	r3, #221	; 0xdd
 80090f0:	68ba      	ldr	r2, [r7, #8]
 80090f2:	2100      	movs	r1, #0
 80090f4:	68f8      	ldr	r0, [r7, #12]
 80090f6:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	4798      	blx	r3
 800911c:	4603      	mov	r3, r0
}
 800911e:	4618      	mov	r0, r3
 8009120:	3714      	adds	r7, #20
 8009122:	46bd      	mov	sp, r7
 8009124:	bd90      	pop	{r4, r7, pc}

08009126 <SBGC32_StartDataStream>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_StartDataStream (sbgcGeneral_t *gSBGC, const sbgcDataStreamInterval_t *dataStreamInterval, sbgcConfirm_t *confirm
											/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	607a      	str	r2, [r7, #4]
	sbgcAssertFrwVer(2600)

	gSBGC->_api->startWrite(gSBGC, CMD_DATA_STREAM_INTERVAL SBGC_ADVANCED_ARGS__);
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	685b      	ldr	r3, [r3, #4]
 8009136:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009138:	2155      	movs	r1, #85	; 0x55
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	4798      	blx	r3
	gSBGC->_api->writeBuff(gSBGC, dataStreamInterval, sizeof(sbgcDataStreamInterval_t));
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009144:	2215      	movs	r2, #21
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_DATA_STREAM_INTERVAL SBGC_ADVANCED_ARGS__);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009160:	2255      	movs	r2, #85	; 0x55
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	685b      	ldr	r3, [r3, #4]
 800916c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800917c:	68f8      	ldr	r0, [r7, #12]
 800917e:	4798      	blx	r3
 8009180:	4603      	mov	r3, r0
}
 8009182:	4618      	mov	r0, r3
 8009184:	3710      	adds	r7, #16
 8009186:	46bd      	mov	sp, r7
 8009188:	bd80      	pop	{r7, pc}
	...

0800918c <PostReadDataStream>:
 *			See @ref SBGC32_ReadDataStream function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostReadDataStream (sbgcGeneral_t *gSBGC)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
	if (serialAPI_CurCmd_->_destinationSize < serialAPI_CurCmd_->_payloadSize)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800919a:	8b1a      	ldrh	r2, [r3, #24]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091a2:	7f1b      	ldrb	r3, [r3, #28]
 80091a4:	b29b      	uxth	r3, r3
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d201      	bcs.n	80091ae <PostReadDataStream+0x22>
		SerialAPI_FatalErrorHandler();
 80091aa:	f7f8 f96d 	bl	8001488 <SerialAPI_FatalErrorHandler>

	switch (serialAPI_CurCmd_->_commandID)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	685b      	ldr	r3, [r3, #4]
 80091b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b4:	7edb      	ldrb	r3, [r3, #27]
 80091b6:	2b83      	cmp	r3, #131	; 0x83
 80091b8:	dc6a      	bgt.n	8009290 <PostReadDataStream+0x104>
 80091ba:	2b66      	cmp	r3, #102	; 0x66
 80091bc:	da0c      	bge.n	80091d8 <PostReadDataStream+0x4c>
 80091be:	2b58      	cmp	r3, #88	; 0x58
 80091c0:	d02e      	beq.n	8009220 <PostReadDataStream+0x94>
 80091c2:	2b58      	cmp	r3, #88	; 0x58
 80091c4:	dc64      	bgt.n	8009290 <PostReadDataStream+0x104>
 80091c6:	2b38      	cmp	r3, #56	; 0x38
 80091c8:	d038      	beq.n	800923c <PostReadDataStream+0xb0>
 80091ca:	2b38      	cmp	r3, #56	; 0x38
 80091cc:	dc60      	bgt.n	8009290 <PostReadDataStream+0x104>
 80091ce:	2b17      	cmp	r3, #23
 80091d0:	d010      	beq.n	80091f4 <PostReadDataStream+0x68>
 80091d2:	2b19      	cmp	r3, #25
 80091d4:	d019      	beq.n	800920a <PostReadDataStream+0x7e>
			break;
		}

					default :
					/* The critical point. The library don't have such command to handle */
						break;
 80091d6:	e05b      	b.n	8009290 <PostReadDataStream+0x104>
	switch (serialAPI_CurCmd_->_commandID)
 80091d8:	3b66      	subs	r3, #102	; 0x66
 80091da:	4a30      	ldr	r2, [pc, #192]	; (800929c <PostReadDataStream+0x110>)
 80091dc:	fa22 f303 	lsr.w	r3, r2, r3
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	bf14      	ite	ne
 80091e8:	2301      	movne	r3, #1
 80091ea:	2300      	moveq	r3, #0
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d140      	bne.n	8009274 <PostReadDataStream+0xe8>
						break;
 80091f2:	e04d      	b.n	8009290 <PostReadDataStream+0x104>
			gSBGC->_api->readBuff(gSBGC, serialAPI_CurCmdDest_, SIZEOF_REALTIME_DATA_3);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	6852      	ldr	r2, [r2, #4]
 80091fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009200:	6951      	ldr	r1, [r2, #20]
 8009202:	223f      	movs	r2, #63	; 0x3f
 8009204:	6878      	ldr	r0, [r7, #4]
 8009206:	4798      	blx	r3
			break;
 8009208:	e043      	b.n	8009292 <PostReadDataStream+0x106>
						gSBGC->_api->readBuff(gSBGC, serialAPI_CurCmdDest_, sizeof(sbgcRealTimeData_t));
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6852      	ldr	r2, [r2, #4]
 8009214:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009216:	6951      	ldr	r1, [r2, #20]
 8009218:	227c      	movs	r2, #124	; 0x7c
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	4798      	blx	r3
						break;
 800921e:	e038      	b.n	8009292 <PostReadDataStream+0x106>
			gSBGC->_api->readBuff(gSBGC, serialAPI_CurCmdDest_, serialAPI_CurCmd_->_payloadSize);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009226:	687a      	ldr	r2, [r7, #4]
 8009228:	6852      	ldr	r2, [r2, #4]
 800922a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800922c:	6951      	ldr	r1, [r2, #20]
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6852      	ldr	r2, [r2, #4]
 8009232:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009234:	7f12      	ldrb	r2, [r2, #28]
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	4798      	blx	r3
			break;
 800923a:	e02a      	b.n	8009292 <PostReadDataStream+0x106>
						gSBGC->_api->readBuff(gSBGC, serialAPI_CurCmdDest_, serialAPI_CurCmd_->_payloadSize);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009242:	687a      	ldr	r2, [r7, #4]
 8009244:	6852      	ldr	r2, [r2, #4]
 8009246:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009248:	6951      	ldr	r1, [r2, #20]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	6852      	ldr	r2, [r2, #4]
 800924e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009250:	7f12      	ldrb	r2, [r2, #28]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	4798      	blx	r3
						for (ui8 i = 0; i < 6; i++) gSBGC->_api->readLong(gSBGC);
 8009256:	2300      	movs	r3, #0
 8009258:	73fb      	strb	r3, [r7, #15]
 800925a:	e007      	b.n	800926c <PostReadDataStream+0xe0>
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	4798      	blx	r3
 8009266:	7bfb      	ldrb	r3, [r7, #15]
 8009268:	3301      	adds	r3, #1
 800926a:	73fb      	strb	r3, [r7, #15]
 800926c:	7bfb      	ldrb	r3, [r7, #15]
 800926e:	2b05      	cmp	r3, #5
 8009270:	d9f4      	bls.n	800925c <PostReadDataStream+0xd0>
						break;
 8009272:	e00e      	b.n	8009292 <PostReadDataStream+0x106>
			gSBGC->_api->readBuff(gSBGC, serialAPI_CurCmdDest_, serialAPI_CurCmd_->_payloadSize);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800927a:	687a      	ldr	r2, [r7, #4]
 800927c:	6852      	ldr	r2, [r2, #4]
 800927e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009280:	6951      	ldr	r1, [r2, #20]
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	6852      	ldr	r2, [r2, #4]
 8009286:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009288:	7f12      	ldrb	r2, [r2, #28]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	4798      	blx	r3
			break;
 800928e:	e000      	b.n	8009292 <PostReadDataStream+0x106>
						break;
 8009290:	bf00      	nop
	}
}
 8009292:	bf00      	nop
 8009294:	3710      	adds	r7, #16
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
 800929a:	bf00      	nop
 800929c:	22000001 	.word	0x22000001

080092a0 <SBGC32_ReadDataStream>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadDataStream (sbgcGeneral_t *gSBGC, sbgcDataStreamCommand_t cmdID, void *dataStreamStruct, ui8 size
										   /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80092a0:	b590      	push	{r4, r7, lr}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	607a      	str	r2, [r7, #4]
 80092aa:	461a      	mov	r2, r3
 80092ac:	460b      	mov	r3, r1
 80092ae:	72fb      	strb	r3, [r7, #11]
 80092b0:	4613      	mov	r3, r2
 80092b2:	72bb      	strb	r3, [r7, #10]
			return sbgcCOMMAND_NOT_SUPPORTED_BY_FIRMWARE;

	#endif

	/* It's necessary to lock SerialAPI before Rx operation */
	serialAPI_LockRead()
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <SBGC32_ReadDataStream+0x22>
 80092be:	230a      	movs	r3, #10
 80092c0:	e021      	b.n	8009306 <SBGC32_ReadDataStream+0x66>
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	701a      	strb	r2, [r3, #0]

	gSBGC->_api->startRead(gSBGC, (serialAPI_CommandID_t)cmdID SBGC_ADVANCED_ARGS__);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d0:	7afa      	ldrb	r2, [r7, #11]
 80092d2:	4611      	mov	r1, r2
 80092d4:	68f8      	ldr	r0, [r7, #12]
 80092d6:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, PostReadDataStream, dataStreamStruct, size);
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80092e0:	7abb      	ldrb	r3, [r7, #10]
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	687a      	ldr	r2, [r7, #4]
 80092e6:	490a      	ldr	r1, [pc, #40]	; (8009310 <SBGC32_ReadDataStream+0x70>)
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	685b      	ldr	r3, [r3, #4]
 80092fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009300:	68f8      	ldr	r0, [r7, #12]
 8009302:	4798      	blx	r3
 8009304:	4603      	mov	r3, r0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	bd90      	pop	{r4, r7, pc}
 800930e:	bf00      	nop
 8009310:	0800918d 	.word	0x0800918d

08009314 <SBGC32_ReadRealTimeData4>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadRealTimeData4 (sbgcGeneral_t *gSBGC, sbgcRealTimeData_t *realTimeData
											  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009314:	b590      	push	{r4, r7, lr}
 8009316:	b083      	sub	sp, #12
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
	gSBGC->_api->startWrite(gSBGC, CMD_REALTIME_DATA_4 SBGC_ADVANCED_ARGS__);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009324:	2119      	movs	r1, #25
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_REALTIME_DATA_4 SBGC_ADVANCED_ARGS__);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800933c:	2119      	movs	r1, #25
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, NULL, realTimeData, sizeof(sbgcRealTimeData_t));
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 800934a:	237c      	movs	r3, #124	; 0x7c
 800934c:	683a      	ldr	r2, [r7, #0]
 800934e:	2100      	movs	r1, #0
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	685b      	ldr	r3, [r3, #4]
 8009364:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	4798      	blx	r3
 8009378:	4603      	mov	r3, r0
}
 800937a:	4618      	mov	r0, r3
 800937c:	370c      	adds	r7, #12
 800937e:	46bd      	mov	sp, r7
 8009380:	bd90      	pop	{r4, r7, pc}

08009382 <SBGC32_ReadBoardInfo>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadBoardInfo (sbgcGeneral_t *gSBGC, sbgcBoardInfo_t *boardInfo, ui16 cfg
										  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009382:	b590      	push	{r4, r7, lr}
 8009384:	b085      	sub	sp, #20
 8009386:	af00      	add	r7, sp, #0
 8009388:	60f8      	str	r0, [r7, #12]
 800938a:	60b9      	str	r1, [r7, #8]
 800938c:	4613      	mov	r3, r2
 800938e:	80fb      	strh	r3, [r7, #6]
	gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO SBGC_ADVANCED_ARGS__);
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	685b      	ldr	r3, [r3, #4]
 8009394:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009396:	2156      	movs	r1, #86	; 0x56
 8009398:	68f8      	ldr	r0, [r7, #12]
 800939a:	4798      	blx	r3
	gSBGC->_api->writeWord(gSBGC, cfg);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	685b      	ldr	r3, [r3, #4]
 80093a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093a2:	88fa      	ldrh	r2, [r7, #6]
 80093a4:	4611      	mov	r1, r2
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO SBGC_ADVANCED_ARGS__);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093bc:	2156      	movs	r1, #86	; 0x56
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, NULL, boardInfo, sizeof(sbgcBoardInfo_t));
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80093ca:	2312      	movs	r3, #18
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	2100      	movs	r1, #0
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80093e8:	68f8      	ldr	r0, [r7, #12]
 80093ea:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	685b      	ldr	r3, [r3, #4]
 80093f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093f4:	68f8      	ldr	r0, [r7, #12]
 80093f6:	4798      	blx	r3
 80093f8:	4603      	mov	r3, r0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd90      	pop	{r4, r7, pc}

08009402 <SBGC32_ReadBoardInfo3>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadBoardInfo3 (sbgcGeneral_t *gSBGC, sbgcBoardInfo3_t *boardInfo3
										   /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009402:	b590      	push	{r4, r7, lr}
 8009404:	b083      	sub	sp, #12
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
	gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO_3 SBGC_ADVANCED_ARGS__);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009412:	2114      	movs	r1, #20
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO_3 SBGC_ADVANCED_ARGS__);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	685b      	ldr	r3, [r3, #4]
 8009428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800942a:	2114      	movs	r1, #20
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, NULL, boardInfo3, sizeof(sbgcBoardInfo3_t));
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8009438:	2345      	movs	r3, #69	; 0x45
 800943a:	683a      	ldr	r2, [r7, #0]
 800943c:	2100      	movs	r1, #0
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	4798      	blx	r3
 8009466:	4603      	mov	r3, r0
}
 8009468:	4618      	mov	r0, r3
 800946a:	370c      	adds	r7, #12
 800946c:	46bd      	mov	sp, r7
 800946e:	bd90      	pop	{r4, r7, pc}

08009470 <SBGC32_PlayBeeper>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_PlayBeeper (sbgcGeneral_t *gSBGC, const sbgcBeeperSettings_t *beeperSettings
									   /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
	gSBGC->_api->startWrite(gSBGC, CMD_BEEP_SOUND SBGC_ADVANCED_ARGS__);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	685b      	ldr	r3, [r3, #4]
 800947e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009480:	2159      	movs	r1, #89	; 0x59
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	4798      	blx	r3
	gSBGC->_api->writeWord(gSBGC, beeperSettings->mode);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	8812      	ldrh	r2, [r2, #0]
 8009490:	b292      	uxth	r2, r2
 8009492:	4611      	mov	r1, r2
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, beeperSettings->noteLength);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800949e:	683a      	ldr	r2, [r7, #0]
 80094a0:	7892      	ldrb	r2, [r2, #2]
 80094a2:	4611      	mov	r1, r2
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, beeperSettings->decayFactor);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	78d2      	ldrb	r2, [r2, #3]
 80094b2:	4611      	mov	r1, r2
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	4798      	blx	r3
	gSBGC->_api->writeEmptyBuff(gSBGC, 8);  // reserved[8]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094be:	2108      	movs	r1, #8
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	4798      	blx	r3

	if (beeperSettings->mode == BEEP_MODE_CUSTOM_MELODY)
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	881b      	ldrh	r3, [r3, #0]
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ce:	d116      	bne.n	80094fe <SBGC32_PlayBeeper+0x8e>
		for (ui8 i = 0; i < beeperSettings->notesQuan; i++)
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]
 80094d4:	e00e      	b.n	80094f4 <SBGC32_PlayBeeper+0x84>
			gSBGC->_api->writeWord(gSBGC, beeperSettings->notesFreqHz[i]);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	685b      	ldr	r3, [r3, #4]
 80094da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	68d1      	ldr	r1, [r2, #12]
 80094e0:	7bfa      	ldrb	r2, [r7, #15]
 80094e2:	0052      	lsls	r2, r2, #1
 80094e4:	440a      	add	r2, r1
 80094e6:	8812      	ldrh	r2, [r2, #0]
 80094e8:	4611      	mov	r1, r2
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	4798      	blx	r3
		for (ui8 i = 0; i < beeperSettings->notesQuan; i++)
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	3301      	adds	r3, #1
 80094f2:	73fb      	strb	r3, [r7, #15]
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	7c1b      	ldrb	r3, [r3, #16]
 80094f8:	7bfa      	ldrb	r2, [r7, #15]
 80094fa:	429a      	cmp	r2, r3
 80094fc:	d3eb      	bcc.n	80094d6 <SBGC32_PlayBeeper+0x66>

	gSBGC->_api->finishWrite(gSBGC);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	4798      	blx	r3
	/* No need confirmation */

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	685b      	ldr	r3, [r3, #4]
 800950e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	4798      	blx	r3
 8009516:	4603      	mov	r3, r0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <PrivateSBGC32_EnterInit>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t PrivateSBGC32_EnterInit (sbgcGeneral_t *gSBGC)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af02      	add	r7, sp, #8
 8009526:	6078      	str	r0, [r7, #4]

			DriverSBGC32_Init(&gSBGC->_ll->drv, SBGC_SERIAL_PORT, SBGC_SERIAL_SPEED);

		#elif (SBGC_USE_STM32_DRIVER)

			SerialAPI_LinkDriver(gSBGC, DriverSBGC32_UartTransmitData, DriverSBGC32_UartReceiveByte, DriverSBGC32_GetAvailableBytes,
 8009528:	4b0c      	ldr	r3, [pc, #48]	; (800955c <PrivateSBGC32_EnterInit+0x3c>)
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	4b0c      	ldr	r3, [pc, #48]	; (8009560 <PrivateSBGC32_EnterInit+0x40>)
 800952e:	9300      	str	r3, [sp, #0]
 8009530:	4b0c      	ldr	r3, [pc, #48]	; (8009564 <PrivateSBGC32_EnterInit+0x44>)
 8009532:	4a0d      	ldr	r2, [pc, #52]	; (8009568 <PrivateSBGC32_EnterInit+0x48>)
 8009534:	490d      	ldr	r1, [pc, #52]	; (800956c <PrivateSBGC32_EnterInit+0x4c>)
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7fe f946 	bl	80077c8 <SerialAPI_LinkDriver>
								 DriverSBGC32_UartTransmitDebugData, DriverSBGC32_GetTimeMs);

			DriverSBGC32_Init(&gSBGC->_ll->drv, SBGC_SERIAL_PORT, SBGC_REFERENCE_TIMER);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a0b      	ldr	r2, [pc, #44]	; (8009570 <PrivateSBGC32_EnterInit+0x50>)
 8009542:	490c      	ldr	r1, [pc, #48]	; (8009574 <PrivateSBGC32_EnterInit+0x54>)
 8009544:	4618      	mov	r0, r3
 8009546:	f7ff f8d7 	bl	80086f8 <DriverSBGC32_Init>

		#endif
	#endif

	return SBGC32_SetupLibrary(gSBGC);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f7fd fff4 	bl	8007538 <SBGC32_SetupLibrary>
 8009550:	4603      	mov	r3, r0
}
 8009552:	4618      	mov	r0, r3
 8009554:	3708      	adds	r7, #8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop
 800955c:	080087b7 	.word	0x080087b7
 8009560:	08008aa9 	.word	0x08008aa9
 8009564:	08008935 	.word	0x08008935
 8009568:	080089a3 	.word	0x080089a3
 800956c:	080087f5 	.word	0x080087f5
 8009570:	20000bb0 	.word	0x20000bb0
 8009574:	20000bfc 	.word	0x20000bfc

08009578 <SBGC32_Init>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_Init (sbgcGeneral_t *gSBGC)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	#endif

	#if (SBGC_USES_OS_SUPPORT)
		SystemSBGC32_Init(gSBGC);
	#else
		return PrivateSBGC32_EnterInit(gSBGC);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff ffcd 	bl	8009520 <PrivateSBGC32_EnterInit>
 8009586:	4603      	mov	r3, r0
	#endif

	return sbgcCOMMAND_OK;
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <malloc>:
 8009590:	4b02      	ldr	r3, [pc, #8]	; (800959c <malloc+0xc>)
 8009592:	4601      	mov	r1, r0
 8009594:	6818      	ldr	r0, [r3, #0]
 8009596:	f000 b823 	b.w	80095e0 <_malloc_r>
 800959a:	bf00      	nop
 800959c:	20000614 	.word	0x20000614

080095a0 <sbrk_aligned>:
 80095a0:	b570      	push	{r4, r5, r6, lr}
 80095a2:	4e0e      	ldr	r6, [pc, #56]	; (80095dc <sbrk_aligned+0x3c>)
 80095a4:	460c      	mov	r4, r1
 80095a6:	6831      	ldr	r1, [r6, #0]
 80095a8:	4605      	mov	r5, r0
 80095aa:	b911      	cbnz	r1, 80095b2 <sbrk_aligned+0x12>
 80095ac:	f001 f85a 	bl	800a664 <_sbrk_r>
 80095b0:	6030      	str	r0, [r6, #0]
 80095b2:	4621      	mov	r1, r4
 80095b4:	4628      	mov	r0, r5
 80095b6:	f001 f855 	bl	800a664 <_sbrk_r>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d00a      	beq.n	80095d4 <sbrk_aligned+0x34>
 80095be:	1cc4      	adds	r4, r0, #3
 80095c0:	f024 0403 	bic.w	r4, r4, #3
 80095c4:	42a0      	cmp	r0, r4
 80095c6:	d007      	beq.n	80095d8 <sbrk_aligned+0x38>
 80095c8:	1a21      	subs	r1, r4, r0
 80095ca:	4628      	mov	r0, r5
 80095cc:	f001 f84a 	bl	800a664 <_sbrk_r>
 80095d0:	3001      	adds	r0, #1
 80095d2:	d101      	bne.n	80095d8 <sbrk_aligned+0x38>
 80095d4:	f04f 34ff 	mov.w	r4, #4294967295
 80095d8:	4620      	mov	r0, r4
 80095da:	bd70      	pop	{r4, r5, r6, pc}
 80095dc:	20000d24 	.word	0x20000d24

080095e0 <_malloc_r>:
 80095e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095e4:	1ccd      	adds	r5, r1, #3
 80095e6:	f025 0503 	bic.w	r5, r5, #3
 80095ea:	3508      	adds	r5, #8
 80095ec:	2d0c      	cmp	r5, #12
 80095ee:	bf38      	it	cc
 80095f0:	250c      	movcc	r5, #12
 80095f2:	2d00      	cmp	r5, #0
 80095f4:	4607      	mov	r7, r0
 80095f6:	db01      	blt.n	80095fc <_malloc_r+0x1c>
 80095f8:	42a9      	cmp	r1, r5
 80095fa:	d905      	bls.n	8009608 <_malloc_r+0x28>
 80095fc:	230c      	movs	r3, #12
 80095fe:	603b      	str	r3, [r7, #0]
 8009600:	2600      	movs	r6, #0
 8009602:	4630      	mov	r0, r6
 8009604:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009608:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80096dc <_malloc_r+0xfc>
 800960c:	f000 f868 	bl	80096e0 <__malloc_lock>
 8009610:	f8d8 3000 	ldr.w	r3, [r8]
 8009614:	461c      	mov	r4, r3
 8009616:	bb5c      	cbnz	r4, 8009670 <_malloc_r+0x90>
 8009618:	4629      	mov	r1, r5
 800961a:	4638      	mov	r0, r7
 800961c:	f7ff ffc0 	bl	80095a0 <sbrk_aligned>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	4604      	mov	r4, r0
 8009624:	d155      	bne.n	80096d2 <_malloc_r+0xf2>
 8009626:	f8d8 4000 	ldr.w	r4, [r8]
 800962a:	4626      	mov	r6, r4
 800962c:	2e00      	cmp	r6, #0
 800962e:	d145      	bne.n	80096bc <_malloc_r+0xdc>
 8009630:	2c00      	cmp	r4, #0
 8009632:	d048      	beq.n	80096c6 <_malloc_r+0xe6>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	4631      	mov	r1, r6
 8009638:	4638      	mov	r0, r7
 800963a:	eb04 0903 	add.w	r9, r4, r3
 800963e:	f001 f811 	bl	800a664 <_sbrk_r>
 8009642:	4581      	cmp	r9, r0
 8009644:	d13f      	bne.n	80096c6 <_malloc_r+0xe6>
 8009646:	6821      	ldr	r1, [r4, #0]
 8009648:	1a6d      	subs	r5, r5, r1
 800964a:	4629      	mov	r1, r5
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff ffa7 	bl	80095a0 <sbrk_aligned>
 8009652:	3001      	adds	r0, #1
 8009654:	d037      	beq.n	80096c6 <_malloc_r+0xe6>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	442b      	add	r3, r5
 800965a:	6023      	str	r3, [r4, #0]
 800965c:	f8d8 3000 	ldr.w	r3, [r8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d038      	beq.n	80096d6 <_malloc_r+0xf6>
 8009664:	685a      	ldr	r2, [r3, #4]
 8009666:	42a2      	cmp	r2, r4
 8009668:	d12b      	bne.n	80096c2 <_malloc_r+0xe2>
 800966a:	2200      	movs	r2, #0
 800966c:	605a      	str	r2, [r3, #4]
 800966e:	e00f      	b.n	8009690 <_malloc_r+0xb0>
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	1b52      	subs	r2, r2, r5
 8009674:	d41f      	bmi.n	80096b6 <_malloc_r+0xd6>
 8009676:	2a0b      	cmp	r2, #11
 8009678:	d917      	bls.n	80096aa <_malloc_r+0xca>
 800967a:	1961      	adds	r1, r4, r5
 800967c:	42a3      	cmp	r3, r4
 800967e:	6025      	str	r5, [r4, #0]
 8009680:	bf18      	it	ne
 8009682:	6059      	strne	r1, [r3, #4]
 8009684:	6863      	ldr	r3, [r4, #4]
 8009686:	bf08      	it	eq
 8009688:	f8c8 1000 	streq.w	r1, [r8]
 800968c:	5162      	str	r2, [r4, r5]
 800968e:	604b      	str	r3, [r1, #4]
 8009690:	4638      	mov	r0, r7
 8009692:	f104 060b 	add.w	r6, r4, #11
 8009696:	f000 f829 	bl	80096ec <__malloc_unlock>
 800969a:	f026 0607 	bic.w	r6, r6, #7
 800969e:	1d23      	adds	r3, r4, #4
 80096a0:	1af2      	subs	r2, r6, r3
 80096a2:	d0ae      	beq.n	8009602 <_malloc_r+0x22>
 80096a4:	1b9b      	subs	r3, r3, r6
 80096a6:	50a3      	str	r3, [r4, r2]
 80096a8:	e7ab      	b.n	8009602 <_malloc_r+0x22>
 80096aa:	42a3      	cmp	r3, r4
 80096ac:	6862      	ldr	r2, [r4, #4]
 80096ae:	d1dd      	bne.n	800966c <_malloc_r+0x8c>
 80096b0:	f8c8 2000 	str.w	r2, [r8]
 80096b4:	e7ec      	b.n	8009690 <_malloc_r+0xb0>
 80096b6:	4623      	mov	r3, r4
 80096b8:	6864      	ldr	r4, [r4, #4]
 80096ba:	e7ac      	b.n	8009616 <_malloc_r+0x36>
 80096bc:	4634      	mov	r4, r6
 80096be:	6876      	ldr	r6, [r6, #4]
 80096c0:	e7b4      	b.n	800962c <_malloc_r+0x4c>
 80096c2:	4613      	mov	r3, r2
 80096c4:	e7cc      	b.n	8009660 <_malloc_r+0x80>
 80096c6:	230c      	movs	r3, #12
 80096c8:	603b      	str	r3, [r7, #0]
 80096ca:	4638      	mov	r0, r7
 80096cc:	f000 f80e 	bl	80096ec <__malloc_unlock>
 80096d0:	e797      	b.n	8009602 <_malloc_r+0x22>
 80096d2:	6025      	str	r5, [r4, #0]
 80096d4:	e7dc      	b.n	8009690 <_malloc_r+0xb0>
 80096d6:	605b      	str	r3, [r3, #4]
 80096d8:	deff      	udf	#255	; 0xff
 80096da:	bf00      	nop
 80096dc:	20000d20 	.word	0x20000d20

080096e0 <__malloc_lock>:
 80096e0:	4801      	ldr	r0, [pc, #4]	; (80096e8 <__malloc_lock+0x8>)
 80096e2:	f7f8 bab8 	b.w	8001c56 <__retarget_lock_acquire_recursive>
 80096e6:	bf00      	nop
 80096e8:	20000d10 	.word	0x20000d10

080096ec <__malloc_unlock>:
 80096ec:	4801      	ldr	r0, [pc, #4]	; (80096f4 <__malloc_unlock+0x8>)
 80096ee:	f7f8 bac6 	b.w	8001c7e <__retarget_lock_release_recursive>
 80096f2:	bf00      	nop
 80096f4:	20000d10 	.word	0x20000d10

080096f8 <__cvt>:
 80096f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096fa:	ed2d 8b02 	vpush	{d8}
 80096fe:	eeb0 8b40 	vmov.f64	d8, d0
 8009702:	b085      	sub	sp, #20
 8009704:	4617      	mov	r7, r2
 8009706:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009708:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800970a:	ee18 2a90 	vmov	r2, s17
 800970e:	f025 0520 	bic.w	r5, r5, #32
 8009712:	2a00      	cmp	r2, #0
 8009714:	bfb6      	itet	lt
 8009716:	222d      	movlt	r2, #45	; 0x2d
 8009718:	2200      	movge	r2, #0
 800971a:	eeb1 8b40 	vneglt.f64	d8, d0
 800971e:	2d46      	cmp	r5, #70	; 0x46
 8009720:	460c      	mov	r4, r1
 8009722:	701a      	strb	r2, [r3, #0]
 8009724:	d004      	beq.n	8009730 <__cvt+0x38>
 8009726:	2d45      	cmp	r5, #69	; 0x45
 8009728:	d100      	bne.n	800972c <__cvt+0x34>
 800972a:	3401      	adds	r4, #1
 800972c:	2102      	movs	r1, #2
 800972e:	e000      	b.n	8009732 <__cvt+0x3a>
 8009730:	2103      	movs	r1, #3
 8009732:	ab03      	add	r3, sp, #12
 8009734:	9301      	str	r3, [sp, #4]
 8009736:	ab02      	add	r3, sp, #8
 8009738:	9300      	str	r3, [sp, #0]
 800973a:	4622      	mov	r2, r4
 800973c:	4633      	mov	r3, r6
 800973e:	eeb0 0b48 	vmov.f64	d0, d8
 8009742:	f001 f879 	bl	800a838 <_dtoa_r>
 8009746:	2d47      	cmp	r5, #71	; 0x47
 8009748:	d101      	bne.n	800974e <__cvt+0x56>
 800974a:	07fb      	lsls	r3, r7, #31
 800974c:	d51a      	bpl.n	8009784 <__cvt+0x8c>
 800974e:	2d46      	cmp	r5, #70	; 0x46
 8009750:	eb00 0204 	add.w	r2, r0, r4
 8009754:	d10c      	bne.n	8009770 <__cvt+0x78>
 8009756:	7803      	ldrb	r3, [r0, #0]
 8009758:	2b30      	cmp	r3, #48	; 0x30
 800975a:	d107      	bne.n	800976c <__cvt+0x74>
 800975c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009764:	bf1c      	itt	ne
 8009766:	f1c4 0401 	rsbne	r4, r4, #1
 800976a:	6034      	strne	r4, [r6, #0]
 800976c:	6833      	ldr	r3, [r6, #0]
 800976e:	441a      	add	r2, r3
 8009770:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009778:	bf08      	it	eq
 800977a:	9203      	streq	r2, [sp, #12]
 800977c:	2130      	movs	r1, #48	; 0x30
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	4293      	cmp	r3, r2
 8009782:	d307      	bcc.n	8009794 <__cvt+0x9c>
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009788:	1a1b      	subs	r3, r3, r0
 800978a:	6013      	str	r3, [r2, #0]
 800978c:	b005      	add	sp, #20
 800978e:	ecbd 8b02 	vpop	{d8}
 8009792:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009794:	1c5c      	adds	r4, r3, #1
 8009796:	9403      	str	r4, [sp, #12]
 8009798:	7019      	strb	r1, [r3, #0]
 800979a:	e7f0      	b.n	800977e <__cvt+0x86>

0800979c <__exponent>:
 800979c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800979e:	4603      	mov	r3, r0
 80097a0:	2900      	cmp	r1, #0
 80097a2:	bfb8      	it	lt
 80097a4:	4249      	neglt	r1, r1
 80097a6:	f803 2b02 	strb.w	r2, [r3], #2
 80097aa:	bfb4      	ite	lt
 80097ac:	222d      	movlt	r2, #45	; 0x2d
 80097ae:	222b      	movge	r2, #43	; 0x2b
 80097b0:	2909      	cmp	r1, #9
 80097b2:	7042      	strb	r2, [r0, #1]
 80097b4:	dd2a      	ble.n	800980c <__exponent+0x70>
 80097b6:	f10d 0207 	add.w	r2, sp, #7
 80097ba:	4617      	mov	r7, r2
 80097bc:	260a      	movs	r6, #10
 80097be:	4694      	mov	ip, r2
 80097c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80097c4:	fb06 1415 	mls	r4, r6, r5, r1
 80097c8:	3430      	adds	r4, #48	; 0x30
 80097ca:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80097ce:	460c      	mov	r4, r1
 80097d0:	2c63      	cmp	r4, #99	; 0x63
 80097d2:	f102 32ff 	add.w	r2, r2, #4294967295
 80097d6:	4629      	mov	r1, r5
 80097d8:	dcf1      	bgt.n	80097be <__exponent+0x22>
 80097da:	3130      	adds	r1, #48	; 0x30
 80097dc:	f1ac 0402 	sub.w	r4, ip, #2
 80097e0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80097e4:	1c41      	adds	r1, r0, #1
 80097e6:	4622      	mov	r2, r4
 80097e8:	42ba      	cmp	r2, r7
 80097ea:	d30a      	bcc.n	8009802 <__exponent+0x66>
 80097ec:	f10d 0209 	add.w	r2, sp, #9
 80097f0:	eba2 020c 	sub.w	r2, r2, ip
 80097f4:	42bc      	cmp	r4, r7
 80097f6:	bf88      	it	hi
 80097f8:	2200      	movhi	r2, #0
 80097fa:	4413      	add	r3, r2
 80097fc:	1a18      	subs	r0, r3, r0
 80097fe:	b003      	add	sp, #12
 8009800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009802:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009806:	f801 5f01 	strb.w	r5, [r1, #1]!
 800980a:	e7ed      	b.n	80097e8 <__exponent+0x4c>
 800980c:	2330      	movs	r3, #48	; 0x30
 800980e:	3130      	adds	r1, #48	; 0x30
 8009810:	7083      	strb	r3, [r0, #2]
 8009812:	70c1      	strb	r1, [r0, #3]
 8009814:	1d03      	adds	r3, r0, #4
 8009816:	e7f1      	b.n	80097fc <__exponent+0x60>

08009818 <_printf_float>:
 8009818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981c:	b08b      	sub	sp, #44	; 0x2c
 800981e:	460c      	mov	r4, r1
 8009820:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009824:	4616      	mov	r6, r2
 8009826:	461f      	mov	r7, r3
 8009828:	4605      	mov	r5, r0
 800982a:	f000 fee3 	bl	800a5f4 <_localeconv_r>
 800982e:	f8d0 b000 	ldr.w	fp, [r0]
 8009832:	4658      	mov	r0, fp
 8009834:	f7f6 fd54 	bl	80002e0 <strlen>
 8009838:	2300      	movs	r3, #0
 800983a:	9308      	str	r3, [sp, #32]
 800983c:	f8d8 3000 	ldr.w	r3, [r8]
 8009840:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009844:	6822      	ldr	r2, [r4, #0]
 8009846:	3307      	adds	r3, #7
 8009848:	f023 0307 	bic.w	r3, r3, #7
 800984c:	f103 0108 	add.w	r1, r3, #8
 8009850:	f8c8 1000 	str.w	r1, [r8]
 8009854:	ed93 0b00 	vldr	d0, [r3]
 8009858:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009ab8 <_printf_float+0x2a0>
 800985c:	eeb0 7bc0 	vabs.f64	d7, d0
 8009860:	eeb4 7b46 	vcmp.f64	d7, d6
 8009864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009868:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 800986c:	4682      	mov	sl, r0
 800986e:	dd24      	ble.n	80098ba <_printf_float+0xa2>
 8009870:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009878:	d502      	bpl.n	8009880 <_printf_float+0x68>
 800987a:	232d      	movs	r3, #45	; 0x2d
 800987c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009880:	498f      	ldr	r1, [pc, #572]	; (8009ac0 <_printf_float+0x2a8>)
 8009882:	4b90      	ldr	r3, [pc, #576]	; (8009ac4 <_printf_float+0x2ac>)
 8009884:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009888:	bf94      	ite	ls
 800988a:	4688      	movls	r8, r1
 800988c:	4698      	movhi	r8, r3
 800988e:	2303      	movs	r3, #3
 8009890:	6123      	str	r3, [r4, #16]
 8009892:	f022 0204 	bic.w	r2, r2, #4
 8009896:	2300      	movs	r3, #0
 8009898:	6022      	str	r2, [r4, #0]
 800989a:	9304      	str	r3, [sp, #16]
 800989c:	9700      	str	r7, [sp, #0]
 800989e:	4633      	mov	r3, r6
 80098a0:	aa09      	add	r2, sp, #36	; 0x24
 80098a2:	4621      	mov	r1, r4
 80098a4:	4628      	mov	r0, r5
 80098a6:	f000 f9d1 	bl	8009c4c <_printf_common>
 80098aa:	3001      	adds	r0, #1
 80098ac:	f040 808a 	bne.w	80099c4 <_printf_float+0x1ac>
 80098b0:	f04f 30ff 	mov.w	r0, #4294967295
 80098b4:	b00b      	add	sp, #44	; 0x2c
 80098b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ba:	eeb4 0b40 	vcmp.f64	d0, d0
 80098be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c2:	d709      	bvc.n	80098d8 <_printf_float+0xc0>
 80098c4:	ee10 3a90 	vmov	r3, s1
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	bfbc      	itt	lt
 80098cc:	232d      	movlt	r3, #45	; 0x2d
 80098ce:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80098d2:	497d      	ldr	r1, [pc, #500]	; (8009ac8 <_printf_float+0x2b0>)
 80098d4:	4b7d      	ldr	r3, [pc, #500]	; (8009acc <_printf_float+0x2b4>)
 80098d6:	e7d5      	b.n	8009884 <_printf_float+0x6c>
 80098d8:	6863      	ldr	r3, [r4, #4]
 80098da:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80098de:	9104      	str	r1, [sp, #16]
 80098e0:	1c59      	adds	r1, r3, #1
 80098e2:	d13c      	bne.n	800995e <_printf_float+0x146>
 80098e4:	2306      	movs	r3, #6
 80098e6:	6063      	str	r3, [r4, #4]
 80098e8:	2300      	movs	r3, #0
 80098ea:	9303      	str	r3, [sp, #12]
 80098ec:	ab08      	add	r3, sp, #32
 80098ee:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80098f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80098f6:	ab07      	add	r3, sp, #28
 80098f8:	6861      	ldr	r1, [r4, #4]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	6022      	str	r2, [r4, #0]
 80098fe:	f10d 031b 	add.w	r3, sp, #27
 8009902:	4628      	mov	r0, r5
 8009904:	f7ff fef8 	bl	80096f8 <__cvt>
 8009908:	9b04      	ldr	r3, [sp, #16]
 800990a:	9907      	ldr	r1, [sp, #28]
 800990c:	2b47      	cmp	r3, #71	; 0x47
 800990e:	4680      	mov	r8, r0
 8009910:	d108      	bne.n	8009924 <_printf_float+0x10c>
 8009912:	1cc8      	adds	r0, r1, #3
 8009914:	db02      	blt.n	800991c <_printf_float+0x104>
 8009916:	6863      	ldr	r3, [r4, #4]
 8009918:	4299      	cmp	r1, r3
 800991a:	dd41      	ble.n	80099a0 <_printf_float+0x188>
 800991c:	f1a9 0902 	sub.w	r9, r9, #2
 8009920:	fa5f f989 	uxtb.w	r9, r9
 8009924:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009928:	d820      	bhi.n	800996c <_printf_float+0x154>
 800992a:	3901      	subs	r1, #1
 800992c:	464a      	mov	r2, r9
 800992e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009932:	9107      	str	r1, [sp, #28]
 8009934:	f7ff ff32 	bl	800979c <__exponent>
 8009938:	9a08      	ldr	r2, [sp, #32]
 800993a:	9004      	str	r0, [sp, #16]
 800993c:	1813      	adds	r3, r2, r0
 800993e:	2a01      	cmp	r2, #1
 8009940:	6123      	str	r3, [r4, #16]
 8009942:	dc02      	bgt.n	800994a <_printf_float+0x132>
 8009944:	6822      	ldr	r2, [r4, #0]
 8009946:	07d2      	lsls	r2, r2, #31
 8009948:	d501      	bpl.n	800994e <_printf_float+0x136>
 800994a:	3301      	adds	r3, #1
 800994c:	6123      	str	r3, [r4, #16]
 800994e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d0a2      	beq.n	800989c <_printf_float+0x84>
 8009956:	232d      	movs	r3, #45	; 0x2d
 8009958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800995c:	e79e      	b.n	800989c <_printf_float+0x84>
 800995e:	9904      	ldr	r1, [sp, #16]
 8009960:	2947      	cmp	r1, #71	; 0x47
 8009962:	d1c1      	bne.n	80098e8 <_printf_float+0xd0>
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1bf      	bne.n	80098e8 <_printf_float+0xd0>
 8009968:	2301      	movs	r3, #1
 800996a:	e7bc      	b.n	80098e6 <_printf_float+0xce>
 800996c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009970:	d118      	bne.n	80099a4 <_printf_float+0x18c>
 8009972:	2900      	cmp	r1, #0
 8009974:	6863      	ldr	r3, [r4, #4]
 8009976:	dd0b      	ble.n	8009990 <_printf_float+0x178>
 8009978:	6121      	str	r1, [r4, #16]
 800997a:	b913      	cbnz	r3, 8009982 <_printf_float+0x16a>
 800997c:	6822      	ldr	r2, [r4, #0]
 800997e:	07d0      	lsls	r0, r2, #31
 8009980:	d502      	bpl.n	8009988 <_printf_float+0x170>
 8009982:	3301      	adds	r3, #1
 8009984:	440b      	add	r3, r1
 8009986:	6123      	str	r3, [r4, #16]
 8009988:	2300      	movs	r3, #0
 800998a:	65a1      	str	r1, [r4, #88]	; 0x58
 800998c:	9304      	str	r3, [sp, #16]
 800998e:	e7de      	b.n	800994e <_printf_float+0x136>
 8009990:	b913      	cbnz	r3, 8009998 <_printf_float+0x180>
 8009992:	6822      	ldr	r2, [r4, #0]
 8009994:	07d2      	lsls	r2, r2, #31
 8009996:	d501      	bpl.n	800999c <_printf_float+0x184>
 8009998:	3302      	adds	r3, #2
 800999a:	e7f4      	b.n	8009986 <_printf_float+0x16e>
 800999c:	2301      	movs	r3, #1
 800999e:	e7f2      	b.n	8009986 <_printf_float+0x16e>
 80099a0:	f04f 0967 	mov.w	r9, #103	; 0x67
 80099a4:	9b08      	ldr	r3, [sp, #32]
 80099a6:	4299      	cmp	r1, r3
 80099a8:	db05      	blt.n	80099b6 <_printf_float+0x19e>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	6121      	str	r1, [r4, #16]
 80099ae:	07d8      	lsls	r0, r3, #31
 80099b0:	d5ea      	bpl.n	8009988 <_printf_float+0x170>
 80099b2:	1c4b      	adds	r3, r1, #1
 80099b4:	e7e7      	b.n	8009986 <_printf_float+0x16e>
 80099b6:	2900      	cmp	r1, #0
 80099b8:	bfd4      	ite	le
 80099ba:	f1c1 0202 	rsble	r2, r1, #2
 80099be:	2201      	movgt	r2, #1
 80099c0:	4413      	add	r3, r2
 80099c2:	e7e0      	b.n	8009986 <_printf_float+0x16e>
 80099c4:	6823      	ldr	r3, [r4, #0]
 80099c6:	055a      	lsls	r2, r3, #21
 80099c8:	d407      	bmi.n	80099da <_printf_float+0x1c2>
 80099ca:	6923      	ldr	r3, [r4, #16]
 80099cc:	4642      	mov	r2, r8
 80099ce:	4631      	mov	r1, r6
 80099d0:	4628      	mov	r0, r5
 80099d2:	47b8      	blx	r7
 80099d4:	3001      	adds	r0, #1
 80099d6:	d12a      	bne.n	8009a2e <_printf_float+0x216>
 80099d8:	e76a      	b.n	80098b0 <_printf_float+0x98>
 80099da:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80099de:	f240 80e0 	bls.w	8009ba2 <_printf_float+0x38a>
 80099e2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80099e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80099ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ee:	d133      	bne.n	8009a58 <_printf_float+0x240>
 80099f0:	4a37      	ldr	r2, [pc, #220]	; (8009ad0 <_printf_float+0x2b8>)
 80099f2:	2301      	movs	r3, #1
 80099f4:	4631      	mov	r1, r6
 80099f6:	4628      	mov	r0, r5
 80099f8:	47b8      	blx	r7
 80099fa:	3001      	adds	r0, #1
 80099fc:	f43f af58 	beq.w	80098b0 <_printf_float+0x98>
 8009a00:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	db02      	blt.n	8009a0e <_printf_float+0x1f6>
 8009a08:	6823      	ldr	r3, [r4, #0]
 8009a0a:	07d8      	lsls	r0, r3, #31
 8009a0c:	d50f      	bpl.n	8009a2e <_printf_float+0x216>
 8009a0e:	4653      	mov	r3, sl
 8009a10:	465a      	mov	r2, fp
 8009a12:	4631      	mov	r1, r6
 8009a14:	4628      	mov	r0, r5
 8009a16:	47b8      	blx	r7
 8009a18:	3001      	adds	r0, #1
 8009a1a:	f43f af49 	beq.w	80098b0 <_printf_float+0x98>
 8009a1e:	f04f 0800 	mov.w	r8, #0
 8009a22:	f104 091a 	add.w	r9, r4, #26
 8009a26:	9b08      	ldr	r3, [sp, #32]
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	4543      	cmp	r3, r8
 8009a2c:	dc09      	bgt.n	8009a42 <_printf_float+0x22a>
 8009a2e:	6823      	ldr	r3, [r4, #0]
 8009a30:	079b      	lsls	r3, r3, #30
 8009a32:	f100 8106 	bmi.w	8009c42 <_printf_float+0x42a>
 8009a36:	68e0      	ldr	r0, [r4, #12]
 8009a38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3a:	4298      	cmp	r0, r3
 8009a3c:	bfb8      	it	lt
 8009a3e:	4618      	movlt	r0, r3
 8009a40:	e738      	b.n	80098b4 <_printf_float+0x9c>
 8009a42:	2301      	movs	r3, #1
 8009a44:	464a      	mov	r2, r9
 8009a46:	4631      	mov	r1, r6
 8009a48:	4628      	mov	r0, r5
 8009a4a:	47b8      	blx	r7
 8009a4c:	3001      	adds	r0, #1
 8009a4e:	f43f af2f 	beq.w	80098b0 <_printf_float+0x98>
 8009a52:	f108 0801 	add.w	r8, r8, #1
 8009a56:	e7e6      	b.n	8009a26 <_printf_float+0x20e>
 8009a58:	9b07      	ldr	r3, [sp, #28]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	dc3a      	bgt.n	8009ad4 <_printf_float+0x2bc>
 8009a5e:	4a1c      	ldr	r2, [pc, #112]	; (8009ad0 <_printf_float+0x2b8>)
 8009a60:	2301      	movs	r3, #1
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	f43f af21 	beq.w	80098b0 <_printf_float+0x98>
 8009a6e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	d102      	bne.n	8009a7c <_printf_float+0x264>
 8009a76:	6823      	ldr	r3, [r4, #0]
 8009a78:	07d9      	lsls	r1, r3, #31
 8009a7a:	d5d8      	bpl.n	8009a2e <_printf_float+0x216>
 8009a7c:	4653      	mov	r3, sl
 8009a7e:	465a      	mov	r2, fp
 8009a80:	4631      	mov	r1, r6
 8009a82:	4628      	mov	r0, r5
 8009a84:	47b8      	blx	r7
 8009a86:	3001      	adds	r0, #1
 8009a88:	f43f af12 	beq.w	80098b0 <_printf_float+0x98>
 8009a8c:	f04f 0900 	mov.w	r9, #0
 8009a90:	f104 0a1a 	add.w	sl, r4, #26
 8009a94:	9b07      	ldr	r3, [sp, #28]
 8009a96:	425b      	negs	r3, r3
 8009a98:	454b      	cmp	r3, r9
 8009a9a:	dc01      	bgt.n	8009aa0 <_printf_float+0x288>
 8009a9c:	9b08      	ldr	r3, [sp, #32]
 8009a9e:	e795      	b.n	80099cc <_printf_float+0x1b4>
 8009aa0:	2301      	movs	r3, #1
 8009aa2:	4652      	mov	r2, sl
 8009aa4:	4631      	mov	r1, r6
 8009aa6:	4628      	mov	r0, r5
 8009aa8:	47b8      	blx	r7
 8009aaa:	3001      	adds	r0, #1
 8009aac:	f43f af00 	beq.w	80098b0 <_printf_float+0x98>
 8009ab0:	f109 0901 	add.w	r9, r9, #1
 8009ab4:	e7ee      	b.n	8009a94 <_printf_float+0x27c>
 8009ab6:	bf00      	nop
 8009ab8:	ffffffff 	.word	0xffffffff
 8009abc:	7fefffff 	.word	0x7fefffff
 8009ac0:	0800f380 	.word	0x0800f380
 8009ac4:	0800f384 	.word	0x0800f384
 8009ac8:	0800f388 	.word	0x0800f388
 8009acc:	0800f38c 	.word	0x0800f38c
 8009ad0:	0800f390 	.word	0x0800f390
 8009ad4:	9a08      	ldr	r2, [sp, #32]
 8009ad6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	bfa8      	it	ge
 8009adc:	461a      	movge	r2, r3
 8009ade:	2a00      	cmp	r2, #0
 8009ae0:	4691      	mov	r9, r2
 8009ae2:	dc38      	bgt.n	8009b56 <_printf_float+0x33e>
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	9305      	str	r3, [sp, #20]
 8009ae8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009aec:	f104 021a 	add.w	r2, r4, #26
 8009af0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009af2:	9905      	ldr	r1, [sp, #20]
 8009af4:	9304      	str	r3, [sp, #16]
 8009af6:	eba3 0309 	sub.w	r3, r3, r9
 8009afa:	428b      	cmp	r3, r1
 8009afc:	dc33      	bgt.n	8009b66 <_printf_float+0x34e>
 8009afe:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	db3c      	blt.n	8009b80 <_printf_float+0x368>
 8009b06:	6823      	ldr	r3, [r4, #0]
 8009b08:	07da      	lsls	r2, r3, #31
 8009b0a:	d439      	bmi.n	8009b80 <_printf_float+0x368>
 8009b0c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009b10:	eba2 0903 	sub.w	r9, r2, r3
 8009b14:	9b04      	ldr	r3, [sp, #16]
 8009b16:	1ad2      	subs	r2, r2, r3
 8009b18:	4591      	cmp	r9, r2
 8009b1a:	bfa8      	it	ge
 8009b1c:	4691      	movge	r9, r2
 8009b1e:	f1b9 0f00 	cmp.w	r9, #0
 8009b22:	dc35      	bgt.n	8009b90 <_printf_float+0x378>
 8009b24:	f04f 0800 	mov.w	r8, #0
 8009b28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b2c:	f104 0a1a 	add.w	sl, r4, #26
 8009b30:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009b34:	1a9b      	subs	r3, r3, r2
 8009b36:	eba3 0309 	sub.w	r3, r3, r9
 8009b3a:	4543      	cmp	r3, r8
 8009b3c:	f77f af77 	ble.w	8009a2e <_printf_float+0x216>
 8009b40:	2301      	movs	r3, #1
 8009b42:	4652      	mov	r2, sl
 8009b44:	4631      	mov	r1, r6
 8009b46:	4628      	mov	r0, r5
 8009b48:	47b8      	blx	r7
 8009b4a:	3001      	adds	r0, #1
 8009b4c:	f43f aeb0 	beq.w	80098b0 <_printf_float+0x98>
 8009b50:	f108 0801 	add.w	r8, r8, #1
 8009b54:	e7ec      	b.n	8009b30 <_printf_float+0x318>
 8009b56:	4613      	mov	r3, r2
 8009b58:	4631      	mov	r1, r6
 8009b5a:	4642      	mov	r2, r8
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	47b8      	blx	r7
 8009b60:	3001      	adds	r0, #1
 8009b62:	d1bf      	bne.n	8009ae4 <_printf_float+0x2cc>
 8009b64:	e6a4      	b.n	80098b0 <_printf_float+0x98>
 8009b66:	2301      	movs	r3, #1
 8009b68:	4631      	mov	r1, r6
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	9204      	str	r2, [sp, #16]
 8009b6e:	47b8      	blx	r7
 8009b70:	3001      	adds	r0, #1
 8009b72:	f43f ae9d 	beq.w	80098b0 <_printf_float+0x98>
 8009b76:	9b05      	ldr	r3, [sp, #20]
 8009b78:	9a04      	ldr	r2, [sp, #16]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	9305      	str	r3, [sp, #20]
 8009b7e:	e7b7      	b.n	8009af0 <_printf_float+0x2d8>
 8009b80:	4653      	mov	r3, sl
 8009b82:	465a      	mov	r2, fp
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	d1be      	bne.n	8009b0c <_printf_float+0x2f4>
 8009b8e:	e68f      	b.n	80098b0 <_printf_float+0x98>
 8009b90:	9a04      	ldr	r2, [sp, #16]
 8009b92:	464b      	mov	r3, r9
 8009b94:	4442      	add	r2, r8
 8009b96:	4631      	mov	r1, r6
 8009b98:	4628      	mov	r0, r5
 8009b9a:	47b8      	blx	r7
 8009b9c:	3001      	adds	r0, #1
 8009b9e:	d1c1      	bne.n	8009b24 <_printf_float+0x30c>
 8009ba0:	e686      	b.n	80098b0 <_printf_float+0x98>
 8009ba2:	9a08      	ldr	r2, [sp, #32]
 8009ba4:	2a01      	cmp	r2, #1
 8009ba6:	dc01      	bgt.n	8009bac <_printf_float+0x394>
 8009ba8:	07db      	lsls	r3, r3, #31
 8009baa:	d537      	bpl.n	8009c1c <_printf_float+0x404>
 8009bac:	2301      	movs	r3, #1
 8009bae:	4642      	mov	r2, r8
 8009bb0:	4631      	mov	r1, r6
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	47b8      	blx	r7
 8009bb6:	3001      	adds	r0, #1
 8009bb8:	f43f ae7a 	beq.w	80098b0 <_printf_float+0x98>
 8009bbc:	4653      	mov	r3, sl
 8009bbe:	465a      	mov	r2, fp
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b8      	blx	r7
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	f43f ae72 	beq.w	80098b0 <_printf_float+0x98>
 8009bcc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009bd0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bd8:	9b08      	ldr	r3, [sp, #32]
 8009bda:	d01a      	beq.n	8009c12 <_printf_float+0x3fa>
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	f108 0201 	add.w	r2, r8, #1
 8009be2:	4631      	mov	r1, r6
 8009be4:	4628      	mov	r0, r5
 8009be6:	47b8      	blx	r7
 8009be8:	3001      	adds	r0, #1
 8009bea:	d10e      	bne.n	8009c0a <_printf_float+0x3f2>
 8009bec:	e660      	b.n	80098b0 <_printf_float+0x98>
 8009bee:	2301      	movs	r3, #1
 8009bf0:	464a      	mov	r2, r9
 8009bf2:	4631      	mov	r1, r6
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	47b8      	blx	r7
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	f43f ae59 	beq.w	80098b0 <_printf_float+0x98>
 8009bfe:	f108 0801 	add.w	r8, r8, #1
 8009c02:	9b08      	ldr	r3, [sp, #32]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	4543      	cmp	r3, r8
 8009c08:	dcf1      	bgt.n	8009bee <_printf_float+0x3d6>
 8009c0a:	9b04      	ldr	r3, [sp, #16]
 8009c0c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009c10:	e6dd      	b.n	80099ce <_printf_float+0x1b6>
 8009c12:	f04f 0800 	mov.w	r8, #0
 8009c16:	f104 091a 	add.w	r9, r4, #26
 8009c1a:	e7f2      	b.n	8009c02 <_printf_float+0x3ea>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	4642      	mov	r2, r8
 8009c20:	e7df      	b.n	8009be2 <_printf_float+0x3ca>
 8009c22:	2301      	movs	r3, #1
 8009c24:	464a      	mov	r2, r9
 8009c26:	4631      	mov	r1, r6
 8009c28:	4628      	mov	r0, r5
 8009c2a:	47b8      	blx	r7
 8009c2c:	3001      	adds	r0, #1
 8009c2e:	f43f ae3f 	beq.w	80098b0 <_printf_float+0x98>
 8009c32:	f108 0801 	add.w	r8, r8, #1
 8009c36:	68e3      	ldr	r3, [r4, #12]
 8009c38:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c3a:	1a5b      	subs	r3, r3, r1
 8009c3c:	4543      	cmp	r3, r8
 8009c3e:	dcf0      	bgt.n	8009c22 <_printf_float+0x40a>
 8009c40:	e6f9      	b.n	8009a36 <_printf_float+0x21e>
 8009c42:	f04f 0800 	mov.w	r8, #0
 8009c46:	f104 0919 	add.w	r9, r4, #25
 8009c4a:	e7f4      	b.n	8009c36 <_printf_float+0x41e>

08009c4c <_printf_common>:
 8009c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c50:	4616      	mov	r6, r2
 8009c52:	4699      	mov	r9, r3
 8009c54:	688a      	ldr	r2, [r1, #8]
 8009c56:	690b      	ldr	r3, [r1, #16]
 8009c58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	bfb8      	it	lt
 8009c60:	4613      	movlt	r3, r2
 8009c62:	6033      	str	r3, [r6, #0]
 8009c64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009c68:	4607      	mov	r7, r0
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	b10a      	cbz	r2, 8009c72 <_printf_common+0x26>
 8009c6e:	3301      	adds	r3, #1
 8009c70:	6033      	str	r3, [r6, #0]
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	0699      	lsls	r1, r3, #26
 8009c76:	bf42      	ittt	mi
 8009c78:	6833      	ldrmi	r3, [r6, #0]
 8009c7a:	3302      	addmi	r3, #2
 8009c7c:	6033      	strmi	r3, [r6, #0]
 8009c7e:	6825      	ldr	r5, [r4, #0]
 8009c80:	f015 0506 	ands.w	r5, r5, #6
 8009c84:	d106      	bne.n	8009c94 <_printf_common+0x48>
 8009c86:	f104 0a19 	add.w	sl, r4, #25
 8009c8a:	68e3      	ldr	r3, [r4, #12]
 8009c8c:	6832      	ldr	r2, [r6, #0]
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	42ab      	cmp	r3, r5
 8009c92:	dc26      	bgt.n	8009ce2 <_printf_common+0x96>
 8009c94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009c98:	1e13      	subs	r3, r2, #0
 8009c9a:	6822      	ldr	r2, [r4, #0]
 8009c9c:	bf18      	it	ne
 8009c9e:	2301      	movne	r3, #1
 8009ca0:	0692      	lsls	r2, r2, #26
 8009ca2:	d42b      	bmi.n	8009cfc <_printf_common+0xb0>
 8009ca4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009ca8:	4649      	mov	r1, r9
 8009caa:	4638      	mov	r0, r7
 8009cac:	47c0      	blx	r8
 8009cae:	3001      	adds	r0, #1
 8009cb0:	d01e      	beq.n	8009cf0 <_printf_common+0xa4>
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	6922      	ldr	r2, [r4, #16]
 8009cb6:	f003 0306 	and.w	r3, r3, #6
 8009cba:	2b04      	cmp	r3, #4
 8009cbc:	bf02      	ittt	eq
 8009cbe:	68e5      	ldreq	r5, [r4, #12]
 8009cc0:	6833      	ldreq	r3, [r6, #0]
 8009cc2:	1aed      	subeq	r5, r5, r3
 8009cc4:	68a3      	ldr	r3, [r4, #8]
 8009cc6:	bf0c      	ite	eq
 8009cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009ccc:	2500      	movne	r5, #0
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	bfc4      	itt	gt
 8009cd2:	1a9b      	subgt	r3, r3, r2
 8009cd4:	18ed      	addgt	r5, r5, r3
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	341a      	adds	r4, #26
 8009cda:	42b5      	cmp	r5, r6
 8009cdc:	d11a      	bne.n	8009d14 <_printf_common+0xc8>
 8009cde:	2000      	movs	r0, #0
 8009ce0:	e008      	b.n	8009cf4 <_printf_common+0xa8>
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4652      	mov	r2, sl
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	4638      	mov	r0, r7
 8009cea:	47c0      	blx	r8
 8009cec:	3001      	adds	r0, #1
 8009cee:	d103      	bne.n	8009cf8 <_printf_common+0xac>
 8009cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cf8:	3501      	adds	r5, #1
 8009cfa:	e7c6      	b.n	8009c8a <_printf_common+0x3e>
 8009cfc:	18e1      	adds	r1, r4, r3
 8009cfe:	1c5a      	adds	r2, r3, #1
 8009d00:	2030      	movs	r0, #48	; 0x30
 8009d02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d06:	4422      	add	r2, r4
 8009d08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d10:	3302      	adds	r3, #2
 8009d12:	e7c7      	b.n	8009ca4 <_printf_common+0x58>
 8009d14:	2301      	movs	r3, #1
 8009d16:	4622      	mov	r2, r4
 8009d18:	4649      	mov	r1, r9
 8009d1a:	4638      	mov	r0, r7
 8009d1c:	47c0      	blx	r8
 8009d1e:	3001      	adds	r0, #1
 8009d20:	d0e6      	beq.n	8009cf0 <_printf_common+0xa4>
 8009d22:	3601      	adds	r6, #1
 8009d24:	e7d9      	b.n	8009cda <_printf_common+0x8e>
	...

08009d28 <_printf_i>:
 8009d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d2c:	7e0f      	ldrb	r7, [r1, #24]
 8009d2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d30:	2f78      	cmp	r7, #120	; 0x78
 8009d32:	4691      	mov	r9, r2
 8009d34:	4680      	mov	r8, r0
 8009d36:	460c      	mov	r4, r1
 8009d38:	469a      	mov	sl, r3
 8009d3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d3e:	d807      	bhi.n	8009d50 <_printf_i+0x28>
 8009d40:	2f62      	cmp	r7, #98	; 0x62
 8009d42:	d80a      	bhi.n	8009d5a <_printf_i+0x32>
 8009d44:	2f00      	cmp	r7, #0
 8009d46:	f000 80d4 	beq.w	8009ef2 <_printf_i+0x1ca>
 8009d4a:	2f58      	cmp	r7, #88	; 0x58
 8009d4c:	f000 80c0 	beq.w	8009ed0 <_printf_i+0x1a8>
 8009d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009d58:	e03a      	b.n	8009dd0 <_printf_i+0xa8>
 8009d5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009d5e:	2b15      	cmp	r3, #21
 8009d60:	d8f6      	bhi.n	8009d50 <_printf_i+0x28>
 8009d62:	a101      	add	r1, pc, #4	; (adr r1, 8009d68 <_printf_i+0x40>)
 8009d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d68:	08009dc1 	.word	0x08009dc1
 8009d6c:	08009dd5 	.word	0x08009dd5
 8009d70:	08009d51 	.word	0x08009d51
 8009d74:	08009d51 	.word	0x08009d51
 8009d78:	08009d51 	.word	0x08009d51
 8009d7c:	08009d51 	.word	0x08009d51
 8009d80:	08009dd5 	.word	0x08009dd5
 8009d84:	08009d51 	.word	0x08009d51
 8009d88:	08009d51 	.word	0x08009d51
 8009d8c:	08009d51 	.word	0x08009d51
 8009d90:	08009d51 	.word	0x08009d51
 8009d94:	08009ed9 	.word	0x08009ed9
 8009d98:	08009e01 	.word	0x08009e01
 8009d9c:	08009e93 	.word	0x08009e93
 8009da0:	08009d51 	.word	0x08009d51
 8009da4:	08009d51 	.word	0x08009d51
 8009da8:	08009efb 	.word	0x08009efb
 8009dac:	08009d51 	.word	0x08009d51
 8009db0:	08009e01 	.word	0x08009e01
 8009db4:	08009d51 	.word	0x08009d51
 8009db8:	08009d51 	.word	0x08009d51
 8009dbc:	08009e9b 	.word	0x08009e9b
 8009dc0:	682b      	ldr	r3, [r5, #0]
 8009dc2:	1d1a      	adds	r2, r3, #4
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	602a      	str	r2, [r5, #0]
 8009dc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e09f      	b.n	8009f14 <_printf_i+0x1ec>
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	682b      	ldr	r3, [r5, #0]
 8009dd8:	0607      	lsls	r7, r0, #24
 8009dda:	f103 0104 	add.w	r1, r3, #4
 8009dde:	6029      	str	r1, [r5, #0]
 8009de0:	d501      	bpl.n	8009de6 <_printf_i+0xbe>
 8009de2:	681e      	ldr	r6, [r3, #0]
 8009de4:	e003      	b.n	8009dee <_printf_i+0xc6>
 8009de6:	0646      	lsls	r6, r0, #25
 8009de8:	d5fb      	bpl.n	8009de2 <_printf_i+0xba>
 8009dea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009dee:	2e00      	cmp	r6, #0
 8009df0:	da03      	bge.n	8009dfa <_printf_i+0xd2>
 8009df2:	232d      	movs	r3, #45	; 0x2d
 8009df4:	4276      	negs	r6, r6
 8009df6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009dfa:	485a      	ldr	r0, [pc, #360]	; (8009f64 <_printf_i+0x23c>)
 8009dfc:	230a      	movs	r3, #10
 8009dfe:	e012      	b.n	8009e26 <_printf_i+0xfe>
 8009e00:	682b      	ldr	r3, [r5, #0]
 8009e02:	6820      	ldr	r0, [r4, #0]
 8009e04:	1d19      	adds	r1, r3, #4
 8009e06:	6029      	str	r1, [r5, #0]
 8009e08:	0605      	lsls	r5, r0, #24
 8009e0a:	d501      	bpl.n	8009e10 <_printf_i+0xe8>
 8009e0c:	681e      	ldr	r6, [r3, #0]
 8009e0e:	e002      	b.n	8009e16 <_printf_i+0xee>
 8009e10:	0641      	lsls	r1, r0, #25
 8009e12:	d5fb      	bpl.n	8009e0c <_printf_i+0xe4>
 8009e14:	881e      	ldrh	r6, [r3, #0]
 8009e16:	4853      	ldr	r0, [pc, #332]	; (8009f64 <_printf_i+0x23c>)
 8009e18:	2f6f      	cmp	r7, #111	; 0x6f
 8009e1a:	bf0c      	ite	eq
 8009e1c:	2308      	moveq	r3, #8
 8009e1e:	230a      	movne	r3, #10
 8009e20:	2100      	movs	r1, #0
 8009e22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e26:	6865      	ldr	r5, [r4, #4]
 8009e28:	60a5      	str	r5, [r4, #8]
 8009e2a:	2d00      	cmp	r5, #0
 8009e2c:	bfa2      	ittt	ge
 8009e2e:	6821      	ldrge	r1, [r4, #0]
 8009e30:	f021 0104 	bicge.w	r1, r1, #4
 8009e34:	6021      	strge	r1, [r4, #0]
 8009e36:	b90e      	cbnz	r6, 8009e3c <_printf_i+0x114>
 8009e38:	2d00      	cmp	r5, #0
 8009e3a:	d04b      	beq.n	8009ed4 <_printf_i+0x1ac>
 8009e3c:	4615      	mov	r5, r2
 8009e3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e42:	fb03 6711 	mls	r7, r3, r1, r6
 8009e46:	5dc7      	ldrb	r7, [r0, r7]
 8009e48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e4c:	4637      	mov	r7, r6
 8009e4e:	42bb      	cmp	r3, r7
 8009e50:	460e      	mov	r6, r1
 8009e52:	d9f4      	bls.n	8009e3e <_printf_i+0x116>
 8009e54:	2b08      	cmp	r3, #8
 8009e56:	d10b      	bne.n	8009e70 <_printf_i+0x148>
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	07de      	lsls	r6, r3, #31
 8009e5c:	d508      	bpl.n	8009e70 <_printf_i+0x148>
 8009e5e:	6923      	ldr	r3, [r4, #16]
 8009e60:	6861      	ldr	r1, [r4, #4]
 8009e62:	4299      	cmp	r1, r3
 8009e64:	bfde      	ittt	le
 8009e66:	2330      	movle	r3, #48	; 0x30
 8009e68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009e6c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009e70:	1b52      	subs	r2, r2, r5
 8009e72:	6122      	str	r2, [r4, #16]
 8009e74:	f8cd a000 	str.w	sl, [sp]
 8009e78:	464b      	mov	r3, r9
 8009e7a:	aa03      	add	r2, sp, #12
 8009e7c:	4621      	mov	r1, r4
 8009e7e:	4640      	mov	r0, r8
 8009e80:	f7ff fee4 	bl	8009c4c <_printf_common>
 8009e84:	3001      	adds	r0, #1
 8009e86:	d14a      	bne.n	8009f1e <_printf_i+0x1f6>
 8009e88:	f04f 30ff 	mov.w	r0, #4294967295
 8009e8c:	b004      	add	sp, #16
 8009e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e92:	6823      	ldr	r3, [r4, #0]
 8009e94:	f043 0320 	orr.w	r3, r3, #32
 8009e98:	6023      	str	r3, [r4, #0]
 8009e9a:	4833      	ldr	r0, [pc, #204]	; (8009f68 <_printf_i+0x240>)
 8009e9c:	2778      	movs	r7, #120	; 0x78
 8009e9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ea2:	6823      	ldr	r3, [r4, #0]
 8009ea4:	6829      	ldr	r1, [r5, #0]
 8009ea6:	061f      	lsls	r7, r3, #24
 8009ea8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009eac:	d402      	bmi.n	8009eb4 <_printf_i+0x18c>
 8009eae:	065f      	lsls	r7, r3, #25
 8009eb0:	bf48      	it	mi
 8009eb2:	b2b6      	uxthmi	r6, r6
 8009eb4:	07df      	lsls	r7, r3, #31
 8009eb6:	bf48      	it	mi
 8009eb8:	f043 0320 	orrmi.w	r3, r3, #32
 8009ebc:	6029      	str	r1, [r5, #0]
 8009ebe:	bf48      	it	mi
 8009ec0:	6023      	strmi	r3, [r4, #0]
 8009ec2:	b91e      	cbnz	r6, 8009ecc <_printf_i+0x1a4>
 8009ec4:	6823      	ldr	r3, [r4, #0]
 8009ec6:	f023 0320 	bic.w	r3, r3, #32
 8009eca:	6023      	str	r3, [r4, #0]
 8009ecc:	2310      	movs	r3, #16
 8009ece:	e7a7      	b.n	8009e20 <_printf_i+0xf8>
 8009ed0:	4824      	ldr	r0, [pc, #144]	; (8009f64 <_printf_i+0x23c>)
 8009ed2:	e7e4      	b.n	8009e9e <_printf_i+0x176>
 8009ed4:	4615      	mov	r5, r2
 8009ed6:	e7bd      	b.n	8009e54 <_printf_i+0x12c>
 8009ed8:	682b      	ldr	r3, [r5, #0]
 8009eda:	6826      	ldr	r6, [r4, #0]
 8009edc:	6961      	ldr	r1, [r4, #20]
 8009ede:	1d18      	adds	r0, r3, #4
 8009ee0:	6028      	str	r0, [r5, #0]
 8009ee2:	0635      	lsls	r5, r6, #24
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	d501      	bpl.n	8009eec <_printf_i+0x1c4>
 8009ee8:	6019      	str	r1, [r3, #0]
 8009eea:	e002      	b.n	8009ef2 <_printf_i+0x1ca>
 8009eec:	0670      	lsls	r0, r6, #25
 8009eee:	d5fb      	bpl.n	8009ee8 <_printf_i+0x1c0>
 8009ef0:	8019      	strh	r1, [r3, #0]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	6123      	str	r3, [r4, #16]
 8009ef6:	4615      	mov	r5, r2
 8009ef8:	e7bc      	b.n	8009e74 <_printf_i+0x14c>
 8009efa:	682b      	ldr	r3, [r5, #0]
 8009efc:	1d1a      	adds	r2, r3, #4
 8009efe:	602a      	str	r2, [r5, #0]
 8009f00:	681d      	ldr	r5, [r3, #0]
 8009f02:	6862      	ldr	r2, [r4, #4]
 8009f04:	2100      	movs	r1, #0
 8009f06:	4628      	mov	r0, r5
 8009f08:	f7f6 f99a 	bl	8000240 <memchr>
 8009f0c:	b108      	cbz	r0, 8009f12 <_printf_i+0x1ea>
 8009f0e:	1b40      	subs	r0, r0, r5
 8009f10:	6060      	str	r0, [r4, #4]
 8009f12:	6863      	ldr	r3, [r4, #4]
 8009f14:	6123      	str	r3, [r4, #16]
 8009f16:	2300      	movs	r3, #0
 8009f18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f1c:	e7aa      	b.n	8009e74 <_printf_i+0x14c>
 8009f1e:	6923      	ldr	r3, [r4, #16]
 8009f20:	462a      	mov	r2, r5
 8009f22:	4649      	mov	r1, r9
 8009f24:	4640      	mov	r0, r8
 8009f26:	47d0      	blx	sl
 8009f28:	3001      	adds	r0, #1
 8009f2a:	d0ad      	beq.n	8009e88 <_printf_i+0x160>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	079b      	lsls	r3, r3, #30
 8009f30:	d413      	bmi.n	8009f5a <_printf_i+0x232>
 8009f32:	68e0      	ldr	r0, [r4, #12]
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	4298      	cmp	r0, r3
 8009f38:	bfb8      	it	lt
 8009f3a:	4618      	movlt	r0, r3
 8009f3c:	e7a6      	b.n	8009e8c <_printf_i+0x164>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	4632      	mov	r2, r6
 8009f42:	4649      	mov	r1, r9
 8009f44:	4640      	mov	r0, r8
 8009f46:	47d0      	blx	sl
 8009f48:	3001      	adds	r0, #1
 8009f4a:	d09d      	beq.n	8009e88 <_printf_i+0x160>
 8009f4c:	3501      	adds	r5, #1
 8009f4e:	68e3      	ldr	r3, [r4, #12]
 8009f50:	9903      	ldr	r1, [sp, #12]
 8009f52:	1a5b      	subs	r3, r3, r1
 8009f54:	42ab      	cmp	r3, r5
 8009f56:	dcf2      	bgt.n	8009f3e <_printf_i+0x216>
 8009f58:	e7eb      	b.n	8009f32 <_printf_i+0x20a>
 8009f5a:	2500      	movs	r5, #0
 8009f5c:	f104 0619 	add.w	r6, r4, #25
 8009f60:	e7f5      	b.n	8009f4e <_printf_i+0x226>
 8009f62:	bf00      	nop
 8009f64:	0800f392 	.word	0x0800f392
 8009f68:	0800f3a3 	.word	0x0800f3a3

08009f6c <_scanf_float>:
 8009f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f70:	b087      	sub	sp, #28
 8009f72:	4617      	mov	r7, r2
 8009f74:	9303      	str	r3, [sp, #12]
 8009f76:	688b      	ldr	r3, [r1, #8]
 8009f78:	1e5a      	subs	r2, r3, #1
 8009f7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009f7e:	bf83      	ittte	hi
 8009f80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009f84:	195b      	addhi	r3, r3, r5
 8009f86:	9302      	strhi	r3, [sp, #8]
 8009f88:	2300      	movls	r3, #0
 8009f8a:	bf86      	itte	hi
 8009f8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009f90:	608b      	strhi	r3, [r1, #8]
 8009f92:	9302      	strls	r3, [sp, #8]
 8009f94:	680b      	ldr	r3, [r1, #0]
 8009f96:	468b      	mov	fp, r1
 8009f98:	2500      	movs	r5, #0
 8009f9a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009f9e:	f84b 3b1c 	str.w	r3, [fp], #28
 8009fa2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	460c      	mov	r4, r1
 8009faa:	465e      	mov	r6, fp
 8009fac:	46aa      	mov	sl, r5
 8009fae:	46a9      	mov	r9, r5
 8009fb0:	9501      	str	r5, [sp, #4]
 8009fb2:	68a2      	ldr	r2, [r4, #8]
 8009fb4:	b152      	cbz	r2, 8009fcc <_scanf_float+0x60>
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	2b4e      	cmp	r3, #78	; 0x4e
 8009fbc:	d864      	bhi.n	800a088 <_scanf_float+0x11c>
 8009fbe:	2b40      	cmp	r3, #64	; 0x40
 8009fc0:	d83c      	bhi.n	800a03c <_scanf_float+0xd0>
 8009fc2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009fc6:	b2c8      	uxtb	r0, r1
 8009fc8:	280e      	cmp	r0, #14
 8009fca:	d93a      	bls.n	800a042 <_scanf_float+0xd6>
 8009fcc:	f1b9 0f00 	cmp.w	r9, #0
 8009fd0:	d003      	beq.n	8009fda <_scanf_float+0x6e>
 8009fd2:	6823      	ldr	r3, [r4, #0]
 8009fd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009fde:	f1ba 0f01 	cmp.w	sl, #1
 8009fe2:	f200 8113 	bhi.w	800a20c <_scanf_float+0x2a0>
 8009fe6:	455e      	cmp	r6, fp
 8009fe8:	f200 8105 	bhi.w	800a1f6 <_scanf_float+0x28a>
 8009fec:	2501      	movs	r5, #1
 8009fee:	4628      	mov	r0, r5
 8009ff0:	b007      	add	sp, #28
 8009ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009ffa:	2a0d      	cmp	r2, #13
 8009ffc:	d8e6      	bhi.n	8009fcc <_scanf_float+0x60>
 8009ffe:	a101      	add	r1, pc, #4	; (adr r1, 800a004 <_scanf_float+0x98>)
 800a000:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a004:	0800a143 	.word	0x0800a143
 800a008:	08009fcd 	.word	0x08009fcd
 800a00c:	08009fcd 	.word	0x08009fcd
 800a010:	08009fcd 	.word	0x08009fcd
 800a014:	0800a1a3 	.word	0x0800a1a3
 800a018:	0800a17b 	.word	0x0800a17b
 800a01c:	08009fcd 	.word	0x08009fcd
 800a020:	08009fcd 	.word	0x08009fcd
 800a024:	0800a151 	.word	0x0800a151
 800a028:	08009fcd 	.word	0x08009fcd
 800a02c:	08009fcd 	.word	0x08009fcd
 800a030:	08009fcd 	.word	0x08009fcd
 800a034:	08009fcd 	.word	0x08009fcd
 800a038:	0800a109 	.word	0x0800a109
 800a03c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a040:	e7db      	b.n	8009ffa <_scanf_float+0x8e>
 800a042:	290e      	cmp	r1, #14
 800a044:	d8c2      	bhi.n	8009fcc <_scanf_float+0x60>
 800a046:	a001      	add	r0, pc, #4	; (adr r0, 800a04c <_scanf_float+0xe0>)
 800a048:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a04c:	0800a0fb 	.word	0x0800a0fb
 800a050:	08009fcd 	.word	0x08009fcd
 800a054:	0800a0fb 	.word	0x0800a0fb
 800a058:	0800a18f 	.word	0x0800a18f
 800a05c:	08009fcd 	.word	0x08009fcd
 800a060:	0800a0a9 	.word	0x0800a0a9
 800a064:	0800a0e5 	.word	0x0800a0e5
 800a068:	0800a0e5 	.word	0x0800a0e5
 800a06c:	0800a0e5 	.word	0x0800a0e5
 800a070:	0800a0e5 	.word	0x0800a0e5
 800a074:	0800a0e5 	.word	0x0800a0e5
 800a078:	0800a0e5 	.word	0x0800a0e5
 800a07c:	0800a0e5 	.word	0x0800a0e5
 800a080:	0800a0e5 	.word	0x0800a0e5
 800a084:	0800a0e5 	.word	0x0800a0e5
 800a088:	2b6e      	cmp	r3, #110	; 0x6e
 800a08a:	d809      	bhi.n	800a0a0 <_scanf_float+0x134>
 800a08c:	2b60      	cmp	r3, #96	; 0x60
 800a08e:	d8b2      	bhi.n	8009ff6 <_scanf_float+0x8a>
 800a090:	2b54      	cmp	r3, #84	; 0x54
 800a092:	d077      	beq.n	800a184 <_scanf_float+0x218>
 800a094:	2b59      	cmp	r3, #89	; 0x59
 800a096:	d199      	bne.n	8009fcc <_scanf_float+0x60>
 800a098:	2d07      	cmp	r5, #7
 800a09a:	d197      	bne.n	8009fcc <_scanf_float+0x60>
 800a09c:	2508      	movs	r5, #8
 800a09e:	e029      	b.n	800a0f4 <_scanf_float+0x188>
 800a0a0:	2b74      	cmp	r3, #116	; 0x74
 800a0a2:	d06f      	beq.n	800a184 <_scanf_float+0x218>
 800a0a4:	2b79      	cmp	r3, #121	; 0x79
 800a0a6:	e7f6      	b.n	800a096 <_scanf_float+0x12a>
 800a0a8:	6821      	ldr	r1, [r4, #0]
 800a0aa:	05c8      	lsls	r0, r1, #23
 800a0ac:	d51a      	bpl.n	800a0e4 <_scanf_float+0x178>
 800a0ae:	9b02      	ldr	r3, [sp, #8]
 800a0b0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a0b4:	6021      	str	r1, [r4, #0]
 800a0b6:	f109 0901 	add.w	r9, r9, #1
 800a0ba:	b11b      	cbz	r3, 800a0c4 <_scanf_float+0x158>
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	3201      	adds	r2, #1
 800a0c0:	9302      	str	r3, [sp, #8]
 800a0c2:	60a2      	str	r2, [r4, #8]
 800a0c4:	68a3      	ldr	r3, [r4, #8]
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	60a3      	str	r3, [r4, #8]
 800a0ca:	6923      	ldr	r3, [r4, #16]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	6123      	str	r3, [r4, #16]
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	f340 8084 	ble.w	800a1e4 <_scanf_float+0x278>
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	603b      	str	r3, [r7, #0]
 800a0e2:	e766      	b.n	8009fb2 <_scanf_float+0x46>
 800a0e4:	eb1a 0f05 	cmn.w	sl, r5
 800a0e8:	f47f af70 	bne.w	8009fcc <_scanf_float+0x60>
 800a0ec:	6822      	ldr	r2, [r4, #0]
 800a0ee:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a0f2:	6022      	str	r2, [r4, #0]
 800a0f4:	f806 3b01 	strb.w	r3, [r6], #1
 800a0f8:	e7e4      	b.n	800a0c4 <_scanf_float+0x158>
 800a0fa:	6822      	ldr	r2, [r4, #0]
 800a0fc:	0610      	lsls	r0, r2, #24
 800a0fe:	f57f af65 	bpl.w	8009fcc <_scanf_float+0x60>
 800a102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a106:	e7f4      	b.n	800a0f2 <_scanf_float+0x186>
 800a108:	f1ba 0f00 	cmp.w	sl, #0
 800a10c:	d10e      	bne.n	800a12c <_scanf_float+0x1c0>
 800a10e:	f1b9 0f00 	cmp.w	r9, #0
 800a112:	d10e      	bne.n	800a132 <_scanf_float+0x1c6>
 800a114:	6822      	ldr	r2, [r4, #0]
 800a116:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a11a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a11e:	d108      	bne.n	800a132 <_scanf_float+0x1c6>
 800a120:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a124:	6022      	str	r2, [r4, #0]
 800a126:	f04f 0a01 	mov.w	sl, #1
 800a12a:	e7e3      	b.n	800a0f4 <_scanf_float+0x188>
 800a12c:	f1ba 0f02 	cmp.w	sl, #2
 800a130:	d055      	beq.n	800a1de <_scanf_float+0x272>
 800a132:	2d01      	cmp	r5, #1
 800a134:	d002      	beq.n	800a13c <_scanf_float+0x1d0>
 800a136:	2d04      	cmp	r5, #4
 800a138:	f47f af48 	bne.w	8009fcc <_scanf_float+0x60>
 800a13c:	3501      	adds	r5, #1
 800a13e:	b2ed      	uxtb	r5, r5
 800a140:	e7d8      	b.n	800a0f4 <_scanf_float+0x188>
 800a142:	f1ba 0f01 	cmp.w	sl, #1
 800a146:	f47f af41 	bne.w	8009fcc <_scanf_float+0x60>
 800a14a:	f04f 0a02 	mov.w	sl, #2
 800a14e:	e7d1      	b.n	800a0f4 <_scanf_float+0x188>
 800a150:	b97d      	cbnz	r5, 800a172 <_scanf_float+0x206>
 800a152:	f1b9 0f00 	cmp.w	r9, #0
 800a156:	f47f af3c 	bne.w	8009fd2 <_scanf_float+0x66>
 800a15a:	6822      	ldr	r2, [r4, #0]
 800a15c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a160:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a164:	f47f af39 	bne.w	8009fda <_scanf_float+0x6e>
 800a168:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a16c:	6022      	str	r2, [r4, #0]
 800a16e:	2501      	movs	r5, #1
 800a170:	e7c0      	b.n	800a0f4 <_scanf_float+0x188>
 800a172:	2d03      	cmp	r5, #3
 800a174:	d0e2      	beq.n	800a13c <_scanf_float+0x1d0>
 800a176:	2d05      	cmp	r5, #5
 800a178:	e7de      	b.n	800a138 <_scanf_float+0x1cc>
 800a17a:	2d02      	cmp	r5, #2
 800a17c:	f47f af26 	bne.w	8009fcc <_scanf_float+0x60>
 800a180:	2503      	movs	r5, #3
 800a182:	e7b7      	b.n	800a0f4 <_scanf_float+0x188>
 800a184:	2d06      	cmp	r5, #6
 800a186:	f47f af21 	bne.w	8009fcc <_scanf_float+0x60>
 800a18a:	2507      	movs	r5, #7
 800a18c:	e7b2      	b.n	800a0f4 <_scanf_float+0x188>
 800a18e:	6822      	ldr	r2, [r4, #0]
 800a190:	0591      	lsls	r1, r2, #22
 800a192:	f57f af1b 	bpl.w	8009fcc <_scanf_float+0x60>
 800a196:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a19a:	6022      	str	r2, [r4, #0]
 800a19c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1a0:	e7a8      	b.n	800a0f4 <_scanf_float+0x188>
 800a1a2:	6822      	ldr	r2, [r4, #0]
 800a1a4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a1a8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a1ac:	d006      	beq.n	800a1bc <_scanf_float+0x250>
 800a1ae:	0550      	lsls	r0, r2, #21
 800a1b0:	f57f af0c 	bpl.w	8009fcc <_scanf_float+0x60>
 800a1b4:	f1b9 0f00 	cmp.w	r9, #0
 800a1b8:	f43f af0f 	beq.w	8009fda <_scanf_float+0x6e>
 800a1bc:	0591      	lsls	r1, r2, #22
 800a1be:	bf58      	it	pl
 800a1c0:	9901      	ldrpl	r1, [sp, #4]
 800a1c2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a1c6:	bf58      	it	pl
 800a1c8:	eba9 0101 	subpl.w	r1, r9, r1
 800a1cc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a1d0:	bf58      	it	pl
 800a1d2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a1d6:	6022      	str	r2, [r4, #0]
 800a1d8:	f04f 0900 	mov.w	r9, #0
 800a1dc:	e78a      	b.n	800a0f4 <_scanf_float+0x188>
 800a1de:	f04f 0a03 	mov.w	sl, #3
 800a1e2:	e787      	b.n	800a0f4 <_scanf_float+0x188>
 800a1e4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1e8:	4639      	mov	r1, r7
 800a1ea:	4640      	mov	r0, r8
 800a1ec:	4798      	blx	r3
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	f43f aedf 	beq.w	8009fb2 <_scanf_float+0x46>
 800a1f4:	e6ea      	b.n	8009fcc <_scanf_float+0x60>
 800a1f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a1fa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a1fe:	463a      	mov	r2, r7
 800a200:	4640      	mov	r0, r8
 800a202:	4798      	blx	r3
 800a204:	6923      	ldr	r3, [r4, #16]
 800a206:	3b01      	subs	r3, #1
 800a208:	6123      	str	r3, [r4, #16]
 800a20a:	e6ec      	b.n	8009fe6 <_scanf_float+0x7a>
 800a20c:	1e6b      	subs	r3, r5, #1
 800a20e:	2b06      	cmp	r3, #6
 800a210:	d825      	bhi.n	800a25e <_scanf_float+0x2f2>
 800a212:	2d02      	cmp	r5, #2
 800a214:	d836      	bhi.n	800a284 <_scanf_float+0x318>
 800a216:	455e      	cmp	r6, fp
 800a218:	f67f aee8 	bls.w	8009fec <_scanf_float+0x80>
 800a21c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a220:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a224:	463a      	mov	r2, r7
 800a226:	4640      	mov	r0, r8
 800a228:	4798      	blx	r3
 800a22a:	6923      	ldr	r3, [r4, #16]
 800a22c:	3b01      	subs	r3, #1
 800a22e:	6123      	str	r3, [r4, #16]
 800a230:	e7f1      	b.n	800a216 <_scanf_float+0x2aa>
 800a232:	9802      	ldr	r0, [sp, #8]
 800a234:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a238:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a23c:	9002      	str	r0, [sp, #8]
 800a23e:	463a      	mov	r2, r7
 800a240:	4640      	mov	r0, r8
 800a242:	4798      	blx	r3
 800a244:	6923      	ldr	r3, [r4, #16]
 800a246:	3b01      	subs	r3, #1
 800a248:	6123      	str	r3, [r4, #16]
 800a24a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a24e:	fa5f fa8a 	uxtb.w	sl, sl
 800a252:	f1ba 0f02 	cmp.w	sl, #2
 800a256:	d1ec      	bne.n	800a232 <_scanf_float+0x2c6>
 800a258:	3d03      	subs	r5, #3
 800a25a:	b2ed      	uxtb	r5, r5
 800a25c:	1b76      	subs	r6, r6, r5
 800a25e:	6823      	ldr	r3, [r4, #0]
 800a260:	05da      	lsls	r2, r3, #23
 800a262:	d52f      	bpl.n	800a2c4 <_scanf_float+0x358>
 800a264:	055b      	lsls	r3, r3, #21
 800a266:	d510      	bpl.n	800a28a <_scanf_float+0x31e>
 800a268:	455e      	cmp	r6, fp
 800a26a:	f67f aebf 	bls.w	8009fec <_scanf_float+0x80>
 800a26e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a272:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a276:	463a      	mov	r2, r7
 800a278:	4640      	mov	r0, r8
 800a27a:	4798      	blx	r3
 800a27c:	6923      	ldr	r3, [r4, #16]
 800a27e:	3b01      	subs	r3, #1
 800a280:	6123      	str	r3, [r4, #16]
 800a282:	e7f1      	b.n	800a268 <_scanf_float+0x2fc>
 800a284:	46aa      	mov	sl, r5
 800a286:	9602      	str	r6, [sp, #8]
 800a288:	e7df      	b.n	800a24a <_scanf_float+0x2de>
 800a28a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	2965      	cmp	r1, #101	; 0x65
 800a292:	f103 33ff 	add.w	r3, r3, #4294967295
 800a296:	f106 35ff 	add.w	r5, r6, #4294967295
 800a29a:	6123      	str	r3, [r4, #16]
 800a29c:	d00c      	beq.n	800a2b8 <_scanf_float+0x34c>
 800a29e:	2945      	cmp	r1, #69	; 0x45
 800a2a0:	d00a      	beq.n	800a2b8 <_scanf_float+0x34c>
 800a2a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2a6:	463a      	mov	r2, r7
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	4798      	blx	r3
 800a2ac:	6923      	ldr	r3, [r4, #16]
 800a2ae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a2b2:	3b01      	subs	r3, #1
 800a2b4:	1eb5      	subs	r5, r6, #2
 800a2b6:	6123      	str	r3, [r4, #16]
 800a2b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2bc:	463a      	mov	r2, r7
 800a2be:	4640      	mov	r0, r8
 800a2c0:	4798      	blx	r3
 800a2c2:	462e      	mov	r6, r5
 800a2c4:	6825      	ldr	r5, [r4, #0]
 800a2c6:	f015 0510 	ands.w	r5, r5, #16
 800a2ca:	d14d      	bne.n	800a368 <_scanf_float+0x3fc>
 800a2cc:	7035      	strb	r5, [r6, #0]
 800a2ce:	6823      	ldr	r3, [r4, #0]
 800a2d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2d8:	d11a      	bne.n	800a310 <_scanf_float+0x3a4>
 800a2da:	9b01      	ldr	r3, [sp, #4]
 800a2dc:	454b      	cmp	r3, r9
 800a2de:	eba3 0209 	sub.w	r2, r3, r9
 800a2e2:	d122      	bne.n	800a32a <_scanf_float+0x3be>
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4659      	mov	r1, fp
 800a2e8:	4640      	mov	r0, r8
 800a2ea:	f002 fad3 	bl	800c894 <_strtod_r>
 800a2ee:	9b03      	ldr	r3, [sp, #12]
 800a2f0:	6821      	ldr	r1, [r4, #0]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	f011 0f02 	tst.w	r1, #2
 800a2f8:	f103 0204 	add.w	r2, r3, #4
 800a2fc:	d020      	beq.n	800a340 <_scanf_float+0x3d4>
 800a2fe:	9903      	ldr	r1, [sp, #12]
 800a300:	600a      	str	r2, [r1, #0]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	ed83 0b00 	vstr	d0, [r3]
 800a308:	68e3      	ldr	r3, [r4, #12]
 800a30a:	3301      	adds	r3, #1
 800a30c:	60e3      	str	r3, [r4, #12]
 800a30e:	e66e      	b.n	8009fee <_scanf_float+0x82>
 800a310:	9b04      	ldr	r3, [sp, #16]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d0e6      	beq.n	800a2e4 <_scanf_float+0x378>
 800a316:	9905      	ldr	r1, [sp, #20]
 800a318:	230a      	movs	r3, #10
 800a31a:	462a      	mov	r2, r5
 800a31c:	3101      	adds	r1, #1
 800a31e:	4640      	mov	r0, r8
 800a320:	f002 fb40 	bl	800c9a4 <_strtol_r>
 800a324:	9b04      	ldr	r3, [sp, #16]
 800a326:	9e05      	ldr	r6, [sp, #20]
 800a328:	1ac2      	subs	r2, r0, r3
 800a32a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a32e:	429e      	cmp	r6, r3
 800a330:	bf28      	it	cs
 800a332:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a336:	490d      	ldr	r1, [pc, #52]	; (800a36c <_scanf_float+0x400>)
 800a338:	4630      	mov	r0, r6
 800a33a:	f000 f8dd 	bl	800a4f8 <siprintf>
 800a33e:	e7d1      	b.n	800a2e4 <_scanf_float+0x378>
 800a340:	f011 0f04 	tst.w	r1, #4
 800a344:	9903      	ldr	r1, [sp, #12]
 800a346:	600a      	str	r2, [r1, #0]
 800a348:	d1db      	bne.n	800a302 <_scanf_float+0x396>
 800a34a:	eeb4 0b40 	vcmp.f64	d0, d0
 800a34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a352:	681e      	ldr	r6, [r3, #0]
 800a354:	d705      	bvc.n	800a362 <_scanf_float+0x3f6>
 800a356:	4806      	ldr	r0, [pc, #24]	; (800a370 <_scanf_float+0x404>)
 800a358:	f000 f9de 	bl	800a718 <nanf>
 800a35c:	ed86 0a00 	vstr	s0, [r6]
 800a360:	e7d2      	b.n	800a308 <_scanf_float+0x39c>
 800a362:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a366:	e7f9      	b.n	800a35c <_scanf_float+0x3f0>
 800a368:	2500      	movs	r5, #0
 800a36a:	e640      	b.n	8009fee <_scanf_float+0x82>
 800a36c:	0800f3b4 	.word	0x0800f3b4
 800a370:	0800f745 	.word	0x0800f745

0800a374 <std>:
 800a374:	2300      	movs	r3, #0
 800a376:	b510      	push	{r4, lr}
 800a378:	4604      	mov	r4, r0
 800a37a:	e9c0 3300 	strd	r3, r3, [r0]
 800a37e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a382:	6083      	str	r3, [r0, #8]
 800a384:	8181      	strh	r1, [r0, #12]
 800a386:	6643      	str	r3, [r0, #100]	; 0x64
 800a388:	81c2      	strh	r2, [r0, #14]
 800a38a:	6183      	str	r3, [r0, #24]
 800a38c:	4619      	mov	r1, r3
 800a38e:	2208      	movs	r2, #8
 800a390:	305c      	adds	r0, #92	; 0x5c
 800a392:	f000 f914 	bl	800a5be <memset>
 800a396:	4b0d      	ldr	r3, [pc, #52]	; (800a3cc <std+0x58>)
 800a398:	6263      	str	r3, [r4, #36]	; 0x24
 800a39a:	4b0d      	ldr	r3, [pc, #52]	; (800a3d0 <std+0x5c>)
 800a39c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a39e:	4b0d      	ldr	r3, [pc, #52]	; (800a3d4 <std+0x60>)
 800a3a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3a2:	4b0d      	ldr	r3, [pc, #52]	; (800a3d8 <std+0x64>)
 800a3a4:	6323      	str	r3, [r4, #48]	; 0x30
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	; (800a3dc <std+0x68>)
 800a3a8:	6224      	str	r4, [r4, #32]
 800a3aa:	429c      	cmp	r4, r3
 800a3ac:	d006      	beq.n	800a3bc <std+0x48>
 800a3ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a3b2:	4294      	cmp	r4, r2
 800a3b4:	d002      	beq.n	800a3bc <std+0x48>
 800a3b6:	33d0      	adds	r3, #208	; 0xd0
 800a3b8:	429c      	cmp	r4, r3
 800a3ba:	d105      	bne.n	800a3c8 <std+0x54>
 800a3bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a3c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3c4:	f7f7 bc21 	b.w	8001c0a <__retarget_lock_init_recursive>
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	bf00      	nop
 800a3cc:	0800a539 	.word	0x0800a539
 800a3d0:	0800a55b 	.word	0x0800a55b
 800a3d4:	0800a593 	.word	0x0800a593
 800a3d8:	0800a5b7 	.word	0x0800a5b7
 800a3dc:	20000d28 	.word	0x20000d28

0800a3e0 <stdio_exit_handler>:
 800a3e0:	4a02      	ldr	r2, [pc, #8]	; (800a3ec <stdio_exit_handler+0xc>)
 800a3e2:	4903      	ldr	r1, [pc, #12]	; (800a3f0 <stdio_exit_handler+0x10>)
 800a3e4:	4803      	ldr	r0, [pc, #12]	; (800a3f4 <stdio_exit_handler+0x14>)
 800a3e6:	f000 b869 	b.w	800a4bc <_fwalk_sglue>
 800a3ea:	bf00      	nop
 800a3ec:	200005bc 	.word	0x200005bc
 800a3f0:	0800cd65 	.word	0x0800cd65
 800a3f4:	200005c8 	.word	0x200005c8

0800a3f8 <cleanup_stdio>:
 800a3f8:	6841      	ldr	r1, [r0, #4]
 800a3fa:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <cleanup_stdio+0x34>)
 800a3fc:	4299      	cmp	r1, r3
 800a3fe:	b510      	push	{r4, lr}
 800a400:	4604      	mov	r4, r0
 800a402:	d001      	beq.n	800a408 <cleanup_stdio+0x10>
 800a404:	f002 fcae 	bl	800cd64 <_fflush_r>
 800a408:	68a1      	ldr	r1, [r4, #8]
 800a40a:	4b09      	ldr	r3, [pc, #36]	; (800a430 <cleanup_stdio+0x38>)
 800a40c:	4299      	cmp	r1, r3
 800a40e:	d002      	beq.n	800a416 <cleanup_stdio+0x1e>
 800a410:	4620      	mov	r0, r4
 800a412:	f002 fca7 	bl	800cd64 <_fflush_r>
 800a416:	68e1      	ldr	r1, [r4, #12]
 800a418:	4b06      	ldr	r3, [pc, #24]	; (800a434 <cleanup_stdio+0x3c>)
 800a41a:	4299      	cmp	r1, r3
 800a41c:	d004      	beq.n	800a428 <cleanup_stdio+0x30>
 800a41e:	4620      	mov	r0, r4
 800a420:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a424:	f002 bc9e 	b.w	800cd64 <_fflush_r>
 800a428:	bd10      	pop	{r4, pc}
 800a42a:	bf00      	nop
 800a42c:	20000d28 	.word	0x20000d28
 800a430:	20000d90 	.word	0x20000d90
 800a434:	20000df8 	.word	0x20000df8

0800a438 <global_stdio_init.part.0>:
 800a438:	b510      	push	{r4, lr}
 800a43a:	4b0b      	ldr	r3, [pc, #44]	; (800a468 <global_stdio_init.part.0+0x30>)
 800a43c:	4c0b      	ldr	r4, [pc, #44]	; (800a46c <global_stdio_init.part.0+0x34>)
 800a43e:	4a0c      	ldr	r2, [pc, #48]	; (800a470 <global_stdio_init.part.0+0x38>)
 800a440:	601a      	str	r2, [r3, #0]
 800a442:	4620      	mov	r0, r4
 800a444:	2200      	movs	r2, #0
 800a446:	2104      	movs	r1, #4
 800a448:	f7ff ff94 	bl	800a374 <std>
 800a44c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a450:	2201      	movs	r2, #1
 800a452:	2109      	movs	r1, #9
 800a454:	f7ff ff8e 	bl	800a374 <std>
 800a458:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a45c:	2202      	movs	r2, #2
 800a45e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a462:	2112      	movs	r1, #18
 800a464:	f7ff bf86 	b.w	800a374 <std>
 800a468:	20000e60 	.word	0x20000e60
 800a46c:	20000d28 	.word	0x20000d28
 800a470:	0800a3e1 	.word	0x0800a3e1

0800a474 <__sfp_lock_acquire>:
 800a474:	4801      	ldr	r0, [pc, #4]	; (800a47c <__sfp_lock_acquire+0x8>)
 800a476:	f7f7 bbee 	b.w	8001c56 <__retarget_lock_acquire_recursive>
 800a47a:	bf00      	nop
 800a47c:	20000d0c 	.word	0x20000d0c

0800a480 <__sfp_lock_release>:
 800a480:	4801      	ldr	r0, [pc, #4]	; (800a488 <__sfp_lock_release+0x8>)
 800a482:	f7f7 bbfc 	b.w	8001c7e <__retarget_lock_release_recursive>
 800a486:	bf00      	nop
 800a488:	20000d0c 	.word	0x20000d0c

0800a48c <__sinit>:
 800a48c:	b510      	push	{r4, lr}
 800a48e:	4604      	mov	r4, r0
 800a490:	f7ff fff0 	bl	800a474 <__sfp_lock_acquire>
 800a494:	6a23      	ldr	r3, [r4, #32]
 800a496:	b11b      	cbz	r3, 800a4a0 <__sinit+0x14>
 800a498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a49c:	f7ff bff0 	b.w	800a480 <__sfp_lock_release>
 800a4a0:	4b04      	ldr	r3, [pc, #16]	; (800a4b4 <__sinit+0x28>)
 800a4a2:	6223      	str	r3, [r4, #32]
 800a4a4:	4b04      	ldr	r3, [pc, #16]	; (800a4b8 <__sinit+0x2c>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1f5      	bne.n	800a498 <__sinit+0xc>
 800a4ac:	f7ff ffc4 	bl	800a438 <global_stdio_init.part.0>
 800a4b0:	e7f2      	b.n	800a498 <__sinit+0xc>
 800a4b2:	bf00      	nop
 800a4b4:	0800a3f9 	.word	0x0800a3f9
 800a4b8:	20000e60 	.word	0x20000e60

0800a4bc <_fwalk_sglue>:
 800a4bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	4688      	mov	r8, r1
 800a4c4:	4614      	mov	r4, r2
 800a4c6:	2600      	movs	r6, #0
 800a4c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4cc:	f1b9 0901 	subs.w	r9, r9, #1
 800a4d0:	d505      	bpl.n	800a4de <_fwalk_sglue+0x22>
 800a4d2:	6824      	ldr	r4, [r4, #0]
 800a4d4:	2c00      	cmp	r4, #0
 800a4d6:	d1f7      	bne.n	800a4c8 <_fwalk_sglue+0xc>
 800a4d8:	4630      	mov	r0, r6
 800a4da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4de:	89ab      	ldrh	r3, [r5, #12]
 800a4e0:	2b01      	cmp	r3, #1
 800a4e2:	d907      	bls.n	800a4f4 <_fwalk_sglue+0x38>
 800a4e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4e8:	3301      	adds	r3, #1
 800a4ea:	d003      	beq.n	800a4f4 <_fwalk_sglue+0x38>
 800a4ec:	4629      	mov	r1, r5
 800a4ee:	4638      	mov	r0, r7
 800a4f0:	47c0      	blx	r8
 800a4f2:	4306      	orrs	r6, r0
 800a4f4:	3568      	adds	r5, #104	; 0x68
 800a4f6:	e7e9      	b.n	800a4cc <_fwalk_sglue+0x10>

0800a4f8 <siprintf>:
 800a4f8:	b40e      	push	{r1, r2, r3}
 800a4fa:	b500      	push	{lr}
 800a4fc:	b09c      	sub	sp, #112	; 0x70
 800a4fe:	ab1d      	add	r3, sp, #116	; 0x74
 800a500:	9002      	str	r0, [sp, #8]
 800a502:	9006      	str	r0, [sp, #24]
 800a504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a508:	4809      	ldr	r0, [pc, #36]	; (800a530 <siprintf+0x38>)
 800a50a:	9107      	str	r1, [sp, #28]
 800a50c:	9104      	str	r1, [sp, #16]
 800a50e:	4909      	ldr	r1, [pc, #36]	; (800a534 <siprintf+0x3c>)
 800a510:	f853 2b04 	ldr.w	r2, [r3], #4
 800a514:	9105      	str	r1, [sp, #20]
 800a516:	6800      	ldr	r0, [r0, #0]
 800a518:	9301      	str	r3, [sp, #4]
 800a51a:	a902      	add	r1, sp, #8
 800a51c:	f002 fa9e 	bl	800ca5c <_svfiprintf_r>
 800a520:	9b02      	ldr	r3, [sp, #8]
 800a522:	2200      	movs	r2, #0
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	b01c      	add	sp, #112	; 0x70
 800a528:	f85d eb04 	ldr.w	lr, [sp], #4
 800a52c:	b003      	add	sp, #12
 800a52e:	4770      	bx	lr
 800a530:	20000614 	.word	0x20000614
 800a534:	ffff0208 	.word	0xffff0208

0800a538 <__sread>:
 800a538:	b510      	push	{r4, lr}
 800a53a:	460c      	mov	r4, r1
 800a53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a540:	f000 f87e 	bl	800a640 <_read_r>
 800a544:	2800      	cmp	r0, #0
 800a546:	bfab      	itete	ge
 800a548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a54a:	89a3      	ldrhlt	r3, [r4, #12]
 800a54c:	181b      	addge	r3, r3, r0
 800a54e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a552:	bfac      	ite	ge
 800a554:	6563      	strge	r3, [r4, #84]	; 0x54
 800a556:	81a3      	strhlt	r3, [r4, #12]
 800a558:	bd10      	pop	{r4, pc}

0800a55a <__swrite>:
 800a55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a55e:	461f      	mov	r7, r3
 800a560:	898b      	ldrh	r3, [r1, #12]
 800a562:	05db      	lsls	r3, r3, #23
 800a564:	4605      	mov	r5, r0
 800a566:	460c      	mov	r4, r1
 800a568:	4616      	mov	r6, r2
 800a56a:	d505      	bpl.n	800a578 <__swrite+0x1e>
 800a56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a570:	2302      	movs	r3, #2
 800a572:	2200      	movs	r2, #0
 800a574:	f000 f852 	bl	800a61c <_lseek_r>
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a57e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a582:	81a3      	strh	r3, [r4, #12]
 800a584:	4632      	mov	r2, r6
 800a586:	463b      	mov	r3, r7
 800a588:	4628      	mov	r0, r5
 800a58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a58e:	f000 b879 	b.w	800a684 <_write_r>

0800a592 <__sseek>:
 800a592:	b510      	push	{r4, lr}
 800a594:	460c      	mov	r4, r1
 800a596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59a:	f000 f83f 	bl	800a61c <_lseek_r>
 800a59e:	1c43      	adds	r3, r0, #1
 800a5a0:	89a3      	ldrh	r3, [r4, #12]
 800a5a2:	bf15      	itete	ne
 800a5a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a5a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a5aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a5ae:	81a3      	strheq	r3, [r4, #12]
 800a5b0:	bf18      	it	ne
 800a5b2:	81a3      	strhne	r3, [r4, #12]
 800a5b4:	bd10      	pop	{r4, pc}

0800a5b6 <__sclose>:
 800a5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5ba:	f000 b81f 	b.w	800a5fc <_close_r>

0800a5be <memset>:
 800a5be:	4402      	add	r2, r0
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d100      	bne.n	800a5c8 <memset+0xa>
 800a5c6:	4770      	bx	lr
 800a5c8:	f803 1b01 	strb.w	r1, [r3], #1
 800a5cc:	e7f9      	b.n	800a5c2 <memset+0x4>

0800a5ce <strncat>:
 800a5ce:	b530      	push	{r4, r5, lr}
 800a5d0:	4604      	mov	r4, r0
 800a5d2:	7825      	ldrb	r5, [r4, #0]
 800a5d4:	4623      	mov	r3, r4
 800a5d6:	3401      	adds	r4, #1
 800a5d8:	2d00      	cmp	r5, #0
 800a5da:	d1fa      	bne.n	800a5d2 <strncat+0x4>
 800a5dc:	3a01      	subs	r2, #1
 800a5de:	d304      	bcc.n	800a5ea <strncat+0x1c>
 800a5e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a5e4:	f803 4b01 	strb.w	r4, [r3], #1
 800a5e8:	b904      	cbnz	r4, 800a5ec <strncat+0x1e>
 800a5ea:	bd30      	pop	{r4, r5, pc}
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	d1f5      	bne.n	800a5dc <strncat+0xe>
 800a5f0:	701a      	strb	r2, [r3, #0]
 800a5f2:	e7f3      	b.n	800a5dc <strncat+0xe>

0800a5f4 <_localeconv_r>:
 800a5f4:	4800      	ldr	r0, [pc, #0]	; (800a5f8 <_localeconv_r+0x4>)
 800a5f6:	4770      	bx	lr
 800a5f8:	20000708 	.word	0x20000708

0800a5fc <_close_r>:
 800a5fc:	b538      	push	{r3, r4, r5, lr}
 800a5fe:	4d06      	ldr	r5, [pc, #24]	; (800a618 <_close_r+0x1c>)
 800a600:	2300      	movs	r3, #0
 800a602:	4604      	mov	r4, r0
 800a604:	4608      	mov	r0, r1
 800a606:	602b      	str	r3, [r5, #0]
 800a608:	f7f7 f84f 	bl	80016aa <_close>
 800a60c:	1c43      	adds	r3, r0, #1
 800a60e:	d102      	bne.n	800a616 <_close_r+0x1a>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	b103      	cbz	r3, 800a616 <_close_r+0x1a>
 800a614:	6023      	str	r3, [r4, #0]
 800a616:	bd38      	pop	{r3, r4, r5, pc}
 800a618:	20000e64 	.word	0x20000e64

0800a61c <_lseek_r>:
 800a61c:	b538      	push	{r3, r4, r5, lr}
 800a61e:	4d07      	ldr	r5, [pc, #28]	; (800a63c <_lseek_r+0x20>)
 800a620:	4604      	mov	r4, r0
 800a622:	4608      	mov	r0, r1
 800a624:	4611      	mov	r1, r2
 800a626:	2200      	movs	r2, #0
 800a628:	602a      	str	r2, [r5, #0]
 800a62a:	461a      	mov	r2, r3
 800a62c:	f7f7 f864 	bl	80016f8 <_lseek>
 800a630:	1c43      	adds	r3, r0, #1
 800a632:	d102      	bne.n	800a63a <_lseek_r+0x1e>
 800a634:	682b      	ldr	r3, [r5, #0]
 800a636:	b103      	cbz	r3, 800a63a <_lseek_r+0x1e>
 800a638:	6023      	str	r3, [r4, #0]
 800a63a:	bd38      	pop	{r3, r4, r5, pc}
 800a63c:	20000e64 	.word	0x20000e64

0800a640 <_read_r>:
 800a640:	b538      	push	{r3, r4, r5, lr}
 800a642:	4d07      	ldr	r5, [pc, #28]	; (800a660 <_read_r+0x20>)
 800a644:	4604      	mov	r4, r0
 800a646:	4608      	mov	r0, r1
 800a648:	4611      	mov	r1, r2
 800a64a:	2200      	movs	r2, #0
 800a64c:	602a      	str	r2, [r5, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	f7f6 fff2 	bl	8001638 <_read>
 800a654:	1c43      	adds	r3, r0, #1
 800a656:	d102      	bne.n	800a65e <_read_r+0x1e>
 800a658:	682b      	ldr	r3, [r5, #0]
 800a65a:	b103      	cbz	r3, 800a65e <_read_r+0x1e>
 800a65c:	6023      	str	r3, [r4, #0]
 800a65e:	bd38      	pop	{r3, r4, r5, pc}
 800a660:	20000e64 	.word	0x20000e64

0800a664 <_sbrk_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	4d06      	ldr	r5, [pc, #24]	; (800a680 <_sbrk_r+0x1c>)
 800a668:	2300      	movs	r3, #0
 800a66a:	4604      	mov	r4, r0
 800a66c:	4608      	mov	r0, r1
 800a66e:	602b      	str	r3, [r5, #0]
 800a670:	f7f7 f850 	bl	8001714 <_sbrk>
 800a674:	1c43      	adds	r3, r0, #1
 800a676:	d102      	bne.n	800a67e <_sbrk_r+0x1a>
 800a678:	682b      	ldr	r3, [r5, #0]
 800a67a:	b103      	cbz	r3, 800a67e <_sbrk_r+0x1a>
 800a67c:	6023      	str	r3, [r4, #0]
 800a67e:	bd38      	pop	{r3, r4, r5, pc}
 800a680:	20000e64 	.word	0x20000e64

0800a684 <_write_r>:
 800a684:	b538      	push	{r3, r4, r5, lr}
 800a686:	4d07      	ldr	r5, [pc, #28]	; (800a6a4 <_write_r+0x20>)
 800a688:	4604      	mov	r4, r0
 800a68a:	4608      	mov	r0, r1
 800a68c:	4611      	mov	r1, r2
 800a68e:	2200      	movs	r2, #0
 800a690:	602a      	str	r2, [r5, #0]
 800a692:	461a      	mov	r2, r3
 800a694:	f7f6 ffed 	bl	8001672 <_write>
 800a698:	1c43      	adds	r3, r0, #1
 800a69a:	d102      	bne.n	800a6a2 <_write_r+0x1e>
 800a69c:	682b      	ldr	r3, [r5, #0]
 800a69e:	b103      	cbz	r3, 800a6a2 <_write_r+0x1e>
 800a6a0:	6023      	str	r3, [r4, #0]
 800a6a2:	bd38      	pop	{r3, r4, r5, pc}
 800a6a4:	20000e64 	.word	0x20000e64

0800a6a8 <__errno>:
 800a6a8:	4b01      	ldr	r3, [pc, #4]	; (800a6b0 <__errno+0x8>)
 800a6aa:	6818      	ldr	r0, [r3, #0]
 800a6ac:	4770      	bx	lr
 800a6ae:	bf00      	nop
 800a6b0:	20000614 	.word	0x20000614

0800a6b4 <__libc_init_array>:
 800a6b4:	b570      	push	{r4, r5, r6, lr}
 800a6b6:	4d0d      	ldr	r5, [pc, #52]	; (800a6ec <__libc_init_array+0x38>)
 800a6b8:	4c0d      	ldr	r4, [pc, #52]	; (800a6f0 <__libc_init_array+0x3c>)
 800a6ba:	1b64      	subs	r4, r4, r5
 800a6bc:	10a4      	asrs	r4, r4, #2
 800a6be:	2600      	movs	r6, #0
 800a6c0:	42a6      	cmp	r6, r4
 800a6c2:	d109      	bne.n	800a6d8 <__libc_init_array+0x24>
 800a6c4:	4d0b      	ldr	r5, [pc, #44]	; (800a6f4 <__libc_init_array+0x40>)
 800a6c6:	4c0c      	ldr	r4, [pc, #48]	; (800a6f8 <__libc_init_array+0x44>)
 800a6c8:	f003 fa46 	bl	800db58 <_init>
 800a6cc:	1b64      	subs	r4, r4, r5
 800a6ce:	10a4      	asrs	r4, r4, #2
 800a6d0:	2600      	movs	r6, #0
 800a6d2:	42a6      	cmp	r6, r4
 800a6d4:	d105      	bne.n	800a6e2 <__libc_init_array+0x2e>
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}
 800a6d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6dc:	4798      	blx	r3
 800a6de:	3601      	adds	r6, #1
 800a6e0:	e7ee      	b.n	800a6c0 <__libc_init_array+0xc>
 800a6e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a6e6:	4798      	blx	r3
 800a6e8:	3601      	adds	r6, #1
 800a6ea:	e7f2      	b.n	800a6d2 <__libc_init_array+0x1e>
 800a6ec:	0800f7b0 	.word	0x0800f7b0
 800a6f0:	0800f7b0 	.word	0x0800f7b0
 800a6f4:	0800f7b0 	.word	0x0800f7b0
 800a6f8:	0800f7b4 	.word	0x0800f7b4

0800a6fc <memcpy>:
 800a6fc:	440a      	add	r2, r1
 800a6fe:	4291      	cmp	r1, r2
 800a700:	f100 33ff 	add.w	r3, r0, #4294967295
 800a704:	d100      	bne.n	800a708 <memcpy+0xc>
 800a706:	4770      	bx	lr
 800a708:	b510      	push	{r4, lr}
 800a70a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a70e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a712:	4291      	cmp	r1, r2
 800a714:	d1f9      	bne.n	800a70a <memcpy+0xe>
 800a716:	bd10      	pop	{r4, pc}

0800a718 <nanf>:
 800a718:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a720 <nanf+0x8>
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	7fc00000 	.word	0x7fc00000

0800a724 <quorem>:
 800a724:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a728:	6903      	ldr	r3, [r0, #16]
 800a72a:	690c      	ldr	r4, [r1, #16]
 800a72c:	42a3      	cmp	r3, r4
 800a72e:	4607      	mov	r7, r0
 800a730:	db7e      	blt.n	800a830 <quorem+0x10c>
 800a732:	3c01      	subs	r4, #1
 800a734:	f101 0814 	add.w	r8, r1, #20
 800a738:	f100 0514 	add.w	r5, r0, #20
 800a73c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a746:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a74a:	3301      	adds	r3, #1
 800a74c:	429a      	cmp	r2, r3
 800a74e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a752:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a756:	fbb2 f6f3 	udiv	r6, r2, r3
 800a75a:	d331      	bcc.n	800a7c0 <quorem+0x9c>
 800a75c:	f04f 0e00 	mov.w	lr, #0
 800a760:	4640      	mov	r0, r8
 800a762:	46ac      	mov	ip, r5
 800a764:	46f2      	mov	sl, lr
 800a766:	f850 2b04 	ldr.w	r2, [r0], #4
 800a76a:	b293      	uxth	r3, r2
 800a76c:	fb06 e303 	mla	r3, r6, r3, lr
 800a770:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a774:	0c1a      	lsrs	r2, r3, #16
 800a776:	b29b      	uxth	r3, r3
 800a778:	ebaa 0303 	sub.w	r3, sl, r3
 800a77c:	f8dc a000 	ldr.w	sl, [ip]
 800a780:	fa13 f38a 	uxtah	r3, r3, sl
 800a784:	fb06 220e 	mla	r2, r6, lr, r2
 800a788:	9300      	str	r3, [sp, #0]
 800a78a:	9b00      	ldr	r3, [sp, #0]
 800a78c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a790:	b292      	uxth	r2, r2
 800a792:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a796:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a79a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a79e:	4581      	cmp	r9, r0
 800a7a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7a4:	f84c 3b04 	str.w	r3, [ip], #4
 800a7a8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a7ac:	d2db      	bcs.n	800a766 <quorem+0x42>
 800a7ae:	f855 300b 	ldr.w	r3, [r5, fp]
 800a7b2:	b92b      	cbnz	r3, 800a7c0 <quorem+0x9c>
 800a7b4:	9b01      	ldr	r3, [sp, #4]
 800a7b6:	3b04      	subs	r3, #4
 800a7b8:	429d      	cmp	r5, r3
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	d32c      	bcc.n	800a818 <quorem+0xf4>
 800a7be:	613c      	str	r4, [r7, #16]
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f001 f8b7 	bl	800b934 <__mcmp>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	db22      	blt.n	800a810 <quorem+0xec>
 800a7ca:	3601      	adds	r6, #1
 800a7cc:	4629      	mov	r1, r5
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a7d4:	f8d1 c000 	ldr.w	ip, [r1]
 800a7d8:	b293      	uxth	r3, r2
 800a7da:	1ac3      	subs	r3, r0, r3
 800a7dc:	0c12      	lsrs	r2, r2, #16
 800a7de:	fa13 f38c 	uxtah	r3, r3, ip
 800a7e2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a7e6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a7f0:	45c1      	cmp	r9, r8
 800a7f2:	f841 3b04 	str.w	r3, [r1], #4
 800a7f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7fa:	d2e9      	bcs.n	800a7d0 <quorem+0xac>
 800a7fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a800:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a804:	b922      	cbnz	r2, 800a810 <quorem+0xec>
 800a806:	3b04      	subs	r3, #4
 800a808:	429d      	cmp	r5, r3
 800a80a:	461a      	mov	r2, r3
 800a80c:	d30a      	bcc.n	800a824 <quorem+0x100>
 800a80e:	613c      	str	r4, [r7, #16]
 800a810:	4630      	mov	r0, r6
 800a812:	b003      	add	sp, #12
 800a814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a818:	6812      	ldr	r2, [r2, #0]
 800a81a:	3b04      	subs	r3, #4
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	d1ce      	bne.n	800a7be <quorem+0x9a>
 800a820:	3c01      	subs	r4, #1
 800a822:	e7c9      	b.n	800a7b8 <quorem+0x94>
 800a824:	6812      	ldr	r2, [r2, #0]
 800a826:	3b04      	subs	r3, #4
 800a828:	2a00      	cmp	r2, #0
 800a82a:	d1f0      	bne.n	800a80e <quorem+0xea>
 800a82c:	3c01      	subs	r4, #1
 800a82e:	e7eb      	b.n	800a808 <quorem+0xe4>
 800a830:	2000      	movs	r0, #0
 800a832:	e7ee      	b.n	800a812 <quorem+0xee>
 800a834:	0000      	movs	r0, r0
	...

0800a838 <_dtoa_r>:
 800a838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a83c:	ed2d 8b02 	vpush	{d8}
 800a840:	69c5      	ldr	r5, [r0, #28]
 800a842:	b091      	sub	sp, #68	; 0x44
 800a844:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a848:	ec59 8b10 	vmov	r8, r9, d0
 800a84c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a84e:	9106      	str	r1, [sp, #24]
 800a850:	4606      	mov	r6, r0
 800a852:	9208      	str	r2, [sp, #32]
 800a854:	930c      	str	r3, [sp, #48]	; 0x30
 800a856:	b975      	cbnz	r5, 800a876 <_dtoa_r+0x3e>
 800a858:	2010      	movs	r0, #16
 800a85a:	f7fe fe99 	bl	8009590 <malloc>
 800a85e:	4602      	mov	r2, r0
 800a860:	61f0      	str	r0, [r6, #28]
 800a862:	b920      	cbnz	r0, 800a86e <_dtoa_r+0x36>
 800a864:	4ba6      	ldr	r3, [pc, #664]	; (800ab00 <_dtoa_r+0x2c8>)
 800a866:	21ef      	movs	r1, #239	; 0xef
 800a868:	48a6      	ldr	r0, [pc, #664]	; (800ab04 <_dtoa_r+0x2cc>)
 800a86a:	f002 fad9 	bl	800ce20 <__assert_func>
 800a86e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a872:	6005      	str	r5, [r0, #0]
 800a874:	60c5      	str	r5, [r0, #12]
 800a876:	69f3      	ldr	r3, [r6, #28]
 800a878:	6819      	ldr	r1, [r3, #0]
 800a87a:	b151      	cbz	r1, 800a892 <_dtoa_r+0x5a>
 800a87c:	685a      	ldr	r2, [r3, #4]
 800a87e:	604a      	str	r2, [r1, #4]
 800a880:	2301      	movs	r3, #1
 800a882:	4093      	lsls	r3, r2
 800a884:	608b      	str	r3, [r1, #8]
 800a886:	4630      	mov	r0, r6
 800a888:	f000 fdce 	bl	800b428 <_Bfree>
 800a88c:	69f3      	ldr	r3, [r6, #28]
 800a88e:	2200      	movs	r2, #0
 800a890:	601a      	str	r2, [r3, #0]
 800a892:	f1b9 0300 	subs.w	r3, r9, #0
 800a896:	bfbb      	ittet	lt
 800a898:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a89c:	9303      	strlt	r3, [sp, #12]
 800a89e:	2300      	movge	r3, #0
 800a8a0:	2201      	movlt	r2, #1
 800a8a2:	bfac      	ite	ge
 800a8a4:	6023      	strge	r3, [r4, #0]
 800a8a6:	6022      	strlt	r2, [r4, #0]
 800a8a8:	4b97      	ldr	r3, [pc, #604]	; (800ab08 <_dtoa_r+0x2d0>)
 800a8aa:	9c03      	ldr	r4, [sp, #12]
 800a8ac:	43a3      	bics	r3, r4
 800a8ae:	d11c      	bne.n	800a8ea <_dtoa_r+0xb2>
 800a8b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8b2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a8b6:	6013      	str	r3, [r2, #0]
 800a8b8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a8bc:	ea53 0308 	orrs.w	r3, r3, r8
 800a8c0:	f000 84fb 	beq.w	800b2ba <_dtoa_r+0xa82>
 800a8c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8c6:	b963      	cbnz	r3, 800a8e2 <_dtoa_r+0xaa>
 800a8c8:	4b90      	ldr	r3, [pc, #576]	; (800ab0c <_dtoa_r+0x2d4>)
 800a8ca:	e020      	b.n	800a90e <_dtoa_r+0xd6>
 800a8cc:	4b90      	ldr	r3, [pc, #576]	; (800ab10 <_dtoa_r+0x2d8>)
 800a8ce:	9301      	str	r3, [sp, #4]
 800a8d0:	3308      	adds	r3, #8
 800a8d2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	9801      	ldr	r0, [sp, #4]
 800a8d8:	b011      	add	sp, #68	; 0x44
 800a8da:	ecbd 8b02 	vpop	{d8}
 800a8de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e2:	4b8a      	ldr	r3, [pc, #552]	; (800ab0c <_dtoa_r+0x2d4>)
 800a8e4:	9301      	str	r3, [sp, #4]
 800a8e6:	3303      	adds	r3, #3
 800a8e8:	e7f3      	b.n	800a8d2 <_dtoa_r+0x9a>
 800a8ea:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a8ee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a8f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f6:	d10c      	bne.n	800a912 <_dtoa_r+0xda>
 800a8f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	6013      	str	r3, [r2, #0]
 800a8fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a900:	2b00      	cmp	r3, #0
 800a902:	f000 84d7 	beq.w	800b2b4 <_dtoa_r+0xa7c>
 800a906:	4b83      	ldr	r3, [pc, #524]	; (800ab14 <_dtoa_r+0x2dc>)
 800a908:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	3b01      	subs	r3, #1
 800a90e:	9301      	str	r3, [sp, #4]
 800a910:	e7e1      	b.n	800a8d6 <_dtoa_r+0x9e>
 800a912:	aa0e      	add	r2, sp, #56	; 0x38
 800a914:	a90f      	add	r1, sp, #60	; 0x3c
 800a916:	4630      	mov	r0, r6
 800a918:	eeb0 0b48 	vmov.f64	d0, d8
 800a91c:	f001 f920 	bl	800bb60 <__d2b>
 800a920:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a926:	4605      	mov	r5, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d046      	beq.n	800a9ba <_dtoa_r+0x182>
 800a92c:	eeb0 7b48 	vmov.f64	d7, d8
 800a930:	ee18 1a90 	vmov	r1, s17
 800a934:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a938:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a93c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a940:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a944:	2000      	movs	r0, #0
 800a946:	ee07 1a90 	vmov	s15, r1
 800a94a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a94e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aae8 <_dtoa_r+0x2b0>
 800a952:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a956:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800aaf0 <_dtoa_r+0x2b8>
 800a95a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a95e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aaf8 <_dtoa_r+0x2c0>
 800a962:	ee07 3a90 	vmov	s15, r3
 800a966:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a96a:	eeb0 7b46 	vmov.f64	d7, d6
 800a96e:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a972:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a976:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a97e:	ee16 ba90 	vmov	fp, s13
 800a982:	9009      	str	r0, [sp, #36]	; 0x24
 800a984:	d508      	bpl.n	800a998 <_dtoa_r+0x160>
 800a986:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a98a:	eeb4 6b47 	vcmp.f64	d6, d7
 800a98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a992:	bf18      	it	ne
 800a994:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a998:	f1bb 0f16 	cmp.w	fp, #22
 800a99c:	d82b      	bhi.n	800a9f6 <_dtoa_r+0x1be>
 800a99e:	495e      	ldr	r1, [pc, #376]	; (800ab18 <_dtoa_r+0x2e0>)
 800a9a0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a9a4:	ed91 7b00 	vldr	d7, [r1]
 800a9a8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b0:	d501      	bpl.n	800a9b6 <_dtoa_r+0x17e>
 800a9b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	e01e      	b.n	800a9f8 <_dtoa_r+0x1c0>
 800a9ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a9bc:	4413      	add	r3, r2
 800a9be:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a9c2:	2920      	cmp	r1, #32
 800a9c4:	bfc1      	itttt	gt
 800a9c6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a9ca:	408c      	lslgt	r4, r1
 800a9cc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a9d0:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a9d4:	bfd6      	itet	le
 800a9d6:	f1c1 0120 	rsble	r1, r1, #32
 800a9da:	4321      	orrgt	r1, r4
 800a9dc:	fa08 f101 	lslle.w	r1, r8, r1
 800a9e0:	ee07 1a90 	vmov	s15, r1
 800a9e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a9e8:	3b01      	subs	r3, #1
 800a9ea:	ee17 1a90 	vmov	r1, s15
 800a9ee:	2001      	movs	r0, #1
 800a9f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a9f4:	e7a7      	b.n	800a946 <_dtoa_r+0x10e>
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	1ad2      	subs	r2, r2, r3
 800a9fa:	1e53      	subs	r3, r2, #1
 800a9fc:	9305      	str	r3, [sp, #20]
 800a9fe:	bf45      	ittet	mi
 800aa00:	f1c2 0301 	rsbmi	r3, r2, #1
 800aa04:	9304      	strmi	r3, [sp, #16]
 800aa06:	2300      	movpl	r3, #0
 800aa08:	2300      	movmi	r3, #0
 800aa0a:	bf4c      	ite	mi
 800aa0c:	9305      	strmi	r3, [sp, #20]
 800aa0e:	9304      	strpl	r3, [sp, #16]
 800aa10:	f1bb 0f00 	cmp.w	fp, #0
 800aa14:	910b      	str	r1, [sp, #44]	; 0x2c
 800aa16:	db18      	blt.n	800aa4a <_dtoa_r+0x212>
 800aa18:	9b05      	ldr	r3, [sp, #20]
 800aa1a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800aa1e:	445b      	add	r3, fp
 800aa20:	9305      	str	r3, [sp, #20]
 800aa22:	2300      	movs	r3, #0
 800aa24:	9a06      	ldr	r2, [sp, #24]
 800aa26:	2a09      	cmp	r2, #9
 800aa28:	d848      	bhi.n	800aabc <_dtoa_r+0x284>
 800aa2a:	2a05      	cmp	r2, #5
 800aa2c:	bfc4      	itt	gt
 800aa2e:	3a04      	subgt	r2, #4
 800aa30:	9206      	strgt	r2, [sp, #24]
 800aa32:	9a06      	ldr	r2, [sp, #24]
 800aa34:	f1a2 0202 	sub.w	r2, r2, #2
 800aa38:	bfcc      	ite	gt
 800aa3a:	2400      	movgt	r4, #0
 800aa3c:	2401      	movle	r4, #1
 800aa3e:	2a03      	cmp	r2, #3
 800aa40:	d847      	bhi.n	800aad2 <_dtoa_r+0x29a>
 800aa42:	e8df f002 	tbb	[pc, r2]
 800aa46:	2d0b      	.short	0x2d0b
 800aa48:	392b      	.short	0x392b
 800aa4a:	9b04      	ldr	r3, [sp, #16]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	eba3 030b 	sub.w	r3, r3, fp
 800aa52:	9304      	str	r3, [sp, #16]
 800aa54:	920a      	str	r2, [sp, #40]	; 0x28
 800aa56:	f1cb 0300 	rsb	r3, fp, #0
 800aa5a:	e7e3      	b.n	800aa24 <_dtoa_r+0x1ec>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	9207      	str	r2, [sp, #28]
 800aa60:	9a08      	ldr	r2, [sp, #32]
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	dc38      	bgt.n	800aad8 <_dtoa_r+0x2a0>
 800aa66:	f04f 0a01 	mov.w	sl, #1
 800aa6a:	46d1      	mov	r9, sl
 800aa6c:	4652      	mov	r2, sl
 800aa6e:	f8cd a020 	str.w	sl, [sp, #32]
 800aa72:	69f7      	ldr	r7, [r6, #28]
 800aa74:	2100      	movs	r1, #0
 800aa76:	2004      	movs	r0, #4
 800aa78:	f100 0c14 	add.w	ip, r0, #20
 800aa7c:	4594      	cmp	ip, r2
 800aa7e:	d930      	bls.n	800aae2 <_dtoa_r+0x2aa>
 800aa80:	6079      	str	r1, [r7, #4]
 800aa82:	4630      	mov	r0, r6
 800aa84:	930d      	str	r3, [sp, #52]	; 0x34
 800aa86:	f000 fc8f 	bl	800b3a8 <_Balloc>
 800aa8a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa8c:	9001      	str	r0, [sp, #4]
 800aa8e:	4602      	mov	r2, r0
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d145      	bne.n	800ab20 <_dtoa_r+0x2e8>
 800aa94:	4b21      	ldr	r3, [pc, #132]	; (800ab1c <_dtoa_r+0x2e4>)
 800aa96:	f240 11af 	movw	r1, #431	; 0x1af
 800aa9a:	e6e5      	b.n	800a868 <_dtoa_r+0x30>
 800aa9c:	2201      	movs	r2, #1
 800aa9e:	e7de      	b.n	800aa5e <_dtoa_r+0x226>
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	9207      	str	r2, [sp, #28]
 800aaa4:	9a08      	ldr	r2, [sp, #32]
 800aaa6:	eb0b 0a02 	add.w	sl, fp, r2
 800aaaa:	f10a 0901 	add.w	r9, sl, #1
 800aaae:	464a      	mov	r2, r9
 800aab0:	2a01      	cmp	r2, #1
 800aab2:	bfb8      	it	lt
 800aab4:	2201      	movlt	r2, #1
 800aab6:	e7dc      	b.n	800aa72 <_dtoa_r+0x23a>
 800aab8:	2201      	movs	r2, #1
 800aaba:	e7f2      	b.n	800aaa2 <_dtoa_r+0x26a>
 800aabc:	2401      	movs	r4, #1
 800aabe:	2200      	movs	r2, #0
 800aac0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800aac4:	f04f 3aff 	mov.w	sl, #4294967295
 800aac8:	2100      	movs	r1, #0
 800aaca:	46d1      	mov	r9, sl
 800aacc:	2212      	movs	r2, #18
 800aace:	9108      	str	r1, [sp, #32]
 800aad0:	e7cf      	b.n	800aa72 <_dtoa_r+0x23a>
 800aad2:	2201      	movs	r2, #1
 800aad4:	9207      	str	r2, [sp, #28]
 800aad6:	e7f5      	b.n	800aac4 <_dtoa_r+0x28c>
 800aad8:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aadc:	46d1      	mov	r9, sl
 800aade:	4652      	mov	r2, sl
 800aae0:	e7c7      	b.n	800aa72 <_dtoa_r+0x23a>
 800aae2:	3101      	adds	r1, #1
 800aae4:	0040      	lsls	r0, r0, #1
 800aae6:	e7c7      	b.n	800aa78 <_dtoa_r+0x240>
 800aae8:	636f4361 	.word	0x636f4361
 800aaec:	3fd287a7 	.word	0x3fd287a7
 800aaf0:	8b60c8b3 	.word	0x8b60c8b3
 800aaf4:	3fc68a28 	.word	0x3fc68a28
 800aaf8:	509f79fb 	.word	0x509f79fb
 800aafc:	3fd34413 	.word	0x3fd34413
 800ab00:	0800f3c6 	.word	0x0800f3c6
 800ab04:	0800f3dd 	.word	0x0800f3dd
 800ab08:	7ff00000 	.word	0x7ff00000
 800ab0c:	0800f3c2 	.word	0x0800f3c2
 800ab10:	0800f3b9 	.word	0x0800f3b9
 800ab14:	0800f391 	.word	0x0800f391
 800ab18:	0800f4c8 	.word	0x0800f4c8
 800ab1c:	0800f435 	.word	0x0800f435
 800ab20:	69f2      	ldr	r2, [r6, #28]
 800ab22:	9901      	ldr	r1, [sp, #4]
 800ab24:	6011      	str	r1, [r2, #0]
 800ab26:	f1b9 0f0e 	cmp.w	r9, #14
 800ab2a:	d86c      	bhi.n	800ac06 <_dtoa_r+0x3ce>
 800ab2c:	2c00      	cmp	r4, #0
 800ab2e:	d06a      	beq.n	800ac06 <_dtoa_r+0x3ce>
 800ab30:	f1bb 0f00 	cmp.w	fp, #0
 800ab34:	f340 80a0 	ble.w	800ac78 <_dtoa_r+0x440>
 800ab38:	4ac1      	ldr	r2, [pc, #772]	; (800ae40 <_dtoa_r+0x608>)
 800ab3a:	f00b 010f 	and.w	r1, fp, #15
 800ab3e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ab42:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ab46:	ed92 7b00 	vldr	d7, [r2]
 800ab4a:	ea4f 122b 	mov.w	r2, fp, asr #4
 800ab4e:	f000 8087 	beq.w	800ac60 <_dtoa_r+0x428>
 800ab52:	49bc      	ldr	r1, [pc, #752]	; (800ae44 <_dtoa_r+0x60c>)
 800ab54:	ed91 6b08 	vldr	d6, [r1, #32]
 800ab58:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ab5c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ab60:	f002 020f 	and.w	r2, r2, #15
 800ab64:	2103      	movs	r1, #3
 800ab66:	48b7      	ldr	r0, [pc, #732]	; (800ae44 <_dtoa_r+0x60c>)
 800ab68:	2a00      	cmp	r2, #0
 800ab6a:	d17b      	bne.n	800ac64 <_dtoa_r+0x42c>
 800ab6c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab70:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ab74:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab7a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab7e:	2a00      	cmp	r2, #0
 800ab80:	f000 80a0 	beq.w	800acc4 <_dtoa_r+0x48c>
 800ab84:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ab88:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ab8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab90:	f140 8098 	bpl.w	800acc4 <_dtoa_r+0x48c>
 800ab94:	f1b9 0f00 	cmp.w	r9, #0
 800ab98:	f000 8094 	beq.w	800acc4 <_dtoa_r+0x48c>
 800ab9c:	f1ba 0f00 	cmp.w	sl, #0
 800aba0:	dd2f      	ble.n	800ac02 <_dtoa_r+0x3ca>
 800aba2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800aba6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abaa:	ed8d 7b02 	vstr	d7, [sp, #8]
 800abae:	f10b 32ff 	add.w	r2, fp, #4294967295
 800abb2:	3101      	adds	r1, #1
 800abb4:	4654      	mov	r4, sl
 800abb6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800abba:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800abbe:	ee07 1a90 	vmov	s15, r1
 800abc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800abc6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800abca:	ee15 7a90 	vmov	r7, s11
 800abce:	ec51 0b15 	vmov	r0, r1, d5
 800abd2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800abd6:	2c00      	cmp	r4, #0
 800abd8:	d177      	bne.n	800acca <_dtoa_r+0x492>
 800abda:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800abde:	ee36 6b47 	vsub.f64	d6, d6, d7
 800abe2:	ec41 0b17 	vmov	d7, r0, r1
 800abe6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abee:	f300 826a 	bgt.w	800b0c6 <_dtoa_r+0x88e>
 800abf2:	eeb1 7b47 	vneg.f64	d7, d7
 800abf6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abfe:	f100 8260 	bmi.w	800b0c2 <_dtoa_r+0x88a>
 800ac02:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ac06:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ac08:	2a00      	cmp	r2, #0
 800ac0a:	f2c0 811d 	blt.w	800ae48 <_dtoa_r+0x610>
 800ac0e:	f1bb 0f0e 	cmp.w	fp, #14
 800ac12:	f300 8119 	bgt.w	800ae48 <_dtoa_r+0x610>
 800ac16:	4b8a      	ldr	r3, [pc, #552]	; (800ae40 <_dtoa_r+0x608>)
 800ac18:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac1c:	ed93 6b00 	vldr	d6, [r3]
 800ac20:	9b08      	ldr	r3, [sp, #32]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	f280 80b7 	bge.w	800ad96 <_dtoa_r+0x55e>
 800ac28:	f1b9 0f00 	cmp.w	r9, #0
 800ac2c:	f300 80b3 	bgt.w	800ad96 <_dtoa_r+0x55e>
 800ac30:	f040 8246 	bne.w	800b0c0 <_dtoa_r+0x888>
 800ac34:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ac38:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ac3c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac40:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ac44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac48:	464c      	mov	r4, r9
 800ac4a:	464f      	mov	r7, r9
 800ac4c:	f280 821c 	bge.w	800b088 <_dtoa_r+0x850>
 800ac50:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac54:	2331      	movs	r3, #49	; 0x31
 800ac56:	f808 3b01 	strb.w	r3, [r8], #1
 800ac5a:	f10b 0b01 	add.w	fp, fp, #1
 800ac5e:	e218      	b.n	800b092 <_dtoa_r+0x85a>
 800ac60:	2102      	movs	r1, #2
 800ac62:	e780      	b.n	800ab66 <_dtoa_r+0x32e>
 800ac64:	07d4      	lsls	r4, r2, #31
 800ac66:	d504      	bpl.n	800ac72 <_dtoa_r+0x43a>
 800ac68:	ed90 6b00 	vldr	d6, [r0]
 800ac6c:	3101      	adds	r1, #1
 800ac6e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac72:	1052      	asrs	r2, r2, #1
 800ac74:	3008      	adds	r0, #8
 800ac76:	e777      	b.n	800ab68 <_dtoa_r+0x330>
 800ac78:	d022      	beq.n	800acc0 <_dtoa_r+0x488>
 800ac7a:	f1cb 0200 	rsb	r2, fp, #0
 800ac7e:	4970      	ldr	r1, [pc, #448]	; (800ae40 <_dtoa_r+0x608>)
 800ac80:	f002 000f 	and.w	r0, r2, #15
 800ac84:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ac88:	ed91 7b00 	vldr	d7, [r1]
 800ac8c:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ac90:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac94:	486b      	ldr	r0, [pc, #428]	; (800ae44 <_dtoa_r+0x60c>)
 800ac96:	1112      	asrs	r2, r2, #4
 800ac98:	2400      	movs	r4, #0
 800ac9a:	2102      	movs	r1, #2
 800ac9c:	b92a      	cbnz	r2, 800acaa <_dtoa_r+0x472>
 800ac9e:	2c00      	cmp	r4, #0
 800aca0:	f43f af6a 	beq.w	800ab78 <_dtoa_r+0x340>
 800aca4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aca8:	e766      	b.n	800ab78 <_dtoa_r+0x340>
 800acaa:	07d7      	lsls	r7, r2, #31
 800acac:	d505      	bpl.n	800acba <_dtoa_r+0x482>
 800acae:	ed90 6b00 	vldr	d6, [r0]
 800acb2:	3101      	adds	r1, #1
 800acb4:	2401      	movs	r4, #1
 800acb6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acba:	1052      	asrs	r2, r2, #1
 800acbc:	3008      	adds	r0, #8
 800acbe:	e7ed      	b.n	800ac9c <_dtoa_r+0x464>
 800acc0:	2102      	movs	r1, #2
 800acc2:	e759      	b.n	800ab78 <_dtoa_r+0x340>
 800acc4:	465a      	mov	r2, fp
 800acc6:	464c      	mov	r4, r9
 800acc8:	e775      	b.n	800abb6 <_dtoa_r+0x37e>
 800acca:	ec41 0b17 	vmov	d7, r0, r1
 800acce:	495c      	ldr	r1, [pc, #368]	; (800ae40 <_dtoa_r+0x608>)
 800acd0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800acd4:	ed11 4b02 	vldr	d4, [r1, #-8]
 800acd8:	9901      	ldr	r1, [sp, #4]
 800acda:	440c      	add	r4, r1
 800acdc:	9907      	ldr	r1, [sp, #28]
 800acde:	b351      	cbz	r1, 800ad36 <_dtoa_r+0x4fe>
 800ace0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ace4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ace8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800acec:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800acf0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800acf4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800acf8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800acfc:	ee14 1a90 	vmov	r1, s9
 800ad00:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ad04:	3130      	adds	r1, #48	; 0x30
 800ad06:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ad0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ad0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad12:	f808 1b01 	strb.w	r1, [r8], #1
 800ad16:	d439      	bmi.n	800ad8c <_dtoa_r+0x554>
 800ad18:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ad1c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ad20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad24:	d472      	bmi.n	800ae0c <_dtoa_r+0x5d4>
 800ad26:	45a0      	cmp	r8, r4
 800ad28:	f43f af6b 	beq.w	800ac02 <_dtoa_r+0x3ca>
 800ad2c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ad30:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad34:	e7e0      	b.n	800acf8 <_dtoa_r+0x4c0>
 800ad36:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad3e:	4620      	mov	r0, r4
 800ad40:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ad44:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ad48:	ee14 1a90 	vmov	r1, s9
 800ad4c:	3130      	adds	r1, #48	; 0x30
 800ad4e:	f808 1b01 	strb.w	r1, [r8], #1
 800ad52:	45a0      	cmp	r8, r4
 800ad54:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ad58:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ad5c:	d118      	bne.n	800ad90 <_dtoa_r+0x558>
 800ad5e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ad62:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ad66:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ad6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6e:	dc4d      	bgt.n	800ae0c <_dtoa_r+0x5d4>
 800ad70:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ad74:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ad78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7c:	f57f af41 	bpl.w	800ac02 <_dtoa_r+0x3ca>
 800ad80:	4680      	mov	r8, r0
 800ad82:	3801      	subs	r0, #1
 800ad84:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ad88:	2b30      	cmp	r3, #48	; 0x30
 800ad8a:	d0f9      	beq.n	800ad80 <_dtoa_r+0x548>
 800ad8c:	4693      	mov	fp, r2
 800ad8e:	e02a      	b.n	800ade6 <_dtoa_r+0x5ae>
 800ad90:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad94:	e7d6      	b.n	800ad44 <_dtoa_r+0x50c>
 800ad96:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad9a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ad9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ada2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ada6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800adaa:	ee15 3a10 	vmov	r3, s10
 800adae:	3330      	adds	r3, #48	; 0x30
 800adb0:	f808 3b01 	strb.w	r3, [r8], #1
 800adb4:	9b01      	ldr	r3, [sp, #4]
 800adb6:	eba8 0303 	sub.w	r3, r8, r3
 800adba:	4599      	cmp	r9, r3
 800adbc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800adc0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800adc4:	d133      	bne.n	800ae2e <_dtoa_r+0x5f6>
 800adc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800adca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800adce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800add2:	dc1a      	bgt.n	800ae0a <_dtoa_r+0x5d2>
 800add4:	eeb4 7b46 	vcmp.f64	d7, d6
 800add8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800addc:	d103      	bne.n	800ade6 <_dtoa_r+0x5ae>
 800adde:	ee15 3a10 	vmov	r3, s10
 800ade2:	07d9      	lsls	r1, r3, #31
 800ade4:	d411      	bmi.n	800ae0a <_dtoa_r+0x5d2>
 800ade6:	4629      	mov	r1, r5
 800ade8:	4630      	mov	r0, r6
 800adea:	f000 fb1d 	bl	800b428 <_Bfree>
 800adee:	2300      	movs	r3, #0
 800adf0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adf2:	f888 3000 	strb.w	r3, [r8]
 800adf6:	f10b 0301 	add.w	r3, fp, #1
 800adfa:	6013      	str	r3, [r2, #0]
 800adfc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f43f ad69 	beq.w	800a8d6 <_dtoa_r+0x9e>
 800ae04:	f8c3 8000 	str.w	r8, [r3]
 800ae08:	e565      	b.n	800a8d6 <_dtoa_r+0x9e>
 800ae0a:	465a      	mov	r2, fp
 800ae0c:	4643      	mov	r3, r8
 800ae0e:	4698      	mov	r8, r3
 800ae10:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800ae14:	2939      	cmp	r1, #57	; 0x39
 800ae16:	d106      	bne.n	800ae26 <_dtoa_r+0x5ee>
 800ae18:	9901      	ldr	r1, [sp, #4]
 800ae1a:	4299      	cmp	r1, r3
 800ae1c:	d1f7      	bne.n	800ae0e <_dtoa_r+0x5d6>
 800ae1e:	9801      	ldr	r0, [sp, #4]
 800ae20:	2130      	movs	r1, #48	; 0x30
 800ae22:	3201      	adds	r2, #1
 800ae24:	7001      	strb	r1, [r0, #0]
 800ae26:	7819      	ldrb	r1, [r3, #0]
 800ae28:	3101      	adds	r1, #1
 800ae2a:	7019      	strb	r1, [r3, #0]
 800ae2c:	e7ae      	b.n	800ad8c <_dtoa_r+0x554>
 800ae2e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ae32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae3a:	d1b2      	bne.n	800ada2 <_dtoa_r+0x56a>
 800ae3c:	e7d3      	b.n	800ade6 <_dtoa_r+0x5ae>
 800ae3e:	bf00      	nop
 800ae40:	0800f4c8 	.word	0x0800f4c8
 800ae44:	0800f4a0 	.word	0x0800f4a0
 800ae48:	9907      	ldr	r1, [sp, #28]
 800ae4a:	2900      	cmp	r1, #0
 800ae4c:	f000 80d0 	beq.w	800aff0 <_dtoa_r+0x7b8>
 800ae50:	9906      	ldr	r1, [sp, #24]
 800ae52:	2901      	cmp	r1, #1
 800ae54:	f300 80b4 	bgt.w	800afc0 <_dtoa_r+0x788>
 800ae58:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae5a:	2900      	cmp	r1, #0
 800ae5c:	f000 80ac 	beq.w	800afb8 <_dtoa_r+0x780>
 800ae60:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae64:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae68:	461c      	mov	r4, r3
 800ae6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ae6c:	9b04      	ldr	r3, [sp, #16]
 800ae6e:	4413      	add	r3, r2
 800ae70:	9304      	str	r3, [sp, #16]
 800ae72:	9b05      	ldr	r3, [sp, #20]
 800ae74:	2101      	movs	r1, #1
 800ae76:	4413      	add	r3, r2
 800ae78:	4630      	mov	r0, r6
 800ae7a:	9305      	str	r3, [sp, #20]
 800ae7c:	f000 fbd4 	bl	800b628 <__i2b>
 800ae80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae82:	4607      	mov	r7, r0
 800ae84:	f1b8 0f00 	cmp.w	r8, #0
 800ae88:	d00d      	beq.n	800aea6 <_dtoa_r+0x66e>
 800ae8a:	9a05      	ldr	r2, [sp, #20]
 800ae8c:	2a00      	cmp	r2, #0
 800ae8e:	dd0a      	ble.n	800aea6 <_dtoa_r+0x66e>
 800ae90:	4542      	cmp	r2, r8
 800ae92:	9904      	ldr	r1, [sp, #16]
 800ae94:	bfa8      	it	ge
 800ae96:	4642      	movge	r2, r8
 800ae98:	1a89      	subs	r1, r1, r2
 800ae9a:	9104      	str	r1, [sp, #16]
 800ae9c:	9905      	ldr	r1, [sp, #20]
 800ae9e:	eba8 0802 	sub.w	r8, r8, r2
 800aea2:	1a8a      	subs	r2, r1, r2
 800aea4:	9205      	str	r2, [sp, #20]
 800aea6:	b303      	cbz	r3, 800aeea <_dtoa_r+0x6b2>
 800aea8:	9a07      	ldr	r2, [sp, #28]
 800aeaa:	2a00      	cmp	r2, #0
 800aeac:	f000 80a5 	beq.w	800affa <_dtoa_r+0x7c2>
 800aeb0:	2c00      	cmp	r4, #0
 800aeb2:	dd13      	ble.n	800aedc <_dtoa_r+0x6a4>
 800aeb4:	4639      	mov	r1, r7
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	4630      	mov	r0, r6
 800aeba:	930d      	str	r3, [sp, #52]	; 0x34
 800aebc:	f000 fc74 	bl	800b7a8 <__pow5mult>
 800aec0:	462a      	mov	r2, r5
 800aec2:	4601      	mov	r1, r0
 800aec4:	4607      	mov	r7, r0
 800aec6:	4630      	mov	r0, r6
 800aec8:	f000 fbc4 	bl	800b654 <__multiply>
 800aecc:	4629      	mov	r1, r5
 800aece:	9009      	str	r0, [sp, #36]	; 0x24
 800aed0:	4630      	mov	r0, r6
 800aed2:	f000 faa9 	bl	800b428 <_Bfree>
 800aed6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aed8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aeda:	4615      	mov	r5, r2
 800aedc:	1b1a      	subs	r2, r3, r4
 800aede:	d004      	beq.n	800aeea <_dtoa_r+0x6b2>
 800aee0:	4629      	mov	r1, r5
 800aee2:	4630      	mov	r0, r6
 800aee4:	f000 fc60 	bl	800b7a8 <__pow5mult>
 800aee8:	4605      	mov	r5, r0
 800aeea:	2101      	movs	r1, #1
 800aeec:	4630      	mov	r0, r6
 800aeee:	f000 fb9b 	bl	800b628 <__i2b>
 800aef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	4604      	mov	r4, r0
 800aef8:	f340 8081 	ble.w	800affe <_dtoa_r+0x7c6>
 800aefc:	461a      	mov	r2, r3
 800aefe:	4601      	mov	r1, r0
 800af00:	4630      	mov	r0, r6
 800af02:	f000 fc51 	bl	800b7a8 <__pow5mult>
 800af06:	9b06      	ldr	r3, [sp, #24]
 800af08:	2b01      	cmp	r3, #1
 800af0a:	4604      	mov	r4, r0
 800af0c:	dd7a      	ble.n	800b004 <_dtoa_r+0x7cc>
 800af0e:	2300      	movs	r3, #0
 800af10:	9309      	str	r3, [sp, #36]	; 0x24
 800af12:	6922      	ldr	r2, [r4, #16]
 800af14:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800af18:	6910      	ldr	r0, [r2, #16]
 800af1a:	f000 fb37 	bl	800b58c <__hi0bits>
 800af1e:	f1c0 0020 	rsb	r0, r0, #32
 800af22:	9b05      	ldr	r3, [sp, #20]
 800af24:	4418      	add	r0, r3
 800af26:	f010 001f 	ands.w	r0, r0, #31
 800af2a:	f000 8093 	beq.w	800b054 <_dtoa_r+0x81c>
 800af2e:	f1c0 0220 	rsb	r2, r0, #32
 800af32:	2a04      	cmp	r2, #4
 800af34:	f340 8085 	ble.w	800b042 <_dtoa_r+0x80a>
 800af38:	9b04      	ldr	r3, [sp, #16]
 800af3a:	f1c0 001c 	rsb	r0, r0, #28
 800af3e:	4403      	add	r3, r0
 800af40:	9304      	str	r3, [sp, #16]
 800af42:	9b05      	ldr	r3, [sp, #20]
 800af44:	4480      	add	r8, r0
 800af46:	4403      	add	r3, r0
 800af48:	9305      	str	r3, [sp, #20]
 800af4a:	9b04      	ldr	r3, [sp, #16]
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	dd05      	ble.n	800af5c <_dtoa_r+0x724>
 800af50:	4629      	mov	r1, r5
 800af52:	461a      	mov	r2, r3
 800af54:	4630      	mov	r0, r6
 800af56:	f000 fc81 	bl	800b85c <__lshift>
 800af5a:	4605      	mov	r5, r0
 800af5c:	9b05      	ldr	r3, [sp, #20]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	dd05      	ble.n	800af6e <_dtoa_r+0x736>
 800af62:	4621      	mov	r1, r4
 800af64:	461a      	mov	r2, r3
 800af66:	4630      	mov	r0, r6
 800af68:	f000 fc78 	bl	800b85c <__lshift>
 800af6c:	4604      	mov	r4, r0
 800af6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af70:	2b00      	cmp	r3, #0
 800af72:	d071      	beq.n	800b058 <_dtoa_r+0x820>
 800af74:	4621      	mov	r1, r4
 800af76:	4628      	mov	r0, r5
 800af78:	f000 fcdc 	bl	800b934 <__mcmp>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	da6b      	bge.n	800b058 <_dtoa_r+0x820>
 800af80:	2300      	movs	r3, #0
 800af82:	4629      	mov	r1, r5
 800af84:	220a      	movs	r2, #10
 800af86:	4630      	mov	r0, r6
 800af88:	f000 fa70 	bl	800b46c <__multadd>
 800af8c:	9b07      	ldr	r3, [sp, #28]
 800af8e:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af92:	4605      	mov	r5, r0
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 8197 	beq.w	800b2c8 <_dtoa_r+0xa90>
 800af9a:	4639      	mov	r1, r7
 800af9c:	2300      	movs	r3, #0
 800af9e:	220a      	movs	r2, #10
 800afa0:	4630      	mov	r0, r6
 800afa2:	f000 fa63 	bl	800b46c <__multadd>
 800afa6:	f1ba 0f00 	cmp.w	sl, #0
 800afaa:	4607      	mov	r7, r0
 800afac:	f300 8093 	bgt.w	800b0d6 <_dtoa_r+0x89e>
 800afb0:	9b06      	ldr	r3, [sp, #24]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	dc57      	bgt.n	800b066 <_dtoa_r+0x82e>
 800afb6:	e08e      	b.n	800b0d6 <_dtoa_r+0x89e>
 800afb8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afba:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800afbe:	e751      	b.n	800ae64 <_dtoa_r+0x62c>
 800afc0:	f109 34ff 	add.w	r4, r9, #4294967295
 800afc4:	42a3      	cmp	r3, r4
 800afc6:	bfbf      	itttt	lt
 800afc8:	1ae2      	sublt	r2, r4, r3
 800afca:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800afcc:	189b      	addlt	r3, r3, r2
 800afce:	930a      	strlt	r3, [sp, #40]	; 0x28
 800afd0:	bfae      	itee	ge
 800afd2:	1b1c      	subge	r4, r3, r4
 800afd4:	4623      	movlt	r3, r4
 800afd6:	2400      	movlt	r4, #0
 800afd8:	f1b9 0f00 	cmp.w	r9, #0
 800afdc:	bfb5      	itete	lt
 800afde:	9a04      	ldrlt	r2, [sp, #16]
 800afe0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800afe4:	eba2 0809 	sublt.w	r8, r2, r9
 800afe8:	464a      	movge	r2, r9
 800afea:	bfb8      	it	lt
 800afec:	2200      	movlt	r2, #0
 800afee:	e73c      	b.n	800ae6a <_dtoa_r+0x632>
 800aff0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800aff4:	9f07      	ldr	r7, [sp, #28]
 800aff6:	461c      	mov	r4, r3
 800aff8:	e744      	b.n	800ae84 <_dtoa_r+0x64c>
 800affa:	461a      	mov	r2, r3
 800affc:	e770      	b.n	800aee0 <_dtoa_r+0x6a8>
 800affe:	9b06      	ldr	r3, [sp, #24]
 800b000:	2b01      	cmp	r3, #1
 800b002:	dc18      	bgt.n	800b036 <_dtoa_r+0x7fe>
 800b004:	9b02      	ldr	r3, [sp, #8]
 800b006:	b9b3      	cbnz	r3, 800b036 <_dtoa_r+0x7fe>
 800b008:	9b03      	ldr	r3, [sp, #12]
 800b00a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b00e:	b9a2      	cbnz	r2, 800b03a <_dtoa_r+0x802>
 800b010:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b014:	0d12      	lsrs	r2, r2, #20
 800b016:	0512      	lsls	r2, r2, #20
 800b018:	b18a      	cbz	r2, 800b03e <_dtoa_r+0x806>
 800b01a:	9b04      	ldr	r3, [sp, #16]
 800b01c:	3301      	adds	r3, #1
 800b01e:	9304      	str	r3, [sp, #16]
 800b020:	9b05      	ldr	r3, [sp, #20]
 800b022:	3301      	adds	r3, #1
 800b024:	9305      	str	r3, [sp, #20]
 800b026:	2301      	movs	r3, #1
 800b028:	9309      	str	r3, [sp, #36]	; 0x24
 800b02a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	f47f af70 	bne.w	800af12 <_dtoa_r+0x6da>
 800b032:	2001      	movs	r0, #1
 800b034:	e775      	b.n	800af22 <_dtoa_r+0x6ea>
 800b036:	2300      	movs	r3, #0
 800b038:	e7f6      	b.n	800b028 <_dtoa_r+0x7f0>
 800b03a:	9b02      	ldr	r3, [sp, #8]
 800b03c:	e7f4      	b.n	800b028 <_dtoa_r+0x7f0>
 800b03e:	9209      	str	r2, [sp, #36]	; 0x24
 800b040:	e7f3      	b.n	800b02a <_dtoa_r+0x7f2>
 800b042:	d082      	beq.n	800af4a <_dtoa_r+0x712>
 800b044:	9b04      	ldr	r3, [sp, #16]
 800b046:	321c      	adds	r2, #28
 800b048:	4413      	add	r3, r2
 800b04a:	9304      	str	r3, [sp, #16]
 800b04c:	9b05      	ldr	r3, [sp, #20]
 800b04e:	4490      	add	r8, r2
 800b050:	4413      	add	r3, r2
 800b052:	e779      	b.n	800af48 <_dtoa_r+0x710>
 800b054:	4602      	mov	r2, r0
 800b056:	e7f5      	b.n	800b044 <_dtoa_r+0x80c>
 800b058:	f1b9 0f00 	cmp.w	r9, #0
 800b05c:	dc36      	bgt.n	800b0cc <_dtoa_r+0x894>
 800b05e:	9b06      	ldr	r3, [sp, #24]
 800b060:	2b02      	cmp	r3, #2
 800b062:	dd33      	ble.n	800b0cc <_dtoa_r+0x894>
 800b064:	46ca      	mov	sl, r9
 800b066:	f1ba 0f00 	cmp.w	sl, #0
 800b06a:	d10d      	bne.n	800b088 <_dtoa_r+0x850>
 800b06c:	4621      	mov	r1, r4
 800b06e:	4653      	mov	r3, sl
 800b070:	2205      	movs	r2, #5
 800b072:	4630      	mov	r0, r6
 800b074:	f000 f9fa 	bl	800b46c <__multadd>
 800b078:	4601      	mov	r1, r0
 800b07a:	4604      	mov	r4, r0
 800b07c:	4628      	mov	r0, r5
 800b07e:	f000 fc59 	bl	800b934 <__mcmp>
 800b082:	2800      	cmp	r0, #0
 800b084:	f73f ade4 	bgt.w	800ac50 <_dtoa_r+0x418>
 800b088:	9b08      	ldr	r3, [sp, #32]
 800b08a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b08e:	ea6f 0b03 	mvn.w	fp, r3
 800b092:	f04f 0900 	mov.w	r9, #0
 800b096:	4621      	mov	r1, r4
 800b098:	4630      	mov	r0, r6
 800b09a:	f000 f9c5 	bl	800b428 <_Bfree>
 800b09e:	2f00      	cmp	r7, #0
 800b0a0:	f43f aea1 	beq.w	800ade6 <_dtoa_r+0x5ae>
 800b0a4:	f1b9 0f00 	cmp.w	r9, #0
 800b0a8:	d005      	beq.n	800b0b6 <_dtoa_r+0x87e>
 800b0aa:	45b9      	cmp	r9, r7
 800b0ac:	d003      	beq.n	800b0b6 <_dtoa_r+0x87e>
 800b0ae:	4649      	mov	r1, r9
 800b0b0:	4630      	mov	r0, r6
 800b0b2:	f000 f9b9 	bl	800b428 <_Bfree>
 800b0b6:	4639      	mov	r1, r7
 800b0b8:	4630      	mov	r0, r6
 800b0ba:	f000 f9b5 	bl	800b428 <_Bfree>
 800b0be:	e692      	b.n	800ade6 <_dtoa_r+0x5ae>
 800b0c0:	2400      	movs	r4, #0
 800b0c2:	4627      	mov	r7, r4
 800b0c4:	e7e0      	b.n	800b088 <_dtoa_r+0x850>
 800b0c6:	4693      	mov	fp, r2
 800b0c8:	4627      	mov	r7, r4
 800b0ca:	e5c1      	b.n	800ac50 <_dtoa_r+0x418>
 800b0cc:	9b07      	ldr	r3, [sp, #28]
 800b0ce:	46ca      	mov	sl, r9
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f000 8100 	beq.w	800b2d6 <_dtoa_r+0xa9e>
 800b0d6:	f1b8 0f00 	cmp.w	r8, #0
 800b0da:	dd05      	ble.n	800b0e8 <_dtoa_r+0x8b0>
 800b0dc:	4639      	mov	r1, r7
 800b0de:	4642      	mov	r2, r8
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f000 fbbb 	bl	800b85c <__lshift>
 800b0e6:	4607      	mov	r7, r0
 800b0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d05d      	beq.n	800b1aa <_dtoa_r+0x972>
 800b0ee:	6879      	ldr	r1, [r7, #4]
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	f000 f959 	bl	800b3a8 <_Balloc>
 800b0f6:	4680      	mov	r8, r0
 800b0f8:	b928      	cbnz	r0, 800b106 <_dtoa_r+0x8ce>
 800b0fa:	4b82      	ldr	r3, [pc, #520]	; (800b304 <_dtoa_r+0xacc>)
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b102:	f7ff bbb1 	b.w	800a868 <_dtoa_r+0x30>
 800b106:	693a      	ldr	r2, [r7, #16]
 800b108:	3202      	adds	r2, #2
 800b10a:	0092      	lsls	r2, r2, #2
 800b10c:	f107 010c 	add.w	r1, r7, #12
 800b110:	300c      	adds	r0, #12
 800b112:	f7ff faf3 	bl	800a6fc <memcpy>
 800b116:	2201      	movs	r2, #1
 800b118:	4641      	mov	r1, r8
 800b11a:	4630      	mov	r0, r6
 800b11c:	f000 fb9e 	bl	800b85c <__lshift>
 800b120:	9b01      	ldr	r3, [sp, #4]
 800b122:	3301      	adds	r3, #1
 800b124:	9304      	str	r3, [sp, #16]
 800b126:	9b01      	ldr	r3, [sp, #4]
 800b128:	4453      	add	r3, sl
 800b12a:	9308      	str	r3, [sp, #32]
 800b12c:	9b02      	ldr	r3, [sp, #8]
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	46b9      	mov	r9, r7
 800b134:	9307      	str	r3, [sp, #28]
 800b136:	4607      	mov	r7, r0
 800b138:	9b04      	ldr	r3, [sp, #16]
 800b13a:	4621      	mov	r1, r4
 800b13c:	3b01      	subs	r3, #1
 800b13e:	4628      	mov	r0, r5
 800b140:	9302      	str	r3, [sp, #8]
 800b142:	f7ff faef 	bl	800a724 <quorem>
 800b146:	4603      	mov	r3, r0
 800b148:	3330      	adds	r3, #48	; 0x30
 800b14a:	9005      	str	r0, [sp, #20]
 800b14c:	4649      	mov	r1, r9
 800b14e:	4628      	mov	r0, r5
 800b150:	9309      	str	r3, [sp, #36]	; 0x24
 800b152:	f000 fbef 	bl	800b934 <__mcmp>
 800b156:	463a      	mov	r2, r7
 800b158:	4682      	mov	sl, r0
 800b15a:	4621      	mov	r1, r4
 800b15c:	4630      	mov	r0, r6
 800b15e:	f000 fc05 	bl	800b96c <__mdiff>
 800b162:	68c2      	ldr	r2, [r0, #12]
 800b164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b166:	4680      	mov	r8, r0
 800b168:	bb0a      	cbnz	r2, 800b1ae <_dtoa_r+0x976>
 800b16a:	4601      	mov	r1, r0
 800b16c:	4628      	mov	r0, r5
 800b16e:	f000 fbe1 	bl	800b934 <__mcmp>
 800b172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b174:	4602      	mov	r2, r0
 800b176:	4641      	mov	r1, r8
 800b178:	4630      	mov	r0, r6
 800b17a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b17e:	f000 f953 	bl	800b428 <_Bfree>
 800b182:	9b06      	ldr	r3, [sp, #24]
 800b184:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b186:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b18a:	ea43 0102 	orr.w	r1, r3, r2
 800b18e:	9b07      	ldr	r3, [sp, #28]
 800b190:	4319      	orrs	r1, r3
 800b192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b194:	d10d      	bne.n	800b1b2 <_dtoa_r+0x97a>
 800b196:	2b39      	cmp	r3, #57	; 0x39
 800b198:	d029      	beq.n	800b1ee <_dtoa_r+0x9b6>
 800b19a:	f1ba 0f00 	cmp.w	sl, #0
 800b19e:	dd01      	ble.n	800b1a4 <_dtoa_r+0x96c>
 800b1a0:	9b05      	ldr	r3, [sp, #20]
 800b1a2:	3331      	adds	r3, #49	; 0x31
 800b1a4:	9a02      	ldr	r2, [sp, #8]
 800b1a6:	7013      	strb	r3, [r2, #0]
 800b1a8:	e775      	b.n	800b096 <_dtoa_r+0x85e>
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	e7b8      	b.n	800b120 <_dtoa_r+0x8e8>
 800b1ae:	2201      	movs	r2, #1
 800b1b0:	e7e1      	b.n	800b176 <_dtoa_r+0x93e>
 800b1b2:	f1ba 0f00 	cmp.w	sl, #0
 800b1b6:	db06      	blt.n	800b1c6 <_dtoa_r+0x98e>
 800b1b8:	9906      	ldr	r1, [sp, #24]
 800b1ba:	ea41 0a0a 	orr.w	sl, r1, sl
 800b1be:	9907      	ldr	r1, [sp, #28]
 800b1c0:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b1c4:	d120      	bne.n	800b208 <_dtoa_r+0x9d0>
 800b1c6:	2a00      	cmp	r2, #0
 800b1c8:	ddec      	ble.n	800b1a4 <_dtoa_r+0x96c>
 800b1ca:	4629      	mov	r1, r5
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	9304      	str	r3, [sp, #16]
 800b1d2:	f000 fb43 	bl	800b85c <__lshift>
 800b1d6:	4621      	mov	r1, r4
 800b1d8:	4605      	mov	r5, r0
 800b1da:	f000 fbab 	bl	800b934 <__mcmp>
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	9b04      	ldr	r3, [sp, #16]
 800b1e2:	dc02      	bgt.n	800b1ea <_dtoa_r+0x9b2>
 800b1e4:	d1de      	bne.n	800b1a4 <_dtoa_r+0x96c>
 800b1e6:	07da      	lsls	r2, r3, #31
 800b1e8:	d5dc      	bpl.n	800b1a4 <_dtoa_r+0x96c>
 800b1ea:	2b39      	cmp	r3, #57	; 0x39
 800b1ec:	d1d8      	bne.n	800b1a0 <_dtoa_r+0x968>
 800b1ee:	9a02      	ldr	r2, [sp, #8]
 800b1f0:	2339      	movs	r3, #57	; 0x39
 800b1f2:	7013      	strb	r3, [r2, #0]
 800b1f4:	4643      	mov	r3, r8
 800b1f6:	4698      	mov	r8, r3
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b1fe:	2a39      	cmp	r2, #57	; 0x39
 800b200:	d051      	beq.n	800b2a6 <_dtoa_r+0xa6e>
 800b202:	3201      	adds	r2, #1
 800b204:	701a      	strb	r2, [r3, #0]
 800b206:	e746      	b.n	800b096 <_dtoa_r+0x85e>
 800b208:	2a00      	cmp	r2, #0
 800b20a:	dd03      	ble.n	800b214 <_dtoa_r+0x9dc>
 800b20c:	2b39      	cmp	r3, #57	; 0x39
 800b20e:	d0ee      	beq.n	800b1ee <_dtoa_r+0x9b6>
 800b210:	3301      	adds	r3, #1
 800b212:	e7c7      	b.n	800b1a4 <_dtoa_r+0x96c>
 800b214:	9a04      	ldr	r2, [sp, #16]
 800b216:	9908      	ldr	r1, [sp, #32]
 800b218:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b21c:	428a      	cmp	r2, r1
 800b21e:	d02b      	beq.n	800b278 <_dtoa_r+0xa40>
 800b220:	4629      	mov	r1, r5
 800b222:	2300      	movs	r3, #0
 800b224:	220a      	movs	r2, #10
 800b226:	4630      	mov	r0, r6
 800b228:	f000 f920 	bl	800b46c <__multadd>
 800b22c:	45b9      	cmp	r9, r7
 800b22e:	4605      	mov	r5, r0
 800b230:	f04f 0300 	mov.w	r3, #0
 800b234:	f04f 020a 	mov.w	r2, #10
 800b238:	4649      	mov	r1, r9
 800b23a:	4630      	mov	r0, r6
 800b23c:	d107      	bne.n	800b24e <_dtoa_r+0xa16>
 800b23e:	f000 f915 	bl	800b46c <__multadd>
 800b242:	4681      	mov	r9, r0
 800b244:	4607      	mov	r7, r0
 800b246:	9b04      	ldr	r3, [sp, #16]
 800b248:	3301      	adds	r3, #1
 800b24a:	9304      	str	r3, [sp, #16]
 800b24c:	e774      	b.n	800b138 <_dtoa_r+0x900>
 800b24e:	f000 f90d 	bl	800b46c <__multadd>
 800b252:	4639      	mov	r1, r7
 800b254:	4681      	mov	r9, r0
 800b256:	2300      	movs	r3, #0
 800b258:	220a      	movs	r2, #10
 800b25a:	4630      	mov	r0, r6
 800b25c:	f000 f906 	bl	800b46c <__multadd>
 800b260:	4607      	mov	r7, r0
 800b262:	e7f0      	b.n	800b246 <_dtoa_r+0xa0e>
 800b264:	f1ba 0f00 	cmp.w	sl, #0
 800b268:	9a01      	ldr	r2, [sp, #4]
 800b26a:	bfcc      	ite	gt
 800b26c:	46d0      	movgt	r8, sl
 800b26e:	f04f 0801 	movle.w	r8, #1
 800b272:	4490      	add	r8, r2
 800b274:	f04f 0900 	mov.w	r9, #0
 800b278:	4629      	mov	r1, r5
 800b27a:	2201      	movs	r2, #1
 800b27c:	4630      	mov	r0, r6
 800b27e:	9302      	str	r3, [sp, #8]
 800b280:	f000 faec 	bl	800b85c <__lshift>
 800b284:	4621      	mov	r1, r4
 800b286:	4605      	mov	r5, r0
 800b288:	f000 fb54 	bl	800b934 <__mcmp>
 800b28c:	2800      	cmp	r0, #0
 800b28e:	dcb1      	bgt.n	800b1f4 <_dtoa_r+0x9bc>
 800b290:	d102      	bne.n	800b298 <_dtoa_r+0xa60>
 800b292:	9b02      	ldr	r3, [sp, #8]
 800b294:	07db      	lsls	r3, r3, #31
 800b296:	d4ad      	bmi.n	800b1f4 <_dtoa_r+0x9bc>
 800b298:	4643      	mov	r3, r8
 800b29a:	4698      	mov	r8, r3
 800b29c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2a0:	2a30      	cmp	r2, #48	; 0x30
 800b2a2:	d0fa      	beq.n	800b29a <_dtoa_r+0xa62>
 800b2a4:	e6f7      	b.n	800b096 <_dtoa_r+0x85e>
 800b2a6:	9a01      	ldr	r2, [sp, #4]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	d1a4      	bne.n	800b1f6 <_dtoa_r+0x9be>
 800b2ac:	f10b 0b01 	add.w	fp, fp, #1
 800b2b0:	2331      	movs	r3, #49	; 0x31
 800b2b2:	e778      	b.n	800b1a6 <_dtoa_r+0x96e>
 800b2b4:	4b14      	ldr	r3, [pc, #80]	; (800b308 <_dtoa_r+0xad0>)
 800b2b6:	f7ff bb2a 	b.w	800a90e <_dtoa_r+0xd6>
 800b2ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	f47f ab05 	bne.w	800a8cc <_dtoa_r+0x94>
 800b2c2:	4b12      	ldr	r3, [pc, #72]	; (800b30c <_dtoa_r+0xad4>)
 800b2c4:	f7ff bb23 	b.w	800a90e <_dtoa_r+0xd6>
 800b2c8:	f1ba 0f00 	cmp.w	sl, #0
 800b2cc:	dc03      	bgt.n	800b2d6 <_dtoa_r+0xa9e>
 800b2ce:	9b06      	ldr	r3, [sp, #24]
 800b2d0:	2b02      	cmp	r3, #2
 800b2d2:	f73f aec8 	bgt.w	800b066 <_dtoa_r+0x82e>
 800b2d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b2da:	4621      	mov	r1, r4
 800b2dc:	4628      	mov	r0, r5
 800b2de:	f7ff fa21 	bl	800a724 <quorem>
 800b2e2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b2e6:	f808 3b01 	strb.w	r3, [r8], #1
 800b2ea:	9a01      	ldr	r2, [sp, #4]
 800b2ec:	eba8 0202 	sub.w	r2, r8, r2
 800b2f0:	4592      	cmp	sl, r2
 800b2f2:	ddb7      	ble.n	800b264 <_dtoa_r+0xa2c>
 800b2f4:	4629      	mov	r1, r5
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	220a      	movs	r2, #10
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f000 f8b6 	bl	800b46c <__multadd>
 800b300:	4605      	mov	r5, r0
 800b302:	e7ea      	b.n	800b2da <_dtoa_r+0xaa2>
 800b304:	0800f435 	.word	0x0800f435
 800b308:	0800f390 	.word	0x0800f390
 800b30c:	0800f3b9 	.word	0x0800f3b9

0800b310 <_free_r>:
 800b310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b312:	2900      	cmp	r1, #0
 800b314:	d044      	beq.n	800b3a0 <_free_r+0x90>
 800b316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b31a:	9001      	str	r0, [sp, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f1a1 0404 	sub.w	r4, r1, #4
 800b322:	bfb8      	it	lt
 800b324:	18e4      	addlt	r4, r4, r3
 800b326:	f7fe f9db 	bl	80096e0 <__malloc_lock>
 800b32a:	4a1e      	ldr	r2, [pc, #120]	; (800b3a4 <_free_r+0x94>)
 800b32c:	9801      	ldr	r0, [sp, #4]
 800b32e:	6813      	ldr	r3, [r2, #0]
 800b330:	b933      	cbnz	r3, 800b340 <_free_r+0x30>
 800b332:	6063      	str	r3, [r4, #4]
 800b334:	6014      	str	r4, [r2, #0]
 800b336:	b003      	add	sp, #12
 800b338:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b33c:	f7fe b9d6 	b.w	80096ec <__malloc_unlock>
 800b340:	42a3      	cmp	r3, r4
 800b342:	d908      	bls.n	800b356 <_free_r+0x46>
 800b344:	6825      	ldr	r5, [r4, #0]
 800b346:	1961      	adds	r1, r4, r5
 800b348:	428b      	cmp	r3, r1
 800b34a:	bf01      	itttt	eq
 800b34c:	6819      	ldreq	r1, [r3, #0]
 800b34e:	685b      	ldreq	r3, [r3, #4]
 800b350:	1949      	addeq	r1, r1, r5
 800b352:	6021      	streq	r1, [r4, #0]
 800b354:	e7ed      	b.n	800b332 <_free_r+0x22>
 800b356:	461a      	mov	r2, r3
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	b10b      	cbz	r3, 800b360 <_free_r+0x50>
 800b35c:	42a3      	cmp	r3, r4
 800b35e:	d9fa      	bls.n	800b356 <_free_r+0x46>
 800b360:	6811      	ldr	r1, [r2, #0]
 800b362:	1855      	adds	r5, r2, r1
 800b364:	42a5      	cmp	r5, r4
 800b366:	d10b      	bne.n	800b380 <_free_r+0x70>
 800b368:	6824      	ldr	r4, [r4, #0]
 800b36a:	4421      	add	r1, r4
 800b36c:	1854      	adds	r4, r2, r1
 800b36e:	42a3      	cmp	r3, r4
 800b370:	6011      	str	r1, [r2, #0]
 800b372:	d1e0      	bne.n	800b336 <_free_r+0x26>
 800b374:	681c      	ldr	r4, [r3, #0]
 800b376:	685b      	ldr	r3, [r3, #4]
 800b378:	6053      	str	r3, [r2, #4]
 800b37a:	440c      	add	r4, r1
 800b37c:	6014      	str	r4, [r2, #0]
 800b37e:	e7da      	b.n	800b336 <_free_r+0x26>
 800b380:	d902      	bls.n	800b388 <_free_r+0x78>
 800b382:	230c      	movs	r3, #12
 800b384:	6003      	str	r3, [r0, #0]
 800b386:	e7d6      	b.n	800b336 <_free_r+0x26>
 800b388:	6825      	ldr	r5, [r4, #0]
 800b38a:	1961      	adds	r1, r4, r5
 800b38c:	428b      	cmp	r3, r1
 800b38e:	bf04      	itt	eq
 800b390:	6819      	ldreq	r1, [r3, #0]
 800b392:	685b      	ldreq	r3, [r3, #4]
 800b394:	6063      	str	r3, [r4, #4]
 800b396:	bf04      	itt	eq
 800b398:	1949      	addeq	r1, r1, r5
 800b39a:	6021      	streq	r1, [r4, #0]
 800b39c:	6054      	str	r4, [r2, #4]
 800b39e:	e7ca      	b.n	800b336 <_free_r+0x26>
 800b3a0:	b003      	add	sp, #12
 800b3a2:	bd30      	pop	{r4, r5, pc}
 800b3a4:	20000d20 	.word	0x20000d20

0800b3a8 <_Balloc>:
 800b3a8:	b570      	push	{r4, r5, r6, lr}
 800b3aa:	69c6      	ldr	r6, [r0, #28]
 800b3ac:	4604      	mov	r4, r0
 800b3ae:	460d      	mov	r5, r1
 800b3b0:	b976      	cbnz	r6, 800b3d0 <_Balloc+0x28>
 800b3b2:	2010      	movs	r0, #16
 800b3b4:	f7fe f8ec 	bl	8009590 <malloc>
 800b3b8:	4602      	mov	r2, r0
 800b3ba:	61e0      	str	r0, [r4, #28]
 800b3bc:	b920      	cbnz	r0, 800b3c8 <_Balloc+0x20>
 800b3be:	4b18      	ldr	r3, [pc, #96]	; (800b420 <_Balloc+0x78>)
 800b3c0:	4818      	ldr	r0, [pc, #96]	; (800b424 <_Balloc+0x7c>)
 800b3c2:	216b      	movs	r1, #107	; 0x6b
 800b3c4:	f001 fd2c 	bl	800ce20 <__assert_func>
 800b3c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3cc:	6006      	str	r6, [r0, #0]
 800b3ce:	60c6      	str	r6, [r0, #12]
 800b3d0:	69e6      	ldr	r6, [r4, #28]
 800b3d2:	68f3      	ldr	r3, [r6, #12]
 800b3d4:	b183      	cbz	r3, 800b3f8 <_Balloc+0x50>
 800b3d6:	69e3      	ldr	r3, [r4, #28]
 800b3d8:	68db      	ldr	r3, [r3, #12]
 800b3da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3de:	b9b8      	cbnz	r0, 800b410 <_Balloc+0x68>
 800b3e0:	2101      	movs	r1, #1
 800b3e2:	fa01 f605 	lsl.w	r6, r1, r5
 800b3e6:	1d72      	adds	r2, r6, #5
 800b3e8:	0092      	lsls	r2, r2, #2
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	f001 fd36 	bl	800ce5c <_calloc_r>
 800b3f0:	b160      	cbz	r0, 800b40c <_Balloc+0x64>
 800b3f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3f6:	e00e      	b.n	800b416 <_Balloc+0x6e>
 800b3f8:	2221      	movs	r2, #33	; 0x21
 800b3fa:	2104      	movs	r1, #4
 800b3fc:	4620      	mov	r0, r4
 800b3fe:	f001 fd2d 	bl	800ce5c <_calloc_r>
 800b402:	69e3      	ldr	r3, [r4, #28]
 800b404:	60f0      	str	r0, [r6, #12]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1e4      	bne.n	800b3d6 <_Balloc+0x2e>
 800b40c:	2000      	movs	r0, #0
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
 800b410:	6802      	ldr	r2, [r0, #0]
 800b412:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b416:	2300      	movs	r3, #0
 800b418:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b41c:	e7f7      	b.n	800b40e <_Balloc+0x66>
 800b41e:	bf00      	nop
 800b420:	0800f3c6 	.word	0x0800f3c6
 800b424:	0800f446 	.word	0x0800f446

0800b428 <_Bfree>:
 800b428:	b570      	push	{r4, r5, r6, lr}
 800b42a:	69c6      	ldr	r6, [r0, #28]
 800b42c:	4605      	mov	r5, r0
 800b42e:	460c      	mov	r4, r1
 800b430:	b976      	cbnz	r6, 800b450 <_Bfree+0x28>
 800b432:	2010      	movs	r0, #16
 800b434:	f7fe f8ac 	bl	8009590 <malloc>
 800b438:	4602      	mov	r2, r0
 800b43a:	61e8      	str	r0, [r5, #28]
 800b43c:	b920      	cbnz	r0, 800b448 <_Bfree+0x20>
 800b43e:	4b09      	ldr	r3, [pc, #36]	; (800b464 <_Bfree+0x3c>)
 800b440:	4809      	ldr	r0, [pc, #36]	; (800b468 <_Bfree+0x40>)
 800b442:	218f      	movs	r1, #143	; 0x8f
 800b444:	f001 fcec 	bl	800ce20 <__assert_func>
 800b448:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b44c:	6006      	str	r6, [r0, #0]
 800b44e:	60c6      	str	r6, [r0, #12]
 800b450:	b13c      	cbz	r4, 800b462 <_Bfree+0x3a>
 800b452:	69eb      	ldr	r3, [r5, #28]
 800b454:	6862      	ldr	r2, [r4, #4]
 800b456:	68db      	ldr	r3, [r3, #12]
 800b458:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b45c:	6021      	str	r1, [r4, #0]
 800b45e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b462:	bd70      	pop	{r4, r5, r6, pc}
 800b464:	0800f3c6 	.word	0x0800f3c6
 800b468:	0800f446 	.word	0x0800f446

0800b46c <__multadd>:
 800b46c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b470:	690d      	ldr	r5, [r1, #16]
 800b472:	4607      	mov	r7, r0
 800b474:	460c      	mov	r4, r1
 800b476:	461e      	mov	r6, r3
 800b478:	f101 0c14 	add.w	ip, r1, #20
 800b47c:	2000      	movs	r0, #0
 800b47e:	f8dc 3000 	ldr.w	r3, [ip]
 800b482:	b299      	uxth	r1, r3
 800b484:	fb02 6101 	mla	r1, r2, r1, r6
 800b488:	0c1e      	lsrs	r6, r3, #16
 800b48a:	0c0b      	lsrs	r3, r1, #16
 800b48c:	fb02 3306 	mla	r3, r2, r6, r3
 800b490:	b289      	uxth	r1, r1
 800b492:	3001      	adds	r0, #1
 800b494:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b498:	4285      	cmp	r5, r0
 800b49a:	f84c 1b04 	str.w	r1, [ip], #4
 800b49e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b4a2:	dcec      	bgt.n	800b47e <__multadd+0x12>
 800b4a4:	b30e      	cbz	r6, 800b4ea <__multadd+0x7e>
 800b4a6:	68a3      	ldr	r3, [r4, #8]
 800b4a8:	42ab      	cmp	r3, r5
 800b4aa:	dc19      	bgt.n	800b4e0 <__multadd+0x74>
 800b4ac:	6861      	ldr	r1, [r4, #4]
 800b4ae:	4638      	mov	r0, r7
 800b4b0:	3101      	adds	r1, #1
 800b4b2:	f7ff ff79 	bl	800b3a8 <_Balloc>
 800b4b6:	4680      	mov	r8, r0
 800b4b8:	b928      	cbnz	r0, 800b4c6 <__multadd+0x5a>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	4b0c      	ldr	r3, [pc, #48]	; (800b4f0 <__multadd+0x84>)
 800b4be:	480d      	ldr	r0, [pc, #52]	; (800b4f4 <__multadd+0x88>)
 800b4c0:	21ba      	movs	r1, #186	; 0xba
 800b4c2:	f001 fcad 	bl	800ce20 <__assert_func>
 800b4c6:	6922      	ldr	r2, [r4, #16]
 800b4c8:	3202      	adds	r2, #2
 800b4ca:	f104 010c 	add.w	r1, r4, #12
 800b4ce:	0092      	lsls	r2, r2, #2
 800b4d0:	300c      	adds	r0, #12
 800b4d2:	f7ff f913 	bl	800a6fc <memcpy>
 800b4d6:	4621      	mov	r1, r4
 800b4d8:	4638      	mov	r0, r7
 800b4da:	f7ff ffa5 	bl	800b428 <_Bfree>
 800b4de:	4644      	mov	r4, r8
 800b4e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4e4:	3501      	adds	r5, #1
 800b4e6:	615e      	str	r6, [r3, #20]
 800b4e8:	6125      	str	r5, [r4, #16]
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4f0:	0800f435 	.word	0x0800f435
 800b4f4:	0800f446 	.word	0x0800f446

0800b4f8 <__s2b>:
 800b4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	4615      	mov	r5, r2
 800b500:	461f      	mov	r7, r3
 800b502:	2209      	movs	r2, #9
 800b504:	3308      	adds	r3, #8
 800b506:	4606      	mov	r6, r0
 800b508:	fb93 f3f2 	sdiv	r3, r3, r2
 800b50c:	2100      	movs	r1, #0
 800b50e:	2201      	movs	r2, #1
 800b510:	429a      	cmp	r2, r3
 800b512:	db09      	blt.n	800b528 <__s2b+0x30>
 800b514:	4630      	mov	r0, r6
 800b516:	f7ff ff47 	bl	800b3a8 <_Balloc>
 800b51a:	b940      	cbnz	r0, 800b52e <__s2b+0x36>
 800b51c:	4602      	mov	r2, r0
 800b51e:	4b19      	ldr	r3, [pc, #100]	; (800b584 <__s2b+0x8c>)
 800b520:	4819      	ldr	r0, [pc, #100]	; (800b588 <__s2b+0x90>)
 800b522:	21d3      	movs	r1, #211	; 0xd3
 800b524:	f001 fc7c 	bl	800ce20 <__assert_func>
 800b528:	0052      	lsls	r2, r2, #1
 800b52a:	3101      	adds	r1, #1
 800b52c:	e7f0      	b.n	800b510 <__s2b+0x18>
 800b52e:	9b08      	ldr	r3, [sp, #32]
 800b530:	6143      	str	r3, [r0, #20]
 800b532:	2d09      	cmp	r5, #9
 800b534:	f04f 0301 	mov.w	r3, #1
 800b538:	6103      	str	r3, [r0, #16]
 800b53a:	dd16      	ble.n	800b56a <__s2b+0x72>
 800b53c:	f104 0909 	add.w	r9, r4, #9
 800b540:	46c8      	mov	r8, r9
 800b542:	442c      	add	r4, r5
 800b544:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b548:	4601      	mov	r1, r0
 800b54a:	3b30      	subs	r3, #48	; 0x30
 800b54c:	220a      	movs	r2, #10
 800b54e:	4630      	mov	r0, r6
 800b550:	f7ff ff8c 	bl	800b46c <__multadd>
 800b554:	45a0      	cmp	r8, r4
 800b556:	d1f5      	bne.n	800b544 <__s2b+0x4c>
 800b558:	f1a5 0408 	sub.w	r4, r5, #8
 800b55c:	444c      	add	r4, r9
 800b55e:	1b2d      	subs	r5, r5, r4
 800b560:	1963      	adds	r3, r4, r5
 800b562:	42bb      	cmp	r3, r7
 800b564:	db04      	blt.n	800b570 <__s2b+0x78>
 800b566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b56a:	340a      	adds	r4, #10
 800b56c:	2509      	movs	r5, #9
 800b56e:	e7f6      	b.n	800b55e <__s2b+0x66>
 800b570:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b574:	4601      	mov	r1, r0
 800b576:	3b30      	subs	r3, #48	; 0x30
 800b578:	220a      	movs	r2, #10
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ff76 	bl	800b46c <__multadd>
 800b580:	e7ee      	b.n	800b560 <__s2b+0x68>
 800b582:	bf00      	nop
 800b584:	0800f435 	.word	0x0800f435
 800b588:	0800f446 	.word	0x0800f446

0800b58c <__hi0bits>:
 800b58c:	0c03      	lsrs	r3, r0, #16
 800b58e:	041b      	lsls	r3, r3, #16
 800b590:	b9d3      	cbnz	r3, 800b5c8 <__hi0bits+0x3c>
 800b592:	0400      	lsls	r0, r0, #16
 800b594:	2310      	movs	r3, #16
 800b596:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b59a:	bf04      	itt	eq
 800b59c:	0200      	lsleq	r0, r0, #8
 800b59e:	3308      	addeq	r3, #8
 800b5a0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b5a4:	bf04      	itt	eq
 800b5a6:	0100      	lsleq	r0, r0, #4
 800b5a8:	3304      	addeq	r3, #4
 800b5aa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b5ae:	bf04      	itt	eq
 800b5b0:	0080      	lsleq	r0, r0, #2
 800b5b2:	3302      	addeq	r3, #2
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	db05      	blt.n	800b5c4 <__hi0bits+0x38>
 800b5b8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b5bc:	f103 0301 	add.w	r3, r3, #1
 800b5c0:	bf08      	it	eq
 800b5c2:	2320      	moveq	r3, #32
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	4770      	bx	lr
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	e7e4      	b.n	800b596 <__hi0bits+0xa>

0800b5cc <__lo0bits>:
 800b5cc:	6803      	ldr	r3, [r0, #0]
 800b5ce:	f013 0207 	ands.w	r2, r3, #7
 800b5d2:	d00c      	beq.n	800b5ee <__lo0bits+0x22>
 800b5d4:	07d9      	lsls	r1, r3, #31
 800b5d6:	d422      	bmi.n	800b61e <__lo0bits+0x52>
 800b5d8:	079a      	lsls	r2, r3, #30
 800b5da:	bf49      	itett	mi
 800b5dc:	085b      	lsrmi	r3, r3, #1
 800b5de:	089b      	lsrpl	r3, r3, #2
 800b5e0:	6003      	strmi	r3, [r0, #0]
 800b5e2:	2201      	movmi	r2, #1
 800b5e4:	bf5c      	itt	pl
 800b5e6:	6003      	strpl	r3, [r0, #0]
 800b5e8:	2202      	movpl	r2, #2
 800b5ea:	4610      	mov	r0, r2
 800b5ec:	4770      	bx	lr
 800b5ee:	b299      	uxth	r1, r3
 800b5f0:	b909      	cbnz	r1, 800b5f6 <__lo0bits+0x2a>
 800b5f2:	0c1b      	lsrs	r3, r3, #16
 800b5f4:	2210      	movs	r2, #16
 800b5f6:	b2d9      	uxtb	r1, r3
 800b5f8:	b909      	cbnz	r1, 800b5fe <__lo0bits+0x32>
 800b5fa:	3208      	adds	r2, #8
 800b5fc:	0a1b      	lsrs	r3, r3, #8
 800b5fe:	0719      	lsls	r1, r3, #28
 800b600:	bf04      	itt	eq
 800b602:	091b      	lsreq	r3, r3, #4
 800b604:	3204      	addeq	r2, #4
 800b606:	0799      	lsls	r1, r3, #30
 800b608:	bf04      	itt	eq
 800b60a:	089b      	lsreq	r3, r3, #2
 800b60c:	3202      	addeq	r2, #2
 800b60e:	07d9      	lsls	r1, r3, #31
 800b610:	d403      	bmi.n	800b61a <__lo0bits+0x4e>
 800b612:	085b      	lsrs	r3, r3, #1
 800b614:	f102 0201 	add.w	r2, r2, #1
 800b618:	d003      	beq.n	800b622 <__lo0bits+0x56>
 800b61a:	6003      	str	r3, [r0, #0]
 800b61c:	e7e5      	b.n	800b5ea <__lo0bits+0x1e>
 800b61e:	2200      	movs	r2, #0
 800b620:	e7e3      	b.n	800b5ea <__lo0bits+0x1e>
 800b622:	2220      	movs	r2, #32
 800b624:	e7e1      	b.n	800b5ea <__lo0bits+0x1e>
	...

0800b628 <__i2b>:
 800b628:	b510      	push	{r4, lr}
 800b62a:	460c      	mov	r4, r1
 800b62c:	2101      	movs	r1, #1
 800b62e:	f7ff febb 	bl	800b3a8 <_Balloc>
 800b632:	4602      	mov	r2, r0
 800b634:	b928      	cbnz	r0, 800b642 <__i2b+0x1a>
 800b636:	4b05      	ldr	r3, [pc, #20]	; (800b64c <__i2b+0x24>)
 800b638:	4805      	ldr	r0, [pc, #20]	; (800b650 <__i2b+0x28>)
 800b63a:	f240 1145 	movw	r1, #325	; 0x145
 800b63e:	f001 fbef 	bl	800ce20 <__assert_func>
 800b642:	2301      	movs	r3, #1
 800b644:	6144      	str	r4, [r0, #20]
 800b646:	6103      	str	r3, [r0, #16]
 800b648:	bd10      	pop	{r4, pc}
 800b64a:	bf00      	nop
 800b64c:	0800f435 	.word	0x0800f435
 800b650:	0800f446 	.word	0x0800f446

0800b654 <__multiply>:
 800b654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b658:	4691      	mov	r9, r2
 800b65a:	690a      	ldr	r2, [r1, #16]
 800b65c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b660:	429a      	cmp	r2, r3
 800b662:	bfb8      	it	lt
 800b664:	460b      	movlt	r3, r1
 800b666:	460c      	mov	r4, r1
 800b668:	bfbc      	itt	lt
 800b66a:	464c      	movlt	r4, r9
 800b66c:	4699      	movlt	r9, r3
 800b66e:	6927      	ldr	r7, [r4, #16]
 800b670:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b674:	68a3      	ldr	r3, [r4, #8]
 800b676:	6861      	ldr	r1, [r4, #4]
 800b678:	eb07 060a 	add.w	r6, r7, sl
 800b67c:	42b3      	cmp	r3, r6
 800b67e:	b085      	sub	sp, #20
 800b680:	bfb8      	it	lt
 800b682:	3101      	addlt	r1, #1
 800b684:	f7ff fe90 	bl	800b3a8 <_Balloc>
 800b688:	b930      	cbnz	r0, 800b698 <__multiply+0x44>
 800b68a:	4602      	mov	r2, r0
 800b68c:	4b44      	ldr	r3, [pc, #272]	; (800b7a0 <__multiply+0x14c>)
 800b68e:	4845      	ldr	r0, [pc, #276]	; (800b7a4 <__multiply+0x150>)
 800b690:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b694:	f001 fbc4 	bl	800ce20 <__assert_func>
 800b698:	f100 0514 	add.w	r5, r0, #20
 800b69c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b6a0:	462b      	mov	r3, r5
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	4543      	cmp	r3, r8
 800b6a6:	d321      	bcc.n	800b6ec <__multiply+0x98>
 800b6a8:	f104 0314 	add.w	r3, r4, #20
 800b6ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b6b0:	f109 0314 	add.w	r3, r9, #20
 800b6b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b6b8:	9202      	str	r2, [sp, #8]
 800b6ba:	1b3a      	subs	r2, r7, r4
 800b6bc:	3a15      	subs	r2, #21
 800b6be:	f022 0203 	bic.w	r2, r2, #3
 800b6c2:	3204      	adds	r2, #4
 800b6c4:	f104 0115 	add.w	r1, r4, #21
 800b6c8:	428f      	cmp	r7, r1
 800b6ca:	bf38      	it	cc
 800b6cc:	2204      	movcc	r2, #4
 800b6ce:	9201      	str	r2, [sp, #4]
 800b6d0:	9a02      	ldr	r2, [sp, #8]
 800b6d2:	9303      	str	r3, [sp, #12]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d80c      	bhi.n	800b6f2 <__multiply+0x9e>
 800b6d8:	2e00      	cmp	r6, #0
 800b6da:	dd03      	ble.n	800b6e4 <__multiply+0x90>
 800b6dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d05b      	beq.n	800b79c <__multiply+0x148>
 800b6e4:	6106      	str	r6, [r0, #16]
 800b6e6:	b005      	add	sp, #20
 800b6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ec:	f843 2b04 	str.w	r2, [r3], #4
 800b6f0:	e7d8      	b.n	800b6a4 <__multiply+0x50>
 800b6f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800b6f6:	f1ba 0f00 	cmp.w	sl, #0
 800b6fa:	d024      	beq.n	800b746 <__multiply+0xf2>
 800b6fc:	f104 0e14 	add.w	lr, r4, #20
 800b700:	46a9      	mov	r9, r5
 800b702:	f04f 0c00 	mov.w	ip, #0
 800b706:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b70a:	f8d9 1000 	ldr.w	r1, [r9]
 800b70e:	fa1f fb82 	uxth.w	fp, r2
 800b712:	b289      	uxth	r1, r1
 800b714:	fb0a 110b 	mla	r1, sl, fp, r1
 800b718:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b71c:	f8d9 2000 	ldr.w	r2, [r9]
 800b720:	4461      	add	r1, ip
 800b722:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b726:	fb0a c20b 	mla	r2, sl, fp, ip
 800b72a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b72e:	b289      	uxth	r1, r1
 800b730:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b734:	4577      	cmp	r7, lr
 800b736:	f849 1b04 	str.w	r1, [r9], #4
 800b73a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b73e:	d8e2      	bhi.n	800b706 <__multiply+0xb2>
 800b740:	9a01      	ldr	r2, [sp, #4]
 800b742:	f845 c002 	str.w	ip, [r5, r2]
 800b746:	9a03      	ldr	r2, [sp, #12]
 800b748:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b74c:	3304      	adds	r3, #4
 800b74e:	f1b9 0f00 	cmp.w	r9, #0
 800b752:	d021      	beq.n	800b798 <__multiply+0x144>
 800b754:	6829      	ldr	r1, [r5, #0]
 800b756:	f104 0c14 	add.w	ip, r4, #20
 800b75a:	46ae      	mov	lr, r5
 800b75c:	f04f 0a00 	mov.w	sl, #0
 800b760:	f8bc b000 	ldrh.w	fp, [ip]
 800b764:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b768:	fb09 220b 	mla	r2, r9, fp, r2
 800b76c:	4452      	add	r2, sl
 800b76e:	b289      	uxth	r1, r1
 800b770:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b774:	f84e 1b04 	str.w	r1, [lr], #4
 800b778:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b77c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b780:	f8be 1000 	ldrh.w	r1, [lr]
 800b784:	fb09 110a 	mla	r1, r9, sl, r1
 800b788:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b78c:	4567      	cmp	r7, ip
 800b78e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b792:	d8e5      	bhi.n	800b760 <__multiply+0x10c>
 800b794:	9a01      	ldr	r2, [sp, #4]
 800b796:	50a9      	str	r1, [r5, r2]
 800b798:	3504      	adds	r5, #4
 800b79a:	e799      	b.n	800b6d0 <__multiply+0x7c>
 800b79c:	3e01      	subs	r6, #1
 800b79e:	e79b      	b.n	800b6d8 <__multiply+0x84>
 800b7a0:	0800f435 	.word	0x0800f435
 800b7a4:	0800f446 	.word	0x0800f446

0800b7a8 <__pow5mult>:
 800b7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b7ac:	4615      	mov	r5, r2
 800b7ae:	f012 0203 	ands.w	r2, r2, #3
 800b7b2:	4606      	mov	r6, r0
 800b7b4:	460f      	mov	r7, r1
 800b7b6:	d007      	beq.n	800b7c8 <__pow5mult+0x20>
 800b7b8:	4c25      	ldr	r4, [pc, #148]	; (800b850 <__pow5mult+0xa8>)
 800b7ba:	3a01      	subs	r2, #1
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b7c2:	f7ff fe53 	bl	800b46c <__multadd>
 800b7c6:	4607      	mov	r7, r0
 800b7c8:	10ad      	asrs	r5, r5, #2
 800b7ca:	d03d      	beq.n	800b848 <__pow5mult+0xa0>
 800b7cc:	69f4      	ldr	r4, [r6, #28]
 800b7ce:	b97c      	cbnz	r4, 800b7f0 <__pow5mult+0x48>
 800b7d0:	2010      	movs	r0, #16
 800b7d2:	f7fd fedd 	bl	8009590 <malloc>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	61f0      	str	r0, [r6, #28]
 800b7da:	b928      	cbnz	r0, 800b7e8 <__pow5mult+0x40>
 800b7dc:	4b1d      	ldr	r3, [pc, #116]	; (800b854 <__pow5mult+0xac>)
 800b7de:	481e      	ldr	r0, [pc, #120]	; (800b858 <__pow5mult+0xb0>)
 800b7e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b7e4:	f001 fb1c 	bl	800ce20 <__assert_func>
 800b7e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b7ec:	6004      	str	r4, [r0, #0]
 800b7ee:	60c4      	str	r4, [r0, #12]
 800b7f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b7f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b7f8:	b94c      	cbnz	r4, 800b80e <__pow5mult+0x66>
 800b7fa:	f240 2171 	movw	r1, #625	; 0x271
 800b7fe:	4630      	mov	r0, r6
 800b800:	f7ff ff12 	bl	800b628 <__i2b>
 800b804:	2300      	movs	r3, #0
 800b806:	f8c8 0008 	str.w	r0, [r8, #8]
 800b80a:	4604      	mov	r4, r0
 800b80c:	6003      	str	r3, [r0, #0]
 800b80e:	f04f 0900 	mov.w	r9, #0
 800b812:	07eb      	lsls	r3, r5, #31
 800b814:	d50a      	bpl.n	800b82c <__pow5mult+0x84>
 800b816:	4639      	mov	r1, r7
 800b818:	4622      	mov	r2, r4
 800b81a:	4630      	mov	r0, r6
 800b81c:	f7ff ff1a 	bl	800b654 <__multiply>
 800b820:	4639      	mov	r1, r7
 800b822:	4680      	mov	r8, r0
 800b824:	4630      	mov	r0, r6
 800b826:	f7ff fdff 	bl	800b428 <_Bfree>
 800b82a:	4647      	mov	r7, r8
 800b82c:	106d      	asrs	r5, r5, #1
 800b82e:	d00b      	beq.n	800b848 <__pow5mult+0xa0>
 800b830:	6820      	ldr	r0, [r4, #0]
 800b832:	b938      	cbnz	r0, 800b844 <__pow5mult+0x9c>
 800b834:	4622      	mov	r2, r4
 800b836:	4621      	mov	r1, r4
 800b838:	4630      	mov	r0, r6
 800b83a:	f7ff ff0b 	bl	800b654 <__multiply>
 800b83e:	6020      	str	r0, [r4, #0]
 800b840:	f8c0 9000 	str.w	r9, [r0]
 800b844:	4604      	mov	r4, r0
 800b846:	e7e4      	b.n	800b812 <__pow5mult+0x6a>
 800b848:	4638      	mov	r0, r7
 800b84a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b84e:	bf00      	nop
 800b850:	0800f590 	.word	0x0800f590
 800b854:	0800f3c6 	.word	0x0800f3c6
 800b858:	0800f446 	.word	0x0800f446

0800b85c <__lshift>:
 800b85c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b860:	460c      	mov	r4, r1
 800b862:	6849      	ldr	r1, [r1, #4]
 800b864:	6923      	ldr	r3, [r4, #16]
 800b866:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b86a:	68a3      	ldr	r3, [r4, #8]
 800b86c:	4607      	mov	r7, r0
 800b86e:	4691      	mov	r9, r2
 800b870:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b874:	f108 0601 	add.w	r6, r8, #1
 800b878:	42b3      	cmp	r3, r6
 800b87a:	db0b      	blt.n	800b894 <__lshift+0x38>
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff fd93 	bl	800b3a8 <_Balloc>
 800b882:	4605      	mov	r5, r0
 800b884:	b948      	cbnz	r0, 800b89a <__lshift+0x3e>
 800b886:	4602      	mov	r2, r0
 800b888:	4b28      	ldr	r3, [pc, #160]	; (800b92c <__lshift+0xd0>)
 800b88a:	4829      	ldr	r0, [pc, #164]	; (800b930 <__lshift+0xd4>)
 800b88c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b890:	f001 fac6 	bl	800ce20 <__assert_func>
 800b894:	3101      	adds	r1, #1
 800b896:	005b      	lsls	r3, r3, #1
 800b898:	e7ee      	b.n	800b878 <__lshift+0x1c>
 800b89a:	2300      	movs	r3, #0
 800b89c:	f100 0114 	add.w	r1, r0, #20
 800b8a0:	f100 0210 	add.w	r2, r0, #16
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	4553      	cmp	r3, sl
 800b8a8:	db33      	blt.n	800b912 <__lshift+0xb6>
 800b8aa:	6920      	ldr	r0, [r4, #16]
 800b8ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b8b0:	f104 0314 	add.w	r3, r4, #20
 800b8b4:	f019 091f 	ands.w	r9, r9, #31
 800b8b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b8bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b8c0:	d02b      	beq.n	800b91a <__lshift+0xbe>
 800b8c2:	f1c9 0e20 	rsb	lr, r9, #32
 800b8c6:	468a      	mov	sl, r1
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	6818      	ldr	r0, [r3, #0]
 800b8cc:	fa00 f009 	lsl.w	r0, r0, r9
 800b8d0:	4310      	orrs	r0, r2
 800b8d2:	f84a 0b04 	str.w	r0, [sl], #4
 800b8d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b8da:	459c      	cmp	ip, r3
 800b8dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b8e0:	d8f3      	bhi.n	800b8ca <__lshift+0x6e>
 800b8e2:	ebac 0304 	sub.w	r3, ip, r4
 800b8e6:	3b15      	subs	r3, #21
 800b8e8:	f023 0303 	bic.w	r3, r3, #3
 800b8ec:	3304      	adds	r3, #4
 800b8ee:	f104 0015 	add.w	r0, r4, #21
 800b8f2:	4584      	cmp	ip, r0
 800b8f4:	bf38      	it	cc
 800b8f6:	2304      	movcc	r3, #4
 800b8f8:	50ca      	str	r2, [r1, r3]
 800b8fa:	b10a      	cbz	r2, 800b900 <__lshift+0xa4>
 800b8fc:	f108 0602 	add.w	r6, r8, #2
 800b900:	3e01      	subs	r6, #1
 800b902:	4638      	mov	r0, r7
 800b904:	612e      	str	r6, [r5, #16]
 800b906:	4621      	mov	r1, r4
 800b908:	f7ff fd8e 	bl	800b428 <_Bfree>
 800b90c:	4628      	mov	r0, r5
 800b90e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b912:	f842 0f04 	str.w	r0, [r2, #4]!
 800b916:	3301      	adds	r3, #1
 800b918:	e7c5      	b.n	800b8a6 <__lshift+0x4a>
 800b91a:	3904      	subs	r1, #4
 800b91c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b920:	f841 2f04 	str.w	r2, [r1, #4]!
 800b924:	459c      	cmp	ip, r3
 800b926:	d8f9      	bhi.n	800b91c <__lshift+0xc0>
 800b928:	e7ea      	b.n	800b900 <__lshift+0xa4>
 800b92a:	bf00      	nop
 800b92c:	0800f435 	.word	0x0800f435
 800b930:	0800f446 	.word	0x0800f446

0800b934 <__mcmp>:
 800b934:	b530      	push	{r4, r5, lr}
 800b936:	6902      	ldr	r2, [r0, #16]
 800b938:	690c      	ldr	r4, [r1, #16]
 800b93a:	1b12      	subs	r2, r2, r4
 800b93c:	d10e      	bne.n	800b95c <__mcmp+0x28>
 800b93e:	f100 0314 	add.w	r3, r0, #20
 800b942:	3114      	adds	r1, #20
 800b944:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b948:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b94c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b950:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b954:	42a5      	cmp	r5, r4
 800b956:	d003      	beq.n	800b960 <__mcmp+0x2c>
 800b958:	d305      	bcc.n	800b966 <__mcmp+0x32>
 800b95a:	2201      	movs	r2, #1
 800b95c:	4610      	mov	r0, r2
 800b95e:	bd30      	pop	{r4, r5, pc}
 800b960:	4283      	cmp	r3, r0
 800b962:	d3f3      	bcc.n	800b94c <__mcmp+0x18>
 800b964:	e7fa      	b.n	800b95c <__mcmp+0x28>
 800b966:	f04f 32ff 	mov.w	r2, #4294967295
 800b96a:	e7f7      	b.n	800b95c <__mcmp+0x28>

0800b96c <__mdiff>:
 800b96c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b970:	460c      	mov	r4, r1
 800b972:	4606      	mov	r6, r0
 800b974:	4611      	mov	r1, r2
 800b976:	4620      	mov	r0, r4
 800b978:	4690      	mov	r8, r2
 800b97a:	f7ff ffdb 	bl	800b934 <__mcmp>
 800b97e:	1e05      	subs	r5, r0, #0
 800b980:	d110      	bne.n	800b9a4 <__mdiff+0x38>
 800b982:	4629      	mov	r1, r5
 800b984:	4630      	mov	r0, r6
 800b986:	f7ff fd0f 	bl	800b3a8 <_Balloc>
 800b98a:	b930      	cbnz	r0, 800b99a <__mdiff+0x2e>
 800b98c:	4b3a      	ldr	r3, [pc, #232]	; (800ba78 <__mdiff+0x10c>)
 800b98e:	4602      	mov	r2, r0
 800b990:	f240 2137 	movw	r1, #567	; 0x237
 800b994:	4839      	ldr	r0, [pc, #228]	; (800ba7c <__mdiff+0x110>)
 800b996:	f001 fa43 	bl	800ce20 <__assert_func>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b9a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9a4:	bfa4      	itt	ge
 800b9a6:	4643      	movge	r3, r8
 800b9a8:	46a0      	movge	r8, r4
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b9b0:	bfa6      	itte	ge
 800b9b2:	461c      	movge	r4, r3
 800b9b4:	2500      	movge	r5, #0
 800b9b6:	2501      	movlt	r5, #1
 800b9b8:	f7ff fcf6 	bl	800b3a8 <_Balloc>
 800b9bc:	b920      	cbnz	r0, 800b9c8 <__mdiff+0x5c>
 800b9be:	4b2e      	ldr	r3, [pc, #184]	; (800ba78 <__mdiff+0x10c>)
 800b9c0:	4602      	mov	r2, r0
 800b9c2:	f240 2145 	movw	r1, #581	; 0x245
 800b9c6:	e7e5      	b.n	800b994 <__mdiff+0x28>
 800b9c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b9cc:	6926      	ldr	r6, [r4, #16]
 800b9ce:	60c5      	str	r5, [r0, #12]
 800b9d0:	f104 0914 	add.w	r9, r4, #20
 800b9d4:	f108 0514 	add.w	r5, r8, #20
 800b9d8:	f100 0e14 	add.w	lr, r0, #20
 800b9dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b9e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b9e4:	f108 0210 	add.w	r2, r8, #16
 800b9e8:	46f2      	mov	sl, lr
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800b9f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b9f4:	fa11 f88b 	uxtah	r8, r1, fp
 800b9f8:	b299      	uxth	r1, r3
 800b9fa:	0c1b      	lsrs	r3, r3, #16
 800b9fc:	eba8 0801 	sub.w	r8, r8, r1
 800ba00:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ba04:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ba08:	fa1f f888 	uxth.w	r8, r8
 800ba0c:	1419      	asrs	r1, r3, #16
 800ba0e:	454e      	cmp	r6, r9
 800ba10:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ba14:	f84a 3b04 	str.w	r3, [sl], #4
 800ba18:	d8e8      	bhi.n	800b9ec <__mdiff+0x80>
 800ba1a:	1b33      	subs	r3, r6, r4
 800ba1c:	3b15      	subs	r3, #21
 800ba1e:	f023 0303 	bic.w	r3, r3, #3
 800ba22:	3304      	adds	r3, #4
 800ba24:	3415      	adds	r4, #21
 800ba26:	42a6      	cmp	r6, r4
 800ba28:	bf38      	it	cc
 800ba2a:	2304      	movcc	r3, #4
 800ba2c:	441d      	add	r5, r3
 800ba2e:	4473      	add	r3, lr
 800ba30:	469e      	mov	lr, r3
 800ba32:	462e      	mov	r6, r5
 800ba34:	4566      	cmp	r6, ip
 800ba36:	d30e      	bcc.n	800ba56 <__mdiff+0xea>
 800ba38:	f10c 0203 	add.w	r2, ip, #3
 800ba3c:	1b52      	subs	r2, r2, r5
 800ba3e:	f022 0203 	bic.w	r2, r2, #3
 800ba42:	3d03      	subs	r5, #3
 800ba44:	45ac      	cmp	ip, r5
 800ba46:	bf38      	it	cc
 800ba48:	2200      	movcc	r2, #0
 800ba4a:	4413      	add	r3, r2
 800ba4c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800ba50:	b17a      	cbz	r2, 800ba72 <__mdiff+0x106>
 800ba52:	6107      	str	r7, [r0, #16]
 800ba54:	e7a4      	b.n	800b9a0 <__mdiff+0x34>
 800ba56:	f856 8b04 	ldr.w	r8, [r6], #4
 800ba5a:	fa11 f288 	uxtah	r2, r1, r8
 800ba5e:	1414      	asrs	r4, r2, #16
 800ba60:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ba64:	b292      	uxth	r2, r2
 800ba66:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ba6a:	f84e 2b04 	str.w	r2, [lr], #4
 800ba6e:	1421      	asrs	r1, r4, #16
 800ba70:	e7e0      	b.n	800ba34 <__mdiff+0xc8>
 800ba72:	3f01      	subs	r7, #1
 800ba74:	e7ea      	b.n	800ba4c <__mdiff+0xe0>
 800ba76:	bf00      	nop
 800ba78:	0800f435 	.word	0x0800f435
 800ba7c:	0800f446 	.word	0x0800f446

0800ba80 <__ulp>:
 800ba80:	b082      	sub	sp, #8
 800ba82:	ed8d 0b00 	vstr	d0, [sp]
 800ba86:	9a01      	ldr	r2, [sp, #4]
 800ba88:	4b0f      	ldr	r3, [pc, #60]	; (800bac8 <__ulp+0x48>)
 800ba8a:	4013      	ands	r3, r2
 800ba8c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	dc08      	bgt.n	800baa6 <__ulp+0x26>
 800ba94:	425b      	negs	r3, r3
 800ba96:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800ba9a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba9e:	da04      	bge.n	800baaa <__ulp+0x2a>
 800baa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800baa4:	4113      	asrs	r3, r2
 800baa6:	2200      	movs	r2, #0
 800baa8:	e008      	b.n	800babc <__ulp+0x3c>
 800baaa:	f1a2 0314 	sub.w	r3, r2, #20
 800baae:	2b1e      	cmp	r3, #30
 800bab0:	bfda      	itte	le
 800bab2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800bab6:	40da      	lsrle	r2, r3
 800bab8:	2201      	movgt	r2, #1
 800baba:	2300      	movs	r3, #0
 800babc:	4619      	mov	r1, r3
 800babe:	4610      	mov	r0, r2
 800bac0:	ec41 0b10 	vmov	d0, r0, r1
 800bac4:	b002      	add	sp, #8
 800bac6:	4770      	bx	lr
 800bac8:	7ff00000 	.word	0x7ff00000

0800bacc <__b2d>:
 800bacc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad0:	6906      	ldr	r6, [r0, #16]
 800bad2:	f100 0814 	add.w	r8, r0, #20
 800bad6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800bada:	1f37      	subs	r7, r6, #4
 800badc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bae0:	4610      	mov	r0, r2
 800bae2:	f7ff fd53 	bl	800b58c <__hi0bits>
 800bae6:	f1c0 0320 	rsb	r3, r0, #32
 800baea:	280a      	cmp	r0, #10
 800baec:	600b      	str	r3, [r1, #0]
 800baee:	491b      	ldr	r1, [pc, #108]	; (800bb5c <__b2d+0x90>)
 800baf0:	dc15      	bgt.n	800bb1e <__b2d+0x52>
 800baf2:	f1c0 0c0b 	rsb	ip, r0, #11
 800baf6:	fa22 f30c 	lsr.w	r3, r2, ip
 800bafa:	45b8      	cmp	r8, r7
 800bafc:	ea43 0501 	orr.w	r5, r3, r1
 800bb00:	bf34      	ite	cc
 800bb02:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb06:	2300      	movcs	r3, #0
 800bb08:	3015      	adds	r0, #21
 800bb0a:	fa02 f000 	lsl.w	r0, r2, r0
 800bb0e:	fa23 f30c 	lsr.w	r3, r3, ip
 800bb12:	4303      	orrs	r3, r0
 800bb14:	461c      	mov	r4, r3
 800bb16:	ec45 4b10 	vmov	d0, r4, r5
 800bb1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1e:	45b8      	cmp	r8, r7
 800bb20:	bf3a      	itte	cc
 800bb22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800bb26:	f1a6 0708 	subcc.w	r7, r6, #8
 800bb2a:	2300      	movcs	r3, #0
 800bb2c:	380b      	subs	r0, #11
 800bb2e:	d012      	beq.n	800bb56 <__b2d+0x8a>
 800bb30:	f1c0 0120 	rsb	r1, r0, #32
 800bb34:	fa23 f401 	lsr.w	r4, r3, r1
 800bb38:	4082      	lsls	r2, r0
 800bb3a:	4322      	orrs	r2, r4
 800bb3c:	4547      	cmp	r7, r8
 800bb3e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800bb42:	bf8c      	ite	hi
 800bb44:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800bb48:	2200      	movls	r2, #0
 800bb4a:	4083      	lsls	r3, r0
 800bb4c:	40ca      	lsrs	r2, r1
 800bb4e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bb52:	4313      	orrs	r3, r2
 800bb54:	e7de      	b.n	800bb14 <__b2d+0x48>
 800bb56:	ea42 0501 	orr.w	r5, r2, r1
 800bb5a:	e7db      	b.n	800bb14 <__b2d+0x48>
 800bb5c:	3ff00000 	.word	0x3ff00000

0800bb60 <__d2b>:
 800bb60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb64:	460f      	mov	r7, r1
 800bb66:	2101      	movs	r1, #1
 800bb68:	ec59 8b10 	vmov	r8, r9, d0
 800bb6c:	4616      	mov	r6, r2
 800bb6e:	f7ff fc1b 	bl	800b3a8 <_Balloc>
 800bb72:	4604      	mov	r4, r0
 800bb74:	b930      	cbnz	r0, 800bb84 <__d2b+0x24>
 800bb76:	4602      	mov	r2, r0
 800bb78:	4b24      	ldr	r3, [pc, #144]	; (800bc0c <__d2b+0xac>)
 800bb7a:	4825      	ldr	r0, [pc, #148]	; (800bc10 <__d2b+0xb0>)
 800bb7c:	f240 310f 	movw	r1, #783	; 0x30f
 800bb80:	f001 f94e 	bl	800ce20 <__assert_func>
 800bb84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bb88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bb8c:	bb2d      	cbnz	r5, 800bbda <__d2b+0x7a>
 800bb8e:	9301      	str	r3, [sp, #4]
 800bb90:	f1b8 0300 	subs.w	r3, r8, #0
 800bb94:	d026      	beq.n	800bbe4 <__d2b+0x84>
 800bb96:	4668      	mov	r0, sp
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	f7ff fd17 	bl	800b5cc <__lo0bits>
 800bb9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bba2:	b1e8      	cbz	r0, 800bbe0 <__d2b+0x80>
 800bba4:	f1c0 0320 	rsb	r3, r0, #32
 800bba8:	fa02 f303 	lsl.w	r3, r2, r3
 800bbac:	430b      	orrs	r3, r1
 800bbae:	40c2      	lsrs	r2, r0
 800bbb0:	6163      	str	r3, [r4, #20]
 800bbb2:	9201      	str	r2, [sp, #4]
 800bbb4:	9b01      	ldr	r3, [sp, #4]
 800bbb6:	61a3      	str	r3, [r4, #24]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	bf14      	ite	ne
 800bbbc:	2202      	movne	r2, #2
 800bbbe:	2201      	moveq	r2, #1
 800bbc0:	6122      	str	r2, [r4, #16]
 800bbc2:	b1bd      	cbz	r5, 800bbf4 <__d2b+0x94>
 800bbc4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bbc8:	4405      	add	r5, r0
 800bbca:	603d      	str	r5, [r7, #0]
 800bbcc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bbd0:	6030      	str	r0, [r6, #0]
 800bbd2:	4620      	mov	r0, r4
 800bbd4:	b003      	add	sp, #12
 800bbd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bbde:	e7d6      	b.n	800bb8e <__d2b+0x2e>
 800bbe0:	6161      	str	r1, [r4, #20]
 800bbe2:	e7e7      	b.n	800bbb4 <__d2b+0x54>
 800bbe4:	a801      	add	r0, sp, #4
 800bbe6:	f7ff fcf1 	bl	800b5cc <__lo0bits>
 800bbea:	9b01      	ldr	r3, [sp, #4]
 800bbec:	6163      	str	r3, [r4, #20]
 800bbee:	3020      	adds	r0, #32
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	e7e5      	b.n	800bbc0 <__d2b+0x60>
 800bbf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bbf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bbfc:	6038      	str	r0, [r7, #0]
 800bbfe:	6918      	ldr	r0, [r3, #16]
 800bc00:	f7ff fcc4 	bl	800b58c <__hi0bits>
 800bc04:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc08:	e7e2      	b.n	800bbd0 <__d2b+0x70>
 800bc0a:	bf00      	nop
 800bc0c:	0800f435 	.word	0x0800f435
 800bc10:	0800f446 	.word	0x0800f446

0800bc14 <__ratio>:
 800bc14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc18:	4688      	mov	r8, r1
 800bc1a:	4669      	mov	r1, sp
 800bc1c:	4681      	mov	r9, r0
 800bc1e:	f7ff ff55 	bl	800bacc <__b2d>
 800bc22:	a901      	add	r1, sp, #4
 800bc24:	4640      	mov	r0, r8
 800bc26:	ec55 4b10 	vmov	r4, r5, d0
 800bc2a:	ee10 aa10 	vmov	sl, s0
 800bc2e:	f7ff ff4d 	bl	800bacc <__b2d>
 800bc32:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800bc36:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800bc3a:	1ad2      	subs	r2, r2, r3
 800bc3c:	e9dd 3100 	ldrd	r3, r1, [sp]
 800bc40:	1a5b      	subs	r3, r3, r1
 800bc42:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800bc46:	ec57 6b10 	vmov	r6, r7, d0
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	bfd6      	itet	le
 800bc4e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bc52:	462a      	movgt	r2, r5
 800bc54:	463a      	movle	r2, r7
 800bc56:	46ab      	mov	fp, r5
 800bc58:	bfd6      	itet	le
 800bc5a:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800bc5e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bc62:	ee00 3a90 	vmovle	s1, r3
 800bc66:	ec4b ab17 	vmov	d7, sl, fp
 800bc6a:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800bc6e:	b003      	add	sp, #12
 800bc70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bc74 <__copybits>:
 800bc74:	3901      	subs	r1, #1
 800bc76:	b570      	push	{r4, r5, r6, lr}
 800bc78:	1149      	asrs	r1, r1, #5
 800bc7a:	6914      	ldr	r4, [r2, #16]
 800bc7c:	3101      	adds	r1, #1
 800bc7e:	f102 0314 	add.w	r3, r2, #20
 800bc82:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bc86:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bc8a:	1f05      	subs	r5, r0, #4
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	d30c      	bcc.n	800bcaa <__copybits+0x36>
 800bc90:	1aa3      	subs	r3, r4, r2
 800bc92:	3b11      	subs	r3, #17
 800bc94:	f023 0303 	bic.w	r3, r3, #3
 800bc98:	3211      	adds	r2, #17
 800bc9a:	42a2      	cmp	r2, r4
 800bc9c:	bf88      	it	hi
 800bc9e:	2300      	movhi	r3, #0
 800bca0:	4418      	add	r0, r3
 800bca2:	2300      	movs	r3, #0
 800bca4:	4288      	cmp	r0, r1
 800bca6:	d305      	bcc.n	800bcb4 <__copybits+0x40>
 800bca8:	bd70      	pop	{r4, r5, r6, pc}
 800bcaa:	f853 6b04 	ldr.w	r6, [r3], #4
 800bcae:	f845 6f04 	str.w	r6, [r5, #4]!
 800bcb2:	e7eb      	b.n	800bc8c <__copybits+0x18>
 800bcb4:	f840 3b04 	str.w	r3, [r0], #4
 800bcb8:	e7f4      	b.n	800bca4 <__copybits+0x30>

0800bcba <__any_on>:
 800bcba:	f100 0214 	add.w	r2, r0, #20
 800bcbe:	6900      	ldr	r0, [r0, #16]
 800bcc0:	114b      	asrs	r3, r1, #5
 800bcc2:	4298      	cmp	r0, r3
 800bcc4:	b510      	push	{r4, lr}
 800bcc6:	db11      	blt.n	800bcec <__any_on+0x32>
 800bcc8:	dd0a      	ble.n	800bce0 <__any_on+0x26>
 800bcca:	f011 011f 	ands.w	r1, r1, #31
 800bcce:	d007      	beq.n	800bce0 <__any_on+0x26>
 800bcd0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bcd4:	fa24 f001 	lsr.w	r0, r4, r1
 800bcd8:	fa00 f101 	lsl.w	r1, r0, r1
 800bcdc:	428c      	cmp	r4, r1
 800bcde:	d10b      	bne.n	800bcf8 <__any_on+0x3e>
 800bce0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bce4:	4293      	cmp	r3, r2
 800bce6:	d803      	bhi.n	800bcf0 <__any_on+0x36>
 800bce8:	2000      	movs	r0, #0
 800bcea:	bd10      	pop	{r4, pc}
 800bcec:	4603      	mov	r3, r0
 800bcee:	e7f7      	b.n	800bce0 <__any_on+0x26>
 800bcf0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bcf4:	2900      	cmp	r1, #0
 800bcf6:	d0f5      	beq.n	800bce4 <__any_on+0x2a>
 800bcf8:	2001      	movs	r0, #1
 800bcfa:	e7f6      	b.n	800bcea <__any_on+0x30>

0800bcfc <sulp>:
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	4604      	mov	r4, r0
 800bd00:	460d      	mov	r5, r1
 800bd02:	4616      	mov	r6, r2
 800bd04:	ec45 4b10 	vmov	d0, r4, r5
 800bd08:	f7ff feba 	bl	800ba80 <__ulp>
 800bd0c:	b17e      	cbz	r6, 800bd2e <sulp+0x32>
 800bd0e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800bd12:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	dd09      	ble.n	800bd2e <sulp+0x32>
 800bd1a:	051b      	lsls	r3, r3, #20
 800bd1c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800bd20:	2000      	movs	r0, #0
 800bd22:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800bd26:	ec41 0b17 	vmov	d7, r0, r1
 800bd2a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800bd2e:	bd70      	pop	{r4, r5, r6, pc}

0800bd30 <_strtod_l>:
 800bd30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd34:	ed2d 8b0e 	vpush	{d8-d14}
 800bd38:	b097      	sub	sp, #92	; 0x5c
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	920d      	str	r2, [sp, #52]	; 0x34
 800bd3e:	2200      	movs	r2, #0
 800bd40:	9212      	str	r2, [sp, #72]	; 0x48
 800bd42:	468a      	mov	sl, r1
 800bd44:	f04f 0800 	mov.w	r8, #0
 800bd48:	f04f 0900 	mov.w	r9, #0
 800bd4c:	460a      	mov	r2, r1
 800bd4e:	9211      	str	r2, [sp, #68]	; 0x44
 800bd50:	7811      	ldrb	r1, [r2, #0]
 800bd52:	292b      	cmp	r1, #43	; 0x2b
 800bd54:	d04c      	beq.n	800bdf0 <_strtod_l+0xc0>
 800bd56:	d839      	bhi.n	800bdcc <_strtod_l+0x9c>
 800bd58:	290d      	cmp	r1, #13
 800bd5a:	d833      	bhi.n	800bdc4 <_strtod_l+0x94>
 800bd5c:	2908      	cmp	r1, #8
 800bd5e:	d833      	bhi.n	800bdc8 <_strtod_l+0x98>
 800bd60:	2900      	cmp	r1, #0
 800bd62:	d03c      	beq.n	800bdde <_strtod_l+0xae>
 800bd64:	2200      	movs	r2, #0
 800bd66:	9208      	str	r2, [sp, #32]
 800bd68:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800bd6a:	7832      	ldrb	r2, [r6, #0]
 800bd6c:	2a30      	cmp	r2, #48	; 0x30
 800bd6e:	f040 80b8 	bne.w	800bee2 <_strtod_l+0x1b2>
 800bd72:	7872      	ldrb	r2, [r6, #1]
 800bd74:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800bd78:	2a58      	cmp	r2, #88	; 0x58
 800bd7a:	d170      	bne.n	800be5e <_strtod_l+0x12e>
 800bd7c:	9302      	str	r3, [sp, #8]
 800bd7e:	9b08      	ldr	r3, [sp, #32]
 800bd80:	9301      	str	r3, [sp, #4]
 800bd82:	ab12      	add	r3, sp, #72	; 0x48
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	4a91      	ldr	r2, [pc, #580]	; (800bfcc <_strtod_l+0x29c>)
 800bd88:	ab13      	add	r3, sp, #76	; 0x4c
 800bd8a:	a911      	add	r1, sp, #68	; 0x44
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	f001 f8e3 	bl	800cf58 <__gethex>
 800bd92:	f010 070f 	ands.w	r7, r0, #15
 800bd96:	4605      	mov	r5, r0
 800bd98:	d005      	beq.n	800bda6 <_strtod_l+0x76>
 800bd9a:	2f06      	cmp	r7, #6
 800bd9c:	d12a      	bne.n	800bdf4 <_strtod_l+0xc4>
 800bd9e:	3601      	adds	r6, #1
 800bda0:	2300      	movs	r3, #0
 800bda2:	9611      	str	r6, [sp, #68]	; 0x44
 800bda4:	9308      	str	r3, [sp, #32]
 800bda6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f040 8555 	bne.w	800c858 <_strtod_l+0xb28>
 800bdae:	9b08      	ldr	r3, [sp, #32]
 800bdb0:	ec49 8b10 	vmov	d0, r8, r9
 800bdb4:	b1cb      	cbz	r3, 800bdea <_strtod_l+0xba>
 800bdb6:	eeb1 0b40 	vneg.f64	d0, d0
 800bdba:	b017      	add	sp, #92	; 0x5c
 800bdbc:	ecbd 8b0e 	vpop	{d8-d14}
 800bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc4:	2920      	cmp	r1, #32
 800bdc6:	d1cd      	bne.n	800bd64 <_strtod_l+0x34>
 800bdc8:	3201      	adds	r2, #1
 800bdca:	e7c0      	b.n	800bd4e <_strtod_l+0x1e>
 800bdcc:	292d      	cmp	r1, #45	; 0x2d
 800bdce:	d1c9      	bne.n	800bd64 <_strtod_l+0x34>
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	9108      	str	r1, [sp, #32]
 800bdd4:	1c51      	adds	r1, r2, #1
 800bdd6:	9111      	str	r1, [sp, #68]	; 0x44
 800bdd8:	7852      	ldrb	r2, [r2, #1]
 800bdda:	2a00      	cmp	r2, #0
 800bddc:	d1c4      	bne.n	800bd68 <_strtod_l+0x38>
 800bdde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bde0:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f040 8535 	bne.w	800c854 <_strtod_l+0xb24>
 800bdea:	ec49 8b10 	vmov	d0, r8, r9
 800bdee:	e7e4      	b.n	800bdba <_strtod_l+0x8a>
 800bdf0:	2100      	movs	r1, #0
 800bdf2:	e7ee      	b.n	800bdd2 <_strtod_l+0xa2>
 800bdf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bdf6:	b13a      	cbz	r2, 800be08 <_strtod_l+0xd8>
 800bdf8:	2135      	movs	r1, #53	; 0x35
 800bdfa:	a814      	add	r0, sp, #80	; 0x50
 800bdfc:	f7ff ff3a 	bl	800bc74 <__copybits>
 800be00:	9912      	ldr	r1, [sp, #72]	; 0x48
 800be02:	4620      	mov	r0, r4
 800be04:	f7ff fb10 	bl	800b428 <_Bfree>
 800be08:	1e7b      	subs	r3, r7, #1
 800be0a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800be0c:	2b04      	cmp	r3, #4
 800be0e:	d806      	bhi.n	800be1e <_strtod_l+0xee>
 800be10:	e8df f003 	tbb	[pc, r3]
 800be14:	201d0314 	.word	0x201d0314
 800be18:	14          	.byte	0x14
 800be19:	00          	.byte	0x00
 800be1a:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800be1e:	05eb      	lsls	r3, r5, #23
 800be20:	bf48      	it	mi
 800be22:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800be26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be2a:	0d1b      	lsrs	r3, r3, #20
 800be2c:	051b      	lsls	r3, r3, #20
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1b9      	bne.n	800bda6 <_strtod_l+0x76>
 800be32:	f7fe fc39 	bl	800a6a8 <__errno>
 800be36:	2322      	movs	r3, #34	; 0x22
 800be38:	6003      	str	r3, [r0, #0]
 800be3a:	e7b4      	b.n	800bda6 <_strtod_l+0x76>
 800be3c:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800be40:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800be44:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800be48:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800be4c:	e7e7      	b.n	800be1e <_strtod_l+0xee>
 800be4e:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800bfd4 <_strtod_l+0x2a4>
 800be52:	e7e4      	b.n	800be1e <_strtod_l+0xee>
 800be54:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800be58:	f04f 38ff 	mov.w	r8, #4294967295
 800be5c:	e7df      	b.n	800be1e <_strtod_l+0xee>
 800be5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be60:	1c5a      	adds	r2, r3, #1
 800be62:	9211      	str	r2, [sp, #68]	; 0x44
 800be64:	785b      	ldrb	r3, [r3, #1]
 800be66:	2b30      	cmp	r3, #48	; 0x30
 800be68:	d0f9      	beq.n	800be5e <_strtod_l+0x12e>
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d09b      	beq.n	800bda6 <_strtod_l+0x76>
 800be6e:	2301      	movs	r3, #1
 800be70:	9306      	str	r3, [sp, #24]
 800be72:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800be74:	9309      	str	r3, [sp, #36]	; 0x24
 800be76:	2300      	movs	r3, #0
 800be78:	9305      	str	r3, [sp, #20]
 800be7a:	9307      	str	r3, [sp, #28]
 800be7c:	461e      	mov	r6, r3
 800be7e:	220a      	movs	r2, #10
 800be80:	9811      	ldr	r0, [sp, #68]	; 0x44
 800be82:	7805      	ldrb	r5, [r0, #0]
 800be84:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800be88:	b2d9      	uxtb	r1, r3
 800be8a:	2909      	cmp	r1, #9
 800be8c:	d92b      	bls.n	800bee6 <_strtod_l+0x1b6>
 800be8e:	4950      	ldr	r1, [pc, #320]	; (800bfd0 <_strtod_l+0x2a0>)
 800be90:	2201      	movs	r2, #1
 800be92:	f000 ffa9 	bl	800cde8 <strncmp>
 800be96:	2800      	cmp	r0, #0
 800be98:	d035      	beq.n	800bf06 <_strtod_l+0x1d6>
 800be9a:	2000      	movs	r0, #0
 800be9c:	462a      	mov	r2, r5
 800be9e:	4633      	mov	r3, r6
 800bea0:	4683      	mov	fp, r0
 800bea2:	4601      	mov	r1, r0
 800bea4:	2a65      	cmp	r2, #101	; 0x65
 800bea6:	d001      	beq.n	800beac <_strtod_l+0x17c>
 800bea8:	2a45      	cmp	r2, #69	; 0x45
 800beaa:	d118      	bne.n	800bede <_strtod_l+0x1ae>
 800beac:	b91b      	cbnz	r3, 800beb6 <_strtod_l+0x186>
 800beae:	9b06      	ldr	r3, [sp, #24]
 800beb0:	4303      	orrs	r3, r0
 800beb2:	d094      	beq.n	800bdde <_strtod_l+0xae>
 800beb4:	2300      	movs	r3, #0
 800beb6:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800beba:	f10a 0201 	add.w	r2, sl, #1
 800bebe:	9211      	str	r2, [sp, #68]	; 0x44
 800bec0:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800bec4:	2a2b      	cmp	r2, #43	; 0x2b
 800bec6:	d075      	beq.n	800bfb4 <_strtod_l+0x284>
 800bec8:	2a2d      	cmp	r2, #45	; 0x2d
 800beca:	d07b      	beq.n	800bfc4 <_strtod_l+0x294>
 800becc:	f04f 0e00 	mov.w	lr, #0
 800bed0:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800bed4:	2d09      	cmp	r5, #9
 800bed6:	f240 8083 	bls.w	800bfe0 <_strtod_l+0x2b0>
 800beda:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800bede:	2500      	movs	r5, #0
 800bee0:	e09e      	b.n	800c020 <_strtod_l+0x2f0>
 800bee2:	2300      	movs	r3, #0
 800bee4:	e7c4      	b.n	800be70 <_strtod_l+0x140>
 800bee6:	2e08      	cmp	r6, #8
 800bee8:	bfd5      	itete	le
 800beea:	9907      	ldrle	r1, [sp, #28]
 800beec:	9905      	ldrgt	r1, [sp, #20]
 800beee:	fb02 3301 	mlale	r3, r2, r1, r3
 800bef2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800bef6:	f100 0001 	add.w	r0, r0, #1
 800befa:	bfd4      	ite	le
 800befc:	9307      	strle	r3, [sp, #28]
 800befe:	9305      	strgt	r3, [sp, #20]
 800bf00:	3601      	adds	r6, #1
 800bf02:	9011      	str	r0, [sp, #68]	; 0x44
 800bf04:	e7bc      	b.n	800be80 <_strtod_l+0x150>
 800bf06:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	9211      	str	r2, [sp, #68]	; 0x44
 800bf0c:	785a      	ldrb	r2, [r3, #1]
 800bf0e:	b3ae      	cbz	r6, 800bf7c <_strtod_l+0x24c>
 800bf10:	4683      	mov	fp, r0
 800bf12:	4633      	mov	r3, r6
 800bf14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bf18:	2909      	cmp	r1, #9
 800bf1a:	d912      	bls.n	800bf42 <_strtod_l+0x212>
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	e7c1      	b.n	800bea4 <_strtod_l+0x174>
 800bf20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf22:	1c5a      	adds	r2, r3, #1
 800bf24:	9211      	str	r2, [sp, #68]	; 0x44
 800bf26:	785a      	ldrb	r2, [r3, #1]
 800bf28:	3001      	adds	r0, #1
 800bf2a:	2a30      	cmp	r2, #48	; 0x30
 800bf2c:	d0f8      	beq.n	800bf20 <_strtod_l+0x1f0>
 800bf2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bf32:	2b08      	cmp	r3, #8
 800bf34:	f200 8495 	bhi.w	800c862 <_strtod_l+0xb32>
 800bf38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bf3a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf3c:	4683      	mov	fp, r0
 800bf3e:	2000      	movs	r0, #0
 800bf40:	4603      	mov	r3, r0
 800bf42:	3a30      	subs	r2, #48	; 0x30
 800bf44:	f100 0101 	add.w	r1, r0, #1
 800bf48:	d012      	beq.n	800bf70 <_strtod_l+0x240>
 800bf4a:	448b      	add	fp, r1
 800bf4c:	eb00 0c03 	add.w	ip, r0, r3
 800bf50:	4619      	mov	r1, r3
 800bf52:	250a      	movs	r5, #10
 800bf54:	4561      	cmp	r1, ip
 800bf56:	d113      	bne.n	800bf80 <_strtod_l+0x250>
 800bf58:	1819      	adds	r1, r3, r0
 800bf5a:	2908      	cmp	r1, #8
 800bf5c:	f103 0301 	add.w	r3, r3, #1
 800bf60:	4403      	add	r3, r0
 800bf62:	dc1b      	bgt.n	800bf9c <_strtod_l+0x26c>
 800bf64:	9807      	ldr	r0, [sp, #28]
 800bf66:	210a      	movs	r1, #10
 800bf68:	fb01 2200 	mla	r2, r1, r0, r2
 800bf6c:	9207      	str	r2, [sp, #28]
 800bf6e:	2100      	movs	r1, #0
 800bf70:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bf72:	1c50      	adds	r0, r2, #1
 800bf74:	9011      	str	r0, [sp, #68]	; 0x44
 800bf76:	7852      	ldrb	r2, [r2, #1]
 800bf78:	4608      	mov	r0, r1
 800bf7a:	e7cb      	b.n	800bf14 <_strtod_l+0x1e4>
 800bf7c:	4630      	mov	r0, r6
 800bf7e:	e7d4      	b.n	800bf2a <_strtod_l+0x1fa>
 800bf80:	2908      	cmp	r1, #8
 800bf82:	f101 0101 	add.w	r1, r1, #1
 800bf86:	dc03      	bgt.n	800bf90 <_strtod_l+0x260>
 800bf88:	9f07      	ldr	r7, [sp, #28]
 800bf8a:	436f      	muls	r7, r5
 800bf8c:	9707      	str	r7, [sp, #28]
 800bf8e:	e7e1      	b.n	800bf54 <_strtod_l+0x224>
 800bf90:	2910      	cmp	r1, #16
 800bf92:	bfde      	ittt	le
 800bf94:	9f05      	ldrle	r7, [sp, #20]
 800bf96:	436f      	mulle	r7, r5
 800bf98:	9705      	strle	r7, [sp, #20]
 800bf9a:	e7db      	b.n	800bf54 <_strtod_l+0x224>
 800bf9c:	2b10      	cmp	r3, #16
 800bf9e:	bfdf      	itttt	le
 800bfa0:	9805      	ldrle	r0, [sp, #20]
 800bfa2:	210a      	movle	r1, #10
 800bfa4:	fb01 2200 	mlale	r2, r1, r0, r2
 800bfa8:	9205      	strle	r2, [sp, #20]
 800bfaa:	e7e0      	b.n	800bf6e <_strtod_l+0x23e>
 800bfac:	f04f 0b00 	mov.w	fp, #0
 800bfb0:	2101      	movs	r1, #1
 800bfb2:	e77c      	b.n	800beae <_strtod_l+0x17e>
 800bfb4:	f04f 0e00 	mov.w	lr, #0
 800bfb8:	f10a 0202 	add.w	r2, sl, #2
 800bfbc:	9211      	str	r2, [sp, #68]	; 0x44
 800bfbe:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800bfc2:	e785      	b.n	800bed0 <_strtod_l+0x1a0>
 800bfc4:	f04f 0e01 	mov.w	lr, #1
 800bfc8:	e7f6      	b.n	800bfb8 <_strtod_l+0x288>
 800bfca:	bf00      	nop
 800bfcc:	0800f5a0 	.word	0x0800f5a0
 800bfd0:	0800f59c 	.word	0x0800f59c
 800bfd4:	7ff00000 	.word	0x7ff00000
 800bfd8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bfda:	1c55      	adds	r5, r2, #1
 800bfdc:	9511      	str	r5, [sp, #68]	; 0x44
 800bfde:	7852      	ldrb	r2, [r2, #1]
 800bfe0:	2a30      	cmp	r2, #48	; 0x30
 800bfe2:	d0f9      	beq.n	800bfd8 <_strtod_l+0x2a8>
 800bfe4:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800bfe8:	2d08      	cmp	r5, #8
 800bfea:	f63f af78 	bhi.w	800bede <_strtod_l+0x1ae>
 800bfee:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800bff2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bff4:	920a      	str	r2, [sp, #40]	; 0x28
 800bff6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bff8:	1c55      	adds	r5, r2, #1
 800bffa:	9511      	str	r5, [sp, #68]	; 0x44
 800bffc:	7852      	ldrb	r2, [r2, #1]
 800bffe:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c002:	2f09      	cmp	r7, #9
 800c004:	d937      	bls.n	800c076 <_strtod_l+0x346>
 800c006:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c008:	1bed      	subs	r5, r5, r7
 800c00a:	2d08      	cmp	r5, #8
 800c00c:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c010:	dc02      	bgt.n	800c018 <_strtod_l+0x2e8>
 800c012:	4565      	cmp	r5, ip
 800c014:	bfa8      	it	ge
 800c016:	4665      	movge	r5, ip
 800c018:	f1be 0f00 	cmp.w	lr, #0
 800c01c:	d000      	beq.n	800c020 <_strtod_l+0x2f0>
 800c01e:	426d      	negs	r5, r5
 800c020:	2b00      	cmp	r3, #0
 800c022:	d14d      	bne.n	800c0c0 <_strtod_l+0x390>
 800c024:	9b06      	ldr	r3, [sp, #24]
 800c026:	4303      	orrs	r3, r0
 800c028:	f47f aebd 	bne.w	800bda6 <_strtod_l+0x76>
 800c02c:	2900      	cmp	r1, #0
 800c02e:	f47f aed6 	bne.w	800bdde <_strtod_l+0xae>
 800c032:	2a69      	cmp	r2, #105	; 0x69
 800c034:	d027      	beq.n	800c086 <_strtod_l+0x356>
 800c036:	dc24      	bgt.n	800c082 <_strtod_l+0x352>
 800c038:	2a49      	cmp	r2, #73	; 0x49
 800c03a:	d024      	beq.n	800c086 <_strtod_l+0x356>
 800c03c:	2a4e      	cmp	r2, #78	; 0x4e
 800c03e:	f47f aece 	bne.w	800bdde <_strtod_l+0xae>
 800c042:	4995      	ldr	r1, [pc, #596]	; (800c298 <_strtod_l+0x568>)
 800c044:	a811      	add	r0, sp, #68	; 0x44
 800c046:	f001 f9c7 	bl	800d3d8 <__match>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	f43f aec7 	beq.w	800bdde <_strtod_l+0xae>
 800c050:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b28      	cmp	r3, #40	; 0x28
 800c056:	d12d      	bne.n	800c0b4 <_strtod_l+0x384>
 800c058:	4990      	ldr	r1, [pc, #576]	; (800c29c <_strtod_l+0x56c>)
 800c05a:	aa14      	add	r2, sp, #80	; 0x50
 800c05c:	a811      	add	r0, sp, #68	; 0x44
 800c05e:	f001 f9cf 	bl	800d400 <__hexnan>
 800c062:	2805      	cmp	r0, #5
 800c064:	d126      	bne.n	800c0b4 <_strtod_l+0x384>
 800c066:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c068:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c06c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c070:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c074:	e697      	b.n	800bda6 <_strtod_l+0x76>
 800c076:	250a      	movs	r5, #10
 800c078:	fb05 2c0c 	mla	ip, r5, ip, r2
 800c07c:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c080:	e7b9      	b.n	800bff6 <_strtod_l+0x2c6>
 800c082:	2a6e      	cmp	r2, #110	; 0x6e
 800c084:	e7db      	b.n	800c03e <_strtod_l+0x30e>
 800c086:	4986      	ldr	r1, [pc, #536]	; (800c2a0 <_strtod_l+0x570>)
 800c088:	a811      	add	r0, sp, #68	; 0x44
 800c08a:	f001 f9a5 	bl	800d3d8 <__match>
 800c08e:	2800      	cmp	r0, #0
 800c090:	f43f aea5 	beq.w	800bdde <_strtod_l+0xae>
 800c094:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c096:	4983      	ldr	r1, [pc, #524]	; (800c2a4 <_strtod_l+0x574>)
 800c098:	3b01      	subs	r3, #1
 800c09a:	a811      	add	r0, sp, #68	; 0x44
 800c09c:	9311      	str	r3, [sp, #68]	; 0x44
 800c09e:	f001 f99b 	bl	800d3d8 <__match>
 800c0a2:	b910      	cbnz	r0, 800c0aa <_strtod_l+0x37a>
 800c0a4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0a6:	3301      	adds	r3, #1
 800c0a8:	9311      	str	r3, [sp, #68]	; 0x44
 800c0aa:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800c2b8 <_strtod_l+0x588>
 800c0ae:	f04f 0800 	mov.w	r8, #0
 800c0b2:	e678      	b.n	800bda6 <_strtod_l+0x76>
 800c0b4:	487c      	ldr	r0, [pc, #496]	; (800c2a8 <_strtod_l+0x578>)
 800c0b6:	f000 feab 	bl	800ce10 <nan>
 800c0ba:	ec59 8b10 	vmov	r8, r9, d0
 800c0be:	e672      	b.n	800bda6 <_strtod_l+0x76>
 800c0c0:	eddd 7a07 	vldr	s15, [sp, #28]
 800c0c4:	eba5 020b 	sub.w	r2, r5, fp
 800c0c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c0cc:	2e00      	cmp	r6, #0
 800c0ce:	bf08      	it	eq
 800c0d0:	461e      	moveq	r6, r3
 800c0d2:	2b10      	cmp	r3, #16
 800c0d4:	9206      	str	r2, [sp, #24]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	bfa8      	it	ge
 800c0da:	2210      	movge	r2, #16
 800c0dc:	2b09      	cmp	r3, #9
 800c0de:	ec59 8b17 	vmov	r8, r9, d7
 800c0e2:	dd0c      	ble.n	800c0fe <_strtod_l+0x3ce>
 800c0e4:	4971      	ldr	r1, [pc, #452]	; (800c2ac <_strtod_l+0x57c>)
 800c0e6:	eddd 6a05 	vldr	s13, [sp, #20]
 800c0ea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c0ee:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c0f2:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c0f6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c0fa:	ec59 8b16 	vmov	r8, r9, d6
 800c0fe:	2b0f      	cmp	r3, #15
 800c100:	dc37      	bgt.n	800c172 <_strtod_l+0x442>
 800c102:	9906      	ldr	r1, [sp, #24]
 800c104:	2900      	cmp	r1, #0
 800c106:	f43f ae4e 	beq.w	800bda6 <_strtod_l+0x76>
 800c10a:	dd23      	ble.n	800c154 <_strtod_l+0x424>
 800c10c:	2916      	cmp	r1, #22
 800c10e:	dc0b      	bgt.n	800c128 <_strtod_l+0x3f8>
 800c110:	4b66      	ldr	r3, [pc, #408]	; (800c2ac <_strtod_l+0x57c>)
 800c112:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c116:	ed93 7b00 	vldr	d7, [r3]
 800c11a:	ec49 8b16 	vmov	d6, r8, r9
 800c11e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c122:	ec59 8b17 	vmov	r8, r9, d7
 800c126:	e63e      	b.n	800bda6 <_strtod_l+0x76>
 800c128:	9806      	ldr	r0, [sp, #24]
 800c12a:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c12e:	4281      	cmp	r1, r0
 800c130:	db1f      	blt.n	800c172 <_strtod_l+0x442>
 800c132:	4a5e      	ldr	r2, [pc, #376]	; (800c2ac <_strtod_l+0x57c>)
 800c134:	f1c3 030f 	rsb	r3, r3, #15
 800c138:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c13c:	ed91 7b00 	vldr	d7, [r1]
 800c140:	ec49 8b16 	vmov	d6, r8, r9
 800c144:	1ac3      	subs	r3, r0, r3
 800c146:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c14a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c14e:	ed92 6b00 	vldr	d6, [r2]
 800c152:	e7e4      	b.n	800c11e <_strtod_l+0x3ee>
 800c154:	9906      	ldr	r1, [sp, #24]
 800c156:	3116      	adds	r1, #22
 800c158:	db0b      	blt.n	800c172 <_strtod_l+0x442>
 800c15a:	4b54      	ldr	r3, [pc, #336]	; (800c2ac <_strtod_l+0x57c>)
 800c15c:	ebab 0505 	sub.w	r5, fp, r5
 800c160:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c164:	ed95 7b00 	vldr	d7, [r5]
 800c168:	ec49 8b16 	vmov	d6, r8, r9
 800c16c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c170:	e7d7      	b.n	800c122 <_strtod_l+0x3f2>
 800c172:	9906      	ldr	r1, [sp, #24]
 800c174:	1a9a      	subs	r2, r3, r2
 800c176:	440a      	add	r2, r1
 800c178:	2a00      	cmp	r2, #0
 800c17a:	dd6e      	ble.n	800c25a <_strtod_l+0x52a>
 800c17c:	f012 000f 	ands.w	r0, r2, #15
 800c180:	d00a      	beq.n	800c198 <_strtod_l+0x468>
 800c182:	494a      	ldr	r1, [pc, #296]	; (800c2ac <_strtod_l+0x57c>)
 800c184:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c188:	ed91 7b00 	vldr	d7, [r1]
 800c18c:	ec49 8b16 	vmov	d6, r8, r9
 800c190:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c194:	ec59 8b17 	vmov	r8, r9, d7
 800c198:	f032 020f 	bics.w	r2, r2, #15
 800c19c:	d04e      	beq.n	800c23c <_strtod_l+0x50c>
 800c19e:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c1a2:	dd22      	ble.n	800c1ea <_strtod_l+0x4ba>
 800c1a4:	2500      	movs	r5, #0
 800c1a6:	462e      	mov	r6, r5
 800c1a8:	9507      	str	r5, [sp, #28]
 800c1aa:	462f      	mov	r7, r5
 800c1ac:	2322      	movs	r3, #34	; 0x22
 800c1ae:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c2b8 <_strtod_l+0x588>
 800c1b2:	6023      	str	r3, [r4, #0]
 800c1b4:	f04f 0800 	mov.w	r8, #0
 800c1b8:	9b07      	ldr	r3, [sp, #28]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	f43f adf3 	beq.w	800bda6 <_strtod_l+0x76>
 800c1c0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c1c2:	4620      	mov	r0, r4
 800c1c4:	f7ff f930 	bl	800b428 <_Bfree>
 800c1c8:	4639      	mov	r1, r7
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	f7ff f92c 	bl	800b428 <_Bfree>
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4620      	mov	r0, r4
 800c1d4:	f7ff f928 	bl	800b428 <_Bfree>
 800c1d8:	9907      	ldr	r1, [sp, #28]
 800c1da:	4620      	mov	r0, r4
 800c1dc:	f7ff f924 	bl	800b428 <_Bfree>
 800c1e0:	4629      	mov	r1, r5
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f7ff f920 	bl	800b428 <_Bfree>
 800c1e8:	e5dd      	b.n	800bda6 <_strtod_l+0x76>
 800c1ea:	2000      	movs	r0, #0
 800c1ec:	ec49 8b17 	vmov	d7, r8, r9
 800c1f0:	4f2f      	ldr	r7, [pc, #188]	; (800c2b0 <_strtod_l+0x580>)
 800c1f2:	1112      	asrs	r2, r2, #4
 800c1f4:	4601      	mov	r1, r0
 800c1f6:	2a01      	cmp	r2, #1
 800c1f8:	dc23      	bgt.n	800c242 <_strtod_l+0x512>
 800c1fa:	b108      	cbz	r0, 800c200 <_strtod_l+0x4d0>
 800c1fc:	ec59 8b17 	vmov	r8, r9, d7
 800c200:	4a2b      	ldr	r2, [pc, #172]	; (800c2b0 <_strtod_l+0x580>)
 800c202:	482c      	ldr	r0, [pc, #176]	; (800c2b4 <_strtod_l+0x584>)
 800c204:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c208:	ed92 7b00 	vldr	d7, [r2]
 800c20c:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c210:	ec49 8b16 	vmov	d6, r8, r9
 800c214:	4a28      	ldr	r2, [pc, #160]	; (800c2b8 <_strtod_l+0x588>)
 800c216:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c21a:	ee17 1a90 	vmov	r1, s15
 800c21e:	400a      	ands	r2, r1
 800c220:	4282      	cmp	r2, r0
 800c222:	ec59 8b17 	vmov	r8, r9, d7
 800c226:	d8bd      	bhi.n	800c1a4 <_strtod_l+0x474>
 800c228:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c22c:	4282      	cmp	r2, r0
 800c22e:	bf86      	itte	hi
 800c230:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800c2bc <_strtod_l+0x58c>
 800c234:	f04f 38ff 	movhi.w	r8, #4294967295
 800c238:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c23c:	2200      	movs	r2, #0
 800c23e:	9205      	str	r2, [sp, #20]
 800c240:	e076      	b.n	800c330 <_strtod_l+0x600>
 800c242:	f012 0f01 	tst.w	r2, #1
 800c246:	d004      	beq.n	800c252 <_strtod_l+0x522>
 800c248:	ed97 6b00 	vldr	d6, [r7]
 800c24c:	2001      	movs	r0, #1
 800c24e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c252:	3101      	adds	r1, #1
 800c254:	1052      	asrs	r2, r2, #1
 800c256:	3708      	adds	r7, #8
 800c258:	e7cd      	b.n	800c1f6 <_strtod_l+0x4c6>
 800c25a:	d0ef      	beq.n	800c23c <_strtod_l+0x50c>
 800c25c:	4252      	negs	r2, r2
 800c25e:	f012 000f 	ands.w	r0, r2, #15
 800c262:	d00a      	beq.n	800c27a <_strtod_l+0x54a>
 800c264:	4911      	ldr	r1, [pc, #68]	; (800c2ac <_strtod_l+0x57c>)
 800c266:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c26a:	ed91 7b00 	vldr	d7, [r1]
 800c26e:	ec49 8b16 	vmov	d6, r8, r9
 800c272:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c276:	ec59 8b17 	vmov	r8, r9, d7
 800c27a:	1112      	asrs	r2, r2, #4
 800c27c:	d0de      	beq.n	800c23c <_strtod_l+0x50c>
 800c27e:	2a1f      	cmp	r2, #31
 800c280:	dd1e      	ble.n	800c2c0 <_strtod_l+0x590>
 800c282:	2500      	movs	r5, #0
 800c284:	462e      	mov	r6, r5
 800c286:	9507      	str	r5, [sp, #28]
 800c288:	462f      	mov	r7, r5
 800c28a:	2322      	movs	r3, #34	; 0x22
 800c28c:	f04f 0800 	mov.w	r8, #0
 800c290:	f04f 0900 	mov.w	r9, #0
 800c294:	6023      	str	r3, [r4, #0]
 800c296:	e78f      	b.n	800c1b8 <_strtod_l+0x488>
 800c298:	0800f38d 	.word	0x0800f38d
 800c29c:	0800f5b4 	.word	0x0800f5b4
 800c2a0:	0800f385 	.word	0x0800f385
 800c2a4:	0800f3bc 	.word	0x0800f3bc
 800c2a8:	0800f745 	.word	0x0800f745
 800c2ac:	0800f4c8 	.word	0x0800f4c8
 800c2b0:	0800f4a0 	.word	0x0800f4a0
 800c2b4:	7ca00000 	.word	0x7ca00000
 800c2b8:	7ff00000 	.word	0x7ff00000
 800c2bc:	7fefffff 	.word	0x7fefffff
 800c2c0:	f012 0110 	ands.w	r1, r2, #16
 800c2c4:	bf18      	it	ne
 800c2c6:	216a      	movne	r1, #106	; 0x6a
 800c2c8:	9105      	str	r1, [sp, #20]
 800c2ca:	ec49 8b17 	vmov	d7, r8, r9
 800c2ce:	49be      	ldr	r1, [pc, #760]	; (800c5c8 <_strtod_l+0x898>)
 800c2d0:	2000      	movs	r0, #0
 800c2d2:	07d7      	lsls	r7, r2, #31
 800c2d4:	d504      	bpl.n	800c2e0 <_strtod_l+0x5b0>
 800c2d6:	ed91 6b00 	vldr	d6, [r1]
 800c2da:	2001      	movs	r0, #1
 800c2dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c2e0:	1052      	asrs	r2, r2, #1
 800c2e2:	f101 0108 	add.w	r1, r1, #8
 800c2e6:	d1f4      	bne.n	800c2d2 <_strtod_l+0x5a2>
 800c2e8:	b108      	cbz	r0, 800c2ee <_strtod_l+0x5be>
 800c2ea:	ec59 8b17 	vmov	r8, r9, d7
 800c2ee:	9a05      	ldr	r2, [sp, #20]
 800c2f0:	b1ba      	cbz	r2, 800c322 <_strtod_l+0x5f2>
 800c2f2:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c2f6:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c2fa:	2a00      	cmp	r2, #0
 800c2fc:	4648      	mov	r0, r9
 800c2fe:	dd10      	ble.n	800c322 <_strtod_l+0x5f2>
 800c300:	2a1f      	cmp	r2, #31
 800c302:	f340 812c 	ble.w	800c55e <_strtod_l+0x82e>
 800c306:	2a34      	cmp	r2, #52	; 0x34
 800c308:	bfde      	ittt	le
 800c30a:	f04f 32ff 	movle.w	r2, #4294967295
 800c30e:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c312:	408a      	lslle	r2, r1
 800c314:	f04f 0800 	mov.w	r8, #0
 800c318:	bfcc      	ite	gt
 800c31a:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c31e:	ea02 0900 	andle.w	r9, r2, r0
 800c322:	ec49 8b17 	vmov	d7, r8, r9
 800c326:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c32e:	d0a8      	beq.n	800c282 <_strtod_l+0x552>
 800c330:	9a07      	ldr	r2, [sp, #28]
 800c332:	9200      	str	r2, [sp, #0]
 800c334:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c336:	4632      	mov	r2, r6
 800c338:	4620      	mov	r0, r4
 800c33a:	f7ff f8dd 	bl	800b4f8 <__s2b>
 800c33e:	9007      	str	r0, [sp, #28]
 800c340:	2800      	cmp	r0, #0
 800c342:	f43f af2f 	beq.w	800c1a4 <_strtod_l+0x474>
 800c346:	9a06      	ldr	r2, [sp, #24]
 800c348:	2a00      	cmp	r2, #0
 800c34a:	ebab 0305 	sub.w	r3, fp, r5
 800c34e:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800c5a8 <_strtod_l+0x878>
 800c352:	bfa8      	it	ge
 800c354:	2300      	movge	r3, #0
 800c356:	ed9f ab96 	vldr	d10, [pc, #600]	; 800c5b0 <_strtod_l+0x880>
 800c35a:	ed9f bb97 	vldr	d11, [pc, #604]	; 800c5b8 <_strtod_l+0x888>
 800c35e:	9309      	str	r3, [sp, #36]	; 0x24
 800c360:	2500      	movs	r5, #0
 800c362:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c366:	930c      	str	r3, [sp, #48]	; 0x30
 800c368:	462e      	mov	r6, r5
 800c36a:	9b07      	ldr	r3, [sp, #28]
 800c36c:	4620      	mov	r0, r4
 800c36e:	6859      	ldr	r1, [r3, #4]
 800c370:	f7ff f81a 	bl	800b3a8 <_Balloc>
 800c374:	4607      	mov	r7, r0
 800c376:	2800      	cmp	r0, #0
 800c378:	f43f af18 	beq.w	800c1ac <_strtod_l+0x47c>
 800c37c:	9b07      	ldr	r3, [sp, #28]
 800c37e:	691a      	ldr	r2, [r3, #16]
 800c380:	3202      	adds	r2, #2
 800c382:	f103 010c 	add.w	r1, r3, #12
 800c386:	0092      	lsls	r2, r2, #2
 800c388:	300c      	adds	r0, #12
 800c38a:	f7fe f9b7 	bl	800a6fc <memcpy>
 800c38e:	ec49 8b10 	vmov	d0, r8, r9
 800c392:	aa14      	add	r2, sp, #80	; 0x50
 800c394:	a913      	add	r1, sp, #76	; 0x4c
 800c396:	4620      	mov	r0, r4
 800c398:	f7ff fbe2 	bl	800bb60 <__d2b>
 800c39c:	ec49 8b18 	vmov	d8, r8, r9
 800c3a0:	9012      	str	r0, [sp, #72]	; 0x48
 800c3a2:	2800      	cmp	r0, #0
 800c3a4:	f43f af02 	beq.w	800c1ac <_strtod_l+0x47c>
 800c3a8:	2101      	movs	r1, #1
 800c3aa:	4620      	mov	r0, r4
 800c3ac:	f7ff f93c 	bl	800b628 <__i2b>
 800c3b0:	4606      	mov	r6, r0
 800c3b2:	2800      	cmp	r0, #0
 800c3b4:	f43f aefa 	beq.w	800c1ac <_strtod_l+0x47c>
 800c3b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c3ba:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfab      	itete	ge
 800c3c0:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800c3c2:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800c3c4:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800c3c8:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800c3cc:	bfac      	ite	ge
 800c3ce:	eb03 0b02 	addge.w	fp, r3, r2
 800c3d2:	eba2 0a03 	sublt.w	sl, r2, r3
 800c3d6:	9a05      	ldr	r2, [sp, #20]
 800c3d8:	1a9b      	subs	r3, r3, r2
 800c3da:	440b      	add	r3, r1
 800c3dc:	4a7b      	ldr	r2, [pc, #492]	; (800c5cc <_strtod_l+0x89c>)
 800c3de:	3b01      	subs	r3, #1
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800c3e6:	f280 80cd 	bge.w	800c584 <_strtod_l+0x854>
 800c3ea:	1ad2      	subs	r2, r2, r3
 800c3ec:	2a1f      	cmp	r2, #31
 800c3ee:	eba1 0102 	sub.w	r1, r1, r2
 800c3f2:	f04f 0001 	mov.w	r0, #1
 800c3f6:	f300 80b9 	bgt.w	800c56c <_strtod_l+0x83c>
 800c3fa:	fa00 f302 	lsl.w	r3, r0, r2
 800c3fe:	930b      	str	r3, [sp, #44]	; 0x2c
 800c400:	2300      	movs	r3, #0
 800c402:	930a      	str	r3, [sp, #40]	; 0x28
 800c404:	eb0b 0301 	add.w	r3, fp, r1
 800c408:	9a05      	ldr	r2, [sp, #20]
 800c40a:	459b      	cmp	fp, r3
 800c40c:	448a      	add	sl, r1
 800c40e:	4492      	add	sl, r2
 800c410:	465a      	mov	r2, fp
 800c412:	bfa8      	it	ge
 800c414:	461a      	movge	r2, r3
 800c416:	4552      	cmp	r2, sl
 800c418:	bfa8      	it	ge
 800c41a:	4652      	movge	r2, sl
 800c41c:	2a00      	cmp	r2, #0
 800c41e:	bfc2      	ittt	gt
 800c420:	1a9b      	subgt	r3, r3, r2
 800c422:	ebaa 0a02 	subgt.w	sl, sl, r2
 800c426:	ebab 0b02 	subgt.w	fp, fp, r2
 800c42a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c42c:	2a00      	cmp	r2, #0
 800c42e:	dd18      	ble.n	800c462 <_strtod_l+0x732>
 800c430:	4631      	mov	r1, r6
 800c432:	4620      	mov	r0, r4
 800c434:	930f      	str	r3, [sp, #60]	; 0x3c
 800c436:	f7ff f9b7 	bl	800b7a8 <__pow5mult>
 800c43a:	4606      	mov	r6, r0
 800c43c:	2800      	cmp	r0, #0
 800c43e:	f43f aeb5 	beq.w	800c1ac <_strtod_l+0x47c>
 800c442:	4601      	mov	r1, r0
 800c444:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c446:	4620      	mov	r0, r4
 800c448:	f7ff f904 	bl	800b654 <__multiply>
 800c44c:	900e      	str	r0, [sp, #56]	; 0x38
 800c44e:	2800      	cmp	r0, #0
 800c450:	f43f aeac 	beq.w	800c1ac <_strtod_l+0x47c>
 800c454:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c456:	4620      	mov	r0, r4
 800c458:	f7fe ffe6 	bl	800b428 <_Bfree>
 800c45c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c45e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c460:	9212      	str	r2, [sp, #72]	; 0x48
 800c462:	2b00      	cmp	r3, #0
 800c464:	f300 8093 	bgt.w	800c58e <_strtod_l+0x85e>
 800c468:	9b06      	ldr	r3, [sp, #24]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	dd08      	ble.n	800c480 <_strtod_l+0x750>
 800c46e:	4639      	mov	r1, r7
 800c470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c472:	4620      	mov	r0, r4
 800c474:	f7ff f998 	bl	800b7a8 <__pow5mult>
 800c478:	4607      	mov	r7, r0
 800c47a:	2800      	cmp	r0, #0
 800c47c:	f43f ae96 	beq.w	800c1ac <_strtod_l+0x47c>
 800c480:	f1ba 0f00 	cmp.w	sl, #0
 800c484:	dd08      	ble.n	800c498 <_strtod_l+0x768>
 800c486:	4639      	mov	r1, r7
 800c488:	4652      	mov	r2, sl
 800c48a:	4620      	mov	r0, r4
 800c48c:	f7ff f9e6 	bl	800b85c <__lshift>
 800c490:	4607      	mov	r7, r0
 800c492:	2800      	cmp	r0, #0
 800c494:	f43f ae8a 	beq.w	800c1ac <_strtod_l+0x47c>
 800c498:	f1bb 0f00 	cmp.w	fp, #0
 800c49c:	dd08      	ble.n	800c4b0 <_strtod_l+0x780>
 800c49e:	4631      	mov	r1, r6
 800c4a0:	465a      	mov	r2, fp
 800c4a2:	4620      	mov	r0, r4
 800c4a4:	f7ff f9da 	bl	800b85c <__lshift>
 800c4a8:	4606      	mov	r6, r0
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	f43f ae7e 	beq.w	800c1ac <_strtod_l+0x47c>
 800c4b0:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c4b2:	463a      	mov	r2, r7
 800c4b4:	4620      	mov	r0, r4
 800c4b6:	f7ff fa59 	bl	800b96c <__mdiff>
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	f43f ae75 	beq.w	800c1ac <_strtod_l+0x47c>
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800c4c8:	60c3      	str	r3, [r0, #12]
 800c4ca:	4631      	mov	r1, r6
 800c4cc:	f7ff fa32 	bl	800b934 <__mcmp>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	da7f      	bge.n	800c5d4 <_strtod_l+0x8a4>
 800c4d4:	ea5a 0a08 	orrs.w	sl, sl, r8
 800c4d8:	f040 80a5 	bne.w	800c626 <_strtod_l+0x8f6>
 800c4dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f040 80a0 	bne.w	800c626 <_strtod_l+0x8f6>
 800c4e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4ea:	0d1b      	lsrs	r3, r3, #20
 800c4ec:	051b      	lsls	r3, r3, #20
 800c4ee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c4f2:	f240 8098 	bls.w	800c626 <_strtod_l+0x8f6>
 800c4f6:	696b      	ldr	r3, [r5, #20]
 800c4f8:	b91b      	cbnz	r3, 800c502 <_strtod_l+0x7d2>
 800c4fa:	692b      	ldr	r3, [r5, #16]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	f340 8092 	ble.w	800c626 <_strtod_l+0x8f6>
 800c502:	4629      	mov	r1, r5
 800c504:	2201      	movs	r2, #1
 800c506:	4620      	mov	r0, r4
 800c508:	f7ff f9a8 	bl	800b85c <__lshift>
 800c50c:	4631      	mov	r1, r6
 800c50e:	4605      	mov	r5, r0
 800c510:	f7ff fa10 	bl	800b934 <__mcmp>
 800c514:	2800      	cmp	r0, #0
 800c516:	f340 8086 	ble.w	800c626 <_strtod_l+0x8f6>
 800c51a:	9905      	ldr	r1, [sp, #20]
 800c51c:	4a2c      	ldr	r2, [pc, #176]	; (800c5d0 <_strtod_l+0x8a0>)
 800c51e:	464b      	mov	r3, r9
 800c520:	2900      	cmp	r1, #0
 800c522:	f000 809f 	beq.w	800c664 <_strtod_l+0x934>
 800c526:	ea02 0109 	and.w	r1, r2, r9
 800c52a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c52e:	f300 8099 	bgt.w	800c664 <_strtod_l+0x934>
 800c532:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c536:	f77f aea8 	ble.w	800c28a <_strtod_l+0x55a>
 800c53a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800c5c0 <_strtod_l+0x890>
 800c53e:	ec49 8b16 	vmov	d6, r8, r9
 800c542:	4b23      	ldr	r3, [pc, #140]	; (800c5d0 <_strtod_l+0x8a0>)
 800c544:	ee26 7b07 	vmul.f64	d7, d6, d7
 800c548:	ee17 2a90 	vmov	r2, s15
 800c54c:	4013      	ands	r3, r2
 800c54e:	ec59 8b17 	vmov	r8, r9, d7
 800c552:	2b00      	cmp	r3, #0
 800c554:	f47f ae34 	bne.w	800c1c0 <_strtod_l+0x490>
 800c558:	2322      	movs	r3, #34	; 0x22
 800c55a:	6023      	str	r3, [r4, #0]
 800c55c:	e630      	b.n	800c1c0 <_strtod_l+0x490>
 800c55e:	f04f 31ff 	mov.w	r1, #4294967295
 800c562:	fa01 f202 	lsl.w	r2, r1, r2
 800c566:	ea02 0808 	and.w	r8, r2, r8
 800c56a:	e6da      	b.n	800c322 <_strtod_l+0x5f2>
 800c56c:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800c570:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800c574:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800c578:	33e2      	adds	r3, #226	; 0xe2
 800c57a:	fa00 f303 	lsl.w	r3, r0, r3
 800c57e:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800c582:	e73f      	b.n	800c404 <_strtod_l+0x6d4>
 800c584:	2200      	movs	r2, #0
 800c586:	2301      	movs	r3, #1
 800c588:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800c58c:	e73a      	b.n	800c404 <_strtod_l+0x6d4>
 800c58e:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c590:	461a      	mov	r2, r3
 800c592:	4620      	mov	r0, r4
 800c594:	f7ff f962 	bl	800b85c <__lshift>
 800c598:	9012      	str	r0, [sp, #72]	; 0x48
 800c59a:	2800      	cmp	r0, #0
 800c59c:	f47f af64 	bne.w	800c468 <_strtod_l+0x738>
 800c5a0:	e604      	b.n	800c1ac <_strtod_l+0x47c>
 800c5a2:	bf00      	nop
 800c5a4:	f3af 8000 	nop.w
 800c5a8:	94a03595 	.word	0x94a03595
 800c5ac:	3fcfffff 	.word	0x3fcfffff
 800c5b0:	94a03595 	.word	0x94a03595
 800c5b4:	3fdfffff 	.word	0x3fdfffff
 800c5b8:	35afe535 	.word	0x35afe535
 800c5bc:	3fe00000 	.word	0x3fe00000
 800c5c0:	00000000 	.word	0x00000000
 800c5c4:	39500000 	.word	0x39500000
 800c5c8:	0800f5c8 	.word	0x0800f5c8
 800c5cc:	fffffc02 	.word	0xfffffc02
 800c5d0:	7ff00000 	.word	0x7ff00000
 800c5d4:	46cb      	mov	fp, r9
 800c5d6:	d15f      	bne.n	800c698 <_strtod_l+0x968>
 800c5d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c5dc:	f1ba 0f00 	cmp.w	sl, #0
 800c5e0:	d02a      	beq.n	800c638 <_strtod_l+0x908>
 800c5e2:	4aa7      	ldr	r2, [pc, #668]	; (800c880 <_strtod_l+0xb50>)
 800c5e4:	4293      	cmp	r3, r2
 800c5e6:	d12b      	bne.n	800c640 <_strtod_l+0x910>
 800c5e8:	9b05      	ldr	r3, [sp, #20]
 800c5ea:	4642      	mov	r2, r8
 800c5ec:	b1fb      	cbz	r3, 800c62e <_strtod_l+0x8fe>
 800c5ee:	4ba5      	ldr	r3, [pc, #660]	; (800c884 <_strtod_l+0xb54>)
 800c5f0:	ea09 0303 	and.w	r3, r9, r3
 800c5f4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c5f8:	f04f 31ff 	mov.w	r1, #4294967295
 800c5fc:	d81a      	bhi.n	800c634 <_strtod_l+0x904>
 800c5fe:	0d1b      	lsrs	r3, r3, #20
 800c600:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c604:	fa01 f303 	lsl.w	r3, r1, r3
 800c608:	429a      	cmp	r2, r3
 800c60a:	d119      	bne.n	800c640 <_strtod_l+0x910>
 800c60c:	4b9e      	ldr	r3, [pc, #632]	; (800c888 <_strtod_l+0xb58>)
 800c60e:	459b      	cmp	fp, r3
 800c610:	d102      	bne.n	800c618 <_strtod_l+0x8e8>
 800c612:	3201      	adds	r2, #1
 800c614:	f43f adca 	beq.w	800c1ac <_strtod_l+0x47c>
 800c618:	4b9a      	ldr	r3, [pc, #616]	; (800c884 <_strtod_l+0xb54>)
 800c61a:	ea0b 0303 	and.w	r3, fp, r3
 800c61e:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c622:	f04f 0800 	mov.w	r8, #0
 800c626:	9b05      	ldr	r3, [sp, #20]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d186      	bne.n	800c53a <_strtod_l+0x80a>
 800c62c:	e5c8      	b.n	800c1c0 <_strtod_l+0x490>
 800c62e:	f04f 33ff 	mov.w	r3, #4294967295
 800c632:	e7e9      	b.n	800c608 <_strtod_l+0x8d8>
 800c634:	460b      	mov	r3, r1
 800c636:	e7e7      	b.n	800c608 <_strtod_l+0x8d8>
 800c638:	ea53 0308 	orrs.w	r3, r3, r8
 800c63c:	f43f af6d 	beq.w	800c51a <_strtod_l+0x7ea>
 800c640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c642:	b1cb      	cbz	r3, 800c678 <_strtod_l+0x948>
 800c644:	ea13 0f0b 	tst.w	r3, fp
 800c648:	d0ed      	beq.n	800c626 <_strtod_l+0x8f6>
 800c64a:	9a05      	ldr	r2, [sp, #20]
 800c64c:	4640      	mov	r0, r8
 800c64e:	4649      	mov	r1, r9
 800c650:	f1ba 0f00 	cmp.w	sl, #0
 800c654:	d014      	beq.n	800c680 <_strtod_l+0x950>
 800c656:	f7ff fb51 	bl	800bcfc <sulp>
 800c65a:	ee38 7b00 	vadd.f64	d7, d8, d0
 800c65e:	ec59 8b17 	vmov	r8, r9, d7
 800c662:	e7e0      	b.n	800c626 <_strtod_l+0x8f6>
 800c664:	4013      	ands	r3, r2
 800c666:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c66a:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c66e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c672:	f04f 38ff 	mov.w	r8, #4294967295
 800c676:	e7d6      	b.n	800c626 <_strtod_l+0x8f6>
 800c678:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c67a:	ea13 0f08 	tst.w	r3, r8
 800c67e:	e7e3      	b.n	800c648 <_strtod_l+0x918>
 800c680:	f7ff fb3c 	bl	800bcfc <sulp>
 800c684:	ee38 0b40 	vsub.f64	d0, d8, d0
 800c688:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c68c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c690:	ec59 8b10 	vmov	r8, r9, d0
 800c694:	d1c7      	bne.n	800c626 <_strtod_l+0x8f6>
 800c696:	e5f8      	b.n	800c28a <_strtod_l+0x55a>
 800c698:	4631      	mov	r1, r6
 800c69a:	4628      	mov	r0, r5
 800c69c:	f7ff faba 	bl	800bc14 <__ratio>
 800c6a0:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800c6a4:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c6a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ac:	d85f      	bhi.n	800c76e <_strtod_l+0xa3e>
 800c6ae:	f1ba 0f00 	cmp.w	sl, #0
 800c6b2:	d166      	bne.n	800c782 <_strtod_l+0xa52>
 800c6b4:	f1b8 0f00 	cmp.w	r8, #0
 800c6b8:	d14d      	bne.n	800c756 <_strtod_l+0xa26>
 800c6ba:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c6be:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d162      	bne.n	800c78c <_strtod_l+0xa5c>
 800c6c6:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800c6ca:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6d2:	d401      	bmi.n	800c6d8 <_strtod_l+0x9a8>
 800c6d4:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c6d8:	eeb1 cb4d 	vneg.f64	d12, d13
 800c6dc:	4869      	ldr	r0, [pc, #420]	; (800c884 <_strtod_l+0xb54>)
 800c6de:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800c890 <_strtod_l+0xb60>
 800c6e2:	ea0b 0100 	and.w	r1, fp, r0
 800c6e6:	4561      	cmp	r1, ip
 800c6e8:	ec53 2b1c 	vmov	r2, r3, d12
 800c6ec:	d17a      	bne.n	800c7e4 <_strtod_l+0xab4>
 800c6ee:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800c6f2:	ec49 8b10 	vmov	d0, r8, r9
 800c6f6:	910a      	str	r1, [sp, #40]	; 0x28
 800c6f8:	f7ff f9c2 	bl	800ba80 <__ulp>
 800c6fc:	ec49 8b1e 	vmov	d14, r8, r9
 800c700:	4860      	ldr	r0, [pc, #384]	; (800c884 <_strtod_l+0xb54>)
 800c702:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800c706:	ee1e 3a90 	vmov	r3, s29
 800c70a:	4a60      	ldr	r2, [pc, #384]	; (800c88c <_strtod_l+0xb5c>)
 800c70c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c70e:	4018      	ands	r0, r3
 800c710:	4290      	cmp	r0, r2
 800c712:	ec59 8b1e 	vmov	r8, r9, d14
 800c716:	d93c      	bls.n	800c792 <_strtod_l+0xa62>
 800c718:	ee18 2a90 	vmov	r2, s17
 800c71c:	4b5a      	ldr	r3, [pc, #360]	; (800c888 <_strtod_l+0xb58>)
 800c71e:	429a      	cmp	r2, r3
 800c720:	d104      	bne.n	800c72c <_strtod_l+0x9fc>
 800c722:	ee18 3a10 	vmov	r3, s16
 800c726:	3301      	adds	r3, #1
 800c728:	f43f ad40 	beq.w	800c1ac <_strtod_l+0x47c>
 800c72c:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800c888 <_strtod_l+0xb58>
 800c730:	f04f 38ff 	mov.w	r8, #4294967295
 800c734:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c736:	4620      	mov	r0, r4
 800c738:	f7fe fe76 	bl	800b428 <_Bfree>
 800c73c:	4639      	mov	r1, r7
 800c73e:	4620      	mov	r0, r4
 800c740:	f7fe fe72 	bl	800b428 <_Bfree>
 800c744:	4631      	mov	r1, r6
 800c746:	4620      	mov	r0, r4
 800c748:	f7fe fe6e 	bl	800b428 <_Bfree>
 800c74c:	4629      	mov	r1, r5
 800c74e:	4620      	mov	r0, r4
 800c750:	f7fe fe6a 	bl	800b428 <_Bfree>
 800c754:	e609      	b.n	800c36a <_strtod_l+0x63a>
 800c756:	f1b8 0f01 	cmp.w	r8, #1
 800c75a:	d103      	bne.n	800c764 <_strtod_l+0xa34>
 800c75c:	f1b9 0f00 	cmp.w	r9, #0
 800c760:	f43f ad93 	beq.w	800c28a <_strtod_l+0x55a>
 800c764:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c768:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800c76c:	e7b6      	b.n	800c6dc <_strtod_l+0x9ac>
 800c76e:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800c772:	ee20 db0d 	vmul.f64	d13, d0, d13
 800c776:	f1ba 0f00 	cmp.w	sl, #0
 800c77a:	d0ad      	beq.n	800c6d8 <_strtod_l+0x9a8>
 800c77c:	eeb0 cb4d 	vmov.f64	d12, d13
 800c780:	e7ac      	b.n	800c6dc <_strtod_l+0x9ac>
 800c782:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800c786:	eeb0 db4c 	vmov.f64	d13, d12
 800c78a:	e7a7      	b.n	800c6dc <_strtod_l+0x9ac>
 800c78c:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800c790:	e7a4      	b.n	800c6dc <_strtod_l+0x9ac>
 800c792:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c796:	9b05      	ldr	r3, [sp, #20]
 800c798:	46cb      	mov	fp, r9
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d1ca      	bne.n	800c734 <_strtod_l+0xa04>
 800c79e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c7a2:	0d1b      	lsrs	r3, r3, #20
 800c7a4:	051b      	lsls	r3, r3, #20
 800c7a6:	4299      	cmp	r1, r3
 800c7a8:	d1c4      	bne.n	800c734 <_strtod_l+0xa04>
 800c7aa:	ec51 0b1d 	vmov	r0, r1, d13
 800c7ae:	f7f3 ff73 	bl	8000698 <__aeabi_d2lz>
 800c7b2:	f7f3 ff2b 	bl	800060c <__aeabi_l2d>
 800c7b6:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800c7ba:	ec41 0b17 	vmov	d7, r0, r1
 800c7be:	ea4b 0b08 	orr.w	fp, fp, r8
 800c7c2:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800c7c6:	ee3d db47 	vsub.f64	d13, d13, d7
 800c7ca:	d03c      	beq.n	800c846 <_strtod_l+0xb16>
 800c7cc:	eeb4 dbca 	vcmpe.f64	d13, d10
 800c7d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7d4:	f53f acf4 	bmi.w	800c1c0 <_strtod_l+0x490>
 800c7d8:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800c7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7e0:	dda8      	ble.n	800c734 <_strtod_l+0xa04>
 800c7e2:	e4ed      	b.n	800c1c0 <_strtod_l+0x490>
 800c7e4:	9805      	ldr	r0, [sp, #20]
 800c7e6:	b1f0      	cbz	r0, 800c826 <_strtod_l+0xaf6>
 800c7e8:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800c7ec:	d81b      	bhi.n	800c826 <_strtod_l+0xaf6>
 800c7ee:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800c878 <_strtod_l+0xb48>
 800c7f2:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800c7f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7fa:	d811      	bhi.n	800c820 <_strtod_l+0xaf0>
 800c7fc:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800c800:	ee1d 3a10 	vmov	r3, s26
 800c804:	2b01      	cmp	r3, #1
 800c806:	bf38      	it	cc
 800c808:	2301      	movcc	r3, #1
 800c80a:	ee0d 3a10 	vmov	s26, r3
 800c80e:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800c812:	f1ba 0f00 	cmp.w	sl, #0
 800c816:	d113      	bne.n	800c840 <_strtod_l+0xb10>
 800c818:	eeb1 7b4d 	vneg.f64	d7, d13
 800c81c:	ec53 2b17 	vmov	r2, r3, d7
 800c820:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800c824:	1a43      	subs	r3, r0, r1
 800c826:	eeb0 0b48 	vmov.f64	d0, d8
 800c82a:	ec43 2b1c 	vmov	d12, r2, r3
 800c82e:	910a      	str	r1, [sp, #40]	; 0x28
 800c830:	f7ff f926 	bl	800ba80 <__ulp>
 800c834:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c836:	eeac 8b00 	vfma.f64	d8, d12, d0
 800c83a:	ec59 8b18 	vmov	r8, r9, d8
 800c83e:	e7aa      	b.n	800c796 <_strtod_l+0xa66>
 800c840:	eeb0 7b4d 	vmov.f64	d7, d13
 800c844:	e7ea      	b.n	800c81c <_strtod_l+0xaec>
 800c846:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800c84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c84e:	f57f af71 	bpl.w	800c734 <_strtod_l+0xa04>
 800c852:	e4b5      	b.n	800c1c0 <_strtod_l+0x490>
 800c854:	2300      	movs	r3, #0
 800c856:	9308      	str	r3, [sp, #32]
 800c858:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c85a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c85c:	6013      	str	r3, [r2, #0]
 800c85e:	f7ff baa6 	b.w	800bdae <_strtod_l+0x7e>
 800c862:	2a65      	cmp	r2, #101	; 0x65
 800c864:	f43f aba2 	beq.w	800bfac <_strtod_l+0x27c>
 800c868:	2a45      	cmp	r2, #69	; 0x45
 800c86a:	f43f ab9f 	beq.w	800bfac <_strtod_l+0x27c>
 800c86e:	2101      	movs	r1, #1
 800c870:	f7ff bbd8 	b.w	800c024 <_strtod_l+0x2f4>
 800c874:	f3af 8000 	nop.w
 800c878:	ffc00000 	.word	0xffc00000
 800c87c:	41dfffff 	.word	0x41dfffff
 800c880:	000fffff 	.word	0x000fffff
 800c884:	7ff00000 	.word	0x7ff00000
 800c888:	7fefffff 	.word	0x7fefffff
 800c88c:	7c9fffff 	.word	0x7c9fffff
 800c890:	7fe00000 	.word	0x7fe00000

0800c894 <_strtod_r>:
 800c894:	4b01      	ldr	r3, [pc, #4]	; (800c89c <_strtod_r+0x8>)
 800c896:	f7ff ba4b 	b.w	800bd30 <_strtod_l>
 800c89a:	bf00      	nop
 800c89c:	20000618 	.word	0x20000618

0800c8a0 <_strtol_l.constprop.0>:
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c8a6:	d001      	beq.n	800c8ac <_strtol_l.constprop.0+0xc>
 800c8a8:	2b24      	cmp	r3, #36	; 0x24
 800c8aa:	d906      	bls.n	800c8ba <_strtol_l.constprop.0+0x1a>
 800c8ac:	f7fd fefc 	bl	800a6a8 <__errno>
 800c8b0:	2316      	movs	r3, #22
 800c8b2:	6003      	str	r3, [r0, #0]
 800c8b4:	2000      	movs	r0, #0
 800c8b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8ba:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c9a0 <_strtol_l.constprop.0+0x100>
 800c8be:	460d      	mov	r5, r1
 800c8c0:	462e      	mov	r6, r5
 800c8c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8c6:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c8ca:	f017 0708 	ands.w	r7, r7, #8
 800c8ce:	d1f7      	bne.n	800c8c0 <_strtol_l.constprop.0+0x20>
 800c8d0:	2c2d      	cmp	r4, #45	; 0x2d
 800c8d2:	d132      	bne.n	800c93a <_strtol_l.constprop.0+0x9a>
 800c8d4:	782c      	ldrb	r4, [r5, #0]
 800c8d6:	2701      	movs	r7, #1
 800c8d8:	1cb5      	adds	r5, r6, #2
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d05b      	beq.n	800c996 <_strtol_l.constprop.0+0xf6>
 800c8de:	2b10      	cmp	r3, #16
 800c8e0:	d109      	bne.n	800c8f6 <_strtol_l.constprop.0+0x56>
 800c8e2:	2c30      	cmp	r4, #48	; 0x30
 800c8e4:	d107      	bne.n	800c8f6 <_strtol_l.constprop.0+0x56>
 800c8e6:	782c      	ldrb	r4, [r5, #0]
 800c8e8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c8ec:	2c58      	cmp	r4, #88	; 0x58
 800c8ee:	d14d      	bne.n	800c98c <_strtol_l.constprop.0+0xec>
 800c8f0:	786c      	ldrb	r4, [r5, #1]
 800c8f2:	2310      	movs	r3, #16
 800c8f4:	3502      	adds	r5, #2
 800c8f6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c8fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800c8fe:	f04f 0e00 	mov.w	lr, #0
 800c902:	fbb8 f9f3 	udiv	r9, r8, r3
 800c906:	4676      	mov	r6, lr
 800c908:	fb03 8a19 	mls	sl, r3, r9, r8
 800c90c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c910:	f1bc 0f09 	cmp.w	ip, #9
 800c914:	d816      	bhi.n	800c944 <_strtol_l.constprop.0+0xa4>
 800c916:	4664      	mov	r4, ip
 800c918:	42a3      	cmp	r3, r4
 800c91a:	dd24      	ble.n	800c966 <_strtol_l.constprop.0+0xc6>
 800c91c:	f1be 3fff 	cmp.w	lr, #4294967295
 800c920:	d008      	beq.n	800c934 <_strtol_l.constprop.0+0x94>
 800c922:	45b1      	cmp	r9, r6
 800c924:	d31c      	bcc.n	800c960 <_strtol_l.constprop.0+0xc0>
 800c926:	d101      	bne.n	800c92c <_strtol_l.constprop.0+0x8c>
 800c928:	45a2      	cmp	sl, r4
 800c92a:	db19      	blt.n	800c960 <_strtol_l.constprop.0+0xc0>
 800c92c:	fb06 4603 	mla	r6, r6, r3, r4
 800c930:	f04f 0e01 	mov.w	lr, #1
 800c934:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c938:	e7e8      	b.n	800c90c <_strtol_l.constprop.0+0x6c>
 800c93a:	2c2b      	cmp	r4, #43	; 0x2b
 800c93c:	bf04      	itt	eq
 800c93e:	782c      	ldrbeq	r4, [r5, #0]
 800c940:	1cb5      	addeq	r5, r6, #2
 800c942:	e7ca      	b.n	800c8da <_strtol_l.constprop.0+0x3a>
 800c944:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c948:	f1bc 0f19 	cmp.w	ip, #25
 800c94c:	d801      	bhi.n	800c952 <_strtol_l.constprop.0+0xb2>
 800c94e:	3c37      	subs	r4, #55	; 0x37
 800c950:	e7e2      	b.n	800c918 <_strtol_l.constprop.0+0x78>
 800c952:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c956:	f1bc 0f19 	cmp.w	ip, #25
 800c95a:	d804      	bhi.n	800c966 <_strtol_l.constprop.0+0xc6>
 800c95c:	3c57      	subs	r4, #87	; 0x57
 800c95e:	e7db      	b.n	800c918 <_strtol_l.constprop.0+0x78>
 800c960:	f04f 3eff 	mov.w	lr, #4294967295
 800c964:	e7e6      	b.n	800c934 <_strtol_l.constprop.0+0x94>
 800c966:	f1be 3fff 	cmp.w	lr, #4294967295
 800c96a:	d105      	bne.n	800c978 <_strtol_l.constprop.0+0xd8>
 800c96c:	2322      	movs	r3, #34	; 0x22
 800c96e:	6003      	str	r3, [r0, #0]
 800c970:	4646      	mov	r6, r8
 800c972:	b942      	cbnz	r2, 800c986 <_strtol_l.constprop.0+0xe6>
 800c974:	4630      	mov	r0, r6
 800c976:	e79e      	b.n	800c8b6 <_strtol_l.constprop.0+0x16>
 800c978:	b107      	cbz	r7, 800c97c <_strtol_l.constprop.0+0xdc>
 800c97a:	4276      	negs	r6, r6
 800c97c:	2a00      	cmp	r2, #0
 800c97e:	d0f9      	beq.n	800c974 <_strtol_l.constprop.0+0xd4>
 800c980:	f1be 0f00 	cmp.w	lr, #0
 800c984:	d000      	beq.n	800c988 <_strtol_l.constprop.0+0xe8>
 800c986:	1e69      	subs	r1, r5, #1
 800c988:	6011      	str	r1, [r2, #0]
 800c98a:	e7f3      	b.n	800c974 <_strtol_l.constprop.0+0xd4>
 800c98c:	2430      	movs	r4, #48	; 0x30
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d1b1      	bne.n	800c8f6 <_strtol_l.constprop.0+0x56>
 800c992:	2308      	movs	r3, #8
 800c994:	e7af      	b.n	800c8f6 <_strtol_l.constprop.0+0x56>
 800c996:	2c30      	cmp	r4, #48	; 0x30
 800c998:	d0a5      	beq.n	800c8e6 <_strtol_l.constprop.0+0x46>
 800c99a:	230a      	movs	r3, #10
 800c99c:	e7ab      	b.n	800c8f6 <_strtol_l.constprop.0+0x56>
 800c99e:	bf00      	nop
 800c9a0:	0800f5f1 	.word	0x0800f5f1

0800c9a4 <_strtol_r>:
 800c9a4:	f7ff bf7c 	b.w	800c8a0 <_strtol_l.constprop.0>

0800c9a8 <__ssputs_r>:
 800c9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9ac:	688e      	ldr	r6, [r1, #8]
 800c9ae:	461f      	mov	r7, r3
 800c9b0:	42be      	cmp	r6, r7
 800c9b2:	680b      	ldr	r3, [r1, #0]
 800c9b4:	4682      	mov	sl, r0
 800c9b6:	460c      	mov	r4, r1
 800c9b8:	4690      	mov	r8, r2
 800c9ba:	d82c      	bhi.n	800ca16 <__ssputs_r+0x6e>
 800c9bc:	898a      	ldrh	r2, [r1, #12]
 800c9be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c9c2:	d026      	beq.n	800ca12 <__ssputs_r+0x6a>
 800c9c4:	6965      	ldr	r5, [r4, #20]
 800c9c6:	6909      	ldr	r1, [r1, #16]
 800c9c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c9cc:	eba3 0901 	sub.w	r9, r3, r1
 800c9d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c9d4:	1c7b      	adds	r3, r7, #1
 800c9d6:	444b      	add	r3, r9
 800c9d8:	106d      	asrs	r5, r5, #1
 800c9da:	429d      	cmp	r5, r3
 800c9dc:	bf38      	it	cc
 800c9de:	461d      	movcc	r5, r3
 800c9e0:	0553      	lsls	r3, r2, #21
 800c9e2:	d527      	bpl.n	800ca34 <__ssputs_r+0x8c>
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	f7fc fdfb 	bl	80095e0 <_malloc_r>
 800c9ea:	4606      	mov	r6, r0
 800c9ec:	b360      	cbz	r0, 800ca48 <__ssputs_r+0xa0>
 800c9ee:	6921      	ldr	r1, [r4, #16]
 800c9f0:	464a      	mov	r2, r9
 800c9f2:	f7fd fe83 	bl	800a6fc <memcpy>
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c9fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca00:	81a3      	strh	r3, [r4, #12]
 800ca02:	6126      	str	r6, [r4, #16]
 800ca04:	6165      	str	r5, [r4, #20]
 800ca06:	444e      	add	r6, r9
 800ca08:	eba5 0509 	sub.w	r5, r5, r9
 800ca0c:	6026      	str	r6, [r4, #0]
 800ca0e:	60a5      	str	r5, [r4, #8]
 800ca10:	463e      	mov	r6, r7
 800ca12:	42be      	cmp	r6, r7
 800ca14:	d900      	bls.n	800ca18 <__ssputs_r+0x70>
 800ca16:	463e      	mov	r6, r7
 800ca18:	6820      	ldr	r0, [r4, #0]
 800ca1a:	4632      	mov	r2, r6
 800ca1c:	4641      	mov	r1, r8
 800ca1e:	f000 f9c9 	bl	800cdb4 <memmove>
 800ca22:	68a3      	ldr	r3, [r4, #8]
 800ca24:	1b9b      	subs	r3, r3, r6
 800ca26:	60a3      	str	r3, [r4, #8]
 800ca28:	6823      	ldr	r3, [r4, #0]
 800ca2a:	4433      	add	r3, r6
 800ca2c:	6023      	str	r3, [r4, #0]
 800ca2e:	2000      	movs	r0, #0
 800ca30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca34:	462a      	mov	r2, r5
 800ca36:	f000 fd90 	bl	800d55a <_realloc_r>
 800ca3a:	4606      	mov	r6, r0
 800ca3c:	2800      	cmp	r0, #0
 800ca3e:	d1e0      	bne.n	800ca02 <__ssputs_r+0x5a>
 800ca40:	6921      	ldr	r1, [r4, #16]
 800ca42:	4650      	mov	r0, sl
 800ca44:	f7fe fc64 	bl	800b310 <_free_r>
 800ca48:	230c      	movs	r3, #12
 800ca4a:	f8ca 3000 	str.w	r3, [sl]
 800ca4e:	89a3      	ldrh	r3, [r4, #12]
 800ca50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca54:	81a3      	strh	r3, [r4, #12]
 800ca56:	f04f 30ff 	mov.w	r0, #4294967295
 800ca5a:	e7e9      	b.n	800ca30 <__ssputs_r+0x88>

0800ca5c <_svfiprintf_r>:
 800ca5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca60:	4698      	mov	r8, r3
 800ca62:	898b      	ldrh	r3, [r1, #12]
 800ca64:	061b      	lsls	r3, r3, #24
 800ca66:	b09d      	sub	sp, #116	; 0x74
 800ca68:	4607      	mov	r7, r0
 800ca6a:	460d      	mov	r5, r1
 800ca6c:	4614      	mov	r4, r2
 800ca6e:	d50e      	bpl.n	800ca8e <_svfiprintf_r+0x32>
 800ca70:	690b      	ldr	r3, [r1, #16]
 800ca72:	b963      	cbnz	r3, 800ca8e <_svfiprintf_r+0x32>
 800ca74:	2140      	movs	r1, #64	; 0x40
 800ca76:	f7fc fdb3 	bl	80095e0 <_malloc_r>
 800ca7a:	6028      	str	r0, [r5, #0]
 800ca7c:	6128      	str	r0, [r5, #16]
 800ca7e:	b920      	cbnz	r0, 800ca8a <_svfiprintf_r+0x2e>
 800ca80:	230c      	movs	r3, #12
 800ca82:	603b      	str	r3, [r7, #0]
 800ca84:	f04f 30ff 	mov.w	r0, #4294967295
 800ca88:	e0d0      	b.n	800cc2c <_svfiprintf_r+0x1d0>
 800ca8a:	2340      	movs	r3, #64	; 0x40
 800ca8c:	616b      	str	r3, [r5, #20]
 800ca8e:	2300      	movs	r3, #0
 800ca90:	9309      	str	r3, [sp, #36]	; 0x24
 800ca92:	2320      	movs	r3, #32
 800ca94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ca98:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca9c:	2330      	movs	r3, #48	; 0x30
 800ca9e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cc44 <_svfiprintf_r+0x1e8>
 800caa2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800caa6:	f04f 0901 	mov.w	r9, #1
 800caaa:	4623      	mov	r3, r4
 800caac:	469a      	mov	sl, r3
 800caae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cab2:	b10a      	cbz	r2, 800cab8 <_svfiprintf_r+0x5c>
 800cab4:	2a25      	cmp	r2, #37	; 0x25
 800cab6:	d1f9      	bne.n	800caac <_svfiprintf_r+0x50>
 800cab8:	ebba 0b04 	subs.w	fp, sl, r4
 800cabc:	d00b      	beq.n	800cad6 <_svfiprintf_r+0x7a>
 800cabe:	465b      	mov	r3, fp
 800cac0:	4622      	mov	r2, r4
 800cac2:	4629      	mov	r1, r5
 800cac4:	4638      	mov	r0, r7
 800cac6:	f7ff ff6f 	bl	800c9a8 <__ssputs_r>
 800caca:	3001      	adds	r0, #1
 800cacc:	f000 80a9 	beq.w	800cc22 <_svfiprintf_r+0x1c6>
 800cad0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cad2:	445a      	add	r2, fp
 800cad4:	9209      	str	r2, [sp, #36]	; 0x24
 800cad6:	f89a 3000 	ldrb.w	r3, [sl]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	f000 80a1 	beq.w	800cc22 <_svfiprintf_r+0x1c6>
 800cae0:	2300      	movs	r3, #0
 800cae2:	f04f 32ff 	mov.w	r2, #4294967295
 800cae6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800caea:	f10a 0a01 	add.w	sl, sl, #1
 800caee:	9304      	str	r3, [sp, #16]
 800caf0:	9307      	str	r3, [sp, #28]
 800caf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800caf6:	931a      	str	r3, [sp, #104]	; 0x68
 800caf8:	4654      	mov	r4, sl
 800cafa:	2205      	movs	r2, #5
 800cafc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb00:	4850      	ldr	r0, [pc, #320]	; (800cc44 <_svfiprintf_r+0x1e8>)
 800cb02:	f7f3 fb9d 	bl	8000240 <memchr>
 800cb06:	9a04      	ldr	r2, [sp, #16]
 800cb08:	b9d8      	cbnz	r0, 800cb42 <_svfiprintf_r+0xe6>
 800cb0a:	06d0      	lsls	r0, r2, #27
 800cb0c:	bf44      	itt	mi
 800cb0e:	2320      	movmi	r3, #32
 800cb10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb14:	0711      	lsls	r1, r2, #28
 800cb16:	bf44      	itt	mi
 800cb18:	232b      	movmi	r3, #43	; 0x2b
 800cb1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cb1e:	f89a 3000 	ldrb.w	r3, [sl]
 800cb22:	2b2a      	cmp	r3, #42	; 0x2a
 800cb24:	d015      	beq.n	800cb52 <_svfiprintf_r+0xf6>
 800cb26:	9a07      	ldr	r2, [sp, #28]
 800cb28:	4654      	mov	r4, sl
 800cb2a:	2000      	movs	r0, #0
 800cb2c:	f04f 0c0a 	mov.w	ip, #10
 800cb30:	4621      	mov	r1, r4
 800cb32:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb36:	3b30      	subs	r3, #48	; 0x30
 800cb38:	2b09      	cmp	r3, #9
 800cb3a:	d94d      	bls.n	800cbd8 <_svfiprintf_r+0x17c>
 800cb3c:	b1b0      	cbz	r0, 800cb6c <_svfiprintf_r+0x110>
 800cb3e:	9207      	str	r2, [sp, #28]
 800cb40:	e014      	b.n	800cb6c <_svfiprintf_r+0x110>
 800cb42:	eba0 0308 	sub.w	r3, r0, r8
 800cb46:	fa09 f303 	lsl.w	r3, r9, r3
 800cb4a:	4313      	orrs	r3, r2
 800cb4c:	9304      	str	r3, [sp, #16]
 800cb4e:	46a2      	mov	sl, r4
 800cb50:	e7d2      	b.n	800caf8 <_svfiprintf_r+0x9c>
 800cb52:	9b03      	ldr	r3, [sp, #12]
 800cb54:	1d19      	adds	r1, r3, #4
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	9103      	str	r1, [sp, #12]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	bfbb      	ittet	lt
 800cb5e:	425b      	neglt	r3, r3
 800cb60:	f042 0202 	orrlt.w	r2, r2, #2
 800cb64:	9307      	strge	r3, [sp, #28]
 800cb66:	9307      	strlt	r3, [sp, #28]
 800cb68:	bfb8      	it	lt
 800cb6a:	9204      	strlt	r2, [sp, #16]
 800cb6c:	7823      	ldrb	r3, [r4, #0]
 800cb6e:	2b2e      	cmp	r3, #46	; 0x2e
 800cb70:	d10c      	bne.n	800cb8c <_svfiprintf_r+0x130>
 800cb72:	7863      	ldrb	r3, [r4, #1]
 800cb74:	2b2a      	cmp	r3, #42	; 0x2a
 800cb76:	d134      	bne.n	800cbe2 <_svfiprintf_r+0x186>
 800cb78:	9b03      	ldr	r3, [sp, #12]
 800cb7a:	1d1a      	adds	r2, r3, #4
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	9203      	str	r2, [sp, #12]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	bfb8      	it	lt
 800cb84:	f04f 33ff 	movlt.w	r3, #4294967295
 800cb88:	3402      	adds	r4, #2
 800cb8a:	9305      	str	r3, [sp, #20]
 800cb8c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cc54 <_svfiprintf_r+0x1f8>
 800cb90:	7821      	ldrb	r1, [r4, #0]
 800cb92:	2203      	movs	r2, #3
 800cb94:	4650      	mov	r0, sl
 800cb96:	f7f3 fb53 	bl	8000240 <memchr>
 800cb9a:	b138      	cbz	r0, 800cbac <_svfiprintf_r+0x150>
 800cb9c:	9b04      	ldr	r3, [sp, #16]
 800cb9e:	eba0 000a 	sub.w	r0, r0, sl
 800cba2:	2240      	movs	r2, #64	; 0x40
 800cba4:	4082      	lsls	r2, r0
 800cba6:	4313      	orrs	r3, r2
 800cba8:	3401      	adds	r4, #1
 800cbaa:	9304      	str	r3, [sp, #16]
 800cbac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbb0:	4825      	ldr	r0, [pc, #148]	; (800cc48 <_svfiprintf_r+0x1ec>)
 800cbb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cbb6:	2206      	movs	r2, #6
 800cbb8:	f7f3 fb42 	bl	8000240 <memchr>
 800cbbc:	2800      	cmp	r0, #0
 800cbbe:	d038      	beq.n	800cc32 <_svfiprintf_r+0x1d6>
 800cbc0:	4b22      	ldr	r3, [pc, #136]	; (800cc4c <_svfiprintf_r+0x1f0>)
 800cbc2:	bb1b      	cbnz	r3, 800cc0c <_svfiprintf_r+0x1b0>
 800cbc4:	9b03      	ldr	r3, [sp, #12]
 800cbc6:	3307      	adds	r3, #7
 800cbc8:	f023 0307 	bic.w	r3, r3, #7
 800cbcc:	3308      	adds	r3, #8
 800cbce:	9303      	str	r3, [sp, #12]
 800cbd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbd2:	4433      	add	r3, r6
 800cbd4:	9309      	str	r3, [sp, #36]	; 0x24
 800cbd6:	e768      	b.n	800caaa <_svfiprintf_r+0x4e>
 800cbd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cbdc:	460c      	mov	r4, r1
 800cbde:	2001      	movs	r0, #1
 800cbe0:	e7a6      	b.n	800cb30 <_svfiprintf_r+0xd4>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	3401      	adds	r4, #1
 800cbe6:	9305      	str	r3, [sp, #20]
 800cbe8:	4619      	mov	r1, r3
 800cbea:	f04f 0c0a 	mov.w	ip, #10
 800cbee:	4620      	mov	r0, r4
 800cbf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cbf4:	3a30      	subs	r2, #48	; 0x30
 800cbf6:	2a09      	cmp	r2, #9
 800cbf8:	d903      	bls.n	800cc02 <_svfiprintf_r+0x1a6>
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d0c6      	beq.n	800cb8c <_svfiprintf_r+0x130>
 800cbfe:	9105      	str	r1, [sp, #20]
 800cc00:	e7c4      	b.n	800cb8c <_svfiprintf_r+0x130>
 800cc02:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc06:	4604      	mov	r4, r0
 800cc08:	2301      	movs	r3, #1
 800cc0a:	e7f0      	b.n	800cbee <_svfiprintf_r+0x192>
 800cc0c:	ab03      	add	r3, sp, #12
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	462a      	mov	r2, r5
 800cc12:	4b0f      	ldr	r3, [pc, #60]	; (800cc50 <_svfiprintf_r+0x1f4>)
 800cc14:	a904      	add	r1, sp, #16
 800cc16:	4638      	mov	r0, r7
 800cc18:	f7fc fdfe 	bl	8009818 <_printf_float>
 800cc1c:	1c42      	adds	r2, r0, #1
 800cc1e:	4606      	mov	r6, r0
 800cc20:	d1d6      	bne.n	800cbd0 <_svfiprintf_r+0x174>
 800cc22:	89ab      	ldrh	r3, [r5, #12]
 800cc24:	065b      	lsls	r3, r3, #25
 800cc26:	f53f af2d 	bmi.w	800ca84 <_svfiprintf_r+0x28>
 800cc2a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cc2c:	b01d      	add	sp, #116	; 0x74
 800cc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc32:	ab03      	add	r3, sp, #12
 800cc34:	9300      	str	r3, [sp, #0]
 800cc36:	462a      	mov	r2, r5
 800cc38:	4b05      	ldr	r3, [pc, #20]	; (800cc50 <_svfiprintf_r+0x1f4>)
 800cc3a:	a904      	add	r1, sp, #16
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	f7fd f873 	bl	8009d28 <_printf_i>
 800cc42:	e7eb      	b.n	800cc1c <_svfiprintf_r+0x1c0>
 800cc44:	0800f6f1 	.word	0x0800f6f1
 800cc48:	0800f6fb 	.word	0x0800f6fb
 800cc4c:	08009819 	.word	0x08009819
 800cc50:	0800c9a9 	.word	0x0800c9a9
 800cc54:	0800f6f7 	.word	0x0800f6f7

0800cc58 <__sflush_r>:
 800cc58:	898a      	ldrh	r2, [r1, #12]
 800cc5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc5e:	4605      	mov	r5, r0
 800cc60:	0710      	lsls	r0, r2, #28
 800cc62:	460c      	mov	r4, r1
 800cc64:	d458      	bmi.n	800cd18 <__sflush_r+0xc0>
 800cc66:	684b      	ldr	r3, [r1, #4]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	dc05      	bgt.n	800cc78 <__sflush_r+0x20>
 800cc6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	dc02      	bgt.n	800cc78 <__sflush_r+0x20>
 800cc72:	2000      	movs	r0, #0
 800cc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc7a:	2e00      	cmp	r6, #0
 800cc7c:	d0f9      	beq.n	800cc72 <__sflush_r+0x1a>
 800cc7e:	2300      	movs	r3, #0
 800cc80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc84:	682f      	ldr	r7, [r5, #0]
 800cc86:	6a21      	ldr	r1, [r4, #32]
 800cc88:	602b      	str	r3, [r5, #0]
 800cc8a:	d032      	beq.n	800ccf2 <__sflush_r+0x9a>
 800cc8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc8e:	89a3      	ldrh	r3, [r4, #12]
 800cc90:	075a      	lsls	r2, r3, #29
 800cc92:	d505      	bpl.n	800cca0 <__sflush_r+0x48>
 800cc94:	6863      	ldr	r3, [r4, #4]
 800cc96:	1ac0      	subs	r0, r0, r3
 800cc98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc9a:	b10b      	cbz	r3, 800cca0 <__sflush_r+0x48>
 800cc9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc9e:	1ac0      	subs	r0, r0, r3
 800cca0:	2300      	movs	r3, #0
 800cca2:	4602      	mov	r2, r0
 800cca4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cca6:	6a21      	ldr	r1, [r4, #32]
 800cca8:	4628      	mov	r0, r5
 800ccaa:	47b0      	blx	r6
 800ccac:	1c43      	adds	r3, r0, #1
 800ccae:	89a3      	ldrh	r3, [r4, #12]
 800ccb0:	d106      	bne.n	800ccc0 <__sflush_r+0x68>
 800ccb2:	6829      	ldr	r1, [r5, #0]
 800ccb4:	291d      	cmp	r1, #29
 800ccb6:	d82b      	bhi.n	800cd10 <__sflush_r+0xb8>
 800ccb8:	4a29      	ldr	r2, [pc, #164]	; (800cd60 <__sflush_r+0x108>)
 800ccba:	410a      	asrs	r2, r1
 800ccbc:	07d6      	lsls	r6, r2, #31
 800ccbe:	d427      	bmi.n	800cd10 <__sflush_r+0xb8>
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	6062      	str	r2, [r4, #4]
 800ccc4:	04d9      	lsls	r1, r3, #19
 800ccc6:	6922      	ldr	r2, [r4, #16]
 800ccc8:	6022      	str	r2, [r4, #0]
 800ccca:	d504      	bpl.n	800ccd6 <__sflush_r+0x7e>
 800cccc:	1c42      	adds	r2, r0, #1
 800ccce:	d101      	bne.n	800ccd4 <__sflush_r+0x7c>
 800ccd0:	682b      	ldr	r3, [r5, #0]
 800ccd2:	b903      	cbnz	r3, 800ccd6 <__sflush_r+0x7e>
 800ccd4:	6560      	str	r0, [r4, #84]	; 0x54
 800ccd6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccd8:	602f      	str	r7, [r5, #0]
 800ccda:	2900      	cmp	r1, #0
 800ccdc:	d0c9      	beq.n	800cc72 <__sflush_r+0x1a>
 800ccde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cce2:	4299      	cmp	r1, r3
 800cce4:	d002      	beq.n	800ccec <__sflush_r+0x94>
 800cce6:	4628      	mov	r0, r5
 800cce8:	f7fe fb12 	bl	800b310 <_free_r>
 800ccec:	2000      	movs	r0, #0
 800ccee:	6360      	str	r0, [r4, #52]	; 0x34
 800ccf0:	e7c0      	b.n	800cc74 <__sflush_r+0x1c>
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	47b0      	blx	r6
 800ccf8:	1c41      	adds	r1, r0, #1
 800ccfa:	d1c8      	bne.n	800cc8e <__sflush_r+0x36>
 800ccfc:	682b      	ldr	r3, [r5, #0]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d0c5      	beq.n	800cc8e <__sflush_r+0x36>
 800cd02:	2b1d      	cmp	r3, #29
 800cd04:	d001      	beq.n	800cd0a <__sflush_r+0xb2>
 800cd06:	2b16      	cmp	r3, #22
 800cd08:	d101      	bne.n	800cd0e <__sflush_r+0xb6>
 800cd0a:	602f      	str	r7, [r5, #0]
 800cd0c:	e7b1      	b.n	800cc72 <__sflush_r+0x1a>
 800cd0e:	89a3      	ldrh	r3, [r4, #12]
 800cd10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd14:	81a3      	strh	r3, [r4, #12]
 800cd16:	e7ad      	b.n	800cc74 <__sflush_r+0x1c>
 800cd18:	690f      	ldr	r7, [r1, #16]
 800cd1a:	2f00      	cmp	r7, #0
 800cd1c:	d0a9      	beq.n	800cc72 <__sflush_r+0x1a>
 800cd1e:	0793      	lsls	r3, r2, #30
 800cd20:	680e      	ldr	r6, [r1, #0]
 800cd22:	bf08      	it	eq
 800cd24:	694b      	ldreq	r3, [r1, #20]
 800cd26:	600f      	str	r7, [r1, #0]
 800cd28:	bf18      	it	ne
 800cd2a:	2300      	movne	r3, #0
 800cd2c:	eba6 0807 	sub.w	r8, r6, r7
 800cd30:	608b      	str	r3, [r1, #8]
 800cd32:	f1b8 0f00 	cmp.w	r8, #0
 800cd36:	dd9c      	ble.n	800cc72 <__sflush_r+0x1a>
 800cd38:	6a21      	ldr	r1, [r4, #32]
 800cd3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd3c:	4643      	mov	r3, r8
 800cd3e:	463a      	mov	r2, r7
 800cd40:	4628      	mov	r0, r5
 800cd42:	47b0      	blx	r6
 800cd44:	2800      	cmp	r0, #0
 800cd46:	dc06      	bgt.n	800cd56 <__sflush_r+0xfe>
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd4e:	81a3      	strh	r3, [r4, #12]
 800cd50:	f04f 30ff 	mov.w	r0, #4294967295
 800cd54:	e78e      	b.n	800cc74 <__sflush_r+0x1c>
 800cd56:	4407      	add	r7, r0
 800cd58:	eba8 0800 	sub.w	r8, r8, r0
 800cd5c:	e7e9      	b.n	800cd32 <__sflush_r+0xda>
 800cd5e:	bf00      	nop
 800cd60:	dfbffffe 	.word	0xdfbffffe

0800cd64 <_fflush_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	690b      	ldr	r3, [r1, #16]
 800cd68:	4605      	mov	r5, r0
 800cd6a:	460c      	mov	r4, r1
 800cd6c:	b913      	cbnz	r3, 800cd74 <_fflush_r+0x10>
 800cd6e:	2500      	movs	r5, #0
 800cd70:	4628      	mov	r0, r5
 800cd72:	bd38      	pop	{r3, r4, r5, pc}
 800cd74:	b118      	cbz	r0, 800cd7e <_fflush_r+0x1a>
 800cd76:	6a03      	ldr	r3, [r0, #32]
 800cd78:	b90b      	cbnz	r3, 800cd7e <_fflush_r+0x1a>
 800cd7a:	f7fd fb87 	bl	800a48c <__sinit>
 800cd7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d0f3      	beq.n	800cd6e <_fflush_r+0xa>
 800cd86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd88:	07d0      	lsls	r0, r2, #31
 800cd8a:	d404      	bmi.n	800cd96 <_fflush_r+0x32>
 800cd8c:	0599      	lsls	r1, r3, #22
 800cd8e:	d402      	bmi.n	800cd96 <_fflush_r+0x32>
 800cd90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd92:	f7f4 ff60 	bl	8001c56 <__retarget_lock_acquire_recursive>
 800cd96:	4628      	mov	r0, r5
 800cd98:	4621      	mov	r1, r4
 800cd9a:	f7ff ff5d 	bl	800cc58 <__sflush_r>
 800cd9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cda0:	07da      	lsls	r2, r3, #31
 800cda2:	4605      	mov	r5, r0
 800cda4:	d4e4      	bmi.n	800cd70 <_fflush_r+0xc>
 800cda6:	89a3      	ldrh	r3, [r4, #12]
 800cda8:	059b      	lsls	r3, r3, #22
 800cdaa:	d4e1      	bmi.n	800cd70 <_fflush_r+0xc>
 800cdac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdae:	f7f4 ff66 	bl	8001c7e <__retarget_lock_release_recursive>
 800cdb2:	e7dd      	b.n	800cd70 <_fflush_r+0xc>

0800cdb4 <memmove>:
 800cdb4:	4288      	cmp	r0, r1
 800cdb6:	b510      	push	{r4, lr}
 800cdb8:	eb01 0402 	add.w	r4, r1, r2
 800cdbc:	d902      	bls.n	800cdc4 <memmove+0x10>
 800cdbe:	4284      	cmp	r4, r0
 800cdc0:	4623      	mov	r3, r4
 800cdc2:	d807      	bhi.n	800cdd4 <memmove+0x20>
 800cdc4:	1e43      	subs	r3, r0, #1
 800cdc6:	42a1      	cmp	r1, r4
 800cdc8:	d008      	beq.n	800cddc <memmove+0x28>
 800cdca:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdce:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdd2:	e7f8      	b.n	800cdc6 <memmove+0x12>
 800cdd4:	4402      	add	r2, r0
 800cdd6:	4601      	mov	r1, r0
 800cdd8:	428a      	cmp	r2, r1
 800cdda:	d100      	bne.n	800cdde <memmove+0x2a>
 800cddc:	bd10      	pop	{r4, pc}
 800cdde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cde2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cde6:	e7f7      	b.n	800cdd8 <memmove+0x24>

0800cde8 <strncmp>:
 800cde8:	b510      	push	{r4, lr}
 800cdea:	b16a      	cbz	r2, 800ce08 <strncmp+0x20>
 800cdec:	3901      	subs	r1, #1
 800cdee:	1884      	adds	r4, r0, r2
 800cdf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cdf4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800cdf8:	429a      	cmp	r2, r3
 800cdfa:	d103      	bne.n	800ce04 <strncmp+0x1c>
 800cdfc:	42a0      	cmp	r0, r4
 800cdfe:	d001      	beq.n	800ce04 <strncmp+0x1c>
 800ce00:	2a00      	cmp	r2, #0
 800ce02:	d1f5      	bne.n	800cdf0 <strncmp+0x8>
 800ce04:	1ad0      	subs	r0, r2, r3
 800ce06:	bd10      	pop	{r4, pc}
 800ce08:	4610      	mov	r0, r2
 800ce0a:	e7fc      	b.n	800ce06 <strncmp+0x1e>
 800ce0c:	0000      	movs	r0, r0
	...

0800ce10 <nan>:
 800ce10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ce18 <nan+0x8>
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	00000000 	.word	0x00000000
 800ce1c:	7ff80000 	.word	0x7ff80000

0800ce20 <__assert_func>:
 800ce20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce22:	4614      	mov	r4, r2
 800ce24:	461a      	mov	r2, r3
 800ce26:	4b09      	ldr	r3, [pc, #36]	; (800ce4c <__assert_func+0x2c>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	4605      	mov	r5, r0
 800ce2c:	68d8      	ldr	r0, [r3, #12]
 800ce2e:	b14c      	cbz	r4, 800ce44 <__assert_func+0x24>
 800ce30:	4b07      	ldr	r3, [pc, #28]	; (800ce50 <__assert_func+0x30>)
 800ce32:	9100      	str	r1, [sp, #0]
 800ce34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce38:	4906      	ldr	r1, [pc, #24]	; (800ce54 <__assert_func+0x34>)
 800ce3a:	462b      	mov	r3, r5
 800ce3c:	f000 fbca 	bl	800d5d4 <fiprintf>
 800ce40:	f000 fbda 	bl	800d5f8 <abort>
 800ce44:	4b04      	ldr	r3, [pc, #16]	; (800ce58 <__assert_func+0x38>)
 800ce46:	461c      	mov	r4, r3
 800ce48:	e7f3      	b.n	800ce32 <__assert_func+0x12>
 800ce4a:	bf00      	nop
 800ce4c:	20000614 	.word	0x20000614
 800ce50:	0800f70a 	.word	0x0800f70a
 800ce54:	0800f717 	.word	0x0800f717
 800ce58:	0800f745 	.word	0x0800f745

0800ce5c <_calloc_r>:
 800ce5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce5e:	fba1 2402 	umull	r2, r4, r1, r2
 800ce62:	b94c      	cbnz	r4, 800ce78 <_calloc_r+0x1c>
 800ce64:	4611      	mov	r1, r2
 800ce66:	9201      	str	r2, [sp, #4]
 800ce68:	f7fc fbba 	bl	80095e0 <_malloc_r>
 800ce6c:	9a01      	ldr	r2, [sp, #4]
 800ce6e:	4605      	mov	r5, r0
 800ce70:	b930      	cbnz	r0, 800ce80 <_calloc_r+0x24>
 800ce72:	4628      	mov	r0, r5
 800ce74:	b003      	add	sp, #12
 800ce76:	bd30      	pop	{r4, r5, pc}
 800ce78:	220c      	movs	r2, #12
 800ce7a:	6002      	str	r2, [r0, #0]
 800ce7c:	2500      	movs	r5, #0
 800ce7e:	e7f8      	b.n	800ce72 <_calloc_r+0x16>
 800ce80:	4621      	mov	r1, r4
 800ce82:	f7fd fb9c 	bl	800a5be <memset>
 800ce86:	e7f4      	b.n	800ce72 <_calloc_r+0x16>

0800ce88 <rshift>:
 800ce88:	6903      	ldr	r3, [r0, #16]
 800ce8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ce8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ce92:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ce96:	f100 0414 	add.w	r4, r0, #20
 800ce9a:	dd45      	ble.n	800cf28 <rshift+0xa0>
 800ce9c:	f011 011f 	ands.w	r1, r1, #31
 800cea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800cea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800cea8:	d10c      	bne.n	800cec4 <rshift+0x3c>
 800ceaa:	f100 0710 	add.w	r7, r0, #16
 800ceae:	4629      	mov	r1, r5
 800ceb0:	42b1      	cmp	r1, r6
 800ceb2:	d334      	bcc.n	800cf1e <rshift+0x96>
 800ceb4:	1a9b      	subs	r3, r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	1eea      	subs	r2, r5, #3
 800ceba:	4296      	cmp	r6, r2
 800cebc:	bf38      	it	cc
 800cebe:	2300      	movcc	r3, #0
 800cec0:	4423      	add	r3, r4
 800cec2:	e015      	b.n	800cef0 <rshift+0x68>
 800cec4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cec8:	f1c1 0820 	rsb	r8, r1, #32
 800cecc:	40cf      	lsrs	r7, r1
 800cece:	f105 0e04 	add.w	lr, r5, #4
 800ced2:	46a1      	mov	r9, r4
 800ced4:	4576      	cmp	r6, lr
 800ced6:	46f4      	mov	ip, lr
 800ced8:	d815      	bhi.n	800cf06 <rshift+0x7e>
 800ceda:	1a9a      	subs	r2, r3, r2
 800cedc:	0092      	lsls	r2, r2, #2
 800cede:	3a04      	subs	r2, #4
 800cee0:	3501      	adds	r5, #1
 800cee2:	42ae      	cmp	r6, r5
 800cee4:	bf38      	it	cc
 800cee6:	2200      	movcc	r2, #0
 800cee8:	18a3      	adds	r3, r4, r2
 800ceea:	50a7      	str	r7, [r4, r2]
 800ceec:	b107      	cbz	r7, 800cef0 <rshift+0x68>
 800ceee:	3304      	adds	r3, #4
 800cef0:	1b1a      	subs	r2, r3, r4
 800cef2:	42a3      	cmp	r3, r4
 800cef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cef8:	bf08      	it	eq
 800cefa:	2300      	moveq	r3, #0
 800cefc:	6102      	str	r2, [r0, #16]
 800cefe:	bf08      	it	eq
 800cf00:	6143      	streq	r3, [r0, #20]
 800cf02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf06:	f8dc c000 	ldr.w	ip, [ip]
 800cf0a:	fa0c fc08 	lsl.w	ip, ip, r8
 800cf0e:	ea4c 0707 	orr.w	r7, ip, r7
 800cf12:	f849 7b04 	str.w	r7, [r9], #4
 800cf16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cf1a:	40cf      	lsrs	r7, r1
 800cf1c:	e7da      	b.n	800ced4 <rshift+0x4c>
 800cf1e:	f851 cb04 	ldr.w	ip, [r1], #4
 800cf22:	f847 cf04 	str.w	ip, [r7, #4]!
 800cf26:	e7c3      	b.n	800ceb0 <rshift+0x28>
 800cf28:	4623      	mov	r3, r4
 800cf2a:	e7e1      	b.n	800cef0 <rshift+0x68>

0800cf2c <__hexdig_fun>:
 800cf2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cf30:	2b09      	cmp	r3, #9
 800cf32:	d802      	bhi.n	800cf3a <__hexdig_fun+0xe>
 800cf34:	3820      	subs	r0, #32
 800cf36:	b2c0      	uxtb	r0, r0
 800cf38:	4770      	bx	lr
 800cf3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cf3e:	2b05      	cmp	r3, #5
 800cf40:	d801      	bhi.n	800cf46 <__hexdig_fun+0x1a>
 800cf42:	3847      	subs	r0, #71	; 0x47
 800cf44:	e7f7      	b.n	800cf36 <__hexdig_fun+0xa>
 800cf46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cf4a:	2b05      	cmp	r3, #5
 800cf4c:	d801      	bhi.n	800cf52 <__hexdig_fun+0x26>
 800cf4e:	3827      	subs	r0, #39	; 0x27
 800cf50:	e7f1      	b.n	800cf36 <__hexdig_fun+0xa>
 800cf52:	2000      	movs	r0, #0
 800cf54:	4770      	bx	lr
	...

0800cf58 <__gethex>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	4617      	mov	r7, r2
 800cf5e:	680a      	ldr	r2, [r1, #0]
 800cf60:	b085      	sub	sp, #20
 800cf62:	f102 0b02 	add.w	fp, r2, #2
 800cf66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cf6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cf6e:	4681      	mov	r9, r0
 800cf70:	468a      	mov	sl, r1
 800cf72:	9302      	str	r3, [sp, #8]
 800cf74:	32fe      	adds	r2, #254	; 0xfe
 800cf76:	eb02 030b 	add.w	r3, r2, fp
 800cf7a:	46d8      	mov	r8, fp
 800cf7c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cf80:	9301      	str	r3, [sp, #4]
 800cf82:	2830      	cmp	r0, #48	; 0x30
 800cf84:	d0f7      	beq.n	800cf76 <__gethex+0x1e>
 800cf86:	f7ff ffd1 	bl	800cf2c <__hexdig_fun>
 800cf8a:	4604      	mov	r4, r0
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d138      	bne.n	800d002 <__gethex+0xaa>
 800cf90:	49a7      	ldr	r1, [pc, #668]	; (800d230 <__gethex+0x2d8>)
 800cf92:	2201      	movs	r2, #1
 800cf94:	4640      	mov	r0, r8
 800cf96:	f7ff ff27 	bl	800cde8 <strncmp>
 800cf9a:	4606      	mov	r6, r0
 800cf9c:	2800      	cmp	r0, #0
 800cf9e:	d169      	bne.n	800d074 <__gethex+0x11c>
 800cfa0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cfa4:	465d      	mov	r5, fp
 800cfa6:	f7ff ffc1 	bl	800cf2c <__hexdig_fun>
 800cfaa:	2800      	cmp	r0, #0
 800cfac:	d064      	beq.n	800d078 <__gethex+0x120>
 800cfae:	465a      	mov	r2, fp
 800cfb0:	7810      	ldrb	r0, [r2, #0]
 800cfb2:	2830      	cmp	r0, #48	; 0x30
 800cfb4:	4690      	mov	r8, r2
 800cfb6:	f102 0201 	add.w	r2, r2, #1
 800cfba:	d0f9      	beq.n	800cfb0 <__gethex+0x58>
 800cfbc:	f7ff ffb6 	bl	800cf2c <__hexdig_fun>
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	fab0 f480 	clz	r4, r0
 800cfc6:	0964      	lsrs	r4, r4, #5
 800cfc8:	465e      	mov	r6, fp
 800cfca:	9301      	str	r3, [sp, #4]
 800cfcc:	4642      	mov	r2, r8
 800cfce:	4615      	mov	r5, r2
 800cfd0:	3201      	adds	r2, #1
 800cfd2:	7828      	ldrb	r0, [r5, #0]
 800cfd4:	f7ff ffaa 	bl	800cf2c <__hexdig_fun>
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d1f8      	bne.n	800cfce <__gethex+0x76>
 800cfdc:	4994      	ldr	r1, [pc, #592]	; (800d230 <__gethex+0x2d8>)
 800cfde:	2201      	movs	r2, #1
 800cfe0:	4628      	mov	r0, r5
 800cfe2:	f7ff ff01 	bl	800cde8 <strncmp>
 800cfe6:	b978      	cbnz	r0, 800d008 <__gethex+0xb0>
 800cfe8:	b946      	cbnz	r6, 800cffc <__gethex+0xa4>
 800cfea:	1c6e      	adds	r6, r5, #1
 800cfec:	4632      	mov	r2, r6
 800cfee:	4615      	mov	r5, r2
 800cff0:	3201      	adds	r2, #1
 800cff2:	7828      	ldrb	r0, [r5, #0]
 800cff4:	f7ff ff9a 	bl	800cf2c <__hexdig_fun>
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d1f8      	bne.n	800cfee <__gethex+0x96>
 800cffc:	1b73      	subs	r3, r6, r5
 800cffe:	009e      	lsls	r6, r3, #2
 800d000:	e004      	b.n	800d00c <__gethex+0xb4>
 800d002:	2400      	movs	r4, #0
 800d004:	4626      	mov	r6, r4
 800d006:	e7e1      	b.n	800cfcc <__gethex+0x74>
 800d008:	2e00      	cmp	r6, #0
 800d00a:	d1f7      	bne.n	800cffc <__gethex+0xa4>
 800d00c:	782b      	ldrb	r3, [r5, #0]
 800d00e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d012:	2b50      	cmp	r3, #80	; 0x50
 800d014:	d13d      	bne.n	800d092 <__gethex+0x13a>
 800d016:	786b      	ldrb	r3, [r5, #1]
 800d018:	2b2b      	cmp	r3, #43	; 0x2b
 800d01a:	d02f      	beq.n	800d07c <__gethex+0x124>
 800d01c:	2b2d      	cmp	r3, #45	; 0x2d
 800d01e:	d031      	beq.n	800d084 <__gethex+0x12c>
 800d020:	1c69      	adds	r1, r5, #1
 800d022:	f04f 0b00 	mov.w	fp, #0
 800d026:	7808      	ldrb	r0, [r1, #0]
 800d028:	f7ff ff80 	bl	800cf2c <__hexdig_fun>
 800d02c:	1e42      	subs	r2, r0, #1
 800d02e:	b2d2      	uxtb	r2, r2
 800d030:	2a18      	cmp	r2, #24
 800d032:	d82e      	bhi.n	800d092 <__gethex+0x13a>
 800d034:	f1a0 0210 	sub.w	r2, r0, #16
 800d038:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d03c:	f7ff ff76 	bl	800cf2c <__hexdig_fun>
 800d040:	f100 3cff 	add.w	ip, r0, #4294967295
 800d044:	fa5f fc8c 	uxtb.w	ip, ip
 800d048:	f1bc 0f18 	cmp.w	ip, #24
 800d04c:	d91d      	bls.n	800d08a <__gethex+0x132>
 800d04e:	f1bb 0f00 	cmp.w	fp, #0
 800d052:	d000      	beq.n	800d056 <__gethex+0xfe>
 800d054:	4252      	negs	r2, r2
 800d056:	4416      	add	r6, r2
 800d058:	f8ca 1000 	str.w	r1, [sl]
 800d05c:	b1dc      	cbz	r4, 800d096 <__gethex+0x13e>
 800d05e:	9b01      	ldr	r3, [sp, #4]
 800d060:	2b00      	cmp	r3, #0
 800d062:	bf14      	ite	ne
 800d064:	f04f 0800 	movne.w	r8, #0
 800d068:	f04f 0806 	moveq.w	r8, #6
 800d06c:	4640      	mov	r0, r8
 800d06e:	b005      	add	sp, #20
 800d070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d074:	4645      	mov	r5, r8
 800d076:	4626      	mov	r6, r4
 800d078:	2401      	movs	r4, #1
 800d07a:	e7c7      	b.n	800d00c <__gethex+0xb4>
 800d07c:	f04f 0b00 	mov.w	fp, #0
 800d080:	1ca9      	adds	r1, r5, #2
 800d082:	e7d0      	b.n	800d026 <__gethex+0xce>
 800d084:	f04f 0b01 	mov.w	fp, #1
 800d088:	e7fa      	b.n	800d080 <__gethex+0x128>
 800d08a:	230a      	movs	r3, #10
 800d08c:	fb03 0002 	mla	r0, r3, r2, r0
 800d090:	e7d0      	b.n	800d034 <__gethex+0xdc>
 800d092:	4629      	mov	r1, r5
 800d094:	e7e0      	b.n	800d058 <__gethex+0x100>
 800d096:	eba5 0308 	sub.w	r3, r5, r8
 800d09a:	3b01      	subs	r3, #1
 800d09c:	4621      	mov	r1, r4
 800d09e:	2b07      	cmp	r3, #7
 800d0a0:	dc0a      	bgt.n	800d0b8 <__gethex+0x160>
 800d0a2:	4648      	mov	r0, r9
 800d0a4:	f7fe f980 	bl	800b3a8 <_Balloc>
 800d0a8:	4604      	mov	r4, r0
 800d0aa:	b940      	cbnz	r0, 800d0be <__gethex+0x166>
 800d0ac:	4b61      	ldr	r3, [pc, #388]	; (800d234 <__gethex+0x2dc>)
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	21e4      	movs	r1, #228	; 0xe4
 800d0b2:	4861      	ldr	r0, [pc, #388]	; (800d238 <__gethex+0x2e0>)
 800d0b4:	f7ff feb4 	bl	800ce20 <__assert_func>
 800d0b8:	3101      	adds	r1, #1
 800d0ba:	105b      	asrs	r3, r3, #1
 800d0bc:	e7ef      	b.n	800d09e <__gethex+0x146>
 800d0be:	f100 0a14 	add.w	sl, r0, #20
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	495a      	ldr	r1, [pc, #360]	; (800d230 <__gethex+0x2d8>)
 800d0c6:	f8cd a004 	str.w	sl, [sp, #4]
 800d0ca:	469b      	mov	fp, r3
 800d0cc:	45a8      	cmp	r8, r5
 800d0ce:	d342      	bcc.n	800d156 <__gethex+0x1fe>
 800d0d0:	9801      	ldr	r0, [sp, #4]
 800d0d2:	f840 bb04 	str.w	fp, [r0], #4
 800d0d6:	eba0 000a 	sub.w	r0, r0, sl
 800d0da:	1080      	asrs	r0, r0, #2
 800d0dc:	6120      	str	r0, [r4, #16]
 800d0de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d0e2:	4658      	mov	r0, fp
 800d0e4:	f7fe fa52 	bl	800b58c <__hi0bits>
 800d0e8:	683d      	ldr	r5, [r7, #0]
 800d0ea:	eba8 0000 	sub.w	r0, r8, r0
 800d0ee:	42a8      	cmp	r0, r5
 800d0f0:	dd59      	ble.n	800d1a6 <__gethex+0x24e>
 800d0f2:	eba0 0805 	sub.w	r8, r0, r5
 800d0f6:	4641      	mov	r1, r8
 800d0f8:	4620      	mov	r0, r4
 800d0fa:	f7fe fdde 	bl	800bcba <__any_on>
 800d0fe:	4683      	mov	fp, r0
 800d100:	b1b8      	cbz	r0, 800d132 <__gethex+0x1da>
 800d102:	f108 33ff 	add.w	r3, r8, #4294967295
 800d106:	1159      	asrs	r1, r3, #5
 800d108:	f003 021f 	and.w	r2, r3, #31
 800d10c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d110:	f04f 0b01 	mov.w	fp, #1
 800d114:	fa0b f202 	lsl.w	r2, fp, r2
 800d118:	420a      	tst	r2, r1
 800d11a:	d00a      	beq.n	800d132 <__gethex+0x1da>
 800d11c:	455b      	cmp	r3, fp
 800d11e:	dd06      	ble.n	800d12e <__gethex+0x1d6>
 800d120:	f1a8 0102 	sub.w	r1, r8, #2
 800d124:	4620      	mov	r0, r4
 800d126:	f7fe fdc8 	bl	800bcba <__any_on>
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d138      	bne.n	800d1a0 <__gethex+0x248>
 800d12e:	f04f 0b02 	mov.w	fp, #2
 800d132:	4641      	mov	r1, r8
 800d134:	4620      	mov	r0, r4
 800d136:	f7ff fea7 	bl	800ce88 <rshift>
 800d13a:	4446      	add	r6, r8
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	42b3      	cmp	r3, r6
 800d140:	da41      	bge.n	800d1c6 <__gethex+0x26e>
 800d142:	4621      	mov	r1, r4
 800d144:	4648      	mov	r0, r9
 800d146:	f7fe f96f 	bl	800b428 <_Bfree>
 800d14a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d14c:	2300      	movs	r3, #0
 800d14e:	6013      	str	r3, [r2, #0]
 800d150:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d154:	e78a      	b.n	800d06c <__gethex+0x114>
 800d156:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d15a:	2a2e      	cmp	r2, #46	; 0x2e
 800d15c:	d014      	beq.n	800d188 <__gethex+0x230>
 800d15e:	2b20      	cmp	r3, #32
 800d160:	d106      	bne.n	800d170 <__gethex+0x218>
 800d162:	9b01      	ldr	r3, [sp, #4]
 800d164:	f843 bb04 	str.w	fp, [r3], #4
 800d168:	f04f 0b00 	mov.w	fp, #0
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	465b      	mov	r3, fp
 800d170:	7828      	ldrb	r0, [r5, #0]
 800d172:	9303      	str	r3, [sp, #12]
 800d174:	f7ff feda 	bl	800cf2c <__hexdig_fun>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	f000 000f 	and.w	r0, r0, #15
 800d17e:	4098      	lsls	r0, r3
 800d180:	ea4b 0b00 	orr.w	fp, fp, r0
 800d184:	3304      	adds	r3, #4
 800d186:	e7a1      	b.n	800d0cc <__gethex+0x174>
 800d188:	45a8      	cmp	r8, r5
 800d18a:	d8e8      	bhi.n	800d15e <__gethex+0x206>
 800d18c:	2201      	movs	r2, #1
 800d18e:	4628      	mov	r0, r5
 800d190:	9303      	str	r3, [sp, #12]
 800d192:	f7ff fe29 	bl	800cde8 <strncmp>
 800d196:	4926      	ldr	r1, [pc, #152]	; (800d230 <__gethex+0x2d8>)
 800d198:	9b03      	ldr	r3, [sp, #12]
 800d19a:	2800      	cmp	r0, #0
 800d19c:	d1df      	bne.n	800d15e <__gethex+0x206>
 800d19e:	e795      	b.n	800d0cc <__gethex+0x174>
 800d1a0:	f04f 0b03 	mov.w	fp, #3
 800d1a4:	e7c5      	b.n	800d132 <__gethex+0x1da>
 800d1a6:	da0b      	bge.n	800d1c0 <__gethex+0x268>
 800d1a8:	eba5 0800 	sub.w	r8, r5, r0
 800d1ac:	4621      	mov	r1, r4
 800d1ae:	4642      	mov	r2, r8
 800d1b0:	4648      	mov	r0, r9
 800d1b2:	f7fe fb53 	bl	800b85c <__lshift>
 800d1b6:	eba6 0608 	sub.w	r6, r6, r8
 800d1ba:	4604      	mov	r4, r0
 800d1bc:	f100 0a14 	add.w	sl, r0, #20
 800d1c0:	f04f 0b00 	mov.w	fp, #0
 800d1c4:	e7ba      	b.n	800d13c <__gethex+0x1e4>
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	42b3      	cmp	r3, r6
 800d1ca:	dd73      	ble.n	800d2b4 <__gethex+0x35c>
 800d1cc:	1b9e      	subs	r6, r3, r6
 800d1ce:	42b5      	cmp	r5, r6
 800d1d0:	dc34      	bgt.n	800d23c <__gethex+0x2e4>
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	d023      	beq.n	800d220 <__gethex+0x2c8>
 800d1d8:	2b03      	cmp	r3, #3
 800d1da:	d025      	beq.n	800d228 <__gethex+0x2d0>
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d115      	bne.n	800d20c <__gethex+0x2b4>
 800d1e0:	42b5      	cmp	r5, r6
 800d1e2:	d113      	bne.n	800d20c <__gethex+0x2b4>
 800d1e4:	2d01      	cmp	r5, #1
 800d1e6:	d10b      	bne.n	800d200 <__gethex+0x2a8>
 800d1e8:	9a02      	ldr	r2, [sp, #8]
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6013      	str	r3, [r2, #0]
 800d1ee:	2301      	movs	r3, #1
 800d1f0:	6123      	str	r3, [r4, #16]
 800d1f2:	f8ca 3000 	str.w	r3, [sl]
 800d1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d1fc:	601c      	str	r4, [r3, #0]
 800d1fe:	e735      	b.n	800d06c <__gethex+0x114>
 800d200:	1e69      	subs	r1, r5, #1
 800d202:	4620      	mov	r0, r4
 800d204:	f7fe fd59 	bl	800bcba <__any_on>
 800d208:	2800      	cmp	r0, #0
 800d20a:	d1ed      	bne.n	800d1e8 <__gethex+0x290>
 800d20c:	4621      	mov	r1, r4
 800d20e:	4648      	mov	r0, r9
 800d210:	f7fe f90a 	bl	800b428 <_Bfree>
 800d214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d216:	2300      	movs	r3, #0
 800d218:	6013      	str	r3, [r2, #0]
 800d21a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d21e:	e725      	b.n	800d06c <__gethex+0x114>
 800d220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d222:	2b00      	cmp	r3, #0
 800d224:	d1f2      	bne.n	800d20c <__gethex+0x2b4>
 800d226:	e7df      	b.n	800d1e8 <__gethex+0x290>
 800d228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d1dc      	bne.n	800d1e8 <__gethex+0x290>
 800d22e:	e7ed      	b.n	800d20c <__gethex+0x2b4>
 800d230:	0800f59c 	.word	0x0800f59c
 800d234:	0800f435 	.word	0x0800f435
 800d238:	0800f746 	.word	0x0800f746
 800d23c:	f106 38ff 	add.w	r8, r6, #4294967295
 800d240:	f1bb 0f00 	cmp.w	fp, #0
 800d244:	d133      	bne.n	800d2ae <__gethex+0x356>
 800d246:	f1b8 0f00 	cmp.w	r8, #0
 800d24a:	d004      	beq.n	800d256 <__gethex+0x2fe>
 800d24c:	4641      	mov	r1, r8
 800d24e:	4620      	mov	r0, r4
 800d250:	f7fe fd33 	bl	800bcba <__any_on>
 800d254:	4683      	mov	fp, r0
 800d256:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d25a:	2301      	movs	r3, #1
 800d25c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d260:	f008 081f 	and.w	r8, r8, #31
 800d264:	fa03 f308 	lsl.w	r3, r3, r8
 800d268:	4213      	tst	r3, r2
 800d26a:	4631      	mov	r1, r6
 800d26c:	4620      	mov	r0, r4
 800d26e:	bf18      	it	ne
 800d270:	f04b 0b02 	orrne.w	fp, fp, #2
 800d274:	1bad      	subs	r5, r5, r6
 800d276:	f7ff fe07 	bl	800ce88 <rshift>
 800d27a:	687e      	ldr	r6, [r7, #4]
 800d27c:	f04f 0802 	mov.w	r8, #2
 800d280:	f1bb 0f00 	cmp.w	fp, #0
 800d284:	d04a      	beq.n	800d31c <__gethex+0x3c4>
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	2b02      	cmp	r3, #2
 800d28a:	d016      	beq.n	800d2ba <__gethex+0x362>
 800d28c:	2b03      	cmp	r3, #3
 800d28e:	d018      	beq.n	800d2c2 <__gethex+0x36a>
 800d290:	2b01      	cmp	r3, #1
 800d292:	d109      	bne.n	800d2a8 <__gethex+0x350>
 800d294:	f01b 0f02 	tst.w	fp, #2
 800d298:	d006      	beq.n	800d2a8 <__gethex+0x350>
 800d29a:	f8da 3000 	ldr.w	r3, [sl]
 800d29e:	ea4b 0b03 	orr.w	fp, fp, r3
 800d2a2:	f01b 0f01 	tst.w	fp, #1
 800d2a6:	d10f      	bne.n	800d2c8 <__gethex+0x370>
 800d2a8:	f048 0810 	orr.w	r8, r8, #16
 800d2ac:	e036      	b.n	800d31c <__gethex+0x3c4>
 800d2ae:	f04f 0b01 	mov.w	fp, #1
 800d2b2:	e7d0      	b.n	800d256 <__gethex+0x2fe>
 800d2b4:	f04f 0801 	mov.w	r8, #1
 800d2b8:	e7e2      	b.n	800d280 <__gethex+0x328>
 800d2ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2bc:	f1c3 0301 	rsb	r3, r3, #1
 800d2c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d0ef      	beq.n	800d2a8 <__gethex+0x350>
 800d2c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d2cc:	f104 0214 	add.w	r2, r4, #20
 800d2d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d2d4:	9301      	str	r3, [sp, #4]
 800d2d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d2da:	2300      	movs	r3, #0
 800d2dc:	4694      	mov	ip, r2
 800d2de:	f852 1b04 	ldr.w	r1, [r2], #4
 800d2e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d2e6:	d01e      	beq.n	800d326 <__gethex+0x3ce>
 800d2e8:	3101      	adds	r1, #1
 800d2ea:	f8cc 1000 	str.w	r1, [ip]
 800d2ee:	f1b8 0f02 	cmp.w	r8, #2
 800d2f2:	f104 0214 	add.w	r2, r4, #20
 800d2f6:	d13d      	bne.n	800d374 <__gethex+0x41c>
 800d2f8:	683b      	ldr	r3, [r7, #0]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	42ab      	cmp	r3, r5
 800d2fe:	d10b      	bne.n	800d318 <__gethex+0x3c0>
 800d300:	1169      	asrs	r1, r5, #5
 800d302:	2301      	movs	r3, #1
 800d304:	f005 051f 	and.w	r5, r5, #31
 800d308:	fa03 f505 	lsl.w	r5, r3, r5
 800d30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d310:	421d      	tst	r5, r3
 800d312:	bf18      	it	ne
 800d314:	f04f 0801 	movne.w	r8, #1
 800d318:	f048 0820 	orr.w	r8, r8, #32
 800d31c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d31e:	601c      	str	r4, [r3, #0]
 800d320:	9b02      	ldr	r3, [sp, #8]
 800d322:	601e      	str	r6, [r3, #0]
 800d324:	e6a2      	b.n	800d06c <__gethex+0x114>
 800d326:	4290      	cmp	r0, r2
 800d328:	f842 3c04 	str.w	r3, [r2, #-4]
 800d32c:	d8d6      	bhi.n	800d2dc <__gethex+0x384>
 800d32e:	68a2      	ldr	r2, [r4, #8]
 800d330:	4593      	cmp	fp, r2
 800d332:	db17      	blt.n	800d364 <__gethex+0x40c>
 800d334:	6861      	ldr	r1, [r4, #4]
 800d336:	4648      	mov	r0, r9
 800d338:	3101      	adds	r1, #1
 800d33a:	f7fe f835 	bl	800b3a8 <_Balloc>
 800d33e:	4682      	mov	sl, r0
 800d340:	b918      	cbnz	r0, 800d34a <__gethex+0x3f2>
 800d342:	4b1b      	ldr	r3, [pc, #108]	; (800d3b0 <__gethex+0x458>)
 800d344:	4602      	mov	r2, r0
 800d346:	2184      	movs	r1, #132	; 0x84
 800d348:	e6b3      	b.n	800d0b2 <__gethex+0x15a>
 800d34a:	6922      	ldr	r2, [r4, #16]
 800d34c:	3202      	adds	r2, #2
 800d34e:	f104 010c 	add.w	r1, r4, #12
 800d352:	0092      	lsls	r2, r2, #2
 800d354:	300c      	adds	r0, #12
 800d356:	f7fd f9d1 	bl	800a6fc <memcpy>
 800d35a:	4621      	mov	r1, r4
 800d35c:	4648      	mov	r0, r9
 800d35e:	f7fe f863 	bl	800b428 <_Bfree>
 800d362:	4654      	mov	r4, sl
 800d364:	6922      	ldr	r2, [r4, #16]
 800d366:	1c51      	adds	r1, r2, #1
 800d368:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800d36c:	6121      	str	r1, [r4, #16]
 800d36e:	2101      	movs	r1, #1
 800d370:	6151      	str	r1, [r2, #20]
 800d372:	e7bc      	b.n	800d2ee <__gethex+0x396>
 800d374:	6921      	ldr	r1, [r4, #16]
 800d376:	4559      	cmp	r1, fp
 800d378:	dd0b      	ble.n	800d392 <__gethex+0x43a>
 800d37a:	2101      	movs	r1, #1
 800d37c:	4620      	mov	r0, r4
 800d37e:	f7ff fd83 	bl	800ce88 <rshift>
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	3601      	adds	r6, #1
 800d386:	42b3      	cmp	r3, r6
 800d388:	f6ff aedb 	blt.w	800d142 <__gethex+0x1ea>
 800d38c:	f04f 0801 	mov.w	r8, #1
 800d390:	e7c2      	b.n	800d318 <__gethex+0x3c0>
 800d392:	f015 051f 	ands.w	r5, r5, #31
 800d396:	d0f9      	beq.n	800d38c <__gethex+0x434>
 800d398:	9b01      	ldr	r3, [sp, #4]
 800d39a:	441a      	add	r2, r3
 800d39c:	f1c5 0520 	rsb	r5, r5, #32
 800d3a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d3a4:	f7fe f8f2 	bl	800b58c <__hi0bits>
 800d3a8:	42a8      	cmp	r0, r5
 800d3aa:	dbe6      	blt.n	800d37a <__gethex+0x422>
 800d3ac:	e7ee      	b.n	800d38c <__gethex+0x434>
 800d3ae:	bf00      	nop
 800d3b0:	0800f435 	.word	0x0800f435

0800d3b4 <L_shift>:
 800d3b4:	f1c2 0208 	rsb	r2, r2, #8
 800d3b8:	0092      	lsls	r2, r2, #2
 800d3ba:	b570      	push	{r4, r5, r6, lr}
 800d3bc:	f1c2 0620 	rsb	r6, r2, #32
 800d3c0:	6843      	ldr	r3, [r0, #4]
 800d3c2:	6804      	ldr	r4, [r0, #0]
 800d3c4:	fa03 f506 	lsl.w	r5, r3, r6
 800d3c8:	432c      	orrs	r4, r5
 800d3ca:	40d3      	lsrs	r3, r2
 800d3cc:	6004      	str	r4, [r0, #0]
 800d3ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800d3d2:	4288      	cmp	r0, r1
 800d3d4:	d3f4      	bcc.n	800d3c0 <L_shift+0xc>
 800d3d6:	bd70      	pop	{r4, r5, r6, pc}

0800d3d8 <__match>:
 800d3d8:	b530      	push	{r4, r5, lr}
 800d3da:	6803      	ldr	r3, [r0, #0]
 800d3dc:	3301      	adds	r3, #1
 800d3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3e2:	b914      	cbnz	r4, 800d3ea <__match+0x12>
 800d3e4:	6003      	str	r3, [r0, #0]
 800d3e6:	2001      	movs	r0, #1
 800d3e8:	bd30      	pop	{r4, r5, pc}
 800d3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d3ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d3f2:	2d19      	cmp	r5, #25
 800d3f4:	bf98      	it	ls
 800d3f6:	3220      	addls	r2, #32
 800d3f8:	42a2      	cmp	r2, r4
 800d3fa:	d0f0      	beq.n	800d3de <__match+0x6>
 800d3fc:	2000      	movs	r0, #0
 800d3fe:	e7f3      	b.n	800d3e8 <__match+0x10>

0800d400 <__hexnan>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	680b      	ldr	r3, [r1, #0]
 800d406:	6801      	ldr	r1, [r0, #0]
 800d408:	115e      	asrs	r6, r3, #5
 800d40a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d40e:	f013 031f 	ands.w	r3, r3, #31
 800d412:	b087      	sub	sp, #28
 800d414:	bf18      	it	ne
 800d416:	3604      	addne	r6, #4
 800d418:	2500      	movs	r5, #0
 800d41a:	1f37      	subs	r7, r6, #4
 800d41c:	4682      	mov	sl, r0
 800d41e:	4690      	mov	r8, r2
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	f846 5c04 	str.w	r5, [r6, #-4]
 800d426:	46b9      	mov	r9, r7
 800d428:	463c      	mov	r4, r7
 800d42a:	9502      	str	r5, [sp, #8]
 800d42c:	46ab      	mov	fp, r5
 800d42e:	784a      	ldrb	r2, [r1, #1]
 800d430:	1c4b      	adds	r3, r1, #1
 800d432:	9303      	str	r3, [sp, #12]
 800d434:	b342      	cbz	r2, 800d488 <__hexnan+0x88>
 800d436:	4610      	mov	r0, r2
 800d438:	9105      	str	r1, [sp, #20]
 800d43a:	9204      	str	r2, [sp, #16]
 800d43c:	f7ff fd76 	bl	800cf2c <__hexdig_fun>
 800d440:	2800      	cmp	r0, #0
 800d442:	d14f      	bne.n	800d4e4 <__hexnan+0xe4>
 800d444:	9a04      	ldr	r2, [sp, #16]
 800d446:	9905      	ldr	r1, [sp, #20]
 800d448:	2a20      	cmp	r2, #32
 800d44a:	d818      	bhi.n	800d47e <__hexnan+0x7e>
 800d44c:	9b02      	ldr	r3, [sp, #8]
 800d44e:	459b      	cmp	fp, r3
 800d450:	dd13      	ble.n	800d47a <__hexnan+0x7a>
 800d452:	454c      	cmp	r4, r9
 800d454:	d206      	bcs.n	800d464 <__hexnan+0x64>
 800d456:	2d07      	cmp	r5, #7
 800d458:	dc04      	bgt.n	800d464 <__hexnan+0x64>
 800d45a:	462a      	mov	r2, r5
 800d45c:	4649      	mov	r1, r9
 800d45e:	4620      	mov	r0, r4
 800d460:	f7ff ffa8 	bl	800d3b4 <L_shift>
 800d464:	4544      	cmp	r4, r8
 800d466:	d950      	bls.n	800d50a <__hexnan+0x10a>
 800d468:	2300      	movs	r3, #0
 800d46a:	f1a4 0904 	sub.w	r9, r4, #4
 800d46e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d472:	f8cd b008 	str.w	fp, [sp, #8]
 800d476:	464c      	mov	r4, r9
 800d478:	461d      	mov	r5, r3
 800d47a:	9903      	ldr	r1, [sp, #12]
 800d47c:	e7d7      	b.n	800d42e <__hexnan+0x2e>
 800d47e:	2a29      	cmp	r2, #41	; 0x29
 800d480:	d155      	bne.n	800d52e <__hexnan+0x12e>
 800d482:	3102      	adds	r1, #2
 800d484:	f8ca 1000 	str.w	r1, [sl]
 800d488:	f1bb 0f00 	cmp.w	fp, #0
 800d48c:	d04f      	beq.n	800d52e <__hexnan+0x12e>
 800d48e:	454c      	cmp	r4, r9
 800d490:	d206      	bcs.n	800d4a0 <__hexnan+0xa0>
 800d492:	2d07      	cmp	r5, #7
 800d494:	dc04      	bgt.n	800d4a0 <__hexnan+0xa0>
 800d496:	462a      	mov	r2, r5
 800d498:	4649      	mov	r1, r9
 800d49a:	4620      	mov	r0, r4
 800d49c:	f7ff ff8a 	bl	800d3b4 <L_shift>
 800d4a0:	4544      	cmp	r4, r8
 800d4a2:	d934      	bls.n	800d50e <__hexnan+0x10e>
 800d4a4:	f1a8 0204 	sub.w	r2, r8, #4
 800d4a8:	4623      	mov	r3, r4
 800d4aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d4ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800d4b2:	429f      	cmp	r7, r3
 800d4b4:	d2f9      	bcs.n	800d4aa <__hexnan+0xaa>
 800d4b6:	1b3b      	subs	r3, r7, r4
 800d4b8:	f023 0303 	bic.w	r3, r3, #3
 800d4bc:	3304      	adds	r3, #4
 800d4be:	3e03      	subs	r6, #3
 800d4c0:	3401      	adds	r4, #1
 800d4c2:	42a6      	cmp	r6, r4
 800d4c4:	bf38      	it	cc
 800d4c6:	2304      	movcc	r3, #4
 800d4c8:	4443      	add	r3, r8
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f843 2b04 	str.w	r2, [r3], #4
 800d4d0:	429f      	cmp	r7, r3
 800d4d2:	d2fb      	bcs.n	800d4cc <__hexnan+0xcc>
 800d4d4:	683b      	ldr	r3, [r7, #0]
 800d4d6:	b91b      	cbnz	r3, 800d4e0 <__hexnan+0xe0>
 800d4d8:	4547      	cmp	r7, r8
 800d4da:	d126      	bne.n	800d52a <__hexnan+0x12a>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	603b      	str	r3, [r7, #0]
 800d4e0:	2005      	movs	r0, #5
 800d4e2:	e025      	b.n	800d530 <__hexnan+0x130>
 800d4e4:	3501      	adds	r5, #1
 800d4e6:	2d08      	cmp	r5, #8
 800d4e8:	f10b 0b01 	add.w	fp, fp, #1
 800d4ec:	dd06      	ble.n	800d4fc <__hexnan+0xfc>
 800d4ee:	4544      	cmp	r4, r8
 800d4f0:	d9c3      	bls.n	800d47a <__hexnan+0x7a>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d4f8:	2501      	movs	r5, #1
 800d4fa:	3c04      	subs	r4, #4
 800d4fc:	6822      	ldr	r2, [r4, #0]
 800d4fe:	f000 000f 	and.w	r0, r0, #15
 800d502:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d506:	6020      	str	r0, [r4, #0]
 800d508:	e7b7      	b.n	800d47a <__hexnan+0x7a>
 800d50a:	2508      	movs	r5, #8
 800d50c:	e7b5      	b.n	800d47a <__hexnan+0x7a>
 800d50e:	9b01      	ldr	r3, [sp, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d0df      	beq.n	800d4d4 <__hexnan+0xd4>
 800d514:	f1c3 0320 	rsb	r3, r3, #32
 800d518:	f04f 32ff 	mov.w	r2, #4294967295
 800d51c:	40da      	lsrs	r2, r3
 800d51e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d522:	4013      	ands	r3, r2
 800d524:	f846 3c04 	str.w	r3, [r6, #-4]
 800d528:	e7d4      	b.n	800d4d4 <__hexnan+0xd4>
 800d52a:	3f04      	subs	r7, #4
 800d52c:	e7d2      	b.n	800d4d4 <__hexnan+0xd4>
 800d52e:	2004      	movs	r0, #4
 800d530:	b007      	add	sp, #28
 800d532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d536 <__ascii_mbtowc>:
 800d536:	b082      	sub	sp, #8
 800d538:	b901      	cbnz	r1, 800d53c <__ascii_mbtowc+0x6>
 800d53a:	a901      	add	r1, sp, #4
 800d53c:	b142      	cbz	r2, 800d550 <__ascii_mbtowc+0x1a>
 800d53e:	b14b      	cbz	r3, 800d554 <__ascii_mbtowc+0x1e>
 800d540:	7813      	ldrb	r3, [r2, #0]
 800d542:	600b      	str	r3, [r1, #0]
 800d544:	7812      	ldrb	r2, [r2, #0]
 800d546:	1e10      	subs	r0, r2, #0
 800d548:	bf18      	it	ne
 800d54a:	2001      	movne	r0, #1
 800d54c:	b002      	add	sp, #8
 800d54e:	4770      	bx	lr
 800d550:	4610      	mov	r0, r2
 800d552:	e7fb      	b.n	800d54c <__ascii_mbtowc+0x16>
 800d554:	f06f 0001 	mvn.w	r0, #1
 800d558:	e7f8      	b.n	800d54c <__ascii_mbtowc+0x16>

0800d55a <_realloc_r>:
 800d55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55e:	4680      	mov	r8, r0
 800d560:	4614      	mov	r4, r2
 800d562:	460e      	mov	r6, r1
 800d564:	b921      	cbnz	r1, 800d570 <_realloc_r+0x16>
 800d566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d56a:	4611      	mov	r1, r2
 800d56c:	f7fc b838 	b.w	80095e0 <_malloc_r>
 800d570:	b92a      	cbnz	r2, 800d57e <_realloc_r+0x24>
 800d572:	f7fd fecd 	bl	800b310 <_free_r>
 800d576:	4625      	mov	r5, r4
 800d578:	4628      	mov	r0, r5
 800d57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d57e:	f000 f842 	bl	800d606 <_malloc_usable_size_r>
 800d582:	4284      	cmp	r4, r0
 800d584:	4607      	mov	r7, r0
 800d586:	d802      	bhi.n	800d58e <_realloc_r+0x34>
 800d588:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d58c:	d812      	bhi.n	800d5b4 <_realloc_r+0x5a>
 800d58e:	4621      	mov	r1, r4
 800d590:	4640      	mov	r0, r8
 800d592:	f7fc f825 	bl	80095e0 <_malloc_r>
 800d596:	4605      	mov	r5, r0
 800d598:	2800      	cmp	r0, #0
 800d59a:	d0ed      	beq.n	800d578 <_realloc_r+0x1e>
 800d59c:	42bc      	cmp	r4, r7
 800d59e:	4622      	mov	r2, r4
 800d5a0:	4631      	mov	r1, r6
 800d5a2:	bf28      	it	cs
 800d5a4:	463a      	movcs	r2, r7
 800d5a6:	f7fd f8a9 	bl	800a6fc <memcpy>
 800d5aa:	4631      	mov	r1, r6
 800d5ac:	4640      	mov	r0, r8
 800d5ae:	f7fd feaf 	bl	800b310 <_free_r>
 800d5b2:	e7e1      	b.n	800d578 <_realloc_r+0x1e>
 800d5b4:	4635      	mov	r5, r6
 800d5b6:	e7df      	b.n	800d578 <_realloc_r+0x1e>

0800d5b8 <__ascii_wctomb>:
 800d5b8:	b149      	cbz	r1, 800d5ce <__ascii_wctomb+0x16>
 800d5ba:	2aff      	cmp	r2, #255	; 0xff
 800d5bc:	bf85      	ittet	hi
 800d5be:	238a      	movhi	r3, #138	; 0x8a
 800d5c0:	6003      	strhi	r3, [r0, #0]
 800d5c2:	700a      	strbls	r2, [r1, #0]
 800d5c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800d5c8:	bf98      	it	ls
 800d5ca:	2001      	movls	r0, #1
 800d5cc:	4770      	bx	lr
 800d5ce:	4608      	mov	r0, r1
 800d5d0:	4770      	bx	lr
	...

0800d5d4 <fiprintf>:
 800d5d4:	b40e      	push	{r1, r2, r3}
 800d5d6:	b503      	push	{r0, r1, lr}
 800d5d8:	4601      	mov	r1, r0
 800d5da:	ab03      	add	r3, sp, #12
 800d5dc:	4805      	ldr	r0, [pc, #20]	; (800d5f4 <fiprintf+0x20>)
 800d5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800d5e2:	6800      	ldr	r0, [r0, #0]
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	f000 f83f 	bl	800d668 <_vfiprintf_r>
 800d5ea:	b002      	add	sp, #8
 800d5ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5f0:	b003      	add	sp, #12
 800d5f2:	4770      	bx	lr
 800d5f4:	20000614 	.word	0x20000614

0800d5f8 <abort>:
 800d5f8:	b508      	push	{r3, lr}
 800d5fa:	2006      	movs	r0, #6
 800d5fc:	f000 fa0c 	bl	800da18 <raise>
 800d600:	2001      	movs	r0, #1
 800d602:	f7f4 f80f 	bl	8001624 <_exit>

0800d606 <_malloc_usable_size_r>:
 800d606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d60a:	1f18      	subs	r0, r3, #4
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	bfbc      	itt	lt
 800d610:	580b      	ldrlt	r3, [r1, r0]
 800d612:	18c0      	addlt	r0, r0, r3
 800d614:	4770      	bx	lr

0800d616 <__sfputc_r>:
 800d616:	6893      	ldr	r3, [r2, #8]
 800d618:	3b01      	subs	r3, #1
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	b410      	push	{r4}
 800d61e:	6093      	str	r3, [r2, #8]
 800d620:	da08      	bge.n	800d634 <__sfputc_r+0x1e>
 800d622:	6994      	ldr	r4, [r2, #24]
 800d624:	42a3      	cmp	r3, r4
 800d626:	db01      	blt.n	800d62c <__sfputc_r+0x16>
 800d628:	290a      	cmp	r1, #10
 800d62a:	d103      	bne.n	800d634 <__sfputc_r+0x1e>
 800d62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d630:	f000 b934 	b.w	800d89c <__swbuf_r>
 800d634:	6813      	ldr	r3, [r2, #0]
 800d636:	1c58      	adds	r0, r3, #1
 800d638:	6010      	str	r0, [r2, #0]
 800d63a:	7019      	strb	r1, [r3, #0]
 800d63c:	4608      	mov	r0, r1
 800d63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <__sfputs_r>:
 800d644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d646:	4606      	mov	r6, r0
 800d648:	460f      	mov	r7, r1
 800d64a:	4614      	mov	r4, r2
 800d64c:	18d5      	adds	r5, r2, r3
 800d64e:	42ac      	cmp	r4, r5
 800d650:	d101      	bne.n	800d656 <__sfputs_r+0x12>
 800d652:	2000      	movs	r0, #0
 800d654:	e007      	b.n	800d666 <__sfputs_r+0x22>
 800d656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d65a:	463a      	mov	r2, r7
 800d65c:	4630      	mov	r0, r6
 800d65e:	f7ff ffda 	bl	800d616 <__sfputc_r>
 800d662:	1c43      	adds	r3, r0, #1
 800d664:	d1f3      	bne.n	800d64e <__sfputs_r+0xa>
 800d666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d668 <_vfiprintf_r>:
 800d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66c:	460d      	mov	r5, r1
 800d66e:	b09d      	sub	sp, #116	; 0x74
 800d670:	4614      	mov	r4, r2
 800d672:	4698      	mov	r8, r3
 800d674:	4606      	mov	r6, r0
 800d676:	b118      	cbz	r0, 800d680 <_vfiprintf_r+0x18>
 800d678:	6a03      	ldr	r3, [r0, #32]
 800d67a:	b90b      	cbnz	r3, 800d680 <_vfiprintf_r+0x18>
 800d67c:	f7fc ff06 	bl	800a48c <__sinit>
 800d680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d682:	07d9      	lsls	r1, r3, #31
 800d684:	d405      	bmi.n	800d692 <_vfiprintf_r+0x2a>
 800d686:	89ab      	ldrh	r3, [r5, #12]
 800d688:	059a      	lsls	r2, r3, #22
 800d68a:	d402      	bmi.n	800d692 <_vfiprintf_r+0x2a>
 800d68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d68e:	f7f4 fae2 	bl	8001c56 <__retarget_lock_acquire_recursive>
 800d692:	89ab      	ldrh	r3, [r5, #12]
 800d694:	071b      	lsls	r3, r3, #28
 800d696:	d501      	bpl.n	800d69c <_vfiprintf_r+0x34>
 800d698:	692b      	ldr	r3, [r5, #16]
 800d69a:	b99b      	cbnz	r3, 800d6c4 <_vfiprintf_r+0x5c>
 800d69c:	4629      	mov	r1, r5
 800d69e:	4630      	mov	r0, r6
 800d6a0:	f000 f93a 	bl	800d918 <__swsetup_r>
 800d6a4:	b170      	cbz	r0, 800d6c4 <_vfiprintf_r+0x5c>
 800d6a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d6a8:	07dc      	lsls	r4, r3, #31
 800d6aa:	d504      	bpl.n	800d6b6 <_vfiprintf_r+0x4e>
 800d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d6b0:	b01d      	add	sp, #116	; 0x74
 800d6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6b6:	89ab      	ldrh	r3, [r5, #12]
 800d6b8:	0598      	lsls	r0, r3, #22
 800d6ba:	d4f7      	bmi.n	800d6ac <_vfiprintf_r+0x44>
 800d6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d6be:	f7f4 fade 	bl	8001c7e <__retarget_lock_release_recursive>
 800d6c2:	e7f3      	b.n	800d6ac <_vfiprintf_r+0x44>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800d6c8:	2320      	movs	r3, #32
 800d6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6d2:	2330      	movs	r3, #48	; 0x30
 800d6d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d888 <_vfiprintf_r+0x220>
 800d6d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6dc:	f04f 0901 	mov.w	r9, #1
 800d6e0:	4623      	mov	r3, r4
 800d6e2:	469a      	mov	sl, r3
 800d6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6e8:	b10a      	cbz	r2, 800d6ee <_vfiprintf_r+0x86>
 800d6ea:	2a25      	cmp	r2, #37	; 0x25
 800d6ec:	d1f9      	bne.n	800d6e2 <_vfiprintf_r+0x7a>
 800d6ee:	ebba 0b04 	subs.w	fp, sl, r4
 800d6f2:	d00b      	beq.n	800d70c <_vfiprintf_r+0xa4>
 800d6f4:	465b      	mov	r3, fp
 800d6f6:	4622      	mov	r2, r4
 800d6f8:	4629      	mov	r1, r5
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f7ff ffa2 	bl	800d644 <__sfputs_r>
 800d700:	3001      	adds	r0, #1
 800d702:	f000 80a9 	beq.w	800d858 <_vfiprintf_r+0x1f0>
 800d706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d708:	445a      	add	r2, fp
 800d70a:	9209      	str	r2, [sp, #36]	; 0x24
 800d70c:	f89a 3000 	ldrb.w	r3, [sl]
 800d710:	2b00      	cmp	r3, #0
 800d712:	f000 80a1 	beq.w	800d858 <_vfiprintf_r+0x1f0>
 800d716:	2300      	movs	r3, #0
 800d718:	f04f 32ff 	mov.w	r2, #4294967295
 800d71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d720:	f10a 0a01 	add.w	sl, sl, #1
 800d724:	9304      	str	r3, [sp, #16]
 800d726:	9307      	str	r3, [sp, #28]
 800d728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d72c:	931a      	str	r3, [sp, #104]	; 0x68
 800d72e:	4654      	mov	r4, sl
 800d730:	2205      	movs	r2, #5
 800d732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d736:	4854      	ldr	r0, [pc, #336]	; (800d888 <_vfiprintf_r+0x220>)
 800d738:	f7f2 fd82 	bl	8000240 <memchr>
 800d73c:	9a04      	ldr	r2, [sp, #16]
 800d73e:	b9d8      	cbnz	r0, 800d778 <_vfiprintf_r+0x110>
 800d740:	06d1      	lsls	r1, r2, #27
 800d742:	bf44      	itt	mi
 800d744:	2320      	movmi	r3, #32
 800d746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d74a:	0713      	lsls	r3, r2, #28
 800d74c:	bf44      	itt	mi
 800d74e:	232b      	movmi	r3, #43	; 0x2b
 800d750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d754:	f89a 3000 	ldrb.w	r3, [sl]
 800d758:	2b2a      	cmp	r3, #42	; 0x2a
 800d75a:	d015      	beq.n	800d788 <_vfiprintf_r+0x120>
 800d75c:	9a07      	ldr	r2, [sp, #28]
 800d75e:	4654      	mov	r4, sl
 800d760:	2000      	movs	r0, #0
 800d762:	f04f 0c0a 	mov.w	ip, #10
 800d766:	4621      	mov	r1, r4
 800d768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d76c:	3b30      	subs	r3, #48	; 0x30
 800d76e:	2b09      	cmp	r3, #9
 800d770:	d94d      	bls.n	800d80e <_vfiprintf_r+0x1a6>
 800d772:	b1b0      	cbz	r0, 800d7a2 <_vfiprintf_r+0x13a>
 800d774:	9207      	str	r2, [sp, #28]
 800d776:	e014      	b.n	800d7a2 <_vfiprintf_r+0x13a>
 800d778:	eba0 0308 	sub.w	r3, r0, r8
 800d77c:	fa09 f303 	lsl.w	r3, r9, r3
 800d780:	4313      	orrs	r3, r2
 800d782:	9304      	str	r3, [sp, #16]
 800d784:	46a2      	mov	sl, r4
 800d786:	e7d2      	b.n	800d72e <_vfiprintf_r+0xc6>
 800d788:	9b03      	ldr	r3, [sp, #12]
 800d78a:	1d19      	adds	r1, r3, #4
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	9103      	str	r1, [sp, #12]
 800d790:	2b00      	cmp	r3, #0
 800d792:	bfbb      	ittet	lt
 800d794:	425b      	neglt	r3, r3
 800d796:	f042 0202 	orrlt.w	r2, r2, #2
 800d79a:	9307      	strge	r3, [sp, #28]
 800d79c:	9307      	strlt	r3, [sp, #28]
 800d79e:	bfb8      	it	lt
 800d7a0:	9204      	strlt	r2, [sp, #16]
 800d7a2:	7823      	ldrb	r3, [r4, #0]
 800d7a4:	2b2e      	cmp	r3, #46	; 0x2e
 800d7a6:	d10c      	bne.n	800d7c2 <_vfiprintf_r+0x15a>
 800d7a8:	7863      	ldrb	r3, [r4, #1]
 800d7aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ac:	d134      	bne.n	800d818 <_vfiprintf_r+0x1b0>
 800d7ae:	9b03      	ldr	r3, [sp, #12]
 800d7b0:	1d1a      	adds	r2, r3, #4
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	9203      	str	r2, [sp, #12]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	bfb8      	it	lt
 800d7ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800d7be:	3402      	adds	r4, #2
 800d7c0:	9305      	str	r3, [sp, #20]
 800d7c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d898 <_vfiprintf_r+0x230>
 800d7c6:	7821      	ldrb	r1, [r4, #0]
 800d7c8:	2203      	movs	r2, #3
 800d7ca:	4650      	mov	r0, sl
 800d7cc:	f7f2 fd38 	bl	8000240 <memchr>
 800d7d0:	b138      	cbz	r0, 800d7e2 <_vfiprintf_r+0x17a>
 800d7d2:	9b04      	ldr	r3, [sp, #16]
 800d7d4:	eba0 000a 	sub.w	r0, r0, sl
 800d7d8:	2240      	movs	r2, #64	; 0x40
 800d7da:	4082      	lsls	r2, r0
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	3401      	adds	r4, #1
 800d7e0:	9304      	str	r3, [sp, #16]
 800d7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7e6:	4829      	ldr	r0, [pc, #164]	; (800d88c <_vfiprintf_r+0x224>)
 800d7e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7ec:	2206      	movs	r2, #6
 800d7ee:	f7f2 fd27 	bl	8000240 <memchr>
 800d7f2:	2800      	cmp	r0, #0
 800d7f4:	d03f      	beq.n	800d876 <_vfiprintf_r+0x20e>
 800d7f6:	4b26      	ldr	r3, [pc, #152]	; (800d890 <_vfiprintf_r+0x228>)
 800d7f8:	bb1b      	cbnz	r3, 800d842 <_vfiprintf_r+0x1da>
 800d7fa:	9b03      	ldr	r3, [sp, #12]
 800d7fc:	3307      	adds	r3, #7
 800d7fe:	f023 0307 	bic.w	r3, r3, #7
 800d802:	3308      	adds	r3, #8
 800d804:	9303      	str	r3, [sp, #12]
 800d806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d808:	443b      	add	r3, r7
 800d80a:	9309      	str	r3, [sp, #36]	; 0x24
 800d80c:	e768      	b.n	800d6e0 <_vfiprintf_r+0x78>
 800d80e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d812:	460c      	mov	r4, r1
 800d814:	2001      	movs	r0, #1
 800d816:	e7a6      	b.n	800d766 <_vfiprintf_r+0xfe>
 800d818:	2300      	movs	r3, #0
 800d81a:	3401      	adds	r4, #1
 800d81c:	9305      	str	r3, [sp, #20]
 800d81e:	4619      	mov	r1, r3
 800d820:	f04f 0c0a 	mov.w	ip, #10
 800d824:	4620      	mov	r0, r4
 800d826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d82a:	3a30      	subs	r2, #48	; 0x30
 800d82c:	2a09      	cmp	r2, #9
 800d82e:	d903      	bls.n	800d838 <_vfiprintf_r+0x1d0>
 800d830:	2b00      	cmp	r3, #0
 800d832:	d0c6      	beq.n	800d7c2 <_vfiprintf_r+0x15a>
 800d834:	9105      	str	r1, [sp, #20]
 800d836:	e7c4      	b.n	800d7c2 <_vfiprintf_r+0x15a>
 800d838:	fb0c 2101 	mla	r1, ip, r1, r2
 800d83c:	4604      	mov	r4, r0
 800d83e:	2301      	movs	r3, #1
 800d840:	e7f0      	b.n	800d824 <_vfiprintf_r+0x1bc>
 800d842:	ab03      	add	r3, sp, #12
 800d844:	9300      	str	r3, [sp, #0]
 800d846:	462a      	mov	r2, r5
 800d848:	4b12      	ldr	r3, [pc, #72]	; (800d894 <_vfiprintf_r+0x22c>)
 800d84a:	a904      	add	r1, sp, #16
 800d84c:	4630      	mov	r0, r6
 800d84e:	f7fb ffe3 	bl	8009818 <_printf_float>
 800d852:	4607      	mov	r7, r0
 800d854:	1c78      	adds	r0, r7, #1
 800d856:	d1d6      	bne.n	800d806 <_vfiprintf_r+0x19e>
 800d858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d85a:	07d9      	lsls	r1, r3, #31
 800d85c:	d405      	bmi.n	800d86a <_vfiprintf_r+0x202>
 800d85e:	89ab      	ldrh	r3, [r5, #12]
 800d860:	059a      	lsls	r2, r3, #22
 800d862:	d402      	bmi.n	800d86a <_vfiprintf_r+0x202>
 800d864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d866:	f7f4 fa0a 	bl	8001c7e <__retarget_lock_release_recursive>
 800d86a:	89ab      	ldrh	r3, [r5, #12]
 800d86c:	065b      	lsls	r3, r3, #25
 800d86e:	f53f af1d 	bmi.w	800d6ac <_vfiprintf_r+0x44>
 800d872:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d874:	e71c      	b.n	800d6b0 <_vfiprintf_r+0x48>
 800d876:	ab03      	add	r3, sp, #12
 800d878:	9300      	str	r3, [sp, #0]
 800d87a:	462a      	mov	r2, r5
 800d87c:	4b05      	ldr	r3, [pc, #20]	; (800d894 <_vfiprintf_r+0x22c>)
 800d87e:	a904      	add	r1, sp, #16
 800d880:	4630      	mov	r0, r6
 800d882:	f7fc fa51 	bl	8009d28 <_printf_i>
 800d886:	e7e4      	b.n	800d852 <_vfiprintf_r+0x1ea>
 800d888:	0800f6f1 	.word	0x0800f6f1
 800d88c:	0800f6fb 	.word	0x0800f6fb
 800d890:	08009819 	.word	0x08009819
 800d894:	0800d645 	.word	0x0800d645
 800d898:	0800f6f7 	.word	0x0800f6f7

0800d89c <__swbuf_r>:
 800d89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d89e:	460e      	mov	r6, r1
 800d8a0:	4614      	mov	r4, r2
 800d8a2:	4605      	mov	r5, r0
 800d8a4:	b118      	cbz	r0, 800d8ae <__swbuf_r+0x12>
 800d8a6:	6a03      	ldr	r3, [r0, #32]
 800d8a8:	b90b      	cbnz	r3, 800d8ae <__swbuf_r+0x12>
 800d8aa:	f7fc fdef 	bl	800a48c <__sinit>
 800d8ae:	69a3      	ldr	r3, [r4, #24]
 800d8b0:	60a3      	str	r3, [r4, #8]
 800d8b2:	89a3      	ldrh	r3, [r4, #12]
 800d8b4:	071a      	lsls	r2, r3, #28
 800d8b6:	d525      	bpl.n	800d904 <__swbuf_r+0x68>
 800d8b8:	6923      	ldr	r3, [r4, #16]
 800d8ba:	b31b      	cbz	r3, 800d904 <__swbuf_r+0x68>
 800d8bc:	6823      	ldr	r3, [r4, #0]
 800d8be:	6922      	ldr	r2, [r4, #16]
 800d8c0:	1a98      	subs	r0, r3, r2
 800d8c2:	6963      	ldr	r3, [r4, #20]
 800d8c4:	b2f6      	uxtb	r6, r6
 800d8c6:	4283      	cmp	r3, r0
 800d8c8:	4637      	mov	r7, r6
 800d8ca:	dc04      	bgt.n	800d8d6 <__swbuf_r+0x3a>
 800d8cc:	4621      	mov	r1, r4
 800d8ce:	4628      	mov	r0, r5
 800d8d0:	f7ff fa48 	bl	800cd64 <_fflush_r>
 800d8d4:	b9e0      	cbnz	r0, 800d910 <__swbuf_r+0x74>
 800d8d6:	68a3      	ldr	r3, [r4, #8]
 800d8d8:	3b01      	subs	r3, #1
 800d8da:	60a3      	str	r3, [r4, #8]
 800d8dc:	6823      	ldr	r3, [r4, #0]
 800d8de:	1c5a      	adds	r2, r3, #1
 800d8e0:	6022      	str	r2, [r4, #0]
 800d8e2:	701e      	strb	r6, [r3, #0]
 800d8e4:	6962      	ldr	r2, [r4, #20]
 800d8e6:	1c43      	adds	r3, r0, #1
 800d8e8:	429a      	cmp	r2, r3
 800d8ea:	d004      	beq.n	800d8f6 <__swbuf_r+0x5a>
 800d8ec:	89a3      	ldrh	r3, [r4, #12]
 800d8ee:	07db      	lsls	r3, r3, #31
 800d8f0:	d506      	bpl.n	800d900 <__swbuf_r+0x64>
 800d8f2:	2e0a      	cmp	r6, #10
 800d8f4:	d104      	bne.n	800d900 <__swbuf_r+0x64>
 800d8f6:	4621      	mov	r1, r4
 800d8f8:	4628      	mov	r0, r5
 800d8fa:	f7ff fa33 	bl	800cd64 <_fflush_r>
 800d8fe:	b938      	cbnz	r0, 800d910 <__swbuf_r+0x74>
 800d900:	4638      	mov	r0, r7
 800d902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d904:	4621      	mov	r1, r4
 800d906:	4628      	mov	r0, r5
 800d908:	f000 f806 	bl	800d918 <__swsetup_r>
 800d90c:	2800      	cmp	r0, #0
 800d90e:	d0d5      	beq.n	800d8bc <__swbuf_r+0x20>
 800d910:	f04f 37ff 	mov.w	r7, #4294967295
 800d914:	e7f4      	b.n	800d900 <__swbuf_r+0x64>
	...

0800d918 <__swsetup_r>:
 800d918:	b538      	push	{r3, r4, r5, lr}
 800d91a:	4b2a      	ldr	r3, [pc, #168]	; (800d9c4 <__swsetup_r+0xac>)
 800d91c:	4605      	mov	r5, r0
 800d91e:	6818      	ldr	r0, [r3, #0]
 800d920:	460c      	mov	r4, r1
 800d922:	b118      	cbz	r0, 800d92c <__swsetup_r+0x14>
 800d924:	6a03      	ldr	r3, [r0, #32]
 800d926:	b90b      	cbnz	r3, 800d92c <__swsetup_r+0x14>
 800d928:	f7fc fdb0 	bl	800a48c <__sinit>
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d932:	0718      	lsls	r0, r3, #28
 800d934:	d422      	bmi.n	800d97c <__swsetup_r+0x64>
 800d936:	06d9      	lsls	r1, r3, #27
 800d938:	d407      	bmi.n	800d94a <__swsetup_r+0x32>
 800d93a:	2309      	movs	r3, #9
 800d93c:	602b      	str	r3, [r5, #0]
 800d93e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d942:	81a3      	strh	r3, [r4, #12]
 800d944:	f04f 30ff 	mov.w	r0, #4294967295
 800d948:	e034      	b.n	800d9b4 <__swsetup_r+0x9c>
 800d94a:	0758      	lsls	r0, r3, #29
 800d94c:	d512      	bpl.n	800d974 <__swsetup_r+0x5c>
 800d94e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d950:	b141      	cbz	r1, 800d964 <__swsetup_r+0x4c>
 800d952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d956:	4299      	cmp	r1, r3
 800d958:	d002      	beq.n	800d960 <__swsetup_r+0x48>
 800d95a:	4628      	mov	r0, r5
 800d95c:	f7fd fcd8 	bl	800b310 <_free_r>
 800d960:	2300      	movs	r3, #0
 800d962:	6363      	str	r3, [r4, #52]	; 0x34
 800d964:	89a3      	ldrh	r3, [r4, #12]
 800d966:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d96a:	81a3      	strh	r3, [r4, #12]
 800d96c:	2300      	movs	r3, #0
 800d96e:	6063      	str	r3, [r4, #4]
 800d970:	6923      	ldr	r3, [r4, #16]
 800d972:	6023      	str	r3, [r4, #0]
 800d974:	89a3      	ldrh	r3, [r4, #12]
 800d976:	f043 0308 	orr.w	r3, r3, #8
 800d97a:	81a3      	strh	r3, [r4, #12]
 800d97c:	6923      	ldr	r3, [r4, #16]
 800d97e:	b94b      	cbnz	r3, 800d994 <__swsetup_r+0x7c>
 800d980:	89a3      	ldrh	r3, [r4, #12]
 800d982:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d98a:	d003      	beq.n	800d994 <__swsetup_r+0x7c>
 800d98c:	4621      	mov	r1, r4
 800d98e:	4628      	mov	r0, r5
 800d990:	f000 f884 	bl	800da9c <__smakebuf_r>
 800d994:	89a0      	ldrh	r0, [r4, #12]
 800d996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d99a:	f010 0301 	ands.w	r3, r0, #1
 800d99e:	d00a      	beq.n	800d9b6 <__swsetup_r+0x9e>
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	60a3      	str	r3, [r4, #8]
 800d9a4:	6963      	ldr	r3, [r4, #20]
 800d9a6:	425b      	negs	r3, r3
 800d9a8:	61a3      	str	r3, [r4, #24]
 800d9aa:	6923      	ldr	r3, [r4, #16]
 800d9ac:	b943      	cbnz	r3, 800d9c0 <__swsetup_r+0xa8>
 800d9ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d9b2:	d1c4      	bne.n	800d93e <__swsetup_r+0x26>
 800d9b4:	bd38      	pop	{r3, r4, r5, pc}
 800d9b6:	0781      	lsls	r1, r0, #30
 800d9b8:	bf58      	it	pl
 800d9ba:	6963      	ldrpl	r3, [r4, #20]
 800d9bc:	60a3      	str	r3, [r4, #8]
 800d9be:	e7f4      	b.n	800d9aa <__swsetup_r+0x92>
 800d9c0:	2000      	movs	r0, #0
 800d9c2:	e7f7      	b.n	800d9b4 <__swsetup_r+0x9c>
 800d9c4:	20000614 	.word	0x20000614

0800d9c8 <_raise_r>:
 800d9c8:	291f      	cmp	r1, #31
 800d9ca:	b538      	push	{r3, r4, r5, lr}
 800d9cc:	4604      	mov	r4, r0
 800d9ce:	460d      	mov	r5, r1
 800d9d0:	d904      	bls.n	800d9dc <_raise_r+0x14>
 800d9d2:	2316      	movs	r3, #22
 800d9d4:	6003      	str	r3, [r0, #0]
 800d9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9da:	bd38      	pop	{r3, r4, r5, pc}
 800d9dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d9de:	b112      	cbz	r2, 800d9e6 <_raise_r+0x1e>
 800d9e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9e4:	b94b      	cbnz	r3, 800d9fa <_raise_r+0x32>
 800d9e6:	4620      	mov	r0, r4
 800d9e8:	f000 f830 	bl	800da4c <_getpid_r>
 800d9ec:	462a      	mov	r2, r5
 800d9ee:	4601      	mov	r1, r0
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9f6:	f000 b817 	b.w	800da28 <_kill_r>
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d00a      	beq.n	800da14 <_raise_r+0x4c>
 800d9fe:	1c59      	adds	r1, r3, #1
 800da00:	d103      	bne.n	800da0a <_raise_r+0x42>
 800da02:	2316      	movs	r3, #22
 800da04:	6003      	str	r3, [r0, #0]
 800da06:	2001      	movs	r0, #1
 800da08:	e7e7      	b.n	800d9da <_raise_r+0x12>
 800da0a:	2400      	movs	r4, #0
 800da0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da10:	4628      	mov	r0, r5
 800da12:	4798      	blx	r3
 800da14:	2000      	movs	r0, #0
 800da16:	e7e0      	b.n	800d9da <_raise_r+0x12>

0800da18 <raise>:
 800da18:	4b02      	ldr	r3, [pc, #8]	; (800da24 <raise+0xc>)
 800da1a:	4601      	mov	r1, r0
 800da1c:	6818      	ldr	r0, [r3, #0]
 800da1e:	f7ff bfd3 	b.w	800d9c8 <_raise_r>
 800da22:	bf00      	nop
 800da24:	20000614 	.word	0x20000614

0800da28 <_kill_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4d07      	ldr	r5, [pc, #28]	; (800da48 <_kill_r+0x20>)
 800da2c:	2300      	movs	r3, #0
 800da2e:	4604      	mov	r4, r0
 800da30:	4608      	mov	r0, r1
 800da32:	4611      	mov	r1, r2
 800da34:	602b      	str	r3, [r5, #0]
 800da36:	f7f3 fde5 	bl	8001604 <_kill>
 800da3a:	1c43      	adds	r3, r0, #1
 800da3c:	d102      	bne.n	800da44 <_kill_r+0x1c>
 800da3e:	682b      	ldr	r3, [r5, #0]
 800da40:	b103      	cbz	r3, 800da44 <_kill_r+0x1c>
 800da42:	6023      	str	r3, [r4, #0]
 800da44:	bd38      	pop	{r3, r4, r5, pc}
 800da46:	bf00      	nop
 800da48:	20000e64 	.word	0x20000e64

0800da4c <_getpid_r>:
 800da4c:	f7f3 bdd2 	b.w	80015f4 <_getpid>

0800da50 <__swhatbuf_r>:
 800da50:	b570      	push	{r4, r5, r6, lr}
 800da52:	460c      	mov	r4, r1
 800da54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800da58:	2900      	cmp	r1, #0
 800da5a:	b096      	sub	sp, #88	; 0x58
 800da5c:	4615      	mov	r5, r2
 800da5e:	461e      	mov	r6, r3
 800da60:	da0d      	bge.n	800da7e <__swhatbuf_r+0x2e>
 800da62:	89a3      	ldrh	r3, [r4, #12]
 800da64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800da68:	f04f 0100 	mov.w	r1, #0
 800da6c:	bf0c      	ite	eq
 800da6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800da72:	2340      	movne	r3, #64	; 0x40
 800da74:	2000      	movs	r0, #0
 800da76:	6031      	str	r1, [r6, #0]
 800da78:	602b      	str	r3, [r5, #0]
 800da7a:	b016      	add	sp, #88	; 0x58
 800da7c:	bd70      	pop	{r4, r5, r6, pc}
 800da7e:	466a      	mov	r2, sp
 800da80:	f000 f848 	bl	800db14 <_fstat_r>
 800da84:	2800      	cmp	r0, #0
 800da86:	dbec      	blt.n	800da62 <__swhatbuf_r+0x12>
 800da88:	9901      	ldr	r1, [sp, #4]
 800da8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800da8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800da92:	4259      	negs	r1, r3
 800da94:	4159      	adcs	r1, r3
 800da96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da9a:	e7eb      	b.n	800da74 <__swhatbuf_r+0x24>

0800da9c <__smakebuf_r>:
 800da9c:	898b      	ldrh	r3, [r1, #12]
 800da9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800daa0:	079d      	lsls	r5, r3, #30
 800daa2:	4606      	mov	r6, r0
 800daa4:	460c      	mov	r4, r1
 800daa6:	d507      	bpl.n	800dab8 <__smakebuf_r+0x1c>
 800daa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800daac:	6023      	str	r3, [r4, #0]
 800daae:	6123      	str	r3, [r4, #16]
 800dab0:	2301      	movs	r3, #1
 800dab2:	6163      	str	r3, [r4, #20]
 800dab4:	b002      	add	sp, #8
 800dab6:	bd70      	pop	{r4, r5, r6, pc}
 800dab8:	ab01      	add	r3, sp, #4
 800daba:	466a      	mov	r2, sp
 800dabc:	f7ff ffc8 	bl	800da50 <__swhatbuf_r>
 800dac0:	9900      	ldr	r1, [sp, #0]
 800dac2:	4605      	mov	r5, r0
 800dac4:	4630      	mov	r0, r6
 800dac6:	f7fb fd8b 	bl	80095e0 <_malloc_r>
 800daca:	b948      	cbnz	r0, 800dae0 <__smakebuf_r+0x44>
 800dacc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dad0:	059a      	lsls	r2, r3, #22
 800dad2:	d4ef      	bmi.n	800dab4 <__smakebuf_r+0x18>
 800dad4:	f023 0303 	bic.w	r3, r3, #3
 800dad8:	f043 0302 	orr.w	r3, r3, #2
 800dadc:	81a3      	strh	r3, [r4, #12]
 800dade:	e7e3      	b.n	800daa8 <__smakebuf_r+0xc>
 800dae0:	89a3      	ldrh	r3, [r4, #12]
 800dae2:	6020      	str	r0, [r4, #0]
 800dae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dae8:	81a3      	strh	r3, [r4, #12]
 800daea:	9b00      	ldr	r3, [sp, #0]
 800daec:	6163      	str	r3, [r4, #20]
 800daee:	9b01      	ldr	r3, [sp, #4]
 800daf0:	6120      	str	r0, [r4, #16]
 800daf2:	b15b      	cbz	r3, 800db0c <__smakebuf_r+0x70>
 800daf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800daf8:	4630      	mov	r0, r6
 800dafa:	f000 f81d 	bl	800db38 <_isatty_r>
 800dafe:	b128      	cbz	r0, 800db0c <__smakebuf_r+0x70>
 800db00:	89a3      	ldrh	r3, [r4, #12]
 800db02:	f023 0303 	bic.w	r3, r3, #3
 800db06:	f043 0301 	orr.w	r3, r3, #1
 800db0a:	81a3      	strh	r3, [r4, #12]
 800db0c:	89a3      	ldrh	r3, [r4, #12]
 800db0e:	431d      	orrs	r5, r3
 800db10:	81a5      	strh	r5, [r4, #12]
 800db12:	e7cf      	b.n	800dab4 <__smakebuf_r+0x18>

0800db14 <_fstat_r>:
 800db14:	b538      	push	{r3, r4, r5, lr}
 800db16:	4d07      	ldr	r5, [pc, #28]	; (800db34 <_fstat_r+0x20>)
 800db18:	2300      	movs	r3, #0
 800db1a:	4604      	mov	r4, r0
 800db1c:	4608      	mov	r0, r1
 800db1e:	4611      	mov	r1, r2
 800db20:	602b      	str	r3, [r5, #0]
 800db22:	f7f3 fdce 	bl	80016c2 <_fstat>
 800db26:	1c43      	adds	r3, r0, #1
 800db28:	d102      	bne.n	800db30 <_fstat_r+0x1c>
 800db2a:	682b      	ldr	r3, [r5, #0]
 800db2c:	b103      	cbz	r3, 800db30 <_fstat_r+0x1c>
 800db2e:	6023      	str	r3, [r4, #0]
 800db30:	bd38      	pop	{r3, r4, r5, pc}
 800db32:	bf00      	nop
 800db34:	20000e64 	.word	0x20000e64

0800db38 <_isatty_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	4d06      	ldr	r5, [pc, #24]	; (800db54 <_isatty_r+0x1c>)
 800db3c:	2300      	movs	r3, #0
 800db3e:	4604      	mov	r4, r0
 800db40:	4608      	mov	r0, r1
 800db42:	602b      	str	r3, [r5, #0]
 800db44:	f7f3 fdcd 	bl	80016e2 <_isatty>
 800db48:	1c43      	adds	r3, r0, #1
 800db4a:	d102      	bne.n	800db52 <_isatty_r+0x1a>
 800db4c:	682b      	ldr	r3, [r5, #0]
 800db4e:	b103      	cbz	r3, 800db52 <_isatty_r+0x1a>
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	bd38      	pop	{r3, r4, r5, pc}
 800db54:	20000e64 	.word	0x20000e64

0800db58 <_init>:
 800db58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db5a:	bf00      	nop
 800db5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db5e:	bc08      	pop	{r3}
 800db60:	469e      	mov	lr, r3
 800db62:	4770      	bx	lr

0800db64 <_fini>:
 800db64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db66:	bf00      	nop
 800db68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db6a:	bc08      	pop	{r3}
 800db6c:	469e      	mov	lr, r3
 800db6e:	4770      	bx	lr
