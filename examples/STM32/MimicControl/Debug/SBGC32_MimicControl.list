
SBGC32_MimicControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c138  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  0800c338  0800c338  0001c338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7f4  0800c7f4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7f4  0800c7f4  0001c7f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7fc  0800c7fc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7fc  0800c7fc  0001c7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c800  0800c800  0001c800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800c804  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  200001e8  0800c9ec  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000044c  0800c9ec  0002044c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022370  00000000  00000000  00020216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000448c  00000000  00000000  00042586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001558  00000000  00000000  00046a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001380  00000000  00000000  00047f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d876  00000000  00000000  000492f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ff9a  00000000  00000000  00076b66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010aa48  00000000  00000000  00096b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a1548  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a40  00000000  00000000  001a1598  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e8 	.word	0x200001e8
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c320 	.word	0x0800c320

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ec 	.word	0x200001ec
 800023c:	0800c320 	.word	0x0800c320

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009ee:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <MX_ADC1_Init+0xb8>)
 80009f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009f4:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <MX_ADC1_Init+0xb4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a1e:	4a1e      	ldr	r2, [pc, #120]	; (8000a98 <MX_ADC1_Init+0xbc>)
 8000a20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a2a:	2202      	movs	r2, #2
 8000a2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a3c:	4814      	ldr	r0, [pc, #80]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a3e:	f000 ffb7 	bl	80019b0 <HAL_ADC_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a48:	f000 fb2f 	bl	80010aa <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a4c:	2305      	movs	r3, #5
 8000a4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000a54:	2307      	movs	r3, #7
 8000a56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a58:	463b      	mov	r3, r7
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480c      	ldr	r0, [pc, #48]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a5e:	f001 f9f1 	bl	8001e44 <HAL_ADC_ConfigChannel>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a68:	f000 fb1f 	bl	80010aa <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a70:	2302      	movs	r3, #2
 8000a72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_ADC1_Init+0xb4>)
 8000a7a:	f001 f9e3 	bl	8001e44 <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a84:	f000 fb11 	bl	80010aa <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000204 	.word	0x20000204
 8000a94:	40012000 	.word	0x40012000
 8000a98:	0f000001 	.word	0x0f000001

08000a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	; 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a19      	ldr	r2, [pc, #100]	; (8000b20 <HAL_ADC_MspInit+0x84>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d12b      	bne.n	8000b16 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	4a18      	ldr	r2, [pc, #96]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8000aca:	4b16      	ldr	r3, [pc, #88]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	4a12      	ldr	r2, [pc, #72]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae2:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <HAL_ADC_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000aee:	2360      	movs	r3, #96	; 0x60
 8000af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af2:	2303      	movs	r3, #3
 8000af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afa:	f107 0314 	add.w	r3, r7, #20
 8000afe:	4619      	mov	r1, r3
 8000b00:	4809      	ldr	r0, [pc, #36]	; (8000b28 <HAL_ADC_MspInit+0x8c>)
 8000b02:	f001 fd9d 	bl	8002640 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2103      	movs	r1, #3
 8000b0a:	2012      	movs	r0, #18
 8000b0c:	f001 fccf 	bl	80024ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000b10:	2012      	movs	r0, #18
 8000b12:	f001 fce8 	bl	80024e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40012000 	.word	0x40012000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000

08000b2c <InitADC>:

/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 *													 Low-Layer Functions
 */
void InitADC (InputsInfo_t *inputsInfo, __ADC_STRUCT)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
	inputsInfo->adc = adc;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	609a      	str	r2, [r3, #8]
	DISABLE_ADC_CR1_EOCIE(inputsInfo->adc);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	689b      	ldr	r3, [r3, #8]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	f022 0220 	bic.w	r2, r2, #32
 8000b4e:	605a      	str	r2, [r3, #4]

	inputsInfo->_curChannel = 0;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2200      	movs	r2, #0
 8000b54:	711a      	strb	r2, [r3, #4]
}
 8000b56:	bf00      	nop
 8000b58:	370c      	adds	r7, #12
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <ReadADC_Inputs>:


void ReadADC_Inputs (InputsInfo_t *inputsInfo)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	START_ADC(inputsInfo->adc);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 ff62 	bl	8001a38 <HAL_ADC_Start_IT>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <ADC_DRV_EndConvCallBack>:


void ADC_DRV_EndConvCallBack (InputsInfo_t *inputsInfo)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
	inputsInfo->ADC_INx[inputsInfo->_curChannel++] = GET_ADC_CONV_DATA(inputsInfo->adc);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	689b      	ldr	r3, [r3, #8]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	791b      	ldrb	r3, [r3, #4]
 8000b90:	1c5a      	adds	r2, r3, #1
 8000b92:	b2d0      	uxtb	r0, r2
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	7110      	strb	r0, [r2, #4]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	b289      	uxth	r1, r1
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	if (inputsInfo->_curChannel >= ADC_CHANNELS_QUAN)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	791b      	ldrb	r3, [r3, #4]
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d902      	bls.n	8000bb0 <ADC_DRV_EndConvCallBack+0x34>
		inputsInfo->_curChannel = 0;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	711a      	strb	r2, [r3, #4]
}
 8000bb0:	bf00      	nop
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <ReadButtonState>:


ui8 ReadButtonState (__GPIO_STRUCT, ui16 pin)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	807b      	strh	r3, [r7, #2]
	return READ_PIN(gpio, pin);
 8000bc8:	887b      	ldrh	r3, [r7, #2]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f001 fee3 	bl	8002998 <HAL_GPIO_ReadPin>
 8000bd2:	4603      	mov	r3, r0
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	3708      	adds	r7, #8
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b088      	sub	sp, #32
 8000be0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a23      	ldr	r2, [pc, #140]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b21      	ldr	r3, [pc, #132]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b1e      	ldr	r3, [pc, #120]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a1d      	ldr	r2, [pc, #116]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c10:	f043 0301 	orr.w	r3, r3, #1
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c22:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a17      	ldr	r2, [pc, #92]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_GPIO_Init+0xa8>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	603b      	str	r3, [r7, #0]
 8000c38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	4812      	ldr	r0, [pc, #72]	; (8000c88 <MX_GPIO_Init+0xac>)
 8000c40:	f001 fec2 	bl	80029c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin|REC_BTN_Pin;
 8000c44:	f242 0302 	movw	r3, #8194	; 0x2002
 8000c48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <MX_GPIO_Init+0xb0>)
 8000c5a:	f001 fcf1 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_GPIO_Init+0xac>)
 8000c76:	f001 fce3 	bl	8002640 <HAL_GPIO_Init>

}
 8000c7a:	bf00      	nop
 8000c7c:	3720      	adds	r7, #32
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40020800 	.word	0x40020800

08000c90 <SerialAPI_GetConfirmStatus>:
	 *	@param	*confirm - pointer to confirmation structure
	 *
	 *	@return	sbgcConfirm_t.status
	 */
	static inline sbgcConfirmStatus_t SerialAPI_GetConfirmStatus (sbgcConfirm_t *confirm)
	{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
		return confirm->status;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	79db      	ldrb	r3, [r3, #7]
	}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <AverageInit>:

}			InputsInfo_t;


static inline void AverageInit (AverageValue_t *averageValue, ui8 factor)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	70fb      	strb	r3, [r7, #3]
	averageValue->_factor = factor;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	78fa      	ldrb	r2, [r7, #3]
 8000cb8:	719a      	strb	r2, [r3, #6]
	averageValue->avgBuff = 0;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = 0;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	809a      	strh	r2, [r3, #4]
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <AverageValue>:


static inline void AverageValue (AverageValue_t *averageValue, i16 value)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	807b      	strh	r3, [r7, #2]
	averageValue->avgBuff += (i32)value - (i32)averageValue->avgRes;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	441a      	add	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = (i16)(averageValue->avgBuff >> averageValue->_factor);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	7992      	ldrb	r2, [r2, #6]
 8000cfc:	4113      	asrs	r3, r2
 8000cfe:	b21a      	sxth	r2, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	809a      	strh	r2, [r3, #4]
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fdef 	bl	80018f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f954 	bl	8000fc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f7ff ff5e 	bl	8000bdc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d20:	f000 fb68 	bl	80013f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000d24:	f000 fbd8 	bl	80014d8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d28:	f000 fc06 	bl	8001538 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d2c:	f7ff fe56 	bl	80009dc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  	InitADC(&InputsInfo, JOYSTICK_ADC);
 8000d30:	4994      	ldr	r1, [pc, #592]	; (8000f84 <main+0x274>)
 8000d32:	4895      	ldr	r0, [pc, #596]	; (8000f88 <main+0x278>)
 8000d34:	f7ff fefa 	bl	8000b2c <InitADC>

	/* SimpleBGC32 Init */
	SBGC32_Init(&SBGC32_Device);
 8000d38:	4894      	ldr	r0, [pc, #592]	; (8000f8c <main+0x27c>)
 8000d3a:	f006 ff4f 	bl	8007bdc <SBGC32_Init>

	/* Control Configurations */
	Control.mode[PITCH] = CtrlMODE_ANGLE;
 8000d3e:	4b94      	ldr	r3, [pc, #592]	; (8000f90 <main+0x280>)
 8000d40:	2202      	movs	r2, #2
 8000d42:	705a      	strb	r2, [r3, #1]
	Control.mode[YAW] = CtrlMODE_ANGLE;
 8000d44:	4b92      	ldr	r3, [pc, #584]	; (8000f90 <main+0x280>)
 8000d46:	2202      	movs	r2, #2
 8000d48:	709a      	strb	r2, [r3, #2]

	Control.AxisC[PITCH].angle = 0;
 8000d4a:	4b91      	ldr	r3, [pc, #580]	; (8000f90 <main+0x280>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	725a      	strb	r2, [r3, #9]
 8000d50:	2200      	movs	r2, #0
 8000d52:	729a      	strb	r2, [r3, #10]
	Control.AxisC[YAW].angle = 0;
 8000d54:	4b8e      	ldr	r3, [pc, #568]	; (8000f90 <main+0x280>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	735a      	strb	r2, [r3, #13]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	739a      	strb	r2, [r3, #14]

	#ifdef SET_SPEED

		Control.AxisC[PITCH].speed = SET_SPEED;
 8000d5e:	4b8c      	ldr	r3, [pc, #560]	; (8000f90 <main+0x280>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f062 020b 	orn	r2, r2, #11
 8000d66:	71da      	strb	r2, [r3, #7]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f042 0201 	orr.w	r2, r2, #1
 8000d6e:	721a      	strb	r2, [r3, #8]
		Control.AxisC[YAW].speed = SET_SPEED;
 8000d70:	4b87      	ldr	r3, [pc, #540]	; (8000f90 <main+0x280>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	f062 020b 	orn	r2, r2, #11
 8000d78:	72da      	strb	r2, [r3, #11]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f042 0201 	orr.w	r2, r2, #1
 8000d80:	731a      	strb	r2, [r3, #12]

	#endif

	ControlConfig.flags = CtrlCONFIG_FLAG_NO_CONFIRM;
 8000d82:	4b84      	ldr	r3, [pc, #528]	; (8000f94 <main+0x284>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f042 0201 	orr.w	r2, r2, #1
 8000d8a:	775a      	strb	r2, [r3, #29]
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	779a      	strb	r2, [r3, #30]

	InputsInfo.recBtn = BTN_RELEASED;
 8000d90:	4b7d      	ldr	r3, [pc, #500]	; (8000f88 <main+0x278>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	731a      	strb	r2, [r3, #12]
	InputsInfo.menuBtn = BTN_RELEASED;
 8000d96:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <main+0x278>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	735a      	strb	r2, [r3, #13]

	AverageInit(&JoystickAverage[0], LOW_PASS_FACTOR);
 8000d9c:	2108      	movs	r1, #8
 8000d9e:	487e      	ldr	r0, [pc, #504]	; (8000f98 <main+0x288>)
 8000da0:	f7ff ff82 	bl	8000ca8 <AverageInit>
	AverageInit(&JoystickAverage[1], LOW_PASS_FACTOR);
 8000da4:	2108      	movs	r1, #8
 8000da6:	487d      	ldr	r0, [pc, #500]	; (8000f9c <main+0x28c>)
 8000da8:	f7ff ff7e 	bl	8000ca8 <AverageInit>

	servoOut[PWM_SERVO_OUT_IDX] = PWM_CAM_REC_OFF;
 8000dac:	4b7c      	ldr	r3, [pc, #496]	; (8000fa0 <main+0x290>)
 8000dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db2:	805a      	strh	r2, [r3, #2]


	SBGC32_ControlConfig(&SBGC32_Device, &ControlConfig, SBGC_NO_CONFIRM);
 8000db4:	2200      	movs	r2, #0
 8000db6:	4977      	ldr	r1, [pc, #476]	; (8000f94 <main+0x284>)
 8000db8:	4874      	ldr	r0, [pc, #464]	; (8000f8c <main+0x27c>)
 8000dba:	f006 fe4f 	bl	8007a5c <SBGC32_ControlConfig>

	SBGC32_SetServoOut(&SBGC32_Device, servoOut);
 8000dbe:	4978      	ldr	r1, [pc, #480]	; (8000fa0 <main+0x290>)
 8000dc0:	4872      	ldr	r0, [pc, #456]	; (8000f8c <main+0x27c>)
 8000dc2:	f006 feae 	bl	8007b22 <SBGC32_SetServoOut>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		/* Getting current time */
		currentTime = sbgcGetTick();
 8000dc6:	f000 fde7 	bl	8001998 <HAL_GetTick>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	4a75      	ldr	r2, [pc, #468]	; (8000fa4 <main+0x294>)
 8000dce:	6013      	str	r3, [r2, #0]


		/* - - - - - - - - - - Joystick Handling - - - - - - - - - - */

		ReadADC_Inputs(&InputsInfo);
 8000dd0:	486d      	ldr	r0, [pc, #436]	; (8000f88 <main+0x278>)
 8000dd2:	f7ff fec6 	bl	8000b62 <ReadADC_Inputs>

		AverageValue(&JoystickAverage[0], (i16)sbgcDegreeToAngle(YAW_ANGLE_MIN) +
			(i16)((i32)InputsInfo.ADC_INx[ADC_JOY_Y] * sbgcDegreeToAngle(YAW_ANGLE_MAX - YAW_ANGLE_MIN) / (1 << ADC_RESOLUTION)));
 8000dd6:	4b6c      	ldr	r3, [pc, #432]	; (8000f88 <main+0x278>)
 8000dd8:	885b      	ldrh	r3, [r3, #2]
 8000dda:	ee07 3a90 	vmov	s15, r3
 8000dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de2:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8000fa8 <main+0x298>
 8000de6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000dea:	eddf 6a70 	vldr	s13, [pc, #448]	; 8000fac <main+0x29c>
 8000dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000df2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000df6:	ee17 3a90 	vmov	r3, s15
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	b29b      	uxth	r3, r3
		AverageValue(&JoystickAverage[0], (i16)sbgcDegreeToAngle(YAW_ANGLE_MIN) +
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	4864      	ldr	r0, [pc, #400]	; (8000f98 <main+0x288>)
 8000e08:	f7ff ff63 	bl	8000cd2 <AverageValue>

		AverageValue(&JoystickAverage[1], (i16)sbgcDegreeToAngle(PITCH_ANGLE_MIN) +
			(i16)((i32)InputsInfo.ADC_INx[ADC_JOY_X] * sbgcDegreeToAngle(PITCH_ANGLE_MAX - PITCH_ANGLE_MIN) / (1 << ADC_RESOLUTION)));
 8000e0c:	4b5e      	ldr	r3, [pc, #376]	; (8000f88 <main+0x278>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e18:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000fa8 <main+0x298>
 8000e1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e20:	eddf 6a62 	vldr	s13, [pc, #392]	; 8000fac <main+0x29c>
 8000e24:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e2c:	ee17 3a90 	vmov	r3, s15
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	b29b      	uxth	r3, r3
		AverageValue(&JoystickAverage[1], (i16)sbgcDegreeToAngle(PITCH_ANGLE_MIN) +
 8000e34:	3b01      	subs	r3, #1
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4857      	ldr	r0, [pc, #348]	; (8000f9c <main+0x28c>)
 8000e3e:	f7ff ff48 	bl	8000cd2 <AverageValue>


		if ((currentTime - lastControlTime ) > CMD_CONTROL_DELAY)
 8000e42:	4b58      	ldr	r3, [pc, #352]	; (8000fa4 <main+0x294>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	4b5a      	ldr	r3, [pc, #360]	; (8000fb0 <main+0x2a0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	2b14      	cmp	r3, #20
 8000e4e:	d913      	bls.n	8000e78 <main+0x168>
		{
			lastControlTime = currentTime;
 8000e50:	4b54      	ldr	r3, [pc, #336]	; (8000fa4 <main+0x294>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a56      	ldr	r2, [pc, #344]	; (8000fb0 <main+0x2a0>)
 8000e56:	6013      	str	r3, [r2, #0]

			Control.AxisC[PITCH].angle = JoystickAverage[1].avgRes;
 8000e58:	4b4f      	ldr	r3, [pc, #316]	; (8000f98 <main+0x288>)
 8000e5a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <main+0x280>)
 8000e60:	f8a3 2009 	strh.w	r2, [r3, #9]
			Control.AxisC[YAW].angle = JoystickAverage[0].avgRes;
 8000e64:	4b4c      	ldr	r3, [pc, #304]	; (8000f98 <main+0x288>)
 8000e66:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000e6a:	4b49      	ldr	r3, [pc, #292]	; (8000f90 <main+0x280>)
 8000e6c:	f8a3 200d 	strh.w	r2, [r3, #13]

			SBGC32_Control(&SBGC32_Device, &Control);
 8000e70:	4947      	ldr	r1, [pc, #284]	; (8000f90 <main+0x280>)
 8000e72:	4846      	ldr	r0, [pc, #280]	; (8000f8c <main+0x27c>)
 8000e74:	f006 fdd0 	bl	8007a18 <SBGC32_Control>
		}


		/*  - - - - - - - - - - Buttons Handling - - - - - - - - - - */
		/* Rec Button - for long press */
		if (ReadButtonState(REC_BTN_PORT, REC_BTN_PIN))
 8000e78:	2102      	movs	r1, #2
 8000e7a:	484e      	ldr	r0, [pc, #312]	; (8000fb4 <main+0x2a4>)
 8000e7c:	f7ff fe9e 	bl	8000bbc <ReadButtonState>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d01f      	beq.n	8000ec6 <main+0x1b6>
		{
			if (InputsInfo.recBtn != BTN_PRESSED)
 8000e86:	4b40      	ldr	r3, [pc, #256]	; (8000f88 <main+0x278>)
 8000e88:	7b1b      	ldrb	r3, [r3, #12]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d006      	beq.n	8000e9c <main+0x18c>
			{
				lastButtonTime = currentTime;
 8000e8e:	4b45      	ldr	r3, [pc, #276]	; (8000fa4 <main+0x294>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a49      	ldr	r2, [pc, #292]	; (8000fb8 <main+0x2a8>)
 8000e94:	6013      	str	r3, [r2, #0]
				InputsInfo.recBtn = BTN_PRESSED;
 8000e96:	4b3c      	ldr	r3, [pc, #240]	; (8000f88 <main+0x278>)
 8000e98:	2201      	movs	r2, #1
 8000e9a:	731a      	strb	r2, [r3, #12]
			}

			if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE))
 8000e9c:	4b41      	ldr	r3, [pc, #260]	; (8000fa4 <main+0x294>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b45      	ldr	r3, [pc, #276]	; (8000fb8 <main+0x2a8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	2b64      	cmp	r3, #100	; 0x64
 8000ea8:	d928      	bls.n	8000efc <main+0x1ec>
			{
				servoOut[PWM_SERVO_OUT_IDX] = PWM_CAM_REC_ON;
 8000eaa:	4b3d      	ldr	r3, [pc, #244]	; (8000fa0 <main+0x290>)
 8000eac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000eb0:	805a      	strh	r2, [r3, #2]
				SBGC32_SetServoOut(&SBGC32_Device, servoOut);
 8000eb2:	493b      	ldr	r1, [pc, #236]	; (8000fa0 <main+0x290>)
 8000eb4:	4835      	ldr	r0, [pc, #212]	; (8000f8c <main+0x27c>)
 8000eb6:	f006 fe34 	bl	8007b22 <SBGC32_SetServoOut>
				DEBUG_LED_ON;
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	483f      	ldr	r0, [pc, #252]	; (8000fbc <main+0x2ac>)
 8000ec0:	f001 fd82 	bl	80029c8 <HAL_GPIO_WritePin>
 8000ec4:	e01a      	b.n	8000efc <main+0x1ec>
			}
		}

		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000ec6:	4b37      	ldr	r3, [pc, #220]	; (8000fa4 <main+0x294>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <main+0x2a8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b64      	cmp	r3, #100	; 0x64
 8000ed2:	d913      	bls.n	8000efc <main+0x1ec>
				 (InputsInfo.recBtn == BTN_PRESSED))
 8000ed4:	4b2c      	ldr	r3, [pc, #176]	; (8000f88 <main+0x278>)
 8000ed6:	7b1b      	ldrb	r3, [r3, #12]
		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d10f      	bne.n	8000efc <main+0x1ec>
		{
			servoOut[PWM_SERVO_OUT_IDX] = PWM_CAM_REC_OFF;
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <main+0x290>)
 8000ede:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ee2:	805a      	strh	r2, [r3, #2]
			SBGC32_SetServoOut(&SBGC32_Device, servoOut);
 8000ee4:	492e      	ldr	r1, [pc, #184]	; (8000fa0 <main+0x290>)
 8000ee6:	4829      	ldr	r0, [pc, #164]	; (8000f8c <main+0x27c>)
 8000ee8:	f006 fe1b 	bl	8007b22 <SBGC32_SetServoOut>
			DEBUG_LED_OFF;
 8000eec:	2200      	movs	r2, #0
 8000eee:	2180      	movs	r1, #128	; 0x80
 8000ef0:	4832      	ldr	r0, [pc, #200]	; (8000fbc <main+0x2ac>)
 8000ef2:	f001 fd69 	bl	80029c8 <HAL_GPIO_WritePin>
			InputsInfo.recBtn = BTN_RELEASED;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	; (8000f88 <main+0x278>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	731a      	strb	r2, [r3, #12]
		}

		/* Menu Button */
		if (ReadButtonState(MENU_BTN_PORT, MENU_BTN_PIN))
 8000efc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f00:	482c      	ldr	r0, [pc, #176]	; (8000fb4 <main+0x2a4>)
 8000f02:	f7ff fe5b 	bl	8000bbc <ReadButtonState>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d024      	beq.n	8000f56 <main+0x246>
		{
			if (InputsInfo.menuBtn == BTN_RELEASED)
 8000f0c:	4b1e      	ldr	r3, [pc, #120]	; (8000f88 <main+0x278>)
 8000f0e:	7b5b      	ldrb	r3, [r3, #13]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d106      	bne.n	8000f22 <main+0x212>
			{
				lastButtonTime = currentTime;
 8000f14:	4b23      	ldr	r3, [pc, #140]	; (8000fa4 <main+0x294>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <main+0x2a8>)
 8000f1a:	6013      	str	r3, [r2, #0]
				InputsInfo.menuBtn = BTN_PRESSED;
 8000f1c:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <main+0x278>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	735a      	strb	r2, [r3, #13]
			}

			if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f22:	4b20      	ldr	r3, [pc, #128]	; (8000fa4 <main+0x294>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4b24      	ldr	r3, [pc, #144]	; (8000fb8 <main+0x2a8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	2b64      	cmp	r3, #100	; 0x64
 8000f2e:	d920      	bls.n	8000f72 <main+0x262>
				(InputsInfo.menuBtn != BTN_POST_PRESSED))
 8000f30:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <main+0x278>)
 8000f32:	7b5b      	ldrb	r3, [r3, #13]
			if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d01c      	beq.n	8000f72 <main+0x262>
			{
				SBGC32_ExecuteMenu(&SBGC32_Device, MENU_CMD_BUTTON_PRESS, &Confirm);
 8000f38:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <main+0x2b0>)
 8000f3a:	2116      	movs	r1, #22
 8000f3c:	4813      	ldr	r0, [pc, #76]	; (8000f8c <main+0x27c>)
 8000f3e:	f006 fdbe 	bl	8007abe <SBGC32_ExecuteMenu>

				if (SerialAPI_GetConfirmStatus(&Confirm) == sbgcCONFIRM_RECEIVED)
 8000f42:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <main+0x2b0>)
 8000f44:	f7ff fea4 	bl	8000c90 <SerialAPI_GetConfirmStatus>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d111      	bne.n	8000f72 <main+0x262>
					InputsInfo.menuBtn = BTN_POST_PRESSED;
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <main+0x278>)
 8000f50:	2202      	movs	r2, #2
 8000f52:	735a      	strb	r2, [r3, #13]
 8000f54:	e00d      	b.n	8000f72 <main+0x262>
			}
		}

		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <main+0x294>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <main+0x2a8>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b64      	cmp	r3, #100	; 0x64
 8000f62:	d906      	bls.n	8000f72 <main+0x262>
				 (InputsInfo.menuBtn != BTN_RELEASED))
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <main+0x278>)
 8000f66:	7b5b      	ldrb	r3, [r3, #13]
		else if ((currentTime - lastButtonTime > SOFTWARE_ANTI_BOUNCE) &&
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d002      	beq.n	8000f72 <main+0x262>
			InputsInfo.menuBtn = BTN_RELEASED;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <main+0x278>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	735a      	strb	r2, [r3, #13]


		/* Make a constant sampling time by inserting a delay of 1 ms */
		while ((sbgcGetTick() - currentTime) < 1);
 8000f72:	bf00      	nop
 8000f74:	f000 fd10 	bl	8001998 <HAL_GetTick>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <main+0x294>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d0f8      	beq.n	8000f74 <main+0x264>
		currentTime = sbgcGetTick();
 8000f82:	e720      	b.n	8000dc6 <main+0xb6>
 8000f84:	20000204 	.word	0x20000204
 8000f88:	2000029c 	.word	0x2000029c
 8000f8c:	2000024c 	.word	0x2000024c
 8000f90:	20000258 	.word	0x20000258
 8000f94:	20000268 	.word	0x20000268
 8000f98:	200002ac 	.word	0x200002ac
 8000f9c:	200002b4 	.word	0x200002b4
 8000fa0:	20000000 	.word	0x20000000
 8000fa4:	200002bc 	.word	0x200002bc
 8000fa8:	4028c000 	.word	0x4028c000
 8000fac:	45800000 	.word	0x45800000
 8000fb0:	200002c0 	.word	0x200002c0
 8000fb4:	40020800 	.word	0x40020800
 8000fb8:	200002c4 	.word	0x200002c4
 8000fbc:	40020400 	.word	0x40020400
 8000fc0:	20000294 	.word	0x20000294

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	2234      	movs	r2, #52	; 0x34
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 fe4e 	bl	8007c74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	4b2b      	ldr	r3, [pc, #172]	; (8001098 <SystemClock_Config+0xd4>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a2a      	ldr	r2, [pc, #168]	; (8001098 <SystemClock_Config+0xd4>)
 8000fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <SystemClock_Config+0xd4>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001000:	4b26      	ldr	r3, [pc, #152]	; (800109c <SystemClock_Config+0xd8>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a25      	ldr	r2, [pc, #148]	; (800109c <SystemClock_Config+0xd8>)
 8001006:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <SystemClock_Config+0xd8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001018:	2302      	movs	r3, #2
 800101a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800101c:	2301      	movs	r3, #1
 800101e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001020:	2310      	movs	r3, #16
 8001022:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001024:	2302      	movs	r3, #2
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001028:	2300      	movs	r3, #0
 800102a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800102c:	2308      	movs	r3, #8
 800102e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001030:	23d8      	movs	r3, #216	; 0xd8
 8001032:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001034:	2302      	movs	r3, #2
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001038:	2302      	movs	r3, #2
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800103c:	2302      	movs	r3, #2
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001040:	f107 031c 	add.w	r3, r7, #28
 8001044:	4618      	mov	r0, r3
 8001046:	f001 fd29 	bl	8002a9c <HAL_RCC_OscConfig>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001050:	f000 f82b 	bl	80010aa <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001054:	f001 fcd2 	bl	80029fc <HAL_PWREx_EnableOverDrive>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800105e:	f000 f824 	bl	80010aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800106e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001072:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001078:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2107      	movs	r1, #7
 8001080:	4618      	mov	r0, r3
 8001082:	f001 ffb9 	bl	8002ff8 <HAL_RCC_ClockConfig>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800108c:	f000 f80d 	bl	80010aa <Error_Handler>
  }
}
 8001090:	bf00      	nop
 8001092:	3750      	adds	r7, #80	; 0x50
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <SerialAPI_FatalErrorHandler>:

/* USER CODE BEGIN 4 */

void SerialAPI_FatalErrorHandler (void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010a4:	b672      	cpsid	i
}
 80010a6:	bf00      	nop
	/* User common error handler */
	__disable_irq();

	while (1);
 80010a8:	e7fe      	b.n	80010a8 <SerialAPI_FatalErrorHandler+0x8>

080010aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80010ae:	b672      	cpsid	i
}
 80010b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <Error_Handler+0x8>

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	4b0f      	ldr	r3, [pc, #60]	; (80010f8 <HAL_MspInit+0x44>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a0e      	ldr	r2, [pc, #56]	; (80010f8 <HAL_MspInit+0x44>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <HAL_MspInit+0x44>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d2:	4b09      	ldr	r3, [pc, #36]	; (80010f8 <HAL_MspInit+0x44>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a08      	ldr	r2, [pc, #32]	; (80010f8 <HAL_MspInit+0x44>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_MspInit+0x44>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	603b      	str	r3, [r7, #0]
 80010e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ea:	bf00      	nop
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001148:	f000 fc12 	bl	8001970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800114c:	bf00      	nop
 800114e:	bd80      	pop	{r7, pc}

08001150 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

	/*  - - - - - ADC1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001154:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <ADC_IRQHandler+0x30>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	2b02      	cmp	r3, #2
 8001160:	d109      	bne.n	8001176 <ADC_IRQHandler+0x26>
		GET_FLAG_ADC_CR1_EOCIE(JOYSTICK_ADC))
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <ADC_IRQHandler+0x30>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 800116c:	2b20      	cmp	r3, #32
 800116e:	d102      	bne.n	8001176 <ADC_IRQHandler+0x26>
		ADC_DRV_EndConvCallBack(&InputsInfo);
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <ADC_IRQHandler+0x34>)
 8001172:	f7ff fd03 	bl	8000b7c <ADC_DRV_EndConvCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001176:	4802      	ldr	r0, [pc, #8]	; (8001180 <ADC_IRQHandler+0x30>)
 8001178:	f000 fd36 	bl	8001be8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000204 	.word	0x20000204
 8001184:	2000029c 	.word	0x2000029c

08001188 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/*  - - - - - TIM2 Interrupt Flags Check - - - - - */

	sbgcTimerIRQ_Handler(&SBGC32_Device)
 800118c:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <TIM2_IRQHandler+0x38>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b01      	cmp	r3, #1
 8001198:	d10c      	bne.n	80011b4 <TIM2_IRQHandler+0x2c>
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <TIM2_IRQHandler+0x38>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	2b01      	cmp	r3, #1
 80011a6:	d105      	bne.n	80011b4 <TIM2_IRQHandler+0x2c>
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <TIM2_IRQHandler+0x3c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f006 fabb 	bl	800772a <DriverSBGC32_TimerCallBack>

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM2_IRQHandler+0x38>)
 80011b6:	f002 fdfd 	bl	8003db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	200002cc 	.word	0x200002cc
 80011c4:	2000024c 	.word	0x2000024c

080011c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/* - - - - - UART1 Interrupt Flags Check - - - - - */

	sbgcUART_IRQ_Handler(&SBGC32_Device)
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <USART1_IRQHandler+0x74>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	69db      	ldr	r3, [r3, #28]
 80011d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d6:	2b40      	cmp	r3, #64	; 0x40
 80011d8:	d10c      	bne.n	80011f4 <USART1_IRQHandler+0x2c>
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <USART1_IRQHandler+0x74>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d005      	beq.n	80011f4 <USART1_IRQHandler+0x2c>
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <USART1_IRQHandler+0x78>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f006 fb0a 	bl	8007808 <DriverSBGC32_UART_TxCallBack>
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <USART1_IRQHandler+0x74>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	69db      	ldr	r3, [r3, #28]
 80011fa:	f003 0320 	and.w	r3, r3, #32
 80011fe:	2b20      	cmp	r3, #32
 8001200:	d10c      	bne.n	800121c <USART1_IRQHandler+0x54>
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <USART1_IRQHandler+0x74>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0320 	and.w	r3, r3, #32
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <USART1_IRQHandler+0x54>
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <USART1_IRQHandler+0x78>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f006 fb98 	bl	800794c <DriverSBGC32_UART_RxCallBack>
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <USART1_IRQHandler+0x74>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	2b08      	cmp	r3, #8
 8001228:	d103      	bne.n	8001232 <USART1_IRQHandler+0x6a>
 800122a:	4b04      	ldr	r3, [pc, #16]	; (800123c <USART1_IRQHandler+0x74>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2208      	movs	r2, #8
 8001230:	621a      	str	r2, [r3, #32]

	/* - - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001232:	4802      	ldr	r0, [pc, #8]	; (800123c <USART1_IRQHandler+0x74>)
 8001234:	f003 fa0e 	bl	8004654 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001238:	bf00      	nop
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000318 	.word	0x20000318
 8001240:	2000024c 	.word	0x2000024c

08001244 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
	return 1;
 8001248:	2301      	movs	r3, #1
}
 800124a:	4618      	mov	r0, r3
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <_kill>:

int _kill(int pid, int sig)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800125e:	f006 fcc9 	bl	8007bf4 <__errno>
 8001262:	4603      	mov	r3, r0
 8001264:	2216      	movs	r2, #22
 8001266:	601a      	str	r2, [r3, #0]
	return -1;
 8001268:	f04f 33ff 	mov.w	r3, #4294967295
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}

08001274 <_exit>:

void _exit (int status)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ffe7 	bl	8001254 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001286:	e7fe      	b.n	8001286 <_exit+0x12>

08001288 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e00a      	b.n	80012b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800129a:	f3af 8000 	nop.w
 800129e:	4601      	mov	r1, r0
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	b2ca      	uxtb	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	3301      	adds	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	dbf0      	blt.n	800129a <_read+0x12>
	}

return len;
 80012b8:	687b      	ldr	r3, [r7, #4]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b086      	sub	sp, #24
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	e009      	b.n	80012e8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	3301      	adds	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbf1      	blt.n	80012d4 <_write+0x12>
	}
	return len;
 80012f0:	687b      	ldr	r3, [r7, #4]
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <_close>:

int _close(int file)
{
 80012fa:	b480      	push	{r7}
 80012fc:	b083      	sub	sp, #12
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
	return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001312:	b480      	push	{r7}
 8001314:	b083      	sub	sp, #12
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001322:	605a      	str	r2, [r3, #4]
	return 0;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	370c      	adds	r7, #12
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr

08001332 <_isatty>:

int _isatty(int file)
{
 8001332:	b480      	push	{r7}
 8001334:	b083      	sub	sp, #12
 8001336:	af00      	add	r7, sp, #0
 8001338:	6078      	str	r0, [r7, #4]
	return 1;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
	return 0;
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800136c:	4a14      	ldr	r2, [pc, #80]	; (80013c0 <_sbrk+0x5c>)
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <_sbrk+0x60>)
 8001370:	1ad3      	subs	r3, r2, r3
 8001372:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001378:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <_sbrk+0x64>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d102      	bne.n	8001386 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <_sbrk+0x64>)
 8001382:	4a12      	ldr	r2, [pc, #72]	; (80013cc <_sbrk+0x68>)
 8001384:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	429a      	cmp	r2, r3
 8001392:	d207      	bcs.n	80013a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001394:	f006 fc2e 	bl	8007bf4 <__errno>
 8001398:	4603      	mov	r3, r0
 800139a:	220c      	movs	r2, #12
 800139c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	e009      	b.n	80013b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013a4:	4b08      	ldr	r3, [pc, #32]	; (80013c8 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_sbrk+0x64>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	4a05      	ldr	r2, [pc, #20]	; (80013c8 <_sbrk+0x64>)
 80013b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013b6:	68fb      	ldr	r3, [r7, #12]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	20080000 	.word	0x20080000
 80013c4:	00000400 	.word	0x00000400
 80013c8:	200002c8 	.word	0x200002c8
 80013cc:	20000450 	.word	0x20000450

080013d0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <SystemInit+0x20>)
 80013d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013da:	4a05      	ldr	r2, [pc, #20]	; (80013f0 <SystemInit+0x20>)
 80013dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b088      	sub	sp, #32
 80013f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013fa:	f107 0310 	add.w	r3, r7, #16
 80013fe:	2200      	movs	r2, #0
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	605a      	str	r2, [r3, #4]
 8001404:	609a      	str	r2, [r3, #8]
 8001406:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	605a      	str	r2, [r3, #4]
 8001410:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001412:	4b1e      	ldr	r3, [pc, #120]	; (800148c <MX_TIM2_Init+0x98>)
 8001414:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001418:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_TIM2_Init+0x98>)
 800141c:	226b      	movs	r2, #107	; 0x6b
 800141e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_TIM2_Init+0x98>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_TIM2_Init+0x98>)
 8001428:	f240 32e7 	movw	r2, #999	; 0x3e7
 800142c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142e:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_TIM2_Init+0x98>)
 8001430:	2200      	movs	r2, #0
 8001432:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <MX_TIM2_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800143a:	4814      	ldr	r0, [pc, #80]	; (800148c <MX_TIM2_Init+0x98>)
 800143c:	f002 fbea 	bl	8003c14 <HAL_TIM_Base_Init>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001446:	f7ff fe30 	bl	80010aa <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4619      	mov	r1, r3
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <MX_TIM2_Init+0x98>)
 8001458:	f002 fdcc 	bl	8003ff4 <HAL_TIM_ConfigClockSource>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001462:	f7ff fe22 	bl	80010aa <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001466:	2320      	movs	r3, #32
 8001468:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MX_TIM2_Init+0x98>)
 8001474:	f002 fff4 	bl	8004460 <HAL_TIMEx_MasterConfigSynchronization>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800147e:	f7ff fe14 	bl	80010aa <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	3720      	adds	r7, #32
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200002cc 	.word	0x200002cc

08001490 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014a0:	d113      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_TIM_Base_MspInit+0x44>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a0b      	ldr	r2, [pc, #44]	; (80014d4 <HAL_TIM_Base_MspInit+0x44>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_TIM_Base_MspInit+0x44>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80014ba:	2200      	movs	r2, #0
 80014bc:	2105      	movs	r1, #5
 80014be:	201c      	movs	r0, #28
 80014c0:	f000 fff5 	bl	80024ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014c4:	201c      	movs	r0, #28
 80014c6:	f001 f80e 	bl	80024e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023800 	.word	0x40023800

080014d8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_USART1_UART_Init+0x58>)
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <MX_USART1_UART_Init+0x5c>)
 80014e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_USART1_UART_Init+0x58>)
 80014e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014ea:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_USART1_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014f0:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <MX_USART1_UART_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_USART1_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b0c      	ldr	r3, [pc, #48]	; (8001530 <MX_USART1_UART_Init+0x58>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <MX_USART1_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <MX_USART1_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150e:	4b08      	ldr	r3, [pc, #32]	; (8001530 <MX_USART1_UART_Init+0x58>)
 8001510:	2200      	movs	r2, #0
 8001512:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001514:	4b06      	ldr	r3, [pc, #24]	; (8001530 <MX_USART1_UART_Init+0x58>)
 8001516:	2200      	movs	r2, #0
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800151a:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_USART1_UART_Init+0x58>)
 800151c:	f003 f84c 	bl	80045b8 <HAL_UART_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001526:	f7ff fdc0 	bl	80010aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000318 	.word	0x20000318
 8001534:	40011000 	.word	0x40011000

08001538 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <MX_USART2_UART_Init+0x58>)
 800153e:	4a15      	ldr	r2, [pc, #84]	; (8001594 <MX_USART2_UART_Init+0x5c>)
 8001540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <MX_USART2_UART_Init+0x58>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <MX_USART2_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <MX_USART2_UART_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <MX_USART2_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_USART2_UART_Init+0x58>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <MX_USART2_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001568:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_USART2_UART_Init+0x58>)
 800156a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800156e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001570:	4b07      	ldr	r3, [pc, #28]	; (8001590 <MX_USART2_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <MX_USART2_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800157c:	4804      	ldr	r0, [pc, #16]	; (8001590 <MX_USART2_UART_Init+0x58>)
 800157e:	f003 f81b 	bl	80045b8 <HAL_UART_Init>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8001588:	f7ff fd8f 	bl	80010aa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	bd80      	pop	{r7, pc}
 8001590:	200003a0 	.word	0x200003a0
 8001594:	40004400 	.word	0x40004400

08001598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b0b0      	sub	sp, #192	; 0xc0
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	2290      	movs	r2, #144	; 0x90
 80015b6:	2100      	movs	r1, #0
 80015b8:	4618      	mov	r0, r3
 80015ba:	f006 fb5b 	bl	8007c74 <memset>
  if(uartHandle->Instance==USART1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a51      	ldr	r2, [pc, #324]	; (8001708 <HAL_UART_MspInit+0x170>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d15a      	bne.n	800167e <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80015cc:	2300      	movs	r3, #0
 80015ce:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	4618      	mov	r0, r3
 80015d6:	f001 fef5 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015e0:	f7ff fd63 	bl	80010aa <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <HAL_UART_MspInit+0x174>)
 80015e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e8:	4a48      	ldr	r2, [pc, #288]	; (800170c <HAL_UART_MspInit+0x174>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6453      	str	r3, [r2, #68]	; 0x44
 80015f0:	4b46      	ldr	r3, [pc, #280]	; (800170c <HAL_UART_MspInit+0x174>)
 80015f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f4:	f003 0310 	and.w	r3, r3, #16
 80015f8:	61bb      	str	r3, [r7, #24]
 80015fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fc:	4b43      	ldr	r3, [pc, #268]	; (800170c <HAL_UART_MspInit+0x174>)
 80015fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001600:	4a42      	ldr	r2, [pc, #264]	; (800170c <HAL_UART_MspInit+0x174>)
 8001602:	f043 0302 	orr.w	r3, r3, #2
 8001606:	6313      	str	r3, [r2, #48]	; 0x30
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <HAL_UART_MspInit+0x174>)
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	617b      	str	r3, [r7, #20]
 8001612:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001614:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001618:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001628:	2303      	movs	r3, #3
 800162a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800162e:	2304      	movs	r3, #4
 8001630:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001634:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001638:	4619      	mov	r1, r3
 800163a:	4835      	ldr	r0, [pc, #212]	; (8001710 <HAL_UART_MspInit+0x178>)
 800163c:	f001 f800 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001644:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001648:	2302      	movs	r3, #2
 800164a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164e:	2301      	movs	r3, #1
 8001650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001654:	2303      	movs	r3, #3
 8001656:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800165a:	2304      	movs	r3, #4
 800165c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001664:	4619      	mov	r1, r3
 8001666:	482a      	ldr	r0, [pc, #168]	; (8001710 <HAL_UART_MspInit+0x178>)
 8001668:	f000 ffea 	bl	8002640 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2101      	movs	r1, #1
 8001670:	2025      	movs	r0, #37	; 0x25
 8001672:	f000 ff1c 	bl	80024ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001676:	2025      	movs	r0, #37	; 0x25
 8001678:	f000 ff35 	bl	80024e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800167c:	e03f      	b.n	80016fe <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a24      	ldr	r2, [pc, #144]	; (8001714 <HAL_UART_MspInit+0x17c>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d13a      	bne.n	80016fe <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800168c:	2300      	movs	r3, #0
 800168e:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001690:	f107 031c 	add.w	r3, r7, #28
 8001694:	4618      	mov	r0, r3
 8001696:	f001 fe95 	bl	80033c4 <HAL_RCCEx_PeriphCLKConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <HAL_UART_MspInit+0x10c>
      Error_Handler();
 80016a0:	f7ff fd03 	bl	80010aa <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a4:	4b19      	ldr	r3, [pc, #100]	; (800170c <HAL_UART_MspInit+0x174>)
 80016a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a8:	4a18      	ldr	r2, [pc, #96]	; (800170c <HAL_UART_MspInit+0x174>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ae:	6413      	str	r3, [r2, #64]	; 0x40
 80016b0:	4b16      	ldr	r3, [pc, #88]	; (800170c <HAL_UART_MspInit+0x174>)
 80016b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b8:	613b      	str	r3, [r7, #16]
 80016ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <HAL_UART_MspInit+0x174>)
 80016be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c0:	4a12      	ldr	r2, [pc, #72]	; (800170c <HAL_UART_MspInit+0x174>)
 80016c2:	f043 0301 	orr.w	r3, r3, #1
 80016c6:	6313      	str	r3, [r2, #48]	; 0x30
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_UART_MspInit+0x174>)
 80016ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	60fb      	str	r3, [r7, #12]
 80016d2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016d4:	230c      	movs	r3, #12
 80016d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016ec:	2307      	movs	r3, #7
 80016ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <HAL_UART_MspInit+0x180>)
 80016fa:	f000 ffa1 	bl	8002640 <HAL_GPIO_Init>
}
 80016fe:	bf00      	nop
 8001700:	37c0      	adds	r7, #192	; 0xc0
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	40011000 	.word	0x40011000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400
 8001714:	40004400 	.word	0x40004400
 8001718:	40020000 	.word	0x40020000

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001738:	4c0b      	ldr	r4, [pc, #44]	; (8001768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001746:	f7ff fe43 	bl	80013d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f006 fa59 	bl	8007c00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff fadf 	bl	8000d10 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001754:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001760:	0800c804 	.word	0x0800c804
  ldr r2, =_sbss
 8001764:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001768:	2000044c 	.word	0x2000044c

0800176c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <CAN1_RX0_IRQHandler>

0800176e <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d104      	bne.n	8001786 <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800177c:	b672      	cpsid	i
}
 800177e:	bf00      	nop
 8001780:	f7ff fc93 	bl	80010aa <Error_Handler>
 8001784:	e7fe      	b.n	8001784 <stm32_lock_init+0x16>
  lock->flag = 0;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
  lock->counter = 0;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2200      	movs	r2, #0
 8001790:	705a      	strb	r2, [r3, #1]
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b084      	sub	sp, #16
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80017a2:	f3ef 8310 	mrs	r3, PRIMASK
 80017a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80017a8:	68bb      	ldr	r3, [r7, #8]
  uint8_t flag = (uint8_t)(__get_PRIMASK() & 0x1); /* PRIMASK.PM */
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 80017b2:	b672      	cpsid	i
}
 80017b4:	bf00      	nop
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80017b6:	f3bf 8f4f 	dsb	sy
}
 80017ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80017bc:	f3bf 8f6f 	isb	sy
}
 80017c0:	bf00      	nop
  __disable_irq();
  __DSB();
  __ISB();
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <stm32_lock_acquire+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
 80017cc:	f7ff fc6d 	bl	80010aa <Error_Handler>
 80017d0:	e7fe      	b.n	80017d0 <stm32_lock_acquire+0x36>
  if (lock->counter == 0)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	785b      	ldrb	r3, [r3, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <stm32_lock_acquire+0x48>
  {
    lock->flag = flag;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7bfa      	ldrb	r2, [r7, #15]
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e008      	b.n	80017f4 <stm32_lock_acquire+0x5a>
  }
  else if (lock->counter == UINT8_MAX)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	785b      	ldrb	r3, [r3, #1]
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d104      	bne.n	80017f4 <stm32_lock_acquire+0x5a>
  __ASM volatile ("cpsid i" : : : "memory");
 80017ea:	b672      	cpsid	i
}
 80017ec:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 80017ee:	f7ff fc5c 	bl	80010aa <Error_Handler>
 80017f2:	e7fe      	b.n	80017f2 <stm32_lock_acquire+0x58>
  }
  lock->counter++;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	785b      	ldrb	r3, [r3, #1]
 80017f8:	3301      	adds	r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	705a      	strb	r2, [r3, #1]
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d104      	bne.n	8001820 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001816:	b672      	cpsid	i
}
 8001818:	bf00      	nop
 800181a:	f7ff fc46 	bl	80010aa <Error_Handler>
 800181e:	e7fe      	b.n	800181e <stm32_lock_release+0x16>
  if (lock->counter == 0)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	785b      	ldrb	r3, [r3, #1]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d104      	bne.n	8001832 <stm32_lock_release+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
}
 800182a:	bf00      	nop
  {
    STM32_LOCK_BLOCK();
 800182c:	f7ff fc3d 	bl	80010aa <Error_Handler>
 8001830:	e7fe      	b.n	8001830 <stm32_lock_release+0x28>
  }
  lock->counter--;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	785b      	ldrb	r3, [r3, #1]
 8001836:	3b01      	subs	r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	705a      	strb	r2, [r3, #1]
  if (lock->counter == 0 && lock->flag == 0)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	785b      	ldrb	r3, [r3, #1]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <stm32_lock_release+0x4a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <stm32_lock_release+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
 800184e:	b662      	cpsie	i
}
 8001850:	bf00      	nop
  {
    __enable_irq();
  }
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d105      	bne.n	8001874 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001868:	f006 f9c4 	bl	8007bf4 <__errno>
 800186c:	4603      	mov	r3, r0
 800186e:	2216      	movs	r2, #22
 8001870:	601a      	str	r2, [r3, #0]
    return;
 8001872:	e015      	b.n	80018a0 <__retarget_lock_init_recursive+0x46>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001874:	2002      	movs	r0, #2
 8001876:	f006 f9e7 	bl	8007c48 <malloc>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d005      	beq.n	8001896 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff ff6d 	bl	800176e <stm32_lock_init>
    return;
 8001894:	e004      	b.n	80018a0 <__retarget_lock_init_recursive+0x46>
  __ASM volatile ("cpsid i" : : : "memory");
 8001896:	b672      	cpsid	i
}
 8001898:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 800189a:	f7ff fc06 	bl	80010aa <Error_Handler>
 800189e:	e7fe      	b.n	800189e <__retarget_lock_init_recursive+0x44>
}
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d104      	bne.n	80018be <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80018b4:	b672      	cpsid	i
}
 80018b6:	bf00      	nop
 80018b8:	f7ff fbf7 	bl	80010aa <Error_Handler>
 80018bc:	e7fe      	b.n	80018bc <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff6a 	bl	800179a <stm32_lock_acquire>
}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d104      	bne.n	80018e6 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80018dc:	b672      	cpsid	i
}
 80018de:	bf00      	nop
 80018e0:	f7ff fbe3 	bl	80010aa <Error_Handler>
 80018e4:	e7fe      	b.n	80018e4 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff8d 	bl	8001808 <stm32_lock_release>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018fa:	2003      	movs	r0, #3
 80018fc:	f000 fdcc 	bl	8002498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001900:	200f      	movs	r0, #15
 8001902:	f000 f805 	bl	8001910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001906:	f7ff fbd5 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001918:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_InitTick+0x54>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_InitTick+0x58>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	4619      	mov	r1, r3
 8001922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001926:	fbb3 f3f1 	udiv	r3, r3, r1
 800192a:	fbb2 f3f3 	udiv	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fde7 	bl	8002502 <HAL_SYSTICK_Config>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e00e      	b.n	800195c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b0f      	cmp	r3, #15
 8001942:	d80a      	bhi.n	800195a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001944:	2200      	movs	r2, #0
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f000 fdaf 	bl	80024ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001950:	4a06      	ldr	r2, [pc, #24]	; (800196c <HAL_InitTick+0x5c>)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e000      	b.n	800195c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
}
 800195c:	4618      	mov	r0, r3
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000008 	.word	0x20000008
 8001968:	20000010 	.word	0x20000010
 800196c:	2000000c 	.word	0x2000000c

08001970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_IncTick+0x20>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	461a      	mov	r2, r3
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_IncTick+0x24>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4413      	add	r3, r2
 8001980:	4a04      	ldr	r2, [pc, #16]	; (8001994 <HAL_IncTick+0x24>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20000010 	.word	0x20000010
 8001994:	20000434 	.word	0x20000434

08001998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0
  return uwTick;
 800199c:	4b03      	ldr	r3, [pc, #12]	; (80019ac <HAL_GetTick+0x14>)
 800199e:	681b      	ldr	r3, [r3, #0]
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	20000434 	.word	0x20000434

080019b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e031      	b.n	8001a2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff f864 	bl	8000a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d116      	bne.n	8001a1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019f2:	4b10      	ldr	r3, [pc, #64]	; (8001a34 <HAL_ADC_Init+0x84>)
 80019f4:	4013      	ands	r3, r2
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fb76 	bl	80020f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	f023 0303 	bic.w	r3, r3, #3
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	; 0x40
 8001a1a:	e001      	b.n	8001a20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	ffffeefd 	.word	0xffffeefd

08001a38 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Start_IT+0x1a>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0b5      	b.n	8001bbe <HAL_ADC_Start_IT+0x186>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d018      	beq.n	8001a9a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	689a      	ldr	r2, [r3, #8]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0201 	orr.w	r2, r2, #1
 8001a76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a78:	4b54      	ldr	r3, [pc, #336]	; (8001bcc <HAL_ADC_Start_IT+0x194>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a54      	ldr	r2, [pc, #336]	; (8001bd0 <HAL_ADC_Start_IT+0x198>)
 8001a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a82:	0c9a      	lsrs	r2, r3, #18
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a8c:	e002      	b.n	8001a94 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	3b01      	subs	r3, #1
 8001a92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f9      	bne.n	8001a8e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d17d      	bne.n	8001ba4 <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001aac:	4b49      	ldr	r3, [pc, #292]	; (8001bd4 <HAL_ADC_Start_IT+0x19c>)
 8001aae:	4013      	ands	r3, r2
 8001ab0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d007      	beq.n	8001ad6 <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ace:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ade:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ae2:	d106      	bne.n	8001af2 <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae8:	f023 0206 	bic.w	r2, r3, #6
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	645a      	str	r2, [r3, #68]	; 0x44
 8001af0:	e002      	b.n	8001af8 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b08:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	6859      	ldr	r1, [r3, #4]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <HAL_ADC_Start_IT+0x1a0>)
 8001b16:	430b      	orrs	r3, r1
 8001b18:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b1a:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_ADC_Start_IT+0x1a4>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d10f      	bne.n	8001b46 <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d143      	bne.n	8001bbc <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	e03a      	b.n	8001bbc <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a25      	ldr	r2, [pc, #148]	; (8001be0 <HAL_ADC_Start_IT+0x1a8>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d10e      	bne.n	8001b6e <HAL_ADC_Start_IT+0x136>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d107      	bne.n	8001b6e <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b6c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b6e:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_ADC_Start_IT+0x1a4>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0310 	and.w	r3, r3, #16
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d120      	bne.n	8001bbc <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <HAL_ADC_Start_IT+0x1ac>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d11b      	bne.n	8001bbc <HAL_ADC_Start_IT+0x184>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d114      	bne.n	8001bbc <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	e00b      	b.n	8001bbc <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f043 0210 	orr.w	r2, r3, #16
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3714      	adds	r7, #20
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	20000008 	.word	0x20000008
 8001bd0:	431bde83 	.word	0x431bde83
 8001bd4:	fffff8fe 	.word	0xfffff8fe
 8001bd8:	04000020 	.word	0x04000020
 8001bdc:	40012300 	.word	0x40012300
 8001be0:	40012000 	.word	0x40012000
 8001be4:	40012200 	.word	0x40012200

08001be8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d049      	beq.n	8001cb2 <HAL_ADC_IRQHandler+0xca>
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d046      	beq.n	8001cb2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f003 0310 	and.w	r3, r3, #16
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d105      	bne.n	8001c3c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c34:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d12b      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d127      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d006      	beq.n	8001c6e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d119      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	685a      	ldr	r2, [r3, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f022 0220 	bic.w	r2, r2, #32
 8001c7c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c82:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d105      	bne.n	8001ca2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f8b0 	bl	8001e08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0212 	mvn.w	r2, #18
 8001cb0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f003 0304 	and.w	r3, r3, #4
 8001cb8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cc0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d057      	beq.n	8001d78 <HAL_ADC_IRQHandler+0x190>
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d054      	beq.n	8001d78 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	f003 0310 	and.w	r3, r3, #16
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d105      	bne.n	8001ce6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d139      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d12b      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d124      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d11d      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d119      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d42:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d105      	bne.n	8001d68 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 fabb 	bl	80022e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f06f 020c 	mvn.w	r2, #12
 8001d76:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d017      	beq.n	8001dbe <HAL_ADC_IRQHandler+0x1d6>
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d014      	beq.n	8001dbe <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d10d      	bne.n	8001dbe <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f834 	bl	8001e1c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f06f 0201 	mvn.w	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001dc6:	68bb      	ldr	r3, [r7, #8]
 8001dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001dcc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d015      	beq.n	8001e00 <HAL_ADC_IRQHandler+0x218>
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	f043 0202 	orr.w	r2, r3, #2
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f06f 0220 	mvn.w	r2, #32
 8001dee:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f81d 	bl	8001e30 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f06f 0220 	mvn.w	r2, #32
 8001dfe:	601a      	str	r2, [r3, #0]
  }
}
 8001e00:	bf00      	nop
 8001e02:	3718      	adds	r7, #24
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d101      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x1c>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e136      	b.n	80020ce <HAL_ADC_ConfigChannel+0x28a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2b09      	cmp	r3, #9
 8001e6e:	d93a      	bls.n	8001ee6 <HAL_ADC_ConfigChannel+0xa2>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e78:	d035      	beq.n	8001ee6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68d9      	ldr	r1, [r3, #12]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	b29b      	uxth	r3, r3
 8001e86:	461a      	mov	r2, r3
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	3b1e      	subs	r3, #30
 8001e90:	2207      	movs	r2, #7
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a8d      	ldr	r2, [pc, #564]	; (80020dc <HAL_ADC_ConfigChannel+0x298>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d10a      	bne.n	8001ec0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68d9      	ldr	r1, [r3, #12]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	061a      	lsls	r2, r3, #24
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ebe:	e035      	b.n	8001f2c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	68d9      	ldr	r1, [r3, #12]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4403      	add	r3, r0
 8001ed8:	3b1e      	subs	r3, #30
 8001eda:	409a      	lsls	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ee4:	e022      	b.n	8001f2c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6919      	ldr	r1, [r3, #16]
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	4413      	add	r3, r2
 8001efa:	2207      	movs	r2, #7
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43da      	mvns	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	400a      	ands	r2, r1
 8001f08:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	6919      	ldr	r1, [r3, #16]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	b29b      	uxth	r3, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4403      	add	r3, r0
 8001f22:	409a      	lsls	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b06      	cmp	r3, #6
 8001f32:	d824      	bhi.n	8001f7e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	3b05      	subs	r3, #5
 8001f46:	221f      	movs	r2, #31
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43da      	mvns	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	400a      	ands	r2, r1
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3b05      	subs	r3, #5
 8001f70:	fa00 f203 	lsl.w	r2, r0, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	635a      	str	r2, [r3, #52]	; 0x34
 8001f7c:	e04c      	b.n	8002018 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b0c      	cmp	r3, #12
 8001f84:	d824      	bhi.n	8001fd0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	4413      	add	r3, r2
 8001f96:	3b23      	subs	r3, #35	; 0x23
 8001f98:	221f      	movs	r2, #31
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	43da      	mvns	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	3b23      	subs	r3, #35	; 0x23
 8001fc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8001fce:	e023      	b.n	8002018 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b41      	subs	r3, #65	; 0x41
 8001fe2:	221f      	movs	r2, #31
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	400a      	ands	r2, r1
 8001ff0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685a      	ldr	r2, [r3, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	4413      	add	r3, r2
 800200a:	3b41      	subs	r3, #65	; 0x41
 800200c:	fa00 f203 	lsl.w	r2, r0, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a30      	ldr	r2, [pc, #192]	; (80020e0 <HAL_ADC_ConfigChannel+0x29c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d10a      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1f4>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800202a:	d105      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800202c:	4b2d      	ldr	r3, [pc, #180]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	4a2c      	ldr	r2, [pc, #176]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002032:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002036:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <HAL_ADC_ConfigChannel+0x29c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d10f      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x21e>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2b12      	cmp	r3, #18
 8002048:	d10b      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	4a25      	ldr	r2, [pc, #148]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002050:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002054:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002056:	4b23      	ldr	r3, [pc, #140]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4a22      	ldr	r2, [pc, #136]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800205c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002060:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a1e      	ldr	r2, [pc, #120]	; (80020e0 <HAL_ADC_ConfigChannel+0x29c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d12b      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x280>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a1a      	ldr	r2, [pc, #104]	; (80020dc <HAL_ADC_ConfigChannel+0x298>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d003      	beq.n	800207e <HAL_ADC_ConfigChannel+0x23a>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b11      	cmp	r3, #17
 800207c:	d122      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800207e:	4b19      	ldr	r3, [pc, #100]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002084:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002088:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800208a:	4b16      	ldr	r3, [pc, #88]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	4a15      	ldr	r2, [pc, #84]	; (80020e4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002090:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002094:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a10      	ldr	r2, [pc, #64]	; (80020dc <HAL_ADC_ConfigChannel+0x298>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d111      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80020a0:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <HAL_ADC_ConfigChannel+0x2a4>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a11      	ldr	r2, [pc, #68]	; (80020ec <HAL_ADC_ConfigChannel+0x2a8>)
 80020a6:	fba2 2303 	umull	r2, r3, r2, r3
 80020aa:	0c9a      	lsrs	r2, r3, #18
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020b6:	e002      	b.n	80020be <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f9      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	10000012 	.word	0x10000012
 80020e0:	40012000 	.word	0x40012000
 80020e4:	40012300 	.word	0x40012300
 80020e8:	20000008 	.word	0x20000008
 80020ec:	431bde83 	.word	0x431bde83

080020f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80020f8:	4b78      	ldr	r3, [pc, #480]	; (80022dc <ADC_Init+0x1ec>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a77      	ldr	r2, [pc, #476]	; (80022dc <ADC_Init+0x1ec>)
 80020fe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002102:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002104:	4b75      	ldr	r3, [pc, #468]	; (80022dc <ADC_Init+0x1ec>)
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4973      	ldr	r1, [pc, #460]	; (80022dc <ADC_Init+0x1ec>)
 800210e:	4313      	orrs	r3, r2
 8002110:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002120:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	021a      	lsls	r2, r3, #8
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685a      	ldr	r2, [r3, #4]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002144:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	430a      	orrs	r2, r1
 8002156:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	689a      	ldr	r2, [r3, #8]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002166:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6899      	ldr	r1, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	430a      	orrs	r2, r1
 8002178:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217e:	4a58      	ldr	r2, [pc, #352]	; (80022e0 <ADC_Init+0x1f0>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d022      	beq.n	80021ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	689a      	ldr	r2, [r3, #8]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002192:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6899      	ldr	r1, [r3, #8]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	6899      	ldr	r1, [r3, #8]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	e00f      	b.n	80021ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80021d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689a      	ldr	r2, [r3, #8]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80021e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0202 	bic.w	r2, r2, #2
 80021f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6899      	ldr	r1, [r3, #8]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	005a      	lsls	r2, r3, #1
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d01b      	beq.n	8002250 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002226:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002236:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6859      	ldr	r1, [r3, #4]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	3b01      	subs	r3, #1
 8002244:	035a      	lsls	r2, r3, #13
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	430a      	orrs	r2, r1
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	e007      	b.n	8002260 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800226e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	3b01      	subs	r3, #1
 800227c:	051a      	lsls	r2, r3, #20
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002294:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022a2:	025a      	lsls	r2, r3, #9
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	689a      	ldr	r2, [r3, #8]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6899      	ldr	r1, [r3, #8]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	029a      	lsls	r2, r3, #10
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	609a      	str	r2, [r3, #8]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	40012300 	.word	0x40012300
 80022e0:	0f000001 	.word	0x0f000001

080022e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <__NVIC_SetPriorityGrouping+0x40>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002314:	4013      	ands	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <__NVIC_SetPriorityGrouping+0x44>)
 8002322:	4313      	orrs	r3, r2
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x40>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00
 800233c:	05fa0000 	.word	0x05fa0000

08002340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <__NVIC_GetPriorityGrouping+0x18>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 0307 	and.w	r3, r3, #7
}
 800234e:	4618      	mov	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	2b00      	cmp	r3, #0
 800236c:	db0b      	blt.n	8002386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236e:	79fb      	ldrb	r3, [r7, #7]
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	4907      	ldr	r1, [pc, #28]	; (8002394 <__NVIC_EnableIRQ+0x38>)
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	095b      	lsrs	r3, r3, #5
 800237c:	2001      	movs	r0, #1
 800237e:	fa00 f202 	lsl.w	r2, r0, r2
 8002382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	e000e100 	.word	0xe000e100

08002398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
 800239e:	4603      	mov	r3, r0
 80023a0:	6039      	str	r1, [r7, #0]
 80023a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	db0a      	blt.n	80023c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	490c      	ldr	r1, [pc, #48]	; (80023e4 <__NVIC_SetPriority+0x4c>)
 80023b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b6:	0112      	lsls	r2, r2, #4
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	440b      	add	r3, r1
 80023bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c0:	e00a      	b.n	80023d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	4908      	ldr	r1, [pc, #32]	; (80023e8 <__NVIC_SetPriority+0x50>)
 80023c8:	79fb      	ldrb	r3, [r7, #7]
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	3b04      	subs	r3, #4
 80023d0:	0112      	lsls	r2, r2, #4
 80023d2:	b2d2      	uxtb	r2, r2
 80023d4:	440b      	add	r3, r1
 80023d6:	761a      	strb	r2, [r3, #24]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000e100 	.word	0xe000e100
 80023e8:	e000ed00 	.word	0xe000ed00

080023ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	f1c3 0307 	rsb	r3, r3, #7
 8002406:	2b04      	cmp	r3, #4
 8002408:	bf28      	it	cs
 800240a:	2304      	movcs	r3, #4
 800240c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3304      	adds	r3, #4
 8002412:	2b06      	cmp	r3, #6
 8002414:	d902      	bls.n	800241c <NVIC_EncodePriority+0x30>
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3b03      	subs	r3, #3
 800241a:	e000      	b.n	800241e <NVIC_EncodePriority+0x32>
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	f04f 32ff 	mov.w	r2, #4294967295
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	fa02 f303 	lsl.w	r3, r2, r3
 800242a:	43da      	mvns	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	401a      	ands	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002434:	f04f 31ff 	mov.w	r1, #4294967295
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	fa01 f303 	lsl.w	r3, r1, r3
 800243e:	43d9      	mvns	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002444:	4313      	orrs	r3, r2
         );
}
 8002446:	4618      	mov	r0, r3
 8002448:	3724      	adds	r7, #36	; 0x24
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002464:	d301      	bcc.n	800246a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002466:	2301      	movs	r3, #1
 8002468:	e00f      	b.n	800248a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246a:	4a0a      	ldr	r2, [pc, #40]	; (8002494 <SysTick_Config+0x40>)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	3b01      	subs	r3, #1
 8002470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002472:	210f      	movs	r1, #15
 8002474:	f04f 30ff 	mov.w	r0, #4294967295
 8002478:	f7ff ff8e 	bl	8002398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800247c:	4b05      	ldr	r3, [pc, #20]	; (8002494 <SysTick_Config+0x40>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002482:	4b04      	ldr	r3, [pc, #16]	; (8002494 <SysTick_Config+0x40>)
 8002484:	2207      	movs	r2, #7
 8002486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	e000e010 	.word	0xe000e010

08002498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f7ff ff29 	bl	80022f8 <__NVIC_SetPriorityGrouping>
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024bc:	2300      	movs	r3, #0
 80024be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c0:	f7ff ff3e 	bl	8002340 <__NVIC_GetPriorityGrouping>
 80024c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	6978      	ldr	r0, [r7, #20]
 80024cc:	f7ff ff8e 	bl	80023ec <NVIC_EncodePriority>
 80024d0:	4602      	mov	r2, r0
 80024d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d6:	4611      	mov	r1, r2
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff5d 	bl	8002398 <__NVIC_SetPriority>
}
 80024de:	bf00      	nop
 80024e0:	3718      	adds	r7, #24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e6:	b580      	push	{r7, lr}
 80024e8:	b082      	sub	sp, #8
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	4603      	mov	r3, r0
 80024ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff31 	bl	800235c <__NVIC_EnableIRQ>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7ff ffa2 	bl	8002454 <SysTick_Config>
 8002510:	4603      	mov	r3, r0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002528:	f7ff fa36 	bl	8001998 <HAL_GetTick>
 800252c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d008      	beq.n	800254c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e052      	b.n	80025f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f022 0216 	bic.w	r2, r2, #22
 800255a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695a      	ldr	r2, [r3, #20]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800256a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d103      	bne.n	800257c <HAL_DMA_Abort+0x62>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 0208 	bic.w	r2, r2, #8
 800258a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0201 	bic.w	r2, r2, #1
 800259a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800259c:	e013      	b.n	80025c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800259e:	f7ff f9fb 	bl	8001998 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b05      	cmp	r3, #5
 80025aa:	d90c      	bls.n	80025c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2220      	movs	r2, #32
 80025b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2203      	movs	r2, #3
 80025b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e015      	b.n	80025f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1e4      	bne.n	800259e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	223f      	movs	r2, #63	; 0x3f
 80025da:	409a      	lsls	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3710      	adds	r7, #16
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}

080025fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d004      	beq.n	8002618 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2280      	movs	r2, #128	; 0x80
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e00c      	b.n	8002632 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2205      	movs	r2, #5
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e175      	b.n	800294c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8164 	bne.w	8002946 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b01      	cmp	r3, #1
 8002688:	d005      	beq.n	8002696 <HAL_GPIO_Init+0x56>
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d130      	bne.n	80026f8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	68da      	ldr	r2, [r3, #12]
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026cc:	2201      	movs	r2, #1
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	43db      	mvns	r3, r3
 80026d6:	69ba      	ldr	r2, [r7, #24]
 80026d8:	4013      	ands	r3, r2
 80026da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 0201 	and.w	r2, r3, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b03      	cmp	r3, #3
 8002702:	d017      	beq.n	8002734 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	005b      	lsls	r3, r3, #1
 800270e:	2203      	movs	r2, #3
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b02      	cmp	r3, #2
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80be 	beq.w	8002946 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	4b66      	ldr	r3, [pc, #408]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a65      	ldr	r2, [pc, #404]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027e2:	4a61      	ldr	r2, [pc, #388]	; (8002968 <HAL_GPIO_Init+0x328>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_GPIO_Init+0x32c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d037      	beq.n	800287e <HAL_GPIO_Init+0x23e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_GPIO_Init+0x330>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d031      	beq.n	800287a <HAL_GPIO_Init+0x23a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a56      	ldr	r2, [pc, #344]	; (8002974 <HAL_GPIO_Init+0x334>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02b      	beq.n	8002876 <HAL_GPIO_Init+0x236>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a55      	ldr	r2, [pc, #340]	; (8002978 <HAL_GPIO_Init+0x338>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d025      	beq.n	8002872 <HAL_GPIO_Init+0x232>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a54      	ldr	r2, [pc, #336]	; (800297c <HAL_GPIO_Init+0x33c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01f      	beq.n	800286e <HAL_GPIO_Init+0x22e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a53      	ldr	r2, [pc, #332]	; (8002980 <HAL_GPIO_Init+0x340>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <HAL_GPIO_Init+0x22a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_GPIO_Init+0x344>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0x226>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a51      	ldr	r2, [pc, #324]	; (8002988 <HAL_GPIO_Init+0x348>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_GPIO_Init+0x222>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a50      	ldr	r2, [pc, #320]	; (800298c <HAL_GPIO_Init+0x34c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <HAL_GPIO_Init+0x21e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <HAL_GPIO_Init+0x350>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_GPIO_Init+0x21a>
 8002856:	2309      	movs	r3, #9
 8002858:	e012      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800285a:	230a      	movs	r3, #10
 800285c:	e010      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800285e:	2308      	movs	r3, #8
 8002860:	e00e      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002862:	2307      	movs	r3, #7
 8002864:	e00c      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002866:	2306      	movs	r3, #6
 8002868:	e00a      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800286a:	2305      	movs	r3, #5
 800286c:	e008      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800286e:	2304      	movs	r3, #4
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002872:	2303      	movs	r3, #3
 8002874:	e004      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002876:	2302      	movs	r3, #2
 8002878:	e002      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800287e:	2300      	movs	r3, #0
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f002 0203 	and.w	r2, r2, #3
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	4093      	lsls	r3, r2
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002890:	4935      	ldr	r1, [pc, #212]	; (8002968 <HAL_GPIO_Init+0x328>)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c2:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028ec:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028f2:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002916:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_GPIO_Init+0x354>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_GPIO_Init+0x354>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_GPIO_Init+0x354>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3301      	adds	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b0f      	cmp	r3, #15
 8002950:	f67f ae86 	bls.w	8002660 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	40013800 	.word	0x40013800
 800296c:	40020000 	.word	0x40020000
 8002970:	40020400 	.word	0x40020400
 8002974:	40020800 	.word	0x40020800
 8002978:	40020c00 	.word	0x40020c00
 800297c:	40021000 	.word	0x40021000
 8002980:	40021400 	.word	0x40021400
 8002984:	40021800 	.word	0x40021800
 8002988:	40021c00 	.word	0x40021c00
 800298c:	40022000 	.word	0x40022000
 8002990:	40022400 	.word	0x40022400
 8002994:	40013c00 	.word	0x40013c00

08002998 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	887b      	ldrh	r3, [r7, #2]
 80029aa:	4013      	ands	r3, r2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
 80029b4:	e001      	b.n	80029ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
 80029d4:	4613      	mov	r3, r2
 80029d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029d8:	787b      	ldrb	r3, [r7, #1]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d003      	beq.n	80029e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029de:	887a      	ldrh	r2, [r7, #2]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029e4:	e003      	b.n	80029ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029e6:	887b      	ldrh	r3, [r7, #2]
 80029e8:	041a      	lsls	r2, r3, #16
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	619a      	str	r2, [r3, #24]
}
 80029ee:	bf00      	nop
 80029f0:	370c      	adds	r7, #12
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a10:	6413      	str	r3, [r2, #64]	; 0x40
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1a:	603b      	str	r3, [r7, #0]
 8002a1c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a1e:	4b1e      	ldr	r3, [pc, #120]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1d      	ldr	r2, [pc, #116]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a28:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a2a:	f7fe ffb5 	bl	8001998 <HAL_GetTick>
 8002a2e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a30:	e009      	b.n	8002a46 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a32:	f7fe ffb1 	bl	8001998 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a40:	d901      	bls.n	8002a46 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e022      	b.n	8002a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a46:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a52:	d1ee      	bne.n	8002a32 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a54:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a60:	f7fe ff9a 	bl	8001998 <HAL_GetTick>
 8002a64:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a66:	e009      	b.n	8002a7c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a68:	f7fe ff96 	bl	8001998 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a76:	d901      	bls.n	8002a7c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e007      	b.n	8002a8c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a7c:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a88:	d1ee      	bne.n	8002a68 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a8a:	2300      	movs	r3, #0
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3708      	adds	r7, #8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40023800 	.word	0x40023800
 8002a98:	40007000 	.word	0x40007000

08002a9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e29b      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 8087 	beq.w	8002bce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ac0:	4b96      	ldr	r3, [pc, #600]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b04      	cmp	r3, #4
 8002aca:	d00c      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002acc:	4b93      	ldr	r3, [pc, #588]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d112      	bne.n	8002afe <HAL_RCC_OscConfig+0x62>
 8002ad8:	4b90      	ldr	r3, [pc, #576]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ae4:	d10b      	bne.n	8002afe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae6:	4b8d      	ldr	r3, [pc, #564]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d06c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x130>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d168      	bne.n	8002bcc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e275      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x7a>
 8002b08:	4b84      	ldr	r3, [pc, #528]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a83      	ldr	r2, [pc, #524]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b12:	6013      	str	r3, [r2, #0]
 8002b14:	e02e      	b.n	8002b74 <HAL_RCC_OscConfig+0xd8>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x9c>
 8002b1e:	4b7f      	ldr	r3, [pc, #508]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7e      	ldr	r2, [pc, #504]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b7c      	ldr	r3, [pc, #496]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a7b      	ldr	r2, [pc, #492]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b34:	6013      	str	r3, [r2, #0]
 8002b36:	e01d      	b.n	8002b74 <HAL_RCC_OscConfig+0xd8>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b40:	d10c      	bne.n	8002b5c <HAL_RCC_OscConfig+0xc0>
 8002b42:	4b76      	ldr	r3, [pc, #472]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a75      	ldr	r2, [pc, #468]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b4c:	6013      	str	r3, [r2, #0]
 8002b4e:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a72      	ldr	r2, [pc, #456]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e00b      	b.n	8002b74 <HAL_RCC_OscConfig+0xd8>
 8002b5c:	4b6f      	ldr	r3, [pc, #444]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a6e      	ldr	r2, [pc, #440]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b66:	6013      	str	r3, [r2, #0]
 8002b68:	4b6c      	ldr	r3, [pc, #432]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a6b      	ldr	r2, [pc, #428]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d013      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7c:	f7fe ff0c 	bl	8001998 <HAL_GetTick>
 8002b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b84:	f7fe ff08 	bl	8001998 <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	693b      	ldr	r3, [r7, #16]
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e229      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b96:	4b61      	ldr	r3, [pc, #388]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0xe8>
 8002ba2:	e014      	b.n	8002bce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fe fef8 	bl	8001998 <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bac:	f7fe fef4 	bl	8001998 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b64      	cmp	r3, #100	; 0x64
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e215      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bbe:	4b57      	ldr	r3, [pc, #348]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x110>
 8002bca:	e000      	b.n	8002bce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d069      	beq.n	8002cae <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bda:	4b50      	ldr	r3, [pc, #320]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d00b      	beq.n	8002bfe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002be6:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b08      	cmp	r3, #8
 8002bf0:	d11c      	bne.n	8002c2c <HAL_RCC_OscConfig+0x190>
 8002bf2:	4b4a      	ldr	r3, [pc, #296]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d116      	bne.n	8002c2c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bfe:	4b47      	ldr	r3, [pc, #284]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d005      	beq.n	8002c16 <HAL_RCC_OscConfig+0x17a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d001      	beq.n	8002c16 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e1e9      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b41      	ldr	r3, [pc, #260]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	493d      	ldr	r1, [pc, #244]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c2a:	e040      	b.n	8002cae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d023      	beq.n	8002c7c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c34:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a38      	ldr	r2, [pc, #224]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c40:	f7fe feaa 	bl	8001998 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c48:	f7fe fea6 	bl	8001998 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1c7      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c5a:	4b30      	ldr	r3, [pc, #192]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c66:	4b2d      	ldr	r3, [pc, #180]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4929      	ldr	r1, [pc, #164]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]
 8002c7a:	e018      	b.n	8002cae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c7c:	4b27      	ldr	r3, [pc, #156]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a26      	ldr	r2, [pc, #152]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe fe86 	bl	8001998 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c90:	f7fe fe82 	bl	8001998 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e1a3      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	4b1e      	ldr	r3, [pc, #120]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d1f0      	bne.n	8002c90 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0308 	and.w	r3, r3, #8
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d038      	beq.n	8002d2c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d019      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc2:	4b16      	ldr	r3, [pc, #88]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002cc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc6:	4a15      	ldr	r2, [pc, #84]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fe fe63 	bl	8001998 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd4:	e008      	b.n	8002ce8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd6:	f7fe fe5f 	bl	8001998 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d901      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ce4:	2303      	movs	r3, #3
 8002ce6:	e180      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce8:	4b0c      	ldr	r3, [pc, #48]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002cea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cec:	f003 0302 	and.w	r3, r3, #2
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d0f0      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x23a>
 8002cf4:	e01a      	b.n	8002d2c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf6:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfa:	4a08      	ldr	r2, [pc, #32]	; (8002d1c <HAL_RCC_OscConfig+0x280>)
 8002cfc:	f023 0301 	bic.w	r3, r3, #1
 8002d00:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d02:	f7fe fe49 	bl	8001998 <HAL_GetTick>
 8002d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0a:	f7fe fe45 	bl	8001998 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	d903      	bls.n	8002d20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e166      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
 8002d1c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	4b92      	ldr	r3, [pc, #584]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ee      	bne.n	8002d0a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80a4 	beq.w	8002e82 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3a:	4b8c      	ldr	r3, [pc, #560]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b89      	ldr	r3, [pc, #548]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a88      	ldr	r2, [pc, #544]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b86      	ldr	r3, [pc, #536]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d62:	4b83      	ldr	r3, [pc, #524]	; (8002f70 <HAL_RCC_OscConfig+0x4d4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d118      	bne.n	8002da0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002d6e:	4b80      	ldr	r3, [pc, #512]	; (8002f70 <HAL_RCC_OscConfig+0x4d4>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a7f      	ldr	r2, [pc, #508]	; (8002f70 <HAL_RCC_OscConfig+0x4d4>)
 8002d74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d7a:	f7fe fe0d 	bl	8001998 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d82:	f7fe fe09 	bl	8001998 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b64      	cmp	r3, #100	; 0x64
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e12a      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d94:	4b76      	ldr	r3, [pc, #472]	; (8002f70 <HAL_RCC_OscConfig+0x4d4>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d106      	bne.n	8002db6 <HAL_RCC_OscConfig+0x31a>
 8002da8:	4b70      	ldr	r3, [pc, #448]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dac:	4a6f      	ldr	r2, [pc, #444]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70
 8002db4:	e02d      	b.n	8002e12 <HAL_RCC_OscConfig+0x376>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x33c>
 8002dbe:	4b6b      	ldr	r3, [pc, #428]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	4a6a      	ldr	r2, [pc, #424]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002dca:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	4a67      	ldr	r2, [pc, #412]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002dd0:	f023 0304 	bic.w	r3, r3, #4
 8002dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd6:	e01c      	b.n	8002e12 <HAL_RCC_OscConfig+0x376>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d10c      	bne.n	8002dfa <HAL_RCC_OscConfig+0x35e>
 8002de0:	4b62      	ldr	r3, [pc, #392]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de4:	4a61      	ldr	r2, [pc, #388]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002de6:	f043 0304 	orr.w	r3, r3, #4
 8002dea:	6713      	str	r3, [r2, #112]	; 0x70
 8002dec:	4b5f      	ldr	r3, [pc, #380]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df0:	4a5e      	ldr	r2, [pc, #376]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002df2:	f043 0301 	orr.w	r3, r3, #1
 8002df6:	6713      	str	r3, [r2, #112]	; 0x70
 8002df8:	e00b      	b.n	8002e12 <HAL_RCC_OscConfig+0x376>
 8002dfa:	4b5c      	ldr	r3, [pc, #368]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a5b      	ldr	r2, [pc, #364]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
 8002e06:	4b59      	ldr	r3, [pc, #356]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a58      	ldr	r2, [pc, #352]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002e0c:	f023 0304 	bic.w	r3, r3, #4
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d015      	beq.n	8002e46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e1a:	f7fe fdbd 	bl	8001998 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e20:	e00a      	b.n	8002e38 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e22:	f7fe fdb9 	bl	8001998 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e0d8      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e38:	4b4c      	ldr	r3, [pc, #304]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0ee      	beq.n	8002e22 <HAL_RCC_OscConfig+0x386>
 8002e44:	e014      	b.n	8002e70 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e46:	f7fe fda7 	bl	8001998 <HAL_GetTick>
 8002e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4c:	e00a      	b.n	8002e64 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4e:	f7fe fda3 	bl	8001998 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e0c2      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e64:	4b41      	ldr	r3, [pc, #260]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ee      	bne.n	8002e4e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e70:	7dfb      	ldrb	r3, [r7, #23]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d105      	bne.n	8002e82 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e76:	4b3d      	ldr	r3, [pc, #244]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a3c      	ldr	r2, [pc, #240]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 80ae 	beq.w	8002fe8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e8c:	4b37      	ldr	r3, [pc, #220]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d06d      	beq.n	8002f74 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d14b      	bne.n	8002f38 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea0:	4b32      	ldr	r3, [pc, #200]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a31      	ldr	r2, [pc, #196]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002ea6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fd74 	bl	8001998 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb4:	f7fe fd70 	bl	8001998 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e091      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ec6:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69da      	ldr	r2, [r3, #28]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	019b      	lsls	r3, r3, #6
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	085b      	lsrs	r3, r3, #1
 8002eea:	3b01      	subs	r3, #1
 8002eec:	041b      	lsls	r3, r3, #16
 8002eee:	431a      	orrs	r2, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef4:	061b      	lsls	r3, r3, #24
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	071b      	lsls	r3, r3, #28
 8002efe:	491b      	ldr	r1, [pc, #108]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f04:	4b19      	ldr	r3, [pc, #100]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a18      	ldr	r2, [pc, #96]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f10:	f7fe fd42 	bl	8001998 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe fd3e 	bl	8001998 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e05f      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f2a:	4b10      	ldr	r3, [pc, #64]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d0f0      	beq.n	8002f18 <HAL_RCC_OscConfig+0x47c>
 8002f36:	e057      	b.n	8002fe8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f44:	f7fe fd28 	bl	8001998 <HAL_GetTick>
 8002f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4a:	e008      	b.n	8002f5e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4c:	f7fe fd24 	bl	8001998 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	2b02      	cmp	r3, #2
 8002f58:	d901      	bls.n	8002f5e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	e045      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f5e:	4b03      	ldr	r3, [pc, #12]	; (8002f6c <HAL_RCC_OscConfig+0x4d0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d1f0      	bne.n	8002f4c <HAL_RCC_OscConfig+0x4b0>
 8002f6a:	e03d      	b.n	8002fe8 <HAL_RCC_OscConfig+0x54c>
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f74:	4b1f      	ldr	r3, [pc, #124]	; (8002ff4 <HAL_RCC_OscConfig+0x558>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d030      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d129      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d122      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d119      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	085b      	lsrs	r3, r3, #1
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d001      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002fe8:	2300      	movs	r3, #0
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40023800 	.word	0x40023800

08002ff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0d0      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003010:	4b6a      	ldr	r3, [pc, #424]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d910      	bls.n	8003040 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b67      	ldr	r3, [pc, #412]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 020f 	bic.w	r2, r3, #15
 8003026:	4965      	ldr	r1, [pc, #404]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b63      	ldr	r3, [pc, #396]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0b8      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003058:	4b59      	ldr	r3, [pc, #356]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a58      	ldr	r2, [pc, #352]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 800305e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003062:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003070:	4b53      	ldr	r3, [pc, #332]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a52      	ldr	r2, [pc, #328]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307c:	4b50      	ldr	r3, [pc, #320]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	494d      	ldr	r1, [pc, #308]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d040      	beq.n	800311c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b47      	ldr	r3, [pc, #284]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d115      	bne.n	80030da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e07f      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	4b41      	ldr	r3, [pc, #260]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e073      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e06b      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030da:	4b39      	ldr	r3, [pc, #228]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4936      	ldr	r1, [pc, #216]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030ec:	f7fe fc54 	bl	8001998 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	e00a      	b.n	800310a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7fe fc50 	bl	8001998 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e053      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	4b2d      	ldr	r3, [pc, #180]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 020c 	and.w	r2, r3, #12
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	429a      	cmp	r2, r3
 800311a:	d1eb      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 030f 	and.w	r3, r3, #15
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d210      	bcs.n	800314c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b24      	ldr	r3, [pc, #144]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f023 020f 	bic.w	r2, r3, #15
 8003132:	4922      	ldr	r1, [pc, #136]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b20      	ldr	r3, [pc, #128]	; (80031bc <HAL_RCC_ClockConfig+0x1c4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e032      	b.n	80031b2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003158:	4b19      	ldr	r3, [pc, #100]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4916      	ldr	r1, [pc, #88]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	490e      	ldr	r1, [pc, #56]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800318a:	f000 f821 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 800318e:	4602      	mov	r2, r0
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_RCC_ClockConfig+0x1c8>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	490a      	ldr	r1, [pc, #40]	; (80031c4 <HAL_RCC_ClockConfig+0x1cc>)
 800319c:	5ccb      	ldrb	r3, [r1, r3]
 800319e:	fa22 f303 	lsr.w	r3, r2, r3
 80031a2:	4a09      	ldr	r2, [pc, #36]	; (80031c8 <HAL_RCC_ClockConfig+0x1d0>)
 80031a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031a6:	4b09      	ldr	r3, [pc, #36]	; (80031cc <HAL_RCC_ClockConfig+0x1d4>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fe fbb0 	bl	8001910 <HAL_InitTick>

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3710      	adds	r7, #16
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40023c00 	.word	0x40023c00
 80031c0:	40023800 	.word	0x40023800
 80031c4:	0800c338 	.word	0x0800c338
 80031c8:	20000008 	.word	0x20000008
 80031cc:	2000000c 	.word	0x2000000c

080031d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d4:	b090      	sub	sp, #64	; 0x40
 80031d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80031d8:	2300      	movs	r3, #0
 80031da:	637b      	str	r3, [r7, #52]	; 0x34
 80031dc:	2300      	movs	r3, #0
 80031de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031e0:	2300      	movs	r3, #0
 80031e2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80031e4:	2300      	movs	r3, #0
 80031e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e8:	4b59      	ldr	r3, [pc, #356]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d00d      	beq.n	8003210 <HAL_RCC_GetSysClockFreq+0x40>
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	f200 80a1 	bhi.w	800333c <HAL_RCC_GetSysClockFreq+0x16c>
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d002      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x34>
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d003      	beq.n	800320a <HAL_RCC_GetSysClockFreq+0x3a>
 8003202:	e09b      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003204:	4b53      	ldr	r3, [pc, #332]	; (8003354 <HAL_RCC_GetSysClockFreq+0x184>)
 8003206:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003208:	e09b      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800320a:	4b53      	ldr	r3, [pc, #332]	; (8003358 <HAL_RCC_GetSysClockFreq+0x188>)
 800320c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800320e:	e098      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003210:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003218:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d028      	beq.n	8003278 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003226:	4b4a      	ldr	r3, [pc, #296]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	099b      	lsrs	r3, r3, #6
 800322c:	2200      	movs	r2, #0
 800322e:	623b      	str	r3, [r7, #32]
 8003230:	627a      	str	r2, [r7, #36]	; 0x24
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003238:	2100      	movs	r1, #0
 800323a:	4b47      	ldr	r3, [pc, #284]	; (8003358 <HAL_RCC_GetSysClockFreq+0x188>)
 800323c:	fb03 f201 	mul.w	r2, r3, r1
 8003240:	2300      	movs	r3, #0
 8003242:	fb00 f303 	mul.w	r3, r0, r3
 8003246:	4413      	add	r3, r2
 8003248:	4a43      	ldr	r2, [pc, #268]	; (8003358 <HAL_RCC_GetSysClockFreq+0x188>)
 800324a:	fba0 1202 	umull	r1, r2, r0, r2
 800324e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003250:	460a      	mov	r2, r1
 8003252:	62ba      	str	r2, [r7, #40]	; 0x28
 8003254:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003256:	4413      	add	r3, r2
 8003258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800325a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800325c:	2200      	movs	r2, #0
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	61fa      	str	r2, [r7, #28]
 8003262:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003266:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800326a:	f7fd f9fd 	bl	8000668 <__aeabi_uldivmod>
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	4613      	mov	r3, r2
 8003274:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003276:	e053      	b.n	8003320 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003278:	4b35      	ldr	r3, [pc, #212]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	099b      	lsrs	r3, r3, #6
 800327e:	2200      	movs	r2, #0
 8003280:	613b      	str	r3, [r7, #16]
 8003282:	617a      	str	r2, [r7, #20]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800328a:	f04f 0b00 	mov.w	fp, #0
 800328e:	4652      	mov	r2, sl
 8003290:	465b      	mov	r3, fp
 8003292:	f04f 0000 	mov.w	r0, #0
 8003296:	f04f 0100 	mov.w	r1, #0
 800329a:	0159      	lsls	r1, r3, #5
 800329c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032a0:	0150      	lsls	r0, r2, #5
 80032a2:	4602      	mov	r2, r0
 80032a4:	460b      	mov	r3, r1
 80032a6:	ebb2 080a 	subs.w	r8, r2, sl
 80032aa:	eb63 090b 	sbc.w	r9, r3, fp
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032ba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032be:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032c2:	ebb2 0408 	subs.w	r4, r2, r8
 80032c6:	eb63 0509 	sbc.w	r5, r3, r9
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	00eb      	lsls	r3, r5, #3
 80032d4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032d8:	00e2      	lsls	r2, r4, #3
 80032da:	4614      	mov	r4, r2
 80032dc:	461d      	mov	r5, r3
 80032de:	eb14 030a 	adds.w	r3, r4, sl
 80032e2:	603b      	str	r3, [r7, #0]
 80032e4:	eb45 030b 	adc.w	r3, r5, fp
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	f04f 0200 	mov.w	r2, #0
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032f6:	4629      	mov	r1, r5
 80032f8:	028b      	lsls	r3, r1, #10
 80032fa:	4621      	mov	r1, r4
 80032fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003300:	4621      	mov	r1, r4
 8003302:	028a      	lsls	r2, r1, #10
 8003304:	4610      	mov	r0, r2
 8003306:	4619      	mov	r1, r3
 8003308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800330a:	2200      	movs	r2, #0
 800330c:	60bb      	str	r3, [r7, #8]
 800330e:	60fa      	str	r2, [r7, #12]
 8003310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003314:	f7fd f9a8 	bl	8000668 <__aeabi_uldivmod>
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4613      	mov	r3, r2
 800331e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003320:	4b0b      	ldr	r3, [pc, #44]	; (8003350 <HAL_RCC_GetSysClockFreq+0x180>)
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	0c1b      	lsrs	r3, r3, #16
 8003326:	f003 0303 	and.w	r3, r3, #3
 800332a:	3301      	adds	r3, #1
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003330:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	fbb2 f3f3 	udiv	r3, r2, r3
 8003338:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800333a:	e002      	b.n	8003342 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800333c:	4b05      	ldr	r3, [pc, #20]	; (8003354 <HAL_RCC_GetSysClockFreq+0x184>)
 800333e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003340:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003344:	4618      	mov	r0, r3
 8003346:	3740      	adds	r7, #64	; 0x40
 8003348:	46bd      	mov	sp, r7
 800334a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800334e:	bf00      	nop
 8003350:	40023800 	.word	0x40023800
 8003354:	00f42400 	.word	0x00f42400
 8003358:	017d7840 	.word	0x017d7840

0800335c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003360:	4b03      	ldr	r3, [pc, #12]	; (8003370 <HAL_RCC_GetHCLKFreq+0x14>)
 8003362:	681b      	ldr	r3, [r3, #0]
}
 8003364:	4618      	mov	r0, r3
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000008 	.word	0x20000008

08003374 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003378:	f7ff fff0 	bl	800335c <HAL_RCC_GetHCLKFreq>
 800337c:	4602      	mov	r2, r0
 800337e:	4b05      	ldr	r3, [pc, #20]	; (8003394 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	0a9b      	lsrs	r3, r3, #10
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	4903      	ldr	r1, [pc, #12]	; (8003398 <HAL_RCC_GetPCLK1Freq+0x24>)
 800338a:	5ccb      	ldrb	r3, [r1, r3]
 800338c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003390:	4618      	mov	r0, r3
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40023800 	.word	0x40023800
 8003398:	0800c348 	.word	0x0800c348

0800339c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033a0:	f7ff ffdc 	bl	800335c <HAL_RCC_GetHCLKFreq>
 80033a4:	4602      	mov	r2, r0
 80033a6:	4b05      	ldr	r3, [pc, #20]	; (80033bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	0b5b      	lsrs	r3, r3, #13
 80033ac:	f003 0307 	and.w	r3, r3, #7
 80033b0:	4903      	ldr	r1, [pc, #12]	; (80033c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b2:	5ccb      	ldrb	r3, [r1, r3]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	0800c348 	.word	0x0800c348

080033c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b088      	sub	sp, #32
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80033d0:	2300      	movs	r3, #0
 80033d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80033d8:	2300      	movs	r3, #0
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d012      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80033ec:	4b69      	ldr	r3, [pc, #420]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4a68      	ldr	r2, [pc, #416]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033f6:	6093      	str	r3, [r2, #8]
 80033f8:	4b66      	ldr	r3, [pc, #408]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003400:	4964      	ldr	r1, [pc, #400]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800340e:	2301      	movs	r3, #1
 8003410:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d017      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800341e:	4b5d      	ldr	r3, [pc, #372]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003424:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342c:	4959      	ldr	r1, [pc, #356]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800342e:	4313      	orrs	r3, r2
 8003430:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343c:	d101      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800343e:	2301      	movs	r3, #1
 8003440:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800344a:	2301      	movs	r3, #1
 800344c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d017      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800345a:	4b4e      	ldr	r3, [pc, #312]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800345c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003460:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003468:	494a      	ldr	r1, [pc, #296]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800346a:	4313      	orrs	r3, r2
 800346c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003474:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003478:	d101      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800347a:	2301      	movs	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003486:	2301      	movs	r3, #1
 8003488:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003496:	2301      	movs	r3, #1
 8003498:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0320 	and.w	r3, r3, #32
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 808b 	beq.w	80035be <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034a8:	4b3a      	ldr	r3, [pc, #232]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ac:	4a39      	ldr	r2, [pc, #228]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b2:	6413      	str	r3, [r2, #64]	; 0x40
 80034b4:	4b37      	ldr	r3, [pc, #220]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80034c0:	4b35      	ldr	r3, [pc, #212]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a34      	ldr	r2, [pc, #208]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034cc:	f7fe fa64 	bl	8001998 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034d4:	f7fe fa60 	bl	8001998 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b64      	cmp	r3, #100	; 0x64
 80034e0:	d901      	bls.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e38f      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80034e6:	4b2c      	ldr	r3, [pc, #176]	; (8003598 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0f0      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80034f2:	4b28      	ldr	r3, [pc, #160]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d035      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	429a      	cmp	r2, r3
 800350e:	d02e      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003510:	4b20      	ldr	r3, [pc, #128]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003518:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800351a:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351e:	4a1d      	ldr	r2, [pc, #116]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003524:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003526:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352a:	4a1a      	ldr	r2, [pc, #104]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800352c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003530:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003532:	4a18      	ldr	r2, [pc, #96]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800353a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d114      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003544:	f7fe fa28 	bl	8001998 <HAL_GetTick>
 8003548:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354a:	e00a      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354c:	f7fe fa24 	bl	8001998 <HAL_GetTick>
 8003550:	4602      	mov	r2, r0
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	f241 3288 	movw	r2, #5000	; 0x1388
 800355a:	4293      	cmp	r3, r2
 800355c:	d901      	bls.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e351      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003562:	4b0c      	ldr	r3, [pc, #48]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d0ee      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003576:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800357a:	d111      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800357c:	4b05      	ldr	r3, [pc, #20]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003588:	4b04      	ldr	r3, [pc, #16]	; (800359c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800358a:	400b      	ands	r3, r1
 800358c:	4901      	ldr	r1, [pc, #4]	; (8003594 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
 8003592:	e00b      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003594:	40023800 	.word	0x40023800
 8003598:	40007000 	.word	0x40007000
 800359c:	0ffffcff 	.word	0x0ffffcff
 80035a0:	4bac      	ldr	r3, [pc, #688]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4aab      	ldr	r2, [pc, #684]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035aa:	6093      	str	r3, [r2, #8]
 80035ac:	4ba9      	ldr	r3, [pc, #676]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b8:	49a6      	ldr	r1, [pc, #664]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80035ca:	4ba2      	ldr	r3, [pc, #648]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035d0:	4aa0      	ldr	r2, [pc, #640]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80035da:	4b9e      	ldr	r3, [pc, #632]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035e4:	499b      	ldr	r1, [pc, #620]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035f8:	4b96      	ldr	r3, [pc, #600]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80035fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003606:	4993      	ldr	r1, [pc, #588]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003608:	4313      	orrs	r3, r2
 800360a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00a      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800361a:	4b8e      	ldr	r3, [pc, #568]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800361c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003620:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003628:	498a      	ldr	r1, [pc, #552]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800362a:	4313      	orrs	r3, r2
 800362c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00a      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800363c:	4b85      	ldr	r3, [pc, #532]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800363e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800364a:	4982      	ldr	r1, [pc, #520]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800365e:	4b7d      	ldr	r3, [pc, #500]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003664:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366c:	4979      	ldr	r1, [pc, #484]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003680:	4b74      	ldr	r3, [pc, #464]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003686:	f023 0203 	bic.w	r2, r3, #3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	4971      	ldr	r1, [pc, #452]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003690:	4313      	orrs	r3, r2
 8003692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80036a2:	4b6c      	ldr	r3, [pc, #432]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a8:	f023 020c 	bic.w	r2, r3, #12
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036b0:	4968      	ldr	r1, [pc, #416]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00a      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036c4:	4b63      	ldr	r3, [pc, #396]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ca:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036d2:	4960      	ldr	r1, [pc, #384]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00a      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036e6:	4b5b      	ldr	r3, [pc, #364]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f4:	4957      	ldr	r1, [pc, #348]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00a      	beq.n	800371e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003708:	4b52      	ldr	r3, [pc, #328]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003716:	494f      	ldr	r1, [pc, #316]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003718:	4313      	orrs	r3, r2
 800371a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800372a:	4b4a      	ldr	r3, [pc, #296]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800372c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003730:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003738:	4946      	ldr	r1, [pc, #280]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800373a:	4313      	orrs	r3, r2
 800373c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800374c:	4b41      	ldr	r3, [pc, #260]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800375a:	493e      	ldr	r1, [pc, #248]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00a      	beq.n	8003784 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800376e:	4b39      	ldr	r3, [pc, #228]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003774:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800377c:	4935      	ldr	r1, [pc, #212]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800377e:	4313      	orrs	r3, r2
 8003780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00a      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003790:	4b30      	ldr	r3, [pc, #192]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003796:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800379e:	492d      	ldr	r1, [pc, #180]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d011      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80037b2:	4b28      	ldr	r3, [pc, #160]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037c0:	4924      	ldr	r1, [pc, #144]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037d0:	d101      	bne.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80037d2:	2301      	movs	r3, #1
 80037d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d00a      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037f2:	4b18      	ldr	r3, [pc, #96]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80037f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003800:	4914      	ldr	r1, [pc, #80]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003802:	4313      	orrs	r3, r2
 8003804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003814:	4b0f      	ldr	r3, [pc, #60]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003824:	490b      	ldr	r1, [pc, #44]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00f      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003848:	4902      	ldr	r1, [pc, #8]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800384a:	4313      	orrs	r3, r2
 800384c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003850:	e002      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003852:	bf00      	nop
 8003854:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00b      	beq.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003864:	4b8a      	ldr	r3, [pc, #552]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800386a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	4986      	ldr	r1, [pc, #536]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003888:	4b81      	ldr	r3, [pc, #516]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800388a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800388e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003898:	497d      	ldr	r1, [pc, #500]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800389a:	4313      	orrs	r3, r2
 800389c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d006      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	f000 80d6 	beq.w	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038b4:	4b76      	ldr	r3, [pc, #472]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a75      	ldr	r2, [pc, #468]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038c0:	f7fe f86a 	bl	8001998 <HAL_GetTick>
 80038c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038c6:	e008      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80038c8:	f7fe f866 	bl	8001998 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	; 0x64
 80038d4:	d901      	bls.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	e195      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80038da:	4b6d      	ldr	r3, [pc, #436]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d1f0      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d021      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d11d      	bne.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80038fa:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80038fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003900:	0c1b      	lsrs	r3, r3, #16
 8003902:	f003 0303 	and.w	r3, r3, #3
 8003906:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003908:	4b61      	ldr	r3, [pc, #388]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800390e:	0e1b      	lsrs	r3, r3, #24
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	019a      	lsls	r2, r3, #6
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	041b      	lsls	r3, r3, #16
 8003920:	431a      	orrs	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	061b      	lsls	r3, r3, #24
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	071b      	lsls	r3, r3, #28
 800392e:	4958      	ldr	r1, [pc, #352]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d004      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003946:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800394a:	d00a      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02e      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003960:	d129      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003962:	4b4b      	ldr	r3, [pc, #300]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	f003 0303 	and.w	r3, r3, #3
 800396e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003970:	4b47      	ldr	r3, [pc, #284]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003976:	0f1b      	lsrs	r3, r3, #28
 8003978:	f003 0307 	and.w	r3, r3, #7
 800397c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	019a      	lsls	r2, r3, #6
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	061b      	lsls	r3, r3, #24
 8003990:	431a      	orrs	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	071b      	lsls	r3, r3, #28
 8003996:	493e      	ldr	r1, [pc, #248]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800399e:	4b3c      	ldr	r3, [pc, #240]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039a4:	f023 021f 	bic.w	r2, r3, #31
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	3b01      	subs	r3, #1
 80039ae:	4938      	ldr	r1, [pc, #224]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01d      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039c2:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039c8:	0e1b      	lsrs	r3, r3, #24
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039d0:	4b2f      	ldr	r3, [pc, #188]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039d6:	0f1b      	lsrs	r3, r3, #28
 80039d8:	f003 0307 	and.w	r3, r3, #7
 80039dc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	019a      	lsls	r2, r3, #6
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	041b      	lsls	r3, r3, #16
 80039ea:	431a      	orrs	r2, r3
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	061b      	lsls	r3, r3, #24
 80039f0:	431a      	orrs	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	071b      	lsls	r3, r3, #28
 80039f6:	4926      	ldr	r1, [pc, #152]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d011      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	019a      	lsls	r2, r3, #6
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	041b      	lsls	r3, r3, #16
 8003a16:	431a      	orrs	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	061b      	lsls	r3, r3, #24
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	491a      	ldr	r1, [pc, #104]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a17      	ldr	r2, [pc, #92]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a38:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a3a:	f7fd ffad 	bl	8001998 <HAL_GetTick>
 8003a3e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a42:	f7fd ffa9 	bl	8001998 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b64      	cmp	r3, #100	; 0x64
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e0d8      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a54:	4b0e      	ldr	r3, [pc, #56]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	f040 80ce 	bne.w	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003a68:	4b09      	ldr	r3, [pc, #36]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a08      	ldr	r2, [pc, #32]	; (8003a90 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a74:	f7fd ff90 	bl	8001998 <HAL_GetTick>
 8003a78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a7a:	e00b      	b.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003a7c:	f7fd ff8c 	bl	8001998 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d904      	bls.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0bb      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003a94:	4b5e      	ldr	r3, [pc, #376]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003aa0:	d0ec      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d02e      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d12a      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003aca:	4b51      	ldr	r3, [pc, #324]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad0:	0c1b      	lsrs	r3, r3, #16
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003ad8:	4b4d      	ldr	r3, [pc, #308]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ade:	0f1b      	lsrs	r3, r3, #28
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	019a      	lsls	r2, r3, #6
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	041b      	lsls	r3, r3, #16
 8003af0:	431a      	orrs	r2, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	061b      	lsls	r3, r3, #24
 8003af8:	431a      	orrs	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	071b      	lsls	r3, r3, #28
 8003afe:	4944      	ldr	r1, [pc, #272]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b06:	4b42      	ldr	r3, [pc, #264]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b14:	3b01      	subs	r3, #1
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	493d      	ldr	r1, [pc, #244]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d022      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b34:	d11d      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3c:	0e1b      	lsrs	r3, r3, #24
 8003b3e:	f003 030f 	and.w	r3, r3, #15
 8003b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b44:	4b32      	ldr	r3, [pc, #200]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4a:	0f1b      	lsrs	r3, r3, #28
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	019a      	lsls	r2, r3, #6
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	041b      	lsls	r3, r3, #16
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	061b      	lsls	r3, r3, #24
 8003b64:	431a      	orrs	r2, r3
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	071b      	lsls	r3, r3, #28
 8003b6a:	4929      	ldr	r1, [pc, #164]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d028      	beq.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b7e:	4b24      	ldr	r3, [pc, #144]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	0e1b      	lsrs	r3, r3, #24
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b8c:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b92:	0c1b      	lsrs	r3, r3, #16
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	019a      	lsls	r2, r3, #6
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	041b      	lsls	r3, r3, #16
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	061b      	lsls	r3, r3, #24
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	071b      	lsls	r3, r3, #28
 8003bb2:	4917      	ldr	r1, [pc, #92]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bba:	4b15      	ldr	r3, [pc, #84]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	4911      	ldr	r1, [pc, #68]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0e      	ldr	r2, [pc, #56]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bdc:	f7fd fedc 	bl	8001998 <HAL_GetTick>
 8003be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003be4:	f7fd fed8 	bl	8001998 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b64      	cmp	r3, #100	; 0x64
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e007      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bf6:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c02:	d1ef      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3720      	adds	r7, #32
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800

08003c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d101      	bne.n	8003c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	e049      	b.n	8003cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7fd fc28 	bl	8001490 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2202      	movs	r2, #2
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3304      	adds	r3, #4
 8003c50:	4619      	mov	r1, r3
 8003c52:	4610      	mov	r0, r2
 8003c54:	f000 faca 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d001      	beq.n	8003cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e054      	b.n	8003d86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2202      	movs	r2, #2
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68da      	ldr	r2, [r3, #12]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f042 0201 	orr.w	r2, r2, #1
 8003cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a26      	ldr	r2, [pc, #152]	; (8003d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d022      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d06:	d01d      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a22      	ldr	r2, [pc, #136]	; (8003d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d018      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a21      	ldr	r2, [pc, #132]	; (8003d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d013      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1f      	ldr	r2, [pc, #124]	; (8003da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d00e      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	; (8003da4 <HAL_TIM_Base_Start_IT+0xe0>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d009      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1c      	ldr	r2, [pc, #112]	; (8003da8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d004      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0x80>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <HAL_TIM_Base_Start_IT+0xe8>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d115      	bne.n	8003d70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689a      	ldr	r2, [r3, #8]
 8003d4a:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_TIM_Base_Start_IT+0xec>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2b06      	cmp	r3, #6
 8003d54:	d015      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0xbe>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d011      	beq.n	8003d82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f042 0201 	orr.w	r2, r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6e:	e008      	b.n	8003d82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f042 0201 	orr.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	e000      	b.n	8003d84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40010000 	.word	0x40010000
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40000c00 	.word	0x40000c00
 8003da4:	40010400 	.word	0x40010400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40001800 	.word	0x40001800
 8003db0:	00010007 	.word	0x00010007

08003db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b082      	sub	sp, #8
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d122      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0302 	and.w	r3, r3, #2
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d11b      	bne.n	8003e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f06f 0202 	mvn.w	r2, #2
 8003de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2201      	movs	r2, #1
 8003de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f9da 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003dfc:	e005      	b.n	8003e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f9cc 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f000 f9dd 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	f003 0304 	and.w	r3, r3, #4
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d122      	bne.n	8003e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	d11b      	bne.n	8003e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f06f 0204 	mvn.w	r2, #4
 8003e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2202      	movs	r2, #2
 8003e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d003      	beq.n	8003e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f9b0 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003e50:	e005      	b.n	8003e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f9a2 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f9b3 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b08      	cmp	r3, #8
 8003e70:	d122      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	f003 0308 	and.w	r3, r3, #8
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d11b      	bne.n	8003eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f06f 0208 	mvn.w	r2, #8
 8003e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	69db      	ldr	r3, [r3, #28]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 f986 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003ea4:	e005      	b.n	8003eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f978 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f989 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	f003 0310 	and.w	r3, r3, #16
 8003ec2:	2b10      	cmp	r3, #16
 8003ec4:	d122      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d11b      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0210 	mvn.w	r2, #16
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2208      	movs	r2, #8
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f95c 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f94e 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f95f 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d10e      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d107      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0201 	mvn.w	r2, #1
 8003f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f928 	bl	8004188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d10e      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f50:	2b80      	cmp	r3, #128	; 0x80
 8003f52:	d107      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fb16 	bl	8004590 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f72:	d10e      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7e:	2b80      	cmp	r3, #128	; 0x80
 8003f80:	d107      	bne.n	8003f92 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fb09 	bl	80045a4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d10e      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003faa:	2b40      	cmp	r3, #64	; 0x40
 8003fac:	d107      	bne.n	8003fbe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f90d 	bl	80041d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d10e      	bne.n	8003fea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b20      	cmp	r3, #32
 8003fd8:	d107      	bne.n	8003fea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f06f 0220 	mvn.w	r2, #32
 8003fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f000 fac9 	bl	800457c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004008:	2b01      	cmp	r3, #1
 800400a:	d101      	bne.n	8004010 <HAL_TIM_ConfigClockSource+0x1c>
 800400c:	2302      	movs	r3, #2
 800400e:	e0b4      	b.n	800417a <HAL_TIM_ConfigClockSource+0x186>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	4b56      	ldr	r3, [pc, #344]	; (8004184 <HAL_TIM_ConfigClockSource+0x190>)
 800402c:	4013      	ands	r3, r2
 800402e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004036:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004048:	d03e      	beq.n	80040c8 <HAL_TIM_ConfigClockSource+0xd4>
 800404a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800404e:	f200 8087 	bhi.w	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004056:	f000 8086 	beq.w	8004166 <HAL_TIM_ConfigClockSource+0x172>
 800405a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405e:	d87f      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004060:	2b70      	cmp	r3, #112	; 0x70
 8004062:	d01a      	beq.n	800409a <HAL_TIM_ConfigClockSource+0xa6>
 8004064:	2b70      	cmp	r3, #112	; 0x70
 8004066:	d87b      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004068:	2b60      	cmp	r3, #96	; 0x60
 800406a:	d050      	beq.n	800410e <HAL_TIM_ConfigClockSource+0x11a>
 800406c:	2b60      	cmp	r3, #96	; 0x60
 800406e:	d877      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004070:	2b50      	cmp	r3, #80	; 0x50
 8004072:	d03c      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0xfa>
 8004074:	2b50      	cmp	r3, #80	; 0x50
 8004076:	d873      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004078:	2b40      	cmp	r3, #64	; 0x40
 800407a:	d058      	beq.n	800412e <HAL_TIM_ConfigClockSource+0x13a>
 800407c:	2b40      	cmp	r3, #64	; 0x40
 800407e:	d86f      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004080:	2b30      	cmp	r3, #48	; 0x30
 8004082:	d064      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15a>
 8004084:	2b30      	cmp	r3, #48	; 0x30
 8004086:	d86b      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b20      	cmp	r3, #32
 800408a:	d060      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15a>
 800408c:	2b20      	cmp	r3, #32
 800408e:	d867      	bhi.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b00      	cmp	r3, #0
 8004092:	d05c      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15a>
 8004094:	2b10      	cmp	r3, #16
 8004096:	d05a      	beq.n	800414e <HAL_TIM_ConfigClockSource+0x15a>
 8004098:	e062      	b.n	8004160 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6899      	ldr	r1, [r3, #8]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f000 f9b9 	bl	8004420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	609a      	str	r2, [r3, #8]
      break;
 80040c6:	e04f      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6818      	ldr	r0, [r3, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f000 f9a2 	bl	8004420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689a      	ldr	r2, [r3, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040ea:	609a      	str	r2, [r3, #8]
      break;
 80040ec:	e03c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6818      	ldr	r0, [r3, #0]
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6859      	ldr	r1, [r3, #4]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	461a      	mov	r2, r3
 80040fc:	f000 f916 	bl	800432c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2150      	movs	r1, #80	; 0x50
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f96f 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 800410c:	e02c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6818      	ldr	r0, [r3, #0]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	461a      	mov	r2, r3
 800411c:	f000 f935 	bl	800438a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2160      	movs	r1, #96	; 0x60
 8004126:	4618      	mov	r0, r3
 8004128:	f000 f95f 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 800412c:	e01c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6818      	ldr	r0, [r3, #0]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	6859      	ldr	r1, [r3, #4]
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	461a      	mov	r2, r3
 800413c:	f000 f8f6 	bl	800432c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2140      	movs	r1, #64	; 0x40
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f94f 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 800414c:	e00c      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4619      	mov	r1, r3
 8004158:	4610      	mov	r0, r2
 800415a:	f000 f946 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 800415e:	e003      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	73fb      	strb	r3, [r7, #15]
      break;
 8004164:	e000      	b.n	8004168 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004166:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004178:	7bfb      	ldrb	r3, [r7, #15]
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	fffeff88 	.word	0xfffeff88

08004188 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004190:	bf00      	nop
 8004192:	370c      	adds	r7, #12
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a40      	ldr	r2, [pc, #256]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d013      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d00f      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a3d      	ldr	r2, [pc, #244]	; (8004304 <TIM_Base_SetConfig+0x118>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d00b      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a3c      	ldr	r2, [pc, #240]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d007      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a3b      	ldr	r2, [pc, #236]	; (800430c <TIM_Base_SetConfig+0x120>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_Base_SetConfig+0x40>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a3a      	ldr	r2, [pc, #232]	; (8004310 <TIM_Base_SetConfig+0x124>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d108      	bne.n	800423e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004232:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4313      	orrs	r3, r2
 800423c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a2f      	ldr	r2, [pc, #188]	; (8004300 <TIM_Base_SetConfig+0x114>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d02b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800424c:	d027      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a2c      	ldr	r2, [pc, #176]	; (8004304 <TIM_Base_SetConfig+0x118>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d023      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <TIM_Base_SetConfig+0x11c>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a2a      	ldr	r2, [pc, #168]	; (800430c <TIM_Base_SetConfig+0x120>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d01b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a29      	ldr	r2, [pc, #164]	; (8004310 <TIM_Base_SetConfig+0x124>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d017      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a28      	ldr	r2, [pc, #160]	; (8004314 <TIM_Base_SetConfig+0x128>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d013      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a27      	ldr	r2, [pc, #156]	; (8004318 <TIM_Base_SetConfig+0x12c>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d00f      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a26      	ldr	r2, [pc, #152]	; (800431c <TIM_Base_SetConfig+0x130>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d00b      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4a25      	ldr	r2, [pc, #148]	; (8004320 <TIM_Base_SetConfig+0x134>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d007      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a24      	ldr	r2, [pc, #144]	; (8004324 <TIM_Base_SetConfig+0x138>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0xb2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a23      	ldr	r2, [pc, #140]	; (8004328 <TIM_Base_SetConfig+0x13c>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d108      	bne.n	80042b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	68fa      	ldr	r2, [r7, #12]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	4a0a      	ldr	r2, [pc, #40]	; (8004300 <TIM_Base_SetConfig+0x114>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d003      	beq.n	80042e4 <TIM_Base_SetConfig+0xf8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a0c      	ldr	r2, [pc, #48]	; (8004310 <TIM_Base_SetConfig+0x124>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d103      	bne.n	80042ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	615a      	str	r2, [r3, #20]
}
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	40010000 	.word	0x40010000
 8004304:	40000400 	.word	0x40000400
 8004308:	40000800 	.word	0x40000800
 800430c:	40000c00 	.word	0x40000c00
 8004310:	40010400 	.word	0x40010400
 8004314:	40014000 	.word	0x40014000
 8004318:	40014400 	.word	0x40014400
 800431c:	40014800 	.word	0x40014800
 8004320:	40001800 	.word	0x40001800
 8004324:	40001c00 	.word	0x40001c00
 8004328:	40002000 	.word	0x40002000

0800432c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 030a 	bic.w	r3, r3, #10
 8004368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438a:	b480      	push	{r7}
 800438c:	b087      	sub	sp, #28
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0210 	bic.w	r2, r3, #16
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	031b      	lsls	r3, r3, #12
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	f043 0307 	orr.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	431a      	orrs	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004460:	b480      	push	{r7}
 8004462:	b085      	sub	sp, #20
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004474:	2302      	movs	r3, #2
 8004476:	e06d      	b.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a30      	ldr	r2, [pc, #192]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d004      	beq.n	80044ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a2f      	ldr	r2, [pc, #188]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d108      	bne.n	80044be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80044b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a20      	ldr	r2, [pc, #128]	; (8004560 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d022      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d01d      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a1d      	ldr	r2, [pc, #116]	; (8004568 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d018      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1c      	ldr	r2, [pc, #112]	; (800456c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d013      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1a      	ldr	r2, [pc, #104]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d00e      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a15      	ldr	r2, [pc, #84]	; (8004564 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d009      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a16      	ldr	r2, [pc, #88]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d004      	beq.n	8004528 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a15      	ldr	r2, [pc, #84]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d10c      	bne.n	8004542 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800452e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	68ba      	ldr	r2, [r7, #8]
 8004536:	4313      	orrs	r3, r2
 8004538:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40010000 	.word	0x40010000
 8004564:	40010400 	.word	0x40010400
 8004568:	40000400 	.word	0x40000400
 800456c:	40000800 	.word	0x40000800
 8004570:	40000c00 	.word	0x40000c00
 8004574:	40014000 	.word	0x40014000
 8004578:	40001800 	.word	0x40001800

0800457c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e040      	b.n	800464c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc ffdc 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2224      	movs	r2, #36	; 0x24
 80045e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fb3e 	bl	8004c78 <UART_SetConfig>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d101      	bne.n	8004606 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e022      	b.n	800464c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 fd96 	bl	8005140 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689a      	ldr	r2, [r3, #8]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fe1d 	bl	8005284 <UART_CheckIdleState>
 800464a:	4603      	mov	r3, r0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b0ba      	sub	sp, #232	; 0xe8
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800467a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800467e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004682:	4013      	ands	r3, r2
 8004684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004688:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800468c:	2b00      	cmp	r3, #0
 800468e:	d115      	bne.n	80046bc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d00f      	beq.n	80046bc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800469c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a0:	f003 0320 	and.w	r3, r3, #32
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d009      	beq.n	80046bc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 82ac 	beq.w	8004c0a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	4798      	blx	r3
      }
      return;
 80046ba:	e2a6      	b.n	8004c0a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80046bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	f000 8117 	beq.w	80048f4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80046c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80046d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80046d6:	4b85      	ldr	r3, [pc, #532]	; (80048ec <HAL_UART_IRQHandler+0x298>)
 80046d8:	4013      	ands	r3, r2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 810a 	beq.w	80048f4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80046e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d011      	beq.n	8004710 <HAL_UART_IRQHandler+0xbc>
 80046ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d00b      	beq.n	8004710 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004706:	f043 0201 	orr.w	r2, r3, #1
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d011      	beq.n	8004740 <HAL_UART_IRQHandler+0xec>
 800471c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00b      	beq.n	8004740 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2202      	movs	r2, #2
 800472e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004736:	f043 0204 	orr.w	r2, r3, #4
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d011      	beq.n	8004770 <HAL_UART_IRQHandler+0x11c>
 800474c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00b      	beq.n	8004770 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2204      	movs	r2, #4
 800475e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004766:	f043 0202 	orr.w	r2, r3, #2
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004774:	f003 0308 	and.w	r3, r3, #8
 8004778:	2b00      	cmp	r3, #0
 800477a:	d017      	beq.n	80047ac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800477c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004780:	f003 0320 	and.w	r3, r3, #32
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004790:	2b00      	cmp	r3, #0
 8004792:	d00b      	beq.n	80047ac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2208      	movs	r2, #8
 800479a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047a2:	f043 0208 	orr.w	r2, r3, #8
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d012      	beq.n	80047de <HAL_UART_IRQHandler+0x18a>
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00c      	beq.n	80047de <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d4:	f043 0220 	orr.w	r2, r3, #32
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8212 	beq.w	8004c0e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80047ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00d      	beq.n	8004812 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80047f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004818:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d005      	beq.n	8004836 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800482a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800482e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004832:	2b00      	cmp	r3, #0
 8004834:	d04f      	beq.n	80048d6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fe37 	bl	80054aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d141      	bne.n	80048ce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3308      	adds	r3, #8
 8004850:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004854:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004858:	e853 3f00 	ldrex	r3, [r3]
 800485c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004860:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004864:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004868:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3308      	adds	r3, #8
 8004872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004876:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800487a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800488e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1d9      	bne.n	800484a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489a:	2b00      	cmp	r3, #0
 800489c:	d013      	beq.n	80048c6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a2:	4a13      	ldr	r2, [pc, #76]	; (80048f0 <HAL_UART_IRQHandler+0x29c>)
 80048a4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fd fea5 	bl	80025fa <HAL_DMA_Abort_IT>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80048c0:	4610      	mov	r0, r2
 80048c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	e00f      	b.n	80048e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f9b6 	bl	8004c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048cc:	e00b      	b.n	80048e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f9b2 	bl	8004c38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048d4:	e007      	b.n	80048e6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f9ae 	bl	8004c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80048e4:	e193      	b.n	8004c0e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048e6:	bf00      	nop
    return;
 80048e8:	e191      	b.n	8004c0e <HAL_UART_IRQHandler+0x5ba>
 80048ea:	bf00      	nop
 80048ec:	04000120 	.word	0x04000120
 80048f0:	08005573 	.word	0x08005573

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	f040 814c 	bne.w	8004b96 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80048fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 8145 	beq.w	8004b96 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800490c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004910:	f003 0310 	and.w	r3, r3, #16
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 813e 	beq.w	8004b96 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2210      	movs	r2, #16
 8004920:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492c:	2b40      	cmp	r3, #64	; 0x40
 800492e:	f040 80b6 	bne.w	8004a9e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800493e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 8165 	beq.w	8004c12 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800494e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004952:	429a      	cmp	r2, r3
 8004954:	f080 815d 	bcs.w	8004c12 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800495e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800496c:	f000 8086 	beq.w	8004a7c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004978:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800497c:	e853 3f00 	ldrex	r3, [r3]
 8004980:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	461a      	mov	r2, r3
 8004996:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800499a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800499e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80049a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80049aa:	e841 2300 	strex	r3, r2, [r1]
 80049ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80049b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1da      	bne.n	8004970 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	3308      	adds	r3, #8
 80049c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049c4:	e853 3f00 	ldrex	r3, [r3]
 80049c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80049ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	3308      	adds	r3, #8
 80049da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80049de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80049e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80049e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80049f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e1      	bne.n	80049ba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004a1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004a1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004a20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004a22:	e841 2300 	strex	r3, r2, [r1]
 8004a26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004a28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1e3      	bne.n	80049f6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2220      	movs	r2, #32
 8004a32:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a44:	e853 3f00 	ldrex	r3, [r3]
 8004a48:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4c:	f023 0310 	bic.w	r3, r3, #16
 8004a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	461a      	mov	r2, r3
 8004a5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a5e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a60:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a62:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a66:	e841 2300 	strex	r3, r2, [r1]
 8004a6a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e4      	bne.n	8004a3c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fd fd4f 	bl	800251a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004a8e:	b29b      	uxth	r3, r3
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	4619      	mov	r1, r3
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f8d8 	bl	8004c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a9c:	e0b9      	b.n	8004c12 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	f000 80ab 	beq.w	8004c16 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8004ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 80a6 	beq.w	8004c16 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad2:	e853 3f00 	ldrex	r3, [r3]
 8004ad6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ad8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ada:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004aec:	647b      	str	r3, [r7, #68]	; 0x44
 8004aee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e4      	bne.n	8004aca <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3308      	adds	r3, #8
 8004b06:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	e853 3f00 	ldrex	r3, [r3]
 8004b0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f023 0301 	bic.w	r3, r3, #1
 8004b16:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3308      	adds	r3, #8
 8004b20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004b24:	633a      	str	r2, [r7, #48]	; 0x30
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2c:	e841 2300 	strex	r3, r2, [r1]
 8004b30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d1e3      	bne.n	8004b00 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f023 0310 	bic.w	r3, r3, #16
 8004b60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	69b9      	ldr	r1, [r7, #24]
 8004b74:	69fa      	ldr	r2, [r7, #28]
 8004b76:	e841 2300 	strex	r3, r2, [r1]
 8004b7a:	617b      	str	r3, [r7, #20]
   return(result);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e4      	bne.n	8004b4c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2202      	movs	r2, #2
 8004b86:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b88:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f85c 	bl	8004c4c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b94:	e03f      	b.n	8004c16 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x56c>
 8004ba2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d008      	beq.n	8004bc0 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004bb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 f853 	bl	8004c64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bbe:	e02d      	b.n	8004c1c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00e      	beq.n	8004bea <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01c      	beq.n	8004c1a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	4798      	blx	r3
    }
    return;
 8004be8:	e017      	b.n	8004c1a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d012      	beq.n	8004c1c <HAL_UART_IRQHandler+0x5c8>
 8004bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00c      	beq.n	8004c1c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fccb 	bl	800559e <UART_EndTransmit_IT>
    return;
 8004c08:	e008      	b.n	8004c1c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004c0a:	bf00      	nop
 8004c0c:	e006      	b.n	8004c1c <HAL_UART_IRQHandler+0x5c8>
    return;
 8004c0e:	bf00      	nop
 8004c10:	e004      	b.n	8004c1c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004c12:	bf00      	nop
 8004c14:	e002      	b.n	8004c1c <HAL_UART_IRQHandler+0x5c8>
      return;
 8004c16:	bf00      	nop
 8004c18:	e000      	b.n	8004c1c <HAL_UART_IRQHandler+0x5c8>
    return;
 8004c1a:	bf00      	nop
  }

}
 8004c1c:	37e8      	adds	r7, #232	; 0xe8
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop

08004c24 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c40:	bf00      	nop
 8004c42:	370c      	adds	r7, #12
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr

08004c4c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b083      	sub	sp, #12
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	460b      	mov	r3, r1
 8004c56:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c58:	bf00      	nop
 8004c5a:	370c      	adds	r7, #12
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr

08004c64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr

08004c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	691b      	ldr	r3, [r3, #16]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	695b      	ldr	r3, [r3, #20]
 8004c92:	431a      	orrs	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	69db      	ldr	r3, [r3, #28]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4ba6      	ldr	r3, [pc, #664]	; (8004f3c <UART_SetConfig+0x2c4>)
 8004ca4:	4013      	ands	r3, r2
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	6979      	ldr	r1, [r7, #20]
 8004cac:	430b      	orrs	r3, r1
 8004cae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	68da      	ldr	r2, [r3, #12]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a94      	ldr	r2, [pc, #592]	; (8004f40 <UART_SetConfig+0x2c8>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d120      	bne.n	8004d36 <UART_SetConfig+0xbe>
 8004cf4:	4b93      	ldr	r3, [pc, #588]	; (8004f44 <UART_SetConfig+0x2cc>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfa:	f003 0303 	and.w	r3, r3, #3
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d816      	bhi.n	8004d30 <UART_SetConfig+0xb8>
 8004d02:	a201      	add	r2, pc, #4	; (adr r2, 8004d08 <UART_SetConfig+0x90>)
 8004d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d08:	08004d19 	.word	0x08004d19
 8004d0c:	08004d25 	.word	0x08004d25
 8004d10:	08004d1f 	.word	0x08004d1f
 8004d14:	08004d2b 	.word	0x08004d2b
 8004d18:	2301      	movs	r3, #1
 8004d1a:	77fb      	strb	r3, [r7, #31]
 8004d1c:	e150      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004d1e:	2302      	movs	r3, #2
 8004d20:	77fb      	strb	r3, [r7, #31]
 8004d22:	e14d      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004d24:	2304      	movs	r3, #4
 8004d26:	77fb      	strb	r3, [r7, #31]
 8004d28:	e14a      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004d2a:	2308      	movs	r3, #8
 8004d2c:	77fb      	strb	r3, [r7, #31]
 8004d2e:	e147      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004d30:	2310      	movs	r3, #16
 8004d32:	77fb      	strb	r3, [r7, #31]
 8004d34:	e144      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a83      	ldr	r2, [pc, #524]	; (8004f48 <UART_SetConfig+0x2d0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d132      	bne.n	8004da6 <UART_SetConfig+0x12e>
 8004d40:	4b80      	ldr	r3, [pc, #512]	; (8004f44 <UART_SetConfig+0x2cc>)
 8004d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d46:	f003 030c 	and.w	r3, r3, #12
 8004d4a:	2b0c      	cmp	r3, #12
 8004d4c:	d828      	bhi.n	8004da0 <UART_SetConfig+0x128>
 8004d4e:	a201      	add	r2, pc, #4	; (adr r2, 8004d54 <UART_SetConfig+0xdc>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d89 	.word	0x08004d89
 8004d58:	08004da1 	.word	0x08004da1
 8004d5c:	08004da1 	.word	0x08004da1
 8004d60:	08004da1 	.word	0x08004da1
 8004d64:	08004d95 	.word	0x08004d95
 8004d68:	08004da1 	.word	0x08004da1
 8004d6c:	08004da1 	.word	0x08004da1
 8004d70:	08004da1 	.word	0x08004da1
 8004d74:	08004d8f 	.word	0x08004d8f
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004da1 	.word	0x08004da1
 8004d80:	08004da1 	.word	0x08004da1
 8004d84:	08004d9b 	.word	0x08004d9b
 8004d88:	2300      	movs	r3, #0
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e118      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e115      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004d94:	2304      	movs	r3, #4
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e112      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e10f      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004da0:	2310      	movs	r3, #16
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e10c      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a68      	ldr	r2, [pc, #416]	; (8004f4c <UART_SetConfig+0x2d4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d120      	bne.n	8004df2 <UART_SetConfig+0x17a>
 8004db0:	4b64      	ldr	r3, [pc, #400]	; (8004f44 <UART_SetConfig+0x2cc>)
 8004db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004db6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dba:	2b30      	cmp	r3, #48	; 0x30
 8004dbc:	d013      	beq.n	8004de6 <UART_SetConfig+0x16e>
 8004dbe:	2b30      	cmp	r3, #48	; 0x30
 8004dc0:	d814      	bhi.n	8004dec <UART_SetConfig+0x174>
 8004dc2:	2b20      	cmp	r3, #32
 8004dc4:	d009      	beq.n	8004dda <UART_SetConfig+0x162>
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d810      	bhi.n	8004dec <UART_SetConfig+0x174>
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d002      	beq.n	8004dd4 <UART_SetConfig+0x15c>
 8004dce:	2b10      	cmp	r3, #16
 8004dd0:	d006      	beq.n	8004de0 <UART_SetConfig+0x168>
 8004dd2:	e00b      	b.n	8004dec <UART_SetConfig+0x174>
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	77fb      	strb	r3, [r7, #31]
 8004dd8:	e0f2      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004dda:	2302      	movs	r3, #2
 8004ddc:	77fb      	strb	r3, [r7, #31]
 8004dde:	e0ef      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004de0:	2304      	movs	r3, #4
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e0ec      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004de6:	2308      	movs	r3, #8
 8004de8:	77fb      	strb	r3, [r7, #31]
 8004dea:	e0e9      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004dec:	2310      	movs	r3, #16
 8004dee:	77fb      	strb	r3, [r7, #31]
 8004df0:	e0e6      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a56      	ldr	r2, [pc, #344]	; (8004f50 <UART_SetConfig+0x2d8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d120      	bne.n	8004e3e <UART_SetConfig+0x1c6>
 8004dfc:	4b51      	ldr	r3, [pc, #324]	; (8004f44 <UART_SetConfig+0x2cc>)
 8004dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e06:	2bc0      	cmp	r3, #192	; 0xc0
 8004e08:	d013      	beq.n	8004e32 <UART_SetConfig+0x1ba>
 8004e0a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e0c:	d814      	bhi.n	8004e38 <UART_SetConfig+0x1c0>
 8004e0e:	2b80      	cmp	r3, #128	; 0x80
 8004e10:	d009      	beq.n	8004e26 <UART_SetConfig+0x1ae>
 8004e12:	2b80      	cmp	r3, #128	; 0x80
 8004e14:	d810      	bhi.n	8004e38 <UART_SetConfig+0x1c0>
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d002      	beq.n	8004e20 <UART_SetConfig+0x1a8>
 8004e1a:	2b40      	cmp	r3, #64	; 0x40
 8004e1c:	d006      	beq.n	8004e2c <UART_SetConfig+0x1b4>
 8004e1e:	e00b      	b.n	8004e38 <UART_SetConfig+0x1c0>
 8004e20:	2300      	movs	r3, #0
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e0cc      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e26:	2302      	movs	r3, #2
 8004e28:	77fb      	strb	r3, [r7, #31]
 8004e2a:	e0c9      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e2c:	2304      	movs	r3, #4
 8004e2e:	77fb      	strb	r3, [r7, #31]
 8004e30:	e0c6      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e32:	2308      	movs	r3, #8
 8004e34:	77fb      	strb	r3, [r7, #31]
 8004e36:	e0c3      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e38:	2310      	movs	r3, #16
 8004e3a:	77fb      	strb	r3, [r7, #31]
 8004e3c:	e0c0      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a44      	ldr	r2, [pc, #272]	; (8004f54 <UART_SetConfig+0x2dc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d125      	bne.n	8004e94 <UART_SetConfig+0x21c>
 8004e48:	4b3e      	ldr	r3, [pc, #248]	; (8004f44 <UART_SetConfig+0x2cc>)
 8004e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e56:	d017      	beq.n	8004e88 <UART_SetConfig+0x210>
 8004e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e5c:	d817      	bhi.n	8004e8e <UART_SetConfig+0x216>
 8004e5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e62:	d00b      	beq.n	8004e7c <UART_SetConfig+0x204>
 8004e64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e68:	d811      	bhi.n	8004e8e <UART_SetConfig+0x216>
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d003      	beq.n	8004e76 <UART_SetConfig+0x1fe>
 8004e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e72:	d006      	beq.n	8004e82 <UART_SetConfig+0x20a>
 8004e74:	e00b      	b.n	8004e8e <UART_SetConfig+0x216>
 8004e76:	2300      	movs	r3, #0
 8004e78:	77fb      	strb	r3, [r7, #31]
 8004e7a:	e0a1      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	77fb      	strb	r3, [r7, #31]
 8004e80:	e09e      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e82:	2304      	movs	r3, #4
 8004e84:	77fb      	strb	r3, [r7, #31]
 8004e86:	e09b      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e88:	2308      	movs	r3, #8
 8004e8a:	77fb      	strb	r3, [r7, #31]
 8004e8c:	e098      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e8e:	2310      	movs	r3, #16
 8004e90:	77fb      	strb	r3, [r7, #31]
 8004e92:	e095      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <UART_SetConfig+0x2e0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d125      	bne.n	8004eea <UART_SetConfig+0x272>
 8004e9e:	4b29      	ldr	r3, [pc, #164]	; (8004f44 <UART_SetConfig+0x2cc>)
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004ea8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eac:	d017      	beq.n	8004ede <UART_SetConfig+0x266>
 8004eae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004eb2:	d817      	bhi.n	8004ee4 <UART_SetConfig+0x26c>
 8004eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eb8:	d00b      	beq.n	8004ed2 <UART_SetConfig+0x25a>
 8004eba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ebe:	d811      	bhi.n	8004ee4 <UART_SetConfig+0x26c>
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d003      	beq.n	8004ecc <UART_SetConfig+0x254>
 8004ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ec8:	d006      	beq.n	8004ed8 <UART_SetConfig+0x260>
 8004eca:	e00b      	b.n	8004ee4 <UART_SetConfig+0x26c>
 8004ecc:	2301      	movs	r3, #1
 8004ece:	77fb      	strb	r3, [r7, #31]
 8004ed0:	e076      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	77fb      	strb	r3, [r7, #31]
 8004ed6:	e073      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004ed8:	2304      	movs	r3, #4
 8004eda:	77fb      	strb	r3, [r7, #31]
 8004edc:	e070      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004ede:	2308      	movs	r3, #8
 8004ee0:	77fb      	strb	r3, [r7, #31]
 8004ee2:	e06d      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004ee4:	2310      	movs	r3, #16
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	e06a      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a1b      	ldr	r2, [pc, #108]	; (8004f5c <UART_SetConfig+0x2e4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d138      	bne.n	8004f66 <UART_SetConfig+0x2ee>
 8004ef4:	4b13      	ldr	r3, [pc, #76]	; (8004f44 <UART_SetConfig+0x2cc>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004efe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f02:	d017      	beq.n	8004f34 <UART_SetConfig+0x2bc>
 8004f04:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f08:	d82a      	bhi.n	8004f60 <UART_SetConfig+0x2e8>
 8004f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f0e:	d00b      	beq.n	8004f28 <UART_SetConfig+0x2b0>
 8004f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f14:	d824      	bhi.n	8004f60 <UART_SetConfig+0x2e8>
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d003      	beq.n	8004f22 <UART_SetConfig+0x2aa>
 8004f1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f1e:	d006      	beq.n	8004f2e <UART_SetConfig+0x2b6>
 8004f20:	e01e      	b.n	8004f60 <UART_SetConfig+0x2e8>
 8004f22:	2300      	movs	r3, #0
 8004f24:	77fb      	strb	r3, [r7, #31]
 8004f26:	e04b      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	77fb      	strb	r3, [r7, #31]
 8004f2c:	e048      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004f2e:	2304      	movs	r3, #4
 8004f30:	77fb      	strb	r3, [r7, #31]
 8004f32:	e045      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004f34:	2308      	movs	r3, #8
 8004f36:	77fb      	strb	r3, [r7, #31]
 8004f38:	e042      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004f3a:	bf00      	nop
 8004f3c:	efff69f3 	.word	0xefff69f3
 8004f40:	40011000 	.word	0x40011000
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40004400 	.word	0x40004400
 8004f4c:	40004800 	.word	0x40004800
 8004f50:	40004c00 	.word	0x40004c00
 8004f54:	40005000 	.word	0x40005000
 8004f58:	40011400 	.word	0x40011400
 8004f5c:	40007800 	.word	0x40007800
 8004f60:	2310      	movs	r3, #16
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e02c      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a72      	ldr	r2, [pc, #456]	; (8005134 <UART_SetConfig+0x4bc>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d125      	bne.n	8004fbc <UART_SetConfig+0x344>
 8004f70:	4b71      	ldr	r3, [pc, #452]	; (8005138 <UART_SetConfig+0x4c0>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004f7a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f7e:	d017      	beq.n	8004fb0 <UART_SetConfig+0x338>
 8004f80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004f84:	d817      	bhi.n	8004fb6 <UART_SetConfig+0x33e>
 8004f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f8a:	d00b      	beq.n	8004fa4 <UART_SetConfig+0x32c>
 8004f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f90:	d811      	bhi.n	8004fb6 <UART_SetConfig+0x33e>
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d003      	beq.n	8004f9e <UART_SetConfig+0x326>
 8004f96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f9a:	d006      	beq.n	8004faa <UART_SetConfig+0x332>
 8004f9c:	e00b      	b.n	8004fb6 <UART_SetConfig+0x33e>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e00d      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e00a      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004faa:	2304      	movs	r3, #4
 8004fac:	77fb      	strb	r3, [r7, #31]
 8004fae:	e007      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004fb0:	2308      	movs	r3, #8
 8004fb2:	77fb      	strb	r3, [r7, #31]
 8004fb4:	e004      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004fb6:	2310      	movs	r3, #16
 8004fb8:	77fb      	strb	r3, [r7, #31]
 8004fba:	e001      	b.n	8004fc0 <UART_SetConfig+0x348>
 8004fbc:	2310      	movs	r3, #16
 8004fbe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
 8004fc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fc8:	d15b      	bne.n	8005082 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004fca:	7ffb      	ldrb	r3, [r7, #31]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d828      	bhi.n	8005022 <UART_SetConfig+0x3aa>
 8004fd0:	a201      	add	r2, pc, #4	; (adr r2, 8004fd8 <UART_SetConfig+0x360>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08004ffd 	.word	0x08004ffd
 8004fdc:	08005005 	.word	0x08005005
 8004fe0:	0800500d 	.word	0x0800500d
 8004fe4:	08005023 	.word	0x08005023
 8004fe8:	08005013 	.word	0x08005013
 8004fec:	08005023 	.word	0x08005023
 8004ff0:	08005023 	.word	0x08005023
 8004ff4:	08005023 	.word	0x08005023
 8004ff8:	0800501b 	.word	0x0800501b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ffc:	f7fe f9ba 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 8005000:	61b8      	str	r0, [r7, #24]
        break;
 8005002:	e013      	b.n	800502c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005004:	f7fe f9ca 	bl	800339c <HAL_RCC_GetPCLK2Freq>
 8005008:	61b8      	str	r0, [r7, #24]
        break;
 800500a:	e00f      	b.n	800502c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800500c:	4b4b      	ldr	r3, [pc, #300]	; (800513c <UART_SetConfig+0x4c4>)
 800500e:	61bb      	str	r3, [r7, #24]
        break;
 8005010:	e00c      	b.n	800502c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005012:	f7fe f8dd 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 8005016:	61b8      	str	r0, [r7, #24]
        break;
 8005018:	e008      	b.n	800502c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800501e:	61bb      	str	r3, [r7, #24]
        break;
 8005020:	e004      	b.n	800502c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	77bb      	strb	r3, [r7, #30]
        break;
 800502a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d074      	beq.n	800511c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	005a      	lsls	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	085b      	lsrs	r3, r3, #1
 800503c:	441a      	add	r2, r3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	2b0f      	cmp	r3, #15
 800504c:	d916      	bls.n	800507c <UART_SetConfig+0x404>
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005054:	d212      	bcs.n	800507c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	b29b      	uxth	r3, r3
 800505a:	f023 030f 	bic.w	r3, r3, #15
 800505e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	085b      	lsrs	r3, r3, #1
 8005064:	b29b      	uxth	r3, r3
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	b29a      	uxth	r2, r3
 800506c:	89fb      	ldrh	r3, [r7, #14]
 800506e:	4313      	orrs	r3, r2
 8005070:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	89fa      	ldrh	r2, [r7, #14]
 8005078:	60da      	str	r2, [r3, #12]
 800507a:	e04f      	b.n	800511c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	77bb      	strb	r3, [r7, #30]
 8005080:	e04c      	b.n	800511c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005082:	7ffb      	ldrb	r3, [r7, #31]
 8005084:	2b08      	cmp	r3, #8
 8005086:	d828      	bhi.n	80050da <UART_SetConfig+0x462>
 8005088:	a201      	add	r2, pc, #4	; (adr r2, 8005090 <UART_SetConfig+0x418>)
 800508a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508e:	bf00      	nop
 8005090:	080050b5 	.word	0x080050b5
 8005094:	080050bd 	.word	0x080050bd
 8005098:	080050c5 	.word	0x080050c5
 800509c:	080050db 	.word	0x080050db
 80050a0:	080050cb 	.word	0x080050cb
 80050a4:	080050db 	.word	0x080050db
 80050a8:	080050db 	.word	0x080050db
 80050ac:	080050db 	.word	0x080050db
 80050b0:	080050d3 	.word	0x080050d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050b4:	f7fe f95e 	bl	8003374 <HAL_RCC_GetPCLK1Freq>
 80050b8:	61b8      	str	r0, [r7, #24]
        break;
 80050ba:	e013      	b.n	80050e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050bc:	f7fe f96e 	bl	800339c <HAL_RCC_GetPCLK2Freq>
 80050c0:	61b8      	str	r0, [r7, #24]
        break;
 80050c2:	e00f      	b.n	80050e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050c4:	4b1d      	ldr	r3, [pc, #116]	; (800513c <UART_SetConfig+0x4c4>)
 80050c6:	61bb      	str	r3, [r7, #24]
        break;
 80050c8:	e00c      	b.n	80050e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050ca:	f7fe f881 	bl	80031d0 <HAL_RCC_GetSysClockFreq>
 80050ce:	61b8      	str	r0, [r7, #24]
        break;
 80050d0:	e008      	b.n	80050e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d6:	61bb      	str	r3, [r7, #24]
        break;
 80050d8:	e004      	b.n	80050e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80050da:	2300      	movs	r3, #0
 80050dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	77bb      	strb	r3, [r7, #30]
        break;
 80050e2:	bf00      	nop
    }

    if (pclk != 0U)
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d018      	beq.n	800511c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	085a      	lsrs	r2, r3, #1
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	441a      	add	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b0f      	cmp	r3, #15
 8005102:	d909      	bls.n	8005118 <UART_SetConfig+0x4a0>
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510a:	d205      	bcs.n	8005118 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	b29a      	uxth	r2, r3
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	e001      	b.n	800511c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005118:	2301      	movs	r3, #1
 800511a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2200      	movs	r2, #0
 8005126:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005128:	7fbb      	ldrb	r3, [r7, #30]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	40007c00 	.word	0x40007c00
 8005138:	40023800 	.word	0x40023800
 800513c:	00f42400 	.word	0x00f42400

08005140 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	430a      	orrs	r2, r1
 8005168:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	430a      	orrs	r2, r1
 800518a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	430a      	orrs	r2, r1
 80051ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	430a      	orrs	r2, r1
 8005212:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d01a      	beq.n	8005256 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	430a      	orrs	r2, r1
 8005234:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800523e:	d10a      	bne.n	8005256 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af02      	add	r7, sp, #8
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005294:	f7fc fb80 	bl	8001998 <HAL_GetTick>
 8005298:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d10e      	bne.n	80052c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f831 	bl	800531e <UART_WaitOnFlagUntilTimeout>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d001      	beq.n	80052c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e027      	b.n	8005316 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d10e      	bne.n	80052f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f81b 	bl	800531e <UART_WaitOnFlagUntilTimeout>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e011      	b.n	8005316 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2220      	movs	r2, #32
 80052fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3710      	adds	r7, #16
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b09c      	sub	sp, #112	; 0x70
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	603b      	str	r3, [r7, #0]
 800532a:	4613      	mov	r3, r2
 800532c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532e:	e0a7      	b.n	8005480 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005336:	f000 80a3 	beq.w	8005480 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800533a:	f7fc fb2d 	bl	8001998 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005346:	429a      	cmp	r2, r3
 8005348:	d302      	bcc.n	8005350 <UART_WaitOnFlagUntilTimeout+0x32>
 800534a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800534c:	2b00      	cmp	r3, #0
 800534e:	d13f      	bne.n	80053d0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005358:	e853 3f00 	ldrex	r3, [r3]
 800535c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800535e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005360:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005364:	667b      	str	r3, [r7, #100]	; 0x64
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800536e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005370:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005372:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005374:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005376:	e841 2300 	strex	r3, r2, [r1]
 800537a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800537c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1e6      	bne.n	8005350 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	3308      	adds	r3, #8
 8005388:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	663b      	str	r3, [r7, #96]	; 0x60
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80053a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80053a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e5      	bne.n	8005382 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2220      	movs	r2, #32
 80053ba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80053cc:	2303      	movs	r3, #3
 80053ce:	e068      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d050      	beq.n	8005480 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69db      	ldr	r3, [r3, #28]
 80053e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ec:	d148      	bne.n	8005480 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005400:	e853 3f00 	ldrex	r3, [r3]
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800540c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005416:	637b      	str	r3, [r7, #52]	; 0x34
 8005418:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800541c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800541e:	e841 2300 	strex	r3, r2, [r1]
 8005422:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1e6      	bne.n	80053f8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	3308      	adds	r3, #8
 8005430:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	e853 3f00 	ldrex	r3, [r3]
 8005438:	613b      	str	r3, [r7, #16]
   return(result);
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f023 0301 	bic.w	r3, r3, #1
 8005440:	66bb      	str	r3, [r7, #104]	; 0x68
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3308      	adds	r3, #8
 8005448:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800544a:	623a      	str	r2, [r7, #32]
 800544c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	69f9      	ldr	r1, [r7, #28]
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	e841 2300 	strex	r3, r2, [r1]
 8005456:	61bb      	str	r3, [r7, #24]
   return(result);
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1e5      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2220      	movs	r2, #32
 8005470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e010      	b.n	80054a2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4013      	ands	r3, r2
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	429a      	cmp	r2, r3
 800548e:	bf0c      	ite	eq
 8005490:	2301      	moveq	r3, #1
 8005492:	2300      	movne	r3, #0
 8005494:	b2db      	uxtb	r3, r3
 8005496:	461a      	mov	r2, r3
 8005498:	79fb      	ldrb	r3, [r7, #7]
 800549a:	429a      	cmp	r2, r3
 800549c:	f43f af48 	beq.w	8005330 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054a0:	2300      	movs	r3, #0
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3770      	adds	r7, #112	; 0x70
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054aa:	b480      	push	{r7}
 80054ac:	b095      	sub	sp, #84	; 0x54
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ba:	e853 3f00 	ldrex	r3, [r3]
 80054be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d0:	643b      	str	r3, [r7, #64]	; 0x40
 80054d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054d8:	e841 2300 	strex	r3, r2, [r1]
 80054dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1e6      	bne.n	80054b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	3308      	adds	r3, #8
 80054ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ec:	6a3b      	ldr	r3, [r7, #32]
 80054ee:	e853 3f00 	ldrex	r3, [r3]
 80054f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005504:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005506:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800550a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800550c:	e841 2300 	strex	r3, r2, [r1]
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d1e5      	bne.n	80054e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800551c:	2b01      	cmp	r3, #1
 800551e:	d118      	bne.n	8005552 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	60bb      	str	r3, [r7, #8]
   return(result);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	f023 0310 	bic.w	r3, r3, #16
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6979      	ldr	r1, [r7, #20]
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	613b      	str	r3, [r7, #16]
   return(result);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e6      	bne.n	8005520 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2220      	movs	r2, #32
 8005556:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005566:	bf00      	nop
 8005568:	3754      	adds	r7, #84	; 0x54
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005572:	b580      	push	{r7, lr}
 8005574:	b084      	sub	sp, #16
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2200      	movs	r2, #0
 8005584:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2200      	movs	r2, #0
 800558c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f7ff fb51 	bl	8004c38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b088      	sub	sp, #32
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	461a      	mov	r2, r3
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	61bb      	str	r3, [r7, #24]
 80055c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c8:	6979      	ldr	r1, [r7, #20]
 80055ca:	69ba      	ldr	r2, [r7, #24]
 80055cc:	e841 2300 	strex	r3, r2, [r1]
 80055d0:	613b      	str	r3, [r7, #16]
   return(result);
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1e6      	bne.n	80055a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2220      	movs	r2, #32
 80055dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff fb1d 	bl	8004c24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ea:	bf00      	nop
 80055ec:	3720      	adds	r7, #32
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <SerialAPI_WriteByte>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	byte - byte to write
 */
static void SerialAPI_WriteByte (sbgcGeneral_t *gSBGC, ui8 byte)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	460b      	mov	r3, r1
 80055fc:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d153      	bne.n	80056b0 <SerialAPI_WriteByte+0xbe>

	if (calculateFreeTx_() < sizeof(ui8))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005618:	429a      	cmp	r2, r3
 800561a:	d310      	bcc.n	800563e <SerialAPI_WriteByte+0x4c>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005624:	461a      	mov	r2, r3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800562e:	1ad3      	subs	r3, r2, r3
 8005630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005634:	bf0c      	ite	eq
 8005636:	2301      	moveq	r3, #1
 8005638:	2300      	movne	r3, #0
 800563a:	b2db      	uxtb	r3, r3
 800563c:	e00c      	b.n	8005658 <SerialAPI_WriteByte+0x66>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800564e:	429a      	cmp	r2, r3
 8005650:	bf0c      	ite	eq
 8005652:	2301      	moveq	r3, #1
 8005654:	2300      	movne	r3, #0
 8005656:	b2db      	uxtb	r3, r3
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <SerialAPI_WriteByte+0x7e>
		serialAPI_Abort()
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	2203      	movs	r2, #3
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	6a1b      	ldr	r3, [r3, #32]
 800566a:	2205      	movs	r2, #5
 800566c:	769a      	strb	r2, [r3, #26]
 800566e:	e020      	b.n	80056b2 <SerialAPI_WriteByte+0xc0>

	serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize] = byte;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6852      	ldr	r2, [r2, #4]
 800567c:	6a12      	ldr	r2, [r2, #32]
 800567e:	7f12      	ldrb	r2, [r2, #28]
 8005680:	4413      	add	r3, r2
 8005682:	78fa      	ldrb	r2, [r7, #3]
 8005684:	701a      	strb	r2, [r3, #0]
	serialAPI_CurCmd_->_payloadSize += sizeof(ui8);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	7f1a      	ldrb	r2, [r3, #28]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	3201      	adds	r2, #1
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += sizeof(ui8);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	3201      	adds	r2, #1
 80056a8:	b2d2      	uxtb	r2, r2
 80056aa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80056ae:	e000      	b.n	80056b2 <SerialAPI_WriteByte+0xc0>
	serialAPI_Assert()
 80056b0:	bf00      	nop
}
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <SerialAPI_ReadByte>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read byte
 */
static ui8 SerialAPI_ReadByte (sbgcGeneral_t *gSBGC)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	ui8 byte = (ui8)*serialAPI_CurCmd_->_payload;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	73fb      	strb	r3, [r7, #15]

	if (((uintptr_t)serialAPI_CurCmd_->_payload) != calculateEndRx_())
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	461a      	mov	r2, r3
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e0:	33ff      	adds	r3, #255	; 0xff
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d006      	beq.n	80056f4 <SerialAPI_ReadByte+0x38>
		serialAPI_CurCmd_->_payload++;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	6a1a      	ldr	r2, [r3, #32]
 80056ee:	3201      	adds	r2, #1
 80056f0:	621a      	str	r2, [r3, #32]
 80056f2:	e006      	b.n	8005702 <SerialAPI_ReadByte+0x46>

	else
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	6a1b      	ldr	r3, [r3, #32]
 80056fe:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005700:	621a      	str	r2, [r3, #32]

	return byte;
 8005702:	7bfb      	ldrb	r3, [r7, #15]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <SerialAPI_WriteWord>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	word - two bytes to write
 */
static void SerialAPI_WriteWord (sbgcGeneral_t *gSBGC, ui16 word)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	807b      	strh	r3, [r7, #2]
	serialAPI_Assert()
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d15a      	bne.n	80057dc <SerialAPI_WriteWord+0xcc>

	if (calculateFreeTx_() < sizeof(ui16))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	685b      	ldr	r3, [r3, #4]
 8005732:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005736:	429a      	cmp	r2, r3
 8005738:	d311      	bcc.n	800575e <SerialAPI_WriteWord+0x4e>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005742:	461a      	mov	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800574c:	1ad3      	subs	r3, r2, r3
 800574e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005752:	2b01      	cmp	r3, #1
 8005754:	bf94      	ite	ls
 8005756:	2301      	movls	r3, #1
 8005758:	2300      	movhi	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e00e      	b.n	800577c <SerialAPI_WriteWord+0x6c>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005766:	461a      	mov	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b01      	cmp	r3, #1
 8005774:	bf94      	ite	ls
 8005776:	2301      	movls	r3, #1
 8005778:	2300      	movhi	r3, #0
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d009      	beq.n	8005794 <SerialAPI_WriteWord+0x84>
		serialAPI_Abort()
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2203      	movs	r2, #3
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	2205      	movs	r2, #5
 8005790:	769a      	strb	r2, [r3, #26]
 8005792:	e024      	b.n	80057de <SerialAPI_WriteWord+0xce>

	gSBGC->_api->toLE(&word, &serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], sizeof(ui16));
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	6852      	ldr	r2, [r2, #4]
 800579e:	6a12      	ldr	r2, [r2, #32]
 80057a0:	6a12      	ldr	r2, [r2, #32]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	6849      	ldr	r1, [r1, #4]
 80057a6:	6a09      	ldr	r1, [r1, #32]
 80057a8:	7f09      	ldrb	r1, [r1, #28]
 80057aa:	4411      	add	r1, r2
 80057ac:	1cb8      	adds	r0, r7, #2
 80057ae:	2202      	movs	r2, #2
 80057b0:	4798      	blx	r3
	serialAPI_CurCmd_->_payloadSize += sizeof(ui16);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	7f1a      	ldrb	r2, [r3, #28]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	3202      	adds	r2, #2
 80057c2:	b2d2      	uxtb	r2, r2
 80057c4:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += sizeof(ui16);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	3202      	adds	r2, #2
 80057d4:	b2d2      	uxtb	r2, r2
 80057d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80057da:	e000      	b.n	80057de <SerialAPI_WriteWord+0xce>
	serialAPI_Assert()
 80057dc:	bf00      	nop
}
 80057de:	3708      	adds	r7, #8
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <SerialAPI_ReadWord>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read word
 */
static ui16 SerialAPI_ReadWord (sbgcGeneral_t *gSBGC)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
	ui16 word;

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (sizeof(ui16) - 1)))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f2:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	3301      	adds	r3, #1
 8005800:	429a      	cmp	r2, r3
 8005802:	d225      	bcs.n	8005850 <SerialAPI_ReadWord+0x6c>
	{
		ui8 wordBuff [2];

		wordBuff[0] = *serialAPI_CurCmd_->_payload;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	685b      	ldr	r3, [r3, #4]
 8005808:	6a1b      	ldr	r3, [r3, #32]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	733b      	strb	r3, [r7, #12]
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	6a1b      	ldr	r3, [r3, #32]
 800581a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800581c:	621a      	str	r2, [r3, #32]
		wordBuff[1] = *serialAPI_CurCmd_->_payload;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	6a1b      	ldr	r3, [r3, #32]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	737b      	strb	r3, [r7, #13]
		serialAPI_CurCmd_->_payload += sizeof(ui8);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	3201      	adds	r2, #1
 800583a:	621a      	str	r2, [r3, #32]
		gSBGC->_api->fromLE(&word, wordBuff, sizeof(ui16));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005842:	f107 010c 	add.w	r1, r7, #12
 8005846:	f107 000e 	add.w	r0, r7, #14
 800584a:	2202      	movs	r2, #2
 800584c:	4798      	blx	r3
 800584e:	e013      	b.n	8005878 <SerialAPI_ReadWord+0x94>
	}

	else
	{
		gSBGC->_api->fromLE(&word, serialAPI_CurCmd_->_payload, sizeof(ui16));
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6852      	ldr	r2, [r2, #4]
 800585a:	6a12      	ldr	r2, [r2, #32]
 800585c:	6a11      	ldr	r1, [r2, #32]
 800585e:	f107 000e 	add.w	r0, r7, #14
 8005862:	2202      	movs	r2, #2
 8005864:	4798      	blx	r3
		serialAPI_CurCmd_->_payload += sizeof(ui16);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	6a1a      	ldr	r2, [r3, #32]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	3202      	adds	r2, #2
 8005876:	621a      	str	r2, [r3, #32]
	}

	if (((uintptr_t)serialAPI_CurCmd_->_payload) > calculateEndRx_())
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	6a1b      	ldr	r3, [r3, #32]
 8005880:	461a      	mov	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005888:	33ff      	adds	r3, #255	; 0xff
 800588a:	429a      	cmp	r2, r3
 800588c:	d906      	bls.n	800589c <SerialAPI_ReadWord+0xb8>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685a      	ldr	r2, [r3, #4]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800589a:	621a      	str	r2, [r3, #32]

	return word;
 800589c:	89fb      	ldrh	r3, [r7, #14]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}

080058a6 <SerialAPI_WriteLong>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	dword - four bytes to write
 */
static void SerialAPI_WriteLong (sbgcGeneral_t *gSBGC, ui32 dword)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b082      	sub	sp, #8
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
 80058ae:	6039      	str	r1, [r7, #0]
	serialAPI_Assert()
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d15a      	bne.n	8005970 <SerialAPI_WriteLong+0xca>

	if (calculateFreeTx_() < sizeof(ui32))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d311      	bcc.n	80058f2 <SerialAPI_WriteLong+0x4c>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058e0:	1ad3      	subs	r3, r2, r3
 80058e2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80058e6:	2b03      	cmp	r3, #3
 80058e8:	bf94      	ite	ls
 80058ea:	2301      	movls	r3, #1
 80058ec:	2300      	movhi	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e00e      	b.n	8005910 <SerialAPI_WriteLong+0x6a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b03      	cmp	r3, #3
 8005908:	bf94      	ite	ls
 800590a:	2301      	movls	r3, #1
 800590c:	2300      	movhi	r3, #0
 800590e:	b2db      	uxtb	r3, r3
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <SerialAPI_WriteLong+0x82>
		serialAPI_Abort()
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	2203      	movs	r2, #3
 800591a:	701a      	strb	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	2205      	movs	r2, #5
 8005924:	769a      	strb	r2, [r3, #26]
 8005926:	e024      	b.n	8005972 <SerialAPI_WriteLong+0xcc>

	gSBGC->_api->toLE(&dword, &serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], 4);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6852      	ldr	r2, [r2, #4]
 8005932:	6a12      	ldr	r2, [r2, #32]
 8005934:	6a12      	ldr	r2, [r2, #32]
 8005936:	6879      	ldr	r1, [r7, #4]
 8005938:	6849      	ldr	r1, [r1, #4]
 800593a:	6a09      	ldr	r1, [r1, #32]
 800593c:	7f09      	ldrb	r1, [r1, #28]
 800593e:	4411      	add	r1, r2
 8005940:	4638      	mov	r0, r7
 8005942:	2204      	movs	r2, #4
 8005944:	4798      	blx	r3
	serialAPI_CurCmd_->_payloadSize += sizeof(ui32);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	6a1b      	ldr	r3, [r3, #32]
 800594c:	7f1a      	ldrb	r2, [r3, #28]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	6a1b      	ldr	r3, [r3, #32]
 8005954:	3204      	adds	r2, #4
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += sizeof(ui32);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	3204      	adds	r2, #4
 8005968:	b2d2      	uxtb	r2, r2
 800596a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800596e:	e000      	b.n	8005972 <SerialAPI_WriteLong+0xcc>
	serialAPI_Assert()
 8005970:	bf00      	nop
}
 8005972:	3708      	adds	r7, #8
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <SerialAPI_ReadLong>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read long
 */
static ui32 SerialAPI_ReadLong (sbgcGeneral_t *gSBGC)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
	ui32 dword;

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (sizeof(ui32) - 1)))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	3303      	adds	r3, #3
 8005994:	429a      	cmp	r2, r3
 8005996:	d23e      	bcs.n	8005a16 <SerialAPI_ReadLong+0x9e>
	{
		ui8 longBuff [4];
		ui8 cutSize = (calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	461a      	mov	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	75fb      	strb	r3, [r7, #23]

		memcpy(longBuff, serialAPI_CurCmd_->_payload, cutSize);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	6a19      	ldr	r1, [r3, #32]
 80059b4:	7dfa      	ldrb	r2, [r7, #23]
 80059b6:	f107 030c 	add.w	r3, r7, #12
 80059ba:	4618      	mov	r0, r3
 80059bc:	f002 f94c 	bl	8007c58 <memcpy>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685a      	ldr	r2, [r3, #4]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059cc:	621a      	str	r2, [r3, #32]
		memcpy(&longBuff[cutSize], serialAPI_CurCmd_->_payload, sizeof(ui32) - cutSize);
 80059ce:	7dfb      	ldrb	r3, [r7, #23]
 80059d0:	f107 020c 	add.w	r2, r7, #12
 80059d4:	18d0      	adds	r0, r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	6a19      	ldr	r1, [r3, #32]
 80059de:	7dfb      	ldrb	r3, [r7, #23]
 80059e0:	f1c3 0304 	rsb	r3, r3, #4
 80059e4:	461a      	mov	r2, r3
 80059e6:	f002 f937 	bl	8007c58 <memcpy>
		serialAPI_CurCmd_->_payload += sizeof(ui32) - cutSize;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	6a1b      	ldr	r3, [r3, #32]
 80059f0:	6a19      	ldr	r1, [r3, #32]
 80059f2:	7dfb      	ldrb	r3, [r7, #23]
 80059f4:	f1c3 0204 	rsb	r2, r3, #4
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	440a      	add	r2, r1
 8005a00:	621a      	str	r2, [r3, #32]
		gSBGC->_api->fromLE(&dword, longBuff, sizeof(ui32));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a08:	f107 010c 	add.w	r1, r7, #12
 8005a0c:	f107 0010 	add.w	r0, r7, #16
 8005a10:	2204      	movs	r2, #4
 8005a12:	4798      	blx	r3
 8005a14:	e013      	b.n	8005a3e <SerialAPI_ReadLong+0xc6>
	}

	else
	{
		gSBGC->_api->fromLE(&dword, serialAPI_CurCmd_->_payload, sizeof(ui32));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1c:	687a      	ldr	r2, [r7, #4]
 8005a1e:	6852      	ldr	r2, [r2, #4]
 8005a20:	6a12      	ldr	r2, [r2, #32]
 8005a22:	6a11      	ldr	r1, [r2, #32]
 8005a24:	f107 0010 	add.w	r0, r7, #16
 8005a28:	2204      	movs	r2, #4
 8005a2a:	4798      	blx	r3
		serialAPI_CurCmd_->_payload += 4;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	6a1b      	ldr	r3, [r3, #32]
 8005a32:	6a1a      	ldr	r2, [r3, #32]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	3204      	adds	r2, #4
 8005a3c:	621a      	str	r2, [r3, #32]
	}

	if (((uintptr_t)serialAPI_CurCmd_->_payload) > calculateEndRx_())
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	6a1b      	ldr	r3, [r3, #32]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	33ff      	adds	r3, #255	; 0xff
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d906      	bls.n	8005a62 <SerialAPI_ReadLong+0xea>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a60:	621a      	str	r2, [r3, #32]

	return dword;
 8005a62:	693b      	ldr	r3, [r7, #16]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3718      	adds	r7, #24
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <SerialAPI_WriteBuff>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*buff - written data
 *	@param	size - written data size
 */
static void SerialAPI_WriteBuff (sbgcGeneral_t *gSBGC, const void *buff, ui8 size)
{
 8005a6c:	b590      	push	{r4, r7, lr}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	4613      	mov	r3, r2
 8005a78:	71fb      	strb	r3, [r7, #7]
	serialAPI_Assert()
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	781b      	ldrb	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d15a      	bne.n	8005b3a <SerialAPI_WriteBuff+0xce>

	if (!size) return;
 8005a84:	79fb      	ldrb	r3, [r7, #7]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d059      	beq.n	8005b3e <SerialAPI_WriteBuff+0xd2>

	if (calculateFreeTx_() < size)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d30c      	bcc.n	8005ab8 <SerialAPI_WriteBuff+0x4c>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab0:	1ad3      	subs	r3, r2, r3
 8005ab2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005ab6:	e009      	b.n	8005acc <SerialAPI_WriteBuff+0x60>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	79fa      	ldrb	r2, [r7, #7]
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	da09      	bge.n	8005ae6 <SerialAPI_WriteBuff+0x7a>
		serialAPI_Abort()
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	2203      	movs	r2, #3
 8005ad8:	701a      	strb	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	2205      	movs	r2, #5
 8005ae2:	769a      	strb	r2, [r3, #26]
 8005ae4:	e02c      	b.n	8005b40 <SerialAPI_WriteBuff+0xd4>

	#if (SBGC_SYS_BIG_ENDIAN)
		sbgcParserMap_t parserMap = gSBGC->_api->getCmdPM(serialAPI_CurCmd_);
	#else
		sbgcParserMap_t parserMap = PM_DEFAULT_8BIT;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	75fb      	strb	r3, [r7, #23]
	#endif

	serialAPI_CurCmd_->_payloadSize +=
			gSBGC->_api->convWithPM(&serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], buff, size, parserMap);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	6a1b      	ldr	r3, [r3, #32]
 8005af6:	6a1b      	ldr	r3, [r3, #32]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	6852      	ldr	r2, [r2, #4]
 8005afc:	6a12      	ldr	r2, [r2, #32]
 8005afe:	7f12      	ldrb	r2, [r2, #28]
 8005b00:	1898      	adds	r0, r3, r2
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
 8005b04:	79fa      	ldrb	r2, [r7, #7]
 8005b06:	68b9      	ldr	r1, [r7, #8]
 8005b08:	47a0      	blx	r4
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	4619      	mov	r1, r3
	serialAPI_CurCmd_->_payloadSize +=
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	7f1a      	ldrb	r2, [r3, #28]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	6a1b      	ldr	r3, [r3, #32]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	b2d2      	uxtb	r2, r2
 8005b20:	771a      	strb	r2, [r3, #28]

	gSBGC->_api->txCommandBuffHead += size;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	79fa      	ldrb	r2, [r7, #7]
 8005b30:	440a      	add	r2, r1
 8005b32:	b2d2      	uxtb	r2, r2
 8005b34:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005b38:	e002      	b.n	8005b40 <SerialAPI_WriteBuff+0xd4>
	serialAPI_Assert()
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <SerialAPI_WriteBuff+0xd4>
	if (!size) return;
 8005b3e:	bf00      	nop
}
 8005b40:	371c      	adds	r7, #28
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd90      	pop	{r4, r7, pc}

08005b46 <SerialAPI_ReadBuff>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*buff - where data will be written
 *	@param	size - read data size
 */
static void SerialAPI_ReadBuff (sbgcGeneral_t *gSBGC, void *buff, ui8 size)
{
 8005b46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b4a:	b089      	sub	sp, #36	; 0x24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	4613      	mov	r3, r2
 8005b54:	71fb      	strb	r3, [r7, #7]
	sbgcParserMap_t parserMap = gSBGC->_api->getCmdPM(serialAPI_CurCmd_);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	6852      	ldr	r2, [r2, #4]
 8005b60:	6a12      	ldr	r2, [r2, #32]
 8005b62:	4610      	mov	r0, r2
 8005b64:	4798      	blx	r3
 8005b66:	4603      	mov	r3, r0
 8005b68:	77fb      	strb	r3, [r7, #31]

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (size - 1)))
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	440b      	add	r3, r1
 8005b82:	3b01      	subs	r3, #1
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d266      	bcs.n	8005c56 <SerialAPI_ReadBuff+0x110>
	{
 8005b88:	466b      	mov	r3, sp
 8005b8a:	461e      	mov	r6, r3
		ui8 buffTemp [size];
 8005b8c:	79f9      	ldrb	r1, [r7, #7]
 8005b8e:	460b      	mov	r3, r1
 8005b90:	3b01      	subs	r3, #1
 8005b92:	61bb      	str	r3, [r7, #24]
 8005b94:	b2cb      	uxtb	r3, r1
 8005b96:	2200      	movs	r2, #0
 8005b98:	4698      	mov	r8, r3
 8005b9a:	4691      	mov	r9, r2
 8005b9c:	f04f 0200 	mov.w	r2, #0
 8005ba0:	f04f 0300 	mov.w	r3, #0
 8005ba4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005ba8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bb0:	b2cb      	uxtb	r3, r1
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	461c      	mov	r4, r3
 8005bb6:	4615      	mov	r5, r2
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	00eb      	lsls	r3, r5, #3
 8005bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc6:	00e2      	lsls	r2, r4, #3
 8005bc8:	460b      	mov	r3, r1
 8005bca:	3307      	adds	r3, #7
 8005bcc:	08db      	lsrs	r3, r3, #3
 8005bce:	00db      	lsls	r3, r3, #3
 8005bd0:	ebad 0d03 	sub.w	sp, sp, r3
 8005bd4:	466b      	mov	r3, sp
 8005bd6:	3300      	adds	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
		ui8 cutSize = (calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	461a      	mov	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	74fb      	strb	r3, [r7, #19]

		memcpy(buffTemp, serialAPI_CurCmd_->_payload, cutSize);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	6a1b      	ldr	r3, [r3, #32]
 8005bf6:	7cfa      	ldrb	r2, [r7, #19]
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	6978      	ldr	r0, [r7, #20]
 8005bfc:	f002 f82c 	bl	8007c58 <memcpy>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c0c:	621a      	str	r2, [r3, #32]
		memcpy(&buffTemp[cutSize], serialAPI_CurCmd_->_payload, size - cutSize);
 8005c0e:	7cfb      	ldrb	r3, [r7, #19]
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	18d0      	adds	r0, r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	6a19      	ldr	r1, [r3, #32]
 8005c1c:	79fa      	ldrb	r2, [r7, #7]
 8005c1e:	7cfb      	ldrb	r3, [r7, #19]
 8005c20:	1ad3      	subs	r3, r2, r3
 8005c22:	461a      	mov	r2, r3
 8005c24:	f002 f818 	bl	8007c58 <memcpy>
		serialAPI_CurCmd_->_payload += size - cutSize;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	6a1a      	ldr	r2, [r3, #32]
 8005c30:	79f9      	ldrb	r1, [r7, #7]
 8005c32:	7cfb      	ldrb	r3, [r7, #19]
 8005c34:	1acb      	subs	r3, r1, r3
 8005c36:	4619      	mov	r1, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	6a1b      	ldr	r3, [r3, #32]
 8005c3e:	440a      	add	r2, r1
 8005c40:	621a      	str	r2, [r3, #32]
		gSBGC->_api->convWithPM(buff, buffTemp, size, parserMap);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8005c48:	7ffb      	ldrb	r3, [r7, #31]
 8005c4a:	79fa      	ldrb	r2, [r7, #7]
 8005c4c:	6979      	ldr	r1, [r7, #20]
 8005c4e:	68b8      	ldr	r0, [r7, #8]
 8005c50:	47a0      	blx	r4
 8005c52:	46b5      	mov	sp, r6
	}

	else
		serialAPI_CurCmd_->_payload += gSBGC->_api->convWithPM(buff, serialAPI_CurCmd_->_payload, size, parserMap);
}
 8005c54:	e015      	b.n	8005c82 <SerialAPI_ReadBuff+0x13c>
		serialAPI_CurCmd_->_payload += gSBGC->_api->convWithPM(buff, serialAPI_CurCmd_->_payload, size, parserMap);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	6a19      	ldr	r1, [r3, #32]
 8005c64:	7ffb      	ldrb	r3, [r7, #31]
 8005c66:	79fa      	ldrb	r2, [r7, #7]
 8005c68:	68b8      	ldr	r0, [r7, #8]
 8005c6a:	47a0      	blx	r4
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	6a1a      	ldr	r2, [r3, #32]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	440a      	add	r2, r1
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	3724      	adds	r7, #36	; 0x24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005c8c <SerialAPI_WriteEmptyBuff>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	size - size of filled with zeros data
 */
static void SerialAPI_WriteEmptyBuff (sbgcGeneral_t *gSBGC, ui8 size)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d152      	bne.n	8005d48 <SerialAPI_WriteEmptyBuff+0xbc>

	if (calculateFreeTx_() < size)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d30c      	bcc.n	8005cd0 <SerialAPI_WriteEmptyBuff+0x44>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8005cce:	e009      	b.n	8005ce4 <SerialAPI_WriteEmptyBuff+0x58>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	78fa      	ldrb	r2, [r7, #3]
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	da09      	bge.n	8005cfe <SerialAPI_WriteEmptyBuff+0x72>
		serialAPI_Abort()
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2203      	movs	r2, #3
 8005cf0:	701a      	strb	r2, [r3, #0]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	6a1b      	ldr	r3, [r3, #32]
 8005cf8:	2205      	movs	r2, #5
 8005cfa:	769a      	strb	r2, [r3, #26]
 8005cfc:	e025      	b.n	8005d4a <SerialAPI_WriteEmptyBuff+0xbe>

	memset(&serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], 0, size);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	6a1b      	ldr	r3, [r3, #32]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6852      	ldr	r2, [r2, #4]
 8005d0a:	6a12      	ldr	r2, [r2, #32]
 8005d0c:	7f12      	ldrb	r2, [r2, #28]
 8005d0e:	4413      	add	r3, r2
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	2100      	movs	r1, #0
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 ffad 	bl	8007c74 <memset>
	serialAPI_CurCmd_->_payloadSize += size;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	7f19      	ldrb	r1, [r3, #28]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	6a1b      	ldr	r3, [r3, #32]
 8005d28:	78fa      	ldrb	r2, [r7, #3]
 8005d2a:	440a      	add	r2, r1
 8005d2c:	b2d2      	uxtb	r2, r2
 8005d2e:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += size;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	78fa      	ldrb	r2, [r7, #3]
 8005d3e:	440a      	add	r2, r1
 8005d40:	b2d2      	uxtb	r2, r2
 8005d42:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8005d46:	e000      	b.n	8005d4a <SerialAPI_WriteEmptyBuff+0xbe>
	serialAPI_Assert()
 8005d48:	bf00      	nop
}
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <SerialAPI_SkipBytes>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	size - size of skipped data
 */
static void SerialAPI_SkipBytes (sbgcGeneral_t *gSBGC, ui8 size)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + size))
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	6a1b      	ldr	r3, [r3, #32]
 8005d6e:	4619      	mov	r1, r3
 8005d70:	78fb      	ldrb	r3, [r7, #3]
 8005d72:	440b      	add	r3, r1
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d216      	bcs.n	8005da6 <SerialAPI_SkipBytes+0x56>
	{
		ui8 restSize = size - ((calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	6a1b      	ldr	r3, [r3, #32]
 8005d80:	461a      	mov	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	4413      	add	r3, r2
 8005d90:	73fb      	strb	r3, [r7, #15]

		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff + restSize;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005d98:	7bfa      	ldrb	r2, [r7, #15]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	440a      	add	r2, r1
 8005da2:	621a      	str	r2, [r3, #32]
	}

	else
		serialAPI_CurCmd_->_payload += size;
}
 8005da4:	e009      	b.n	8005dba <SerialAPI_SkipBytes+0x6a>
		serialAPI_CurCmd_->_payload += size;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	6a19      	ldr	r1, [r3, #32]
 8005dae:	78fa      	ldrb	r2, [r7, #3]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	6a1b      	ldr	r3, [r3, #32]
 8005db6:	440a      	add	r2, r1
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	3714      	adds	r7, #20
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr

08005dc6 <SerialAPI_StartWrite>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	cmdID - SBGC32 command identifier
 */
static void SerialAPI_StartWrite (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID
								  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b082      	sub	sp, #8
 8005dca:	af00      	add	r7, sp, #0
 8005dcc:	6078      	str	r0, [r7, #4]
 8005dce:	460b      	mov	r3, r1
 8005dd0:	70fb      	strb	r3, [r7, #3]
	/* Lock all SerialAPI operations to add a new command */
	serialAPI_Lock()
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d150      	bne.n	8005e7e <SerialAPI_StartWrite+0xb8>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
				return;
			}

	#endif

	if (gSBGC->_api->commandNumber >= SBGC_MAX_COMMAND_NUM)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	7e1b      	ldrb	r3, [r3, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d007      	beq.n	8005dfe <SerialAPI_StartWrite+0x38>
	{
		gSBGC->_lastCommandStatus = sbgcCOMMAND_BUFFER_OVERFLOW_ERROR;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2209      	movs	r2, #9
 8005df2:	725a      	strb	r2, [r3, #9]
		serialAPI_Error()
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	2203      	movs	r2, #3
 8005dfa:	701a      	strb	r2, [r3, #0]
 8005dfc:	e040      	b.n	8005e80 <SerialAPI_StartWrite+0xba>
			}

	#endif

	/* Begin to registration for a new command */
	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[gSBGC->_api->commandNumber];
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	7e1b      	ldrb	r3, [r3, #24]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	440b      	add	r3, r1
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4619      	mov	r1, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	440a      	add	r2, r1
 8005e1c:	621a      	str	r2, [r3, #32]
	gSBGC->_api->commandNumber++;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	7e1a      	ldrb	r2, [r3, #24]
 8005e24:	3201      	adds	r2, #1
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	761a      	strb	r2, [r3, #24]

	clearCmd_(serialAPI_CurCmd_);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	6a1b      	ldr	r3, [r3, #32]
 8005e30:	2224      	movs	r2, #36	; 0x24
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 ff1d 	bl	8007c74 <memset>

	serialAPI_CurCmd_->_payload = &gSBGC->_api->txCommandBuff[gSBGC->_api->txCommandBuffHead];
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005e48:	4619      	mov	r1, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	6a1b      	ldr	r3, [r3, #32]
 8005e50:	440a      	add	r2, r1
 8005e52:	621a      	str	r2, [r3, #32]

	serialAPI_CurCmd_->_id = ++gSBGC->_api->commandTotalCount;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	69da      	ldr	r2, [r3, #28]
 8005e5a:	3201      	adds	r2, #1
 8005e5c:	61da      	str	r2, [r3, #28]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6852      	ldr	r2, [r2, #4]
 8005e62:	6a12      	ldr	r2, [r2, #32]
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	6093      	str	r3, [r2, #8]
	serialAPI_CurCmd_->_state = SCState_FORMING;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	769a      	strb	r2, [r3, #26]
	serialAPI_CurCmd_->_commandID = cmdID;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	78fa      	ldrb	r2, [r7, #3]
 8005e7a:	76da      	strb	r2, [r3, #27]
 8005e7c:	e000      	b.n	8005e80 <SerialAPI_StartWrite+0xba>
	serialAPI_Lock()
 8005e7e:	bf00      	nop
		#endif

		gSBGC->_api->commandSortFlag = sbgcFALSE;

	#endif
}
 8005e80:	3708      	adds	r7, #8
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <SerialAPI_StartRead>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	cmdID - SBGC32 command identifier
 */
static void SerialAPI_StartRead (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID
								 /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	460b      	mov	r3, r1
 8005e90:	70fb      	strb	r3, [r7, #3]
	/* The SerialAPI is always locked at here */

	serialAPI_Assert()
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d144      	bne.n	8005f26 <SerialAPI_StartRead+0xa0>
				return;
			}

	#endif

	if (gSBGC->_api->commandNumber >= SBGC_MAX_COMMAND_NUM)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	7e1b      	ldrb	r3, [r3, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <SerialAPI_StartRead+0x30>
	{
		gSBGC->_lastCommandStatus = sbgcCOMMAND_BUFFER_OVERFLOW_ERROR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2209      	movs	r2, #9
 8005eaa:	725a      	strb	r2, [r3, #9]
		serialAPI_Error()
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	2203      	movs	r2, #3
 8005eb2:	701a      	strb	r2, [r3, #0]
 8005eb4:	e038      	b.n	8005f28 <SerialAPI_StartRead+0xa2>
			}

	#endif

	/* Begin to registration for a new command */
	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[gSBGC->_api->commandNumber];
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	7e1b      	ldrb	r3, [r3, #24]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	00db      	lsls	r3, r3, #3
 8005ec8:	440b      	add	r3, r1
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4619      	mov	r1, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	440a      	add	r2, r1
 8005ed4:	621a      	str	r2, [r3, #32]
	gSBGC->_api->commandNumber++;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	7e1a      	ldrb	r2, [r3, #24]
 8005edc:	3201      	adds	r2, #1
 8005ede:	b2d2      	uxtb	r2, r2
 8005ee0:	761a      	strb	r2, [r3, #24]

	clearCmd_(serialAPI_CurCmd_);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	2224      	movs	r2, #36	; 0x24
 8005eea:	2100      	movs	r1, #0
 8005eec:	4618      	mov	r0, r3
 8005eee:	f001 fec1 	bl	8007c74 <memset>

	serialAPI_CurCmd_->_id = ++gSBGC->_api->commandTotalCount;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	69da      	ldr	r2, [r3, #28]
 8005ef8:	3201      	adds	r2, #1
 8005efa:	61da      	str	r2, [r3, #28]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	6852      	ldr	r2, [r2, #4]
 8005f00:	6a12      	ldr	r2, [r2, #32]
 8005f02:	69db      	ldr	r3, [r3, #28]
 8005f04:	6093      	str	r3, [r2, #8]
	serialAPI_CurCmd_->_state = SCState_FORMING;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	769a      	strb	r2, [r3, #26]
	serialAPI_CurCmd_->_commandID = cmdID;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	78fa      	ldrb	r2, [r7, #3]
 8005f18:	76da      	strb	r2, [r3, #27]
	serialAPI_CurCmd_->parameters = SCParam_RX;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	6a1b      	ldr	r3, [r3, #32]
 8005f20:	2280      	movs	r2, #128	; 0x80
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	e000      	b.n	8005f28 <SerialAPI_StartRead+0xa2>
	serialAPI_Assert()
 8005f26:	bf00      	nop
		#endif

		gSBGC->_api->commandSortFlag = sbgcFALSE;

	#endif
}
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <SerialAPI_FinishWrite>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_FinishWrite (sbgcGeneral_t *gSBGC)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
	serialAPI_Assert()
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d116      	bne.n	8005f6e <SerialAPI_FinishWrite+0x40>

	#if (SBGC_USES_BLOCKING_MODE)

		gSBGC->_api->process(gSBGC, 0);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f48:	2100      	movs	r1, #0
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	7a1b      	ldrb	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <SerialAPI_FinishWrite+0x38>
		{
			gSBGC->_lastCommandStatus = sbgcCOMMAND_TX_ERROR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2203      	movs	r2, #3
 8005f5a:	725a      	strb	r2, [r3, #9]

			/* Close SerialAPI to prevent superfluous RX command registration */
			serialAPI_Error()
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2203      	movs	r2, #3
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	e004      	b.n	8005f70 <SerialAPI_FinishWrite+0x42>
		}

		else
		{
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	725a      	strb	r2, [r3, #9]
			return;
 8005f6c:	e000      	b.n	8005f70 <SerialAPI_FinishWrite+0x42>
	serialAPI_Assert()
 8005f6e:	bf00      	nop
	#if (SBGC_USES_TOKENS)
		gSBGC->_api->lastCommandToken = ((sbgcCommandToken_t)serialAPI_CurCmd_->_id) & 0x000000FF;
	#endif

	serialAPI_CurCmd_->_state = SCState_PREPARED;
}
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <SerialAPI_FinishRead>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_FinishRead (sbgcGeneral_t *gSBGC)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
	serialAPI_Assert()
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d116      	bne.n	8005fb6 <SerialAPI_FinishRead+0x40>

	#if (SBGC_USES_BLOCKING_MODE)

		gSBGC->_api->process(gSBGC, 0);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005f90:	2100      	movs	r1, #0
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	7a1b      	ldrb	r3, [r3, #8]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <SerialAPI_FinishRead+0x30>
			gSBGC->_lastCommandStatus = sbgcCOMMAND_RX_ERROR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2204      	movs	r2, #4
 8005fa2:	725a      	strb	r2, [r3, #9]
 8005fa4:	e002      	b.n	8005fac <SerialAPI_FinishRead+0x36>

		else
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	725a      	strb	r2, [r3, #9]

		gSBGC->_api->serialAPI_Status = serialAPI_OK;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	701a      	strb	r2, [r3, #0]
		return;
 8005fb4:	e000      	b.n	8005fb8 <SerialAPI_FinishRead+0x42>
	serialAPI_Assert()
 8005fb6:	bf00      	nop
		gSBGC->_api->lastCommandToken |= (((sbgcCommandToken_t)serialAPI_CurCmd_->_id) << 8) & 0x0000FF00;

	#endif

	serialAPI_CurCmd_->_state = SCState_PREPARED;
}
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <SerialAPI_AbortLastCmd>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_AbortLastCmd (sbgcGeneral_t *gSBGC)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b082      	sub	sp, #8
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
	#if (SBGC_USES_LOGS)
		gSBGC->_api->writeLog(gSBGC, &lastCommand_);
	#endif

	clearCmd_(&lastCommand_);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	695a      	ldr	r2, [r3, #20]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	7e1b      	ldrb	r3, [r3, #24]
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	460b      	mov	r3, r1
 8005fd6:	00db      	lsls	r3, r3, #3
 8005fd8:	440b      	add	r3, r1
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	3b24      	subs	r3, #36	; 0x24
 8005fde:	4413      	add	r3, r2
 8005fe0:	2224      	movs	r2, #36	; 0x24
 8005fe2:	2100      	movs	r1, #0
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f001 fe45 	bl	8007c74 <memset>
	gSBGC->_api->commandNumber--;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	7e1a      	ldrb	r2, [r3, #24]
 8005ff0:	3a01      	subs	r2, #1
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	761a      	strb	r2, [r3, #24]
}
 8005ff6:	bf00      	nop
 8005ff8:	3708      	adds	r7, #8
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <PostCheckConfirmation>:
	 *			See @ref SerialAPI_AddConfirmationCommand function
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 */
	static void PostCheckConfirmation (sbgcGeneral_t *gSBGC)
	{
 8005ffe:	b580      	push	{r7, lr}
 8006000:	b084      	sub	sp, #16
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
		sbgcConfirm_t *confirm = (sbgcConfirm_t*)serialAPI_CurCmdDest_;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	60fb      	str	r3, [r7, #12]

		SerialAPI_SkipBytes(gSBGC, 1);  // Skip commandID
 8006010:	2101      	movs	r1, #1
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff fe9c 	bl	8005d50 <SerialAPI_SkipBytes>

		if (serialAPI_CurCmd_->_commandID == CMD_CONFIRM)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	6a1b      	ldr	r3, [r3, #32]
 800601e:	7edb      	ldrb	r3, [r3, #27]
 8006020:	2b43      	cmp	r3, #67	; 0x43
 8006022:	d120      	bne.n	8006066 <PostCheckConfirmation+0x68>
		{
			if (serialAPI_CurCmd_->_payloadSize == 2)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	7f1b      	ldrb	r3, [r3, #28]
 800602c:	2b02      	cmp	r3, #2
 800602e:	d108      	bne.n	8006042 <PostCheckConfirmation+0x44>
				confirm->cmdData = SerialAPI_ReadByte(gSBGC);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7ff fb43 	bl	80056bc <SerialAPI_ReadByte>
 8006036:	4603      	mov	r3, r0
 8006038:	b29a      	uxth	r2, r3
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f8a3 2001 	strh.w	r2, [r3, #1]
 8006040:	e00d      	b.n	800605e <PostCheckConfirmation+0x60>

			else if (serialAPI_CurCmd_->_payloadSize == 3)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	6a1b      	ldr	r3, [r3, #32]
 8006048:	7f1b      	ldrb	r3, [r3, #28]
 800604a:	2b03      	cmp	r3, #3
 800604c:	d107      	bne.n	800605e <PostCheckConfirmation+0x60>
				confirm->cmdData = SerialAPI_ReadWord(gSBGC);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f7ff fbc8 	bl	80057e4 <SerialAPI_ReadWord>
 8006054:	4603      	mov	r3, r0
 8006056:	461a      	mov	r2, r3
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f8a3 2001 	strh.w	r2, [r3, #1]

			confirm->status = sbgcCONFIRM_RECEIVED;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	71da      	strb	r2, [r3, #7]
			if (serialAPI_CurCmd_->_payloadSize > 1)
				SerialAPI_ReadBuff(gSBGC, confirm->errorData, 4);

			confirm->status = sbgcCONFIRM_ERROR;
		}
	}
 8006064:	e01c      	b.n	80060a0 <PostCheckConfirmation+0xa2>
		else if (serialAPI_CurCmd_->_commandID == CMD_ERROR)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	685b      	ldr	r3, [r3, #4]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	7edb      	ldrb	r3, [r3, #27]
 800606e:	2bff      	cmp	r3, #255	; 0xff
 8006070:	d116      	bne.n	80060a0 <PostCheckConfirmation+0xa2>
			confirm->errorCode = SerialAPI_ReadByte(gSBGC);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f7ff fb22 	bl	80056bc <SerialAPI_ReadByte>
 8006078:	4603      	mov	r3, r0
 800607a:	461a      	mov	r2, r3
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	705a      	strb	r2, [r3, #1]
			if (serialAPI_CurCmd_->_payloadSize > 1)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	7f1b      	ldrb	r3, [r3, #28]
 8006088:	2b01      	cmp	r3, #1
 800608a:	d906      	bls.n	800609a <PostCheckConfirmation+0x9c>
				SerialAPI_ReadBuff(gSBGC, confirm->errorData, 4);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3302      	adds	r3, #2
 8006090:	2204      	movs	r2, #4
 8006092:	4619      	mov	r1, r3
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f7ff fd56 	bl	8005b46 <SerialAPI_ReadBuff>
			confirm->status = sbgcCONFIRM_ERROR;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2202      	movs	r2, #2
 800609e:	71da      	strb	r2, [r3, #7]
	}
 80060a0:	bf00      	nop
 80060a2:	3710      	adds	r7, #16
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <SerialAPI_AssignSystemEvent>:
 *			directly to pDestination
 *	@param	*pDestination - where the data will be written or changed
 *	@param	size - destination buffer size
 */
static void SerialAPI_AssignSystemEvent (sbgcGeneral_t *gSBGC, serialAPI_Event_t serialAPI_Event, void *pDestination, ui16 size)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	807b      	strh	r3, [r7, #2]
	serialAPI_Assert()
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d10f      	bne.n	80060e0 <SerialAPI_AssignSystemEvent+0x38>
		if (pDestination == NULL)
			serialAPI_Abort()

	#endif

	serialAPI_CurCmd_->_serialAPI_Event = serialAPI_Event;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	611a      	str	r2, [r3, #16]
	serialAPI_CurCmd_->_pDestination = pDestination;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	615a      	str	r2, [r3, #20]
	serialAPI_CurCmd_->_destinationSize = size;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	887a      	ldrh	r2, [r7, #2]
 80060dc:	831a      	strh	r2, [r3, #24]
 80060de:	e000      	b.n	80060e2 <SerialAPI_AssignSystemEvent+0x3a>
	serialAPI_Assert()
 80060e0:	bf00      	nop
}
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <SerialAPI_AddConfirmationCommand>:
 *	@param	cmdID - identifier of the command
 *			that needs to be confirmed
 */
static void SerialAPI_AddConfirmationCommand (sbgcGeneral_t *gSBGC, sbgcConfirm_t *confirm, serialAPI_CommandID_t cmdID
											  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	4613      	mov	r3, r2
 80060f8:	71fb      	strb	r3, [r7, #7]
	serialAPI_Assert()
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d118      	bne.n	8006136 <SerialAPI_AddConfirmationCommand+0x4a>

	if (confirm == SBGC_NO_CONFIRM) return;
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d017      	beq.n	800613a <SerialAPI_AddConfirmationCommand+0x4e>
				return;

		#endif

		/* Clear confirmation command */
		memset(confirm, 0, sizeof(sbgcConfirm_t));
 800610a:	2208      	movs	r2, #8
 800610c:	2100      	movs	r1, #0
 800610e:	68b8      	ldr	r0, [r7, #8]
 8006110:	f001 fdb0 	bl	8007c74 <memset>

		/* Assign command ID to confirm */
		confirm->commandID = cmdID;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	79fa      	ldrb	r2, [r7, #7]
 8006118:	701a      	strb	r2, [r3, #0]

		/* Start read */
		SerialAPI_StartRead(gSBGC, CMD_CONFIRM SBGC_ADVANCED_ARGS__);
 800611a:	2143      	movs	r1, #67	; 0x43
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f7ff feb2 	bl	8005e86 <SerialAPI_StartRead>
		SerialAPI_AssignSystemEvent(gSBGC, PostCheckConfirmation, confirm, sizeof(sbgcConfirm_t));
 8006122:	2308      	movs	r3, #8
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	4907      	ldr	r1, [pc, #28]	; (8006144 <SerialAPI_AddConfirmationCommand+0x58>)
 8006128:	68f8      	ldr	r0, [r7, #12]
 800612a:	f7ff ffbd 	bl	80060a8 <SerialAPI_AssignSystemEvent>
		SerialAPI_FinishRead(gSBGC);
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7ff ff21 	bl	8005f76 <SerialAPI_FinishRead>
 8006134:	e002      	b.n	800613c <SerialAPI_AddConfirmationCommand+0x50>
	serialAPI_Assert()
 8006136:	bf00      	nop
 8006138:	e000      	b.n	800613c <SerialAPI_AddConfirmationCommand+0x50>
	if (confirm == SBGC_NO_CONFIRM) return;
 800613a:	bf00      	nop

	#else
		unused_(gSBGC);
	#endif
}
 800613c:	3710      	adds	r7, #16
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	08005fff 	.word	0x08005fff

08006148 <SerialAPI_DefinePayloadSize>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	payloadSize - how many bytes command waits
 */
static void SerialAPI_DefinePayloadSize (sbgcGeneral_t *gSBGC, ui8 payloadSize)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	2b01      	cmp	r3, #1
 800615c:	d105      	bne.n	800616a <SerialAPI_DefinePayloadSize+0x22>

	serialAPI_CurCmd_->_payloadSize = payloadSize;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	6a1b      	ldr	r3, [r3, #32]
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	771a      	strb	r2, [r3, #28]
 8006168:	e000      	b.n	800616c <SerialAPI_DefinePayloadSize+0x24>
	serialAPI_Assert()
 800616a:	bf00      	nop
}
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr

08006176 <SerialAPI_BoundCommands>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_BoundCommands (sbgcGeneral_t *gSBGC)
{
 8006176:	b480      	push	{r7}
 8006178:	b083      	sub	sp, #12
 800617a:	af00      	add	r7, sp, #0
 800617c:	6078      	str	r0, [r7, #4]
	#if (SBGC_USES_BLOCKING_MODE)
		return;
 800617e:	bf00      	nop
			TxCmd->callback = NULL;
			TxCmd->callbackArg = NULL;
		}

	#endif
}
 8006180:	370c      	adds	r7, #12
 8006182:	46bd      	mov	sp, r7
 8006184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006188:	4770      	bx	lr

0800618a <SerialAPI_Exit>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
static sbgcCommandStatus_t SerialAPI_Exit (sbgcGeneral_t *gSBGC)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
	if (gSBGC->_api->serialAPI_Status == serialAPI_ERROR)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b03      	cmp	r3, #3
 800619a:	d11f      	bne.n	80061dc <SerialAPI_Exit+0x52>
	/* Check what's wrong */
	{
		while ((lastCommand_._state == SCState_ABORTED) && gSBGC->_api->commandNumber)
 800619c:	e002      	b.n	80061a4 <SerialAPI_Exit+0x1a>
		/* Delete all corrupted commands */
			SerialAPI_AbortLastCmd(gSBGC);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f7ff ff0d 	bl	8005fbe <SerialAPI_AbortLastCmd>
		while ((lastCommand_._state == SCState_ABORTED) && gSBGC->_api->commandNumber)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	695a      	ldr	r2, [r3, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	7e1b      	ldrb	r3, [r3, #24]
 80061b0:	4619      	mov	r1, r3
 80061b2:	460b      	mov	r3, r1
 80061b4:	00db      	lsls	r3, r3, #3
 80061b6:	440b      	add	r3, r1
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	3b24      	subs	r3, #36	; 0x24
 80061bc:	4413      	add	r3, r2
 80061be:	7e9b      	ldrb	r3, [r3, #26]
 80061c0:	2b05      	cmp	r3, #5
 80061c2:	d104      	bne.n	80061ce <SerialAPI_Exit+0x44>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	7e1b      	ldrb	r3, [r3, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1e7      	bne.n	800619e <SerialAPI_Exit+0x14>

        serialAPI_Unlock()
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	701a      	strb	r2, [r3, #0]

		/* Return error code */
		return gSBGC->_lastCommandStatus;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	7a5b      	ldrb	r3, [r3, #9]
 80061da:	e005      	b.n	80061e8 <SerialAPI_Exit+0x5e>
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
		#endif

	#endif

	serialAPI_Unlock()
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	701a      	strb	r2, [r3, #0]

	return gSBGC->_lastCommandStatus;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	7a5b      	ldrb	r3, [r3, #9]
}
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <PrivateSerialAPI_LinkCommandBuild>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkCommandBuild (sbgcGeneral_t *gSBGC)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	gSBGC->_api->writeByte	= SerialAPI_WriteByte;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4a2c      	ldr	r2, [pc, #176]	; (80062b0 <PrivateSerialAPI_LinkCommandBuild+0xc0>)
 80061fe:	649a      	str	r2, [r3, #72]	; 0x48
	gSBGC->_api->readByte	= SerialAPI_ReadByte;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	4a2b      	ldr	r2, [pc, #172]	; (80062b4 <PrivateSerialAPI_LinkCommandBuild+0xc4>)
 8006206:	655a      	str	r2, [r3, #84]	; 0x54
	gSBGC->_api->writeWord	= SerialAPI_WriteWord;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	4a2a      	ldr	r2, [pc, #168]	; (80062b8 <PrivateSerialAPI_LinkCommandBuild+0xc8>)
 800620e:	64da      	str	r2, [r3, #76]	; 0x4c
	gSBGC->_api->readWord	= SerialAPI_ReadWord;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4a29      	ldr	r2, [pc, #164]	; (80062bc <PrivateSerialAPI_LinkCommandBuild+0xcc>)
 8006216:	659a      	str	r2, [r3, #88]	; 0x58
	gSBGC->_api->writeLong	= SerialAPI_WriteLong;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	4a28      	ldr	r2, [pc, #160]	; (80062c0 <PrivateSerialAPI_LinkCommandBuild+0xd0>)
 800621e:	651a      	str	r2, [r3, #80]	; 0x50
	gSBGC->_api->readLong	= SerialAPI_ReadLong;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	4a27      	ldr	r2, [pc, #156]	; (80062c4 <PrivateSerialAPI_LinkCommandBuild+0xd4>)
 8006226:	65da      	str	r2, [r3, #92]	; 0x5c
	gSBGC->_api->writeBuff	= SerialAPI_WriteBuff;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	4a26      	ldr	r2, [pc, #152]	; (80062c8 <PrivateSerialAPI_LinkCommandBuild+0xd8>)
 800622e:	661a      	str	r2, [r3, #96]	; 0x60
	gSBGC->_api->readBuff	= SerialAPI_ReadBuff;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	4a25      	ldr	r2, [pc, #148]	; (80062cc <PrivateSerialAPI_LinkCommandBuild+0xdc>)
 8006236:	665a      	str	r2, [r3, #100]	; 0x64
	gSBGC->_api->writeEmptyBuff
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_WriteEmptyBuff;
 800623c:	4a24      	ldr	r2, [pc, #144]	; (80062d0 <PrivateSerialAPI_LinkCommandBuild+0xe0>)
 800623e:	669a      	str	r2, [r3, #104]	; 0x68
	gSBGC->_api->skipBytes	= SerialAPI_SkipBytes;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <PrivateSerialAPI_LinkCommandBuild+0xe4>)
 8006246:	66da      	str	r2, [r3, #108]	; 0x6c
	gSBGC->_api->startWrite	= SerialAPI_StartWrite;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	4a22      	ldr	r2, [pc, #136]	; (80062d8 <PrivateSerialAPI_LinkCommandBuild+0xe8>)
 800624e:	671a      	str	r2, [r3, #112]	; 0x70
	gSBGC->_api->startRead	= SerialAPI_StartRead;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a21      	ldr	r2, [pc, #132]	; (80062dc <PrivateSerialAPI_LinkCommandBuild+0xec>)
 8006256:	675a      	str	r2, [r3, #116]	; 0x74
	gSBGC->_api->finishWrite
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_FinishWrite;
 800625c:	4a20      	ldr	r2, [pc, #128]	; (80062e0 <PrivateSerialAPI_LinkCommandBuild+0xf0>)
 800625e:	679a      	str	r2, [r3, #120]	; 0x78
	gSBGC->_api->finishRead	= SerialAPI_FinishRead;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	4a1f      	ldr	r2, [pc, #124]	; (80062e4 <PrivateSerialAPI_LinkCommandBuild+0xf4>)
 8006266:	67da      	str	r2, [r3, #124]	; 0x7c
	gSBGC->_api->abortLast	= SerialAPI_AbortLastCmd;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4a1e      	ldr	r2, [pc, #120]	; (80062e8 <PrivateSerialAPI_LinkCommandBuild+0xf8>)
 800626e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	gSBGC->_api->addConfirm	= SerialAPI_AddConfirmationCommand;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4a1d      	ldr	r2, [pc, #116]	; (80062ec <PrivateSerialAPI_LinkCommandBuild+0xfc>)
 8006278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	gSBGC->_api->assignEvent
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_AssignSystemEvent;
 8006280:	4a1b      	ldr	r2, [pc, #108]	; (80062f0 <PrivateSerialAPI_LinkCommandBuild+0x100>)
 8006282:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	gSBGC->_api->definePayload
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_DefinePayloadSize;
 800628a:	4a1a      	ldr	r2, [pc, #104]	; (80062f4 <PrivateSerialAPI_LinkCommandBuild+0x104>)
 800628c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	gSBGC->_api->bound		= SerialAPI_BoundCommands;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	4a18      	ldr	r2, [pc, #96]	; (80062f8 <PrivateSerialAPI_LinkCommandBuild+0x108>)
 8006296:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	gSBGC->_api->exit		= SerialAPI_Exit;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	4a17      	ldr	r2, [pc, #92]	; (80062fc <PrivateSerialAPI_LinkCommandBuild+0x10c>)
 80062a0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	080055f3 	.word	0x080055f3
 80062b4:	080056bd 	.word	0x080056bd
 80062b8:	08005711 	.word	0x08005711
 80062bc:	080057e5 	.word	0x080057e5
 80062c0:	080058a7 	.word	0x080058a7
 80062c4:	08005979 	.word	0x08005979
 80062c8:	08005a6d 	.word	0x08005a6d
 80062cc:	08005b47 	.word	0x08005b47
 80062d0:	08005c8d 	.word	0x08005c8d
 80062d4:	08005d51 	.word	0x08005d51
 80062d8:	08005dc7 	.word	0x08005dc7
 80062dc:	08005e87 	.word	0x08005e87
 80062e0:	08005f2f 	.word	0x08005f2f
 80062e4:	08005f77 	.word	0x08005f77
 80062e8:	08005fbf 	.word	0x08005fbf
 80062ec:	080060ed 	.word	0x080060ed
 80062f0:	080060a9 	.word	0x080060a9
 80062f4:	08006149 	.word	0x08006149
 80062f8:	08006177 	.word	0x08006177
 80062fc:	0800618b 	.word	0x0800618b

08006300 <SerialAPI_CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
static ui16 SerialAPI_CRC16_Calculate (ui8 const *data, ui16 length)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	807b      	strh	r3, [r7, #2]
	ui16 CRC_Register = 0;
 800630c:	2300      	movs	r3, #0
 800630e:	81fb      	strh	r3, [r7, #14]
	ui8 shiftRegister, dataBit, CRC_Bit;

	for (ui16 i = 0; i < length; i++)
 8006310:	2300      	movs	r3, #0
 8006312:	817b      	strh	r3, [r7, #10]
 8006314:	e02a      	b.n	800636c <SerialAPI_CRC16_Calculate+0x6c>
	{
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8006316:	2301      	movs	r3, #1
 8006318:	737b      	strb	r3, [r7, #13]
 800631a:	e021      	b.n	8006360 <SerialAPI_CRC16_Calculate+0x60>
		{
			dataBit = (data[i] & shiftRegister) ? 1 : 0;
 800631c:	897b      	ldrh	r3, [r7, #10]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	4413      	add	r3, r2
 8006322:	781a      	ldrb	r2, [r3, #0]
 8006324:	7b7b      	ldrb	r3, [r7, #13]
 8006326:	4013      	ands	r3, r2
 8006328:	b2db      	uxtb	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	bf14      	ite	ne
 800632e:	2301      	movne	r3, #1
 8006330:	2300      	moveq	r3, #0
 8006332:	b2db      	uxtb	r3, r3
 8006334:	727b      	strb	r3, [r7, #9]
			CRC_Bit = CRC_Register >> 15;
 8006336:	89fb      	ldrh	r3, [r7, #14]
 8006338:	0bdb      	lsrs	r3, r3, #15
 800633a:	b29b      	uxth	r3, r3
 800633c:	723b      	strb	r3, [r7, #8]
			CRC_Register <<= 1;
 800633e:	89fb      	ldrh	r3, [r7, #14]
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	81fb      	strh	r3, [r7, #14]

			if (dataBit != CRC_Bit)
 8006344:	7a7a      	ldrb	r2, [r7, #9]
 8006346:	7a3b      	ldrb	r3, [r7, #8]
 8006348:	429a      	cmp	r2, r3
 800634a:	d006      	beq.n	800635a <SerialAPI_CRC16_Calculate+0x5a>
				CRC_Register ^= SBGC_CRC16_POLYNOM;
 800634c:	89fb      	ldrh	r3, [r7, #14]
 800634e:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8006352:	f083 037a 	eor.w	r3, r3, #122	; 0x7a
 8006356:	43db      	mvns	r3, r3
 8006358:	81fb      	strh	r3, [r7, #14]
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 800635a:	7b7b      	ldrb	r3, [r7, #13]
 800635c:	005b      	lsls	r3, r3, #1
 800635e:	737b      	strb	r3, [r7, #13]
 8006360:	7b7b      	ldrb	r3, [r7, #13]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1da      	bne.n	800631c <SerialAPI_CRC16_Calculate+0x1c>
	for (ui16 i = 0; i < length; i++)
 8006366:	897b      	ldrh	r3, [r7, #10]
 8006368:	3301      	adds	r3, #1
 800636a:	817b      	strh	r3, [r7, #10]
 800636c:	897a      	ldrh	r2, [r7, #10]
 800636e:	887b      	ldrh	r3, [r7, #2]
 8006370:	429a      	cmp	r2, r3
 8006372:	d3d0      	bcc.n	8006316 <SerialAPI_CRC16_Calculate+0x16>
		}
	}

	return CRC_Register;
 8006374:	89fb      	ldrh	r3, [r7, #14]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <SBGC32_TX>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SBGC32_TX (sbgcGeneral_t *gSBGC)
{
 8006382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006386:	b089      	sub	sp, #36	; 0x24
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	466b      	mov	r3, sp
 800638e:	461e      	mov	r6, r3
	ui8 dataBuff [gSBGC->_api->currentSerialCommand->_payloadSize + SBGC_SERVICE_BYTES_NUM];
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	7f1b      	ldrb	r3, [r3, #28]
 8006398:	1d99      	adds	r1, r3, #6
 800639a:	1e4b      	subs	r3, r1, #1
 800639c:	617b      	str	r3, [r7, #20]
 800639e:	460a      	mov	r2, r1
 80063a0:	2300      	movs	r3, #0
 80063a2:	4690      	mov	r8, r2
 80063a4:	4699      	mov	r9, r3
 80063a6:	f04f 0200 	mov.w	r2, #0
 80063aa:	f04f 0300 	mov.w	r3, #0
 80063ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063ba:	460a      	mov	r2, r1
 80063bc:	2300      	movs	r3, #0
 80063be:	4614      	mov	r4, r2
 80063c0:	461d      	mov	r5, r3
 80063c2:	f04f 0200 	mov.w	r2, #0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	00eb      	lsls	r3, r5, #3
 80063cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063d0:	00e2      	lsls	r2, r4, #3
 80063d2:	460b      	mov	r3, r1
 80063d4:	3307      	adds	r3, #7
 80063d6:	08db      	lsrs	r3, r3, #3
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	ebad 0d03 	sub.w	sp, sp, r3
 80063de:	466b      	mov	r3, sp
 80063e0:	3300      	adds	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]

	/* Forming the command */
	dataBuff[0] = (SBGC_PROTOCOL_VERSION - 1) ? SBGC_P2_START_CHARACTER : SBGC_P1_START_CHARACTER;
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2224      	movs	r2, #36	; 0x24
 80063e8:	701a      	strb	r2, [r3, #0]
	dataBuff[1] = gSBGC->_api->currentSerialCommand->_commandID;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	7eda      	ldrb	r2, [r3, #27]
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	705a      	strb	r2, [r3, #1]
	dataBuff[2] = gSBGC->_api->currentSerialCommand->_payloadSize;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	7f1a      	ldrb	r2, [r3, #28]
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	709a      	strb	r2, [r3, #2]
	dataBuff[3] = dataBuff[1] + dataBuff[2];  // No need Modulo256 calculation
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	785a      	ldrb	r2, [r3, #1]
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	789b      	ldrb	r3, [r3, #2]
 800640a:	4413      	add	r3, r2
 800640c:	b2da      	uxtb	r2, r3
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	70da      	strb	r2, [r3, #3]

	memcpy(&dataBuff[4], gSBGC->_api->currentSerialCommand->_payload, gSBGC->_api->currentSerialCommand->_payloadSize);
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	1d18      	adds	r0, r3, #4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	6a19      	ldr	r1, [r3, #32]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	6a1b      	ldr	r3, [r3, #32]
 8006424:	7f1b      	ldrb	r3, [r3, #28]
 8006426:	461a      	mov	r2, r3
 8006428:	f001 fc16 	bl	8007c58 <memcpy>

	/* ui8 size = real size current gSBGC->_api->currentSerialCommand */
	ui8 size = gSBGC->_api->currentSerialCommand->_payloadSize + SBGC_SERVICE_BYTES_NUM;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	7f1b      	ldrb	r3, [r3, #28]
 8006434:	3306      	adds	r3, #6
 8006436:	74fb      	strb	r3, [r7, #19]
		dataBuff[4 + gSBGC->_api->currentSerialCommand->_payloadSize] =
				SerialAPI_Modulo256_Calculate(gSBGC->_api->currentSerialCommand->_payload, gSBGC->_api->currentSerialCommand->_payloadSize);

	else  // V.2
	{
		ui16 CRC16_Res = SerialAPI_CRC16_Calculate(&dataBuff[1], (4 + gSBGC->_api->currentSerialCommand->_payloadSize) - 1);
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	7f1b      	ldrb	r3, [r3, #28]
 8006444:	b29b      	uxth	r3, r3
 8006446:	3303      	adds	r3, #3
 8006448:	b29b      	uxth	r3, r3
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f7ff ff57 	bl	8006300 <SerialAPI_CRC16_Calculate>
 8006452:	4603      	mov	r3, r0
 8006454:	817b      	strh	r3, [r7, #10]
		memcpy(&dataBuff[4 + gSBGC->_api->currentSerialCommand->_payloadSize], &CRC16_Res, sizeof(CRC16_Res));
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	6a1b      	ldr	r3, [r3, #32]
 800645c:	7f1b      	ldrb	r3, [r3, #28]
 800645e:	3304      	adds	r3, #4
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	4413      	add	r3, r2
 8006464:	897a      	ldrh	r2, [r7, #10]
 8006466:	801a      	strh	r2, [r3, #0]
	}

	#if (SBGC_USES_BLOCKING_MODE)

		/* Launch timer */
		sbgcTicks_t launchTime = serialAPI_GetTick();
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	6812      	ldr	r2, [r2, #0]
 8006474:	4610      	mov	r0, r2
 8006476:	4798      	blx	r3
 8006478:	60f8      	str	r0, [r7, #12]

	#endif

	/* Transmit now */
	ui8 txStatus = gSBGC->_ll->drvTx(gSBGC->_ll->drv, dataBuff, size);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	687a      	ldr	r2, [r7, #4]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	6810      	ldr	r0, [r2, #0]
 8006486:	7cfa      	ldrb	r2, [r7, #19]
 8006488:	b292      	uxth	r2, r2
 800648a:	69f9      	ldr	r1, [r7, #28]
 800648c:	4798      	blx	r3
 800648e:	4603      	mov	r3, r0
 8006490:	76fb      	strb	r3, [r7, #27]
		if (txStatus != SBGC_DRV_TX_OK_FLAG)
		{

	#else

		while ((serialAPI_GetTick() - launchTime) < gSBGC->_api->currentSerialCommand->timeout &&
 8006492:	e00b      	b.n	80064ac <SBGC32_TX+0x12a>
			   (txStatus != SBGC_DRV_TX_OK_FLAG))
		/* Try to transmit the command while its time isn't over */
			txStatus = gSBGC->_ll->drvTx(gSBGC->_ll->drv, dataBuff, size);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	6810      	ldr	r0, [r2, #0]
 80064a0:	7cfa      	ldrb	r2, [r7, #19]
 80064a2:	b292      	uxth	r2, r2
 80064a4:	69f9      	ldr	r1, [r7, #28]
 80064a6:	4798      	blx	r3
 80064a8:	4603      	mov	r3, r0
 80064aa:	76fb      	strb	r3, [r7, #27]
		while ((serialAPI_GetTick() - launchTime) < gSBGC->_api->currentSerialCommand->timeout &&
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	6812      	ldr	r2, [r2, #0]
 80064b6:	6812      	ldr	r2, [r2, #0]
 80064b8:	4610      	mov	r0, r2
 80064ba:	4798      	blx	r3
 80064bc:	4602      	mov	r2, r0
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1ad2      	subs	r2, r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d202      	bcs.n	80064d4 <SBGC32_TX+0x152>
 80064ce:	7efb      	ldrb	r3, [r7, #27]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1df      	bne.n	8006494 <SBGC32_TX+0x112>

		if (txStatus != SBGC_DRV_TX_OK_FLAG)
 80064d4:	7efb      	ldrb	r3, [r7, #27]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d004      	beq.n	80064e4 <SBGC32_TX+0x162>
		{

	#endif

			gSBGC->_lastSerialCommandStatus = serialAPI_TX_BUS_BUSY_ERROR;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	721a      	strb	r2, [r3, #8]
 80064e0:	46b5      	mov	sp, r6
 80064e2:	e003      	b.n	80064ec <SBGC32_TX+0x16a>
			return;
		}

	/* Command was transmitted fine */
	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	721a      	strb	r2, [r3, #8]
 80064ea:	46b5      	mov	sp, r6
}
 80064ec:	3724      	adds	r7, #36	; 0x24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080064f4 <SBGC32_RX>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SBGC32_RX (sbgcGeneral_t *gSBGC)
{
 80064f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064f8:	b089      	sub	sp, #36	; 0x24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
	/* Parser initializing */
	static ui8 headBuff [3];  /* Header buffer:
	headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */

	ui8 startSymSample = (SBGC_PROTOCOL_VERSION - 1) ? SBGC_P2_START_CHARACTER : SBGC_P1_START_CHARACTER;
 80064fe:	2324      	movs	r3, #36	; 0x24
 8006500:	77fb      	strb	r3, [r7, #31]
		// Next - a command received OK

	}	parserState = STATE_IDLE;

	/* Start parse */
	switch (parserState)
 8006502:	4b94      	ldr	r3, [pc, #592]	; (8006754 <SBGC32_RX+0x260>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b03      	cmp	r3, #3
 8006508:	d07b      	beq.n	8006602 <SBGC32_RX+0x10e>
 800650a:	2b03      	cmp	r3, #3
 800650c:	f300 811e 	bgt.w	800674c <SBGC32_RX+0x258>
 8006510:	2b01      	cmp	r3, #1
 8006512:	dc02      	bgt.n	800651a <SBGC32_RX+0x26>
 8006514:	2b00      	cmp	r3, #0
 8006516:	da03      	bge.n	8006520 <SBGC32_RX+0x2c>
 8006518:	e118      	b.n	800674c <SBGC32_RX+0x258>
 800651a:	2b02      	cmp	r3, #2
 800651c:	d02e      	beq.n	800657c <SBGC32_RX+0x88>
 800651e:	e115      	b.n	800674c <SBGC32_RX+0x258>
	{
		/* Waiting start byte */
		case STATE_IDLE :
		case STATE_RESYNC :
		{
			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	6812      	ldr	r2, [r2, #0]
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
 8006530:	4603      	mov	r3, r0
 8006532:	837b      	strh	r3, [r7, #26]

			if (availableBytes && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 8006534:	8b7b      	ldrh	r3, [r7, #26]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d018      	beq.n	800656c <SBGC32_RX+0x78>
 800653a:	8b7b      	ldrh	r3, [r7, #26]
 800653c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006540:	4293      	cmp	r3, r2
 8006542:	d013      	beq.n	800656c <SBGC32_RX+0x78>
			{
				ui8 startSym = 0;
 8006544:	2300      	movs	r3, #0
 8006546:	737b      	strb	r3, [r7, #13]

				gSBGC->_ll->drvRx(gSBGC->_ll->drv, &startSym);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	6812      	ldr	r2, [r2, #0]
 8006554:	f107 010d 	add.w	r1, r7, #13
 8006558:	4610      	mov	r0, r2
 800655a:	4798      	blx	r3

				if (startSym != startSymSample)
 800655c:	7b7b      	ldrb	r3, [r7, #13]
 800655e:	7ffa      	ldrb	r2, [r7, #31]
 8006560:	429a      	cmp	r2, r3
 8006562:	d007      	beq.n	8006574 <SBGC32_RX+0x80>
				{
					gSBGC->_lastSerialCommandStatus = serialAPI_RX_EMPTY_BUFF_ERROR;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	721a      	strb	r2, [r3, #8]
 800656a:	e0ef      	b.n	800674c <SBGC32_RX+0x258>
				}
			}

			else
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_EMPTY_BUFF_ERROR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	721a      	strb	r2, [r3, #8]
				break;
 8006572:	e0eb      	b.n	800674c <SBGC32_RX+0x258>
			{
 8006574:	bf00      	nop
			}

			parserState = STATE_CHECK_HEADER;
 8006576:	4b77      	ldr	r3, [pc, #476]	; (8006754 <SBGC32_RX+0x260>)
 8006578:	2202      	movs	r2, #2
 800657a:	701a      	strb	r2, [r3, #0]
		}

		/* Waiting whole header */
		case STATE_CHECK_HEADER :
		{
			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6812      	ldr	r2, [r2, #0]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	4610      	mov	r0, r2
 800658a:	4798      	blx	r3
 800658c:	4603      	mov	r3, r0
 800658e:	837b      	strh	r3, [r7, #26]

			if ((availableBytes >= 3) && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 8006590:	8b7b      	ldrh	r3, [r7, #26]
 8006592:	2b02      	cmp	r3, #2
 8006594:	d919      	bls.n	80065ca <SBGC32_RX+0xd6>
 8006596:	8b7b      	ldrh	r3, [r7, #26]
 8006598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800659c:	4293      	cmp	r3, r2
 800659e:	d014      	beq.n	80065ca <SBGC32_RX+0xd6>
				for (ui8 i = 0; i < 3; i++)
 80065a0:	2300      	movs	r3, #0
 80065a2:	77bb      	strb	r3, [r7, #30]
 80065a4:	e00d      	b.n	80065c2 <SBGC32_RX+0xce>
					gSBGC->_ll->drvRx(gSBGC->_ll->drv, &headBuff[i]);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	6812      	ldr	r2, [r2, #0]
 80065b0:	6810      	ldr	r0, [r2, #0]
 80065b2:	7fba      	ldrb	r2, [r7, #30]
 80065b4:	4968      	ldr	r1, [pc, #416]	; (8006758 <SBGC32_RX+0x264>)
 80065b6:	440a      	add	r2, r1
 80065b8:	4611      	mov	r1, r2
 80065ba:	4798      	blx	r3
				for (ui8 i = 0; i < 3; i++)
 80065bc:	7fbb      	ldrb	r3, [r7, #30]
 80065be:	3301      	adds	r3, #1
 80065c0:	77bb      	strb	r3, [r7, #30]
 80065c2:	7fbb      	ldrb	r3, [r7, #30]
 80065c4:	2b02      	cmp	r3, #2
 80065c6:	d9ee      	bls.n	80065a6 <SBGC32_RX+0xb2>
 80065c8:	e003      	b.n	80065d2 <SBGC32_RX+0xde>

			else
			/* The parser could not read the next 3 header bytes. Try again in the next time */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_BUFFER_REALTIME_ERROR;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2203      	movs	r2, #3
 80065ce:	721a      	strb	r2, [r3, #8]
				break;
 80065d0:	e0bc      	b.n	800674c <SBGC32_RX+0x258>
			}

			if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 80065d2:	4b61      	ldr	r3, [pc, #388]	; (8006758 <SBGC32_RX+0x264>)
 80065d4:	781a      	ldrb	r2, [r3, #0]
 80065d6:	4b60      	ldr	r3, [pc, #384]	; (8006758 <SBGC32_RX+0x264>)
 80065d8:	785b      	ldrb	r3, [r3, #1]
 80065da:	4413      	add	r3, r2
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	4b5e      	ldr	r3, [pc, #376]	; (8006758 <SBGC32_RX+0x264>)
 80065e0:	789b      	ldrb	r3, [r3, #2]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d103      	bne.n	80065ee <SBGC32_RX+0xfa>
				(headBuff[0] == 0))
 80065e6:	4b5c      	ldr	r3, [pc, #368]	; (8006758 <SBGC32_RX+0x264>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
			if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d106      	bne.n	80065fc <SBGC32_RX+0x108>
			/* The header checksum is wrong. Break this command and look forward for a new command */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_HEADER_CHECKSUM_ERROR;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2204      	movs	r2, #4
 80065f2:	721a      	strb	r2, [r3, #8]
				parserState = STATE_RESYNC;
 80065f4:	4b57      	ldr	r3, [pc, #348]	; (8006754 <SBGC32_RX+0x260>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	701a      	strb	r2, [r3, #0]
				break;
 80065fa:	e0a7      	b.n	800674c <SBGC32_RX+0x258>
			}

			parserState = STATE_CHECK_PAYLOAD;
 80065fc:	4b55      	ldr	r3, [pc, #340]	; (8006754 <SBGC32_RX+0x260>)
 80065fe:	2203      	movs	r2, #3
 8006600:	701a      	strb	r2, [r3, #0]
			/* Passing to the next state */
		}

		/* Waiting whole payload and checksum */
		case STATE_CHECK_PAYLOAD :
		{
 8006602:	466b      	mov	r3, sp
 8006604:	461e      	mov	r6, r3
			ui8 checksumSize = SBGC_PROTOCOL_VERSION;
 8006606:	2302      	movs	r3, #2
 8006608:	767b      	strb	r3, [r7, #25]
			ui8 complexBuff [sizeof(headBuff) + headBuff[1] + checksumSize];  // (Header + payloadSize + checksum) buffer
 800660a:	4b53      	ldr	r3, [pc, #332]	; (8006758 <SBGC32_RX+0x264>)
 800660c:	785b      	ldrb	r3, [r3, #1]
 800660e:	461a      	mov	r2, r3
 8006610:	7e7b      	ldrb	r3, [r7, #25]
 8006612:	4413      	add	r3, r2
 8006614:	1cd9      	adds	r1, r3, #3
 8006616:	460b      	mov	r3, r1
 8006618:	3b01      	subs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	2300      	movs	r3, #0
 800661e:	4688      	mov	r8, r1
 8006620:	4699      	mov	r9, r3
 8006622:	f04f 0200 	mov.w	r2, #0
 8006626:	f04f 0300 	mov.w	r3, #0
 800662a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800662e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006632:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006636:	2300      	movs	r3, #0
 8006638:	460c      	mov	r4, r1
 800663a:	461d      	mov	r5, r3
 800663c:	f04f 0200 	mov.w	r2, #0
 8006640:	f04f 0300 	mov.w	r3, #0
 8006644:	00eb      	lsls	r3, r5, #3
 8006646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800664a:	00e2      	lsls	r2, r4, #3
 800664c:	1dcb      	adds	r3, r1, #7
 800664e:	08db      	lsrs	r3, r3, #3
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	ebad 0d03 	sub.w	sp, sp, r3
 8006656:	466b      	mov	r3, sp
 8006658:	3300      	adds	r3, #0
 800665a:	613b      	str	r3, [r7, #16]

			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6812      	ldr	r2, [r2, #0]
 8006666:	6812      	ldr	r2, [r2, #0]
 8006668:	4610      	mov	r0, r2
 800666a:	4798      	blx	r3
 800666c:	4603      	mov	r3, r0
 800666e:	837b      	strh	r3, [r7, #26]

			if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 8006670:	8b7a      	ldrh	r2, [r7, #26]
 8006672:	4b39      	ldr	r3, [pc, #228]	; (8006758 <SBGC32_RX+0x264>)
 8006674:	785b      	ldrb	r3, [r3, #1]
 8006676:	4619      	mov	r1, r3
 8006678:	7e7b      	ldrb	r3, [r7, #25]
 800667a:	440b      	add	r3, r1
 800667c:	429a      	cmp	r2, r3
 800667e:	db1f      	blt.n	80066c0 <SBGC32_RX+0x1cc>
 8006680:	8b7b      	ldrh	r3, [r7, #26]
 8006682:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006686:	4293      	cmp	r3, r2
 8006688:	d01a      	beq.n	80066c0 <SBGC32_RX+0x1cc>
				for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 800668a:	2300      	movs	r3, #0
 800668c:	777b      	strb	r3, [r7, #29]
 800668e:	e00e      	b.n	80066ae <SBGC32_RX+0x1ba>
					gSBGC->_ll->drvRx(gSBGC->_ll->drv, &complexBuff[i + 3]);  // Offset from header space
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6812      	ldr	r2, [r2, #0]
 800669a:	6810      	ldr	r0, [r2, #0]
 800669c:	7f7a      	ldrb	r2, [r7, #29]
 800669e:	3203      	adds	r2, #3
 80066a0:	6939      	ldr	r1, [r7, #16]
 80066a2:	440a      	add	r2, r1
 80066a4:	4611      	mov	r1, r2
 80066a6:	4798      	blx	r3
				for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 80066a8:	7f7b      	ldrb	r3, [r7, #29]
 80066aa:	3301      	adds	r3, #1
 80066ac:	777b      	strb	r3, [r7, #29]
 80066ae:	7f7a      	ldrb	r2, [r7, #29]
 80066b0:	4b29      	ldr	r3, [pc, #164]	; (8006758 <SBGC32_RX+0x264>)
 80066b2:	785b      	ldrb	r3, [r3, #1]
 80066b4:	4619      	mov	r1, r3
 80066b6:	7e7b      	ldrb	r3, [r7, #25]
 80066b8:	440b      	add	r3, r1
 80066ba:	429a      	cmp	r2, r3
 80066bc:	dbe8      	blt.n	8006690 <SBGC32_RX+0x19c>
 80066be:	e003      	b.n	80066c8 <SBGC32_RX+0x1d4>

			else
			/* The parser could not read the next payload in the full volume. Try again in the next time */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_BUFFER_REALTIME_ERROR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2203      	movs	r2, #3
 80066c4:	721a      	strb	r2, [r3, #8]
				break;
 80066c6:	e040      	b.n	800674a <SBGC32_RX+0x256>
				}
			}

			else  // V.2
			{
				memcpy(complexBuff, headBuff, 3);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	4a23      	ldr	r2, [pc, #140]	; (8006758 <SBGC32_RX+0x264>)
 80066cc:	8811      	ldrh	r1, [r2, #0]
 80066ce:	7892      	ldrb	r2, [r2, #2]
 80066d0:	8019      	strh	r1, [r3, #0]
 80066d2:	709a      	strb	r2, [r3, #2]
				ui16 CRC_Res = SerialAPI_CRC16_Calculate(complexBuff, headBuff[1] + 3);
 80066d4:	4b20      	ldr	r3, [pc, #128]	; (8006758 <SBGC32_RX+0x264>)
 80066d6:	785b      	ldrb	r3, [r3, #1]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3303      	adds	r3, #3
 80066dc:	b29b      	uxth	r3, r3
 80066de:	4619      	mov	r1, r3
 80066e0:	6938      	ldr	r0, [r7, #16]
 80066e2:	f7ff fe0d 	bl	8006300 <SerialAPI_CRC16_Calculate>
 80066e6:	4603      	mov	r3, r0
 80066e8:	81fb      	strh	r3, [r7, #14]

				if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 80066ea:	89fb      	ldrh	r3, [r7, #14]
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	4a1a      	ldr	r2, [pc, #104]	; (8006758 <SBGC32_RX+0x264>)
 80066f0:	7852      	ldrb	r2, [r2, #1]
 80066f2:	3203      	adds	r2, #3
 80066f4:	6939      	ldr	r1, [r7, #16]
 80066f6:	5c8a      	ldrb	r2, [r1, r2]
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d011      	beq.n	8006720 <SBGC32_RX+0x22c>
				   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 80066fc:	89fb      	ldrh	r3, [r7, #14]
 80066fe:	0a1b      	lsrs	r3, r3, #8
 8006700:	b29b      	uxth	r3, r3
 8006702:	b2db      	uxtb	r3, r3
 8006704:	4a14      	ldr	r2, [pc, #80]	; (8006758 <SBGC32_RX+0x264>)
 8006706:	7852      	ldrb	r2, [r2, #1]
 8006708:	3204      	adds	r2, #4
 800670a:	6939      	ldr	r1, [r7, #16]
 800670c:	5c8a      	ldrb	r2, [r1, r2]
				if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 800670e:	4293      	cmp	r3, r2
 8006710:	d006      	beq.n	8006720 <SBGC32_RX+0x22c>
				/* The command came corrupted. Break it, look forward for a new command */
				{
					gSBGC->_lastSerialCommandStatus = serialAPI_RX_PAYLOAD_CHECKSUM_ERROR;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2205      	movs	r2, #5
 8006716:	721a      	strb	r2, [r3, #8]
					parserState = STATE_RESYNC;
 8006718:	4b0e      	ldr	r3, [pc, #56]	; (8006754 <SBGC32_RX+0x260>)
 800671a:	2201      	movs	r2, #1
 800671c:	701a      	strb	r2, [r3, #0]
					break;
 800671e:	e014      	b.n	800674a <SBGC32_RX+0x256>
				}

			#endif

			/* Data passed all checks. Fill the new serialCommand struct */
			gSBGC->_api->saveCmd(gSBGC, (serialAPI_CommandID_t)headBuff[0], headBuff[1], &complexBuff[3]);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	f8d3 4098 	ldr.w	r4, [r3, #152]	; 0x98
 8006728:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <SBGC32_RX+0x264>)
 800672a:	7819      	ldrb	r1, [r3, #0]
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <SBGC32_RX+0x264>)
 800672e:	785a      	ldrb	r2, [r3, #1]
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	3303      	adds	r3, #3
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	47a0      	blx	r4

			/* Prepare parser for new reading */
			parserState = STATE_IDLE;
 8006738:	4b06      	ldr	r3, [pc, #24]	; (8006754 <SBGC32_RX+0x260>)
 800673a:	2200      	movs	r2, #0
 800673c:	701a      	strb	r2, [r3, #0]

			gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	721a      	strb	r2, [r3, #8]
			return;
 8006744:	bf00      	nop
 8006746:	46b5      	mov	sp, r6
 8006748:	e000      	b.n	800674c <SBGC32_RX+0x258>
 800674a:	46b5      	mov	sp, r6
		}
	}

	/* The command wasn't received. Exit */
}
 800674c:	3724      	adds	r7, #36	; 0x24
 800674e:	46bd      	mov	sp, r7
 8006750:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006754:	20000438 	.word	0x20000438
 8006758:	2000043c 	.word	0x2000043c

0800675c <PrivateSerialAPI_LinkLowLayer>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkLowLayer (sbgcGeneral_t *gSBGC)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
	gSBGC->_ll->tx = SBGC32_TX;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a05      	ldr	r2, [pc, #20]	; (8006780 <PrivateSerialAPI_LinkLowLayer+0x24>)
 800676a:	61da      	str	r2, [r3, #28]
	gSBGC->_ll->rx = SBGC32_RX;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a04      	ldr	r2, [pc, #16]	; (8006784 <PrivateSerialAPI_LinkLowLayer+0x28>)
 8006772:	621a      	str	r2, [r3, #32]
}
 8006774:	bf00      	nop
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr
 8006780:	08006383 	.word	0x08006383
 8006784:	080064f5 	.word	0x080064f5

08006788 <SerialAPI_DeleteSentCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to command
 */
static void SerialAPI_DeleteSentCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	if (serialCommand->_payloadSize == 0)
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	7f1b      	ldrb	r3, [r3, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	f000 8085 	beq.w	80068a6 <SerialAPI_DeleteSentCommand+0x11e>
		return;

	ui16 buffPointer = (ui16)(serialCommand->_payload - gSBGC->_api->txCommandBuff);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	6a1a      	ldr	r2, [r3, #32]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	81bb      	strh	r3, [r7, #12]
	ui16 shiftSize = calcFreeSpaceFIFO(gSBGC->_api->txCommandBuffHead, buffPointer, SBGC_TX_BUFF_TOTAL_SIZE);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	685b      	ldr	r3, [r3, #4]
 80067ae:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80067b2:	b29b      	uxth	r3, r3
 80067b4:	89ba      	ldrh	r2, [r7, #12]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d30b      	bcc.n	80067d2 <SerialAPI_DeleteSentCommand+0x4a>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80067c2:	b29a      	uxth	r2, r3
 80067c4:	89bb      	ldrh	r3, [r7, #12]
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	e007      	b.n	80067e2 <SerialAPI_DeleteSentCommand+0x5a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80067da:	b29a      	uxth	r2, r3
 80067dc:	89bb      	ldrh	r3, [r7, #12]
 80067de:	1ad3      	subs	r3, r2, r3
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	817b      	strh	r3, [r7, #10]
	shiftSize = (shiftSize == SBGC_TX_BUFF_TOTAL_SIZE) ? 0 : shiftSize;
 80067e4:	897b      	ldrh	r3, [r7, #10]
 80067e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ea:	d001      	beq.n	80067f0 <SerialAPI_DeleteSentCommand+0x68>
 80067ec:	897b      	ldrh	r3, [r7, #10]
 80067ee:	e000      	b.n	80067f2 <SerialAPI_DeleteSentCommand+0x6a>
 80067f0:	2300      	movs	r3, #0
 80067f2:	817b      	strh	r3, [r7, #10]

	if (buffPointer != gSBGC->_api->txCommandBuffTail)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	89ba      	ldrh	r2, [r7, #12]
 8006800:	429a      	cmp	r2, r3
 8006802:	d043      	beq.n	800688c <SerialAPI_DeleteSentCommand+0x104>
	/* This command isn't first */
	{
		if (((buffPointer + serialCommand->_payloadSize) & SBGC_TX_BUFF_SIZE_MASK) == gSBGC->_api->txCommandBuffHead)
 8006804:	89bb      	ldrh	r3, [r7, #12]
 8006806:	683a      	ldr	r2, [r7, #0]
 8006808:	7f12      	ldrb	r2, [r2, #28]
 800680a:	4413      	add	r3, r2
 800680c:	b2db      	uxtb	r3, r3
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	6852      	ldr	r2, [r2, #4]
 8006812:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8006816:	4293      	cmp	r3, r2
 8006818:	d10c      	bne.n	8006834 <SerialAPI_DeleteSentCommand+0xac>
		/* This command is latest */
		{
			gSBGC->_api->txCommandBuffHead -= serialCommand->_payloadSize;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	7f1a      	ldrb	r2, [r3, #28]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	1a8a      	subs	r2, r1, r2
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			return;
 8006832:	e039      	b.n	80068a8 <SerialAPI_DeleteSentCommand+0x120>
		}

		/* This command is between other commands */
		for (ui16 i = 0; i < shiftSize; i++)
 8006834:	2300      	movs	r3, #0
 8006836:	81fb      	strh	r3, [r7, #14]
 8006838:	e017      	b.n	800686a <SerialAPI_DeleteSentCommand+0xe2>
		/* Shifting */
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
					gSBGC->_api->txCommandBuff[((buffPointer + serialCommand->_payloadSize + i) & SBGC_TX_BUFF_SIZE_MASK)];
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006840:	89bb      	ldrh	r3, [r7, #12]
 8006842:	6839      	ldr	r1, [r7, #0]
 8006844:	7f09      	ldrb	r1, [r1, #28]
 8006846:	4419      	add	r1, r3
 8006848:	89fb      	ldrh	r3, [r7, #14]
 800684a:	440b      	add	r3, r1
 800684c:	b2db      	uxtb	r3, r3
 800684e:	441a      	add	r2, r3
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8006856:	89b8      	ldrh	r0, [r7, #12]
 8006858:	89fb      	ldrh	r3, [r7, #14]
 800685a:	4403      	add	r3, r0
 800685c:	b2db      	uxtb	r3, r3
 800685e:	440b      	add	r3, r1
					gSBGC->_api->txCommandBuff[((buffPointer + serialCommand->_payloadSize + i) & SBGC_TX_BUFF_SIZE_MASK)];
 8006860:	7812      	ldrb	r2, [r2, #0]
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
 8006862:	701a      	strb	r2, [r3, #0]
		for (ui16 i = 0; i < shiftSize; i++)
 8006864:	89fb      	ldrh	r3, [r7, #14]
 8006866:	3301      	adds	r3, #1
 8006868:	81fb      	strh	r3, [r7, #14]
 800686a:	89fa      	ldrh	r2, [r7, #14]
 800686c:	897b      	ldrh	r3, [r7, #10]
 800686e:	429a      	cmp	r2, r3
 8006870:	d3e3      	bcc.n	800683a <SerialAPI_DeleteSentCommand+0xb2>

		/* Shift head after buffer shifting */
		gSBGC->_api->txCommandBuffHead -= serialCommand->_payloadSize;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	7f1a      	ldrb	r2, [r3, #28]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	1a8a      	subs	r2, r1, r2
 8006884:	b2d2      	uxtb	r2, r2
 8006886:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800688a:	e00d      	b.n	80068a8 <SerialAPI_DeleteSentCommand+0x120>
	}

	else
	/* This command is first */
		gSBGC->_api->txCommandBuffTail += serialCommand->_payloadSize;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	7f1a      	ldrb	r2, [r3, #28]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	685b      	ldr	r3, [r3, #4]
 800689c:	440a      	add	r2, r1
 800689e:	b2d2      	uxtb	r2, r2
 80068a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80068a4:	e000      	b.n	80068a8 <SerialAPI_DeleteSentCommand+0x120>
		return;
 80068a6:	bf00      	nop
}
 80068a8:	3714      	adds	r7, #20
 80068aa:	46bd      	mov	sp, r7
 80068ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b0:	4770      	bx	lr

080068b2 <SerialAPI_SaveReceivedCommand>:
 *	@param	cmdID - ID part of serial command
 *	@param	payloadSize - size part of serial command
 *	@param	*payload - pointer to payload part of serial command
 */
static void SerialAPI_SaveReceivedCommand (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID, ui8 payloadSize, ui8 const *payload)
{
 80068b2:	b490      	push	{r4, r7}
 80068b4:	b086      	sub	sp, #24
 80068b6:	af00      	add	r7, sp, #0
 80068b8:	60f8      	str	r0, [r7, #12]
 80068ba:	607b      	str	r3, [r7, #4]
 80068bc:	460b      	mov	r3, r1
 80068be:	72fb      	strb	r3, [r7, #11]
 80068c0:	4613      	mov	r3, r2
 80068c2:	72bb      	strb	r3, [r7, #10]
	if ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)) &&
 80068c4:	7abb      	ldrb	r3, [r7, #10]
 80068c6:	1c5a      	adds	r2, r3, #1
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068d8:	4299      	cmp	r1, r3
 80068da:	d30c      	bcc.n	80068f6 <SerialAPI_SaveReceivedCommand+0x44>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80068e4:	4619      	mov	r1, r3
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068ee:	1acb      	subs	r3, r1, r3
 80068f0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80068f4:	e009      	b.n	800690a <SerialAPI_SaveReceivedCommand+0x58>
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80068fe:	4619      	mov	r1, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006908:	1acb      	subs	r3, r1, r3
 800690a:	4293      	cmp	r3, r2
 800690c:	dc4e      	bgt.n	80069ac <SerialAPI_SaveReceivedCommand+0xfa>
		(gSBGC->_api->rxCommandBuffHead != gSBGC->_api->rxCommandBuffTail))
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
	if ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)) &&
 800691e:	429a      	cmp	r2, r3
 8006920:	d044      	beq.n	80069ac <SerialAPI_SaveReceivedCommand+0xfa>
			return;

		#else

			/* It's necessary to clean the space for a new serial command */
			while ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)))
 8006922:	e016      	b.n	8006952 <SerialAPI_SaveReceivedCommand+0xa0>
				gSBGC->_api->rxCommandBuffTail += gSBGC->_api->rxCommandBuff[(gSBGC->_api->rxCommandBuffTail + 1) & SBGC_RX_BUFF_SIZE_MASK] + 2;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800693a:	3301      	adds	r3, #1
 800693c:	b2db      	uxtb	r3, r3
 800693e:	440b      	add	r3, r1
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	4413      	add	r3, r2
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	3202      	adds	r2, #2
 800694c:	b2d2      	uxtb	r2, r2
 800694e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			while ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)))
 8006952:	7abb      	ldrb	r3, [r7, #10]
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006966:	4299      	cmp	r1, r3
 8006968:	d30c      	bcc.n	8006984 <SerialAPI_SaveReceivedCommand+0xd2>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006972:	4619      	mov	r1, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800697c:	1acb      	subs	r3, r1, r3
 800697e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006982:	e009      	b.n	8006998 <SerialAPI_SaveReceivedCommand+0xe6>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800698c:	4619      	mov	r1, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006996:	1acb      	subs	r3, r1, r3
 8006998:	4293      	cmp	r3, r2
 800699a:	ddc3      	ble.n	8006924 <SerialAPI_SaveReceivedCommand+0x72>

			gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80069a8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

		#endif
	}

	gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = cmdID;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80069ba:	1c50      	adds	r0, r2, #1
 80069bc:	b2c0      	uxtb	r0, r0
 80069be:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
 80069c2:	4613      	mov	r3, r2
 80069c4:	440b      	add	r3, r1
 80069c6:	7afa      	ldrb	r2, [r7, #11]
 80069c8:	701a      	strb	r2, [r3, #0]
	gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = payloadSize;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80069d8:	1c50      	adds	r0, r2, #1
 80069da:	b2c0      	uxtb	r0, r0
 80069dc:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
 80069e0:	4613      	mov	r3, r2
 80069e2:	440b      	add	r3, r1
 80069e4:	7aba      	ldrb	r2, [r7, #10]
 80069e6:	701a      	strb	r2, [r3, #0]

	for (ui16 i = 0; i < payloadSize; i++)
 80069e8:	2300      	movs	r3, #0
 80069ea:	82fb      	strh	r3, [r7, #22]
 80069ec:	e014      	b.n	8006a18 <SerialAPI_SaveReceivedCommand+0x166>
		gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = payload[i];
 80069ee:	8afb      	ldrh	r3, [r7, #22]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	18d1      	adds	r1, r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 8006a02:	1c54      	adds	r4, r2, #1
 8006a04:	b2e4      	uxtb	r4, r4
 8006a06:	f883 4031 	strb.w	r4, [r3, #49]	; 0x31
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	4403      	add	r3, r0
 8006a0e:	780a      	ldrb	r2, [r1, #0]
 8006a10:	701a      	strb	r2, [r3, #0]
	for (ui16 i = 0; i < payloadSize; i++)
 8006a12:	8afb      	ldrh	r3, [r7, #22]
 8006a14:	3301      	adds	r3, #1
 8006a16:	82fb      	strh	r3, [r7, #22]
 8006a18:	7abb      	ldrb	r3, [r7, #10]
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	8afa      	ldrh	r2, [r7, #22]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d3e5      	bcc.n	80069ee <SerialAPI_SaveReceivedCommand+0x13c>
}
 8006a22:	bf00      	nop
 8006a24:	bf00      	nop
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc90      	pop	{r4, r7}
 8006a2c:	4770      	bx	lr

08006a2e <SerialAPI_ReadReceivedCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to command
 */
static ui8 SerialAPI_ReadReceivedCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
	serialCommand->_commandID = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP++];
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006a46:	1c50      	adds	r0, r2, #1
 8006a48:	b2c0      	uxtb	r0, r0
 8006a4a:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
 8006a4e:	4613      	mov	r3, r2
 8006a50:	440b      	add	r3, r1
 8006a52:	781a      	ldrb	r2, [r3, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	76da      	strb	r2, [r3, #27]

	ui8 payloadSize = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP++];
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006a66:	1c50      	adds	r0, r2, #1
 8006a68:	b2c0      	uxtb	r0, r0
 8006a6a:	f883 0032 	strb.w	r0, [r3, #50]	; 0x32
 8006a6e:	4613      	mov	r3, r2
 8006a70:	440b      	add	r3, r1
 8006a72:	781b      	ldrb	r3, [r3, #0]
 8006a74:	73fb      	strb	r3, [r7, #15]

	serialCommand->_payload = &gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP];
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6852      	ldr	r2, [r2, #4]
 8006a80:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006a84:	441a      	add	r2, r3
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	621a      	str	r2, [r3, #32]
	gSBGC->_api->rxCommandBuffCurP += payloadSize;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	f893 1032 	ldrb.w	r1, [r3, #50]	; 0x32
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	7bfa      	ldrb	r2, [r7, #15]
 8006a98:	440a      	add	r2, r1
 8006a9a:	b2d2      	uxtb	r2, r2
 8006a9c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	return payloadSize;
 8006aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <SerialAPI_DeleteReceivedCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*payload - pointer to command's payload
 */
static void SerialAPI_DeleteReceivedCommand (sbgcGeneral_t *gSBGC, ui8 const *payload)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
 8006ab6:	6039      	str	r1, [r7, #0]
	if (payload == NULL)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	f000 80ab 	beq.w	8006c16 <SerialAPI_DeleteReceivedCommand+0x168>
		return;

	/* Note: gSBGC->_api->rxCommandBuffCurP aren't available to read here */

	ui16 buffPointer = (((((uintptr_t)payload) - 2) & SBGC_RX_BUFF_SIZE_MASK) - (uintptr_t)gSBGC->_api->rxCommandBuff) & SBGC_RX_BUFF_SIZE_MASK;
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	687a      	ldr	r2, [r7, #4]
 8006ac4:	6852      	ldr	r2, [r2, #4]
 8006ac6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	3b02      	subs	r3, #2
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	b2db      	uxtb	r3, r3
 8006ad2:	81bb      	strh	r3, [r7, #12]
	ui8 cmdSize = gSBGC->_api->rxCommandBuff[((buffPointer + 1) & SBGC_RX_BUFF_SIZE_MASK)] + 2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ada:	89bb      	ldrh	r3, [r7, #12]
 8006adc:	3301      	adds	r3, #1
 8006ade:	b2db      	uxtb	r3, r3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	3302      	adds	r3, #2
 8006ae6:	72fb      	strb	r3, [r7, #11]
	ui16 shiftSize = calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffHead, (buffPointer + cmdSize) & SBGC_RX_BUFF_SIZE_MASK,
 8006ae8:	89ba      	ldrh	r2, [r7, #12]
 8006aea:	7afb      	ldrb	r3, [r7, #11]
 8006aec:	4413      	add	r3, r2
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	6852      	ldr	r2, [r2, #4]
 8006af4:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8006af8:	4293      	cmp	r3, r2
 8006afa:	db11      	blt.n	8006b20 <SerialAPI_DeleteReceivedCommand+0x72>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b04:	b29a      	uxth	r2, r3
 8006b06:	7afb      	ldrb	r3, [r7, #11]
 8006b08:	b299      	uxth	r1, r3
 8006b0a:	89bb      	ldrh	r3, [r7, #12]
 8006b0c:	440b      	add	r3, r1
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	e00d      	b.n	8006b3c <SerialAPI_DeleteReceivedCommand+0x8e>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	7afb      	ldrb	r3, [r7, #11]
 8006b2c:	b299      	uxth	r1, r3
 8006b2e:	89bb      	ldrh	r3, [r7, #12]
 8006b30:	440b      	add	r3, r1
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	b2db      	uxtb	r3, r3
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	813b      	strh	r3, [r7, #8]
									   SBGC_RX_BUFF_TOTAL_SIZE);
	shiftSize = (shiftSize == SBGC_RX_BUFF_TOTAL_SIZE) ? 0 : shiftSize;
 8006b3e:	893b      	ldrh	r3, [r7, #8]
 8006b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b44:	d001      	beq.n	8006b4a <SerialAPI_DeleteReceivedCommand+0x9c>
 8006b46:	893b      	ldrh	r3, [r7, #8]
 8006b48:	e000      	b.n	8006b4c <SerialAPI_DeleteReceivedCommand+0x9e>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	813b      	strh	r3, [r7, #8]

	if (buffPointer != gSBGC->_api->rxCommandBuffTail)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	89ba      	ldrh	r2, [r7, #12]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d047      	beq.n	8006bee <SerialAPI_DeleteReceivedCommand+0x140>
	/* This command isn't first */
	{
		if (((buffPointer + cmdSize) & SBGC_RX_BUFF_SIZE_MASK) == gSBGC->_api->rxCommandBuffHead)
 8006b5e:	89ba      	ldrh	r2, [r7, #12]
 8006b60:	7afb      	ldrb	r3, [r7, #11]
 8006b62:	4413      	add	r3, r2
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6852      	ldr	r2, [r2, #4]
 8006b6a:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d113      	bne.n	8006b9a <SerialAPI_DeleteReceivedCommand+0xec>
		/* This command is latest */
		{
			gSBGC->_api->rxCommandBuffHead -= cmdSize;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	7afa      	ldrb	r2, [r7, #11]
 8006b80:	1a8a      	subs	r2, r1, r2
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

			/* Prepare the parser for next reading */
			gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006b94:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			return;
 8006b98:	e03e      	b.n	8006c18 <SerialAPI_DeleteReceivedCommand+0x16a>
		}

		/* This command is between other commands */
		for (ui16 i = 0; i < shiftSize; i++)
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	81fb      	strh	r3, [r7, #14]
 8006b9e:	e016      	b.n	8006bce <SerialAPI_DeleteReceivedCommand+0x120>
		/* Shifting */
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
					gSBGC->_api->rxCommandBuff[((buffPointer + cmdSize + i) & SBGC_RX_BUFF_SIZE_MASK)];
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ba6:	89b9      	ldrh	r1, [r7, #12]
 8006ba8:	7afb      	ldrb	r3, [r7, #11]
 8006baa:	4419      	add	r1, r3
 8006bac:	89fb      	ldrh	r3, [r7, #14]
 8006bae:	440b      	add	r3, r1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	441a      	add	r2, r3
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006bba:	89b8      	ldrh	r0, [r7, #12]
 8006bbc:	89fb      	ldrh	r3, [r7, #14]
 8006bbe:	4403      	add	r3, r0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	440b      	add	r3, r1
					gSBGC->_api->rxCommandBuff[((buffPointer + cmdSize + i) & SBGC_RX_BUFF_SIZE_MASK)];
 8006bc4:	7812      	ldrb	r2, [r2, #0]
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
 8006bc6:	701a      	strb	r2, [r3, #0]
		for (ui16 i = 0; i < shiftSize; i++)
 8006bc8:	89fb      	ldrh	r3, [r7, #14]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	81fb      	strh	r3, [r7, #14]
 8006bce:	89fa      	ldrh	r2, [r7, #14]
 8006bd0:	893b      	ldrh	r3, [r7, #8]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d3e4      	bcc.n	8006ba0 <SerialAPI_DeleteReceivedCommand+0xf2>

		/* Shift head after buffer shifting */
		gSBGC->_api->rxCommandBuffHead -= cmdSize;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	7afa      	ldrb	r2, [r7, #11]
 8006be4:	1a8a      	subs	r2, r1, r2
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8006bec:	e00a      	b.n	8006c04 <SerialAPI_DeleteReceivedCommand+0x156>
	}

	else
	/* This command is first */
		gSBGC->_api->rxCommandBuffTail += cmdSize;  // Shift head pointer
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	7afa      	ldrb	r2, [r7, #11]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	b2d2      	uxtb	r2, r2
 8006c00:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* Prepare the parser for next reading */
	gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685a      	ldr	r2, [r3, #4]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006c10:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006c14:	e000      	b.n	8006c18 <SerialAPI_DeleteReceivedCommand+0x16a>
		return;
 8006c16:	bf00      	nop
}
 8006c18:	3714      	adds	r7, #20
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c20:	4770      	bx	lr

08006c22 <SerialAPI_DeleteCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	index - command sequence number
 */
static void SerialAPI_DeleteCommand (sbgcGeneral_t *gSBGC, ui8 index)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b084      	sub	sp, #16
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
	if ((index >= gSBGC->_api->commandNumber) || (gSBGC->_api->commandNumber == 0))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	7e1b      	ldrb	r3, [r3, #24]
 8006c34:	78fa      	ldrb	r2, [r7, #3]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d27e      	bcs.n	8006d38 <SerialAPI_DeleteCommand+0x116>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	7e1b      	ldrb	r3, [r3, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d079      	beq.n	8006d38 <SerialAPI_DeleteCommand+0x116>
		return;

	if (gSBGC->_api->commandBuff[index]._state != SCState_FORMING)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	6959      	ldr	r1, [r3, #20]
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	440b      	add	r3, r1
 8006c56:	7e9b      	ldrb	r3, [r3, #26]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d03c      	beq.n	8006cd6 <SerialAPI_DeleteCommand+0xb4>
	/* A command was in runtime */
	{
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]
 8006c60:	e01e      	b.n	8006ca0 <SerialAPI_DeleteCommand+0x7e>
			memcpy(&gSBGC->_api->commandBuff[index + i], &gSBGC->_api->commandBuff[index + i + 1], sizeof(serialAPI_Command_t));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	695a      	ldr	r2, [r3, #20]
 8006c68:	78f9      	ldrb	r1, [r7, #3]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	440b      	add	r3, r1
 8006c6e:	4619      	mov	r1, r3
 8006c70:	460b      	mov	r3, r1
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	440b      	add	r3, r1
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	18d0      	adds	r0, r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	6959      	ldr	r1, [r3, #20]
 8006c80:	78fa      	ldrb	r2, [r7, #3]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	1c5a      	adds	r2, r3, #1
 8006c88:	4613      	mov	r3, r2
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	440b      	add	r3, r1
 8006c92:	2224      	movs	r2, #36	; 0x24
 8006c94:	4619      	mov	r1, r3
 8006c96:	f000 ffdf 	bl	8007c58 <memcpy>
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	7e1b      	ldrb	r3, [r3, #24]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	1ad3      	subs	r3, r2, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	68fa      	ldr	r2, [r7, #12]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	dbd6      	blt.n	8006c62 <SerialAPI_DeleteCommand+0x40>

		gSBGC->_api->commandNumber--;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	7e1a      	ldrb	r2, [r3, #24]
 8006cba:	3a01      	subs	r2, #1
 8006cbc:	b2d2      	uxtb	r2, r2
 8006cbe:	761a      	strb	r2, [r3, #24]
		gSBGC->_api->commandNumber = constrain_(gSBGC->_api->commandNumber, 0, SBGC_MAX_COMMAND_NUM);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	7e1a      	ldrb	r2, [r3, #24]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2a01      	cmp	r2, #1
 8006ccc:	bf28      	it	cs
 8006cce:	2201      	movcs	r2, #1
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	761a      	strb	r2, [r3, #24]
 8006cd4:	e02b      	b.n	8006d2e <SerialAPI_DeleteCommand+0x10c>
	}

	else
	/* A command cannot continue to exist cause a daughter command doesn't fit to the command buffer */
	{
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	60bb      	str	r3, [r7, #8]
 8006cda:	e01e      	b.n	8006d1a <SerialAPI_DeleteCommand+0xf8>
			memcpy(&gSBGC->_api->commandBuff[index + i], &gSBGC->_api->commandBuff[index + i + 1], sizeof(serialAPI_Command_t));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	695a      	ldr	r2, [r3, #20]
 8006ce2:	78f9      	ldrb	r1, [r7, #3]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	440b      	add	r3, r1
 8006ce8:	4619      	mov	r1, r3
 8006cea:	460b      	mov	r3, r1
 8006cec:	00db      	lsls	r3, r3, #3
 8006cee:	440b      	add	r3, r1
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	18d0      	adds	r0, r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	6959      	ldr	r1, [r3, #20]
 8006cfa:	78fa      	ldrb	r2, [r7, #3]
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	4413      	add	r3, r2
 8006d00:	1c5a      	adds	r2, r3, #1
 8006d02:	4613      	mov	r3, r2
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	440b      	add	r3, r1
 8006d0c:	2224      	movs	r2, #36	; 0x24
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f000 ffa2 	bl	8007c58 <memcpy>
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	3301      	adds	r3, #1
 8006d18:	60bb      	str	r3, [r7, #8]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	7e1b      	ldrb	r3, [r3, #24]
 8006d20:	461a      	mov	r2, r3
 8006d22:	78fb      	ldrb	r3, [r7, #3]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	3b01      	subs	r3, #1
 8006d28:	68ba      	ldr	r2, [r7, #8]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	dbd6      	blt.n	8006cdc <SerialAPI_DeleteCommand+0xba>
	}

	serialAPI_CurCmd_ = NULL;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	621a      	str	r2, [r3, #32]
 8006d36:	e000      	b.n	8006d3a <SerialAPI_DeleteCommand+0x118>
		return;
 8006d38:	bf00      	nop
}
 8006d3a:	3710      	adds	r7, #16
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <SerialAPI_FindCommandByID>:
 *	@param	ID - serialAPI_Command_t.ID
 *
 *	@return Pointer to found serial command
 */
static serialAPI_Command_t *SerialAPI_FindCommandByID (sbgcGeneral_t *gSBGC, ui32 ID)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
	for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	73fb      	strb	r3, [r7, #15]
 8006d4e:	e019      	b.n	8006d84 <SerialAPI_FindCommandByID+0x44>
		if (gSBGC->_api->commandBuff[i]._id == ID)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	6959      	ldr	r1, [r3, #20]
 8006d56:	7bfa      	ldrb	r2, [r7, #15]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	00db      	lsls	r3, r3, #3
 8006d5c:	4413      	add	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	440b      	add	r3, r1
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	683a      	ldr	r2, [r7, #0]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d109      	bne.n	8006d7e <SerialAPI_FindCommandByID+0x3e>
			return &gSBGC->_api->commandBuff[i];
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	685b      	ldr	r3, [r3, #4]
 8006d6e:	6959      	ldr	r1, [r3, #20]
 8006d70:	7bfa      	ldrb	r2, [r7, #15]
 8006d72:	4613      	mov	r3, r2
 8006d74:	00db      	lsls	r3, r3, #3
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	440b      	add	r3, r1
 8006d7c:	e009      	b.n	8006d92 <SerialAPI_FindCommandByID+0x52>
	for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	3301      	adds	r3, #1
 8006d82:	73fb      	strb	r3, [r7, #15]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	7e1b      	ldrb	r3, [r3, #24]
 8006d8a:	7bfa      	ldrb	r2, [r7, #15]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d3df      	bcc.n	8006d50 <SerialAPI_FindCommandByID+0x10>

	return NULL;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <SBGC32_SendCommand>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to completed structure
 *			ready to be transmitted
 */
static void SBGC32_SendCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b082      	sub	sp, #8
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
	#if (SBGC_USES_BLOCKING_MODE)

		serialCommand->_state = SCState_PROCESSING;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2203      	movs	r2, #3
 8006dac:	769a      	strb	r2, [r3, #26]
		serialCommand->timeout = SBGC_DEFAULT_TIMEOUT;
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2264      	movs	r2, #100	; 0x64
 8006db2:	605a      	str	r2, [r3, #4]

		/* Transmit */
		gSBGC->_ll->tx(gSBGC);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	7a1b      	ldrb	r3, [r3, #8]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d103      	bne.n	8006dce <SBGC32_SendCommand+0x30>
			serialCommand->_state = SCState_PROCESSED;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	22ff      	movs	r2, #255	; 0xff
 8006dca:	769a      	strb	r2, [r3, #26]
				gSBGC->_api->txErrorsCount++;
			}
		}

	#endif
}
 8006dcc:	e008      	b.n	8006de0 <SBGC32_SendCommand+0x42>
			serialCommand->_state = SCState_ERROR;
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	2206      	movs	r2, #6
 8006dd2:	769a      	strb	r2, [r3, #26]
			gSBGC->_api->txErrorsCount++;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	8a1a      	ldrh	r2, [r3, #16]
 8006dda:	3201      	adds	r2, #1
 8006ddc:	b292      	uxth	r2, r2
 8006dde:	821a      	strh	r2, [r3, #16]
}
 8006de0:	bf00      	nop
 8006de2:	3708      	adds	r7, #8
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <SerialAPI_FilterSerialCommand>:
 *	@param	payloadSize - size of received command
 *
 *	@return	Whether the command will be accepted or not
 */
static sbgcBoolean_t SerialAPI_FilterSerialCommand (serialAPI_Command_t *serialCommand, ui8 payloadSize)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b085      	sub	sp, #20
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
 8006df0:	460b      	mov	r3, r1
 8006df2:	70fb      	strb	r3, [r7, #3]
	/* Check the expected payload size */
	if ((serialCommand->_payloadSize != 0) && (serialCommand->_payloadSize != payloadSize))
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	7f1b      	ldrb	r3, [r3, #28]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d006      	beq.n	8006e0a <SerialAPI_FilterSerialCommand+0x22>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	7f1b      	ldrb	r3, [r3, #28]
 8006e00:	78fa      	ldrb	r2, [r7, #3]
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d001      	beq.n	8006e0a <SerialAPI_FilterSerialCommand+0x22>
		return sbgcFALSE;
 8006e06:	2300      	movs	r3, #0
 8006e08:	e01c      	b.n	8006e44 <SerialAPI_FilterSerialCommand+0x5c>

	serialCommand->_payloadSize = payloadSize;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	78fa      	ldrb	r2, [r7, #3]
 8006e0e:	771a      	strb	r2, [r3, #28]

	switch (serialCommand->_commandID)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	7edb      	ldrb	r3, [r3, #27]
 8006e14:	2b43      	cmp	r3, #67	; 0x43
 8006e16:	d001      	beq.n	8006e1c <SerialAPI_FilterSerialCommand+0x34>
 8006e18:	2bff      	cmp	r3, #255	; 0xff
 8006e1a:	d10f      	bne.n	8006e3c <SerialAPI_FilterSerialCommand+0x54>
		case CMD_CONFIRM :
		case CMD_ERROR :
		{
			#if (SBGC_NEED_CONFIRM_CMD)

				if (serialCommand->_pDestination)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	695b      	ldr	r3, [r3, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d00d      	beq.n	8006e40 <SerialAPI_FilterSerialCommand+0x58>
				{
					sbgcConfirm_t *confirm = (sbgcConfirm_t*)serialCommand->_pDestination;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	695b      	ldr	r3, [r3, #20]
 8006e28:	60fb      	str	r3, [r7, #12]

					if (confirm->commandID != serialCommand->_payload[0])
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	781a      	ldrb	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6a1b      	ldr	r3, [r3, #32]
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d003      	beq.n	8006e40 <SerialAPI_FilterSerialCommand+0x58>
						return sbgcFALSE;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	e003      	b.n	8006e44 <SerialAPI_FilterSerialCommand+0x5c>
				break;
			#endif
		}

		default :
			break;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <SerialAPI_FilterSerialCommand+0x5a>
				break;
 8006e40:	bf00      	nop
	}

	return sbgcTRUE;
 8006e42:	2301      	movs	r3, #1
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr

08006e50 <SBGC32_FindCommand>:
 *	@param	*serialCommand - pointer to a structure, into which
 *			the found serial command will be overwritten
 *	@param	cmdID - SBGC32 command identifier
 */
static void SBGC32_FindCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand, serialAPI_CommandID_t cmdID)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	4613      	mov	r3, r2
 8006e5c:	71fb      	strb	r3, [r7, #7]
	serialAPI_CommandID_t cmdID_Temp;

	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	721a      	strb	r2, [r3, #8]
	/* It's always sbgcCOMMAND_OK until in the rxCommandBuff isn't empty */

	#if (SBGC_USES_BLOCKING_MODE)

		sbgcTicks_t launchTime = serialAPI_GetTick();
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	68fa      	ldr	r2, [r7, #12]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	6812      	ldr	r2, [r2, #0]
 8006e70:	4610      	mov	r0, r2
 8006e72:	4798      	blx	r3
 8006e74:	6178      	str	r0, [r7, #20]

		serialCommand->_state = SCState_PROCESSING;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	2203      	movs	r2, #3
 8006e7a:	769a      	strb	r2, [r3, #26]
		serialCommand->timeout = SBGC_DEFAULT_TIMEOUT;
 8006e7c:	68bb      	ldr	r3, [r7, #8]
 8006e7e:	2264      	movs	r2, #100	; 0x64
 8006e80:	605a      	str	r2, [r3, #4]
			serialCommand->_state = SCState_PROCESSING;
		}

	#endif

	gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	685a      	ldr	r2, [r3, #4]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006e8e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	/* Start high-layer parsing */
	while (1)
	{
		if (gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d104      	bne.n	8006eb0 <SBGC32_FindCommand+0x60>
		/* Read a new data if the Rx buffer is empty or there wasn't a needed command there */
			gSBGC->_ll->rx(gSBGC);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	6a1b      	ldr	r3, [r3, #32]
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	4798      	blx	r3

		cmdID_Temp = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP];
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb6:	68fa      	ldr	r2, [r7, #12]
 8006eb8:	6852      	ldr	r2, [r2, #4]
 8006eba:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006ebe:	4413      	add	r3, r2
 8006ec0:	781b      	ldrb	r3, [r3, #0]
 8006ec2:	74fb      	strb	r3, [r7, #19]

		/* Handling */
		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	7a1b      	ldrb	r3, [r3, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d144      	bne.n	8006f56 <SBGC32_FindCommand+0x106>
		/* We have some serial command */
		{
			if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 8006ecc:	79fb      	ldrb	r3, [r7, #7]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d00c      	beq.n	8006eec <SBGC32_FindCommand+0x9c>
 8006ed2:	7cfa      	ldrb	r2, [r7, #19]
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d008      	beq.n	8006eec <SBGC32_FindCommand+0x9c>
				(cmdID_Temp == cmdID) ||
 8006eda:	79fb      	ldrb	r3, [r7, #7]
 8006edc:	2b43      	cmp	r3, #67	; 0x43
 8006ede:	d002      	beq.n	8006ee6 <SBGC32_FindCommand+0x96>
				(((cmdID == CMD_CONFIRM) || (cmdID == CMD_CAN_DEVICE_SCAN)) && (cmdID_Temp == CMD_ERROR)))
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	2b60      	cmp	r3, #96	; 0x60
 8006ee4:	d11a      	bne.n	8006f1c <SBGC32_FindCommand+0xcc>
 8006ee6:	7cfb      	ldrb	r3, [r7, #19]
 8006ee8:	2bff      	cmp	r3, #255	; 0xff
 8006eea:	d117      	bne.n	8006f1c <SBGC32_FindCommand+0xcc>
			/* A correct command has parsed (or a CMD_ERROR have come while we wait a CMD_CONFIRM or a CMD_CAN_DEVICE_SCAN) */
			{
				ui8 payloadSize = SerialAPI_ReadReceivedCommand(gSBGC, serialCommand);
 8006eec:	68b9      	ldr	r1, [r7, #8]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f7ff fd9d 	bl	8006a2e <SerialAPI_ReadReceivedCommand>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	74bb      	strb	r3, [r7, #18]

				if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 8006ef8:	79fb      	ldrb	r3, [r7, #7]
 8006efa:	2b01      	cmp	r3, #1
 8006efc:	d007      	beq.n	8006f0e <SBGC32_FindCommand+0xbe>
					SerialAPI_FilterSerialCommand(serialCommand, payloadSize))
 8006efe:	7cbb      	ldrb	r3, [r7, #18]
 8006f00:	4619      	mov	r1, r3
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f7ff ff70 	bl	8006de8 <SerialAPI_FilterSerialCommand>
 8006f08:	4603      	mov	r3, r0
				if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d022      	beq.n	8006f54 <SBGC32_FindCommand+0x104>
				/* Search command has required advanced searching patterns, or they aren't requested.
				   Or pass next if receiving any command */
				{
					serialCommand->_payloadSize = payloadSize;
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	7cba      	ldrb	r2, [r7, #18]
 8006f12:	771a      	strb	r2, [r3, #28]
					serialCommand->_state = SCState_PROCESSED;
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	22ff      	movs	r2, #255	; 0xff
 8006f18:	769a      	strb	r2, [r3, #26]

					/* Command was received fine, exit */
					return;
 8006f1a:	e052      	b.n	8006fc2 <SBGC32_FindCommand+0x172>
				}

				/* Else search command doesn't correspond advanced searching patterns. Go next */
			}

			else if (cmdID_Temp != cmdID)
 8006f1c:	7cfa      	ldrb	r2, [r7, #19]
 8006f1e:	79fb      	ldrb	r3, [r7, #7]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d018      	beq.n	8006f56 <SBGC32_FindCommand+0x106>
			/* Has wrong command parsed or  */
				gSBGC->_api->rxCommandBuffCurP += gSBGC->_api->rxCommandBuff[(gSBGC->_api->rxCommandBuffCurP + 1) & SBGC_RX_BUFF_SIZE_MASK] + 2;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	440b      	add	r3, r1
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	4413      	add	r3, r2
 8006f44:	b2da      	uxtb	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	3202      	adds	r2, #2
 8006f4c:	b2d2      	uxtb	r2, r2
 8006f4e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006f52:	e000      	b.n	8006f56 <SBGC32_FindCommand+0x106>
			{
 8006f54:	bf00      	nop
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK))
			/* There wasn't a needed command anywhere */

		#else

			if (((gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead) &&
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d193      	bne.n	8006e92 <SBGC32_FindCommand+0x42>
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)) &&
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	7a1b      	ldrb	r3, [r3, #8]
			if (((gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead) &&
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d08f      	beq.n	8006e92 <SBGC32_FindCommand+0x42>
				((serialAPI_GetTick() - launchTime) >= serialCommand->timeout))
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	6812      	ldr	r2, [r2, #0]
 8006f7e:	4610      	mov	r0, r2
 8006f80:	4798      	blx	r3
 8006f82:	4602      	mov	r2, r0
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	1ad2      	subs	r2, r2, r3
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	685b      	ldr	r3, [r3, #4]
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)) &&
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d380      	bcc.n	8006e92 <SBGC32_FindCommand+0x42>

		#endif

			{
				/* Return rxCommandBuffCurP to the buffer start */
				gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8006f9c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
							}
						}

					#else

						serialCommand->_state = SCState_ERROR;
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	2206      	movs	r2, #6
 8006fa4:	769a      	strb	r2, [r3, #26]
						gSBGC->_api->rxErrorsCount++;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	8a5a      	ldrh	r2, [r3, #18]
 8006fac:	3201      	adds	r2, #1
 8006fae:	b292      	uxth	r2, r2
 8006fb0:	825a      	strh	r2, [r3, #18]

					#endif

					if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	7a1b      	ldrb	r3, [r3, #8]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <SBGC32_FindCommand+0x170>
					/* For example a case when a stream clogs serialAPI */
						gSBGC->_lastSerialCommandStatus = serialAPI_RX_NOT_FOUND_ERROR;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2206      	movs	r2, #6
 8006fbe:	721a      	strb	r2, [r3, #8]

				#endif

				return;
 8006fc0:	bf00      	nop
			}
	}
}
 8006fc2:	3718      	adds	r7, #24
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <SerialAPI_ProcessCommand>:
 *	@param	index - command sequence number
 *
 *	@return	True if command wasn't deleted, false otherwise
 */
static sbgcBoolean_t SerialAPI_ProcessCommand (sbgcGeneral_t *gSBGC, ui8 index)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	70fb      	strb	r3, [r7, #3]
	sbgcBoolean_t commandExist = sbgcTRUE;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	73fb      	strb	r3, [r7, #15]

	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[index];
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	6959      	ldr	r1, [r3, #20]
 8006fde:	78fa      	ldrb	r2, [r7, #3]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	461a      	mov	r2, r3
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	440a      	add	r2, r1
 8006ff0:	621a      	str	r2, [r3, #32]

	sbgcBoolean_t thisCommandRx = (serialAPI_CurCmd_->parameters & SCParam_RX) ? sbgcTRUE : sbgcFALSE;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	09db      	lsrs	r3, r3, #7
 8006ffc:	73bb      	strb	r3, [r7, #14]

	if (thisCommandRx)
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00b      	beq.n	800701c <SerialAPI_ProcessCommand+0x54>
	{
		/* Don't find command yet if the library uses OS functional */
		#if (SBGC_USES_OS_SUPPORT == sbgcOFF)
			SBGC32_FindCommand(gSBGC, serialAPI_CurCmd_, serialAPI_CurCmd_->_commandID);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	6a19      	ldr	r1, [r3, #32]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	7edb      	ldrb	r3, [r3, #27]
 8007012:	461a      	mov	r2, r3
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff ff1b 	bl	8006e50 <SBGC32_FindCommand>
 800701a:	e006      	b.n	800702a <SerialAPI_ProcessCommand+0x62>
		#endif
	}

	else
		SBGC32_SendCommand(gSBGC, serialAPI_CurCmd_);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	4619      	mov	r1, r3
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff feba 	bl	8006d9e <SBGC32_SendCommand>

	/* After physical operations... */
	switch (serialAPI_CurCmd_->_state)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	6a1b      	ldr	r3, [r3, #32]
 8007030:	7e9b      	ldrb	r3, [r3, #26]
 8007032:	2bff      	cmp	r3, #255	; 0xff
 8007034:	d005      	beq.n	8007042 <SerialAPI_ProcessCommand+0x7a>
 8007036:	2bff      	cmp	r3, #255	; 0xff
 8007038:	dc75      	bgt.n	8007126 <SerialAPI_ProcessCommand+0x15e>
 800703a:	2b04      	cmp	r3, #4
 800703c:	d06d      	beq.n	800711a <SerialAPI_ProcessCommand+0x152>
 800703e:	2b06      	cmp	r3, #6
 8007040:	d171      	bne.n	8007126 <SerialAPI_ProcessCommand+0x15e>
				gSBGC->_api->writeLog(gSBGC, serialAPI_CurCmd_);

			#endif

			/* It's necessary to save payload pointer cause the next actions may shift it */
			void *payloadTemp = serialAPI_CurCmd_->_payload;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	6a1b      	ldr	r3, [r3, #32]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	60bb      	str	r3, [r7, #8]

			if ((serialAPI_CurCmd_->_state == SCState_PROCESSED) || (serialAPI_CurCmd_->parameters & SCParam_EVENT_ANYWAY))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	7e9b      	ldrb	r3, [r3, #26]
 8007054:	2bff      	cmp	r3, #255	; 0xff
 8007056:	d007      	beq.n	8007068 <SerialAPI_ProcessCommand+0xa0>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007064:	2b00      	cmp	r3, #0
 8007066:	d035      	beq.n	80070d4 <SerialAPI_ProcessCommand+0x10c>
			/* Execute SerialAPI event */
			{
				if (serialAPI_CurCmd_->_serialAPI_Event)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	6a1b      	ldr	r3, [r3, #32]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d006      	beq.n	8007082 <SerialAPI_ProcessCommand+0xba>
					((serialAPI_Event_t)serialAPI_CurCmd_->_serialAPI_Event)(gSBGC);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	6a1b      	ldr	r3, [r3, #32]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
 8007080:	e023      	b.n	80070ca <SerialAPI_ProcessCommand+0x102>

				else if (thisCommandRx && (serialAPI_CurCmd_->_pDestination != NULL))  // and it don't have an event
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d020      	beq.n	80070ca <SerialAPI_ProcessCommand+0x102>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	6a1b      	ldr	r3, [r3, #32]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d01a      	beq.n	80070ca <SerialAPI_ProcessCommand+0x102>
				{
					if (serialAPI_CurCmd_->_destinationSize < serialAPI_CurCmd_->_payloadSize)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	6a1b      	ldr	r3, [r3, #32]
 800709a:	8b1a      	ldrh	r2, [r3, #24]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	6a1b      	ldr	r3, [r3, #32]
 80070a2:	7f1b      	ldrb	r3, [r3, #28]
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d202      	bcs.n	80070b0 <SerialAPI_ProcessCommand+0xe8>
						SerialAPI_FatalErrorHandler();
 80070aa:	f7f9 fff9 	bl	80010a0 <SerialAPI_FatalErrorHandler>
 80070ae:	e00c      	b.n	80070ca <SerialAPI_ProcessCommand+0x102>

					else
						gSBGC->_api->readBuff(gSBGC, serialAPI_CurCmd_->_pDestination, serialAPI_CurCmd_->_payloadSize);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6852      	ldr	r2, [r2, #4]
 80070ba:	6a12      	ldr	r2, [r2, #32]
 80070bc:	6951      	ldr	r1, [r2, #20]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6852      	ldr	r2, [r2, #4]
 80070c2:	6a12      	ldr	r2, [r2, #32]
 80070c4:	7f12      	ldrb	r2, [r2, #28]
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	4798      	blx	r3
				}

				/* Return payload pointer to the start */
				serialAPI_CurCmd_->_payload = payloadTemp;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	6a1b      	ldr	r3, [r3, #32]
 80070d0:	68ba      	ldr	r2, [r7, #8]
 80070d2:	621a      	str	r2, [r3, #32]
				/* Command processed fine. Reload it */
					serialAPI_CurCmd_->_state = SCState_RELOAD;

			#endif

			if (thisCommandRx)
 80070d4:	7bbb      	ldrb	r3, [r7, #14]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d004      	beq.n	80070e4 <SerialAPI_ProcessCommand+0x11c>
			/* Delete command ID, size and payload from Rx buffer in any case */
				SerialAPI_DeleteReceivedCommand(gSBGC, payloadTemp);
 80070da:	68b9      	ldr	r1, [r7, #8]
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f7ff fce6 	bl	8006aae <SerialAPI_DeleteReceivedCommand>
 80070e2:	e006      	b.n	80070f2 <SerialAPI_ProcessCommand+0x12a>

			else
			/* Delete command payload from Tx buffer and command object from main command buffer */
				SerialAPI_DeleteSentCommand(gSBGC, serialAPI_CurCmd_);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	4619      	mov	r1, r3
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7ff fb4b 	bl	8006788 <SerialAPI_DeleteSentCommand>
					/* Return here from another thread and finish */
				}

			#endif

			if (serialAPI_CurCmd_->_state != SCState_RELOAD)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	6a1b      	ldr	r3, [r3, #32]
 80070f8:	7e9b      	ldrb	r3, [r3, #26]
 80070fa:	2b04      	cmp	r3, #4
 80070fc:	d007      	beq.n	800710e <SerialAPI_ProcessCommand+0x146>
			{
				commandExist = sbgcFALSE;
 80070fe:	2300      	movs	r3, #0
 8007100:	73fb      	strb	r3, [r7, #15]
				SerialAPI_DeleteCommand(gSBGC, index);
 8007102:	78fb      	ldrb	r3, [r7, #3]
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fd8b 	bl	8006c22 <SerialAPI_DeleteCommand>

			else
			/* Reload serial command */
				serialAPI_CurCmd_->_state = SCState_PREPARED;

			break;
 800710c:	e00c      	b.n	8007128 <SerialAPI_ProcessCommand+0x160>
				serialAPI_CurCmd_->_state = SCState_PREPARED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	6a1b      	ldr	r3, [r3, #32]
 8007114:	2202      	movs	r2, #2
 8007116:	769a      	strb	r2, [r3, #26]
			break;
 8007118:	e006      	b.n	8007128 <SerialAPI_ProcessCommand+0x160>
				gSBGC->_api->writeLog(gSBGC, serialAPI_CurCmd_);

			#endif

			/* Reload serial command */
			serialAPI_CurCmd_->_state = SCState_PREPARED;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	2202      	movs	r2, #2
 8007122:	769a      	strb	r2, [r3, #26]

			break;
 8007124:	e000      	b.n	8007128 <SerialAPI_ProcessCommand+0x160>

		default :
			break;
 8007126:	bf00      	nop
	}

	return commandExist;
 8007128:	7bfb      	ldrb	r3, [r7, #15]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <PostSetupLibrary>:
 *			See @ref SBGC32_SetupLibrary function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostSetupLibrary (sbgcGeneral_t *gSBGC)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
	/* Read all data manually only */

	if (serialAPI_CurCmd_->_commandID == CMD_BOARD_INFO)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	6a1b      	ldr	r3, [r3, #32]
 8007140:	7edb      	ldrb	r3, [r3, #27]
 8007142:	2b56      	cmp	r3, #86	; 0x56
 8007144:	d14d      	bne.n	80071e2 <PostSetupLibrary+0xb0>
	/* Getting board information */
	{
		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	7a1b      	ldrb	r3, [r3, #8]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d168      	bne.n	8007220 <PostSetupLibrary+0xee>
		{
			ui32 boardFeatures;

			/* Don't care about _payload pointer verge cause there is a first command */
			gSBGC->_api->boardVersion = *(serialAPI_CurCmd_->_payload + BI_BOARD_VER_OFFSET);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	6a1b      	ldr	r3, [r3, #32]
 8007154:	6a1a      	ldr	r2, [r3, #32]
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	685b      	ldr	r3, [r3, #4]
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	705a      	strb	r2, [r3, #1]
			gSBGC->_api->fromLE(&gSBGC->_api->firmwareVersion, serialAPI_CurCmd_->_payload + BI_FRW_VER_OFFSET,
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	6852      	ldr	r2, [r2, #4]
 8007168:	1c90      	adds	r0, r2, #2
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	6852      	ldr	r2, [r2, #4]
 800716e:	6a12      	ldr	r2, [r2, #32]
 8007170:	6a12      	ldr	r2, [r2, #32]
 8007172:	1c51      	adds	r1, r2, #1
 8007174:	2202      	movs	r2, #2
 8007176:	4798      	blx	r3
								sizeof(gSBGC->_api->firmwareVersion));

			boardFeatures = (((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_OFFSET))) & 0x0000FFFF) |
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	3304      	adds	r3, #4
 8007182:	881b      	ldrh	r3, [r3, #0]
 8007184:	461a      	mov	r2, r3
					((((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_E_OFFSET))) << 16) & 0xFFFF0000);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	6a1b      	ldr	r3, [r3, #32]
 800718c:	6a1b      	ldr	r3, [r3, #32]
 800718e:	330b      	adds	r3, #11
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	041b      	lsls	r3, r3, #16
			boardFeatures = (((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_OFFSET))) & 0x0000FFFF) |
 8007194:	4313      	orrs	r3, r2
 8007196:	60fb      	str	r3, [r7, #12]

			gSBGC->_api->fromLE(&gSBGC->_api->boardFeatures, (ui8*)(&boardFeatures), sizeof(gSBGC->_api->boardFeatures));
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719e:	687a      	ldr	r2, [r7, #4]
 80071a0:	6852      	ldr	r2, [r2, #4]
 80071a2:	f102 0008 	add.w	r0, r2, #8
 80071a6:	f107 010c 	add.w	r1, r7, #12
 80071aa:	2204      	movs	r2, #4
 80071ac:	4798      	blx	r3

			gSBGC->_api->fromLE(&gSBGC->_api->baseFirmwareVersion, serialAPI_CurCmd_->_payload + BI_BASE_FRW_VER_OFFSET,
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	6852      	ldr	r2, [r2, #4]
 80071b8:	1d10      	adds	r0, r2, #4
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6852      	ldr	r2, [r2, #4]
 80071be:	6a12      	ldr	r2, [r2, #32]
 80071c0:	6a12      	ldr	r2, [r2, #32]
 80071c2:	f102 0110 	add.w	r1, r2, #16
 80071c6:	2202      	movs	r2, #2
 80071c8:	4798      	blx	r3
								sizeof(gSBGC->_api->baseFirmwareVersion));

			if (gSBGC->_api->baseFirmwareVersion == 0)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	889b      	ldrh	r3, [r3, #4]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d125      	bne.n	8007220 <PostSetupLibrary+0xee>
			/* Some SBGC32 boards have no this data field */
				gSBGC->_api->baseFirmwareVersion = gSBGC->_api->firmwareVersion;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	8852      	ldrh	r2, [r2, #2]
 80071de:	809a      	strh	r2, [r3, #4]
 80071e0:	e01e      	b.n	8007220 <PostSetupLibrary+0xee>

			return;
		}
	}

	else if (serialAPI_CurCmd_->_commandID == CMD_BOARD_INFO_3)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	7edb      	ldrb	r3, [r3, #27]
 80071ea:	2b14      	cmp	r3, #20
 80071ec:	d118      	bne.n	8007220 <PostSetupLibrary+0xee>
	/* Getting total adjustable variables number */
	{
		if (gSBGC->_api->firmwareVersion && (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	885b      	ldrh	r3, [r3, #2]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d013      	beq.n	8007220 <PostSetupLibrary+0xee>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7a1b      	ldrb	r3, [r3, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10f      	bne.n	8007220 <PostSetupLibrary+0xee>
		{
			gSBGC->_api->fromLE(&gSBGC->_api->boardFeatures2, serialAPI_CurCmd_->_payload + BI3_BOARD_FTR_E2_OFFSET,
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	687a      	ldr	r2, [r7, #4]
 8007208:	6852      	ldr	r2, [r2, #4]
 800720a:	f102 000c 	add.w	r0, r2, #12
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	6852      	ldr	r2, [r2, #4]
 8007212:	6a12      	ldr	r2, [r2, #32]
 8007214:	6a12      	ldr	r2, [r2, #32]
 8007216:	f102 0134 	add.w	r1, r2, #52	; 0x34
 800721a:	2204      	movs	r2, #4
 800721c:	4798      	blx	r3
				DebugSBGC32_PrintMessage(gSBGC, firmwareVersionStr);
				DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n\n");

			#endif

			return;
 800721e:	bf00      	nop
		DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n");
		DebugSBGC32_PrintMessage(gSBGC, "Communication Error!\n");
		DebugSBGC32_PrintMessage(gSBGC, "********************************\n\n");

	#endif
}
 8007220:	3710      	adds	r7, #16
 8007222:	46bd      	mov	sp, r7
 8007224:	bd80      	pop	{r7, pc}
	...

08007228 <SBGC32_SetupLibrary>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_SetupLibrary (sbgcGeneral_t *gSBGC)
{
 8007228:	b590      	push	{r4, r7, lr}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	gSBGC->_api = (serialAPI_General_t*)sbgcMalloc(sizeof(serialAPI_General_t));
 8007230:	20a4      	movs	r0, #164	; 0xa4
 8007232:	f000 fd09 	bl	8007c48 <malloc>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	605a      	str	r2, [r3, #4]

	PrivateSerialAPI_LinkLowLayer(gSBGC);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f7ff fa8c 	bl	800675c <PrivateSerialAPI_LinkLowLayer>
	PrivateSerialAPI_LinkConverter(gSBGC);
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f9db 	bl	8007600 <PrivateSerialAPI_LinkConverter>

	#if (SBGC_USES_LOGS)
		PrivateSerialAPI_LinkDebug(gSBGC);
	#endif

	PrivateSerialAPI_LinkCommandBuild(gSBGC);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fe ffd0 	bl	80061f0 <PrivateSerialAPI_LinkCommandBuild>

	/* Link high-layer service functions */
	gSBGC->_api->saveCmd = SerialAPI_SaveReceivedCommand;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	4a8f      	ldr	r2, [pc, #572]	; (8007494 <SBGC32_SetupLibrary+0x26c>)
 8007256:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gSBGC->_api->findCmd = SerialAPI_FindCommandByID;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	4a8e      	ldr	r2, [pc, #568]	; (8007498 <SBGC32_SetupLibrary+0x270>)
 8007260:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	#if (SBGC_USES_BLOCKING_MODE || SBGC_SEND_IMMEDIATELY)
		gSBGC->_api->process = SerialAPI_ProcessCommand;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	4a8c      	ldr	r2, [pc, #560]	; (800749c <SBGC32_SetupLibrary+0x274>)
 800726a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		SystemSBGC32_CreateMutex(&gSBGC->_api->mutexSerialAPI);
		SystemSBGC32_GiveMutex(&gSBGC->_api->mutexSerialAPI);

	#endif

	gSBGC->_api->serialAPI_Status = serialAPI_OK;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]

	gSBGC->_api->boardVersion = 0;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	705a      	strb	r2, [r3, #1]
	gSBGC->_api->firmwareVersion = 0;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	805a      	strh	r2, [r3, #2]
	gSBGC->_api->baseFirmwareVersion = 0;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	809a      	strh	r2, [r3, #4]

	#if (SBGC_ADJVAR_MODULE)
		gSBGC->_api->adjVarsNumber = SBGC_ADJ_VARS_MIN_QUANTITY;
	#endif

	gSBGC->_api->txErrorsCount = 0;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	821a      	strh	r2, [r3, #16]
	gSBGC->_api->rxErrorsCount = 0;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	825a      	strh	r2, [r3, #18]

	gSBGC->_api->commandBuff = (serialAPI_Command_t*)sbgcMalloc(sizeof(serialAPI_Command_t) * SBGC_MAX_COMMAND_NUM);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	685c      	ldr	r4, [r3, #4]
 80072a2:	2024      	movs	r0, #36	; 0x24
 80072a4:	f000 fcd0 	bl	8007c48 <malloc>
 80072a8:	4603      	mov	r3, r0
 80072aa:	6163      	str	r3, [r4, #20]
	gSBGC->_api->commandNumber = 0;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	761a      	strb	r2, [r3, #24]
	gSBGC->_api->commandTotalCount = 0;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	685b      	ldr	r3, [r3, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	61da      	str	r2, [r3, #28]

	gSBGC->_api->currentSerialCommand = NULL;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	621a      	str	r2, [r3, #32]

	#if (SBGC_USES_TOKENS)
		gSBGC->_api->lastCommandToken = 0;
	#endif

	gSBGC->_api->txCommandBuff = (ui8*)sbgcMalloc(SBGC_TX_BUFF_TOTAL_SIZE);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	685c      	ldr	r4, [r3, #4]
 80072c8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80072cc:	f000 fcbc 	bl	8007c48 <malloc>
 80072d0:	4603      	mov	r3, r0
 80072d2:	6263      	str	r3, [r4, #36]	; 0x24
	gSBGC->_api->txCommandBuffTail = 0;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	gSBGC->_api->txCommandBuffHead = 0;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

	gSBGC->_api->rxCommandBuff = (ui8*)sbgcMalloc(SBGC_RX_BUFF_TOTAL_SIZE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685c      	ldr	r4, [r3, #4]
 80072ec:	f44f 7080 	mov.w	r0, #256	; 0x100
 80072f0:	f000 fcaa 	bl	8007c48 <malloc>
 80072f4:	4603      	mov	r3, r0
 80072f6:	62e3      	str	r3, [r4, #44]	; 0x2c
	gSBGC->_api->rxCommandBuffTail = 0;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	gSBGC->_api->rxCommandBuffHead = 0;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	gSBGC->_api->rxCommandBuffCurP = 0;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	721a      	strb	r2, [r3, #8]
	gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2200      	movs	r2, #0
 8007320:	725a      	strb	r2, [r3, #9]

	/* Startup delay */
	sbgcTicks_t launchTime = serialAPI_GetTick();
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	6812      	ldr	r2, [r2, #0]
 800732c:	6812      	ldr	r2, [r2, #0]
 800732e:	4610      	mov	r0, r2
 8007330:	4798      	blx	r3
 8007332:	60f8      	str	r0, [r7, #12]

	while ((serialAPI_GetTick() - launchTime) < SBGC_STARTUP_DELAY);
 8007334:	bf00      	nop
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	6812      	ldr	r2, [r2, #0]
 8007340:	6812      	ldr	r2, [r2, #0]
 8007342:	4610      	mov	r0, r2
 8007344:	4798      	blx	r3
 8007346:	4602      	mov	r2, r0
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007350:	d3f1      	bcc.n	8007336 <SBGC32_SetupLibrary+0x10e>

	/* Getting board information */
	gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO SBGC_DEFAULT_ARGS__);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007358:	2156      	movs	r1, #86	; 0x56
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
	gSBGC->_api->writeWord(gSBGC, 0);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007364:	2100      	movs	r1, #0
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	4798      	blx	r3
	serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	6a1b      	ldr	r3, [r3, #32]
 8007370:	781a      	ldrb	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800737c:	b2d2      	uxtb	r2, r2
 800737e:	701a      	strb	r2, [r3, #0]

	#if (SBGC_USES_OS_SUPPORT)
		serialAPI_CurCmd_->priority = SCPrior_SUPREME;
	#endif

	gSBGC->_api->finishWrite(gSBGC);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	4798      	blx	r3

	serialAPI_Unlock()
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
		sbgcBlockQueue(SBGC32_TransmitAllCommands(gSBGC));
	#endif

	serialAPI_LockRead();
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d001      	beq.n	80073a0 <SBGC32_SetupLibrary+0x178>
 800739c:	230a      	movs	r3, #10
 800739e:	e074      	b.n	800748a <SBGC32_SetupLibrary+0x262>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	701a      	strb	r2, [r3, #0]

	gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO SBGC_DEFAULT_ARGS__);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073ae:	2156      	movs	r1, #86	; 0x56
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, PostSetupLibrary, gSBGC, SBGC_MAX_PAYLOAD_SIZE);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80073bc:	23ff      	movs	r3, #255	; 0xff
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	4937      	ldr	r1, [pc, #220]	; (80074a0 <SBGC32_SetupLibrary+0x278>)
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	47a0      	blx	r4
	serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	781a      	ldrb	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	6a1b      	ldr	r3, [r3, #32]
 80073d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073d8:	b2d2      	uxtb	r2, r2
 80073da:	701a      	strb	r2, [r3, #0]

	#if (SBGC_USES_OS_SUPPORT)
		serialAPI_CurCmd_->priority = SCPrior_SUPREME;
	#endif

	gSBGC->_api->finishRead(gSBGC);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3

	serialAPI_Unlock()
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
		sbgcBlockQueue(SBGC32_ReceiveAllCommands(gSBGC));
	#endif

	if (gSBGC->_lastCommandStatus == sbgcCOMMAND_OK)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	7a5b      	ldrb	r3, [r3, #9]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d147      	bne.n	8007486 <SBGC32_SetupLibrary+0x25e>
	/* Getting the second features part and total adjustable variables number */
	{
		gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO_3 SBGC_DEFAULT_ARGS__);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073fc:	2114      	movs	r1, #20
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	4798      	blx	r3
		serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	6a1b      	ldr	r3, [r3, #32]
 8007408:	781a      	ldrb	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007414:	b2d2      	uxtb	r2, r2
 8007416:	701a      	strb	r2, [r3, #0]

		#if (SBGC_USES_OS_SUPPORT)
			serialAPI_CurCmd_->priority = SCPrior_SUPREME;
		#endif

		gSBGC->_api->finishWrite(gSBGC);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3

		serialAPI_Unlock()
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	701a      	strb	r2, [r3, #0]

		#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
			sbgcBlockQueue(SBGC32_TransmitAllCommands(gSBGC));
		#endif

		serialAPI_LockRead();
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d001      	beq.n	8007438 <SBGC32_SetupLibrary+0x210>
 8007434:	230a      	movs	r3, #10
 8007436:	e028      	b.n	800748a <SBGC32_SetupLibrary+0x262>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]

		gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO_3 SBGC_DEFAULT_ARGS__);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007446:	2114      	movs	r1, #20
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	4798      	blx	r3
		gSBGC->_api->assignEvent(gSBGC, PostSetupLibrary, gSBGC, SBGC_MAX_PAYLOAD_SIZE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 8007454:	23ff      	movs	r3, #255	; 0xff
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4911      	ldr	r1, [pc, #68]	; (80074a0 <SBGC32_SetupLibrary+0x278>)
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	47a0      	blx	r4
		serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	6a1b      	ldr	r3, [r3, #32]
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	6a1b      	ldr	r3, [r3, #32]
 800746c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007470:	b2d2      	uxtb	r2, r2
 8007472:	701a      	strb	r2, [r3, #0]

		#if (SBGC_USES_OS_SUPPORT)
			serialAPI_CurCmd_->priority = SCPrior_SUPREME;
		#endif

		gSBGC->_api->finishRead(gSBGC);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	4798      	blx	r3

		serialAPI_Unlock()
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
		#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
			sbgcBlockQueue(SBGC32_ReceiveAllCommands(gSBGC));
		#endif
	}

	return gSBGC->_lastCommandStatus;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	7a5b      	ldrb	r3, [r3, #9]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	bd90      	pop	{r4, r7, pc}
 8007492:	bf00      	nop
 8007494:	080068b3 	.word	0x080068b3
 8007498:	08006d41 	.word	0x08006d41
 800749c:	08006fc9 	.word	0x08006fc9
 80074a0:	08007133 	.word	0x08007133

080074a4 <SerialAPI_LinkDriver>:
 *			current time in milliseconds
 */
void SerialAPI_LinkDriver (sbgcGeneral_t *gSBGC, sbgcTx_t tx, sbgcRx_t rx,
						   sbgcAvailableBytes_t availableBytes, sbgcTxDebug_t txDebug,
						   sbgcGetTime_t getTime)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
	gSBGC->_ll = (sbgcLowLayer_t*)sbgcMalloc(sizeof(sbgcLowLayer_t));
 80074b2:	2024      	movs	r0, #36	; 0x24
 80074b4:	f000 fbc8 	bl	8007c48 <malloc>
 80074b8:	4603      	mov	r3, r0
 80074ba:	461a      	mov	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	601a      	str	r2, [r3, #0]

	gSBGC->_ll->drvTx = tx;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	609a      	str	r2, [r3, #8]
	gSBGC->_ll->drvRx = rx;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	60da      	str	r2, [r3, #12]
	gSBGC->_ll->drvAvailableBytes = availableBytes;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	683a      	ldr	r2, [r7, #0]
 80074d6:	611a      	str	r2, [r3, #16]

	#if (SBGC_NEED_DEBUG)
		gSBGC->_ll->drvTxDebug = txDebug;
	#else
		gSBGC->_ll->drvTxDebug = NULL;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2200      	movs	r2, #0
 80074de:	615a      	str	r2, [r3, #20]
	#endif

	gSBGC->_ll->drvGetTime = getTime;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	605a      	str	r2, [r3, #4]

	#if (SBGC_USES_CUSTOM_SPRINTF)
		SerialAPI_LinkSprintf(gSBGC);
	#else
		gSBGC->_ll->debugSprintf = sprintf;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a02      	ldr	r2, [pc, #8]	; (80074f8 <SerialAPI_LinkDriver+0x54>)
 80074ee:	619a      	str	r2, [r3, #24]
	#endif
}
 80074f0:	bf00      	nop
 80074f2:	3710      	adds	r7, #16
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	08008b05 	.word	0x08008b05

080074fc <ParserSBGC32_ConvertTypeToSize>:
 */
/**	@addtogroup	Data_Parse
 *	@{
 */
static ui8 ParserSBGC32_ConvertTypeToSize (sbgcVarType_t varType)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b085      	sub	sp, #20
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	71fb      	strb	r3, [r7, #7]
	ui8 res = 0;
 8007506:	2300      	movs	r3, #0
 8007508:	73fb      	strb	r3, [r7, #15]

	switch (varType & CLEAN_TYPE_MASK)
 800750a:	79fb      	ldrb	r3, [r7, #7]
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	2b81      	cmp	r3, #129	; 0x81
 8007512:	d00e      	beq.n	8007532 <ParserSBGC32_ConvertTypeToSize+0x36>
 8007514:	2b81      	cmp	r3, #129	; 0x81
 8007516:	dc15      	bgt.n	8007544 <ParserSBGC32_ConvertTypeToSize+0x48>
 8007518:	2b07      	cmp	r3, #7
 800751a:	dc13      	bgt.n	8007544 <ParserSBGC32_ConvertTypeToSize+0x48>
 800751c:	2b05      	cmp	r3, #5
 800751e:	da0e      	bge.n	800753e <ParserSBGC32_ConvertTypeToSize+0x42>
 8007520:	2b02      	cmp	r3, #2
 8007522:	dc02      	bgt.n	800752a <ParserSBGC32_ConvertTypeToSize+0x2e>
 8007524:	2b00      	cmp	r3, #0
 8007526:	dc04      	bgt.n	8007532 <ParserSBGC32_ConvertTypeToSize+0x36>
		case sbgcFLOAT :
			res = 4;
			break;

		default :
			break;
 8007528:	e00c      	b.n	8007544 <ParserSBGC32_ConvertTypeToSize+0x48>
 800752a:	3b03      	subs	r3, #3
	switch (varType & CLEAN_TYPE_MASK)
 800752c:	2b01      	cmp	r3, #1
 800752e:	d809      	bhi.n	8007544 <ParserSBGC32_ConvertTypeToSize+0x48>
 8007530:	e002      	b.n	8007538 <ParserSBGC32_ConvertTypeToSize+0x3c>
			res = 1;
 8007532:	2301      	movs	r3, #1
 8007534:	73fb      	strb	r3, [r7, #15]
			break;
 8007536:	e006      	b.n	8007546 <ParserSBGC32_ConvertTypeToSize+0x4a>
			res = 2;
 8007538:	2302      	movs	r3, #2
 800753a:	73fb      	strb	r3, [r7, #15]
			break;
 800753c:	e003      	b.n	8007546 <ParserSBGC32_ConvertTypeToSize+0x4a>
			res = 4;
 800753e:	2304      	movs	r3, #4
 8007540:	73fb      	strb	r3, [r7, #15]
			break;
 8007542:	e000      	b.n	8007546 <ParserSBGC32_ConvertTypeToSize+0x4a>
			break;
 8007544:	bf00      	nop
	}

	return res;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3714      	adds	r7, #20
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <ParserSBGC32_ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
static void ParserSBGC32_ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b084      	sub	sp, #16
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	4613      	mov	r3, r2
 8007560:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 8007562:	79fb      	ldrb	r3, [r7, #7]
 8007564:	2b04      	cmp	r3, #4
 8007566:	d80b      	bhi.n	8007580 <ParserSBGC32_ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 8007568:	79fb      	ldrb	r3, [r7, #7]
 800756a:	2b03      	cmp	r3, #3
 800756c:	d101      	bne.n	8007572 <ParserSBGC32_ToLittleEndian+0x1e>
 800756e:	2304      	movs	r3, #4
 8007570:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 8007572:	79fb      	ldrb	r3, [r7, #7]
 8007574:	461a      	mov	r2, r3
 8007576:	68f9      	ldr	r1, [r7, #12]
 8007578:	68b8      	ldr	r0, [r7, #8]
 800757a:	f000 fb6d 	bl	8007c58 <memcpy>
 800757e:	e000      	b.n	8007582 <ParserSBGC32_ToLittleEndian+0x2e>
	if (size > 4) return;
 8007580:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			ParserSBGC32_SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <ParserSBGC32_FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
static void ParserSBGC32_FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	4613      	mov	r3, r2
 8007594:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 8007596:	79fb      	ldrb	r3, [r7, #7]
 8007598:	2b04      	cmp	r3, #4
 800759a:	d80b      	bhi.n	80075b4 <ParserSBGC32_FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	2b03      	cmp	r3, #3
 80075a0:	d101      	bne.n	80075a6 <ParserSBGC32_FromLittleEndian+0x1e>
 80075a2:	2304      	movs	r3, #4
 80075a4:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 80075a6:	79fb      	ldrb	r3, [r7, #7]
 80075a8:	461a      	mov	r2, r3
 80075aa:	68b9      	ldr	r1, [r7, #8]
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fb53 	bl	8007c58 <memcpy>
 80075b2:	e000      	b.n	80075b6 <ParserSBGC32_FromLittleEndian+0x2e>
	if (size > 4) return;
 80075b4:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			ParserSBGC32_SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <ParserSBGC32_GetCommandParserMap>:
 *	@param	*serialCommand - pointer to command
 *
 *	@return	Parser mapping pattern
 */
static sbgcParserMap_t ParserSBGC32_GetCommandParserMap (serialAPI_Command_t *serialCommand)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	#if (SBGC_SYS_BIG_ENDIAN == sbgcOFF)

		unused_(serialCommand);
		return PM_DEFAULT_8BIT;
 80075c4:	2300      	movs	r3, #0

			default :																return PM_DEFAULT_8BIT;
		}

	#endif
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	370c      	adds	r7, #12
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <ParserSBGC32_ConvertWithPM>:
 *	@param	parserMap - data type required for correct parsing
 *
 *	@return	Size of written data
 */
static ui8 ParserSBGC32_ConvertWithPM (void *pDestination, const void *pSource, ui8 size, sbgcParserMap_t parserMap)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	60f8      	str	r0, [r7, #12]
 80075da:	60b9      	str	r1, [r7, #8]
 80075dc:	4611      	mov	r1, r2
 80075de:	461a      	mov	r2, r3
 80075e0:	460b      	mov	r3, r1
 80075e2:	71fb      	strb	r3, [r7, #7]
 80075e4:	4613      	mov	r3, r2
 80075e6:	71bb      	strb	r3, [r7, #6]
	#if (SBGC_NEED_ASSERTS)
		if ((pDestination == NULL) || (size == 0)) return 0;
	#endif

	memcpy(pDestination, pSource, size);
 80075e8:	79fb      	ldrb	r3, [r7, #7]
 80075ea:	461a      	mov	r2, r3
 80075ec:	68b9      	ldr	r1, [r7, #8]
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 fb32 	bl	8007c58 <memcpy>
		ParserSBGC32_SwapBytesInStruct((ui8*)pDestination, size, parserMap);
	#else
		unused_(parserMap);
	#endif

	return size;
 80075f4:	79fb      	ldrb	r3, [r7, #7]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
	...

08007600 <PrivateSerialAPI_LinkConverter>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkConverter (sbgcGeneral_t *gSBGC)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
	gSBGC->_api->typeToSize	= ParserSBGC32_ConvertTypeToSize;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	4a0b      	ldr	r2, [pc, #44]	; (800763c <PrivateSerialAPI_LinkConverter+0x3c>)
 800760e:	635a      	str	r2, [r3, #52]	; 0x34

	#if (SBGC_USES_REF_INFO)
		gSBGC->_api->assignByPM	= ParserSBGC32_AssignStructByParserMap;
	#endif

	gSBGC->_api->toLE		= ParserSBGC32_ToLittleEndian;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	4a0a      	ldr	r2, [pc, #40]	; (8007640 <PrivateSerialAPI_LinkConverter+0x40>)
 8007616:	639a      	str	r2, [r3, #56]	; 0x38
	gSBGC->_api->fromLE		= ParserSBGC32_FromLittleEndian;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	4a09      	ldr	r2, [pc, #36]	; (8007644 <PrivateSerialAPI_LinkConverter+0x44>)
 800761e:	63da      	str	r2, [r3, #60]	; 0x3c
	gSBGC->_api->getCmdPM	= ParserSBGC32_GetCommandParserMap;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4a08      	ldr	r2, [pc, #32]	; (8007648 <PrivateSerialAPI_LinkConverter+0x48>)
 8007626:	641a      	str	r2, [r3, #64]	; 0x40
	gSBGC->_api->convWithPM	= ParserSBGC32_ConvertWithPM;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	4a07      	ldr	r2, [pc, #28]	; (800764c <PrivateSerialAPI_LinkConverter+0x4c>)
 800762e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8007630:	bf00      	nop
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	080074fd 	.word	0x080074fd
 8007640:	08007555 	.word	0x08007555
 8007644:	08007589 	.word	0x08007589
 8007648:	080075bd 	.word	0x080075bd
 800764c:	080075d3 	.word	0x080075d3

08007650 <DriverSBGC32_Init>:
 *	@param	**driver - main hardware driver object
 *	@param	*uart - user defined UART object
 *	@param	*tim - user defined timer object
 */
void DriverSBGC32_Init (void **driver, SBGC_DRV_UART_TYPE_DEF__ *uart, SBGC_DRV_TIMER_TYPE_DEF__ *tim)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b086      	sub	sp, #24
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
	*driver = sbgcMalloc(sizeof(sbgcDriver_t));
 800765c:	201c      	movs	r0, #28
 800765e:	f000 faf3 	bl	8007c48 <malloc>
 8007662:	4603      	mov	r3, r0
 8007664:	461a      	mov	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	601a      	str	r2, [r3, #0]

	sbgcDriver_t *drv = (sbgcDriver_t*)(*driver);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	617b      	str	r3, [r7, #20]

	#if (SBGC_DRV_HAL_TIMER || SBGC_DRV_LL_TIMER)
		/* Timer */
		drv->tim = tim;
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	687a      	ldr	r2, [r7, #4]
 8007674:	601a      	str	r2, [r3, #0]
		drv->timCount = 0;
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2200      	movs	r2, #0
 800767a:	605a      	str	r2, [r3, #4]
	#else
		unused_(tim);
	#endif

    /* UART */
	drv->uart = uart;
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	68ba      	ldr	r2, [r7, #8]
 8007680:	609a      	str	r2, [r3, #8]

		DriverSBGC32_UART_Init(drv);

	#endif

	drv->txBuffer = (ui8*)sbgcMalloc(SBGC_DRV_TX_BUFF_TOTAL_SIZE);
 8007682:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007686:	f000 fadf 	bl	8007c48 <malloc>
 800768a:	4603      	mov	r3, r0
 800768c:	461a      	mov	r2, r3
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	60da      	str	r2, [r3, #12]
	drv->rxBuffer = (ui8*)sbgcMalloc(SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 8007692:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007696:	f000 fad7 	bl	8007c48 <malloc>
 800769a:	4603      	mov	r3, r0
 800769c:	461a      	mov	r2, r3
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	615a      	str	r2, [r3, #20]

	DriverSBGC32_ClearTxBuff(drv);
 80076a2:	6978      	ldr	r0, [r7, #20]
 80076a4:	f000 f8da 	bl	800785c <DriverSBGC32_ClearTxBuff>
	DriverSBGC32_ClearRxBuff(drv);
 80076a8:	6978      	ldr	r0, [r7, #20]
 80076aa:	f000 f98e 	bl	80079ca <DriverSBGC32_ClearRxBuff>

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
		/* UART Interrupts executable code */
		DISABLE_UART_CR1_TCIE(drv->uart);
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076c0:	601a      	str	r2, [r3, #0]
		ENABLE_UART_CR1_RXNEIE(drv->uart);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	697b      	ldr	r3, [r7, #20]
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0220 	orr.w	r2, r2, #32
 80076d4:	601a      	str	r2, [r3, #0]
		DISABLE_UART_CR1_IDLEIE(drv->uart);
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	689b      	ldr	r3, [r3, #8]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0210 	bic.w	r2, r2, #16
 80076e8:	601a      	str	r2, [r3, #0]

		(void)READ_UART_BYTE(drv->uart);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		CLEAR_UART_ORE(drv->uart);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	689b      	ldr	r3, [r3, #8]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2208      	movs	r2, #8
 80076fa:	621a      	str	r2, [r3, #32]
		LL_DMA_EnableStream(SBGC_DMA_UART_RX, SBGC_DMA_UART_RX_STREAM);

	#endif

	#if (SBGC_DRV_HAL_TIMER || SBGC_DRV_LL_TIMER)
		START_TIMER(drv->tim);
 80076fc:	697b      	ldr	r3, [r7, #20]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	4618      	mov	r0, r3
 8007702:	f7fc fadf 	bl	8003cc4 <HAL_TIM_Base_Start_IT>
	#endif
}
 8007706:	bf00      	nop
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}

0800770e <DriverSBGC32_GetTimeMs>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Current time
 */
sbgcTicks_t DriverSBGC32_GetTimeMs (void *driver)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	60fb      	str	r3, [r7, #12]

	#if (SBGC_USES_OS_SUPPORT)
		drv->timCount = sbgcGetTick();
	#endif

	return drv->timCount;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685b      	ldr	r3, [r3, #4]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3714      	adds	r7, #20
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <DriverSBGC32_TimerCallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_TimerCallBack (void *driver)
{
 800772a:	b480      	push	{r7}
 800772c:	b085      	sub	sp, #20
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	1c5a      	adds	r2, r3, #1
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	605a      	str	r2, [r3, #4]

	#if (SBGC_DRV_LL_TIMER)
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 8007740:	bf00      	nop
 8007742:	3714      	adds	r7, #20
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <DriverSBGC32_UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx status
 */
ui8 DriverSBGC32_UartTransmitData (void *driver, ui8 *data, ui16 size)
{
 800774c:	b490      	push	{r4, r7}
 800774e:	b086      	sub	sp, #24
 8007750:	af00      	add	r7, sp, #0
 8007752:	60f8      	str	r0, [r7, #12]
 8007754:	60b9      	str	r1, [r7, #8]
 8007756:	4613      	mov	r3, r2
 8007758:	80fb      	strh	r3, [r7, #6]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	617b      	str	r3, [r7, #20]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->txTail != drv->txHead)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	7c1a      	ldrb	r2, [r3, #16]
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	7c5b      	ldrb	r3, [r3, #17]
 8007766:	429a      	cmp	r2, r3
 8007768:	d009      	beq.n	800777e <DriverSBGC32_UartTransmitData+0x32>
			ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	697b      	ldr	r3, [r7, #20]
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800777c:	601a      	str	r2, [r3, #0]

		/* Free space check */
		if (calcFreeSpaceFIFO(drv->txTail, drv->txHead, SBGC_DRV_TX_BUFF_TOTAL_SIZE) <= size)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	7c5a      	ldrb	r2, [r3, #17]
 8007782:	697b      	ldr	r3, [r7, #20]
 8007784:	7c1b      	ldrb	r3, [r3, #16]
 8007786:	429a      	cmp	r2, r3
 8007788:	d308      	bcc.n	800779c <DriverSBGC32_UartTransmitData+0x50>
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	7c5b      	ldrb	r3, [r3, #17]
 800778e:	461a      	mov	r2, r3
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	7c1b      	ldrb	r3, [r3, #16]
 8007794:	1ad3      	subs	r3, r2, r3
 8007796:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800779a:	e005      	b.n	80077a8 <DriverSBGC32_UartTransmitData+0x5c>
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	7c1b      	ldrb	r3, [r3, #16]
 80077a0:	461a      	mov	r2, r3
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	7c5b      	ldrb	r3, [r3, #17]
 80077a6:	1ad3      	subs	r3, r2, r3
 80077a8:	88fa      	ldrh	r2, [r7, #6]
 80077aa:	4293      	cmp	r3, r2
 80077ac:	dc0f      	bgt.n	80077ce <DriverSBGC32_UartTransmitData+0x82>
		{
			/*  - - - User Tx Buffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return SBGC_DRV_TX_BUFF_OVERFLOW_FLAG;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e025      	b.n	80077fe <DriverSBGC32_UartTransmitData+0xb2>
		}

		while (size--)
			drv->txBuffer[drv->txHead++] = *(data++);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	60ba      	str	r2, [r7, #8]
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	68d1      	ldr	r1, [r2, #12]
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	7c52      	ldrb	r2, [r2, #17]
 80077c0:	1c50      	adds	r0, r2, #1
 80077c2:	b2c4      	uxtb	r4, r0
 80077c4:	6978      	ldr	r0, [r7, #20]
 80077c6:	7444      	strb	r4, [r0, #17]
 80077c8:	440a      	add	r2, r1
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	7013      	strb	r3, [r2, #0]
		while (size--)
 80077ce:	88fb      	ldrh	r3, [r7, #6]
 80077d0:	1e5a      	subs	r2, r3, #1
 80077d2:	80fa      	strh	r2, [r7, #6]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d1ec      	bne.n	80077b2 <DriverSBGC32_UartTransmitData+0x66>

		if (!GET_FLAG_UART_CR1_TCIE(drv->uart))
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d109      	bne.n	80077fc <DriverSBGC32_UartTransmitData+0xb0>
			ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	689b      	ldr	r3, [r3, #8]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80077fa:	601a      	str	r2, [r3, #0]
			LL_DMA_EnableStream(SBGC_DMA_UART_TX, SBGC_DMA_UART_TX_STREAM);
		}

	#endif

	return SBGC_DRV_TX_OK_FLAG;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bc90      	pop	{r4, r7}
 8007806:	4770      	bx	lr

08007808 <DriverSBGC32_UART_TxCallBack>:
/**	@brief	UART transfer completion interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_UART_TxCallBack (void *driver)
{
 8007808:	b480      	push	{r7}
 800780a:	b085      	sub	sp, #20
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)

		WRITE_UART_BYTE(drv->uart, drv->txBuffer[drv->txTail++] & (ui32)0xFF);
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	68da      	ldr	r2, [r3, #12]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	7c1b      	ldrb	r3, [r3, #16]
 800781c:	1c59      	adds	r1, r3, #1
 800781e:	b2c8      	uxtb	r0, r1
 8007820:	68f9      	ldr	r1, [r7, #12]
 8007822:	7408      	strb	r0, [r1, #16]
 8007824:	4413      	add	r3, r2
 8007826:	781a      	ldrb	r2, [r3, #0]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	629a      	str	r2, [r3, #40]	; 0x28

		if (drv->txTail == drv->txHead)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	7c1a      	ldrb	r2, [r3, #16]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	7c5b      	ldrb	r3, [r3, #17]
 8007838:	429a      	cmp	r2, r3
 800783a:	d109      	bne.n	8007850 <DriverSBGC32_UART_TxCallBack+0x48>
		{
			DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800784e:	601a      	str	r2, [r3, #0]
			drv->txHead = 0;

		drv->txTail = drv->txHead;

	#endif
}
 8007850:	bf00      	nop
 8007852:	3714      	adds	r7, #20
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr

0800785c <DriverSBGC32_ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_ClearTxBuff (void *driver)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	60fb      	str	r3, [r7, #12]

	memset(drv->txBuffer, 0, SBGC_DRV_TX_BUFF_TOTAL_SIZE);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68db      	ldr	r3, [r3, #12]
 800786c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007870:	2100      	movs	r1, #0
 8007872:	4618      	mov	r0, r3
 8007874:	f000 f9fe 	bl	8007c74 <memset>
	drv->txTail = 0;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	741a      	strb	r2, [r3, #16]
	drv->txHead = 0;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	745a      	strb	r2, [r3, #17]
}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <DriverSBGC32_GetAvailableBytes>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 DriverSBGC32_GetAvailableBytes (void *driver)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->rxOverflowFlag)
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	7e9b      	ldrb	r3, [r3, #26]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <DriverSBGC32_GetAvailableBytes+0x1a>
			return SBGC_RX_BUFFER_OVERFLOW_FLAG;
 80078a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80078a4:	e023      	b.n	80078ee <DriverSBGC32_GetAvailableBytes+0x62>

		ui16 availableBytes = calcFreeSpaceFIFO(drv->rxHead, drv->rxTail, SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	7e1a      	ldrb	r2, [r3, #24]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	7e5b      	ldrb	r3, [r3, #25]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d30b      	bcc.n	80078ca <DriverSBGC32_GetAvailableBytes+0x3e>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	7e5b      	ldrb	r3, [r3, #25]
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	7e1b      	ldrb	r3, [r3, #24]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	e007      	b.n	80078da <DriverSBGC32_GetAvailableBytes+0x4e>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	7e5b      	ldrb	r3, [r3, #25]
 80078ce:	b29a      	uxth	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	7e1b      	ldrb	r3, [r3, #24]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	1ad3      	subs	r3, r2, r3
 80078d8:	b29b      	uxth	r3, r3
 80078da:	817b      	strh	r3, [r7, #10]
		availableBytes = (availableBytes == SBGC_DRV_RX_BUFF_TOTAL_SIZE) ? 0 : availableBytes;
 80078dc:	897b      	ldrh	r3, [r7, #10]
 80078de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078e2:	d001      	beq.n	80078e8 <DriverSBGC32_GetAvailableBytes+0x5c>
 80078e4:	897b      	ldrh	r3, [r7, #10]
 80078e6:	e000      	b.n	80078ea <DriverSBGC32_GetAvailableBytes+0x5e>
 80078e8:	2300      	movs	r3, #0
 80078ea:	817b      	strh	r3, [r7, #10]

		return availableBytes;
 80078ec:	897b      	ldrh	r3, [r7, #10]

		drv->rxHead = SBGC_DRV_RX_BUFF_TOTAL_SIZE - GET_DMA_RX_COUNTER(SBGC_DMA_UART_RX);
		return (drv->rxHead - drv->rxTail) & SBGC_DRV_RX_BUFF_SIZE_MASK;

	#endif
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr

080078fa <DriverSBGC32_UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Rx status
 */
ui8 DriverSBGC32_UartReceiveByte (void *driver, ui8 *data)
{
 80078fa:	b480      	push	{r7}
 80078fc:	b085      	sub	sp, #20
 80078fe:	af00      	add	r7, sp, #0
 8007900:	6078      	str	r0, [r7, #4]
 8007902:	6039      	str	r1, [r7, #0]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->rxTail == drv->rxHead)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	7e1a      	ldrb	r2, [r3, #24]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	7e5b      	ldrb	r3, [r3, #25]
 8007910:	429a      	cmp	r2, r3
 8007912:	d101      	bne.n	8007918 <DriverSBGC32_UartReceiveByte+0x1e>
		{
			/*  - - - - User Receive-Complete Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return SBGC_DRV_RX_BUFF_EMPTY_FLAG;
 8007914:	2301      	movs	r3, #1
 8007916:	e013      	b.n	8007940 <DriverSBGC32_UartReceiveByte+0x46>
		}

		*data = drv->rxBuffer[drv->rxTail++];
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	695a      	ldr	r2, [r3, #20]
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	7e1b      	ldrb	r3, [r3, #24]
 8007920:	1c59      	adds	r1, r3, #1
 8007922:	b2c8      	uxtb	r0, r1
 8007924:	68f9      	ldr	r1, [r7, #12]
 8007926:	7608      	strb	r0, [r1, #24]
 8007928:	4413      	add	r3, r2
 800792a:	781a      	ldrb	r2, [r3, #0]
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	701a      	strb	r2, [r3, #0]

		if (drv->rxOverflowFlag == 1)  // Reset the overflow flag
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	7e9b      	ldrb	r3, [r3, #26]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d102      	bne.n	800793e <DriverSBGC32_UartReceiveByte+0x44>
			drv->rxOverflowFlag = 0;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	769a      	strb	r2, [r3, #26]
		if (drv->rxTail != drv->rxHead)
			drv->rxTail++;

	#endif

	return SBGC_DRV_RX_BUSY_FLAG;  // Rx ring buffer isn't empty
 800793e:	2300      	movs	r3, #0
}
 8007940:	4618      	mov	r0, r3
 8007942:	3714      	adds	r7, #20
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <DriverSBGC32_UART_RxCallBack>:
	/**	@brief	UART receive completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void DriverSBGC32_UART_RxCallBack (void *driver)
	{
 800794c:	b490      	push	{r4, r7}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
		sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	60fb      	str	r3, [r7, #12]

		if (!calcFreeSpaceFIFO(drv->rxTail, drv->rxHead, SBGC_DRV_RX_BUFF_TOTAL_SIZE))
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	7e5a      	ldrb	r2, [r3, #25]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	7e1b      	ldrb	r3, [r3, #24]
 8007960:	429a      	cmp	r2, r3
 8007962:	d30c      	bcc.n	800797e <DriverSBGC32_UART_RxCallBack+0x32>
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	7e5b      	ldrb	r3, [r3, #25]
 8007968:	461a      	mov	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	7e1b      	ldrb	r3, [r3, #24]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007974:	bf0c      	ite	eq
 8007976:	2301      	moveq	r3, #1
 8007978:	2300      	movne	r3, #0
 800797a:	b2db      	uxtb	r3, r3
 800797c:	e008      	b.n	8007990 <DriverSBGC32_UART_RxCallBack+0x44>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	7e1a      	ldrb	r2, [r3, #24]
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	7e5b      	ldrb	r3, [r3, #25]
 8007986:	429a      	cmp	r2, r3
 8007988:	bf0c      	ite	eq
 800798a:	2301      	moveq	r3, #1
 800798c:	2300      	movne	r3, #0
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <DriverSBGC32_UART_RxCallBack+0x58>
		{
			/* - - - - User rxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */

			(void)READ_UART_BYTE(drv->uart);  // Prevent hardware overflow error (USART_ISR_ORE)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

			drv->rxOverflowFlag = 1;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2201      	movs	r2, #1
 80079a0:	769a      	strb	r2, [r3, #26]

			return;
 80079a2:	e00e      	b.n	80079c2 <DriverSBGC32_UART_RxCallBack+0x76>
		}

		drv->rxBuffer[drv->rxHead++] = READ_UART_BYTE(drv->uart);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	695a      	ldr	r2, [r3, #20]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	7e5b      	ldrb	r3, [r3, #25]
 80079b4:	1c59      	adds	r1, r3, #1
 80079b6:	b2cc      	uxtb	r4, r1
 80079b8:	68f9      	ldr	r1, [r7, #12]
 80079ba:	764c      	strb	r4, [r1, #25]
 80079bc:	4413      	add	r3, r2
 80079be:	b2c2      	uxtb	r2, r0
 80079c0:	701a      	strb	r2, [r3, #0]
	}
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bc90      	pop	{r4, r7}
 80079c8:	4770      	bx	lr

080079ca <DriverSBGC32_ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_ClearRxBuff (void *driver)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b084      	sub	sp, #16
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	60fb      	str	r3, [r7, #12]

	memset(drv->rxBuffer, 0, SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80079de:	2100      	movs	r1, #0
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f947 	bl	8007c74 <memset>
	drv->rxTail = 0;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2200      	movs	r2, #0
 80079ea:	761a      	strb	r2, [r3, #24]
	drv->rxHead = 0;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	765a      	strb	r2, [r3, #25]
	drv->rxOverflowFlag = 0;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	769a      	strb	r2, [r3, #26]
}
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <DriverSBGC32_UartTransmitDebugData>:
 *
 *	@param	*data - debug data
 *	@param	length - size of debug data
 */
void DriverSBGC32_UartTransmitDebugData (char *data, ui16 length)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	807b      	strh	r3, [r7, #2]

			LL_USART_TransmitData8(SBGC_DEBUG_SERIAL_PORT, *(data++));
		}

	#endif
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <SBGC32_Control>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_Control (sbgcGeneral_t *gSBGC, const sbgcControl_t *control
									/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
	gSBGC->_api->startWrite(gSBGC, CMD_CONTROL SBGC_ADVANCED_ARGS__);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a28:	2143      	movs	r1, #67	; 0x43
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
	gSBGC->_api->writeBuff(gSBGC, control, sizeof(sbgcControl_t));
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a34:	220f      	movs	r2, #15
 8007a36:	6839      	ldr	r1, [r7, #0]
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
 8007a52:	4603      	mov	r3, r0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <SBGC32_ControlConfig>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ControlConfig (sbgcGeneral_t *gSBGC, const sbgcControlConfig_t *controlConfig, sbgcConfirm_t *confirm
										  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b084      	sub	sp, #16
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
	sbgcAssertFrwVer(2610)

	gSBGC->_api->startWrite(gSBGC, CMD_CONTROL_CONFIG SBGC_ADVANCED_ARGS__);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a6e:	215a      	movs	r1, #90	; 0x5a
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	4798      	blx	r3
	gSBGC->_api->writeBuff(gSBGC, controlConfig, sizeof(sbgcControlConfig_t));
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a7a:	2229      	movs	r2, #41	; 0x29
 8007a7c:	68b9      	ldr	r1, [r7, #8]
 8007a7e:	68f8      	ldr	r0, [r7, #12]
 8007a80:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_CONTROL_CONFIG SBGC_ADVANCED_ARGS__);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007a94:	225a      	movs	r2, #90	; 0x5a
 8007a96:	6879      	ldr	r1, [r7, #4]
 8007a98:	68f8      	ldr	r0, [r7, #12]
 8007a9a:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	4798      	blx	r3
 8007ab4:	4603      	mov	r3, r0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <SBGC32_ExecuteMenu>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ExecuteMenu (sbgcGeneral_t *gSBGC, sbgcMenuCommand_t menuCommandID, sbgcConfirm_t *confirm
										/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b084      	sub	sp, #16
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	60f8      	str	r0, [r7, #12]
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	72fb      	strb	r3, [r7, #11]
	sbgcAssertParam(menuCommandID, MENU_CMD_NO, MENU_CMD_SET_RC_TRIM)

	gSBGC->_api->startWrite(gSBGC, CMD_EXECUTE_MENU SBGC_ADVANCED_ARGS__);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad2:	2145      	movs	r1, #69	; 0x45
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, menuCommandID);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	685b      	ldr	r3, [r3, #4]
 8007adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ade:	7afa      	ldrb	r2, [r7, #11]
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_EXECUTE_MENU SBGC_ADVANCED_ARGS__);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007af8:	2245      	movs	r2, #69	; 0x45
 8007afa:	6879      	ldr	r1, [r7, #4]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	4798      	blx	r3
 8007b18:	4603      	mov	r3, r0
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3710      	adds	r7, #16
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <SBGC32_SetServoOut>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_SetServoOut (sbgcGeneral_t *gSBGC, const i16 *servoTime
										/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
 8007b2a:	6039      	str	r1, [r7, #0]
	gSBGC->_api->startWrite(gSBGC, CMD_SERVO_OUT SBGC_ADVANCED_ARGS__);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b32:	2124      	movs	r1, #36	; 0x24
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	4798      	blx	r3
	for (ui8 i = 0; i < 4; i++) gSBGC->_api->writeWord(gSBGC, servoTime[i]);
 8007b38:	2300      	movs	r3, #0
 8007b3a:	73fb      	strb	r3, [r7, #15]
 8007b3c:	e00f      	b.n	8007b5e <SBGC32_SetServoOut+0x3c>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b44:	7bfa      	ldrb	r2, [r7, #15]
 8007b46:	0052      	lsls	r2, r2, #1
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007b50:	b292      	uxth	r2, r2
 8007b52:	4611      	mov	r1, r2
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	4798      	blx	r3
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	73fb      	strb	r3, [r7, #15]
 8007b5e:	7bfb      	ldrb	r3, [r7, #15]
 8007b60:	2b03      	cmp	r3, #3
 8007b62:	d9ec      	bls.n	8007b3e <SBGC32_SetServoOut+0x1c>
	gSBGC->_api->finishWrite(gSBGC);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	4798      	blx	r3
	/* No need confirmation */

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	4798      	blx	r3
 8007b7a:	4603      	mov	r3, r0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <PrivateSBGC32_EnterInit>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t PrivateSBGC32_EnterInit (sbgcGeneral_t *gSBGC)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af02      	add	r7, sp, #8
 8007b8a:	6078      	str	r0, [r7, #4]

			DriverSBGC32_Init(&gSBGC->_ll->drv, SBGC_SERIAL_PORT, SBGC_SERIAL_SPEED);

		#elif (SBGC_USE_STM32_DRIVER)

			SerialAPI_LinkDriver(gSBGC, DriverSBGC32_UartTransmitData, DriverSBGC32_UartReceiveByte, DriverSBGC32_GetAvailableBytes,
 8007b8c:	4b0c      	ldr	r3, [pc, #48]	; (8007bc0 <PrivateSBGC32_EnterInit+0x3c>)
 8007b8e:	9301      	str	r3, [sp, #4]
 8007b90:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <PrivateSBGC32_EnterInit+0x40>)
 8007b92:	9300      	str	r3, [sp, #0]
 8007b94:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <PrivateSBGC32_EnterInit+0x44>)
 8007b96:	4a0d      	ldr	r2, [pc, #52]	; (8007bcc <PrivateSBGC32_EnterInit+0x48>)
 8007b98:	490d      	ldr	r1, [pc, #52]	; (8007bd0 <PrivateSBGC32_EnterInit+0x4c>)
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff fc82 	bl	80074a4 <SerialAPI_LinkDriver>
								 DriverSBGC32_UartTransmitDebugData, DriverSBGC32_GetTimeMs);

			DriverSBGC32_Init(&gSBGC->_ll->drv, SBGC_SERIAL_PORT, SBGC_REFERENCE_TIMER);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a0b      	ldr	r2, [pc, #44]	; (8007bd4 <PrivateSBGC32_EnterInit+0x50>)
 8007ba6:	490c      	ldr	r1, [pc, #48]	; (8007bd8 <PrivateSBGC32_EnterInit+0x54>)
 8007ba8:	4618      	mov	r0, r3
 8007baa:	f7ff fd51 	bl	8007650 <DriverSBGC32_Init>

		#endif
	#endif

	return SBGC32_SetupLibrary(gSBGC);
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff fb3a 	bl	8007228 <SBGC32_SetupLibrary>
 8007bb4:	4603      	mov	r3, r0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3708      	adds	r7, #8
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	0800770f 	.word	0x0800770f
 8007bc4:	08007a01 	.word	0x08007a01
 8007bc8:	0800788d 	.word	0x0800788d
 8007bcc:	080078fb 	.word	0x080078fb
 8007bd0:	0800774d 	.word	0x0800774d
 8007bd4:	200002cc 	.word	0x200002cc
 8007bd8:	20000318 	.word	0x20000318

08007bdc <SBGC32_Init>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_Init (sbgcGeneral_t *gSBGC)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
	#endif

	#if (SBGC_USES_OS_SUPPORT)
		SystemSBGC32_Init(gSBGC);
	#else
		return PrivateSBGC32_EnterInit(gSBGC);
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7ff ffcd 	bl	8007b84 <PrivateSBGC32_EnterInit>
 8007bea:	4603      	mov	r3, r0
	#endif

	return sbgcCOMMAND_OK;
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3708      	adds	r7, #8
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	bd80      	pop	{r7, pc}

08007bf4 <__errno>:
 8007bf4:	4b01      	ldr	r3, [pc, #4]	; (8007bfc <__errno+0x8>)
 8007bf6:	6818      	ldr	r0, [r3, #0]
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	20000014 	.word	0x20000014

08007c00 <__libc_init_array>:
 8007c00:	b570      	push	{r4, r5, r6, lr}
 8007c02:	4d0d      	ldr	r5, [pc, #52]	; (8007c38 <__libc_init_array+0x38>)
 8007c04:	4c0d      	ldr	r4, [pc, #52]	; (8007c3c <__libc_init_array+0x3c>)
 8007c06:	1b64      	subs	r4, r4, r5
 8007c08:	10a4      	asrs	r4, r4, #2
 8007c0a:	2600      	movs	r6, #0
 8007c0c:	42a6      	cmp	r6, r4
 8007c0e:	d109      	bne.n	8007c24 <__libc_init_array+0x24>
 8007c10:	4d0b      	ldr	r5, [pc, #44]	; (8007c40 <__libc_init_array+0x40>)
 8007c12:	4c0c      	ldr	r4, [pc, #48]	; (8007c44 <__libc_init_array+0x44>)
 8007c14:	f004 fb84 	bl	800c320 <_init>
 8007c18:	1b64      	subs	r4, r4, r5
 8007c1a:	10a4      	asrs	r4, r4, #2
 8007c1c:	2600      	movs	r6, #0
 8007c1e:	42a6      	cmp	r6, r4
 8007c20:	d105      	bne.n	8007c2e <__libc_init_array+0x2e>
 8007c22:	bd70      	pop	{r4, r5, r6, pc}
 8007c24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c28:	4798      	blx	r3
 8007c2a:	3601      	adds	r6, #1
 8007c2c:	e7ee      	b.n	8007c0c <__libc_init_array+0xc>
 8007c2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c32:	4798      	blx	r3
 8007c34:	3601      	adds	r6, #1
 8007c36:	e7f2      	b.n	8007c1e <__libc_init_array+0x1e>
 8007c38:	0800c7fc 	.word	0x0800c7fc
 8007c3c:	0800c7fc 	.word	0x0800c7fc
 8007c40:	0800c7fc 	.word	0x0800c7fc
 8007c44:	0800c800 	.word	0x0800c800

08007c48 <malloc>:
 8007c48:	4b02      	ldr	r3, [pc, #8]	; (8007c54 <malloc+0xc>)
 8007c4a:	4601      	mov	r1, r0
 8007c4c:	6818      	ldr	r0, [r3, #0]
 8007c4e:	f000 b885 	b.w	8007d5c <_malloc_r>
 8007c52:	bf00      	nop
 8007c54:	20000014 	.word	0x20000014

08007c58 <memcpy>:
 8007c58:	440a      	add	r2, r1
 8007c5a:	4291      	cmp	r1, r2
 8007c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c60:	d100      	bne.n	8007c64 <memcpy+0xc>
 8007c62:	4770      	bx	lr
 8007c64:	b510      	push	{r4, lr}
 8007c66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c6e:	4291      	cmp	r1, r2
 8007c70:	d1f9      	bne.n	8007c66 <memcpy+0xe>
 8007c72:	bd10      	pop	{r4, pc}

08007c74 <memset>:
 8007c74:	4402      	add	r2, r0
 8007c76:	4603      	mov	r3, r0
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d100      	bne.n	8007c7e <memset+0xa>
 8007c7c:	4770      	bx	lr
 8007c7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007c82:	e7f9      	b.n	8007c78 <memset+0x4>

08007c84 <_free_r>:
 8007c84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007c86:	2900      	cmp	r1, #0
 8007c88:	d044      	beq.n	8007d14 <_free_r+0x90>
 8007c8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c8e:	9001      	str	r0, [sp, #4]
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f1a1 0404 	sub.w	r4, r1, #4
 8007c96:	bfb8      	it	lt
 8007c98:	18e4      	addlt	r4, r4, r3
 8007c9a:	f002 ff2d 	bl	800aaf8 <__malloc_lock>
 8007c9e:	4a1e      	ldr	r2, [pc, #120]	; (8007d18 <_free_r+0x94>)
 8007ca0:	9801      	ldr	r0, [sp, #4]
 8007ca2:	6813      	ldr	r3, [r2, #0]
 8007ca4:	b933      	cbnz	r3, 8007cb4 <_free_r+0x30>
 8007ca6:	6063      	str	r3, [r4, #4]
 8007ca8:	6014      	str	r4, [r2, #0]
 8007caa:	b003      	add	sp, #12
 8007cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007cb0:	f002 bf28 	b.w	800ab04 <__malloc_unlock>
 8007cb4:	42a3      	cmp	r3, r4
 8007cb6:	d908      	bls.n	8007cca <_free_r+0x46>
 8007cb8:	6825      	ldr	r5, [r4, #0]
 8007cba:	1961      	adds	r1, r4, r5
 8007cbc:	428b      	cmp	r3, r1
 8007cbe:	bf01      	itttt	eq
 8007cc0:	6819      	ldreq	r1, [r3, #0]
 8007cc2:	685b      	ldreq	r3, [r3, #4]
 8007cc4:	1949      	addeq	r1, r1, r5
 8007cc6:	6021      	streq	r1, [r4, #0]
 8007cc8:	e7ed      	b.n	8007ca6 <_free_r+0x22>
 8007cca:	461a      	mov	r2, r3
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	b10b      	cbz	r3, 8007cd4 <_free_r+0x50>
 8007cd0:	42a3      	cmp	r3, r4
 8007cd2:	d9fa      	bls.n	8007cca <_free_r+0x46>
 8007cd4:	6811      	ldr	r1, [r2, #0]
 8007cd6:	1855      	adds	r5, r2, r1
 8007cd8:	42a5      	cmp	r5, r4
 8007cda:	d10b      	bne.n	8007cf4 <_free_r+0x70>
 8007cdc:	6824      	ldr	r4, [r4, #0]
 8007cde:	4421      	add	r1, r4
 8007ce0:	1854      	adds	r4, r2, r1
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	6011      	str	r1, [r2, #0]
 8007ce6:	d1e0      	bne.n	8007caa <_free_r+0x26>
 8007ce8:	681c      	ldr	r4, [r3, #0]
 8007cea:	685b      	ldr	r3, [r3, #4]
 8007cec:	6053      	str	r3, [r2, #4]
 8007cee:	4421      	add	r1, r4
 8007cf0:	6011      	str	r1, [r2, #0]
 8007cf2:	e7da      	b.n	8007caa <_free_r+0x26>
 8007cf4:	d902      	bls.n	8007cfc <_free_r+0x78>
 8007cf6:	230c      	movs	r3, #12
 8007cf8:	6003      	str	r3, [r0, #0]
 8007cfa:	e7d6      	b.n	8007caa <_free_r+0x26>
 8007cfc:	6825      	ldr	r5, [r4, #0]
 8007cfe:	1961      	adds	r1, r4, r5
 8007d00:	428b      	cmp	r3, r1
 8007d02:	bf04      	itt	eq
 8007d04:	6819      	ldreq	r1, [r3, #0]
 8007d06:	685b      	ldreq	r3, [r3, #4]
 8007d08:	6063      	str	r3, [r4, #4]
 8007d0a:	bf04      	itt	eq
 8007d0c:	1949      	addeq	r1, r1, r5
 8007d0e:	6021      	streq	r1, [r4, #0]
 8007d10:	6054      	str	r4, [r2, #4]
 8007d12:	e7ca      	b.n	8007caa <_free_r+0x26>
 8007d14:	b003      	add	sp, #12
 8007d16:	bd30      	pop	{r4, r5, pc}
 8007d18:	20000440 	.word	0x20000440

08007d1c <sbrk_aligned>:
 8007d1c:	b570      	push	{r4, r5, r6, lr}
 8007d1e:	4e0e      	ldr	r6, [pc, #56]	; (8007d58 <sbrk_aligned+0x3c>)
 8007d20:	460c      	mov	r4, r1
 8007d22:	6831      	ldr	r1, [r6, #0]
 8007d24:	4605      	mov	r5, r0
 8007d26:	b911      	cbnz	r1, 8007d2e <sbrk_aligned+0x12>
 8007d28:	f000 fed6 	bl	8008ad8 <_sbrk_r>
 8007d2c:	6030      	str	r0, [r6, #0]
 8007d2e:	4621      	mov	r1, r4
 8007d30:	4628      	mov	r0, r5
 8007d32:	f000 fed1 	bl	8008ad8 <_sbrk_r>
 8007d36:	1c43      	adds	r3, r0, #1
 8007d38:	d00a      	beq.n	8007d50 <sbrk_aligned+0x34>
 8007d3a:	1cc4      	adds	r4, r0, #3
 8007d3c:	f024 0403 	bic.w	r4, r4, #3
 8007d40:	42a0      	cmp	r0, r4
 8007d42:	d007      	beq.n	8007d54 <sbrk_aligned+0x38>
 8007d44:	1a21      	subs	r1, r4, r0
 8007d46:	4628      	mov	r0, r5
 8007d48:	f000 fec6 	bl	8008ad8 <_sbrk_r>
 8007d4c:	3001      	adds	r0, #1
 8007d4e:	d101      	bne.n	8007d54 <sbrk_aligned+0x38>
 8007d50:	f04f 34ff 	mov.w	r4, #4294967295
 8007d54:	4620      	mov	r0, r4
 8007d56:	bd70      	pop	{r4, r5, r6, pc}
 8007d58:	20000444 	.word	0x20000444

08007d5c <_malloc_r>:
 8007d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d60:	1ccd      	adds	r5, r1, #3
 8007d62:	f025 0503 	bic.w	r5, r5, #3
 8007d66:	3508      	adds	r5, #8
 8007d68:	2d0c      	cmp	r5, #12
 8007d6a:	bf38      	it	cc
 8007d6c:	250c      	movcc	r5, #12
 8007d6e:	2d00      	cmp	r5, #0
 8007d70:	4607      	mov	r7, r0
 8007d72:	db01      	blt.n	8007d78 <_malloc_r+0x1c>
 8007d74:	42a9      	cmp	r1, r5
 8007d76:	d905      	bls.n	8007d84 <_malloc_r+0x28>
 8007d78:	230c      	movs	r3, #12
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	2600      	movs	r6, #0
 8007d7e:	4630      	mov	r0, r6
 8007d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d84:	4e2e      	ldr	r6, [pc, #184]	; (8007e40 <_malloc_r+0xe4>)
 8007d86:	f002 feb7 	bl	800aaf8 <__malloc_lock>
 8007d8a:	6833      	ldr	r3, [r6, #0]
 8007d8c:	461c      	mov	r4, r3
 8007d8e:	bb34      	cbnz	r4, 8007dde <_malloc_r+0x82>
 8007d90:	4629      	mov	r1, r5
 8007d92:	4638      	mov	r0, r7
 8007d94:	f7ff ffc2 	bl	8007d1c <sbrk_aligned>
 8007d98:	1c43      	adds	r3, r0, #1
 8007d9a:	4604      	mov	r4, r0
 8007d9c:	d14d      	bne.n	8007e3a <_malloc_r+0xde>
 8007d9e:	6834      	ldr	r4, [r6, #0]
 8007da0:	4626      	mov	r6, r4
 8007da2:	2e00      	cmp	r6, #0
 8007da4:	d140      	bne.n	8007e28 <_malloc_r+0xcc>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	4631      	mov	r1, r6
 8007daa:	4638      	mov	r0, r7
 8007dac:	eb04 0803 	add.w	r8, r4, r3
 8007db0:	f000 fe92 	bl	8008ad8 <_sbrk_r>
 8007db4:	4580      	cmp	r8, r0
 8007db6:	d13a      	bne.n	8007e2e <_malloc_r+0xd2>
 8007db8:	6821      	ldr	r1, [r4, #0]
 8007dba:	3503      	adds	r5, #3
 8007dbc:	1a6d      	subs	r5, r5, r1
 8007dbe:	f025 0503 	bic.w	r5, r5, #3
 8007dc2:	3508      	adds	r5, #8
 8007dc4:	2d0c      	cmp	r5, #12
 8007dc6:	bf38      	it	cc
 8007dc8:	250c      	movcc	r5, #12
 8007dca:	4629      	mov	r1, r5
 8007dcc:	4638      	mov	r0, r7
 8007dce:	f7ff ffa5 	bl	8007d1c <sbrk_aligned>
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	d02b      	beq.n	8007e2e <_malloc_r+0xd2>
 8007dd6:	6823      	ldr	r3, [r4, #0]
 8007dd8:	442b      	add	r3, r5
 8007dda:	6023      	str	r3, [r4, #0]
 8007ddc:	e00e      	b.n	8007dfc <_malloc_r+0xa0>
 8007dde:	6822      	ldr	r2, [r4, #0]
 8007de0:	1b52      	subs	r2, r2, r5
 8007de2:	d41e      	bmi.n	8007e22 <_malloc_r+0xc6>
 8007de4:	2a0b      	cmp	r2, #11
 8007de6:	d916      	bls.n	8007e16 <_malloc_r+0xba>
 8007de8:	1961      	adds	r1, r4, r5
 8007dea:	42a3      	cmp	r3, r4
 8007dec:	6025      	str	r5, [r4, #0]
 8007dee:	bf18      	it	ne
 8007df0:	6059      	strne	r1, [r3, #4]
 8007df2:	6863      	ldr	r3, [r4, #4]
 8007df4:	bf08      	it	eq
 8007df6:	6031      	streq	r1, [r6, #0]
 8007df8:	5162      	str	r2, [r4, r5]
 8007dfa:	604b      	str	r3, [r1, #4]
 8007dfc:	4638      	mov	r0, r7
 8007dfe:	f104 060b 	add.w	r6, r4, #11
 8007e02:	f002 fe7f 	bl	800ab04 <__malloc_unlock>
 8007e06:	f026 0607 	bic.w	r6, r6, #7
 8007e0a:	1d23      	adds	r3, r4, #4
 8007e0c:	1af2      	subs	r2, r6, r3
 8007e0e:	d0b6      	beq.n	8007d7e <_malloc_r+0x22>
 8007e10:	1b9b      	subs	r3, r3, r6
 8007e12:	50a3      	str	r3, [r4, r2]
 8007e14:	e7b3      	b.n	8007d7e <_malloc_r+0x22>
 8007e16:	6862      	ldr	r2, [r4, #4]
 8007e18:	42a3      	cmp	r3, r4
 8007e1a:	bf0c      	ite	eq
 8007e1c:	6032      	streq	r2, [r6, #0]
 8007e1e:	605a      	strne	r2, [r3, #4]
 8007e20:	e7ec      	b.n	8007dfc <_malloc_r+0xa0>
 8007e22:	4623      	mov	r3, r4
 8007e24:	6864      	ldr	r4, [r4, #4]
 8007e26:	e7b2      	b.n	8007d8e <_malloc_r+0x32>
 8007e28:	4634      	mov	r4, r6
 8007e2a:	6876      	ldr	r6, [r6, #4]
 8007e2c:	e7b9      	b.n	8007da2 <_malloc_r+0x46>
 8007e2e:	230c      	movs	r3, #12
 8007e30:	603b      	str	r3, [r7, #0]
 8007e32:	4638      	mov	r0, r7
 8007e34:	f002 fe66 	bl	800ab04 <__malloc_unlock>
 8007e38:	e7a1      	b.n	8007d7e <_malloc_r+0x22>
 8007e3a:	6025      	str	r5, [r4, #0]
 8007e3c:	e7de      	b.n	8007dfc <_malloc_r+0xa0>
 8007e3e:	bf00      	nop
 8007e40:	20000440 	.word	0x20000440

08007e44 <__cvt>:
 8007e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e46:	ed2d 8b02 	vpush	{d8}
 8007e4a:	eeb0 8b40 	vmov.f64	d8, d0
 8007e4e:	b085      	sub	sp, #20
 8007e50:	4617      	mov	r7, r2
 8007e52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007e54:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007e56:	ee18 2a90 	vmov	r2, s17
 8007e5a:	f025 0520 	bic.w	r5, r5, #32
 8007e5e:	2a00      	cmp	r2, #0
 8007e60:	bfb6      	itet	lt
 8007e62:	222d      	movlt	r2, #45	; 0x2d
 8007e64:	2200      	movge	r2, #0
 8007e66:	eeb1 8b40 	vneglt.f64	d8, d0
 8007e6a:	2d46      	cmp	r5, #70	; 0x46
 8007e6c:	460c      	mov	r4, r1
 8007e6e:	701a      	strb	r2, [r3, #0]
 8007e70:	d004      	beq.n	8007e7c <__cvt+0x38>
 8007e72:	2d45      	cmp	r5, #69	; 0x45
 8007e74:	d100      	bne.n	8007e78 <__cvt+0x34>
 8007e76:	3401      	adds	r4, #1
 8007e78:	2102      	movs	r1, #2
 8007e7a:	e000      	b.n	8007e7e <__cvt+0x3a>
 8007e7c:	2103      	movs	r1, #3
 8007e7e:	ab03      	add	r3, sp, #12
 8007e80:	9301      	str	r3, [sp, #4]
 8007e82:	ab02      	add	r3, sp, #8
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	4622      	mov	r2, r4
 8007e88:	4633      	mov	r3, r6
 8007e8a:	eeb0 0b48 	vmov.f64	d0, d8
 8007e8e:	f001 fd3f 	bl	8009910 <_dtoa_r>
 8007e92:	2d47      	cmp	r5, #71	; 0x47
 8007e94:	d101      	bne.n	8007e9a <__cvt+0x56>
 8007e96:	07fb      	lsls	r3, r7, #31
 8007e98:	d51a      	bpl.n	8007ed0 <__cvt+0x8c>
 8007e9a:	2d46      	cmp	r5, #70	; 0x46
 8007e9c:	eb00 0204 	add.w	r2, r0, r4
 8007ea0:	d10c      	bne.n	8007ebc <__cvt+0x78>
 8007ea2:	7803      	ldrb	r3, [r0, #0]
 8007ea4:	2b30      	cmp	r3, #48	; 0x30
 8007ea6:	d107      	bne.n	8007eb8 <__cvt+0x74>
 8007ea8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007eac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007eb0:	bf1c      	itt	ne
 8007eb2:	f1c4 0401 	rsbne	r4, r4, #1
 8007eb6:	6034      	strne	r4, [r6, #0]
 8007eb8:	6833      	ldr	r3, [r6, #0]
 8007eba:	441a      	add	r2, r3
 8007ebc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ec4:	bf08      	it	eq
 8007ec6:	9203      	streq	r2, [sp, #12]
 8007ec8:	2130      	movs	r1, #48	; 0x30
 8007eca:	9b03      	ldr	r3, [sp, #12]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d307      	bcc.n	8007ee0 <__cvt+0x9c>
 8007ed0:	9b03      	ldr	r3, [sp, #12]
 8007ed2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ed4:	1a1b      	subs	r3, r3, r0
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	b005      	add	sp, #20
 8007eda:	ecbd 8b02 	vpop	{d8}
 8007ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee0:	1c5c      	adds	r4, r3, #1
 8007ee2:	9403      	str	r4, [sp, #12]
 8007ee4:	7019      	strb	r1, [r3, #0]
 8007ee6:	e7f0      	b.n	8007eca <__cvt+0x86>

08007ee8 <__exponent>:
 8007ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007eea:	4603      	mov	r3, r0
 8007eec:	2900      	cmp	r1, #0
 8007eee:	bfb8      	it	lt
 8007ef0:	4249      	neglt	r1, r1
 8007ef2:	f803 2b02 	strb.w	r2, [r3], #2
 8007ef6:	bfb4      	ite	lt
 8007ef8:	222d      	movlt	r2, #45	; 0x2d
 8007efa:	222b      	movge	r2, #43	; 0x2b
 8007efc:	2909      	cmp	r1, #9
 8007efe:	7042      	strb	r2, [r0, #1]
 8007f00:	dd2a      	ble.n	8007f58 <__exponent+0x70>
 8007f02:	f10d 0407 	add.w	r4, sp, #7
 8007f06:	46a4      	mov	ip, r4
 8007f08:	270a      	movs	r7, #10
 8007f0a:	46a6      	mov	lr, r4
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f12:	fb07 1516 	mls	r5, r7, r6, r1
 8007f16:	3530      	adds	r5, #48	; 0x30
 8007f18:	2a63      	cmp	r2, #99	; 0x63
 8007f1a:	f104 34ff 	add.w	r4, r4, #4294967295
 8007f1e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f22:	4631      	mov	r1, r6
 8007f24:	dcf1      	bgt.n	8007f0a <__exponent+0x22>
 8007f26:	3130      	adds	r1, #48	; 0x30
 8007f28:	f1ae 0502 	sub.w	r5, lr, #2
 8007f2c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f30:	1c44      	adds	r4, r0, #1
 8007f32:	4629      	mov	r1, r5
 8007f34:	4561      	cmp	r1, ip
 8007f36:	d30a      	bcc.n	8007f4e <__exponent+0x66>
 8007f38:	f10d 0209 	add.w	r2, sp, #9
 8007f3c:	eba2 020e 	sub.w	r2, r2, lr
 8007f40:	4565      	cmp	r5, ip
 8007f42:	bf88      	it	hi
 8007f44:	2200      	movhi	r2, #0
 8007f46:	4413      	add	r3, r2
 8007f48:	1a18      	subs	r0, r3, r0
 8007f4a:	b003      	add	sp, #12
 8007f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f52:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f56:	e7ed      	b.n	8007f34 <__exponent+0x4c>
 8007f58:	2330      	movs	r3, #48	; 0x30
 8007f5a:	3130      	adds	r1, #48	; 0x30
 8007f5c:	7083      	strb	r3, [r0, #2]
 8007f5e:	70c1      	strb	r1, [r0, #3]
 8007f60:	1d03      	adds	r3, r0, #4
 8007f62:	e7f1      	b.n	8007f48 <__exponent+0x60>
 8007f64:	0000      	movs	r0, r0
	...

08007f68 <_printf_float>:
 8007f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6c:	b08b      	sub	sp, #44	; 0x2c
 8007f6e:	460c      	mov	r4, r1
 8007f70:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007f74:	4616      	mov	r6, r2
 8007f76:	461f      	mov	r7, r3
 8007f78:	4605      	mov	r5, r0
 8007f7a:	f002 fda7 	bl	800aacc <_localeconv_r>
 8007f7e:	f8d0 b000 	ldr.w	fp, [r0]
 8007f82:	4658      	mov	r0, fp
 8007f84:	f7f8 f95c 	bl	8000240 <strlen>
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9308      	str	r3, [sp, #32]
 8007f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f90:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f94:	6822      	ldr	r2, [r4, #0]
 8007f96:	3307      	adds	r3, #7
 8007f98:	f023 0307 	bic.w	r3, r3, #7
 8007f9c:	f103 0108 	add.w	r1, r3, #8
 8007fa0:	f8c8 1000 	str.w	r1, [r8]
 8007fa4:	4682      	mov	sl, r0
 8007fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007faa:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007fae:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008210 <_printf_float+0x2a8>
 8007fb2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007fb6:	eeb0 6bc0 	vabs.f64	d6, d0
 8007fba:	eeb4 6b47 	vcmp.f64	d6, d7
 8007fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc2:	dd24      	ble.n	800800e <_printf_float+0xa6>
 8007fc4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fcc:	d502      	bpl.n	8007fd4 <_printf_float+0x6c>
 8007fce:	232d      	movs	r3, #45	; 0x2d
 8007fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fd4:	4b90      	ldr	r3, [pc, #576]	; (8008218 <_printf_float+0x2b0>)
 8007fd6:	4891      	ldr	r0, [pc, #580]	; (800821c <_printf_float+0x2b4>)
 8007fd8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007fdc:	bf94      	ite	ls
 8007fde:	4698      	movls	r8, r3
 8007fe0:	4680      	movhi	r8, r0
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	6123      	str	r3, [r4, #16]
 8007fe6:	f022 0204 	bic.w	r2, r2, #4
 8007fea:	2300      	movs	r3, #0
 8007fec:	6022      	str	r2, [r4, #0]
 8007fee:	9304      	str	r3, [sp, #16]
 8007ff0:	9700      	str	r7, [sp, #0]
 8007ff2:	4633      	mov	r3, r6
 8007ff4:	aa09      	add	r2, sp, #36	; 0x24
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 f9d3 	bl	80083a4 <_printf_common>
 8007ffe:	3001      	adds	r0, #1
 8008000:	f040 808a 	bne.w	8008118 <_printf_float+0x1b0>
 8008004:	f04f 30ff 	mov.w	r0, #4294967295
 8008008:	b00b      	add	sp, #44	; 0x2c
 800800a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800800e:	eeb4 0b40 	vcmp.f64	d0, d0
 8008012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008016:	d709      	bvc.n	800802c <_printf_float+0xc4>
 8008018:	ee10 3a90 	vmov	r3, s1
 800801c:	2b00      	cmp	r3, #0
 800801e:	bfbc      	itt	lt
 8008020:	232d      	movlt	r3, #45	; 0x2d
 8008022:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008026:	487e      	ldr	r0, [pc, #504]	; (8008220 <_printf_float+0x2b8>)
 8008028:	4b7e      	ldr	r3, [pc, #504]	; (8008224 <_printf_float+0x2bc>)
 800802a:	e7d5      	b.n	8007fd8 <_printf_float+0x70>
 800802c:	6863      	ldr	r3, [r4, #4]
 800802e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008032:	9104      	str	r1, [sp, #16]
 8008034:	1c59      	adds	r1, r3, #1
 8008036:	d13c      	bne.n	80080b2 <_printf_float+0x14a>
 8008038:	2306      	movs	r3, #6
 800803a:	6063      	str	r3, [r4, #4]
 800803c:	2300      	movs	r3, #0
 800803e:	9303      	str	r3, [sp, #12]
 8008040:	ab08      	add	r3, sp, #32
 8008042:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008046:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800804a:	ab07      	add	r3, sp, #28
 800804c:	6861      	ldr	r1, [r4, #4]
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	6022      	str	r2, [r4, #0]
 8008052:	f10d 031b 	add.w	r3, sp, #27
 8008056:	4628      	mov	r0, r5
 8008058:	f7ff fef4 	bl	8007e44 <__cvt>
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	9907      	ldr	r1, [sp, #28]
 8008060:	2b47      	cmp	r3, #71	; 0x47
 8008062:	4680      	mov	r8, r0
 8008064:	d108      	bne.n	8008078 <_printf_float+0x110>
 8008066:	1cc8      	adds	r0, r1, #3
 8008068:	db02      	blt.n	8008070 <_printf_float+0x108>
 800806a:	6863      	ldr	r3, [r4, #4]
 800806c:	4299      	cmp	r1, r3
 800806e:	dd41      	ble.n	80080f4 <_printf_float+0x18c>
 8008070:	f1a9 0902 	sub.w	r9, r9, #2
 8008074:	fa5f f989 	uxtb.w	r9, r9
 8008078:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800807c:	d820      	bhi.n	80080c0 <_printf_float+0x158>
 800807e:	3901      	subs	r1, #1
 8008080:	464a      	mov	r2, r9
 8008082:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008086:	9107      	str	r1, [sp, #28]
 8008088:	f7ff ff2e 	bl	8007ee8 <__exponent>
 800808c:	9a08      	ldr	r2, [sp, #32]
 800808e:	9004      	str	r0, [sp, #16]
 8008090:	1813      	adds	r3, r2, r0
 8008092:	2a01      	cmp	r2, #1
 8008094:	6123      	str	r3, [r4, #16]
 8008096:	dc02      	bgt.n	800809e <_printf_float+0x136>
 8008098:	6822      	ldr	r2, [r4, #0]
 800809a:	07d2      	lsls	r2, r2, #31
 800809c:	d501      	bpl.n	80080a2 <_printf_float+0x13a>
 800809e:	3301      	adds	r3, #1
 80080a0:	6123      	str	r3, [r4, #16]
 80080a2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d0a2      	beq.n	8007ff0 <_printf_float+0x88>
 80080aa:	232d      	movs	r3, #45	; 0x2d
 80080ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b0:	e79e      	b.n	8007ff0 <_printf_float+0x88>
 80080b2:	9904      	ldr	r1, [sp, #16]
 80080b4:	2947      	cmp	r1, #71	; 0x47
 80080b6:	d1c1      	bne.n	800803c <_printf_float+0xd4>
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1bf      	bne.n	800803c <_printf_float+0xd4>
 80080bc:	2301      	movs	r3, #1
 80080be:	e7bc      	b.n	800803a <_printf_float+0xd2>
 80080c0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80080c4:	d118      	bne.n	80080f8 <_printf_float+0x190>
 80080c6:	2900      	cmp	r1, #0
 80080c8:	6863      	ldr	r3, [r4, #4]
 80080ca:	dd0b      	ble.n	80080e4 <_printf_float+0x17c>
 80080cc:	6121      	str	r1, [r4, #16]
 80080ce:	b913      	cbnz	r3, 80080d6 <_printf_float+0x16e>
 80080d0:	6822      	ldr	r2, [r4, #0]
 80080d2:	07d0      	lsls	r0, r2, #31
 80080d4:	d502      	bpl.n	80080dc <_printf_float+0x174>
 80080d6:	3301      	adds	r3, #1
 80080d8:	440b      	add	r3, r1
 80080da:	6123      	str	r3, [r4, #16]
 80080dc:	2300      	movs	r3, #0
 80080de:	65a1      	str	r1, [r4, #88]	; 0x58
 80080e0:	9304      	str	r3, [sp, #16]
 80080e2:	e7de      	b.n	80080a2 <_printf_float+0x13a>
 80080e4:	b913      	cbnz	r3, 80080ec <_printf_float+0x184>
 80080e6:	6822      	ldr	r2, [r4, #0]
 80080e8:	07d2      	lsls	r2, r2, #31
 80080ea:	d501      	bpl.n	80080f0 <_printf_float+0x188>
 80080ec:	3302      	adds	r3, #2
 80080ee:	e7f4      	b.n	80080da <_printf_float+0x172>
 80080f0:	2301      	movs	r3, #1
 80080f2:	e7f2      	b.n	80080da <_printf_float+0x172>
 80080f4:	f04f 0967 	mov.w	r9, #103	; 0x67
 80080f8:	9b08      	ldr	r3, [sp, #32]
 80080fa:	4299      	cmp	r1, r3
 80080fc:	db05      	blt.n	800810a <_printf_float+0x1a2>
 80080fe:	6823      	ldr	r3, [r4, #0]
 8008100:	6121      	str	r1, [r4, #16]
 8008102:	07d8      	lsls	r0, r3, #31
 8008104:	d5ea      	bpl.n	80080dc <_printf_float+0x174>
 8008106:	1c4b      	adds	r3, r1, #1
 8008108:	e7e7      	b.n	80080da <_printf_float+0x172>
 800810a:	2900      	cmp	r1, #0
 800810c:	bfd4      	ite	le
 800810e:	f1c1 0202 	rsble	r2, r1, #2
 8008112:	2201      	movgt	r2, #1
 8008114:	4413      	add	r3, r2
 8008116:	e7e0      	b.n	80080da <_printf_float+0x172>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	055a      	lsls	r2, r3, #21
 800811c:	d407      	bmi.n	800812e <_printf_float+0x1c6>
 800811e:	6923      	ldr	r3, [r4, #16]
 8008120:	4642      	mov	r2, r8
 8008122:	4631      	mov	r1, r6
 8008124:	4628      	mov	r0, r5
 8008126:	47b8      	blx	r7
 8008128:	3001      	adds	r0, #1
 800812a:	d12a      	bne.n	8008182 <_printf_float+0x21a>
 800812c:	e76a      	b.n	8008004 <_printf_float+0x9c>
 800812e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008132:	f240 80e2 	bls.w	80082fa <_printf_float+0x392>
 8008136:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800813a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800813e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008142:	d133      	bne.n	80081ac <_printf_float+0x244>
 8008144:	4a38      	ldr	r2, [pc, #224]	; (8008228 <_printf_float+0x2c0>)
 8008146:	2301      	movs	r3, #1
 8008148:	4631      	mov	r1, r6
 800814a:	4628      	mov	r0, r5
 800814c:	47b8      	blx	r7
 800814e:	3001      	adds	r0, #1
 8008150:	f43f af58 	beq.w	8008004 <_printf_float+0x9c>
 8008154:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008158:	429a      	cmp	r2, r3
 800815a:	db02      	blt.n	8008162 <_printf_float+0x1fa>
 800815c:	6823      	ldr	r3, [r4, #0]
 800815e:	07d8      	lsls	r0, r3, #31
 8008160:	d50f      	bpl.n	8008182 <_printf_float+0x21a>
 8008162:	4653      	mov	r3, sl
 8008164:	465a      	mov	r2, fp
 8008166:	4631      	mov	r1, r6
 8008168:	4628      	mov	r0, r5
 800816a:	47b8      	blx	r7
 800816c:	3001      	adds	r0, #1
 800816e:	f43f af49 	beq.w	8008004 <_printf_float+0x9c>
 8008172:	f04f 0800 	mov.w	r8, #0
 8008176:	f104 091a 	add.w	r9, r4, #26
 800817a:	9b08      	ldr	r3, [sp, #32]
 800817c:	3b01      	subs	r3, #1
 800817e:	4543      	cmp	r3, r8
 8008180:	dc09      	bgt.n	8008196 <_printf_float+0x22e>
 8008182:	6823      	ldr	r3, [r4, #0]
 8008184:	079b      	lsls	r3, r3, #30
 8008186:	f100 8108 	bmi.w	800839a <_printf_float+0x432>
 800818a:	68e0      	ldr	r0, [r4, #12]
 800818c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800818e:	4298      	cmp	r0, r3
 8008190:	bfb8      	it	lt
 8008192:	4618      	movlt	r0, r3
 8008194:	e738      	b.n	8008008 <_printf_float+0xa0>
 8008196:	2301      	movs	r3, #1
 8008198:	464a      	mov	r2, r9
 800819a:	4631      	mov	r1, r6
 800819c:	4628      	mov	r0, r5
 800819e:	47b8      	blx	r7
 80081a0:	3001      	adds	r0, #1
 80081a2:	f43f af2f 	beq.w	8008004 <_printf_float+0x9c>
 80081a6:	f108 0801 	add.w	r8, r8, #1
 80081aa:	e7e6      	b.n	800817a <_printf_float+0x212>
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	dc3c      	bgt.n	800822c <_printf_float+0x2c4>
 80081b2:	4a1d      	ldr	r2, [pc, #116]	; (8008228 <_printf_float+0x2c0>)
 80081b4:	2301      	movs	r3, #1
 80081b6:	4631      	mov	r1, r6
 80081b8:	4628      	mov	r0, r5
 80081ba:	47b8      	blx	r7
 80081bc:	3001      	adds	r0, #1
 80081be:	f43f af21 	beq.w	8008004 <_printf_float+0x9c>
 80081c2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80081c6:	4313      	orrs	r3, r2
 80081c8:	d102      	bne.n	80081d0 <_printf_float+0x268>
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	07d9      	lsls	r1, r3, #31
 80081ce:	d5d8      	bpl.n	8008182 <_printf_float+0x21a>
 80081d0:	4653      	mov	r3, sl
 80081d2:	465a      	mov	r2, fp
 80081d4:	4631      	mov	r1, r6
 80081d6:	4628      	mov	r0, r5
 80081d8:	47b8      	blx	r7
 80081da:	3001      	adds	r0, #1
 80081dc:	f43f af12 	beq.w	8008004 <_printf_float+0x9c>
 80081e0:	f04f 0900 	mov.w	r9, #0
 80081e4:	f104 0a1a 	add.w	sl, r4, #26
 80081e8:	9b07      	ldr	r3, [sp, #28]
 80081ea:	425b      	negs	r3, r3
 80081ec:	454b      	cmp	r3, r9
 80081ee:	dc01      	bgt.n	80081f4 <_printf_float+0x28c>
 80081f0:	9b08      	ldr	r3, [sp, #32]
 80081f2:	e795      	b.n	8008120 <_printf_float+0x1b8>
 80081f4:	2301      	movs	r3, #1
 80081f6:	4652      	mov	r2, sl
 80081f8:	4631      	mov	r1, r6
 80081fa:	4628      	mov	r0, r5
 80081fc:	47b8      	blx	r7
 80081fe:	3001      	adds	r0, #1
 8008200:	f43f af00 	beq.w	8008004 <_printf_float+0x9c>
 8008204:	f109 0901 	add.w	r9, r9, #1
 8008208:	e7ee      	b.n	80081e8 <_printf_float+0x280>
 800820a:	bf00      	nop
 800820c:	f3af 8000 	nop.w
 8008210:	ffffffff 	.word	0xffffffff
 8008214:	7fefffff 	.word	0x7fefffff
 8008218:	0800c354 	.word	0x0800c354
 800821c:	0800c358 	.word	0x0800c358
 8008220:	0800c360 	.word	0x0800c360
 8008224:	0800c35c 	.word	0x0800c35c
 8008228:	0800c364 	.word	0x0800c364
 800822c:	9a08      	ldr	r2, [sp, #32]
 800822e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008230:	429a      	cmp	r2, r3
 8008232:	bfa8      	it	ge
 8008234:	461a      	movge	r2, r3
 8008236:	2a00      	cmp	r2, #0
 8008238:	4691      	mov	r9, r2
 800823a:	dc38      	bgt.n	80082ae <_printf_float+0x346>
 800823c:	2300      	movs	r3, #0
 800823e:	9305      	str	r3, [sp, #20]
 8008240:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008244:	f104 021a 	add.w	r2, r4, #26
 8008248:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800824a:	9905      	ldr	r1, [sp, #20]
 800824c:	9304      	str	r3, [sp, #16]
 800824e:	eba3 0309 	sub.w	r3, r3, r9
 8008252:	428b      	cmp	r3, r1
 8008254:	dc33      	bgt.n	80082be <_printf_float+0x356>
 8008256:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800825a:	429a      	cmp	r2, r3
 800825c:	db3c      	blt.n	80082d8 <_printf_float+0x370>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	07da      	lsls	r2, r3, #31
 8008262:	d439      	bmi.n	80082d8 <_printf_float+0x370>
 8008264:	9b08      	ldr	r3, [sp, #32]
 8008266:	9a04      	ldr	r2, [sp, #16]
 8008268:	9907      	ldr	r1, [sp, #28]
 800826a:	1a9a      	subs	r2, r3, r2
 800826c:	eba3 0901 	sub.w	r9, r3, r1
 8008270:	4591      	cmp	r9, r2
 8008272:	bfa8      	it	ge
 8008274:	4691      	movge	r9, r2
 8008276:	f1b9 0f00 	cmp.w	r9, #0
 800827a:	dc35      	bgt.n	80082e8 <_printf_float+0x380>
 800827c:	f04f 0800 	mov.w	r8, #0
 8008280:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008284:	f104 0a1a 	add.w	sl, r4, #26
 8008288:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800828c:	1a9b      	subs	r3, r3, r2
 800828e:	eba3 0309 	sub.w	r3, r3, r9
 8008292:	4543      	cmp	r3, r8
 8008294:	f77f af75 	ble.w	8008182 <_printf_float+0x21a>
 8008298:	2301      	movs	r3, #1
 800829a:	4652      	mov	r2, sl
 800829c:	4631      	mov	r1, r6
 800829e:	4628      	mov	r0, r5
 80082a0:	47b8      	blx	r7
 80082a2:	3001      	adds	r0, #1
 80082a4:	f43f aeae 	beq.w	8008004 <_printf_float+0x9c>
 80082a8:	f108 0801 	add.w	r8, r8, #1
 80082ac:	e7ec      	b.n	8008288 <_printf_float+0x320>
 80082ae:	4613      	mov	r3, r2
 80082b0:	4631      	mov	r1, r6
 80082b2:	4642      	mov	r2, r8
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b8      	blx	r7
 80082b8:	3001      	adds	r0, #1
 80082ba:	d1bf      	bne.n	800823c <_printf_float+0x2d4>
 80082bc:	e6a2      	b.n	8008004 <_printf_float+0x9c>
 80082be:	2301      	movs	r3, #1
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	9204      	str	r2, [sp, #16]
 80082c6:	47b8      	blx	r7
 80082c8:	3001      	adds	r0, #1
 80082ca:	f43f ae9b 	beq.w	8008004 <_printf_float+0x9c>
 80082ce:	9b05      	ldr	r3, [sp, #20]
 80082d0:	9a04      	ldr	r2, [sp, #16]
 80082d2:	3301      	adds	r3, #1
 80082d4:	9305      	str	r3, [sp, #20]
 80082d6:	e7b7      	b.n	8008248 <_printf_float+0x2e0>
 80082d8:	4653      	mov	r3, sl
 80082da:	465a      	mov	r2, fp
 80082dc:	4631      	mov	r1, r6
 80082de:	4628      	mov	r0, r5
 80082e0:	47b8      	blx	r7
 80082e2:	3001      	adds	r0, #1
 80082e4:	d1be      	bne.n	8008264 <_printf_float+0x2fc>
 80082e6:	e68d      	b.n	8008004 <_printf_float+0x9c>
 80082e8:	9a04      	ldr	r2, [sp, #16]
 80082ea:	464b      	mov	r3, r9
 80082ec:	4442      	add	r2, r8
 80082ee:	4631      	mov	r1, r6
 80082f0:	4628      	mov	r0, r5
 80082f2:	47b8      	blx	r7
 80082f4:	3001      	adds	r0, #1
 80082f6:	d1c1      	bne.n	800827c <_printf_float+0x314>
 80082f8:	e684      	b.n	8008004 <_printf_float+0x9c>
 80082fa:	9a08      	ldr	r2, [sp, #32]
 80082fc:	2a01      	cmp	r2, #1
 80082fe:	dc01      	bgt.n	8008304 <_printf_float+0x39c>
 8008300:	07db      	lsls	r3, r3, #31
 8008302:	d537      	bpl.n	8008374 <_printf_float+0x40c>
 8008304:	2301      	movs	r3, #1
 8008306:	4642      	mov	r2, r8
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	47b8      	blx	r7
 800830e:	3001      	adds	r0, #1
 8008310:	f43f ae78 	beq.w	8008004 <_printf_float+0x9c>
 8008314:	4653      	mov	r3, sl
 8008316:	465a      	mov	r2, fp
 8008318:	4631      	mov	r1, r6
 800831a:	4628      	mov	r0, r5
 800831c:	47b8      	blx	r7
 800831e:	3001      	adds	r0, #1
 8008320:	f43f ae70 	beq.w	8008004 <_printf_float+0x9c>
 8008324:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008328:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800832c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008330:	d01b      	beq.n	800836a <_printf_float+0x402>
 8008332:	9b08      	ldr	r3, [sp, #32]
 8008334:	f108 0201 	add.w	r2, r8, #1
 8008338:	3b01      	subs	r3, #1
 800833a:	4631      	mov	r1, r6
 800833c:	4628      	mov	r0, r5
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	d10e      	bne.n	8008362 <_printf_float+0x3fa>
 8008344:	e65e      	b.n	8008004 <_printf_float+0x9c>
 8008346:	2301      	movs	r3, #1
 8008348:	464a      	mov	r2, r9
 800834a:	4631      	mov	r1, r6
 800834c:	4628      	mov	r0, r5
 800834e:	47b8      	blx	r7
 8008350:	3001      	adds	r0, #1
 8008352:	f43f ae57 	beq.w	8008004 <_printf_float+0x9c>
 8008356:	f108 0801 	add.w	r8, r8, #1
 800835a:	9b08      	ldr	r3, [sp, #32]
 800835c:	3b01      	subs	r3, #1
 800835e:	4543      	cmp	r3, r8
 8008360:	dcf1      	bgt.n	8008346 <_printf_float+0x3de>
 8008362:	9b04      	ldr	r3, [sp, #16]
 8008364:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008368:	e6db      	b.n	8008122 <_printf_float+0x1ba>
 800836a:	f04f 0800 	mov.w	r8, #0
 800836e:	f104 091a 	add.w	r9, r4, #26
 8008372:	e7f2      	b.n	800835a <_printf_float+0x3f2>
 8008374:	2301      	movs	r3, #1
 8008376:	4642      	mov	r2, r8
 8008378:	e7df      	b.n	800833a <_printf_float+0x3d2>
 800837a:	2301      	movs	r3, #1
 800837c:	464a      	mov	r2, r9
 800837e:	4631      	mov	r1, r6
 8008380:	4628      	mov	r0, r5
 8008382:	47b8      	blx	r7
 8008384:	3001      	adds	r0, #1
 8008386:	f43f ae3d 	beq.w	8008004 <_printf_float+0x9c>
 800838a:	f108 0801 	add.w	r8, r8, #1
 800838e:	68e3      	ldr	r3, [r4, #12]
 8008390:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008392:	1a5b      	subs	r3, r3, r1
 8008394:	4543      	cmp	r3, r8
 8008396:	dcf0      	bgt.n	800837a <_printf_float+0x412>
 8008398:	e6f7      	b.n	800818a <_printf_float+0x222>
 800839a:	f04f 0800 	mov.w	r8, #0
 800839e:	f104 0919 	add.w	r9, r4, #25
 80083a2:	e7f4      	b.n	800838e <_printf_float+0x426>

080083a4 <_printf_common>:
 80083a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a8:	4616      	mov	r6, r2
 80083aa:	4699      	mov	r9, r3
 80083ac:	688a      	ldr	r2, [r1, #8]
 80083ae:	690b      	ldr	r3, [r1, #16]
 80083b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083b4:	4293      	cmp	r3, r2
 80083b6:	bfb8      	it	lt
 80083b8:	4613      	movlt	r3, r2
 80083ba:	6033      	str	r3, [r6, #0]
 80083bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083c0:	4607      	mov	r7, r0
 80083c2:	460c      	mov	r4, r1
 80083c4:	b10a      	cbz	r2, 80083ca <_printf_common+0x26>
 80083c6:	3301      	adds	r3, #1
 80083c8:	6033      	str	r3, [r6, #0]
 80083ca:	6823      	ldr	r3, [r4, #0]
 80083cc:	0699      	lsls	r1, r3, #26
 80083ce:	bf42      	ittt	mi
 80083d0:	6833      	ldrmi	r3, [r6, #0]
 80083d2:	3302      	addmi	r3, #2
 80083d4:	6033      	strmi	r3, [r6, #0]
 80083d6:	6825      	ldr	r5, [r4, #0]
 80083d8:	f015 0506 	ands.w	r5, r5, #6
 80083dc:	d106      	bne.n	80083ec <_printf_common+0x48>
 80083de:	f104 0a19 	add.w	sl, r4, #25
 80083e2:	68e3      	ldr	r3, [r4, #12]
 80083e4:	6832      	ldr	r2, [r6, #0]
 80083e6:	1a9b      	subs	r3, r3, r2
 80083e8:	42ab      	cmp	r3, r5
 80083ea:	dc26      	bgt.n	800843a <_printf_common+0x96>
 80083ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083f0:	1e13      	subs	r3, r2, #0
 80083f2:	6822      	ldr	r2, [r4, #0]
 80083f4:	bf18      	it	ne
 80083f6:	2301      	movne	r3, #1
 80083f8:	0692      	lsls	r2, r2, #26
 80083fa:	d42b      	bmi.n	8008454 <_printf_common+0xb0>
 80083fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008400:	4649      	mov	r1, r9
 8008402:	4638      	mov	r0, r7
 8008404:	47c0      	blx	r8
 8008406:	3001      	adds	r0, #1
 8008408:	d01e      	beq.n	8008448 <_printf_common+0xa4>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	68e5      	ldr	r5, [r4, #12]
 800840e:	6832      	ldr	r2, [r6, #0]
 8008410:	f003 0306 	and.w	r3, r3, #6
 8008414:	2b04      	cmp	r3, #4
 8008416:	bf08      	it	eq
 8008418:	1aad      	subeq	r5, r5, r2
 800841a:	68a3      	ldr	r3, [r4, #8]
 800841c:	6922      	ldr	r2, [r4, #16]
 800841e:	bf0c      	ite	eq
 8008420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008424:	2500      	movne	r5, #0
 8008426:	4293      	cmp	r3, r2
 8008428:	bfc4      	itt	gt
 800842a:	1a9b      	subgt	r3, r3, r2
 800842c:	18ed      	addgt	r5, r5, r3
 800842e:	2600      	movs	r6, #0
 8008430:	341a      	adds	r4, #26
 8008432:	42b5      	cmp	r5, r6
 8008434:	d11a      	bne.n	800846c <_printf_common+0xc8>
 8008436:	2000      	movs	r0, #0
 8008438:	e008      	b.n	800844c <_printf_common+0xa8>
 800843a:	2301      	movs	r3, #1
 800843c:	4652      	mov	r2, sl
 800843e:	4649      	mov	r1, r9
 8008440:	4638      	mov	r0, r7
 8008442:	47c0      	blx	r8
 8008444:	3001      	adds	r0, #1
 8008446:	d103      	bne.n	8008450 <_printf_common+0xac>
 8008448:	f04f 30ff 	mov.w	r0, #4294967295
 800844c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008450:	3501      	adds	r5, #1
 8008452:	e7c6      	b.n	80083e2 <_printf_common+0x3e>
 8008454:	18e1      	adds	r1, r4, r3
 8008456:	1c5a      	adds	r2, r3, #1
 8008458:	2030      	movs	r0, #48	; 0x30
 800845a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800845e:	4422      	add	r2, r4
 8008460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008468:	3302      	adds	r3, #2
 800846a:	e7c7      	b.n	80083fc <_printf_common+0x58>
 800846c:	2301      	movs	r3, #1
 800846e:	4622      	mov	r2, r4
 8008470:	4649      	mov	r1, r9
 8008472:	4638      	mov	r0, r7
 8008474:	47c0      	blx	r8
 8008476:	3001      	adds	r0, #1
 8008478:	d0e6      	beq.n	8008448 <_printf_common+0xa4>
 800847a:	3601      	adds	r6, #1
 800847c:	e7d9      	b.n	8008432 <_printf_common+0x8e>
	...

08008480 <_printf_i>:
 8008480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008484:	7e0f      	ldrb	r7, [r1, #24]
 8008486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008488:	2f78      	cmp	r7, #120	; 0x78
 800848a:	4691      	mov	r9, r2
 800848c:	4680      	mov	r8, r0
 800848e:	460c      	mov	r4, r1
 8008490:	469a      	mov	sl, r3
 8008492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008496:	d807      	bhi.n	80084a8 <_printf_i+0x28>
 8008498:	2f62      	cmp	r7, #98	; 0x62
 800849a:	d80a      	bhi.n	80084b2 <_printf_i+0x32>
 800849c:	2f00      	cmp	r7, #0
 800849e:	f000 80d8 	beq.w	8008652 <_printf_i+0x1d2>
 80084a2:	2f58      	cmp	r7, #88	; 0x58
 80084a4:	f000 80a3 	beq.w	80085ee <_printf_i+0x16e>
 80084a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084b0:	e03a      	b.n	8008528 <_printf_i+0xa8>
 80084b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084b6:	2b15      	cmp	r3, #21
 80084b8:	d8f6      	bhi.n	80084a8 <_printf_i+0x28>
 80084ba:	a101      	add	r1, pc, #4	; (adr r1, 80084c0 <_printf_i+0x40>)
 80084bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084c0:	08008519 	.word	0x08008519
 80084c4:	0800852d 	.word	0x0800852d
 80084c8:	080084a9 	.word	0x080084a9
 80084cc:	080084a9 	.word	0x080084a9
 80084d0:	080084a9 	.word	0x080084a9
 80084d4:	080084a9 	.word	0x080084a9
 80084d8:	0800852d 	.word	0x0800852d
 80084dc:	080084a9 	.word	0x080084a9
 80084e0:	080084a9 	.word	0x080084a9
 80084e4:	080084a9 	.word	0x080084a9
 80084e8:	080084a9 	.word	0x080084a9
 80084ec:	08008639 	.word	0x08008639
 80084f0:	0800855d 	.word	0x0800855d
 80084f4:	0800861b 	.word	0x0800861b
 80084f8:	080084a9 	.word	0x080084a9
 80084fc:	080084a9 	.word	0x080084a9
 8008500:	0800865b 	.word	0x0800865b
 8008504:	080084a9 	.word	0x080084a9
 8008508:	0800855d 	.word	0x0800855d
 800850c:	080084a9 	.word	0x080084a9
 8008510:	080084a9 	.word	0x080084a9
 8008514:	08008623 	.word	0x08008623
 8008518:	682b      	ldr	r3, [r5, #0]
 800851a:	1d1a      	adds	r2, r3, #4
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	602a      	str	r2, [r5, #0]
 8008520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008528:	2301      	movs	r3, #1
 800852a:	e0a3      	b.n	8008674 <_printf_i+0x1f4>
 800852c:	6820      	ldr	r0, [r4, #0]
 800852e:	6829      	ldr	r1, [r5, #0]
 8008530:	0606      	lsls	r6, r0, #24
 8008532:	f101 0304 	add.w	r3, r1, #4
 8008536:	d50a      	bpl.n	800854e <_printf_i+0xce>
 8008538:	680e      	ldr	r6, [r1, #0]
 800853a:	602b      	str	r3, [r5, #0]
 800853c:	2e00      	cmp	r6, #0
 800853e:	da03      	bge.n	8008548 <_printf_i+0xc8>
 8008540:	232d      	movs	r3, #45	; 0x2d
 8008542:	4276      	negs	r6, r6
 8008544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008548:	485e      	ldr	r0, [pc, #376]	; (80086c4 <_printf_i+0x244>)
 800854a:	230a      	movs	r3, #10
 800854c:	e019      	b.n	8008582 <_printf_i+0x102>
 800854e:	680e      	ldr	r6, [r1, #0]
 8008550:	602b      	str	r3, [r5, #0]
 8008552:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008556:	bf18      	it	ne
 8008558:	b236      	sxthne	r6, r6
 800855a:	e7ef      	b.n	800853c <_printf_i+0xbc>
 800855c:	682b      	ldr	r3, [r5, #0]
 800855e:	6820      	ldr	r0, [r4, #0]
 8008560:	1d19      	adds	r1, r3, #4
 8008562:	6029      	str	r1, [r5, #0]
 8008564:	0601      	lsls	r1, r0, #24
 8008566:	d501      	bpl.n	800856c <_printf_i+0xec>
 8008568:	681e      	ldr	r6, [r3, #0]
 800856a:	e002      	b.n	8008572 <_printf_i+0xf2>
 800856c:	0646      	lsls	r6, r0, #25
 800856e:	d5fb      	bpl.n	8008568 <_printf_i+0xe8>
 8008570:	881e      	ldrh	r6, [r3, #0]
 8008572:	4854      	ldr	r0, [pc, #336]	; (80086c4 <_printf_i+0x244>)
 8008574:	2f6f      	cmp	r7, #111	; 0x6f
 8008576:	bf0c      	ite	eq
 8008578:	2308      	moveq	r3, #8
 800857a:	230a      	movne	r3, #10
 800857c:	2100      	movs	r1, #0
 800857e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008582:	6865      	ldr	r5, [r4, #4]
 8008584:	60a5      	str	r5, [r4, #8]
 8008586:	2d00      	cmp	r5, #0
 8008588:	bfa2      	ittt	ge
 800858a:	6821      	ldrge	r1, [r4, #0]
 800858c:	f021 0104 	bicge.w	r1, r1, #4
 8008590:	6021      	strge	r1, [r4, #0]
 8008592:	b90e      	cbnz	r6, 8008598 <_printf_i+0x118>
 8008594:	2d00      	cmp	r5, #0
 8008596:	d04d      	beq.n	8008634 <_printf_i+0x1b4>
 8008598:	4615      	mov	r5, r2
 800859a:	fbb6 f1f3 	udiv	r1, r6, r3
 800859e:	fb03 6711 	mls	r7, r3, r1, r6
 80085a2:	5dc7      	ldrb	r7, [r0, r7]
 80085a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085a8:	4637      	mov	r7, r6
 80085aa:	42bb      	cmp	r3, r7
 80085ac:	460e      	mov	r6, r1
 80085ae:	d9f4      	bls.n	800859a <_printf_i+0x11a>
 80085b0:	2b08      	cmp	r3, #8
 80085b2:	d10b      	bne.n	80085cc <_printf_i+0x14c>
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	07de      	lsls	r6, r3, #31
 80085b8:	d508      	bpl.n	80085cc <_printf_i+0x14c>
 80085ba:	6923      	ldr	r3, [r4, #16]
 80085bc:	6861      	ldr	r1, [r4, #4]
 80085be:	4299      	cmp	r1, r3
 80085c0:	bfde      	ittt	le
 80085c2:	2330      	movle	r3, #48	; 0x30
 80085c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085cc:	1b52      	subs	r2, r2, r5
 80085ce:	6122      	str	r2, [r4, #16]
 80085d0:	f8cd a000 	str.w	sl, [sp]
 80085d4:	464b      	mov	r3, r9
 80085d6:	aa03      	add	r2, sp, #12
 80085d8:	4621      	mov	r1, r4
 80085da:	4640      	mov	r0, r8
 80085dc:	f7ff fee2 	bl	80083a4 <_printf_common>
 80085e0:	3001      	adds	r0, #1
 80085e2:	d14c      	bne.n	800867e <_printf_i+0x1fe>
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	b004      	add	sp, #16
 80085ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ee:	4835      	ldr	r0, [pc, #212]	; (80086c4 <_printf_i+0x244>)
 80085f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085f4:	6829      	ldr	r1, [r5, #0]
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80085fc:	6029      	str	r1, [r5, #0]
 80085fe:	061d      	lsls	r5, r3, #24
 8008600:	d514      	bpl.n	800862c <_printf_i+0x1ac>
 8008602:	07df      	lsls	r7, r3, #31
 8008604:	bf44      	itt	mi
 8008606:	f043 0320 	orrmi.w	r3, r3, #32
 800860a:	6023      	strmi	r3, [r4, #0]
 800860c:	b91e      	cbnz	r6, 8008616 <_printf_i+0x196>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	f023 0320 	bic.w	r3, r3, #32
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	2310      	movs	r3, #16
 8008618:	e7b0      	b.n	800857c <_printf_i+0xfc>
 800861a:	6823      	ldr	r3, [r4, #0]
 800861c:	f043 0320 	orr.w	r3, r3, #32
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	2378      	movs	r3, #120	; 0x78
 8008624:	4828      	ldr	r0, [pc, #160]	; (80086c8 <_printf_i+0x248>)
 8008626:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800862a:	e7e3      	b.n	80085f4 <_printf_i+0x174>
 800862c:	0659      	lsls	r1, r3, #25
 800862e:	bf48      	it	mi
 8008630:	b2b6      	uxthmi	r6, r6
 8008632:	e7e6      	b.n	8008602 <_printf_i+0x182>
 8008634:	4615      	mov	r5, r2
 8008636:	e7bb      	b.n	80085b0 <_printf_i+0x130>
 8008638:	682b      	ldr	r3, [r5, #0]
 800863a:	6826      	ldr	r6, [r4, #0]
 800863c:	6961      	ldr	r1, [r4, #20]
 800863e:	1d18      	adds	r0, r3, #4
 8008640:	6028      	str	r0, [r5, #0]
 8008642:	0635      	lsls	r5, r6, #24
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	d501      	bpl.n	800864c <_printf_i+0x1cc>
 8008648:	6019      	str	r1, [r3, #0]
 800864a:	e002      	b.n	8008652 <_printf_i+0x1d2>
 800864c:	0670      	lsls	r0, r6, #25
 800864e:	d5fb      	bpl.n	8008648 <_printf_i+0x1c8>
 8008650:	8019      	strh	r1, [r3, #0]
 8008652:	2300      	movs	r3, #0
 8008654:	6123      	str	r3, [r4, #16]
 8008656:	4615      	mov	r5, r2
 8008658:	e7ba      	b.n	80085d0 <_printf_i+0x150>
 800865a:	682b      	ldr	r3, [r5, #0]
 800865c:	1d1a      	adds	r2, r3, #4
 800865e:	602a      	str	r2, [r5, #0]
 8008660:	681d      	ldr	r5, [r3, #0]
 8008662:	6862      	ldr	r2, [r4, #4]
 8008664:	2100      	movs	r1, #0
 8008666:	4628      	mov	r0, r5
 8008668:	f7f7 fdf2 	bl	8000250 <memchr>
 800866c:	b108      	cbz	r0, 8008672 <_printf_i+0x1f2>
 800866e:	1b40      	subs	r0, r0, r5
 8008670:	6060      	str	r0, [r4, #4]
 8008672:	6863      	ldr	r3, [r4, #4]
 8008674:	6123      	str	r3, [r4, #16]
 8008676:	2300      	movs	r3, #0
 8008678:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800867c:	e7a8      	b.n	80085d0 <_printf_i+0x150>
 800867e:	6923      	ldr	r3, [r4, #16]
 8008680:	462a      	mov	r2, r5
 8008682:	4649      	mov	r1, r9
 8008684:	4640      	mov	r0, r8
 8008686:	47d0      	blx	sl
 8008688:	3001      	adds	r0, #1
 800868a:	d0ab      	beq.n	80085e4 <_printf_i+0x164>
 800868c:	6823      	ldr	r3, [r4, #0]
 800868e:	079b      	lsls	r3, r3, #30
 8008690:	d413      	bmi.n	80086ba <_printf_i+0x23a>
 8008692:	68e0      	ldr	r0, [r4, #12]
 8008694:	9b03      	ldr	r3, [sp, #12]
 8008696:	4298      	cmp	r0, r3
 8008698:	bfb8      	it	lt
 800869a:	4618      	movlt	r0, r3
 800869c:	e7a4      	b.n	80085e8 <_printf_i+0x168>
 800869e:	2301      	movs	r3, #1
 80086a0:	4632      	mov	r2, r6
 80086a2:	4649      	mov	r1, r9
 80086a4:	4640      	mov	r0, r8
 80086a6:	47d0      	blx	sl
 80086a8:	3001      	adds	r0, #1
 80086aa:	d09b      	beq.n	80085e4 <_printf_i+0x164>
 80086ac:	3501      	adds	r5, #1
 80086ae:	68e3      	ldr	r3, [r4, #12]
 80086b0:	9903      	ldr	r1, [sp, #12]
 80086b2:	1a5b      	subs	r3, r3, r1
 80086b4:	42ab      	cmp	r3, r5
 80086b6:	dcf2      	bgt.n	800869e <_printf_i+0x21e>
 80086b8:	e7eb      	b.n	8008692 <_printf_i+0x212>
 80086ba:	2500      	movs	r5, #0
 80086bc:	f104 0619 	add.w	r6, r4, #25
 80086c0:	e7f5      	b.n	80086ae <_printf_i+0x22e>
 80086c2:	bf00      	nop
 80086c4:	0800c366 	.word	0x0800c366
 80086c8:	0800c377 	.word	0x0800c377

080086cc <_scanf_float>:
 80086cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d0:	b087      	sub	sp, #28
 80086d2:	4617      	mov	r7, r2
 80086d4:	9303      	str	r3, [sp, #12]
 80086d6:	688b      	ldr	r3, [r1, #8]
 80086d8:	1e5a      	subs	r2, r3, #1
 80086da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80086de:	bf83      	ittte	hi
 80086e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80086e4:	195b      	addhi	r3, r3, r5
 80086e6:	9302      	strhi	r3, [sp, #8]
 80086e8:	2300      	movls	r3, #0
 80086ea:	bf86      	itte	hi
 80086ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 80086f0:	608b      	strhi	r3, [r1, #8]
 80086f2:	9302      	strls	r3, [sp, #8]
 80086f4:	680b      	ldr	r3, [r1, #0]
 80086f6:	468b      	mov	fp, r1
 80086f8:	2500      	movs	r5, #0
 80086fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80086fe:	f84b 3b1c 	str.w	r3, [fp], #28
 8008702:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008706:	4680      	mov	r8, r0
 8008708:	460c      	mov	r4, r1
 800870a:	465e      	mov	r6, fp
 800870c:	46aa      	mov	sl, r5
 800870e:	46a9      	mov	r9, r5
 8008710:	9501      	str	r5, [sp, #4]
 8008712:	68a2      	ldr	r2, [r4, #8]
 8008714:	b152      	cbz	r2, 800872c <_scanf_float+0x60>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	2b4e      	cmp	r3, #78	; 0x4e
 800871c:	d864      	bhi.n	80087e8 <_scanf_float+0x11c>
 800871e:	2b40      	cmp	r3, #64	; 0x40
 8008720:	d83c      	bhi.n	800879c <_scanf_float+0xd0>
 8008722:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008726:	b2c8      	uxtb	r0, r1
 8008728:	280e      	cmp	r0, #14
 800872a:	d93a      	bls.n	80087a2 <_scanf_float+0xd6>
 800872c:	f1b9 0f00 	cmp.w	r9, #0
 8008730:	d003      	beq.n	800873a <_scanf_float+0x6e>
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800873e:	f1ba 0f01 	cmp.w	sl, #1
 8008742:	f200 8113 	bhi.w	800896c <_scanf_float+0x2a0>
 8008746:	455e      	cmp	r6, fp
 8008748:	f200 8105 	bhi.w	8008956 <_scanf_float+0x28a>
 800874c:	2501      	movs	r5, #1
 800874e:	4628      	mov	r0, r5
 8008750:	b007      	add	sp, #28
 8008752:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008756:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800875a:	2a0d      	cmp	r2, #13
 800875c:	d8e6      	bhi.n	800872c <_scanf_float+0x60>
 800875e:	a101      	add	r1, pc, #4	; (adr r1, 8008764 <_scanf_float+0x98>)
 8008760:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008764:	080088a3 	.word	0x080088a3
 8008768:	0800872d 	.word	0x0800872d
 800876c:	0800872d 	.word	0x0800872d
 8008770:	0800872d 	.word	0x0800872d
 8008774:	08008903 	.word	0x08008903
 8008778:	080088db 	.word	0x080088db
 800877c:	0800872d 	.word	0x0800872d
 8008780:	0800872d 	.word	0x0800872d
 8008784:	080088b1 	.word	0x080088b1
 8008788:	0800872d 	.word	0x0800872d
 800878c:	0800872d 	.word	0x0800872d
 8008790:	0800872d 	.word	0x0800872d
 8008794:	0800872d 	.word	0x0800872d
 8008798:	08008869 	.word	0x08008869
 800879c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80087a0:	e7db      	b.n	800875a <_scanf_float+0x8e>
 80087a2:	290e      	cmp	r1, #14
 80087a4:	d8c2      	bhi.n	800872c <_scanf_float+0x60>
 80087a6:	a001      	add	r0, pc, #4	; (adr r0, 80087ac <_scanf_float+0xe0>)
 80087a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80087ac:	0800885b 	.word	0x0800885b
 80087b0:	0800872d 	.word	0x0800872d
 80087b4:	0800885b 	.word	0x0800885b
 80087b8:	080088ef 	.word	0x080088ef
 80087bc:	0800872d 	.word	0x0800872d
 80087c0:	08008809 	.word	0x08008809
 80087c4:	08008845 	.word	0x08008845
 80087c8:	08008845 	.word	0x08008845
 80087cc:	08008845 	.word	0x08008845
 80087d0:	08008845 	.word	0x08008845
 80087d4:	08008845 	.word	0x08008845
 80087d8:	08008845 	.word	0x08008845
 80087dc:	08008845 	.word	0x08008845
 80087e0:	08008845 	.word	0x08008845
 80087e4:	08008845 	.word	0x08008845
 80087e8:	2b6e      	cmp	r3, #110	; 0x6e
 80087ea:	d809      	bhi.n	8008800 <_scanf_float+0x134>
 80087ec:	2b60      	cmp	r3, #96	; 0x60
 80087ee:	d8b2      	bhi.n	8008756 <_scanf_float+0x8a>
 80087f0:	2b54      	cmp	r3, #84	; 0x54
 80087f2:	d077      	beq.n	80088e4 <_scanf_float+0x218>
 80087f4:	2b59      	cmp	r3, #89	; 0x59
 80087f6:	d199      	bne.n	800872c <_scanf_float+0x60>
 80087f8:	2d07      	cmp	r5, #7
 80087fa:	d197      	bne.n	800872c <_scanf_float+0x60>
 80087fc:	2508      	movs	r5, #8
 80087fe:	e029      	b.n	8008854 <_scanf_float+0x188>
 8008800:	2b74      	cmp	r3, #116	; 0x74
 8008802:	d06f      	beq.n	80088e4 <_scanf_float+0x218>
 8008804:	2b79      	cmp	r3, #121	; 0x79
 8008806:	e7f6      	b.n	80087f6 <_scanf_float+0x12a>
 8008808:	6821      	ldr	r1, [r4, #0]
 800880a:	05c8      	lsls	r0, r1, #23
 800880c:	d51a      	bpl.n	8008844 <_scanf_float+0x178>
 800880e:	9b02      	ldr	r3, [sp, #8]
 8008810:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008814:	6021      	str	r1, [r4, #0]
 8008816:	f109 0901 	add.w	r9, r9, #1
 800881a:	b11b      	cbz	r3, 8008824 <_scanf_float+0x158>
 800881c:	3b01      	subs	r3, #1
 800881e:	3201      	adds	r2, #1
 8008820:	9302      	str	r3, [sp, #8]
 8008822:	60a2      	str	r2, [r4, #8]
 8008824:	68a3      	ldr	r3, [r4, #8]
 8008826:	3b01      	subs	r3, #1
 8008828:	60a3      	str	r3, [r4, #8]
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	3301      	adds	r3, #1
 800882e:	6123      	str	r3, [r4, #16]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	3b01      	subs	r3, #1
 8008834:	2b00      	cmp	r3, #0
 8008836:	607b      	str	r3, [r7, #4]
 8008838:	f340 8084 	ble.w	8008944 <_scanf_float+0x278>
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	3301      	adds	r3, #1
 8008840:	603b      	str	r3, [r7, #0]
 8008842:	e766      	b.n	8008712 <_scanf_float+0x46>
 8008844:	eb1a 0f05 	cmn.w	sl, r5
 8008848:	f47f af70 	bne.w	800872c <_scanf_float+0x60>
 800884c:	6822      	ldr	r2, [r4, #0]
 800884e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008852:	6022      	str	r2, [r4, #0]
 8008854:	f806 3b01 	strb.w	r3, [r6], #1
 8008858:	e7e4      	b.n	8008824 <_scanf_float+0x158>
 800885a:	6822      	ldr	r2, [r4, #0]
 800885c:	0610      	lsls	r0, r2, #24
 800885e:	f57f af65 	bpl.w	800872c <_scanf_float+0x60>
 8008862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008866:	e7f4      	b.n	8008852 <_scanf_float+0x186>
 8008868:	f1ba 0f00 	cmp.w	sl, #0
 800886c:	d10e      	bne.n	800888c <_scanf_float+0x1c0>
 800886e:	f1b9 0f00 	cmp.w	r9, #0
 8008872:	d10e      	bne.n	8008892 <_scanf_float+0x1c6>
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800887a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800887e:	d108      	bne.n	8008892 <_scanf_float+0x1c6>
 8008880:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008884:	6022      	str	r2, [r4, #0]
 8008886:	f04f 0a01 	mov.w	sl, #1
 800888a:	e7e3      	b.n	8008854 <_scanf_float+0x188>
 800888c:	f1ba 0f02 	cmp.w	sl, #2
 8008890:	d055      	beq.n	800893e <_scanf_float+0x272>
 8008892:	2d01      	cmp	r5, #1
 8008894:	d002      	beq.n	800889c <_scanf_float+0x1d0>
 8008896:	2d04      	cmp	r5, #4
 8008898:	f47f af48 	bne.w	800872c <_scanf_float+0x60>
 800889c:	3501      	adds	r5, #1
 800889e:	b2ed      	uxtb	r5, r5
 80088a0:	e7d8      	b.n	8008854 <_scanf_float+0x188>
 80088a2:	f1ba 0f01 	cmp.w	sl, #1
 80088a6:	f47f af41 	bne.w	800872c <_scanf_float+0x60>
 80088aa:	f04f 0a02 	mov.w	sl, #2
 80088ae:	e7d1      	b.n	8008854 <_scanf_float+0x188>
 80088b0:	b97d      	cbnz	r5, 80088d2 <_scanf_float+0x206>
 80088b2:	f1b9 0f00 	cmp.w	r9, #0
 80088b6:	f47f af3c 	bne.w	8008732 <_scanf_float+0x66>
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80088c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80088c4:	f47f af39 	bne.w	800873a <_scanf_float+0x6e>
 80088c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80088cc:	6022      	str	r2, [r4, #0]
 80088ce:	2501      	movs	r5, #1
 80088d0:	e7c0      	b.n	8008854 <_scanf_float+0x188>
 80088d2:	2d03      	cmp	r5, #3
 80088d4:	d0e2      	beq.n	800889c <_scanf_float+0x1d0>
 80088d6:	2d05      	cmp	r5, #5
 80088d8:	e7de      	b.n	8008898 <_scanf_float+0x1cc>
 80088da:	2d02      	cmp	r5, #2
 80088dc:	f47f af26 	bne.w	800872c <_scanf_float+0x60>
 80088e0:	2503      	movs	r5, #3
 80088e2:	e7b7      	b.n	8008854 <_scanf_float+0x188>
 80088e4:	2d06      	cmp	r5, #6
 80088e6:	f47f af21 	bne.w	800872c <_scanf_float+0x60>
 80088ea:	2507      	movs	r5, #7
 80088ec:	e7b2      	b.n	8008854 <_scanf_float+0x188>
 80088ee:	6822      	ldr	r2, [r4, #0]
 80088f0:	0591      	lsls	r1, r2, #22
 80088f2:	f57f af1b 	bpl.w	800872c <_scanf_float+0x60>
 80088f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008900:	e7a8      	b.n	8008854 <_scanf_float+0x188>
 8008902:	6822      	ldr	r2, [r4, #0]
 8008904:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008908:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800890c:	d006      	beq.n	800891c <_scanf_float+0x250>
 800890e:	0550      	lsls	r0, r2, #21
 8008910:	f57f af0c 	bpl.w	800872c <_scanf_float+0x60>
 8008914:	f1b9 0f00 	cmp.w	r9, #0
 8008918:	f43f af0f 	beq.w	800873a <_scanf_float+0x6e>
 800891c:	0591      	lsls	r1, r2, #22
 800891e:	bf58      	it	pl
 8008920:	9901      	ldrpl	r1, [sp, #4]
 8008922:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008926:	bf58      	it	pl
 8008928:	eba9 0101 	subpl.w	r1, r9, r1
 800892c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008930:	bf58      	it	pl
 8008932:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008936:	6022      	str	r2, [r4, #0]
 8008938:	f04f 0900 	mov.w	r9, #0
 800893c:	e78a      	b.n	8008854 <_scanf_float+0x188>
 800893e:	f04f 0a03 	mov.w	sl, #3
 8008942:	e787      	b.n	8008854 <_scanf_float+0x188>
 8008944:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008948:	4639      	mov	r1, r7
 800894a:	4640      	mov	r0, r8
 800894c:	4798      	blx	r3
 800894e:	2800      	cmp	r0, #0
 8008950:	f43f aedf 	beq.w	8008712 <_scanf_float+0x46>
 8008954:	e6ea      	b.n	800872c <_scanf_float+0x60>
 8008956:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800895a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800895e:	463a      	mov	r2, r7
 8008960:	4640      	mov	r0, r8
 8008962:	4798      	blx	r3
 8008964:	6923      	ldr	r3, [r4, #16]
 8008966:	3b01      	subs	r3, #1
 8008968:	6123      	str	r3, [r4, #16]
 800896a:	e6ec      	b.n	8008746 <_scanf_float+0x7a>
 800896c:	1e6b      	subs	r3, r5, #1
 800896e:	2b06      	cmp	r3, #6
 8008970:	d825      	bhi.n	80089be <_scanf_float+0x2f2>
 8008972:	2d02      	cmp	r5, #2
 8008974:	d836      	bhi.n	80089e4 <_scanf_float+0x318>
 8008976:	455e      	cmp	r6, fp
 8008978:	f67f aee8 	bls.w	800874c <_scanf_float+0x80>
 800897c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008980:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008984:	463a      	mov	r2, r7
 8008986:	4640      	mov	r0, r8
 8008988:	4798      	blx	r3
 800898a:	6923      	ldr	r3, [r4, #16]
 800898c:	3b01      	subs	r3, #1
 800898e:	6123      	str	r3, [r4, #16]
 8008990:	e7f1      	b.n	8008976 <_scanf_float+0x2aa>
 8008992:	9802      	ldr	r0, [sp, #8]
 8008994:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008998:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800899c:	9002      	str	r0, [sp, #8]
 800899e:	463a      	mov	r2, r7
 80089a0:	4640      	mov	r0, r8
 80089a2:	4798      	blx	r3
 80089a4:	6923      	ldr	r3, [r4, #16]
 80089a6:	3b01      	subs	r3, #1
 80089a8:	6123      	str	r3, [r4, #16]
 80089aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089ae:	fa5f fa8a 	uxtb.w	sl, sl
 80089b2:	f1ba 0f02 	cmp.w	sl, #2
 80089b6:	d1ec      	bne.n	8008992 <_scanf_float+0x2c6>
 80089b8:	3d03      	subs	r5, #3
 80089ba:	b2ed      	uxtb	r5, r5
 80089bc:	1b76      	subs	r6, r6, r5
 80089be:	6823      	ldr	r3, [r4, #0]
 80089c0:	05da      	lsls	r2, r3, #23
 80089c2:	d52f      	bpl.n	8008a24 <_scanf_float+0x358>
 80089c4:	055b      	lsls	r3, r3, #21
 80089c6:	d510      	bpl.n	80089ea <_scanf_float+0x31e>
 80089c8:	455e      	cmp	r6, fp
 80089ca:	f67f aebf 	bls.w	800874c <_scanf_float+0x80>
 80089ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80089d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80089d6:	463a      	mov	r2, r7
 80089d8:	4640      	mov	r0, r8
 80089da:	4798      	blx	r3
 80089dc:	6923      	ldr	r3, [r4, #16]
 80089de:	3b01      	subs	r3, #1
 80089e0:	6123      	str	r3, [r4, #16]
 80089e2:	e7f1      	b.n	80089c8 <_scanf_float+0x2fc>
 80089e4:	46aa      	mov	sl, r5
 80089e6:	9602      	str	r6, [sp, #8]
 80089e8:	e7df      	b.n	80089aa <_scanf_float+0x2de>
 80089ea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80089ee:	6923      	ldr	r3, [r4, #16]
 80089f0:	2965      	cmp	r1, #101	; 0x65
 80089f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80089f6:	f106 35ff 	add.w	r5, r6, #4294967295
 80089fa:	6123      	str	r3, [r4, #16]
 80089fc:	d00c      	beq.n	8008a18 <_scanf_float+0x34c>
 80089fe:	2945      	cmp	r1, #69	; 0x45
 8008a00:	d00a      	beq.n	8008a18 <_scanf_float+0x34c>
 8008a02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a06:	463a      	mov	r2, r7
 8008a08:	4640      	mov	r0, r8
 8008a0a:	4798      	blx	r3
 8008a0c:	6923      	ldr	r3, [r4, #16]
 8008a0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008a12:	3b01      	subs	r3, #1
 8008a14:	1eb5      	subs	r5, r6, #2
 8008a16:	6123      	str	r3, [r4, #16]
 8008a18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008a1c:	463a      	mov	r2, r7
 8008a1e:	4640      	mov	r0, r8
 8008a20:	4798      	blx	r3
 8008a22:	462e      	mov	r6, r5
 8008a24:	6825      	ldr	r5, [r4, #0]
 8008a26:	f015 0510 	ands.w	r5, r5, #16
 8008a2a:	d14e      	bne.n	8008aca <_scanf_float+0x3fe>
 8008a2c:	7035      	strb	r5, [r6, #0]
 8008a2e:	6823      	ldr	r3, [r4, #0]
 8008a30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008a34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a38:	d119      	bne.n	8008a6e <_scanf_float+0x3a2>
 8008a3a:	9b01      	ldr	r3, [sp, #4]
 8008a3c:	454b      	cmp	r3, r9
 8008a3e:	eba3 0209 	sub.w	r2, r3, r9
 8008a42:	d121      	bne.n	8008a88 <_scanf_float+0x3bc>
 8008a44:	2200      	movs	r2, #0
 8008a46:	4659      	mov	r1, fp
 8008a48:	4640      	mov	r0, r8
 8008a4a:	f000 fe4b 	bl	80096e4 <_strtod_r>
 8008a4e:	6822      	ldr	r2, [r4, #0]
 8008a50:	9b03      	ldr	r3, [sp, #12]
 8008a52:	f012 0f02 	tst.w	r2, #2
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	d021      	beq.n	8008a9e <_scanf_float+0x3d2>
 8008a5a:	9903      	ldr	r1, [sp, #12]
 8008a5c:	1d1a      	adds	r2, r3, #4
 8008a5e:	600a      	str	r2, [r1, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	ed83 0b00 	vstr	d0, [r3]
 8008a66:	68e3      	ldr	r3, [r4, #12]
 8008a68:	3301      	adds	r3, #1
 8008a6a:	60e3      	str	r3, [r4, #12]
 8008a6c:	e66f      	b.n	800874e <_scanf_float+0x82>
 8008a6e:	9b04      	ldr	r3, [sp, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d0e7      	beq.n	8008a44 <_scanf_float+0x378>
 8008a74:	9905      	ldr	r1, [sp, #20]
 8008a76:	230a      	movs	r3, #10
 8008a78:	462a      	mov	r2, r5
 8008a7a:	3101      	adds	r1, #1
 8008a7c:	4640      	mov	r0, r8
 8008a7e:	f000 feb9 	bl	80097f4 <_strtol_r>
 8008a82:	9b04      	ldr	r3, [sp, #16]
 8008a84:	9e05      	ldr	r6, [sp, #20]
 8008a86:	1ac2      	subs	r2, r0, r3
 8008a88:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008a8c:	429e      	cmp	r6, r3
 8008a8e:	bf28      	it	cs
 8008a90:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008a94:	490e      	ldr	r1, [pc, #56]	; (8008ad0 <_scanf_float+0x404>)
 8008a96:	4630      	mov	r0, r6
 8008a98:	f000 f834 	bl	8008b04 <siprintf>
 8008a9c:	e7d2      	b.n	8008a44 <_scanf_float+0x378>
 8008a9e:	9903      	ldr	r1, [sp, #12]
 8008aa0:	f012 0f04 	tst.w	r2, #4
 8008aa4:	f103 0204 	add.w	r2, r3, #4
 8008aa8:	600a      	str	r2, [r1, #0]
 8008aaa:	d1d9      	bne.n	8008a60 <_scanf_float+0x394>
 8008aac:	eeb4 0b40 	vcmp.f64	d0, d0
 8008ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ab4:	681e      	ldr	r6, [r3, #0]
 8008ab6:	d705      	bvc.n	8008ac4 <_scanf_float+0x3f8>
 8008ab8:	4806      	ldr	r0, [pc, #24]	; (8008ad4 <_scanf_float+0x408>)
 8008aba:	f000 f81d 	bl	8008af8 <nanf>
 8008abe:	ed86 0a00 	vstr	s0, [r6]
 8008ac2:	e7d0      	b.n	8008a66 <_scanf_float+0x39a>
 8008ac4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008ac8:	e7f9      	b.n	8008abe <_scanf_float+0x3f2>
 8008aca:	2500      	movs	r5, #0
 8008acc:	e63f      	b.n	800874e <_scanf_float+0x82>
 8008ace:	bf00      	nop
 8008ad0:	0800c388 	.word	0x0800c388
 8008ad4:	0800c790 	.word	0x0800c790

08008ad8 <_sbrk_r>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	4d06      	ldr	r5, [pc, #24]	; (8008af4 <_sbrk_r+0x1c>)
 8008adc:	2300      	movs	r3, #0
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4608      	mov	r0, r1
 8008ae2:	602b      	str	r3, [r5, #0]
 8008ae4:	f7f8 fc3e 	bl	8001364 <_sbrk>
 8008ae8:	1c43      	adds	r3, r0, #1
 8008aea:	d102      	bne.n	8008af2 <_sbrk_r+0x1a>
 8008aec:	682b      	ldr	r3, [r5, #0]
 8008aee:	b103      	cbz	r3, 8008af2 <_sbrk_r+0x1a>
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	bd38      	pop	{r3, r4, r5, pc}
 8008af4:	20000448 	.word	0x20000448

08008af8 <nanf>:
 8008af8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008b00 <nanf+0x8>
 8008afc:	4770      	bx	lr
 8008afe:	bf00      	nop
 8008b00:	7fc00000 	.word	0x7fc00000

08008b04 <siprintf>:
 8008b04:	b40e      	push	{r1, r2, r3}
 8008b06:	b500      	push	{lr}
 8008b08:	b09c      	sub	sp, #112	; 0x70
 8008b0a:	ab1d      	add	r3, sp, #116	; 0x74
 8008b0c:	9002      	str	r0, [sp, #8]
 8008b0e:	9006      	str	r0, [sp, #24]
 8008b10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008b14:	4809      	ldr	r0, [pc, #36]	; (8008b3c <siprintf+0x38>)
 8008b16:	9107      	str	r1, [sp, #28]
 8008b18:	9104      	str	r1, [sp, #16]
 8008b1a:	4909      	ldr	r1, [pc, #36]	; (8008b40 <siprintf+0x3c>)
 8008b1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b20:	9105      	str	r1, [sp, #20]
 8008b22:	6800      	ldr	r0, [r0, #0]
 8008b24:	9301      	str	r3, [sp, #4]
 8008b26:	a902      	add	r1, sp, #8
 8008b28:	f002 fd22 	bl	800b570 <_svfiprintf_r>
 8008b2c:	9b02      	ldr	r3, [sp, #8]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	701a      	strb	r2, [r3, #0]
 8008b32:	b01c      	add	sp, #112	; 0x70
 8008b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b38:	b003      	add	sp, #12
 8008b3a:	4770      	bx	lr
 8008b3c:	20000014 	.word	0x20000014
 8008b40:	ffff0208 	.word	0xffff0208

08008b44 <sulp>:
 8008b44:	b570      	push	{r4, r5, r6, lr}
 8008b46:	4604      	mov	r4, r0
 8008b48:	460d      	mov	r5, r1
 8008b4a:	4616      	mov	r6, r2
 8008b4c:	ec45 4b10 	vmov	d0, r4, r5
 8008b50:	f002 fb50 	bl	800b1f4 <__ulp>
 8008b54:	b17e      	cbz	r6, 8008b76 <sulp+0x32>
 8008b56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008b5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	dd09      	ble.n	8008b76 <sulp+0x32>
 8008b62:	051b      	lsls	r3, r3, #20
 8008b64:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8008b68:	2000      	movs	r0, #0
 8008b6a:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 8008b6e:	ec41 0b17 	vmov	d7, r0, r1
 8008b72:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008b76:	bd70      	pop	{r4, r5, r6, pc}

08008b78 <_strtod_l>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	ed2d 8b0e 	vpush	{d8-d14}
 8008b80:	b097      	sub	sp, #92	; 0x5c
 8008b82:	461f      	mov	r7, r3
 8008b84:	2300      	movs	r3, #0
 8008b86:	9312      	str	r3, [sp, #72]	; 0x48
 8008b88:	4ba1      	ldr	r3, [pc, #644]	; (8008e10 <_strtod_l+0x298>)
 8008b8a:	920d      	str	r2, [sp, #52]	; 0x34
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	9307      	str	r3, [sp, #28]
 8008b90:	4604      	mov	r4, r0
 8008b92:	4618      	mov	r0, r3
 8008b94:	468b      	mov	fp, r1
 8008b96:	f7f7 fb53 	bl	8000240 <strlen>
 8008b9a:	f04f 0800 	mov.w	r8, #0
 8008b9e:	4605      	mov	r5, r0
 8008ba0:	f04f 0900 	mov.w	r9, #0
 8008ba4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008ba8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008baa:	7813      	ldrb	r3, [r2, #0]
 8008bac:	2b2b      	cmp	r3, #43	; 0x2b
 8008bae:	d04d      	beq.n	8008c4c <_strtod_l+0xd4>
 8008bb0:	d83a      	bhi.n	8008c28 <_strtod_l+0xb0>
 8008bb2:	2b0d      	cmp	r3, #13
 8008bb4:	d833      	bhi.n	8008c1e <_strtod_l+0xa6>
 8008bb6:	2b08      	cmp	r3, #8
 8008bb8:	d833      	bhi.n	8008c22 <_strtod_l+0xaa>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d03d      	beq.n	8008c3a <_strtod_l+0xc2>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	9308      	str	r3, [sp, #32]
 8008bc2:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8008bc4:	7833      	ldrb	r3, [r6, #0]
 8008bc6:	2b30      	cmp	r3, #48	; 0x30
 8008bc8:	f040 80b0 	bne.w	8008d2c <_strtod_l+0x1b4>
 8008bcc:	7873      	ldrb	r3, [r6, #1]
 8008bce:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008bd2:	2b58      	cmp	r3, #88	; 0x58
 8008bd4:	d167      	bne.n	8008ca6 <_strtod_l+0x12e>
 8008bd6:	9b08      	ldr	r3, [sp, #32]
 8008bd8:	9301      	str	r3, [sp, #4]
 8008bda:	ab12      	add	r3, sp, #72	; 0x48
 8008bdc:	9702      	str	r7, [sp, #8]
 8008bde:	9300      	str	r3, [sp, #0]
 8008be0:	4a8c      	ldr	r2, [pc, #560]	; (8008e14 <_strtod_l+0x29c>)
 8008be2:	ab13      	add	r3, sp, #76	; 0x4c
 8008be4:	a911      	add	r1, sp, #68	; 0x44
 8008be6:	4620      	mov	r0, r4
 8008be8:	f001 fc68 	bl	800a4bc <__gethex>
 8008bec:	f010 0507 	ands.w	r5, r0, #7
 8008bf0:	4607      	mov	r7, r0
 8008bf2:	d005      	beq.n	8008c00 <_strtod_l+0x88>
 8008bf4:	2d06      	cmp	r5, #6
 8008bf6:	d12b      	bne.n	8008c50 <_strtod_l+0xd8>
 8008bf8:	3601      	adds	r6, #1
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	9611      	str	r6, [sp, #68]	; 0x44
 8008bfe:	9308      	str	r3, [sp, #32]
 8008c00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	f040 854e 	bne.w	80096a4 <_strtod_l+0xb2c>
 8008c08:	9b08      	ldr	r3, [sp, #32]
 8008c0a:	b1e3      	cbz	r3, 8008c46 <_strtod_l+0xce>
 8008c0c:	ec49 8b17 	vmov	d7, r8, r9
 8008c10:	eeb1 0b47 	vneg.f64	d0, d7
 8008c14:	b017      	add	sp, #92	; 0x5c
 8008c16:	ecbd 8b0e 	vpop	{d8-d14}
 8008c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c1e:	2b20      	cmp	r3, #32
 8008c20:	d1cd      	bne.n	8008bbe <_strtod_l+0x46>
 8008c22:	3201      	adds	r2, #1
 8008c24:	9211      	str	r2, [sp, #68]	; 0x44
 8008c26:	e7bf      	b.n	8008ba8 <_strtod_l+0x30>
 8008c28:	2b2d      	cmp	r3, #45	; 0x2d
 8008c2a:	d1c8      	bne.n	8008bbe <_strtod_l+0x46>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	9308      	str	r3, [sp, #32]
 8008c30:	1c53      	adds	r3, r2, #1
 8008c32:	9311      	str	r3, [sp, #68]	; 0x44
 8008c34:	7853      	ldrb	r3, [r2, #1]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d1c3      	bne.n	8008bc2 <_strtod_l+0x4a>
 8008c3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c3c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	f040 852d 	bne.w	80096a0 <_strtod_l+0xb28>
 8008c46:	ec49 8b10 	vmov	d0, r8, r9
 8008c4a:	e7e3      	b.n	8008c14 <_strtod_l+0x9c>
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	e7ee      	b.n	8008c2e <_strtod_l+0xb6>
 8008c50:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008c52:	b13a      	cbz	r2, 8008c64 <_strtod_l+0xec>
 8008c54:	2135      	movs	r1, #53	; 0x35
 8008c56:	a814      	add	r0, sp, #80	; 0x50
 8008c58:	f002 fbd4 	bl	800b404 <__copybits>
 8008c5c:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f001 ff96 	bl	800ab90 <_Bfree>
 8008c64:	3d01      	subs	r5, #1
 8008c66:	2d04      	cmp	r5, #4
 8008c68:	d806      	bhi.n	8008c78 <_strtod_l+0x100>
 8008c6a:	e8df f005 	tbb	[pc, r5]
 8008c6e:	030a      	.short	0x030a
 8008c70:	1714      	.short	0x1714
 8008c72:	0a          	.byte	0x0a
 8008c73:	00          	.byte	0x00
 8008c74:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 8008c78:	073f      	lsls	r7, r7, #28
 8008c7a:	d5c1      	bpl.n	8008c00 <_strtod_l+0x88>
 8008c7c:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8008c80:	e7be      	b.n	8008c00 <_strtod_l+0x88>
 8008c82:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 8008c86:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c88:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008c8c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008c90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8008c94:	e7f0      	b.n	8008c78 <_strtod_l+0x100>
 8008c96:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8008e18 <_strtod_l+0x2a0>
 8008c9a:	e7ed      	b.n	8008c78 <_strtod_l+0x100>
 8008c9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8008ca0:	f04f 38ff 	mov.w	r8, #4294967295
 8008ca4:	e7e8      	b.n	8008c78 <_strtod_l+0x100>
 8008ca6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ca8:	1c5a      	adds	r2, r3, #1
 8008caa:	9211      	str	r2, [sp, #68]	; 0x44
 8008cac:	785b      	ldrb	r3, [r3, #1]
 8008cae:	2b30      	cmp	r3, #48	; 0x30
 8008cb0:	d0f9      	beq.n	8008ca6 <_strtod_l+0x12e>
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d0a4      	beq.n	8008c00 <_strtod_l+0x88>
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f04f 0a00 	mov.w	sl, #0
 8008cbc:	9304      	str	r3, [sp, #16]
 8008cbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008cc0:	930a      	str	r3, [sp, #40]	; 0x28
 8008cc2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8008cc6:	f8cd a018 	str.w	sl, [sp, #24]
 8008cca:	220a      	movs	r2, #10
 8008ccc:	9811      	ldr	r0, [sp, #68]	; 0x44
 8008cce:	7807      	ldrb	r7, [r0, #0]
 8008cd0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8008cd4:	b2d9      	uxtb	r1, r3
 8008cd6:	2909      	cmp	r1, #9
 8008cd8:	d92a      	bls.n	8008d30 <_strtod_l+0x1b8>
 8008cda:	9907      	ldr	r1, [sp, #28]
 8008cdc:	462a      	mov	r2, r5
 8008cde:	f002 fd4f 	bl	800b780 <strncmp>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	d033      	beq.n	8008d4e <_strtod_l+0x1d6>
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	9b06      	ldr	r3, [sp, #24]
 8008cea:	463a      	mov	r2, r7
 8008cec:	4601      	mov	r1, r0
 8008cee:	4607      	mov	r7, r0
 8008cf0:	2a65      	cmp	r2, #101	; 0x65
 8008cf2:	d001      	beq.n	8008cf8 <_strtod_l+0x180>
 8008cf4:	2a45      	cmp	r2, #69	; 0x45
 8008cf6:	d117      	bne.n	8008d28 <_strtod_l+0x1b0>
 8008cf8:	b91b      	cbnz	r3, 8008d02 <_strtod_l+0x18a>
 8008cfa:	9b04      	ldr	r3, [sp, #16]
 8008cfc:	4303      	orrs	r3, r0
 8008cfe:	d09c      	beq.n	8008c3a <_strtod_l+0xc2>
 8008d00:	2300      	movs	r3, #0
 8008d02:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 8008d06:	f10b 0201 	add.w	r2, fp, #1
 8008d0a:	9211      	str	r2, [sp, #68]	; 0x44
 8008d0c:	f89b 2001 	ldrb.w	r2, [fp, #1]
 8008d10:	2a2b      	cmp	r2, #43	; 0x2b
 8008d12:	d071      	beq.n	8008df8 <_strtod_l+0x280>
 8008d14:	2a2d      	cmp	r2, #45	; 0x2d
 8008d16:	d077      	beq.n	8008e08 <_strtod_l+0x290>
 8008d18:	f04f 0e00 	mov.w	lr, #0
 8008d1c:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 8008d20:	2d09      	cmp	r5, #9
 8008d22:	d97f      	bls.n	8008e24 <_strtod_l+0x2ac>
 8008d24:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 8008d28:	2500      	movs	r5, #0
 8008d2a:	e09b      	b.n	8008e64 <_strtod_l+0x2ec>
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	e7c3      	b.n	8008cb8 <_strtod_l+0x140>
 8008d30:	9906      	ldr	r1, [sp, #24]
 8008d32:	2908      	cmp	r1, #8
 8008d34:	bfdd      	ittte	le
 8008d36:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008d38:	fb02 3301 	mlale	r3, r2, r1, r3
 8008d3c:	9309      	strle	r3, [sp, #36]	; 0x24
 8008d3e:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8008d42:	9b06      	ldr	r3, [sp, #24]
 8008d44:	3001      	adds	r0, #1
 8008d46:	3301      	adds	r3, #1
 8008d48:	9306      	str	r3, [sp, #24]
 8008d4a:	9011      	str	r0, [sp, #68]	; 0x44
 8008d4c:	e7be      	b.n	8008ccc <_strtod_l+0x154>
 8008d4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d50:	195a      	adds	r2, r3, r5
 8008d52:	9211      	str	r2, [sp, #68]	; 0x44
 8008d54:	5d5a      	ldrb	r2, [r3, r5]
 8008d56:	9b06      	ldr	r3, [sp, #24]
 8008d58:	b3a3      	cbz	r3, 8008dc4 <_strtod_l+0x24c>
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008d60:	2909      	cmp	r1, #9
 8008d62:	d912      	bls.n	8008d8a <_strtod_l+0x212>
 8008d64:	2101      	movs	r1, #1
 8008d66:	e7c3      	b.n	8008cf0 <_strtod_l+0x178>
 8008d68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d6a:	1c5a      	adds	r2, r3, #1
 8008d6c:	9211      	str	r2, [sp, #68]	; 0x44
 8008d6e:	785a      	ldrb	r2, [r3, #1]
 8008d70:	3001      	adds	r0, #1
 8008d72:	2a30      	cmp	r2, #48	; 0x30
 8008d74:	d0f8      	beq.n	8008d68 <_strtod_l+0x1f0>
 8008d76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008d7a:	2b08      	cmp	r3, #8
 8008d7c:	f200 8497 	bhi.w	80096ae <_strtod_l+0xb36>
 8008d80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008d82:	930a      	str	r3, [sp, #40]	; 0x28
 8008d84:	4607      	mov	r7, r0
 8008d86:	2000      	movs	r0, #0
 8008d88:	4603      	mov	r3, r0
 8008d8a:	3a30      	subs	r2, #48	; 0x30
 8008d8c:	f100 0101 	add.w	r1, r0, #1
 8008d90:	d012      	beq.n	8008db8 <_strtod_l+0x240>
 8008d92:	440f      	add	r7, r1
 8008d94:	eb00 0c03 	add.w	ip, r0, r3
 8008d98:	4619      	mov	r1, r3
 8008d9a:	250a      	movs	r5, #10
 8008d9c:	4561      	cmp	r1, ip
 8008d9e:	d113      	bne.n	8008dc8 <_strtod_l+0x250>
 8008da0:	1819      	adds	r1, r3, r0
 8008da2:	2908      	cmp	r1, #8
 8008da4:	f103 0301 	add.w	r3, r3, #1
 8008da8:	4403      	add	r3, r0
 8008daa:	dc1c      	bgt.n	8008de6 <_strtod_l+0x26e>
 8008dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008dae:	210a      	movs	r1, #10
 8008db0:	fb01 2200 	mla	r2, r1, r0, r2
 8008db4:	9209      	str	r2, [sp, #36]	; 0x24
 8008db6:	2100      	movs	r1, #0
 8008db8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008dba:	1c50      	adds	r0, r2, #1
 8008dbc:	9011      	str	r0, [sp, #68]	; 0x44
 8008dbe:	7852      	ldrb	r2, [r2, #1]
 8008dc0:	4608      	mov	r0, r1
 8008dc2:	e7cb      	b.n	8008d5c <_strtod_l+0x1e4>
 8008dc4:	9806      	ldr	r0, [sp, #24]
 8008dc6:	e7d4      	b.n	8008d72 <_strtod_l+0x1fa>
 8008dc8:	2908      	cmp	r1, #8
 8008dca:	dc04      	bgt.n	8008dd6 <_strtod_l+0x25e>
 8008dcc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008dce:	436e      	muls	r6, r5
 8008dd0:	9609      	str	r6, [sp, #36]	; 0x24
 8008dd2:	3101      	adds	r1, #1
 8008dd4:	e7e2      	b.n	8008d9c <_strtod_l+0x224>
 8008dd6:	f101 0e01 	add.w	lr, r1, #1
 8008dda:	f1be 0f10 	cmp.w	lr, #16
 8008dde:	bfd8      	it	le
 8008de0:	fb05 fa0a 	mulle.w	sl, r5, sl
 8008de4:	e7f5      	b.n	8008dd2 <_strtod_l+0x25a>
 8008de6:	2b10      	cmp	r3, #16
 8008de8:	bfdc      	itt	le
 8008dea:	210a      	movle	r1, #10
 8008dec:	fb01 2a0a 	mlale	sl, r1, sl, r2
 8008df0:	e7e1      	b.n	8008db6 <_strtod_l+0x23e>
 8008df2:	2700      	movs	r7, #0
 8008df4:	2101      	movs	r1, #1
 8008df6:	e780      	b.n	8008cfa <_strtod_l+0x182>
 8008df8:	f04f 0e00 	mov.w	lr, #0
 8008dfc:	f10b 0202 	add.w	r2, fp, #2
 8008e00:	9211      	str	r2, [sp, #68]	; 0x44
 8008e02:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8008e06:	e789      	b.n	8008d1c <_strtod_l+0x1a4>
 8008e08:	f04f 0e01 	mov.w	lr, #1
 8008e0c:	e7f6      	b.n	8008dfc <_strtod_l+0x284>
 8008e0e:	bf00      	nop
 8008e10:	0800c5d8 	.word	0x0800c5d8
 8008e14:	0800c390 	.word	0x0800c390
 8008e18:	7ff00000 	.word	0x7ff00000
 8008e1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e1e:	1c55      	adds	r5, r2, #1
 8008e20:	9511      	str	r5, [sp, #68]	; 0x44
 8008e22:	7852      	ldrb	r2, [r2, #1]
 8008e24:	2a30      	cmp	r2, #48	; 0x30
 8008e26:	d0f9      	beq.n	8008e1c <_strtod_l+0x2a4>
 8008e28:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 8008e2c:	2d08      	cmp	r5, #8
 8008e2e:	f63f af7b 	bhi.w	8008d28 <_strtod_l+0x1b0>
 8008e32:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 8008e36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e38:	9207      	str	r2, [sp, #28]
 8008e3a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008e3c:	1c55      	adds	r5, r2, #1
 8008e3e:	9511      	str	r5, [sp, #68]	; 0x44
 8008e40:	7852      	ldrb	r2, [r2, #1]
 8008e42:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8008e46:	2e09      	cmp	r6, #9
 8008e48:	d937      	bls.n	8008eba <_strtod_l+0x342>
 8008e4a:	9e07      	ldr	r6, [sp, #28]
 8008e4c:	1bad      	subs	r5, r5, r6
 8008e4e:	2d08      	cmp	r5, #8
 8008e50:	f644 651f 	movw	r5, #19999	; 0x4e1f
 8008e54:	dc02      	bgt.n	8008e5c <_strtod_l+0x2e4>
 8008e56:	4565      	cmp	r5, ip
 8008e58:	bfa8      	it	ge
 8008e5a:	4665      	movge	r5, ip
 8008e5c:	f1be 0f00 	cmp.w	lr, #0
 8008e60:	d000      	beq.n	8008e64 <_strtod_l+0x2ec>
 8008e62:	426d      	negs	r5, r5
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d14d      	bne.n	8008f04 <_strtod_l+0x38c>
 8008e68:	9b04      	ldr	r3, [sp, #16]
 8008e6a:	4303      	orrs	r3, r0
 8008e6c:	f47f aec8 	bne.w	8008c00 <_strtod_l+0x88>
 8008e70:	2900      	cmp	r1, #0
 8008e72:	f47f aee2 	bne.w	8008c3a <_strtod_l+0xc2>
 8008e76:	2a69      	cmp	r2, #105	; 0x69
 8008e78:	d027      	beq.n	8008eca <_strtod_l+0x352>
 8008e7a:	dc24      	bgt.n	8008ec6 <_strtod_l+0x34e>
 8008e7c:	2a49      	cmp	r2, #73	; 0x49
 8008e7e:	d024      	beq.n	8008eca <_strtod_l+0x352>
 8008e80:	2a4e      	cmp	r2, #78	; 0x4e
 8008e82:	f47f aeda 	bne.w	8008c3a <_strtod_l+0xc2>
 8008e86:	4996      	ldr	r1, [pc, #600]	; (80090e0 <_strtod_l+0x568>)
 8008e88:	a811      	add	r0, sp, #68	; 0x44
 8008e8a:	f001 fd6f 	bl	800a96c <__match>
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f43f aed3 	beq.w	8008c3a <_strtod_l+0xc2>
 8008e94:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e96:	781b      	ldrb	r3, [r3, #0]
 8008e98:	2b28      	cmp	r3, #40	; 0x28
 8008e9a:	d12d      	bne.n	8008ef8 <_strtod_l+0x380>
 8008e9c:	4991      	ldr	r1, [pc, #580]	; (80090e4 <_strtod_l+0x56c>)
 8008e9e:	aa14      	add	r2, sp, #80	; 0x50
 8008ea0:	a811      	add	r0, sp, #68	; 0x44
 8008ea2:	f001 fd77 	bl	800a994 <__hexnan>
 8008ea6:	2805      	cmp	r0, #5
 8008ea8:	d126      	bne.n	8008ef8 <_strtod_l+0x380>
 8008eaa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008eac:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008eb0:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8008eb4:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8008eb8:	e6a2      	b.n	8008c00 <_strtod_l+0x88>
 8008eba:	250a      	movs	r5, #10
 8008ebc:	fb05 250c 	mla	r5, r5, ip, r2
 8008ec0:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 8008ec4:	e7b9      	b.n	8008e3a <_strtod_l+0x2c2>
 8008ec6:	2a6e      	cmp	r2, #110	; 0x6e
 8008ec8:	e7db      	b.n	8008e82 <_strtod_l+0x30a>
 8008eca:	4987      	ldr	r1, [pc, #540]	; (80090e8 <_strtod_l+0x570>)
 8008ecc:	a811      	add	r0, sp, #68	; 0x44
 8008ece:	f001 fd4d 	bl	800a96c <__match>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f43f aeb1 	beq.w	8008c3a <_strtod_l+0xc2>
 8008ed8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eda:	4984      	ldr	r1, [pc, #528]	; (80090ec <_strtod_l+0x574>)
 8008edc:	3b01      	subs	r3, #1
 8008ede:	a811      	add	r0, sp, #68	; 0x44
 8008ee0:	9311      	str	r3, [sp, #68]	; 0x44
 8008ee2:	f001 fd43 	bl	800a96c <__match>
 8008ee6:	b910      	cbnz	r0, 8008eee <_strtod_l+0x376>
 8008ee8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008eea:	3301      	adds	r3, #1
 8008eec:	9311      	str	r3, [sp, #68]	; 0x44
 8008eee:	f8df 9210 	ldr.w	r9, [pc, #528]	; 8009100 <_strtod_l+0x588>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	e683      	b.n	8008c00 <_strtod_l+0x88>
 8008ef8:	487d      	ldr	r0, [pc, #500]	; (80090f0 <_strtod_l+0x578>)
 8008efa:	f002 fc39 	bl	800b770 <nan>
 8008efe:	ec59 8b10 	vmov	r8, r9, d0
 8008f02:	e67d      	b.n	8008c00 <_strtod_l+0x88>
 8008f04:	1bea      	subs	r2, r5, r7
 8008f06:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 8008f0a:	9207      	str	r2, [sp, #28]
 8008f0c:	9a06      	ldr	r2, [sp, #24]
 8008f0e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008f12:	2a00      	cmp	r2, #0
 8008f14:	bf08      	it	eq
 8008f16:	461a      	moveq	r2, r3
 8008f18:	2b10      	cmp	r3, #16
 8008f1a:	9206      	str	r2, [sp, #24]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	bfa8      	it	ge
 8008f20:	2210      	movge	r2, #16
 8008f22:	2b09      	cmp	r3, #9
 8008f24:	ec59 8b17 	vmov	r8, r9, d7
 8008f28:	dd0c      	ble.n	8008f44 <_strtod_l+0x3cc>
 8008f2a:	4972      	ldr	r1, [pc, #456]	; (80090f4 <_strtod_l+0x57c>)
 8008f2c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008f30:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 8008f34:	ee06 aa90 	vmov	s13, sl
 8008f38:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008f3c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008f40:	ec59 8b16 	vmov	r8, r9, d6
 8008f44:	2b0f      	cmp	r3, #15
 8008f46:	dc36      	bgt.n	8008fb6 <_strtod_l+0x43e>
 8008f48:	9907      	ldr	r1, [sp, #28]
 8008f4a:	2900      	cmp	r1, #0
 8008f4c:	f43f ae58 	beq.w	8008c00 <_strtod_l+0x88>
 8008f50:	dd23      	ble.n	8008f9a <_strtod_l+0x422>
 8008f52:	2916      	cmp	r1, #22
 8008f54:	dc0b      	bgt.n	8008f6e <_strtod_l+0x3f6>
 8008f56:	4b67      	ldr	r3, [pc, #412]	; (80090f4 <_strtod_l+0x57c>)
 8008f58:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8008f5c:	ed93 7b00 	vldr	d7, [r3]
 8008f60:	ec49 8b16 	vmov	d6, r8, r9
 8008f64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f68:	ec59 8b17 	vmov	r8, r9, d7
 8008f6c:	e648      	b.n	8008c00 <_strtod_l+0x88>
 8008f6e:	9807      	ldr	r0, [sp, #28]
 8008f70:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 8008f74:	4281      	cmp	r1, r0
 8008f76:	db1e      	blt.n	8008fb6 <_strtod_l+0x43e>
 8008f78:	4a5e      	ldr	r2, [pc, #376]	; (80090f4 <_strtod_l+0x57c>)
 8008f7a:	f1c3 030f 	rsb	r3, r3, #15
 8008f7e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008f82:	ed91 7b00 	vldr	d7, [r1]
 8008f86:	ec49 8b16 	vmov	d6, r8, r9
 8008f8a:	1ac3      	subs	r3, r0, r3
 8008f8c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008f90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f94:	ed92 6b00 	vldr	d6, [r2]
 8008f98:	e7e4      	b.n	8008f64 <_strtod_l+0x3ec>
 8008f9a:	9907      	ldr	r1, [sp, #28]
 8008f9c:	3116      	adds	r1, #22
 8008f9e:	db0a      	blt.n	8008fb6 <_strtod_l+0x43e>
 8008fa0:	4b54      	ldr	r3, [pc, #336]	; (80090f4 <_strtod_l+0x57c>)
 8008fa2:	1b7d      	subs	r5, r7, r5
 8008fa4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008fa8:	ed95 7b00 	vldr	d7, [r5]
 8008fac:	ec49 8b16 	vmov	d6, r8, r9
 8008fb0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008fb4:	e7d8      	b.n	8008f68 <_strtod_l+0x3f0>
 8008fb6:	9907      	ldr	r1, [sp, #28]
 8008fb8:	1a9a      	subs	r2, r3, r2
 8008fba:	440a      	add	r2, r1
 8008fbc:	2a00      	cmp	r2, #0
 8008fbe:	dd6f      	ble.n	80090a0 <_strtod_l+0x528>
 8008fc0:	f012 000f 	ands.w	r0, r2, #15
 8008fc4:	d00a      	beq.n	8008fdc <_strtod_l+0x464>
 8008fc6:	494b      	ldr	r1, [pc, #300]	; (80090f4 <_strtod_l+0x57c>)
 8008fc8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008fcc:	ed91 7b00 	vldr	d7, [r1]
 8008fd0:	ec49 8b16 	vmov	d6, r8, r9
 8008fd4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fd8:	ec59 8b17 	vmov	r8, r9, d7
 8008fdc:	f032 020f 	bics.w	r2, r2, #15
 8008fe0:	d04f      	beq.n	8009082 <_strtod_l+0x50a>
 8008fe2:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8008fe6:	dd22      	ble.n	800902e <_strtod_l+0x4b6>
 8008fe8:	2500      	movs	r5, #0
 8008fea:	462e      	mov	r6, r5
 8008fec:	9506      	str	r5, [sp, #24]
 8008fee:	462f      	mov	r7, r5
 8008ff0:	2322      	movs	r3, #34	; 0x22
 8008ff2:	f8df 910c 	ldr.w	r9, [pc, #268]	; 8009100 <_strtod_l+0x588>
 8008ff6:	6023      	str	r3, [r4, #0]
 8008ff8:	f04f 0800 	mov.w	r8, #0
 8008ffc:	9b06      	ldr	r3, [sp, #24]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f43f adfe 	beq.w	8008c00 <_strtod_l+0x88>
 8009004:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009006:	4620      	mov	r0, r4
 8009008:	f001 fdc2 	bl	800ab90 <_Bfree>
 800900c:	4639      	mov	r1, r7
 800900e:	4620      	mov	r0, r4
 8009010:	f001 fdbe 	bl	800ab90 <_Bfree>
 8009014:	4631      	mov	r1, r6
 8009016:	4620      	mov	r0, r4
 8009018:	f001 fdba 	bl	800ab90 <_Bfree>
 800901c:	9906      	ldr	r1, [sp, #24]
 800901e:	4620      	mov	r0, r4
 8009020:	f001 fdb6 	bl	800ab90 <_Bfree>
 8009024:	4629      	mov	r1, r5
 8009026:	4620      	mov	r0, r4
 8009028:	f001 fdb2 	bl	800ab90 <_Bfree>
 800902c:	e5e8      	b.n	8008c00 <_strtod_l+0x88>
 800902e:	2000      	movs	r0, #0
 8009030:	ec49 8b17 	vmov	d7, r8, r9
 8009034:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80090f8 <_strtod_l+0x580>
 8009038:	1112      	asrs	r2, r2, #4
 800903a:	4601      	mov	r1, r0
 800903c:	2a01      	cmp	r2, #1
 800903e:	dc23      	bgt.n	8009088 <_strtod_l+0x510>
 8009040:	b108      	cbz	r0, 8009046 <_strtod_l+0x4ce>
 8009042:	ec59 8b17 	vmov	r8, r9, d7
 8009046:	4a2c      	ldr	r2, [pc, #176]	; (80090f8 <_strtod_l+0x580>)
 8009048:	482c      	ldr	r0, [pc, #176]	; (80090fc <_strtod_l+0x584>)
 800904a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800904e:	ed92 7b00 	vldr	d7, [r2]
 8009052:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009056:	ec49 8b16 	vmov	d6, r8, r9
 800905a:	4a29      	ldr	r2, [pc, #164]	; (8009100 <_strtod_l+0x588>)
 800905c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009060:	ee17 1a90 	vmov	r1, s15
 8009064:	400a      	ands	r2, r1
 8009066:	4282      	cmp	r2, r0
 8009068:	ec59 8b17 	vmov	r8, r9, d7
 800906c:	d8bc      	bhi.n	8008fe8 <_strtod_l+0x470>
 800906e:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 8009072:	4282      	cmp	r2, r0
 8009074:	bf86      	itte	hi
 8009076:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8009104 <_strtod_l+0x58c>
 800907a:	f04f 38ff 	movhi.w	r8, #4294967295
 800907e:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 8009082:	2200      	movs	r2, #0
 8009084:	9204      	str	r2, [sp, #16]
 8009086:	e078      	b.n	800917a <_strtod_l+0x602>
 8009088:	07d6      	lsls	r6, r2, #31
 800908a:	d504      	bpl.n	8009096 <_strtod_l+0x51e>
 800908c:	ed9c 6b00 	vldr	d6, [ip]
 8009090:	2001      	movs	r0, #1
 8009092:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009096:	3101      	adds	r1, #1
 8009098:	1052      	asrs	r2, r2, #1
 800909a:	f10c 0c08 	add.w	ip, ip, #8
 800909e:	e7cd      	b.n	800903c <_strtod_l+0x4c4>
 80090a0:	d0ef      	beq.n	8009082 <_strtod_l+0x50a>
 80090a2:	4252      	negs	r2, r2
 80090a4:	f012 000f 	ands.w	r0, r2, #15
 80090a8:	d00a      	beq.n	80090c0 <_strtod_l+0x548>
 80090aa:	4912      	ldr	r1, [pc, #72]	; (80090f4 <_strtod_l+0x57c>)
 80090ac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80090b0:	ed91 7b00 	vldr	d7, [r1]
 80090b4:	ec49 8b16 	vmov	d6, r8, r9
 80090b8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80090bc:	ec59 8b17 	vmov	r8, r9, d7
 80090c0:	1112      	asrs	r2, r2, #4
 80090c2:	d0de      	beq.n	8009082 <_strtod_l+0x50a>
 80090c4:	2a1f      	cmp	r2, #31
 80090c6:	dd1f      	ble.n	8009108 <_strtod_l+0x590>
 80090c8:	2500      	movs	r5, #0
 80090ca:	462e      	mov	r6, r5
 80090cc:	9506      	str	r5, [sp, #24]
 80090ce:	462f      	mov	r7, r5
 80090d0:	2322      	movs	r3, #34	; 0x22
 80090d2:	f04f 0800 	mov.w	r8, #0
 80090d6:	f04f 0900 	mov.w	r9, #0
 80090da:	6023      	str	r3, [r4, #0]
 80090dc:	e78e      	b.n	8008ffc <_strtod_l+0x484>
 80090de:	bf00      	nop
 80090e0:	0800c361 	.word	0x0800c361
 80090e4:	0800c3a4 	.word	0x0800c3a4
 80090e8:	0800c359 	.word	0x0800c359
 80090ec:	0800c4e4 	.word	0x0800c4e4
 80090f0:	0800c790 	.word	0x0800c790
 80090f4:	0800c670 	.word	0x0800c670
 80090f8:	0800c648 	.word	0x0800c648
 80090fc:	7ca00000 	.word	0x7ca00000
 8009100:	7ff00000 	.word	0x7ff00000
 8009104:	7fefffff 	.word	0x7fefffff
 8009108:	f012 0110 	ands.w	r1, r2, #16
 800910c:	bf18      	it	ne
 800910e:	216a      	movne	r1, #106	; 0x6a
 8009110:	9104      	str	r1, [sp, #16]
 8009112:	ec49 8b17 	vmov	d7, r8, r9
 8009116:	49be      	ldr	r1, [pc, #760]	; (8009410 <_strtod_l+0x898>)
 8009118:	2000      	movs	r0, #0
 800911a:	07d6      	lsls	r6, r2, #31
 800911c:	d504      	bpl.n	8009128 <_strtod_l+0x5b0>
 800911e:	ed91 6b00 	vldr	d6, [r1]
 8009122:	2001      	movs	r0, #1
 8009124:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009128:	1052      	asrs	r2, r2, #1
 800912a:	f101 0108 	add.w	r1, r1, #8
 800912e:	d1f4      	bne.n	800911a <_strtod_l+0x5a2>
 8009130:	b108      	cbz	r0, 8009136 <_strtod_l+0x5be>
 8009132:	ec59 8b17 	vmov	r8, r9, d7
 8009136:	9a04      	ldr	r2, [sp, #16]
 8009138:	b1c2      	cbz	r2, 800916c <_strtod_l+0x5f4>
 800913a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800913e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 8009142:	2a00      	cmp	r2, #0
 8009144:	4648      	mov	r0, r9
 8009146:	dd11      	ble.n	800916c <_strtod_l+0x5f4>
 8009148:	2a1f      	cmp	r2, #31
 800914a:	f340 812e 	ble.w	80093aa <_strtod_l+0x832>
 800914e:	2a34      	cmp	r2, #52	; 0x34
 8009150:	bfde      	ittt	le
 8009152:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 8009156:	f04f 32ff 	movle.w	r2, #4294967295
 800915a:	fa02 f101 	lslle.w	r1, r2, r1
 800915e:	f04f 0800 	mov.w	r8, #0
 8009162:	bfcc      	ite	gt
 8009164:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009168:	ea01 0900 	andle.w	r9, r1, r0
 800916c:	ec49 8b17 	vmov	d7, r8, r9
 8009170:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009178:	d0a6      	beq.n	80090c8 <_strtod_l+0x550>
 800917a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800917c:	9200      	str	r2, [sp, #0]
 800917e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009180:	9a06      	ldr	r2, [sp, #24]
 8009182:	4620      	mov	r0, r4
 8009184:	f001 fd6c 	bl	800ac60 <__s2b>
 8009188:	9006      	str	r0, [sp, #24]
 800918a:	2800      	cmp	r0, #0
 800918c:	f43f af2c 	beq.w	8008fe8 <_strtod_l+0x470>
 8009190:	9b07      	ldr	r3, [sp, #28]
 8009192:	1b7d      	subs	r5, r7, r5
 8009194:	2b00      	cmp	r3, #0
 8009196:	bfb4      	ite	lt
 8009198:	462b      	movlt	r3, r5
 800919a:	2300      	movge	r3, #0
 800919c:	9309      	str	r3, [sp, #36]	; 0x24
 800919e:	9b07      	ldr	r3, [sp, #28]
 80091a0:	ed9f 9b93 	vldr	d9, [pc, #588]	; 80093f0 <_strtod_l+0x878>
 80091a4:	ed9f ab94 	vldr	d10, [pc, #592]	; 80093f8 <_strtod_l+0x880>
 80091a8:	ed9f bb95 	vldr	d11, [pc, #596]	; 8009400 <_strtod_l+0x888>
 80091ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80091b0:	2500      	movs	r5, #0
 80091b2:	930c      	str	r3, [sp, #48]	; 0x30
 80091b4:	462e      	mov	r6, r5
 80091b6:	9b06      	ldr	r3, [sp, #24]
 80091b8:	4620      	mov	r0, r4
 80091ba:	6859      	ldr	r1, [r3, #4]
 80091bc:	f001 fca8 	bl	800ab10 <_Balloc>
 80091c0:	4607      	mov	r7, r0
 80091c2:	2800      	cmp	r0, #0
 80091c4:	f43f af14 	beq.w	8008ff0 <_strtod_l+0x478>
 80091c8:	9b06      	ldr	r3, [sp, #24]
 80091ca:	691a      	ldr	r2, [r3, #16]
 80091cc:	3202      	adds	r2, #2
 80091ce:	f103 010c 	add.w	r1, r3, #12
 80091d2:	0092      	lsls	r2, r2, #2
 80091d4:	300c      	adds	r0, #12
 80091d6:	f7fe fd3f 	bl	8007c58 <memcpy>
 80091da:	ec49 8b10 	vmov	d0, r8, r9
 80091de:	aa14      	add	r2, sp, #80	; 0x50
 80091e0:	a913      	add	r1, sp, #76	; 0x4c
 80091e2:	4620      	mov	r0, r4
 80091e4:	f002 f882 	bl	800b2ec <__d2b>
 80091e8:	ec49 8b18 	vmov	d8, r8, r9
 80091ec:	9012      	str	r0, [sp, #72]	; 0x48
 80091ee:	2800      	cmp	r0, #0
 80091f0:	f43f aefe 	beq.w	8008ff0 <_strtod_l+0x478>
 80091f4:	2101      	movs	r1, #1
 80091f6:	4620      	mov	r0, r4
 80091f8:	f001 fdcc 	bl	800ad94 <__i2b>
 80091fc:	4606      	mov	r6, r0
 80091fe:	2800      	cmp	r0, #0
 8009200:	f43f aef6 	beq.w	8008ff0 <_strtod_l+0x478>
 8009204:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009206:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009208:	2b00      	cmp	r3, #0
 800920a:	bfab      	itete	ge
 800920c:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800920e:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 8009210:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 8009214:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 8009218:	bfac      	ite	ge
 800921a:	eb03 0b02 	addge.w	fp, r3, r2
 800921e:	eba2 0a03 	sublt.w	sl, r2, r3
 8009222:	9a04      	ldr	r2, [sp, #16]
 8009224:	1a9b      	subs	r3, r3, r2
 8009226:	440b      	add	r3, r1
 8009228:	4a7a      	ldr	r2, [pc, #488]	; (8009414 <_strtod_l+0x89c>)
 800922a:	3b01      	subs	r3, #1
 800922c:	4293      	cmp	r3, r2
 800922e:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 8009232:	f280 80cd 	bge.w	80093d0 <_strtod_l+0x858>
 8009236:	1ad2      	subs	r2, r2, r3
 8009238:	2a1f      	cmp	r2, #31
 800923a:	eba1 0102 	sub.w	r1, r1, r2
 800923e:	f04f 0001 	mov.w	r0, #1
 8009242:	f300 80b9 	bgt.w	80093b8 <_strtod_l+0x840>
 8009246:	fa00 f302 	lsl.w	r3, r0, r2
 800924a:	930b      	str	r3, [sp, #44]	; 0x2c
 800924c:	2300      	movs	r3, #0
 800924e:	930a      	str	r3, [sp, #40]	; 0x28
 8009250:	eb0b 0301 	add.w	r3, fp, r1
 8009254:	9a04      	ldr	r2, [sp, #16]
 8009256:	459b      	cmp	fp, r3
 8009258:	448a      	add	sl, r1
 800925a:	4492      	add	sl, r2
 800925c:	465a      	mov	r2, fp
 800925e:	bfa8      	it	ge
 8009260:	461a      	movge	r2, r3
 8009262:	4552      	cmp	r2, sl
 8009264:	bfa8      	it	ge
 8009266:	4652      	movge	r2, sl
 8009268:	2a00      	cmp	r2, #0
 800926a:	bfc2      	ittt	gt
 800926c:	1a9b      	subgt	r3, r3, r2
 800926e:	ebaa 0a02 	subgt.w	sl, sl, r2
 8009272:	ebab 0b02 	subgt.w	fp, fp, r2
 8009276:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009278:	2a00      	cmp	r2, #0
 800927a:	dd18      	ble.n	80092ae <_strtod_l+0x736>
 800927c:	4631      	mov	r1, r6
 800927e:	4620      	mov	r0, r4
 8009280:	930f      	str	r3, [sp, #60]	; 0x3c
 8009282:	f001 fe47 	bl	800af14 <__pow5mult>
 8009286:	4606      	mov	r6, r0
 8009288:	2800      	cmp	r0, #0
 800928a:	f43f aeb1 	beq.w	8008ff0 <_strtod_l+0x478>
 800928e:	4601      	mov	r1, r0
 8009290:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009292:	4620      	mov	r0, r4
 8009294:	f001 fd94 	bl	800adc0 <__multiply>
 8009298:	900e      	str	r0, [sp, #56]	; 0x38
 800929a:	2800      	cmp	r0, #0
 800929c:	f43f aea8 	beq.w	8008ff0 <_strtod_l+0x478>
 80092a0:	9912      	ldr	r1, [sp, #72]	; 0x48
 80092a2:	4620      	mov	r0, r4
 80092a4:	f001 fc74 	bl	800ab90 <_Bfree>
 80092a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092ac:	9212      	str	r2, [sp, #72]	; 0x48
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f300 8093 	bgt.w	80093da <_strtod_l+0x862>
 80092b4:	9b07      	ldr	r3, [sp, #28]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	dd08      	ble.n	80092cc <_strtod_l+0x754>
 80092ba:	4639      	mov	r1, r7
 80092bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80092be:	4620      	mov	r0, r4
 80092c0:	f001 fe28 	bl	800af14 <__pow5mult>
 80092c4:	4607      	mov	r7, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f ae92 	beq.w	8008ff0 <_strtod_l+0x478>
 80092cc:	f1ba 0f00 	cmp.w	sl, #0
 80092d0:	dd08      	ble.n	80092e4 <_strtod_l+0x76c>
 80092d2:	4639      	mov	r1, r7
 80092d4:	4652      	mov	r2, sl
 80092d6:	4620      	mov	r0, r4
 80092d8:	f001 fe76 	bl	800afc8 <__lshift>
 80092dc:	4607      	mov	r7, r0
 80092de:	2800      	cmp	r0, #0
 80092e0:	f43f ae86 	beq.w	8008ff0 <_strtod_l+0x478>
 80092e4:	f1bb 0f00 	cmp.w	fp, #0
 80092e8:	dd08      	ble.n	80092fc <_strtod_l+0x784>
 80092ea:	4631      	mov	r1, r6
 80092ec:	465a      	mov	r2, fp
 80092ee:	4620      	mov	r0, r4
 80092f0:	f001 fe6a 	bl	800afc8 <__lshift>
 80092f4:	4606      	mov	r6, r0
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f43f ae7a 	beq.w	8008ff0 <_strtod_l+0x478>
 80092fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80092fe:	463a      	mov	r2, r7
 8009300:	4620      	mov	r0, r4
 8009302:	f001 feed 	bl	800b0e0 <__mdiff>
 8009306:	4605      	mov	r5, r0
 8009308:	2800      	cmp	r0, #0
 800930a:	f43f ae71 	beq.w	8008ff0 <_strtod_l+0x478>
 800930e:	2300      	movs	r3, #0
 8009310:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 8009314:	60c3      	str	r3, [r0, #12]
 8009316:	4631      	mov	r1, r6
 8009318:	f001 fec6 	bl	800b0a8 <__mcmp>
 800931c:	2800      	cmp	r0, #0
 800931e:	da7d      	bge.n	800941c <_strtod_l+0x8a4>
 8009320:	ea5a 0308 	orrs.w	r3, sl, r8
 8009324:	f040 80a3 	bne.w	800946e <_strtod_l+0x8f6>
 8009328:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800932c:	2b00      	cmp	r3, #0
 800932e:	f040 809e 	bne.w	800946e <_strtod_l+0x8f6>
 8009332:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009336:	0d1b      	lsrs	r3, r3, #20
 8009338:	051b      	lsls	r3, r3, #20
 800933a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800933e:	f240 8096 	bls.w	800946e <_strtod_l+0x8f6>
 8009342:	696b      	ldr	r3, [r5, #20]
 8009344:	b91b      	cbnz	r3, 800934e <_strtod_l+0x7d6>
 8009346:	692b      	ldr	r3, [r5, #16]
 8009348:	2b01      	cmp	r3, #1
 800934a:	f340 8090 	ble.w	800946e <_strtod_l+0x8f6>
 800934e:	4629      	mov	r1, r5
 8009350:	2201      	movs	r2, #1
 8009352:	4620      	mov	r0, r4
 8009354:	f001 fe38 	bl	800afc8 <__lshift>
 8009358:	4631      	mov	r1, r6
 800935a:	4605      	mov	r5, r0
 800935c:	f001 fea4 	bl	800b0a8 <__mcmp>
 8009360:	2800      	cmp	r0, #0
 8009362:	f340 8084 	ble.w	800946e <_strtod_l+0x8f6>
 8009366:	9904      	ldr	r1, [sp, #16]
 8009368:	4a2b      	ldr	r2, [pc, #172]	; (8009418 <_strtod_l+0x8a0>)
 800936a:	464b      	mov	r3, r9
 800936c:	2900      	cmp	r1, #0
 800936e:	f000 809d 	beq.w	80094ac <_strtod_l+0x934>
 8009372:	ea02 0109 	and.w	r1, r2, r9
 8009376:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800937a:	f300 8097 	bgt.w	80094ac <_strtod_l+0x934>
 800937e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009382:	f77f aea5 	ble.w	80090d0 <_strtod_l+0x558>
 8009386:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009408 <_strtod_l+0x890>
 800938a:	ec49 8b16 	vmov	d6, r8, r9
 800938e:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009392:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009396:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800939a:	4313      	orrs	r3, r2
 800939c:	bf08      	it	eq
 800939e:	2322      	moveq	r3, #34	; 0x22
 80093a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80093a4:	bf08      	it	eq
 80093a6:	6023      	streq	r3, [r4, #0]
 80093a8:	e62c      	b.n	8009004 <_strtod_l+0x48c>
 80093aa:	f04f 31ff 	mov.w	r1, #4294967295
 80093ae:	fa01 f202 	lsl.w	r2, r1, r2
 80093b2:	ea02 0808 	and.w	r8, r2, r8
 80093b6:	e6d9      	b.n	800916c <_strtod_l+0x5f4>
 80093b8:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80093bc:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80093c0:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80093c4:	33e2      	adds	r3, #226	; 0xe2
 80093c6:	fa00 f303 	lsl.w	r3, r0, r3
 80093ca:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 80093ce:	e73f      	b.n	8009250 <_strtod_l+0x6d8>
 80093d0:	2200      	movs	r2, #0
 80093d2:	2301      	movs	r3, #1
 80093d4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80093d8:	e73a      	b.n	8009250 <_strtod_l+0x6d8>
 80093da:	9912      	ldr	r1, [sp, #72]	; 0x48
 80093dc:	461a      	mov	r2, r3
 80093de:	4620      	mov	r0, r4
 80093e0:	f001 fdf2 	bl	800afc8 <__lshift>
 80093e4:	9012      	str	r0, [sp, #72]	; 0x48
 80093e6:	2800      	cmp	r0, #0
 80093e8:	f47f af64 	bne.w	80092b4 <_strtod_l+0x73c>
 80093ec:	e600      	b.n	8008ff0 <_strtod_l+0x478>
 80093ee:	bf00      	nop
 80093f0:	94a03595 	.word	0x94a03595
 80093f4:	3fcfffff 	.word	0x3fcfffff
 80093f8:	94a03595 	.word	0x94a03595
 80093fc:	3fdfffff 	.word	0x3fdfffff
 8009400:	35afe535 	.word	0x35afe535
 8009404:	3fe00000 	.word	0x3fe00000
 8009408:	00000000 	.word	0x00000000
 800940c:	39500000 	.word	0x39500000
 8009410:	0800c3b8 	.word	0x0800c3b8
 8009414:	fffffc02 	.word	0xfffffc02
 8009418:	7ff00000 	.word	0x7ff00000
 800941c:	46cb      	mov	fp, r9
 800941e:	d15f      	bne.n	80094e0 <_strtod_l+0x968>
 8009420:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009424:	f1ba 0f00 	cmp.w	sl, #0
 8009428:	d02a      	beq.n	8009480 <_strtod_l+0x908>
 800942a:	4aa7      	ldr	r2, [pc, #668]	; (80096c8 <_strtod_l+0xb50>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d12b      	bne.n	8009488 <_strtod_l+0x910>
 8009430:	9b04      	ldr	r3, [sp, #16]
 8009432:	4642      	mov	r2, r8
 8009434:	b1fb      	cbz	r3, 8009476 <_strtod_l+0x8fe>
 8009436:	4ba5      	ldr	r3, [pc, #660]	; (80096cc <_strtod_l+0xb54>)
 8009438:	ea09 0303 	and.w	r3, r9, r3
 800943c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009440:	f04f 31ff 	mov.w	r1, #4294967295
 8009444:	d81a      	bhi.n	800947c <_strtod_l+0x904>
 8009446:	0d1b      	lsrs	r3, r3, #20
 8009448:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800944c:	fa01 f303 	lsl.w	r3, r1, r3
 8009450:	429a      	cmp	r2, r3
 8009452:	d119      	bne.n	8009488 <_strtod_l+0x910>
 8009454:	4b9e      	ldr	r3, [pc, #632]	; (80096d0 <_strtod_l+0xb58>)
 8009456:	459b      	cmp	fp, r3
 8009458:	d102      	bne.n	8009460 <_strtod_l+0x8e8>
 800945a:	3201      	adds	r2, #1
 800945c:	f43f adc8 	beq.w	8008ff0 <_strtod_l+0x478>
 8009460:	4b9a      	ldr	r3, [pc, #616]	; (80096cc <_strtod_l+0xb54>)
 8009462:	ea0b 0303 	and.w	r3, fp, r3
 8009466:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800946a:	f04f 0800 	mov.w	r8, #0
 800946e:	9b04      	ldr	r3, [sp, #16]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d188      	bne.n	8009386 <_strtod_l+0x80e>
 8009474:	e5c6      	b.n	8009004 <_strtod_l+0x48c>
 8009476:	f04f 33ff 	mov.w	r3, #4294967295
 800947a:	e7e9      	b.n	8009450 <_strtod_l+0x8d8>
 800947c:	460b      	mov	r3, r1
 800947e:	e7e7      	b.n	8009450 <_strtod_l+0x8d8>
 8009480:	ea53 0308 	orrs.w	r3, r3, r8
 8009484:	f43f af6f 	beq.w	8009366 <_strtod_l+0x7ee>
 8009488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948a:	b1cb      	cbz	r3, 80094c0 <_strtod_l+0x948>
 800948c:	ea13 0f0b 	tst.w	r3, fp
 8009490:	d0ed      	beq.n	800946e <_strtod_l+0x8f6>
 8009492:	9a04      	ldr	r2, [sp, #16]
 8009494:	4640      	mov	r0, r8
 8009496:	4649      	mov	r1, r9
 8009498:	f1ba 0f00 	cmp.w	sl, #0
 800949c:	d014      	beq.n	80094c8 <_strtod_l+0x950>
 800949e:	f7ff fb51 	bl	8008b44 <sulp>
 80094a2:	ee38 7b00 	vadd.f64	d7, d8, d0
 80094a6:	ec59 8b17 	vmov	r8, r9, d7
 80094aa:	e7e0      	b.n	800946e <_strtod_l+0x8f6>
 80094ac:	4013      	ands	r3, r2
 80094ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80094b2:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80094b6:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80094ba:	f04f 38ff 	mov.w	r8, #4294967295
 80094be:	e7d6      	b.n	800946e <_strtod_l+0x8f6>
 80094c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80094c2:	ea13 0f08 	tst.w	r3, r8
 80094c6:	e7e3      	b.n	8009490 <_strtod_l+0x918>
 80094c8:	f7ff fb3c 	bl	8008b44 <sulp>
 80094cc:	ee38 0b40 	vsub.f64	d0, d8, d0
 80094d0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80094d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d8:	ec59 8b10 	vmov	r8, r9, d0
 80094dc:	d1c7      	bne.n	800946e <_strtod_l+0x8f6>
 80094de:	e5f7      	b.n	80090d0 <_strtod_l+0x558>
 80094e0:	4631      	mov	r1, r6
 80094e2:	4628      	mov	r0, r5
 80094e4:	f001 ff5e 	bl	800b3a4 <__ratio>
 80094e8:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 80094ec:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80094f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094f4:	d865      	bhi.n	80095c2 <_strtod_l+0xa4a>
 80094f6:	f1ba 0f00 	cmp.w	sl, #0
 80094fa:	d042      	beq.n	8009582 <_strtod_l+0xa0a>
 80094fc:	4b75      	ldr	r3, [pc, #468]	; (80096d4 <_strtod_l+0xb5c>)
 80094fe:	2200      	movs	r2, #0
 8009500:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 8009504:	4871      	ldr	r0, [pc, #452]	; (80096cc <_strtod_l+0xb54>)
 8009506:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 80096e0 <_strtod_l+0xb68>
 800950a:	ea0b 0100 	and.w	r1, fp, r0
 800950e:	4561      	cmp	r1, ip
 8009510:	f040 808e 	bne.w	8009630 <_strtod_l+0xab8>
 8009514:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 8009518:	ec49 8b10 	vmov	d0, r8, r9
 800951c:	ec43 2b1c 	vmov	d12, r2, r3
 8009520:	910a      	str	r1, [sp, #40]	; 0x28
 8009522:	f001 fe67 	bl	800b1f4 <__ulp>
 8009526:	ec49 8b1e 	vmov	d14, r8, r9
 800952a:	4868      	ldr	r0, [pc, #416]	; (80096cc <_strtod_l+0xb54>)
 800952c:	eeac eb00 	vfma.f64	d14, d12, d0
 8009530:	ee1e 3a90 	vmov	r3, s29
 8009534:	4a68      	ldr	r2, [pc, #416]	; (80096d8 <_strtod_l+0xb60>)
 8009536:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009538:	4018      	ands	r0, r3
 800953a:	4290      	cmp	r0, r2
 800953c:	ec59 8b1e 	vmov	r8, r9, d14
 8009540:	d94e      	bls.n	80095e0 <_strtod_l+0xa68>
 8009542:	ee18 3a90 	vmov	r3, s17
 8009546:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800954a:	4293      	cmp	r3, r2
 800954c:	d104      	bne.n	8009558 <_strtod_l+0x9e0>
 800954e:	ee18 3a10 	vmov	r3, s16
 8009552:	3301      	adds	r3, #1
 8009554:	f43f ad4c 	beq.w	8008ff0 <_strtod_l+0x478>
 8009558:	f8df 9174 	ldr.w	r9, [pc, #372]	; 80096d0 <_strtod_l+0xb58>
 800955c:	f04f 38ff 	mov.w	r8, #4294967295
 8009560:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009562:	4620      	mov	r0, r4
 8009564:	f001 fb14 	bl	800ab90 <_Bfree>
 8009568:	4639      	mov	r1, r7
 800956a:	4620      	mov	r0, r4
 800956c:	f001 fb10 	bl	800ab90 <_Bfree>
 8009570:	4631      	mov	r1, r6
 8009572:	4620      	mov	r0, r4
 8009574:	f001 fb0c 	bl	800ab90 <_Bfree>
 8009578:	4629      	mov	r1, r5
 800957a:	4620      	mov	r0, r4
 800957c:	f001 fb08 	bl	800ab90 <_Bfree>
 8009580:	e619      	b.n	80091b6 <_strtod_l+0x63e>
 8009582:	f1b8 0f00 	cmp.w	r8, #0
 8009586:	d112      	bne.n	80095ae <_strtod_l+0xa36>
 8009588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800958c:	b9b3      	cbnz	r3, 80095bc <_strtod_l+0xa44>
 800958e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8009592:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8009596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800959e:	bf58      	it	pl
 80095a0:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 80095a4:	eeb1 7b4d 	vneg.f64	d7, d13
 80095a8:	ec53 2b17 	vmov	r2, r3, d7
 80095ac:	e7aa      	b.n	8009504 <_strtod_l+0x98c>
 80095ae:	f1b8 0f01 	cmp.w	r8, #1
 80095b2:	d103      	bne.n	80095bc <_strtod_l+0xa44>
 80095b4:	f1b9 0f00 	cmp.w	r9, #0
 80095b8:	f43f ad8a 	beq.w	80090d0 <_strtod_l+0x558>
 80095bc:	4b47      	ldr	r3, [pc, #284]	; (80096dc <_strtod_l+0xb64>)
 80095be:	2200      	movs	r2, #0
 80095c0:	e79e      	b.n	8009500 <_strtod_l+0x988>
 80095c2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 80095c6:	ee20 db0d 	vmul.f64	d13, d0, d13
 80095ca:	f1ba 0f00 	cmp.w	sl, #0
 80095ce:	d104      	bne.n	80095da <_strtod_l+0xa62>
 80095d0:	eeb1 7b4d 	vneg.f64	d7, d13
 80095d4:	ec53 2b17 	vmov	r2, r3, d7
 80095d8:	e794      	b.n	8009504 <_strtod_l+0x98c>
 80095da:	eeb0 7b4d 	vmov.f64	d7, d13
 80095de:	e7f9      	b.n	80095d4 <_strtod_l+0xa5c>
 80095e0:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 80095e4:	9b04      	ldr	r3, [sp, #16]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1ba      	bne.n	8009560 <_strtod_l+0x9e8>
 80095ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80095ee:	0d1b      	lsrs	r3, r3, #20
 80095f0:	051b      	lsls	r3, r3, #20
 80095f2:	4299      	cmp	r1, r3
 80095f4:	d1b4      	bne.n	8009560 <_strtod_l+0x9e8>
 80095f6:	ec51 0b1d 	vmov	r0, r1, d13
 80095fa:	f7f7 f84d 	bl	8000698 <__aeabi_d2lz>
 80095fe:	f7f7 f805 	bl	800060c <__aeabi_l2d>
 8009602:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009606:	ec41 0b17 	vmov	d7, r0, r1
 800960a:	ea43 0308 	orr.w	r3, r3, r8
 800960e:	ea53 030a 	orrs.w	r3, r3, sl
 8009612:	ee3d db47 	vsub.f64	d13, d13, d7
 8009616:	d03c      	beq.n	8009692 <_strtod_l+0xb1a>
 8009618:	eeb4 dbca 	vcmpe.f64	d13, d10
 800961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009620:	f53f acf0 	bmi.w	8009004 <_strtod_l+0x48c>
 8009624:	eeb4 dbcb 	vcmpe.f64	d13, d11
 8009628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800962c:	dd98      	ble.n	8009560 <_strtod_l+0x9e8>
 800962e:	e4e9      	b.n	8009004 <_strtod_l+0x48c>
 8009630:	9804      	ldr	r0, [sp, #16]
 8009632:	b1f0      	cbz	r0, 8009672 <_strtod_l+0xafa>
 8009634:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 8009638:	d81b      	bhi.n	8009672 <_strtod_l+0xafa>
 800963a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80096c0 <_strtod_l+0xb48>
 800963e:	eeb4 dbc7 	vcmpe.f64	d13, d7
 8009642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009646:	d811      	bhi.n	800966c <_strtod_l+0xaf4>
 8009648:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800964c:	ee1d 3a10 	vmov	r3, s26
 8009650:	2b01      	cmp	r3, #1
 8009652:	bf38      	it	cc
 8009654:	2301      	movcc	r3, #1
 8009656:	ee0d 3a10 	vmov	s26, r3
 800965a:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800965e:	f1ba 0f00 	cmp.w	sl, #0
 8009662:	d113      	bne.n	800968c <_strtod_l+0xb14>
 8009664:	eeb1 7b4d 	vneg.f64	d7, d13
 8009668:	ec53 2b17 	vmov	r2, r3, d7
 800966c:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 8009670:	1a43      	subs	r3, r0, r1
 8009672:	eeb0 0b48 	vmov.f64	d0, d8
 8009676:	ec43 2b1c 	vmov	d12, r2, r3
 800967a:	910a      	str	r1, [sp, #40]	; 0x28
 800967c:	f001 fdba 	bl	800b1f4 <__ulp>
 8009680:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009682:	eeac 8b00 	vfma.f64	d8, d12, d0
 8009686:	ec59 8b18 	vmov	r8, r9, d8
 800968a:	e7ab      	b.n	80095e4 <_strtod_l+0xa6c>
 800968c:	eeb0 7b4d 	vmov.f64	d7, d13
 8009690:	e7ea      	b.n	8009668 <_strtod_l+0xaf0>
 8009692:	eeb4 dbc9 	vcmpe.f64	d13, d9
 8009696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969a:	f57f af61 	bpl.w	8009560 <_strtod_l+0x9e8>
 800969e:	e4b1      	b.n	8009004 <_strtod_l+0x48c>
 80096a0:	2300      	movs	r3, #0
 80096a2:	9308      	str	r3, [sp, #32]
 80096a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80096a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80096a8:	6013      	str	r3, [r2, #0]
 80096aa:	f7ff baad 	b.w	8008c08 <_strtod_l+0x90>
 80096ae:	2a65      	cmp	r2, #101	; 0x65
 80096b0:	f43f ab9f 	beq.w	8008df2 <_strtod_l+0x27a>
 80096b4:	2a45      	cmp	r2, #69	; 0x45
 80096b6:	f43f ab9c 	beq.w	8008df2 <_strtod_l+0x27a>
 80096ba:	2101      	movs	r1, #1
 80096bc:	f7ff bbd4 	b.w	8008e68 <_strtod_l+0x2f0>
 80096c0:	ffc00000 	.word	0xffc00000
 80096c4:	41dfffff 	.word	0x41dfffff
 80096c8:	000fffff 	.word	0x000fffff
 80096cc:	7ff00000 	.word	0x7ff00000
 80096d0:	7fefffff 	.word	0x7fefffff
 80096d4:	3ff00000 	.word	0x3ff00000
 80096d8:	7c9fffff 	.word	0x7c9fffff
 80096dc:	bff00000 	.word	0xbff00000
 80096e0:	7fe00000 	.word	0x7fe00000

080096e4 <_strtod_r>:
 80096e4:	4b01      	ldr	r3, [pc, #4]	; (80096ec <_strtod_r+0x8>)
 80096e6:	f7ff ba47 	b.w	8008b78 <_strtod_l>
 80096ea:	bf00      	nop
 80096ec:	2000007c 	.word	0x2000007c

080096f0 <_strtol_l.constprop.0>:
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096f6:	d001      	beq.n	80096fc <_strtol_l.constprop.0+0xc>
 80096f8:	2b24      	cmp	r3, #36	; 0x24
 80096fa:	d906      	bls.n	800970a <_strtol_l.constprop.0+0x1a>
 80096fc:	f7fe fa7a 	bl	8007bf4 <__errno>
 8009700:	2316      	movs	r3, #22
 8009702:	6003      	str	r3, [r0, #0]
 8009704:	2000      	movs	r0, #0
 8009706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80097f0 <_strtol_l.constprop.0+0x100>
 800970e:	460d      	mov	r5, r1
 8009710:	462e      	mov	r6, r5
 8009712:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009716:	f814 700c 	ldrb.w	r7, [r4, ip]
 800971a:	f017 0708 	ands.w	r7, r7, #8
 800971e:	d1f7      	bne.n	8009710 <_strtol_l.constprop.0+0x20>
 8009720:	2c2d      	cmp	r4, #45	; 0x2d
 8009722:	d132      	bne.n	800978a <_strtol_l.constprop.0+0x9a>
 8009724:	782c      	ldrb	r4, [r5, #0]
 8009726:	2701      	movs	r7, #1
 8009728:	1cb5      	adds	r5, r6, #2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d05b      	beq.n	80097e6 <_strtol_l.constprop.0+0xf6>
 800972e:	2b10      	cmp	r3, #16
 8009730:	d109      	bne.n	8009746 <_strtol_l.constprop.0+0x56>
 8009732:	2c30      	cmp	r4, #48	; 0x30
 8009734:	d107      	bne.n	8009746 <_strtol_l.constprop.0+0x56>
 8009736:	782c      	ldrb	r4, [r5, #0]
 8009738:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800973c:	2c58      	cmp	r4, #88	; 0x58
 800973e:	d14d      	bne.n	80097dc <_strtol_l.constprop.0+0xec>
 8009740:	786c      	ldrb	r4, [r5, #1]
 8009742:	2310      	movs	r3, #16
 8009744:	3502      	adds	r5, #2
 8009746:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800974a:	f108 38ff 	add.w	r8, r8, #4294967295
 800974e:	f04f 0c00 	mov.w	ip, #0
 8009752:	fbb8 f9f3 	udiv	r9, r8, r3
 8009756:	4666      	mov	r6, ip
 8009758:	fb03 8a19 	mls	sl, r3, r9, r8
 800975c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009760:	f1be 0f09 	cmp.w	lr, #9
 8009764:	d816      	bhi.n	8009794 <_strtol_l.constprop.0+0xa4>
 8009766:	4674      	mov	r4, lr
 8009768:	42a3      	cmp	r3, r4
 800976a:	dd24      	ble.n	80097b6 <_strtol_l.constprop.0+0xc6>
 800976c:	f1bc 0f00 	cmp.w	ip, #0
 8009770:	db1e      	blt.n	80097b0 <_strtol_l.constprop.0+0xc0>
 8009772:	45b1      	cmp	r9, r6
 8009774:	d31c      	bcc.n	80097b0 <_strtol_l.constprop.0+0xc0>
 8009776:	d101      	bne.n	800977c <_strtol_l.constprop.0+0x8c>
 8009778:	45a2      	cmp	sl, r4
 800977a:	db19      	blt.n	80097b0 <_strtol_l.constprop.0+0xc0>
 800977c:	fb06 4603 	mla	r6, r6, r3, r4
 8009780:	f04f 0c01 	mov.w	ip, #1
 8009784:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009788:	e7e8      	b.n	800975c <_strtol_l.constprop.0+0x6c>
 800978a:	2c2b      	cmp	r4, #43	; 0x2b
 800978c:	bf04      	itt	eq
 800978e:	782c      	ldrbeq	r4, [r5, #0]
 8009790:	1cb5      	addeq	r5, r6, #2
 8009792:	e7ca      	b.n	800972a <_strtol_l.constprop.0+0x3a>
 8009794:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009798:	f1be 0f19 	cmp.w	lr, #25
 800979c:	d801      	bhi.n	80097a2 <_strtol_l.constprop.0+0xb2>
 800979e:	3c37      	subs	r4, #55	; 0x37
 80097a0:	e7e2      	b.n	8009768 <_strtol_l.constprop.0+0x78>
 80097a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80097a6:	f1be 0f19 	cmp.w	lr, #25
 80097aa:	d804      	bhi.n	80097b6 <_strtol_l.constprop.0+0xc6>
 80097ac:	3c57      	subs	r4, #87	; 0x57
 80097ae:	e7db      	b.n	8009768 <_strtol_l.constprop.0+0x78>
 80097b0:	f04f 3cff 	mov.w	ip, #4294967295
 80097b4:	e7e6      	b.n	8009784 <_strtol_l.constprop.0+0x94>
 80097b6:	f1bc 0f00 	cmp.w	ip, #0
 80097ba:	da05      	bge.n	80097c8 <_strtol_l.constprop.0+0xd8>
 80097bc:	2322      	movs	r3, #34	; 0x22
 80097be:	6003      	str	r3, [r0, #0]
 80097c0:	4646      	mov	r6, r8
 80097c2:	b942      	cbnz	r2, 80097d6 <_strtol_l.constprop.0+0xe6>
 80097c4:	4630      	mov	r0, r6
 80097c6:	e79e      	b.n	8009706 <_strtol_l.constprop.0+0x16>
 80097c8:	b107      	cbz	r7, 80097cc <_strtol_l.constprop.0+0xdc>
 80097ca:	4276      	negs	r6, r6
 80097cc:	2a00      	cmp	r2, #0
 80097ce:	d0f9      	beq.n	80097c4 <_strtol_l.constprop.0+0xd4>
 80097d0:	f1bc 0f00 	cmp.w	ip, #0
 80097d4:	d000      	beq.n	80097d8 <_strtol_l.constprop.0+0xe8>
 80097d6:	1e69      	subs	r1, r5, #1
 80097d8:	6011      	str	r1, [r2, #0]
 80097da:	e7f3      	b.n	80097c4 <_strtol_l.constprop.0+0xd4>
 80097dc:	2430      	movs	r4, #48	; 0x30
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1b1      	bne.n	8009746 <_strtol_l.constprop.0+0x56>
 80097e2:	2308      	movs	r3, #8
 80097e4:	e7af      	b.n	8009746 <_strtol_l.constprop.0+0x56>
 80097e6:	2c30      	cmp	r4, #48	; 0x30
 80097e8:	d0a5      	beq.n	8009736 <_strtol_l.constprop.0+0x46>
 80097ea:	230a      	movs	r3, #10
 80097ec:	e7ab      	b.n	8009746 <_strtol_l.constprop.0+0x56>
 80097ee:	bf00      	nop
 80097f0:	0800c3e1 	.word	0x0800c3e1

080097f4 <_strtol_r>:
 80097f4:	f7ff bf7c 	b.w	80096f0 <_strtol_l.constprop.0>

080097f8 <quorem>:
 80097f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097fc:	6903      	ldr	r3, [r0, #16]
 80097fe:	690c      	ldr	r4, [r1, #16]
 8009800:	42a3      	cmp	r3, r4
 8009802:	4607      	mov	r7, r0
 8009804:	f2c0 8081 	blt.w	800990a <quorem+0x112>
 8009808:	3c01      	subs	r4, #1
 800980a:	f101 0814 	add.w	r8, r1, #20
 800980e:	f100 0514 	add.w	r5, r0, #20
 8009812:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009816:	9301      	str	r3, [sp, #4]
 8009818:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800981c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009820:	3301      	adds	r3, #1
 8009822:	429a      	cmp	r2, r3
 8009824:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009828:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800982c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009830:	d331      	bcc.n	8009896 <quorem+0x9e>
 8009832:	f04f 0e00 	mov.w	lr, #0
 8009836:	4640      	mov	r0, r8
 8009838:	46ac      	mov	ip, r5
 800983a:	46f2      	mov	sl, lr
 800983c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009840:	b293      	uxth	r3, r2
 8009842:	fb06 e303 	mla	r3, r6, r3, lr
 8009846:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800984a:	b29b      	uxth	r3, r3
 800984c:	ebaa 0303 	sub.w	r3, sl, r3
 8009850:	f8dc a000 	ldr.w	sl, [ip]
 8009854:	0c12      	lsrs	r2, r2, #16
 8009856:	fa13 f38a 	uxtah	r3, r3, sl
 800985a:	fb06 e202 	mla	r2, r6, r2, lr
 800985e:	9300      	str	r3, [sp, #0]
 8009860:	9b00      	ldr	r3, [sp, #0]
 8009862:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009866:	b292      	uxth	r2, r2
 8009868:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800986c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009870:	f8bd 3000 	ldrh.w	r3, [sp]
 8009874:	4581      	cmp	r9, r0
 8009876:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800987a:	f84c 3b04 	str.w	r3, [ip], #4
 800987e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009882:	d2db      	bcs.n	800983c <quorem+0x44>
 8009884:	f855 300b 	ldr.w	r3, [r5, fp]
 8009888:	b92b      	cbnz	r3, 8009896 <quorem+0x9e>
 800988a:	9b01      	ldr	r3, [sp, #4]
 800988c:	3b04      	subs	r3, #4
 800988e:	429d      	cmp	r5, r3
 8009890:	461a      	mov	r2, r3
 8009892:	d32e      	bcc.n	80098f2 <quorem+0xfa>
 8009894:	613c      	str	r4, [r7, #16]
 8009896:	4638      	mov	r0, r7
 8009898:	f001 fc06 	bl	800b0a8 <__mcmp>
 800989c:	2800      	cmp	r0, #0
 800989e:	db24      	blt.n	80098ea <quorem+0xf2>
 80098a0:	3601      	adds	r6, #1
 80098a2:	4628      	mov	r0, r5
 80098a4:	f04f 0c00 	mov.w	ip, #0
 80098a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80098ac:	f8d0 e000 	ldr.w	lr, [r0]
 80098b0:	b293      	uxth	r3, r2
 80098b2:	ebac 0303 	sub.w	r3, ip, r3
 80098b6:	0c12      	lsrs	r2, r2, #16
 80098b8:	fa13 f38e 	uxtah	r3, r3, lr
 80098bc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80098c0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098ca:	45c1      	cmp	r9, r8
 80098cc:	f840 3b04 	str.w	r3, [r0], #4
 80098d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80098d4:	d2e8      	bcs.n	80098a8 <quorem+0xb0>
 80098d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098de:	b922      	cbnz	r2, 80098ea <quorem+0xf2>
 80098e0:	3b04      	subs	r3, #4
 80098e2:	429d      	cmp	r5, r3
 80098e4:	461a      	mov	r2, r3
 80098e6:	d30a      	bcc.n	80098fe <quorem+0x106>
 80098e8:	613c      	str	r4, [r7, #16]
 80098ea:	4630      	mov	r0, r6
 80098ec:	b003      	add	sp, #12
 80098ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098f2:	6812      	ldr	r2, [r2, #0]
 80098f4:	3b04      	subs	r3, #4
 80098f6:	2a00      	cmp	r2, #0
 80098f8:	d1cc      	bne.n	8009894 <quorem+0x9c>
 80098fa:	3c01      	subs	r4, #1
 80098fc:	e7c7      	b.n	800988e <quorem+0x96>
 80098fe:	6812      	ldr	r2, [r2, #0]
 8009900:	3b04      	subs	r3, #4
 8009902:	2a00      	cmp	r2, #0
 8009904:	d1f0      	bne.n	80098e8 <quorem+0xf0>
 8009906:	3c01      	subs	r4, #1
 8009908:	e7eb      	b.n	80098e2 <quorem+0xea>
 800990a:	2000      	movs	r0, #0
 800990c:	e7ee      	b.n	80098ec <quorem+0xf4>
	...

08009910 <_dtoa_r>:
 8009910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009914:	ed2d 8b02 	vpush	{d8}
 8009918:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800991a:	b091      	sub	sp, #68	; 0x44
 800991c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009920:	ec59 8b10 	vmov	r8, r9, d0
 8009924:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009926:	9106      	str	r1, [sp, #24]
 8009928:	4606      	mov	r6, r0
 800992a:	9208      	str	r2, [sp, #32]
 800992c:	930c      	str	r3, [sp, #48]	; 0x30
 800992e:	b975      	cbnz	r5, 800994e <_dtoa_r+0x3e>
 8009930:	2010      	movs	r0, #16
 8009932:	f7fe f989 	bl	8007c48 <malloc>
 8009936:	4602      	mov	r2, r0
 8009938:	6270      	str	r0, [r6, #36]	; 0x24
 800993a:	b920      	cbnz	r0, 8009946 <_dtoa_r+0x36>
 800993c:	4baa      	ldr	r3, [pc, #680]	; (8009be8 <_dtoa_r+0x2d8>)
 800993e:	21ea      	movs	r1, #234	; 0xea
 8009940:	48aa      	ldr	r0, [pc, #680]	; (8009bec <_dtoa_r+0x2dc>)
 8009942:	f001 ff3f 	bl	800b7c4 <__assert_func>
 8009946:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800994a:	6005      	str	r5, [r0, #0]
 800994c:	60c5      	str	r5, [r0, #12]
 800994e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009950:	6819      	ldr	r1, [r3, #0]
 8009952:	b151      	cbz	r1, 800996a <_dtoa_r+0x5a>
 8009954:	685a      	ldr	r2, [r3, #4]
 8009956:	604a      	str	r2, [r1, #4]
 8009958:	2301      	movs	r3, #1
 800995a:	4093      	lsls	r3, r2
 800995c:	608b      	str	r3, [r1, #8]
 800995e:	4630      	mov	r0, r6
 8009960:	f001 f916 	bl	800ab90 <_Bfree>
 8009964:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009966:	2200      	movs	r2, #0
 8009968:	601a      	str	r2, [r3, #0]
 800996a:	f1b9 0300 	subs.w	r3, r9, #0
 800996e:	bfbb      	ittet	lt
 8009970:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009974:	9303      	strlt	r3, [sp, #12]
 8009976:	2300      	movge	r3, #0
 8009978:	2201      	movlt	r2, #1
 800997a:	bfac      	ite	ge
 800997c:	6023      	strge	r3, [r4, #0]
 800997e:	6022      	strlt	r2, [r4, #0]
 8009980:	4b9b      	ldr	r3, [pc, #620]	; (8009bf0 <_dtoa_r+0x2e0>)
 8009982:	9c03      	ldr	r4, [sp, #12]
 8009984:	43a3      	bics	r3, r4
 8009986:	d11c      	bne.n	80099c2 <_dtoa_r+0xb2>
 8009988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800998a:	f242 730f 	movw	r3, #9999	; 0x270f
 800998e:	6013      	str	r3, [r2, #0]
 8009990:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8009994:	ea53 0308 	orrs.w	r3, r3, r8
 8009998:	f000 84fd 	beq.w	800a396 <_dtoa_r+0xa86>
 800999c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800999e:	b963      	cbnz	r3, 80099ba <_dtoa_r+0xaa>
 80099a0:	4b94      	ldr	r3, [pc, #592]	; (8009bf4 <_dtoa_r+0x2e4>)
 80099a2:	e01f      	b.n	80099e4 <_dtoa_r+0xd4>
 80099a4:	4b94      	ldr	r3, [pc, #592]	; (8009bf8 <_dtoa_r+0x2e8>)
 80099a6:	9301      	str	r3, [sp, #4]
 80099a8:	3308      	adds	r3, #8
 80099aa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80099ac:	6013      	str	r3, [r2, #0]
 80099ae:	9801      	ldr	r0, [sp, #4]
 80099b0:	b011      	add	sp, #68	; 0x44
 80099b2:	ecbd 8b02 	vpop	{d8}
 80099b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099ba:	4b8e      	ldr	r3, [pc, #568]	; (8009bf4 <_dtoa_r+0x2e4>)
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	3303      	adds	r3, #3
 80099c0:	e7f3      	b.n	80099aa <_dtoa_r+0x9a>
 80099c2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80099c6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80099ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ce:	d10b      	bne.n	80099e8 <_dtoa_r+0xd8>
 80099d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099d2:	2301      	movs	r3, #1
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80099d8:	2b00      	cmp	r3, #0
 80099da:	f000 84d9 	beq.w	800a390 <_dtoa_r+0xa80>
 80099de:	4887      	ldr	r0, [pc, #540]	; (8009bfc <_dtoa_r+0x2ec>)
 80099e0:	6018      	str	r0, [r3, #0]
 80099e2:	1e43      	subs	r3, r0, #1
 80099e4:	9301      	str	r3, [sp, #4]
 80099e6:	e7e2      	b.n	80099ae <_dtoa_r+0x9e>
 80099e8:	a90f      	add	r1, sp, #60	; 0x3c
 80099ea:	aa0e      	add	r2, sp, #56	; 0x38
 80099ec:	4630      	mov	r0, r6
 80099ee:	eeb0 0b48 	vmov.f64	d0, d8
 80099f2:	f001 fc7b 	bl	800b2ec <__d2b>
 80099f6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80099fa:	4605      	mov	r5, r0
 80099fc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80099fe:	2900      	cmp	r1, #0
 8009a00:	d046      	beq.n	8009a90 <_dtoa_r+0x180>
 8009a02:	ee18 4a90 	vmov	r4, s17
 8009a06:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009a0a:	ec53 2b18 	vmov	r2, r3, d8
 8009a0e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8009a12:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009a16:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009a1a:	2400      	movs	r4, #0
 8009a1c:	ec43 2b16 	vmov	d6, r2, r3
 8009a20:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8009a24:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009bd0 <_dtoa_r+0x2c0>
 8009a28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a2c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8009bd8 <_dtoa_r+0x2c8>
 8009a30:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009a34:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8009be0 <_dtoa_r+0x2d0>
 8009a38:	ee07 1a90 	vmov	s15, r1
 8009a3c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009a40:	eeb0 7b46 	vmov.f64	d7, d6
 8009a44:	eea4 7b05 	vfma.f64	d7, d4, d5
 8009a48:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8009a4c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a54:	ee16 ba90 	vmov	fp, s13
 8009a58:	940a      	str	r4, [sp, #40]	; 0x28
 8009a5a:	d508      	bpl.n	8009a6e <_dtoa_r+0x15e>
 8009a5c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009a60:	eeb4 6b47 	vcmp.f64	d6, d7
 8009a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a68:	bf18      	it	ne
 8009a6a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8009a6e:	f1bb 0f16 	cmp.w	fp, #22
 8009a72:	d82f      	bhi.n	8009ad4 <_dtoa_r+0x1c4>
 8009a74:	4b62      	ldr	r3, [pc, #392]	; (8009c00 <_dtoa_r+0x2f0>)
 8009a76:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009a7a:	ed93 7b00 	vldr	d7, [r3]
 8009a7e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a86:	d501      	bpl.n	8009a8c <_dtoa_r+0x17c>
 8009a88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	e022      	b.n	8009ad6 <_dtoa_r+0x1c6>
 8009a90:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009a92:	4401      	add	r1, r0
 8009a94:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8009a98:	2b20      	cmp	r3, #32
 8009a9a:	bfc1      	itttt	gt
 8009a9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009aa0:	fa04 f303 	lslgt.w	r3, r4, r3
 8009aa4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8009aa8:	fa28 f804 	lsrgt.w	r8, r8, r4
 8009aac:	bfd6      	itet	le
 8009aae:	f1c3 0320 	rsble	r3, r3, #32
 8009ab2:	ea43 0808 	orrgt.w	r8, r3, r8
 8009ab6:	fa08 f803 	lslle.w	r8, r8, r3
 8009aba:	ee07 8a90 	vmov	s15, r8
 8009abe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009ac2:	3901      	subs	r1, #1
 8009ac4:	ee17 4a90 	vmov	r4, s15
 8009ac8:	ec53 2b17 	vmov	r2, r3, d7
 8009acc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8009ad0:	2401      	movs	r4, #1
 8009ad2:	e7a3      	b.n	8009a1c <_dtoa_r+0x10c>
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ad8:	1a43      	subs	r3, r0, r1
 8009ada:	1e5a      	subs	r2, r3, #1
 8009adc:	bf45      	ittet	mi
 8009ade:	f1c3 0301 	rsbmi	r3, r3, #1
 8009ae2:	9304      	strmi	r3, [sp, #16]
 8009ae4:	2300      	movpl	r3, #0
 8009ae6:	2300      	movmi	r3, #0
 8009ae8:	9205      	str	r2, [sp, #20]
 8009aea:	bf54      	ite	pl
 8009aec:	9304      	strpl	r3, [sp, #16]
 8009aee:	9305      	strmi	r3, [sp, #20]
 8009af0:	f1bb 0f00 	cmp.w	fp, #0
 8009af4:	db18      	blt.n	8009b28 <_dtoa_r+0x218>
 8009af6:	9b05      	ldr	r3, [sp, #20]
 8009af8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8009afc:	445b      	add	r3, fp
 8009afe:	9305      	str	r3, [sp, #20]
 8009b00:	2300      	movs	r3, #0
 8009b02:	9a06      	ldr	r2, [sp, #24]
 8009b04:	2a09      	cmp	r2, #9
 8009b06:	d849      	bhi.n	8009b9c <_dtoa_r+0x28c>
 8009b08:	2a05      	cmp	r2, #5
 8009b0a:	bfc4      	itt	gt
 8009b0c:	3a04      	subgt	r2, #4
 8009b0e:	9206      	strgt	r2, [sp, #24]
 8009b10:	9a06      	ldr	r2, [sp, #24]
 8009b12:	f1a2 0202 	sub.w	r2, r2, #2
 8009b16:	bfcc      	ite	gt
 8009b18:	2400      	movgt	r4, #0
 8009b1a:	2401      	movle	r4, #1
 8009b1c:	2a03      	cmp	r2, #3
 8009b1e:	d848      	bhi.n	8009bb2 <_dtoa_r+0x2a2>
 8009b20:	e8df f002 	tbb	[pc, r2]
 8009b24:	3a2c2e0b 	.word	0x3a2c2e0b
 8009b28:	9b04      	ldr	r3, [sp, #16]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	eba3 030b 	sub.w	r3, r3, fp
 8009b30:	9304      	str	r3, [sp, #16]
 8009b32:	9209      	str	r2, [sp, #36]	; 0x24
 8009b34:	f1cb 0300 	rsb	r3, fp, #0
 8009b38:	e7e3      	b.n	8009b02 <_dtoa_r+0x1f2>
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	9207      	str	r2, [sp, #28]
 8009b3e:	9a08      	ldr	r2, [sp, #32]
 8009b40:	2a00      	cmp	r2, #0
 8009b42:	dc39      	bgt.n	8009bb8 <_dtoa_r+0x2a8>
 8009b44:	f04f 0a01 	mov.w	sl, #1
 8009b48:	46d1      	mov	r9, sl
 8009b4a:	4652      	mov	r2, sl
 8009b4c:	f8cd a020 	str.w	sl, [sp, #32]
 8009b50:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8009b52:	2100      	movs	r1, #0
 8009b54:	6079      	str	r1, [r7, #4]
 8009b56:	2004      	movs	r0, #4
 8009b58:	f100 0c14 	add.w	ip, r0, #20
 8009b5c:	4594      	cmp	ip, r2
 8009b5e:	6879      	ldr	r1, [r7, #4]
 8009b60:	d92f      	bls.n	8009bc2 <_dtoa_r+0x2b2>
 8009b62:	4630      	mov	r0, r6
 8009b64:	930d      	str	r3, [sp, #52]	; 0x34
 8009b66:	f000 ffd3 	bl	800ab10 <_Balloc>
 8009b6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b6c:	9001      	str	r0, [sp, #4]
 8009b6e:	4602      	mov	r2, r0
 8009b70:	2800      	cmp	r0, #0
 8009b72:	d149      	bne.n	8009c08 <_dtoa_r+0x2f8>
 8009b74:	4b23      	ldr	r3, [pc, #140]	; (8009c04 <_dtoa_r+0x2f4>)
 8009b76:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009b7a:	e6e1      	b.n	8009940 <_dtoa_r+0x30>
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	e7dd      	b.n	8009b3c <_dtoa_r+0x22c>
 8009b80:	2200      	movs	r2, #0
 8009b82:	9207      	str	r2, [sp, #28]
 8009b84:	9a08      	ldr	r2, [sp, #32]
 8009b86:	eb0b 0a02 	add.w	sl, fp, r2
 8009b8a:	f10a 0901 	add.w	r9, sl, #1
 8009b8e:	464a      	mov	r2, r9
 8009b90:	2a01      	cmp	r2, #1
 8009b92:	bfb8      	it	lt
 8009b94:	2201      	movlt	r2, #1
 8009b96:	e7db      	b.n	8009b50 <_dtoa_r+0x240>
 8009b98:	2201      	movs	r2, #1
 8009b9a:	e7f2      	b.n	8009b82 <_dtoa_r+0x272>
 8009b9c:	2401      	movs	r4, #1
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009ba4:	f04f 3aff 	mov.w	sl, #4294967295
 8009ba8:	2100      	movs	r1, #0
 8009baa:	46d1      	mov	r9, sl
 8009bac:	2212      	movs	r2, #18
 8009bae:	9108      	str	r1, [sp, #32]
 8009bb0:	e7ce      	b.n	8009b50 <_dtoa_r+0x240>
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	9207      	str	r2, [sp, #28]
 8009bb6:	e7f5      	b.n	8009ba4 <_dtoa_r+0x294>
 8009bb8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009bbc:	46d1      	mov	r9, sl
 8009bbe:	4652      	mov	r2, sl
 8009bc0:	e7c6      	b.n	8009b50 <_dtoa_r+0x240>
 8009bc2:	3101      	adds	r1, #1
 8009bc4:	6079      	str	r1, [r7, #4]
 8009bc6:	0040      	lsls	r0, r0, #1
 8009bc8:	e7c6      	b.n	8009b58 <_dtoa_r+0x248>
 8009bca:	bf00      	nop
 8009bcc:	f3af 8000 	nop.w
 8009bd0:	636f4361 	.word	0x636f4361
 8009bd4:	3fd287a7 	.word	0x3fd287a7
 8009bd8:	8b60c8b3 	.word	0x8b60c8b3
 8009bdc:	3fc68a28 	.word	0x3fc68a28
 8009be0:	509f79fb 	.word	0x509f79fb
 8009be4:	3fd34413 	.word	0x3fd34413
 8009be8:	0800c4ee 	.word	0x0800c4ee
 8009bec:	0800c505 	.word	0x0800c505
 8009bf0:	7ff00000 	.word	0x7ff00000
 8009bf4:	0800c4ea 	.word	0x0800c4ea
 8009bf8:	0800c4e1 	.word	0x0800c4e1
 8009bfc:	0800c365 	.word	0x0800c365
 8009c00:	0800c670 	.word	0x0800c670
 8009c04:	0800c560 	.word	0x0800c560
 8009c08:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8009c0a:	9901      	ldr	r1, [sp, #4]
 8009c0c:	6011      	str	r1, [r2, #0]
 8009c0e:	f1b9 0f0e 	cmp.w	r9, #14
 8009c12:	d86c      	bhi.n	8009cee <_dtoa_r+0x3de>
 8009c14:	2c00      	cmp	r4, #0
 8009c16:	d06a      	beq.n	8009cee <_dtoa_r+0x3de>
 8009c18:	f1bb 0f00 	cmp.w	fp, #0
 8009c1c:	f340 80a0 	ble.w	8009d60 <_dtoa_r+0x450>
 8009c20:	49c1      	ldr	r1, [pc, #772]	; (8009f28 <_dtoa_r+0x618>)
 8009c22:	f00b 020f 	and.w	r2, fp, #15
 8009c26:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8009c2a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009c2e:	ed92 7b00 	vldr	d7, [r2]
 8009c32:	ea4f 112b 	mov.w	r1, fp, asr #4
 8009c36:	f000 8087 	beq.w	8009d48 <_dtoa_r+0x438>
 8009c3a:	4abc      	ldr	r2, [pc, #752]	; (8009f2c <_dtoa_r+0x61c>)
 8009c3c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009c40:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009c44:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009c48:	f001 010f 	and.w	r1, r1, #15
 8009c4c:	2203      	movs	r2, #3
 8009c4e:	48b7      	ldr	r0, [pc, #732]	; (8009f2c <_dtoa_r+0x61c>)
 8009c50:	2900      	cmp	r1, #0
 8009c52:	d17b      	bne.n	8009d4c <_dtoa_r+0x43c>
 8009c54:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009c58:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009c5c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c60:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009c62:	2900      	cmp	r1, #0
 8009c64:	f000 80a2 	beq.w	8009dac <_dtoa_r+0x49c>
 8009c68:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009c6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c70:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c78:	f140 8098 	bpl.w	8009dac <_dtoa_r+0x49c>
 8009c7c:	f1b9 0f00 	cmp.w	r9, #0
 8009c80:	f000 8094 	beq.w	8009dac <_dtoa_r+0x49c>
 8009c84:	f1ba 0f00 	cmp.w	sl, #0
 8009c88:	dd2f      	ble.n	8009cea <_dtoa_r+0x3da>
 8009c8a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c92:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009c96:	f10b 37ff 	add.w	r7, fp, #4294967295
 8009c9a:	3201      	adds	r2, #1
 8009c9c:	4650      	mov	r0, sl
 8009c9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009ca2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009ca6:	ee07 2a90 	vmov	s15, r2
 8009caa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009cae:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009cb2:	ee15 4a90 	vmov	r4, s11
 8009cb6:	ec52 1b15 	vmov	r1, r2, d5
 8009cba:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d177      	bne.n	8009db2 <_dtoa_r+0x4a2>
 8009cc2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009cc6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009cca:	ec42 1b17 	vmov	d7, r1, r2
 8009cce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd6:	f300 8263 	bgt.w	800a1a0 <_dtoa_r+0x890>
 8009cda:	eeb1 7b47 	vneg.f64	d7, d7
 8009cde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce6:	f100 8258 	bmi.w	800a19a <_dtoa_r+0x88a>
 8009cea:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009cee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009cf0:	2a00      	cmp	r2, #0
 8009cf2:	f2c0 811d 	blt.w	8009f30 <_dtoa_r+0x620>
 8009cf6:	f1bb 0f0e 	cmp.w	fp, #14
 8009cfa:	f300 8119 	bgt.w	8009f30 <_dtoa_r+0x620>
 8009cfe:	4b8a      	ldr	r3, [pc, #552]	; (8009f28 <_dtoa_r+0x618>)
 8009d00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009d04:	ed93 6b00 	vldr	d6, [r3]
 8009d08:	9b08      	ldr	r3, [sp, #32]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f280 80b7 	bge.w	8009e7e <_dtoa_r+0x56e>
 8009d10:	f1b9 0f00 	cmp.w	r9, #0
 8009d14:	f300 80b3 	bgt.w	8009e7e <_dtoa_r+0x56e>
 8009d18:	f040 823f 	bne.w	800a19a <_dtoa_r+0x88a>
 8009d1c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009d20:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009d24:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009d28:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d30:	464c      	mov	r4, r9
 8009d32:	464f      	mov	r7, r9
 8009d34:	f280 8215 	bge.w	800a162 <_dtoa_r+0x852>
 8009d38:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d3c:	2331      	movs	r3, #49	; 0x31
 8009d3e:	f808 3b01 	strb.w	r3, [r8], #1
 8009d42:	f10b 0b01 	add.w	fp, fp, #1
 8009d46:	e211      	b.n	800a16c <_dtoa_r+0x85c>
 8009d48:	2202      	movs	r2, #2
 8009d4a:	e780      	b.n	8009c4e <_dtoa_r+0x33e>
 8009d4c:	07cc      	lsls	r4, r1, #31
 8009d4e:	d504      	bpl.n	8009d5a <_dtoa_r+0x44a>
 8009d50:	ed90 6b00 	vldr	d6, [r0]
 8009d54:	3201      	adds	r2, #1
 8009d56:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009d5a:	1049      	asrs	r1, r1, #1
 8009d5c:	3008      	adds	r0, #8
 8009d5e:	e777      	b.n	8009c50 <_dtoa_r+0x340>
 8009d60:	d022      	beq.n	8009da8 <_dtoa_r+0x498>
 8009d62:	f1cb 0100 	rsb	r1, fp, #0
 8009d66:	4a70      	ldr	r2, [pc, #448]	; (8009f28 <_dtoa_r+0x618>)
 8009d68:	f001 000f 	and.w	r0, r1, #15
 8009d6c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009d70:	ed92 7b00 	vldr	d7, [r2]
 8009d74:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009d78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d7c:	486b      	ldr	r0, [pc, #428]	; (8009f2c <_dtoa_r+0x61c>)
 8009d7e:	1109      	asrs	r1, r1, #4
 8009d80:	2400      	movs	r4, #0
 8009d82:	2202      	movs	r2, #2
 8009d84:	b929      	cbnz	r1, 8009d92 <_dtoa_r+0x482>
 8009d86:	2c00      	cmp	r4, #0
 8009d88:	f43f af6a 	beq.w	8009c60 <_dtoa_r+0x350>
 8009d8c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009d90:	e766      	b.n	8009c60 <_dtoa_r+0x350>
 8009d92:	07cf      	lsls	r7, r1, #31
 8009d94:	d505      	bpl.n	8009da2 <_dtoa_r+0x492>
 8009d96:	ed90 6b00 	vldr	d6, [r0]
 8009d9a:	3201      	adds	r2, #1
 8009d9c:	2401      	movs	r4, #1
 8009d9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009da2:	1049      	asrs	r1, r1, #1
 8009da4:	3008      	adds	r0, #8
 8009da6:	e7ed      	b.n	8009d84 <_dtoa_r+0x474>
 8009da8:	2202      	movs	r2, #2
 8009daa:	e759      	b.n	8009c60 <_dtoa_r+0x350>
 8009dac:	465f      	mov	r7, fp
 8009dae:	4648      	mov	r0, r9
 8009db0:	e775      	b.n	8009c9e <_dtoa_r+0x38e>
 8009db2:	ec42 1b17 	vmov	d7, r1, r2
 8009db6:	4a5c      	ldr	r2, [pc, #368]	; (8009f28 <_dtoa_r+0x618>)
 8009db8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009dbc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009dc0:	9a01      	ldr	r2, [sp, #4]
 8009dc2:	1814      	adds	r4, r2, r0
 8009dc4:	9a07      	ldr	r2, [sp, #28]
 8009dc6:	b352      	cbz	r2, 8009e1e <_dtoa_r+0x50e>
 8009dc8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009dcc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009dd0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009dd4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009dd8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009ddc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009de0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009de4:	ee14 2a90 	vmov	r2, s9
 8009de8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009dec:	3230      	adds	r2, #48	; 0x30
 8009dee:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009df2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfa:	f808 2b01 	strb.w	r2, [r8], #1
 8009dfe:	d439      	bmi.n	8009e74 <_dtoa_r+0x564>
 8009e00:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009e04:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e0c:	d472      	bmi.n	8009ef4 <_dtoa_r+0x5e4>
 8009e0e:	45a0      	cmp	r8, r4
 8009e10:	f43f af6b 	beq.w	8009cea <_dtoa_r+0x3da>
 8009e14:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009e18:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e1c:	e7e0      	b.n	8009de0 <_dtoa_r+0x4d0>
 8009e1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e22:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e26:	4621      	mov	r1, r4
 8009e28:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009e2c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009e30:	ee14 2a90 	vmov	r2, s9
 8009e34:	3230      	adds	r2, #48	; 0x30
 8009e36:	f808 2b01 	strb.w	r2, [r8], #1
 8009e3a:	45a0      	cmp	r8, r4
 8009e3c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009e40:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009e44:	d118      	bne.n	8009e78 <_dtoa_r+0x568>
 8009e46:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009e4a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009e4e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e56:	dc4d      	bgt.n	8009ef4 <_dtoa_r+0x5e4>
 8009e58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009e5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e64:	f57f af41 	bpl.w	8009cea <_dtoa_r+0x3da>
 8009e68:	4688      	mov	r8, r1
 8009e6a:	3901      	subs	r1, #1
 8009e6c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009e70:	2b30      	cmp	r3, #48	; 0x30
 8009e72:	d0f9      	beq.n	8009e68 <_dtoa_r+0x558>
 8009e74:	46bb      	mov	fp, r7
 8009e76:	e02a      	b.n	8009ece <_dtoa_r+0x5be>
 8009e78:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009e7c:	e7d6      	b.n	8009e2c <_dtoa_r+0x51c>
 8009e7e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009e82:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009e86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009e8a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009e8e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009e92:	ee15 3a10 	vmov	r3, s10
 8009e96:	3330      	adds	r3, #48	; 0x30
 8009e98:	f808 3b01 	strb.w	r3, [r8], #1
 8009e9c:	9b01      	ldr	r3, [sp, #4]
 8009e9e:	eba8 0303 	sub.w	r3, r8, r3
 8009ea2:	4599      	cmp	r9, r3
 8009ea4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009ea8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009eac:	d133      	bne.n	8009f16 <_dtoa_r+0x606>
 8009eae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009eb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009eba:	dc1a      	bgt.n	8009ef2 <_dtoa_r+0x5e2>
 8009ebc:	eeb4 7b46 	vcmp.f64	d7, d6
 8009ec0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ec4:	d103      	bne.n	8009ece <_dtoa_r+0x5be>
 8009ec6:	ee15 3a10 	vmov	r3, s10
 8009eca:	07d9      	lsls	r1, r3, #31
 8009ecc:	d411      	bmi.n	8009ef2 <_dtoa_r+0x5e2>
 8009ece:	4629      	mov	r1, r5
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	f000 fe5d 	bl	800ab90 <_Bfree>
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009eda:	f888 3000 	strb.w	r3, [r8]
 8009ede:	f10b 0301 	add.w	r3, fp, #1
 8009ee2:	6013      	str	r3, [r2, #0]
 8009ee4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	f43f ad61 	beq.w	80099ae <_dtoa_r+0x9e>
 8009eec:	f8c3 8000 	str.w	r8, [r3]
 8009ef0:	e55d      	b.n	80099ae <_dtoa_r+0x9e>
 8009ef2:	465f      	mov	r7, fp
 8009ef4:	4643      	mov	r3, r8
 8009ef6:	4698      	mov	r8, r3
 8009ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009efc:	2a39      	cmp	r2, #57	; 0x39
 8009efe:	d106      	bne.n	8009f0e <_dtoa_r+0x5fe>
 8009f00:	9a01      	ldr	r2, [sp, #4]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d1f7      	bne.n	8009ef6 <_dtoa_r+0x5e6>
 8009f06:	9901      	ldr	r1, [sp, #4]
 8009f08:	2230      	movs	r2, #48	; 0x30
 8009f0a:	3701      	adds	r7, #1
 8009f0c:	700a      	strb	r2, [r1, #0]
 8009f0e:	781a      	ldrb	r2, [r3, #0]
 8009f10:	3201      	adds	r2, #1
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	e7ae      	b.n	8009e74 <_dtoa_r+0x564>
 8009f16:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f1a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f22:	d1b2      	bne.n	8009e8a <_dtoa_r+0x57a>
 8009f24:	e7d3      	b.n	8009ece <_dtoa_r+0x5be>
 8009f26:	bf00      	nop
 8009f28:	0800c670 	.word	0x0800c670
 8009f2c:	0800c648 	.word	0x0800c648
 8009f30:	9907      	ldr	r1, [sp, #28]
 8009f32:	2900      	cmp	r1, #0
 8009f34:	f000 80d0 	beq.w	800a0d8 <_dtoa_r+0x7c8>
 8009f38:	9906      	ldr	r1, [sp, #24]
 8009f3a:	2901      	cmp	r1, #1
 8009f3c:	f300 80b4 	bgt.w	800a0a8 <_dtoa_r+0x798>
 8009f40:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009f42:	2900      	cmp	r1, #0
 8009f44:	f000 80ac 	beq.w	800a0a0 <_dtoa_r+0x790>
 8009f48:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009f4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009f50:	461c      	mov	r4, r3
 8009f52:	930a      	str	r3, [sp, #40]	; 0x28
 8009f54:	9b04      	ldr	r3, [sp, #16]
 8009f56:	4413      	add	r3, r2
 8009f58:	9304      	str	r3, [sp, #16]
 8009f5a:	9b05      	ldr	r3, [sp, #20]
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	4413      	add	r3, r2
 8009f60:	4630      	mov	r0, r6
 8009f62:	9305      	str	r3, [sp, #20]
 8009f64:	f000 ff16 	bl	800ad94 <__i2b>
 8009f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f6a:	4607      	mov	r7, r0
 8009f6c:	f1b8 0f00 	cmp.w	r8, #0
 8009f70:	dd0d      	ble.n	8009f8e <_dtoa_r+0x67e>
 8009f72:	9a05      	ldr	r2, [sp, #20]
 8009f74:	2a00      	cmp	r2, #0
 8009f76:	dd0a      	ble.n	8009f8e <_dtoa_r+0x67e>
 8009f78:	4542      	cmp	r2, r8
 8009f7a:	9904      	ldr	r1, [sp, #16]
 8009f7c:	bfa8      	it	ge
 8009f7e:	4642      	movge	r2, r8
 8009f80:	1a89      	subs	r1, r1, r2
 8009f82:	9104      	str	r1, [sp, #16]
 8009f84:	9905      	ldr	r1, [sp, #20]
 8009f86:	eba8 0802 	sub.w	r8, r8, r2
 8009f8a:	1a8a      	subs	r2, r1, r2
 8009f8c:	9205      	str	r2, [sp, #20]
 8009f8e:	b303      	cbz	r3, 8009fd2 <_dtoa_r+0x6c2>
 8009f90:	9a07      	ldr	r2, [sp, #28]
 8009f92:	2a00      	cmp	r2, #0
 8009f94:	f000 80a5 	beq.w	800a0e2 <_dtoa_r+0x7d2>
 8009f98:	2c00      	cmp	r4, #0
 8009f9a:	dd13      	ble.n	8009fc4 <_dtoa_r+0x6b4>
 8009f9c:	4639      	mov	r1, r7
 8009f9e:	4622      	mov	r2, r4
 8009fa0:	4630      	mov	r0, r6
 8009fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8009fa4:	f000 ffb6 	bl	800af14 <__pow5mult>
 8009fa8:	462a      	mov	r2, r5
 8009faa:	4601      	mov	r1, r0
 8009fac:	4607      	mov	r7, r0
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f000 ff06 	bl	800adc0 <__multiply>
 8009fb4:	4629      	mov	r1, r5
 8009fb6:	900a      	str	r0, [sp, #40]	; 0x28
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f000 fde9 	bl	800ab90 <_Bfree>
 8009fbe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009fc0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fc2:	4615      	mov	r5, r2
 8009fc4:	1b1a      	subs	r2, r3, r4
 8009fc6:	d004      	beq.n	8009fd2 <_dtoa_r+0x6c2>
 8009fc8:	4629      	mov	r1, r5
 8009fca:	4630      	mov	r0, r6
 8009fcc:	f000 ffa2 	bl	800af14 <__pow5mult>
 8009fd0:	4605      	mov	r5, r0
 8009fd2:	2101      	movs	r1, #1
 8009fd4:	4630      	mov	r0, r6
 8009fd6:	f000 fedd 	bl	800ad94 <__i2b>
 8009fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	4604      	mov	r4, r0
 8009fe0:	f340 8081 	ble.w	800a0e6 <_dtoa_r+0x7d6>
 8009fe4:	461a      	mov	r2, r3
 8009fe6:	4601      	mov	r1, r0
 8009fe8:	4630      	mov	r0, r6
 8009fea:	f000 ff93 	bl	800af14 <__pow5mult>
 8009fee:	9b06      	ldr	r3, [sp, #24]
 8009ff0:	2b01      	cmp	r3, #1
 8009ff2:	4604      	mov	r4, r0
 8009ff4:	dd7a      	ble.n	800a0ec <_dtoa_r+0x7dc>
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	930a      	str	r3, [sp, #40]	; 0x28
 8009ffa:	6922      	ldr	r2, [r4, #16]
 8009ffc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800a000:	6910      	ldr	r0, [r2, #16]
 800a002:	f000 fe77 	bl	800acf4 <__hi0bits>
 800a006:	f1c0 0020 	rsb	r0, r0, #32
 800a00a:	9b05      	ldr	r3, [sp, #20]
 800a00c:	4418      	add	r0, r3
 800a00e:	f010 001f 	ands.w	r0, r0, #31
 800a012:	f000 808c 	beq.w	800a12e <_dtoa_r+0x81e>
 800a016:	f1c0 0220 	rsb	r2, r0, #32
 800a01a:	2a04      	cmp	r2, #4
 800a01c:	f340 8085 	ble.w	800a12a <_dtoa_r+0x81a>
 800a020:	f1c0 001c 	rsb	r0, r0, #28
 800a024:	9b04      	ldr	r3, [sp, #16]
 800a026:	4403      	add	r3, r0
 800a028:	9304      	str	r3, [sp, #16]
 800a02a:	9b05      	ldr	r3, [sp, #20]
 800a02c:	4403      	add	r3, r0
 800a02e:	4480      	add	r8, r0
 800a030:	9305      	str	r3, [sp, #20]
 800a032:	9b04      	ldr	r3, [sp, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	dd05      	ble.n	800a044 <_dtoa_r+0x734>
 800a038:	4629      	mov	r1, r5
 800a03a:	461a      	mov	r2, r3
 800a03c:	4630      	mov	r0, r6
 800a03e:	f000 ffc3 	bl	800afc8 <__lshift>
 800a042:	4605      	mov	r5, r0
 800a044:	9b05      	ldr	r3, [sp, #20]
 800a046:	2b00      	cmp	r3, #0
 800a048:	dd05      	ble.n	800a056 <_dtoa_r+0x746>
 800a04a:	4621      	mov	r1, r4
 800a04c:	461a      	mov	r2, r3
 800a04e:	4630      	mov	r0, r6
 800a050:	f000 ffba 	bl	800afc8 <__lshift>
 800a054:	4604      	mov	r4, r0
 800a056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d06a      	beq.n	800a132 <_dtoa_r+0x822>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4628      	mov	r0, r5
 800a060:	f001 f822 	bl	800b0a8 <__mcmp>
 800a064:	2800      	cmp	r0, #0
 800a066:	da64      	bge.n	800a132 <_dtoa_r+0x822>
 800a068:	2300      	movs	r3, #0
 800a06a:	4629      	mov	r1, r5
 800a06c:	220a      	movs	r2, #10
 800a06e:	4630      	mov	r0, r6
 800a070:	f000 fdb0 	bl	800abd4 <__multadd>
 800a074:	9b07      	ldr	r3, [sp, #28]
 800a076:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a07a:	4605      	mov	r5, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 8191 	beq.w	800a3a4 <_dtoa_r+0xa94>
 800a082:	4639      	mov	r1, r7
 800a084:	2300      	movs	r3, #0
 800a086:	220a      	movs	r2, #10
 800a088:	4630      	mov	r0, r6
 800a08a:	f000 fda3 	bl	800abd4 <__multadd>
 800a08e:	f1ba 0f00 	cmp.w	sl, #0
 800a092:	4607      	mov	r7, r0
 800a094:	f300 808d 	bgt.w	800a1b2 <_dtoa_r+0x8a2>
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	dc50      	bgt.n	800a140 <_dtoa_r+0x830>
 800a09e:	e088      	b.n	800a1b2 <_dtoa_r+0x8a2>
 800a0a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0a2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a0a6:	e751      	b.n	8009f4c <_dtoa_r+0x63c>
 800a0a8:	f109 34ff 	add.w	r4, r9, #4294967295
 800a0ac:	42a3      	cmp	r3, r4
 800a0ae:	bfbf      	itttt	lt
 800a0b0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800a0b2:	1ae3      	sublt	r3, r4, r3
 800a0b4:	18d2      	addlt	r2, r2, r3
 800a0b6:	9209      	strlt	r2, [sp, #36]	; 0x24
 800a0b8:	bfb6      	itet	lt
 800a0ba:	4623      	movlt	r3, r4
 800a0bc:	1b1c      	subge	r4, r3, r4
 800a0be:	2400      	movlt	r4, #0
 800a0c0:	f1b9 0f00 	cmp.w	r9, #0
 800a0c4:	bfb5      	itete	lt
 800a0c6:	9a04      	ldrlt	r2, [sp, #16]
 800a0c8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a0cc:	eba2 0809 	sublt.w	r8, r2, r9
 800a0d0:	464a      	movge	r2, r9
 800a0d2:	bfb8      	it	lt
 800a0d4:	2200      	movlt	r2, #0
 800a0d6:	e73c      	b.n	8009f52 <_dtoa_r+0x642>
 800a0d8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a0dc:	9f07      	ldr	r7, [sp, #28]
 800a0de:	461c      	mov	r4, r3
 800a0e0:	e744      	b.n	8009f6c <_dtoa_r+0x65c>
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	e770      	b.n	8009fc8 <_dtoa_r+0x6b8>
 800a0e6:	9b06      	ldr	r3, [sp, #24]
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	dc18      	bgt.n	800a11e <_dtoa_r+0x80e>
 800a0ec:	9b02      	ldr	r3, [sp, #8]
 800a0ee:	b9b3      	cbnz	r3, 800a11e <_dtoa_r+0x80e>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a0f6:	b9a2      	cbnz	r2, 800a122 <_dtoa_r+0x812>
 800a0f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a0fc:	0d12      	lsrs	r2, r2, #20
 800a0fe:	0512      	lsls	r2, r2, #20
 800a100:	b18a      	cbz	r2, 800a126 <_dtoa_r+0x816>
 800a102:	9b04      	ldr	r3, [sp, #16]
 800a104:	3301      	adds	r3, #1
 800a106:	9304      	str	r3, [sp, #16]
 800a108:	9b05      	ldr	r3, [sp, #20]
 800a10a:	3301      	adds	r3, #1
 800a10c:	9305      	str	r3, [sp, #20]
 800a10e:	2301      	movs	r3, #1
 800a110:	930a      	str	r3, [sp, #40]	; 0x28
 800a112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a114:	2b00      	cmp	r3, #0
 800a116:	f47f af70 	bne.w	8009ffa <_dtoa_r+0x6ea>
 800a11a:	2001      	movs	r0, #1
 800a11c:	e775      	b.n	800a00a <_dtoa_r+0x6fa>
 800a11e:	2300      	movs	r3, #0
 800a120:	e7f6      	b.n	800a110 <_dtoa_r+0x800>
 800a122:	9b02      	ldr	r3, [sp, #8]
 800a124:	e7f4      	b.n	800a110 <_dtoa_r+0x800>
 800a126:	920a      	str	r2, [sp, #40]	; 0x28
 800a128:	e7f3      	b.n	800a112 <_dtoa_r+0x802>
 800a12a:	d082      	beq.n	800a032 <_dtoa_r+0x722>
 800a12c:	4610      	mov	r0, r2
 800a12e:	301c      	adds	r0, #28
 800a130:	e778      	b.n	800a024 <_dtoa_r+0x714>
 800a132:	f1b9 0f00 	cmp.w	r9, #0
 800a136:	dc37      	bgt.n	800a1a8 <_dtoa_r+0x898>
 800a138:	9b06      	ldr	r3, [sp, #24]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	dd34      	ble.n	800a1a8 <_dtoa_r+0x898>
 800a13e:	46ca      	mov	sl, r9
 800a140:	f1ba 0f00 	cmp.w	sl, #0
 800a144:	d10d      	bne.n	800a162 <_dtoa_r+0x852>
 800a146:	4621      	mov	r1, r4
 800a148:	4653      	mov	r3, sl
 800a14a:	2205      	movs	r2, #5
 800a14c:	4630      	mov	r0, r6
 800a14e:	f000 fd41 	bl	800abd4 <__multadd>
 800a152:	4601      	mov	r1, r0
 800a154:	4604      	mov	r4, r0
 800a156:	4628      	mov	r0, r5
 800a158:	f000 ffa6 	bl	800b0a8 <__mcmp>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	f73f adeb 	bgt.w	8009d38 <_dtoa_r+0x428>
 800a162:	9b08      	ldr	r3, [sp, #32]
 800a164:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a168:	ea6f 0b03 	mvn.w	fp, r3
 800a16c:	f04f 0900 	mov.w	r9, #0
 800a170:	4621      	mov	r1, r4
 800a172:	4630      	mov	r0, r6
 800a174:	f000 fd0c 	bl	800ab90 <_Bfree>
 800a178:	2f00      	cmp	r7, #0
 800a17a:	f43f aea8 	beq.w	8009ece <_dtoa_r+0x5be>
 800a17e:	f1b9 0f00 	cmp.w	r9, #0
 800a182:	d005      	beq.n	800a190 <_dtoa_r+0x880>
 800a184:	45b9      	cmp	r9, r7
 800a186:	d003      	beq.n	800a190 <_dtoa_r+0x880>
 800a188:	4649      	mov	r1, r9
 800a18a:	4630      	mov	r0, r6
 800a18c:	f000 fd00 	bl	800ab90 <_Bfree>
 800a190:	4639      	mov	r1, r7
 800a192:	4630      	mov	r0, r6
 800a194:	f000 fcfc 	bl	800ab90 <_Bfree>
 800a198:	e699      	b.n	8009ece <_dtoa_r+0x5be>
 800a19a:	2400      	movs	r4, #0
 800a19c:	4627      	mov	r7, r4
 800a19e:	e7e0      	b.n	800a162 <_dtoa_r+0x852>
 800a1a0:	46bb      	mov	fp, r7
 800a1a2:	4604      	mov	r4, r0
 800a1a4:	4607      	mov	r7, r0
 800a1a6:	e5c7      	b.n	8009d38 <_dtoa_r+0x428>
 800a1a8:	9b07      	ldr	r3, [sp, #28]
 800a1aa:	46ca      	mov	sl, r9
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	f000 8100 	beq.w	800a3b2 <_dtoa_r+0xaa2>
 800a1b2:	f1b8 0f00 	cmp.w	r8, #0
 800a1b6:	dd05      	ble.n	800a1c4 <_dtoa_r+0x8b4>
 800a1b8:	4639      	mov	r1, r7
 800a1ba:	4642      	mov	r2, r8
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f000 ff03 	bl	800afc8 <__lshift>
 800a1c2:	4607      	mov	r7, r0
 800a1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d05d      	beq.n	800a286 <_dtoa_r+0x976>
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f000 fc9f 	bl	800ab10 <_Balloc>
 800a1d2:	4680      	mov	r8, r0
 800a1d4:	b928      	cbnz	r0, 800a1e2 <_dtoa_r+0x8d2>
 800a1d6:	4b82      	ldr	r3, [pc, #520]	; (800a3e0 <_dtoa_r+0xad0>)
 800a1d8:	4602      	mov	r2, r0
 800a1da:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a1de:	f7ff bbaf 	b.w	8009940 <_dtoa_r+0x30>
 800a1e2:	693a      	ldr	r2, [r7, #16]
 800a1e4:	3202      	adds	r2, #2
 800a1e6:	0092      	lsls	r2, r2, #2
 800a1e8:	f107 010c 	add.w	r1, r7, #12
 800a1ec:	300c      	adds	r0, #12
 800a1ee:	f7fd fd33 	bl	8007c58 <memcpy>
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	4641      	mov	r1, r8
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f000 fee6 	bl	800afc8 <__lshift>
 800a1fc:	9b01      	ldr	r3, [sp, #4]
 800a1fe:	3301      	adds	r3, #1
 800a200:	9304      	str	r3, [sp, #16]
 800a202:	9b01      	ldr	r3, [sp, #4]
 800a204:	4453      	add	r3, sl
 800a206:	9308      	str	r3, [sp, #32]
 800a208:	9b02      	ldr	r3, [sp, #8]
 800a20a:	f003 0301 	and.w	r3, r3, #1
 800a20e:	46b9      	mov	r9, r7
 800a210:	9307      	str	r3, [sp, #28]
 800a212:	4607      	mov	r7, r0
 800a214:	9b04      	ldr	r3, [sp, #16]
 800a216:	4621      	mov	r1, r4
 800a218:	3b01      	subs	r3, #1
 800a21a:	4628      	mov	r0, r5
 800a21c:	9302      	str	r3, [sp, #8]
 800a21e:	f7ff faeb 	bl	80097f8 <quorem>
 800a222:	4603      	mov	r3, r0
 800a224:	3330      	adds	r3, #48	; 0x30
 800a226:	9005      	str	r0, [sp, #20]
 800a228:	4649      	mov	r1, r9
 800a22a:	4628      	mov	r0, r5
 800a22c:	9309      	str	r3, [sp, #36]	; 0x24
 800a22e:	f000 ff3b 	bl	800b0a8 <__mcmp>
 800a232:	463a      	mov	r2, r7
 800a234:	4682      	mov	sl, r0
 800a236:	4621      	mov	r1, r4
 800a238:	4630      	mov	r0, r6
 800a23a:	f000 ff51 	bl	800b0e0 <__mdiff>
 800a23e:	68c2      	ldr	r2, [r0, #12]
 800a240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a242:	4680      	mov	r8, r0
 800a244:	bb0a      	cbnz	r2, 800a28a <_dtoa_r+0x97a>
 800a246:	4601      	mov	r1, r0
 800a248:	4628      	mov	r0, r5
 800a24a:	f000 ff2d 	bl	800b0a8 <__mcmp>
 800a24e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a250:	4602      	mov	r2, r0
 800a252:	4641      	mov	r1, r8
 800a254:	4630      	mov	r0, r6
 800a256:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a25a:	f000 fc99 	bl	800ab90 <_Bfree>
 800a25e:	9b06      	ldr	r3, [sp, #24]
 800a260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a262:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a266:	ea43 0102 	orr.w	r1, r3, r2
 800a26a:	9b07      	ldr	r3, [sp, #28]
 800a26c:	430b      	orrs	r3, r1
 800a26e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a270:	d10d      	bne.n	800a28e <_dtoa_r+0x97e>
 800a272:	2b39      	cmp	r3, #57	; 0x39
 800a274:	d029      	beq.n	800a2ca <_dtoa_r+0x9ba>
 800a276:	f1ba 0f00 	cmp.w	sl, #0
 800a27a:	dd01      	ble.n	800a280 <_dtoa_r+0x970>
 800a27c:	9b05      	ldr	r3, [sp, #20]
 800a27e:	3331      	adds	r3, #49	; 0x31
 800a280:	9a02      	ldr	r2, [sp, #8]
 800a282:	7013      	strb	r3, [r2, #0]
 800a284:	e774      	b.n	800a170 <_dtoa_r+0x860>
 800a286:	4638      	mov	r0, r7
 800a288:	e7b8      	b.n	800a1fc <_dtoa_r+0x8ec>
 800a28a:	2201      	movs	r2, #1
 800a28c:	e7e1      	b.n	800a252 <_dtoa_r+0x942>
 800a28e:	f1ba 0f00 	cmp.w	sl, #0
 800a292:	db06      	blt.n	800a2a2 <_dtoa_r+0x992>
 800a294:	9906      	ldr	r1, [sp, #24]
 800a296:	ea41 0a0a 	orr.w	sl, r1, sl
 800a29a:	9907      	ldr	r1, [sp, #28]
 800a29c:	ea5a 0101 	orrs.w	r1, sl, r1
 800a2a0:	d120      	bne.n	800a2e4 <_dtoa_r+0x9d4>
 800a2a2:	2a00      	cmp	r2, #0
 800a2a4:	ddec      	ble.n	800a280 <_dtoa_r+0x970>
 800a2a6:	4629      	mov	r1, r5
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	9304      	str	r3, [sp, #16]
 800a2ae:	f000 fe8b 	bl	800afc8 <__lshift>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4605      	mov	r5, r0
 800a2b6:	f000 fef7 	bl	800b0a8 <__mcmp>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	9b04      	ldr	r3, [sp, #16]
 800a2be:	dc02      	bgt.n	800a2c6 <_dtoa_r+0x9b6>
 800a2c0:	d1de      	bne.n	800a280 <_dtoa_r+0x970>
 800a2c2:	07da      	lsls	r2, r3, #31
 800a2c4:	d5dc      	bpl.n	800a280 <_dtoa_r+0x970>
 800a2c6:	2b39      	cmp	r3, #57	; 0x39
 800a2c8:	d1d8      	bne.n	800a27c <_dtoa_r+0x96c>
 800a2ca:	9a02      	ldr	r2, [sp, #8]
 800a2cc:	2339      	movs	r3, #57	; 0x39
 800a2ce:	7013      	strb	r3, [r2, #0]
 800a2d0:	4643      	mov	r3, r8
 800a2d2:	4698      	mov	r8, r3
 800a2d4:	3b01      	subs	r3, #1
 800a2d6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a2da:	2a39      	cmp	r2, #57	; 0x39
 800a2dc:	d051      	beq.n	800a382 <_dtoa_r+0xa72>
 800a2de:	3201      	adds	r2, #1
 800a2e0:	701a      	strb	r2, [r3, #0]
 800a2e2:	e745      	b.n	800a170 <_dtoa_r+0x860>
 800a2e4:	2a00      	cmp	r2, #0
 800a2e6:	dd03      	ble.n	800a2f0 <_dtoa_r+0x9e0>
 800a2e8:	2b39      	cmp	r3, #57	; 0x39
 800a2ea:	d0ee      	beq.n	800a2ca <_dtoa_r+0x9ba>
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	e7c7      	b.n	800a280 <_dtoa_r+0x970>
 800a2f0:	9a04      	ldr	r2, [sp, #16]
 800a2f2:	9908      	ldr	r1, [sp, #32]
 800a2f4:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2f8:	428a      	cmp	r2, r1
 800a2fa:	d02b      	beq.n	800a354 <_dtoa_r+0xa44>
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	2300      	movs	r3, #0
 800a300:	220a      	movs	r2, #10
 800a302:	4630      	mov	r0, r6
 800a304:	f000 fc66 	bl	800abd4 <__multadd>
 800a308:	45b9      	cmp	r9, r7
 800a30a:	4605      	mov	r5, r0
 800a30c:	f04f 0300 	mov.w	r3, #0
 800a310:	f04f 020a 	mov.w	r2, #10
 800a314:	4649      	mov	r1, r9
 800a316:	4630      	mov	r0, r6
 800a318:	d107      	bne.n	800a32a <_dtoa_r+0xa1a>
 800a31a:	f000 fc5b 	bl	800abd4 <__multadd>
 800a31e:	4681      	mov	r9, r0
 800a320:	4607      	mov	r7, r0
 800a322:	9b04      	ldr	r3, [sp, #16]
 800a324:	3301      	adds	r3, #1
 800a326:	9304      	str	r3, [sp, #16]
 800a328:	e774      	b.n	800a214 <_dtoa_r+0x904>
 800a32a:	f000 fc53 	bl	800abd4 <__multadd>
 800a32e:	4639      	mov	r1, r7
 800a330:	4681      	mov	r9, r0
 800a332:	2300      	movs	r3, #0
 800a334:	220a      	movs	r2, #10
 800a336:	4630      	mov	r0, r6
 800a338:	f000 fc4c 	bl	800abd4 <__multadd>
 800a33c:	4607      	mov	r7, r0
 800a33e:	e7f0      	b.n	800a322 <_dtoa_r+0xa12>
 800a340:	f1ba 0f00 	cmp.w	sl, #0
 800a344:	9a01      	ldr	r2, [sp, #4]
 800a346:	bfcc      	ite	gt
 800a348:	46d0      	movgt	r8, sl
 800a34a:	f04f 0801 	movle.w	r8, #1
 800a34e:	4490      	add	r8, r2
 800a350:	f04f 0900 	mov.w	r9, #0
 800a354:	4629      	mov	r1, r5
 800a356:	2201      	movs	r2, #1
 800a358:	4630      	mov	r0, r6
 800a35a:	9302      	str	r3, [sp, #8]
 800a35c:	f000 fe34 	bl	800afc8 <__lshift>
 800a360:	4621      	mov	r1, r4
 800a362:	4605      	mov	r5, r0
 800a364:	f000 fea0 	bl	800b0a8 <__mcmp>
 800a368:	2800      	cmp	r0, #0
 800a36a:	dcb1      	bgt.n	800a2d0 <_dtoa_r+0x9c0>
 800a36c:	d102      	bne.n	800a374 <_dtoa_r+0xa64>
 800a36e:	9b02      	ldr	r3, [sp, #8]
 800a370:	07db      	lsls	r3, r3, #31
 800a372:	d4ad      	bmi.n	800a2d0 <_dtoa_r+0x9c0>
 800a374:	4643      	mov	r3, r8
 800a376:	4698      	mov	r8, r3
 800a378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a37c:	2a30      	cmp	r2, #48	; 0x30
 800a37e:	d0fa      	beq.n	800a376 <_dtoa_r+0xa66>
 800a380:	e6f6      	b.n	800a170 <_dtoa_r+0x860>
 800a382:	9a01      	ldr	r2, [sp, #4]
 800a384:	429a      	cmp	r2, r3
 800a386:	d1a4      	bne.n	800a2d2 <_dtoa_r+0x9c2>
 800a388:	f10b 0b01 	add.w	fp, fp, #1
 800a38c:	2331      	movs	r3, #49	; 0x31
 800a38e:	e778      	b.n	800a282 <_dtoa_r+0x972>
 800a390:	4b14      	ldr	r3, [pc, #80]	; (800a3e4 <_dtoa_r+0xad4>)
 800a392:	f7ff bb27 	b.w	80099e4 <_dtoa_r+0xd4>
 800a396:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a398:	2b00      	cmp	r3, #0
 800a39a:	f47f ab03 	bne.w	80099a4 <_dtoa_r+0x94>
 800a39e:	4b12      	ldr	r3, [pc, #72]	; (800a3e8 <_dtoa_r+0xad8>)
 800a3a0:	f7ff bb20 	b.w	80099e4 <_dtoa_r+0xd4>
 800a3a4:	f1ba 0f00 	cmp.w	sl, #0
 800a3a8:	dc03      	bgt.n	800a3b2 <_dtoa_r+0xaa2>
 800a3aa:	9b06      	ldr	r3, [sp, #24]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	f73f aec7 	bgt.w	800a140 <_dtoa_r+0x830>
 800a3b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a3b6:	4621      	mov	r1, r4
 800a3b8:	4628      	mov	r0, r5
 800a3ba:	f7ff fa1d 	bl	80097f8 <quorem>
 800a3be:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a3c2:	f808 3b01 	strb.w	r3, [r8], #1
 800a3c6:	9a01      	ldr	r2, [sp, #4]
 800a3c8:	eba8 0202 	sub.w	r2, r8, r2
 800a3cc:	4592      	cmp	sl, r2
 800a3ce:	ddb7      	ble.n	800a340 <_dtoa_r+0xa30>
 800a3d0:	4629      	mov	r1, r5
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	220a      	movs	r2, #10
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	f000 fbfc 	bl	800abd4 <__multadd>
 800a3dc:	4605      	mov	r5, r0
 800a3de:	e7ea      	b.n	800a3b6 <_dtoa_r+0xaa6>
 800a3e0:	0800c560 	.word	0x0800c560
 800a3e4:	0800c364 	.word	0x0800c364
 800a3e8:	0800c4e1 	.word	0x0800c4e1

0800a3ec <rshift>:
 800a3ec:	6903      	ldr	r3, [r0, #16]
 800a3ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a3f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a3fa:	f100 0414 	add.w	r4, r0, #20
 800a3fe:	dd45      	ble.n	800a48c <rshift+0xa0>
 800a400:	f011 011f 	ands.w	r1, r1, #31
 800a404:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a408:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a40c:	d10c      	bne.n	800a428 <rshift+0x3c>
 800a40e:	f100 0710 	add.w	r7, r0, #16
 800a412:	4629      	mov	r1, r5
 800a414:	42b1      	cmp	r1, r6
 800a416:	d334      	bcc.n	800a482 <rshift+0x96>
 800a418:	1a9b      	subs	r3, r3, r2
 800a41a:	009b      	lsls	r3, r3, #2
 800a41c:	1eea      	subs	r2, r5, #3
 800a41e:	4296      	cmp	r6, r2
 800a420:	bf38      	it	cc
 800a422:	2300      	movcc	r3, #0
 800a424:	4423      	add	r3, r4
 800a426:	e015      	b.n	800a454 <rshift+0x68>
 800a428:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a42c:	f1c1 0820 	rsb	r8, r1, #32
 800a430:	40cf      	lsrs	r7, r1
 800a432:	f105 0e04 	add.w	lr, r5, #4
 800a436:	46a1      	mov	r9, r4
 800a438:	4576      	cmp	r6, lr
 800a43a:	46f4      	mov	ip, lr
 800a43c:	d815      	bhi.n	800a46a <rshift+0x7e>
 800a43e:	1a9a      	subs	r2, r3, r2
 800a440:	0092      	lsls	r2, r2, #2
 800a442:	3a04      	subs	r2, #4
 800a444:	3501      	adds	r5, #1
 800a446:	42ae      	cmp	r6, r5
 800a448:	bf38      	it	cc
 800a44a:	2200      	movcc	r2, #0
 800a44c:	18a3      	adds	r3, r4, r2
 800a44e:	50a7      	str	r7, [r4, r2]
 800a450:	b107      	cbz	r7, 800a454 <rshift+0x68>
 800a452:	3304      	adds	r3, #4
 800a454:	1b1a      	subs	r2, r3, r4
 800a456:	42a3      	cmp	r3, r4
 800a458:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a45c:	bf08      	it	eq
 800a45e:	2300      	moveq	r3, #0
 800a460:	6102      	str	r2, [r0, #16]
 800a462:	bf08      	it	eq
 800a464:	6143      	streq	r3, [r0, #20]
 800a466:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a46a:	f8dc c000 	ldr.w	ip, [ip]
 800a46e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a472:	ea4c 0707 	orr.w	r7, ip, r7
 800a476:	f849 7b04 	str.w	r7, [r9], #4
 800a47a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a47e:	40cf      	lsrs	r7, r1
 800a480:	e7da      	b.n	800a438 <rshift+0x4c>
 800a482:	f851 cb04 	ldr.w	ip, [r1], #4
 800a486:	f847 cf04 	str.w	ip, [r7, #4]!
 800a48a:	e7c3      	b.n	800a414 <rshift+0x28>
 800a48c:	4623      	mov	r3, r4
 800a48e:	e7e1      	b.n	800a454 <rshift+0x68>

0800a490 <__hexdig_fun>:
 800a490:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a494:	2b09      	cmp	r3, #9
 800a496:	d802      	bhi.n	800a49e <__hexdig_fun+0xe>
 800a498:	3820      	subs	r0, #32
 800a49a:	b2c0      	uxtb	r0, r0
 800a49c:	4770      	bx	lr
 800a49e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a4a2:	2b05      	cmp	r3, #5
 800a4a4:	d801      	bhi.n	800a4aa <__hexdig_fun+0x1a>
 800a4a6:	3847      	subs	r0, #71	; 0x47
 800a4a8:	e7f7      	b.n	800a49a <__hexdig_fun+0xa>
 800a4aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a4ae:	2b05      	cmp	r3, #5
 800a4b0:	d801      	bhi.n	800a4b6 <__hexdig_fun+0x26>
 800a4b2:	3827      	subs	r0, #39	; 0x27
 800a4b4:	e7f1      	b.n	800a49a <__hexdig_fun+0xa>
 800a4b6:	2000      	movs	r0, #0
 800a4b8:	4770      	bx	lr
	...

0800a4bc <__gethex>:
 800a4bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c0:	ed2d 8b02 	vpush	{d8}
 800a4c4:	b089      	sub	sp, #36	; 0x24
 800a4c6:	ee08 0a10 	vmov	s16, r0
 800a4ca:	9304      	str	r3, [sp, #16]
 800a4cc:	4bb4      	ldr	r3, [pc, #720]	; (800a7a0 <__gethex+0x2e4>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	9301      	str	r3, [sp, #4]
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	468b      	mov	fp, r1
 800a4d6:	4690      	mov	r8, r2
 800a4d8:	f7f5 feb2 	bl	8000240 <strlen>
 800a4dc:	9b01      	ldr	r3, [sp, #4]
 800a4de:	f8db 2000 	ldr.w	r2, [fp]
 800a4e2:	4403      	add	r3, r0
 800a4e4:	4682      	mov	sl, r0
 800a4e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a4ea:	9305      	str	r3, [sp, #20]
 800a4ec:	1c93      	adds	r3, r2, #2
 800a4ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a4f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a4f6:	32fe      	adds	r2, #254	; 0xfe
 800a4f8:	18d1      	adds	r1, r2, r3
 800a4fa:	461f      	mov	r7, r3
 800a4fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a500:	9100      	str	r1, [sp, #0]
 800a502:	2830      	cmp	r0, #48	; 0x30
 800a504:	d0f8      	beq.n	800a4f8 <__gethex+0x3c>
 800a506:	f7ff ffc3 	bl	800a490 <__hexdig_fun>
 800a50a:	4604      	mov	r4, r0
 800a50c:	2800      	cmp	r0, #0
 800a50e:	d13a      	bne.n	800a586 <__gethex+0xca>
 800a510:	9901      	ldr	r1, [sp, #4]
 800a512:	4652      	mov	r2, sl
 800a514:	4638      	mov	r0, r7
 800a516:	f001 f933 	bl	800b780 <strncmp>
 800a51a:	4605      	mov	r5, r0
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d168      	bne.n	800a5f2 <__gethex+0x136>
 800a520:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a524:	eb07 060a 	add.w	r6, r7, sl
 800a528:	f7ff ffb2 	bl	800a490 <__hexdig_fun>
 800a52c:	2800      	cmp	r0, #0
 800a52e:	d062      	beq.n	800a5f6 <__gethex+0x13a>
 800a530:	4633      	mov	r3, r6
 800a532:	7818      	ldrb	r0, [r3, #0]
 800a534:	2830      	cmp	r0, #48	; 0x30
 800a536:	461f      	mov	r7, r3
 800a538:	f103 0301 	add.w	r3, r3, #1
 800a53c:	d0f9      	beq.n	800a532 <__gethex+0x76>
 800a53e:	f7ff ffa7 	bl	800a490 <__hexdig_fun>
 800a542:	2301      	movs	r3, #1
 800a544:	fab0 f480 	clz	r4, r0
 800a548:	0964      	lsrs	r4, r4, #5
 800a54a:	4635      	mov	r5, r6
 800a54c:	9300      	str	r3, [sp, #0]
 800a54e:	463a      	mov	r2, r7
 800a550:	4616      	mov	r6, r2
 800a552:	3201      	adds	r2, #1
 800a554:	7830      	ldrb	r0, [r6, #0]
 800a556:	f7ff ff9b 	bl	800a490 <__hexdig_fun>
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d1f8      	bne.n	800a550 <__gethex+0x94>
 800a55e:	9901      	ldr	r1, [sp, #4]
 800a560:	4652      	mov	r2, sl
 800a562:	4630      	mov	r0, r6
 800a564:	f001 f90c 	bl	800b780 <strncmp>
 800a568:	b980      	cbnz	r0, 800a58c <__gethex+0xd0>
 800a56a:	b94d      	cbnz	r5, 800a580 <__gethex+0xc4>
 800a56c:	eb06 050a 	add.w	r5, r6, sl
 800a570:	462a      	mov	r2, r5
 800a572:	4616      	mov	r6, r2
 800a574:	3201      	adds	r2, #1
 800a576:	7830      	ldrb	r0, [r6, #0]
 800a578:	f7ff ff8a 	bl	800a490 <__hexdig_fun>
 800a57c:	2800      	cmp	r0, #0
 800a57e:	d1f8      	bne.n	800a572 <__gethex+0xb6>
 800a580:	1bad      	subs	r5, r5, r6
 800a582:	00ad      	lsls	r5, r5, #2
 800a584:	e004      	b.n	800a590 <__gethex+0xd4>
 800a586:	2400      	movs	r4, #0
 800a588:	4625      	mov	r5, r4
 800a58a:	e7e0      	b.n	800a54e <__gethex+0x92>
 800a58c:	2d00      	cmp	r5, #0
 800a58e:	d1f7      	bne.n	800a580 <__gethex+0xc4>
 800a590:	7833      	ldrb	r3, [r6, #0]
 800a592:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a596:	2b50      	cmp	r3, #80	; 0x50
 800a598:	d13b      	bne.n	800a612 <__gethex+0x156>
 800a59a:	7873      	ldrb	r3, [r6, #1]
 800a59c:	2b2b      	cmp	r3, #43	; 0x2b
 800a59e:	d02c      	beq.n	800a5fa <__gethex+0x13e>
 800a5a0:	2b2d      	cmp	r3, #45	; 0x2d
 800a5a2:	d02e      	beq.n	800a602 <__gethex+0x146>
 800a5a4:	1c71      	adds	r1, r6, #1
 800a5a6:	f04f 0900 	mov.w	r9, #0
 800a5aa:	7808      	ldrb	r0, [r1, #0]
 800a5ac:	f7ff ff70 	bl	800a490 <__hexdig_fun>
 800a5b0:	1e43      	subs	r3, r0, #1
 800a5b2:	b2db      	uxtb	r3, r3
 800a5b4:	2b18      	cmp	r3, #24
 800a5b6:	d82c      	bhi.n	800a612 <__gethex+0x156>
 800a5b8:	f1a0 0210 	sub.w	r2, r0, #16
 800a5bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a5c0:	f7ff ff66 	bl	800a490 <__hexdig_fun>
 800a5c4:	1e43      	subs	r3, r0, #1
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b18      	cmp	r3, #24
 800a5ca:	d91d      	bls.n	800a608 <__gethex+0x14c>
 800a5cc:	f1b9 0f00 	cmp.w	r9, #0
 800a5d0:	d000      	beq.n	800a5d4 <__gethex+0x118>
 800a5d2:	4252      	negs	r2, r2
 800a5d4:	4415      	add	r5, r2
 800a5d6:	f8cb 1000 	str.w	r1, [fp]
 800a5da:	b1e4      	cbz	r4, 800a616 <__gethex+0x15a>
 800a5dc:	9b00      	ldr	r3, [sp, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	bf14      	ite	ne
 800a5e2:	2700      	movne	r7, #0
 800a5e4:	2706      	moveq	r7, #6
 800a5e6:	4638      	mov	r0, r7
 800a5e8:	b009      	add	sp, #36	; 0x24
 800a5ea:	ecbd 8b02 	vpop	{d8}
 800a5ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5f2:	463e      	mov	r6, r7
 800a5f4:	4625      	mov	r5, r4
 800a5f6:	2401      	movs	r4, #1
 800a5f8:	e7ca      	b.n	800a590 <__gethex+0xd4>
 800a5fa:	f04f 0900 	mov.w	r9, #0
 800a5fe:	1cb1      	adds	r1, r6, #2
 800a600:	e7d3      	b.n	800a5aa <__gethex+0xee>
 800a602:	f04f 0901 	mov.w	r9, #1
 800a606:	e7fa      	b.n	800a5fe <__gethex+0x142>
 800a608:	230a      	movs	r3, #10
 800a60a:	fb03 0202 	mla	r2, r3, r2, r0
 800a60e:	3a10      	subs	r2, #16
 800a610:	e7d4      	b.n	800a5bc <__gethex+0x100>
 800a612:	4631      	mov	r1, r6
 800a614:	e7df      	b.n	800a5d6 <__gethex+0x11a>
 800a616:	1bf3      	subs	r3, r6, r7
 800a618:	3b01      	subs	r3, #1
 800a61a:	4621      	mov	r1, r4
 800a61c:	2b07      	cmp	r3, #7
 800a61e:	dc0b      	bgt.n	800a638 <__gethex+0x17c>
 800a620:	ee18 0a10 	vmov	r0, s16
 800a624:	f000 fa74 	bl	800ab10 <_Balloc>
 800a628:	4604      	mov	r4, r0
 800a62a:	b940      	cbnz	r0, 800a63e <__gethex+0x182>
 800a62c:	4b5d      	ldr	r3, [pc, #372]	; (800a7a4 <__gethex+0x2e8>)
 800a62e:	4602      	mov	r2, r0
 800a630:	21de      	movs	r1, #222	; 0xde
 800a632:	485d      	ldr	r0, [pc, #372]	; (800a7a8 <__gethex+0x2ec>)
 800a634:	f001 f8c6 	bl	800b7c4 <__assert_func>
 800a638:	3101      	adds	r1, #1
 800a63a:	105b      	asrs	r3, r3, #1
 800a63c:	e7ee      	b.n	800a61c <__gethex+0x160>
 800a63e:	f100 0914 	add.w	r9, r0, #20
 800a642:	f04f 0b00 	mov.w	fp, #0
 800a646:	f1ca 0301 	rsb	r3, sl, #1
 800a64a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a64e:	f8cd b000 	str.w	fp, [sp]
 800a652:	9306      	str	r3, [sp, #24]
 800a654:	42b7      	cmp	r7, r6
 800a656:	d340      	bcc.n	800a6da <__gethex+0x21e>
 800a658:	9802      	ldr	r0, [sp, #8]
 800a65a:	9b00      	ldr	r3, [sp, #0]
 800a65c:	f840 3b04 	str.w	r3, [r0], #4
 800a660:	eba0 0009 	sub.w	r0, r0, r9
 800a664:	1080      	asrs	r0, r0, #2
 800a666:	0146      	lsls	r6, r0, #5
 800a668:	6120      	str	r0, [r4, #16]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 fb42 	bl	800acf4 <__hi0bits>
 800a670:	1a30      	subs	r0, r6, r0
 800a672:	f8d8 6000 	ldr.w	r6, [r8]
 800a676:	42b0      	cmp	r0, r6
 800a678:	dd63      	ble.n	800a742 <__gethex+0x286>
 800a67a:	1b87      	subs	r7, r0, r6
 800a67c:	4639      	mov	r1, r7
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 fee3 	bl	800b44a <__any_on>
 800a684:	4682      	mov	sl, r0
 800a686:	b1a8      	cbz	r0, 800a6b4 <__gethex+0x1f8>
 800a688:	1e7b      	subs	r3, r7, #1
 800a68a:	1159      	asrs	r1, r3, #5
 800a68c:	f003 021f 	and.w	r2, r3, #31
 800a690:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a694:	f04f 0a01 	mov.w	sl, #1
 800a698:	fa0a f202 	lsl.w	r2, sl, r2
 800a69c:	420a      	tst	r2, r1
 800a69e:	d009      	beq.n	800a6b4 <__gethex+0x1f8>
 800a6a0:	4553      	cmp	r3, sl
 800a6a2:	dd05      	ble.n	800a6b0 <__gethex+0x1f4>
 800a6a4:	1eb9      	subs	r1, r7, #2
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f000 fecf 	bl	800b44a <__any_on>
 800a6ac:	2800      	cmp	r0, #0
 800a6ae:	d145      	bne.n	800a73c <__gethex+0x280>
 800a6b0:	f04f 0a02 	mov.w	sl, #2
 800a6b4:	4639      	mov	r1, r7
 800a6b6:	4620      	mov	r0, r4
 800a6b8:	f7ff fe98 	bl	800a3ec <rshift>
 800a6bc:	443d      	add	r5, r7
 800a6be:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a6c2:	42ab      	cmp	r3, r5
 800a6c4:	da4c      	bge.n	800a760 <__gethex+0x2a4>
 800a6c6:	ee18 0a10 	vmov	r0, s16
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	f000 fa60 	bl	800ab90 <_Bfree>
 800a6d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6013      	str	r3, [r2, #0]
 800a6d6:	27a3      	movs	r7, #163	; 0xa3
 800a6d8:	e785      	b.n	800a5e6 <__gethex+0x12a>
 800a6da:	1e73      	subs	r3, r6, #1
 800a6dc:	9a05      	ldr	r2, [sp, #20]
 800a6de:	9303      	str	r3, [sp, #12]
 800a6e0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a6e4:	4293      	cmp	r3, r2
 800a6e6:	d019      	beq.n	800a71c <__gethex+0x260>
 800a6e8:	f1bb 0f20 	cmp.w	fp, #32
 800a6ec:	d107      	bne.n	800a6fe <__gethex+0x242>
 800a6ee:	9b02      	ldr	r3, [sp, #8]
 800a6f0:	9a00      	ldr	r2, [sp, #0]
 800a6f2:	f843 2b04 	str.w	r2, [r3], #4
 800a6f6:	9302      	str	r3, [sp, #8]
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	9300      	str	r3, [sp, #0]
 800a6fc:	469b      	mov	fp, r3
 800a6fe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a702:	f7ff fec5 	bl	800a490 <__hexdig_fun>
 800a706:	9b00      	ldr	r3, [sp, #0]
 800a708:	f000 000f 	and.w	r0, r0, #15
 800a70c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a710:	4303      	orrs	r3, r0
 800a712:	9300      	str	r3, [sp, #0]
 800a714:	f10b 0b04 	add.w	fp, fp, #4
 800a718:	9b03      	ldr	r3, [sp, #12]
 800a71a:	e00d      	b.n	800a738 <__gethex+0x27c>
 800a71c:	9b03      	ldr	r3, [sp, #12]
 800a71e:	9a06      	ldr	r2, [sp, #24]
 800a720:	4413      	add	r3, r2
 800a722:	42bb      	cmp	r3, r7
 800a724:	d3e0      	bcc.n	800a6e8 <__gethex+0x22c>
 800a726:	4618      	mov	r0, r3
 800a728:	9901      	ldr	r1, [sp, #4]
 800a72a:	9307      	str	r3, [sp, #28]
 800a72c:	4652      	mov	r2, sl
 800a72e:	f001 f827 	bl	800b780 <strncmp>
 800a732:	9b07      	ldr	r3, [sp, #28]
 800a734:	2800      	cmp	r0, #0
 800a736:	d1d7      	bne.n	800a6e8 <__gethex+0x22c>
 800a738:	461e      	mov	r6, r3
 800a73a:	e78b      	b.n	800a654 <__gethex+0x198>
 800a73c:	f04f 0a03 	mov.w	sl, #3
 800a740:	e7b8      	b.n	800a6b4 <__gethex+0x1f8>
 800a742:	da0a      	bge.n	800a75a <__gethex+0x29e>
 800a744:	1a37      	subs	r7, r6, r0
 800a746:	4621      	mov	r1, r4
 800a748:	ee18 0a10 	vmov	r0, s16
 800a74c:	463a      	mov	r2, r7
 800a74e:	f000 fc3b 	bl	800afc8 <__lshift>
 800a752:	1bed      	subs	r5, r5, r7
 800a754:	4604      	mov	r4, r0
 800a756:	f100 0914 	add.w	r9, r0, #20
 800a75a:	f04f 0a00 	mov.w	sl, #0
 800a75e:	e7ae      	b.n	800a6be <__gethex+0x202>
 800a760:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a764:	42a8      	cmp	r0, r5
 800a766:	dd72      	ble.n	800a84e <__gethex+0x392>
 800a768:	1b45      	subs	r5, r0, r5
 800a76a:	42ae      	cmp	r6, r5
 800a76c:	dc36      	bgt.n	800a7dc <__gethex+0x320>
 800a76e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a772:	2b02      	cmp	r3, #2
 800a774:	d02a      	beq.n	800a7cc <__gethex+0x310>
 800a776:	2b03      	cmp	r3, #3
 800a778:	d02c      	beq.n	800a7d4 <__gethex+0x318>
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d11c      	bne.n	800a7b8 <__gethex+0x2fc>
 800a77e:	42ae      	cmp	r6, r5
 800a780:	d11a      	bne.n	800a7b8 <__gethex+0x2fc>
 800a782:	2e01      	cmp	r6, #1
 800a784:	d112      	bne.n	800a7ac <__gethex+0x2f0>
 800a786:	9a04      	ldr	r2, [sp, #16]
 800a788:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a78c:	6013      	str	r3, [r2, #0]
 800a78e:	2301      	movs	r3, #1
 800a790:	6123      	str	r3, [r4, #16]
 800a792:	f8c9 3000 	str.w	r3, [r9]
 800a796:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a798:	2762      	movs	r7, #98	; 0x62
 800a79a:	601c      	str	r4, [r3, #0]
 800a79c:	e723      	b.n	800a5e6 <__gethex+0x12a>
 800a79e:	bf00      	nop
 800a7a0:	0800c5d8 	.word	0x0800c5d8
 800a7a4:	0800c560 	.word	0x0800c560
 800a7a8:	0800c571 	.word	0x0800c571
 800a7ac:	1e71      	subs	r1, r6, #1
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fe4b 	bl	800b44a <__any_on>
 800a7b4:	2800      	cmp	r0, #0
 800a7b6:	d1e6      	bne.n	800a786 <__gethex+0x2ca>
 800a7b8:	ee18 0a10 	vmov	r0, s16
 800a7bc:	4621      	mov	r1, r4
 800a7be:	f000 f9e7 	bl	800ab90 <_Bfree>
 800a7c2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	6013      	str	r3, [r2, #0]
 800a7c8:	2750      	movs	r7, #80	; 0x50
 800a7ca:	e70c      	b.n	800a5e6 <__gethex+0x12a>
 800a7cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1f2      	bne.n	800a7b8 <__gethex+0x2fc>
 800a7d2:	e7d8      	b.n	800a786 <__gethex+0x2ca>
 800a7d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1d5      	bne.n	800a786 <__gethex+0x2ca>
 800a7da:	e7ed      	b.n	800a7b8 <__gethex+0x2fc>
 800a7dc:	1e6f      	subs	r7, r5, #1
 800a7de:	f1ba 0f00 	cmp.w	sl, #0
 800a7e2:	d131      	bne.n	800a848 <__gethex+0x38c>
 800a7e4:	b127      	cbz	r7, 800a7f0 <__gethex+0x334>
 800a7e6:	4639      	mov	r1, r7
 800a7e8:	4620      	mov	r0, r4
 800a7ea:	f000 fe2e 	bl	800b44a <__any_on>
 800a7ee:	4682      	mov	sl, r0
 800a7f0:	117b      	asrs	r3, r7, #5
 800a7f2:	2101      	movs	r1, #1
 800a7f4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a7f8:	f007 071f 	and.w	r7, r7, #31
 800a7fc:	fa01 f707 	lsl.w	r7, r1, r7
 800a800:	421f      	tst	r7, r3
 800a802:	4629      	mov	r1, r5
 800a804:	4620      	mov	r0, r4
 800a806:	bf18      	it	ne
 800a808:	f04a 0a02 	orrne.w	sl, sl, #2
 800a80c:	1b76      	subs	r6, r6, r5
 800a80e:	f7ff fded 	bl	800a3ec <rshift>
 800a812:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a816:	2702      	movs	r7, #2
 800a818:	f1ba 0f00 	cmp.w	sl, #0
 800a81c:	d048      	beq.n	800a8b0 <__gethex+0x3f4>
 800a81e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a822:	2b02      	cmp	r3, #2
 800a824:	d015      	beq.n	800a852 <__gethex+0x396>
 800a826:	2b03      	cmp	r3, #3
 800a828:	d017      	beq.n	800a85a <__gethex+0x39e>
 800a82a:	2b01      	cmp	r3, #1
 800a82c:	d109      	bne.n	800a842 <__gethex+0x386>
 800a82e:	f01a 0f02 	tst.w	sl, #2
 800a832:	d006      	beq.n	800a842 <__gethex+0x386>
 800a834:	f8d9 0000 	ldr.w	r0, [r9]
 800a838:	ea4a 0a00 	orr.w	sl, sl, r0
 800a83c:	f01a 0f01 	tst.w	sl, #1
 800a840:	d10e      	bne.n	800a860 <__gethex+0x3a4>
 800a842:	f047 0710 	orr.w	r7, r7, #16
 800a846:	e033      	b.n	800a8b0 <__gethex+0x3f4>
 800a848:	f04f 0a01 	mov.w	sl, #1
 800a84c:	e7d0      	b.n	800a7f0 <__gethex+0x334>
 800a84e:	2701      	movs	r7, #1
 800a850:	e7e2      	b.n	800a818 <__gethex+0x35c>
 800a852:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a854:	f1c3 0301 	rsb	r3, r3, #1
 800a858:	9315      	str	r3, [sp, #84]	; 0x54
 800a85a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0f0      	beq.n	800a842 <__gethex+0x386>
 800a860:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a864:	f104 0314 	add.w	r3, r4, #20
 800a868:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a86c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a870:	f04f 0c00 	mov.w	ip, #0
 800a874:	4618      	mov	r0, r3
 800a876:	f853 2b04 	ldr.w	r2, [r3], #4
 800a87a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a87e:	d01c      	beq.n	800a8ba <__gethex+0x3fe>
 800a880:	3201      	adds	r2, #1
 800a882:	6002      	str	r2, [r0, #0]
 800a884:	2f02      	cmp	r7, #2
 800a886:	f104 0314 	add.w	r3, r4, #20
 800a88a:	d13f      	bne.n	800a90c <__gethex+0x450>
 800a88c:	f8d8 2000 	ldr.w	r2, [r8]
 800a890:	3a01      	subs	r2, #1
 800a892:	42b2      	cmp	r2, r6
 800a894:	d10a      	bne.n	800a8ac <__gethex+0x3f0>
 800a896:	1171      	asrs	r1, r6, #5
 800a898:	2201      	movs	r2, #1
 800a89a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a89e:	f006 061f 	and.w	r6, r6, #31
 800a8a2:	fa02 f606 	lsl.w	r6, r2, r6
 800a8a6:	421e      	tst	r6, r3
 800a8a8:	bf18      	it	ne
 800a8aa:	4617      	movne	r7, r2
 800a8ac:	f047 0720 	orr.w	r7, r7, #32
 800a8b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8b2:	601c      	str	r4, [r3, #0]
 800a8b4:	9b04      	ldr	r3, [sp, #16]
 800a8b6:	601d      	str	r5, [r3, #0]
 800a8b8:	e695      	b.n	800a5e6 <__gethex+0x12a>
 800a8ba:	4299      	cmp	r1, r3
 800a8bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a8c0:	d8d8      	bhi.n	800a874 <__gethex+0x3b8>
 800a8c2:	68a3      	ldr	r3, [r4, #8]
 800a8c4:	459b      	cmp	fp, r3
 800a8c6:	db19      	blt.n	800a8fc <__gethex+0x440>
 800a8c8:	6861      	ldr	r1, [r4, #4]
 800a8ca:	ee18 0a10 	vmov	r0, s16
 800a8ce:	3101      	adds	r1, #1
 800a8d0:	f000 f91e 	bl	800ab10 <_Balloc>
 800a8d4:	4681      	mov	r9, r0
 800a8d6:	b918      	cbnz	r0, 800a8e0 <__gethex+0x424>
 800a8d8:	4b1a      	ldr	r3, [pc, #104]	; (800a944 <__gethex+0x488>)
 800a8da:	4602      	mov	r2, r0
 800a8dc:	2184      	movs	r1, #132	; 0x84
 800a8de:	e6a8      	b.n	800a632 <__gethex+0x176>
 800a8e0:	6922      	ldr	r2, [r4, #16]
 800a8e2:	3202      	adds	r2, #2
 800a8e4:	f104 010c 	add.w	r1, r4, #12
 800a8e8:	0092      	lsls	r2, r2, #2
 800a8ea:	300c      	adds	r0, #12
 800a8ec:	f7fd f9b4 	bl	8007c58 <memcpy>
 800a8f0:	4621      	mov	r1, r4
 800a8f2:	ee18 0a10 	vmov	r0, s16
 800a8f6:	f000 f94b 	bl	800ab90 <_Bfree>
 800a8fa:	464c      	mov	r4, r9
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	1c5a      	adds	r2, r3, #1
 800a900:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a904:	6122      	str	r2, [r4, #16]
 800a906:	2201      	movs	r2, #1
 800a908:	615a      	str	r2, [r3, #20]
 800a90a:	e7bb      	b.n	800a884 <__gethex+0x3c8>
 800a90c:	6922      	ldr	r2, [r4, #16]
 800a90e:	455a      	cmp	r2, fp
 800a910:	dd0b      	ble.n	800a92a <__gethex+0x46e>
 800a912:	2101      	movs	r1, #1
 800a914:	4620      	mov	r0, r4
 800a916:	f7ff fd69 	bl	800a3ec <rshift>
 800a91a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a91e:	3501      	adds	r5, #1
 800a920:	42ab      	cmp	r3, r5
 800a922:	f6ff aed0 	blt.w	800a6c6 <__gethex+0x20a>
 800a926:	2701      	movs	r7, #1
 800a928:	e7c0      	b.n	800a8ac <__gethex+0x3f0>
 800a92a:	f016 061f 	ands.w	r6, r6, #31
 800a92e:	d0fa      	beq.n	800a926 <__gethex+0x46a>
 800a930:	4453      	add	r3, sl
 800a932:	f1c6 0620 	rsb	r6, r6, #32
 800a936:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a93a:	f000 f9db 	bl	800acf4 <__hi0bits>
 800a93e:	42b0      	cmp	r0, r6
 800a940:	dbe7      	blt.n	800a912 <__gethex+0x456>
 800a942:	e7f0      	b.n	800a926 <__gethex+0x46a>
 800a944:	0800c560 	.word	0x0800c560

0800a948 <L_shift>:
 800a948:	f1c2 0208 	rsb	r2, r2, #8
 800a94c:	0092      	lsls	r2, r2, #2
 800a94e:	b570      	push	{r4, r5, r6, lr}
 800a950:	f1c2 0620 	rsb	r6, r2, #32
 800a954:	6843      	ldr	r3, [r0, #4]
 800a956:	6804      	ldr	r4, [r0, #0]
 800a958:	fa03 f506 	lsl.w	r5, r3, r6
 800a95c:	432c      	orrs	r4, r5
 800a95e:	40d3      	lsrs	r3, r2
 800a960:	6004      	str	r4, [r0, #0]
 800a962:	f840 3f04 	str.w	r3, [r0, #4]!
 800a966:	4288      	cmp	r0, r1
 800a968:	d3f4      	bcc.n	800a954 <L_shift+0xc>
 800a96a:	bd70      	pop	{r4, r5, r6, pc}

0800a96c <__match>:
 800a96c:	b530      	push	{r4, r5, lr}
 800a96e:	6803      	ldr	r3, [r0, #0]
 800a970:	3301      	adds	r3, #1
 800a972:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a976:	b914      	cbnz	r4, 800a97e <__match+0x12>
 800a978:	6003      	str	r3, [r0, #0]
 800a97a:	2001      	movs	r0, #1
 800a97c:	bd30      	pop	{r4, r5, pc}
 800a97e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a982:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a986:	2d19      	cmp	r5, #25
 800a988:	bf98      	it	ls
 800a98a:	3220      	addls	r2, #32
 800a98c:	42a2      	cmp	r2, r4
 800a98e:	d0f0      	beq.n	800a972 <__match+0x6>
 800a990:	2000      	movs	r0, #0
 800a992:	e7f3      	b.n	800a97c <__match+0x10>

0800a994 <__hexnan>:
 800a994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a998:	680b      	ldr	r3, [r1, #0]
 800a99a:	115e      	asrs	r6, r3, #5
 800a99c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a9a0:	f013 031f 	ands.w	r3, r3, #31
 800a9a4:	b087      	sub	sp, #28
 800a9a6:	bf18      	it	ne
 800a9a8:	3604      	addne	r6, #4
 800a9aa:	2500      	movs	r5, #0
 800a9ac:	1f37      	subs	r7, r6, #4
 800a9ae:	4690      	mov	r8, r2
 800a9b0:	6802      	ldr	r2, [r0, #0]
 800a9b2:	9301      	str	r3, [sp, #4]
 800a9b4:	4682      	mov	sl, r0
 800a9b6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a9ba:	46b9      	mov	r9, r7
 800a9bc:	463c      	mov	r4, r7
 800a9be:	9502      	str	r5, [sp, #8]
 800a9c0:	46ab      	mov	fp, r5
 800a9c2:	7851      	ldrb	r1, [r2, #1]
 800a9c4:	1c53      	adds	r3, r2, #1
 800a9c6:	9303      	str	r3, [sp, #12]
 800a9c8:	b341      	cbz	r1, 800aa1c <__hexnan+0x88>
 800a9ca:	4608      	mov	r0, r1
 800a9cc:	9205      	str	r2, [sp, #20]
 800a9ce:	9104      	str	r1, [sp, #16]
 800a9d0:	f7ff fd5e 	bl	800a490 <__hexdig_fun>
 800a9d4:	2800      	cmp	r0, #0
 800a9d6:	d14f      	bne.n	800aa78 <__hexnan+0xe4>
 800a9d8:	9904      	ldr	r1, [sp, #16]
 800a9da:	9a05      	ldr	r2, [sp, #20]
 800a9dc:	2920      	cmp	r1, #32
 800a9de:	d818      	bhi.n	800aa12 <__hexnan+0x7e>
 800a9e0:	9b02      	ldr	r3, [sp, #8]
 800a9e2:	459b      	cmp	fp, r3
 800a9e4:	dd13      	ble.n	800aa0e <__hexnan+0x7a>
 800a9e6:	454c      	cmp	r4, r9
 800a9e8:	d206      	bcs.n	800a9f8 <__hexnan+0x64>
 800a9ea:	2d07      	cmp	r5, #7
 800a9ec:	dc04      	bgt.n	800a9f8 <__hexnan+0x64>
 800a9ee:	462a      	mov	r2, r5
 800a9f0:	4649      	mov	r1, r9
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f7ff ffa8 	bl	800a948 <L_shift>
 800a9f8:	4544      	cmp	r4, r8
 800a9fa:	d950      	bls.n	800aa9e <__hexnan+0x10a>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	f1a4 0904 	sub.w	r9, r4, #4
 800aa02:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa06:	f8cd b008 	str.w	fp, [sp, #8]
 800aa0a:	464c      	mov	r4, r9
 800aa0c:	461d      	mov	r5, r3
 800aa0e:	9a03      	ldr	r2, [sp, #12]
 800aa10:	e7d7      	b.n	800a9c2 <__hexnan+0x2e>
 800aa12:	2929      	cmp	r1, #41	; 0x29
 800aa14:	d156      	bne.n	800aac4 <__hexnan+0x130>
 800aa16:	3202      	adds	r2, #2
 800aa18:	f8ca 2000 	str.w	r2, [sl]
 800aa1c:	f1bb 0f00 	cmp.w	fp, #0
 800aa20:	d050      	beq.n	800aac4 <__hexnan+0x130>
 800aa22:	454c      	cmp	r4, r9
 800aa24:	d206      	bcs.n	800aa34 <__hexnan+0xa0>
 800aa26:	2d07      	cmp	r5, #7
 800aa28:	dc04      	bgt.n	800aa34 <__hexnan+0xa0>
 800aa2a:	462a      	mov	r2, r5
 800aa2c:	4649      	mov	r1, r9
 800aa2e:	4620      	mov	r0, r4
 800aa30:	f7ff ff8a 	bl	800a948 <L_shift>
 800aa34:	4544      	cmp	r4, r8
 800aa36:	d934      	bls.n	800aaa2 <__hexnan+0x10e>
 800aa38:	f1a8 0204 	sub.w	r2, r8, #4
 800aa3c:	4623      	mov	r3, r4
 800aa3e:	f853 1b04 	ldr.w	r1, [r3], #4
 800aa42:	f842 1f04 	str.w	r1, [r2, #4]!
 800aa46:	429f      	cmp	r7, r3
 800aa48:	d2f9      	bcs.n	800aa3e <__hexnan+0xaa>
 800aa4a:	1b3b      	subs	r3, r7, r4
 800aa4c:	f023 0303 	bic.w	r3, r3, #3
 800aa50:	3304      	adds	r3, #4
 800aa52:	3401      	adds	r4, #1
 800aa54:	3e03      	subs	r6, #3
 800aa56:	42b4      	cmp	r4, r6
 800aa58:	bf88      	it	hi
 800aa5a:	2304      	movhi	r3, #4
 800aa5c:	4443      	add	r3, r8
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f843 2b04 	str.w	r2, [r3], #4
 800aa64:	429f      	cmp	r7, r3
 800aa66:	d2fb      	bcs.n	800aa60 <__hexnan+0xcc>
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	b91b      	cbnz	r3, 800aa74 <__hexnan+0xe0>
 800aa6c:	4547      	cmp	r7, r8
 800aa6e:	d127      	bne.n	800aac0 <__hexnan+0x12c>
 800aa70:	2301      	movs	r3, #1
 800aa72:	603b      	str	r3, [r7, #0]
 800aa74:	2005      	movs	r0, #5
 800aa76:	e026      	b.n	800aac6 <__hexnan+0x132>
 800aa78:	3501      	adds	r5, #1
 800aa7a:	2d08      	cmp	r5, #8
 800aa7c:	f10b 0b01 	add.w	fp, fp, #1
 800aa80:	dd06      	ble.n	800aa90 <__hexnan+0xfc>
 800aa82:	4544      	cmp	r4, r8
 800aa84:	d9c3      	bls.n	800aa0e <__hexnan+0x7a>
 800aa86:	2300      	movs	r3, #0
 800aa88:	f844 3c04 	str.w	r3, [r4, #-4]
 800aa8c:	2501      	movs	r5, #1
 800aa8e:	3c04      	subs	r4, #4
 800aa90:	6822      	ldr	r2, [r4, #0]
 800aa92:	f000 000f 	and.w	r0, r0, #15
 800aa96:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800aa9a:	6022      	str	r2, [r4, #0]
 800aa9c:	e7b7      	b.n	800aa0e <__hexnan+0x7a>
 800aa9e:	2508      	movs	r5, #8
 800aaa0:	e7b5      	b.n	800aa0e <__hexnan+0x7a>
 800aaa2:	9b01      	ldr	r3, [sp, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d0df      	beq.n	800aa68 <__hexnan+0xd4>
 800aaa8:	f04f 32ff 	mov.w	r2, #4294967295
 800aaac:	f1c3 0320 	rsb	r3, r3, #32
 800aab0:	fa22 f303 	lsr.w	r3, r2, r3
 800aab4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aab8:	401a      	ands	r2, r3
 800aaba:	f846 2c04 	str.w	r2, [r6, #-4]
 800aabe:	e7d3      	b.n	800aa68 <__hexnan+0xd4>
 800aac0:	3f04      	subs	r7, #4
 800aac2:	e7d1      	b.n	800aa68 <__hexnan+0xd4>
 800aac4:	2004      	movs	r0, #4
 800aac6:	b007      	add	sp, #28
 800aac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aacc <_localeconv_r>:
 800aacc:	4800      	ldr	r0, [pc, #0]	; (800aad0 <_localeconv_r+0x4>)
 800aace:	4770      	bx	lr
 800aad0:	2000016c 	.word	0x2000016c

0800aad4 <__ascii_mbtowc>:
 800aad4:	b082      	sub	sp, #8
 800aad6:	b901      	cbnz	r1, 800aada <__ascii_mbtowc+0x6>
 800aad8:	a901      	add	r1, sp, #4
 800aada:	b142      	cbz	r2, 800aaee <__ascii_mbtowc+0x1a>
 800aadc:	b14b      	cbz	r3, 800aaf2 <__ascii_mbtowc+0x1e>
 800aade:	7813      	ldrb	r3, [r2, #0]
 800aae0:	600b      	str	r3, [r1, #0]
 800aae2:	7812      	ldrb	r2, [r2, #0]
 800aae4:	1e10      	subs	r0, r2, #0
 800aae6:	bf18      	it	ne
 800aae8:	2001      	movne	r0, #1
 800aaea:	b002      	add	sp, #8
 800aaec:	4770      	bx	lr
 800aaee:	4610      	mov	r0, r2
 800aaf0:	e7fb      	b.n	800aaea <__ascii_mbtowc+0x16>
 800aaf2:	f06f 0001 	mvn.w	r0, #1
 800aaf6:	e7f8      	b.n	800aaea <__ascii_mbtowc+0x16>

0800aaf8 <__malloc_lock>:
 800aaf8:	4801      	ldr	r0, [pc, #4]	; (800ab00 <__malloc_lock+0x8>)
 800aafa:	f7f6 bed4 	b.w	80018a6 <__retarget_lock_acquire_recursive>
 800aafe:	bf00      	nop
 800ab00:	20000430 	.word	0x20000430

0800ab04 <__malloc_unlock>:
 800ab04:	4801      	ldr	r0, [pc, #4]	; (800ab0c <__malloc_unlock+0x8>)
 800ab06:	f7f6 bee2 	b.w	80018ce <__retarget_lock_release_recursive>
 800ab0a:	bf00      	nop
 800ab0c:	20000430 	.word	0x20000430

0800ab10 <_Balloc>:
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab14:	4604      	mov	r4, r0
 800ab16:	460d      	mov	r5, r1
 800ab18:	b976      	cbnz	r6, 800ab38 <_Balloc+0x28>
 800ab1a:	2010      	movs	r0, #16
 800ab1c:	f7fd f894 	bl	8007c48 <malloc>
 800ab20:	4602      	mov	r2, r0
 800ab22:	6260      	str	r0, [r4, #36]	; 0x24
 800ab24:	b920      	cbnz	r0, 800ab30 <_Balloc+0x20>
 800ab26:	4b18      	ldr	r3, [pc, #96]	; (800ab88 <_Balloc+0x78>)
 800ab28:	4818      	ldr	r0, [pc, #96]	; (800ab8c <_Balloc+0x7c>)
 800ab2a:	2166      	movs	r1, #102	; 0x66
 800ab2c:	f000 fe4a 	bl	800b7c4 <__assert_func>
 800ab30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ab34:	6006      	str	r6, [r0, #0]
 800ab36:	60c6      	str	r6, [r0, #12]
 800ab38:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ab3a:	68f3      	ldr	r3, [r6, #12]
 800ab3c:	b183      	cbz	r3, 800ab60 <_Balloc+0x50>
 800ab3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab40:	68db      	ldr	r3, [r3, #12]
 800ab42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ab46:	b9b8      	cbnz	r0, 800ab78 <_Balloc+0x68>
 800ab48:	2101      	movs	r1, #1
 800ab4a:	fa01 f605 	lsl.w	r6, r1, r5
 800ab4e:	1d72      	adds	r2, r6, #5
 800ab50:	0092      	lsls	r2, r2, #2
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 fc9a 	bl	800b48c <_calloc_r>
 800ab58:	b160      	cbz	r0, 800ab74 <_Balloc+0x64>
 800ab5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ab5e:	e00e      	b.n	800ab7e <_Balloc+0x6e>
 800ab60:	2221      	movs	r2, #33	; 0x21
 800ab62:	2104      	movs	r1, #4
 800ab64:	4620      	mov	r0, r4
 800ab66:	f000 fc91 	bl	800b48c <_calloc_r>
 800ab6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab6c:	60f0      	str	r0, [r6, #12]
 800ab6e:	68db      	ldr	r3, [r3, #12]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d1e4      	bne.n	800ab3e <_Balloc+0x2e>
 800ab74:	2000      	movs	r0, #0
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	6802      	ldr	r2, [r0, #0]
 800ab7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ab84:	e7f7      	b.n	800ab76 <_Balloc+0x66>
 800ab86:	bf00      	nop
 800ab88:	0800c4ee 	.word	0x0800c4ee
 800ab8c:	0800c5ec 	.word	0x0800c5ec

0800ab90 <_Bfree>:
 800ab90:	b570      	push	{r4, r5, r6, lr}
 800ab92:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ab94:	4605      	mov	r5, r0
 800ab96:	460c      	mov	r4, r1
 800ab98:	b976      	cbnz	r6, 800abb8 <_Bfree+0x28>
 800ab9a:	2010      	movs	r0, #16
 800ab9c:	f7fd f854 	bl	8007c48 <malloc>
 800aba0:	4602      	mov	r2, r0
 800aba2:	6268      	str	r0, [r5, #36]	; 0x24
 800aba4:	b920      	cbnz	r0, 800abb0 <_Bfree+0x20>
 800aba6:	4b09      	ldr	r3, [pc, #36]	; (800abcc <_Bfree+0x3c>)
 800aba8:	4809      	ldr	r0, [pc, #36]	; (800abd0 <_Bfree+0x40>)
 800abaa:	218a      	movs	r1, #138	; 0x8a
 800abac:	f000 fe0a 	bl	800b7c4 <__assert_func>
 800abb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800abb4:	6006      	str	r6, [r0, #0]
 800abb6:	60c6      	str	r6, [r0, #12]
 800abb8:	b13c      	cbz	r4, 800abca <_Bfree+0x3a>
 800abba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800abbc:	6862      	ldr	r2, [r4, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800abc4:	6021      	str	r1, [r4, #0]
 800abc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800abca:	bd70      	pop	{r4, r5, r6, pc}
 800abcc:	0800c4ee 	.word	0x0800c4ee
 800abd0:	0800c5ec 	.word	0x0800c5ec

0800abd4 <__multadd>:
 800abd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd8:	690d      	ldr	r5, [r1, #16]
 800abda:	4607      	mov	r7, r0
 800abdc:	460c      	mov	r4, r1
 800abde:	461e      	mov	r6, r3
 800abe0:	f101 0c14 	add.w	ip, r1, #20
 800abe4:	2000      	movs	r0, #0
 800abe6:	f8dc 3000 	ldr.w	r3, [ip]
 800abea:	b299      	uxth	r1, r3
 800abec:	fb02 6101 	mla	r1, r2, r1, r6
 800abf0:	0c1e      	lsrs	r6, r3, #16
 800abf2:	0c0b      	lsrs	r3, r1, #16
 800abf4:	fb02 3306 	mla	r3, r2, r6, r3
 800abf8:	b289      	uxth	r1, r1
 800abfa:	3001      	adds	r0, #1
 800abfc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ac00:	4285      	cmp	r5, r0
 800ac02:	f84c 1b04 	str.w	r1, [ip], #4
 800ac06:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ac0a:	dcec      	bgt.n	800abe6 <__multadd+0x12>
 800ac0c:	b30e      	cbz	r6, 800ac52 <__multadd+0x7e>
 800ac0e:	68a3      	ldr	r3, [r4, #8]
 800ac10:	42ab      	cmp	r3, r5
 800ac12:	dc19      	bgt.n	800ac48 <__multadd+0x74>
 800ac14:	6861      	ldr	r1, [r4, #4]
 800ac16:	4638      	mov	r0, r7
 800ac18:	3101      	adds	r1, #1
 800ac1a:	f7ff ff79 	bl	800ab10 <_Balloc>
 800ac1e:	4680      	mov	r8, r0
 800ac20:	b928      	cbnz	r0, 800ac2e <__multadd+0x5a>
 800ac22:	4602      	mov	r2, r0
 800ac24:	4b0c      	ldr	r3, [pc, #48]	; (800ac58 <__multadd+0x84>)
 800ac26:	480d      	ldr	r0, [pc, #52]	; (800ac5c <__multadd+0x88>)
 800ac28:	21b5      	movs	r1, #181	; 0xb5
 800ac2a:	f000 fdcb 	bl	800b7c4 <__assert_func>
 800ac2e:	6922      	ldr	r2, [r4, #16]
 800ac30:	3202      	adds	r2, #2
 800ac32:	f104 010c 	add.w	r1, r4, #12
 800ac36:	0092      	lsls	r2, r2, #2
 800ac38:	300c      	adds	r0, #12
 800ac3a:	f7fd f80d 	bl	8007c58 <memcpy>
 800ac3e:	4621      	mov	r1, r4
 800ac40:	4638      	mov	r0, r7
 800ac42:	f7ff ffa5 	bl	800ab90 <_Bfree>
 800ac46:	4644      	mov	r4, r8
 800ac48:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ac4c:	3501      	adds	r5, #1
 800ac4e:	615e      	str	r6, [r3, #20]
 800ac50:	6125      	str	r5, [r4, #16]
 800ac52:	4620      	mov	r0, r4
 800ac54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac58:	0800c560 	.word	0x0800c560
 800ac5c:	0800c5ec 	.word	0x0800c5ec

0800ac60 <__s2b>:
 800ac60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac64:	460c      	mov	r4, r1
 800ac66:	4615      	mov	r5, r2
 800ac68:	461f      	mov	r7, r3
 800ac6a:	2209      	movs	r2, #9
 800ac6c:	3308      	adds	r3, #8
 800ac6e:	4606      	mov	r6, r0
 800ac70:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac74:	2100      	movs	r1, #0
 800ac76:	2201      	movs	r2, #1
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	db09      	blt.n	800ac90 <__s2b+0x30>
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	f7ff ff47 	bl	800ab10 <_Balloc>
 800ac82:	b940      	cbnz	r0, 800ac96 <__s2b+0x36>
 800ac84:	4602      	mov	r2, r0
 800ac86:	4b19      	ldr	r3, [pc, #100]	; (800acec <__s2b+0x8c>)
 800ac88:	4819      	ldr	r0, [pc, #100]	; (800acf0 <__s2b+0x90>)
 800ac8a:	21ce      	movs	r1, #206	; 0xce
 800ac8c:	f000 fd9a 	bl	800b7c4 <__assert_func>
 800ac90:	0052      	lsls	r2, r2, #1
 800ac92:	3101      	adds	r1, #1
 800ac94:	e7f0      	b.n	800ac78 <__s2b+0x18>
 800ac96:	9b08      	ldr	r3, [sp, #32]
 800ac98:	6143      	str	r3, [r0, #20]
 800ac9a:	2d09      	cmp	r5, #9
 800ac9c:	f04f 0301 	mov.w	r3, #1
 800aca0:	6103      	str	r3, [r0, #16]
 800aca2:	dd16      	ble.n	800acd2 <__s2b+0x72>
 800aca4:	f104 0909 	add.w	r9, r4, #9
 800aca8:	46c8      	mov	r8, r9
 800acaa:	442c      	add	r4, r5
 800acac:	f818 3b01 	ldrb.w	r3, [r8], #1
 800acb0:	4601      	mov	r1, r0
 800acb2:	3b30      	subs	r3, #48	; 0x30
 800acb4:	220a      	movs	r2, #10
 800acb6:	4630      	mov	r0, r6
 800acb8:	f7ff ff8c 	bl	800abd4 <__multadd>
 800acbc:	45a0      	cmp	r8, r4
 800acbe:	d1f5      	bne.n	800acac <__s2b+0x4c>
 800acc0:	f1a5 0408 	sub.w	r4, r5, #8
 800acc4:	444c      	add	r4, r9
 800acc6:	1b2d      	subs	r5, r5, r4
 800acc8:	1963      	adds	r3, r4, r5
 800acca:	42bb      	cmp	r3, r7
 800accc:	db04      	blt.n	800acd8 <__s2b+0x78>
 800acce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acd2:	340a      	adds	r4, #10
 800acd4:	2509      	movs	r5, #9
 800acd6:	e7f6      	b.n	800acc6 <__s2b+0x66>
 800acd8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800acdc:	4601      	mov	r1, r0
 800acde:	3b30      	subs	r3, #48	; 0x30
 800ace0:	220a      	movs	r2, #10
 800ace2:	4630      	mov	r0, r6
 800ace4:	f7ff ff76 	bl	800abd4 <__multadd>
 800ace8:	e7ee      	b.n	800acc8 <__s2b+0x68>
 800acea:	bf00      	nop
 800acec:	0800c560 	.word	0x0800c560
 800acf0:	0800c5ec 	.word	0x0800c5ec

0800acf4 <__hi0bits>:
 800acf4:	0c03      	lsrs	r3, r0, #16
 800acf6:	041b      	lsls	r3, r3, #16
 800acf8:	b9d3      	cbnz	r3, 800ad30 <__hi0bits+0x3c>
 800acfa:	0400      	lsls	r0, r0, #16
 800acfc:	2310      	movs	r3, #16
 800acfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ad02:	bf04      	itt	eq
 800ad04:	0200      	lsleq	r0, r0, #8
 800ad06:	3308      	addeq	r3, #8
 800ad08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ad0c:	bf04      	itt	eq
 800ad0e:	0100      	lsleq	r0, r0, #4
 800ad10:	3304      	addeq	r3, #4
 800ad12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ad16:	bf04      	itt	eq
 800ad18:	0080      	lsleq	r0, r0, #2
 800ad1a:	3302      	addeq	r3, #2
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	db05      	blt.n	800ad2c <__hi0bits+0x38>
 800ad20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ad24:	f103 0301 	add.w	r3, r3, #1
 800ad28:	bf08      	it	eq
 800ad2a:	2320      	moveq	r3, #32
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	4770      	bx	lr
 800ad30:	2300      	movs	r3, #0
 800ad32:	e7e4      	b.n	800acfe <__hi0bits+0xa>

0800ad34 <__lo0bits>:
 800ad34:	6803      	ldr	r3, [r0, #0]
 800ad36:	f013 0207 	ands.w	r2, r3, #7
 800ad3a:	4601      	mov	r1, r0
 800ad3c:	d00b      	beq.n	800ad56 <__lo0bits+0x22>
 800ad3e:	07da      	lsls	r2, r3, #31
 800ad40:	d423      	bmi.n	800ad8a <__lo0bits+0x56>
 800ad42:	0798      	lsls	r0, r3, #30
 800ad44:	bf49      	itett	mi
 800ad46:	085b      	lsrmi	r3, r3, #1
 800ad48:	089b      	lsrpl	r3, r3, #2
 800ad4a:	2001      	movmi	r0, #1
 800ad4c:	600b      	strmi	r3, [r1, #0]
 800ad4e:	bf5c      	itt	pl
 800ad50:	600b      	strpl	r3, [r1, #0]
 800ad52:	2002      	movpl	r0, #2
 800ad54:	4770      	bx	lr
 800ad56:	b298      	uxth	r0, r3
 800ad58:	b9a8      	cbnz	r0, 800ad86 <__lo0bits+0x52>
 800ad5a:	0c1b      	lsrs	r3, r3, #16
 800ad5c:	2010      	movs	r0, #16
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	b90a      	cbnz	r2, 800ad66 <__lo0bits+0x32>
 800ad62:	3008      	adds	r0, #8
 800ad64:	0a1b      	lsrs	r3, r3, #8
 800ad66:	071a      	lsls	r2, r3, #28
 800ad68:	bf04      	itt	eq
 800ad6a:	091b      	lsreq	r3, r3, #4
 800ad6c:	3004      	addeq	r0, #4
 800ad6e:	079a      	lsls	r2, r3, #30
 800ad70:	bf04      	itt	eq
 800ad72:	089b      	lsreq	r3, r3, #2
 800ad74:	3002      	addeq	r0, #2
 800ad76:	07da      	lsls	r2, r3, #31
 800ad78:	d403      	bmi.n	800ad82 <__lo0bits+0x4e>
 800ad7a:	085b      	lsrs	r3, r3, #1
 800ad7c:	f100 0001 	add.w	r0, r0, #1
 800ad80:	d005      	beq.n	800ad8e <__lo0bits+0x5a>
 800ad82:	600b      	str	r3, [r1, #0]
 800ad84:	4770      	bx	lr
 800ad86:	4610      	mov	r0, r2
 800ad88:	e7e9      	b.n	800ad5e <__lo0bits+0x2a>
 800ad8a:	2000      	movs	r0, #0
 800ad8c:	4770      	bx	lr
 800ad8e:	2020      	movs	r0, #32
 800ad90:	4770      	bx	lr
	...

0800ad94 <__i2b>:
 800ad94:	b510      	push	{r4, lr}
 800ad96:	460c      	mov	r4, r1
 800ad98:	2101      	movs	r1, #1
 800ad9a:	f7ff feb9 	bl	800ab10 <_Balloc>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	b928      	cbnz	r0, 800adae <__i2b+0x1a>
 800ada2:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <__i2b+0x24>)
 800ada4:	4805      	ldr	r0, [pc, #20]	; (800adbc <__i2b+0x28>)
 800ada6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800adaa:	f000 fd0b 	bl	800b7c4 <__assert_func>
 800adae:	2301      	movs	r3, #1
 800adb0:	6144      	str	r4, [r0, #20]
 800adb2:	6103      	str	r3, [r0, #16]
 800adb4:	bd10      	pop	{r4, pc}
 800adb6:	bf00      	nop
 800adb8:	0800c560 	.word	0x0800c560
 800adbc:	0800c5ec 	.word	0x0800c5ec

0800adc0 <__multiply>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	4691      	mov	r9, r2
 800adc6:	690a      	ldr	r2, [r1, #16]
 800adc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800adcc:	429a      	cmp	r2, r3
 800adce:	bfb8      	it	lt
 800add0:	460b      	movlt	r3, r1
 800add2:	460c      	mov	r4, r1
 800add4:	bfbc      	itt	lt
 800add6:	464c      	movlt	r4, r9
 800add8:	4699      	movlt	r9, r3
 800adda:	6927      	ldr	r7, [r4, #16]
 800addc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ade0:	68a3      	ldr	r3, [r4, #8]
 800ade2:	6861      	ldr	r1, [r4, #4]
 800ade4:	eb07 060a 	add.w	r6, r7, sl
 800ade8:	42b3      	cmp	r3, r6
 800adea:	b085      	sub	sp, #20
 800adec:	bfb8      	it	lt
 800adee:	3101      	addlt	r1, #1
 800adf0:	f7ff fe8e 	bl	800ab10 <_Balloc>
 800adf4:	b930      	cbnz	r0, 800ae04 <__multiply+0x44>
 800adf6:	4602      	mov	r2, r0
 800adf8:	4b44      	ldr	r3, [pc, #272]	; (800af0c <__multiply+0x14c>)
 800adfa:	4845      	ldr	r0, [pc, #276]	; (800af10 <__multiply+0x150>)
 800adfc:	f240 115d 	movw	r1, #349	; 0x15d
 800ae00:	f000 fce0 	bl	800b7c4 <__assert_func>
 800ae04:	f100 0514 	add.w	r5, r0, #20
 800ae08:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ae0c:	462b      	mov	r3, r5
 800ae0e:	2200      	movs	r2, #0
 800ae10:	4543      	cmp	r3, r8
 800ae12:	d321      	bcc.n	800ae58 <__multiply+0x98>
 800ae14:	f104 0314 	add.w	r3, r4, #20
 800ae18:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ae1c:	f109 0314 	add.w	r3, r9, #20
 800ae20:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ae24:	9202      	str	r2, [sp, #8]
 800ae26:	1b3a      	subs	r2, r7, r4
 800ae28:	3a15      	subs	r2, #21
 800ae2a:	f022 0203 	bic.w	r2, r2, #3
 800ae2e:	3204      	adds	r2, #4
 800ae30:	f104 0115 	add.w	r1, r4, #21
 800ae34:	428f      	cmp	r7, r1
 800ae36:	bf38      	it	cc
 800ae38:	2204      	movcc	r2, #4
 800ae3a:	9201      	str	r2, [sp, #4]
 800ae3c:	9a02      	ldr	r2, [sp, #8]
 800ae3e:	9303      	str	r3, [sp, #12]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d80c      	bhi.n	800ae5e <__multiply+0x9e>
 800ae44:	2e00      	cmp	r6, #0
 800ae46:	dd03      	ble.n	800ae50 <__multiply+0x90>
 800ae48:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d05a      	beq.n	800af06 <__multiply+0x146>
 800ae50:	6106      	str	r6, [r0, #16]
 800ae52:	b005      	add	sp, #20
 800ae54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae58:	f843 2b04 	str.w	r2, [r3], #4
 800ae5c:	e7d8      	b.n	800ae10 <__multiply+0x50>
 800ae5e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ae62:	f1ba 0f00 	cmp.w	sl, #0
 800ae66:	d024      	beq.n	800aeb2 <__multiply+0xf2>
 800ae68:	f104 0e14 	add.w	lr, r4, #20
 800ae6c:	46a9      	mov	r9, r5
 800ae6e:	f04f 0c00 	mov.w	ip, #0
 800ae72:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ae76:	f8d9 1000 	ldr.w	r1, [r9]
 800ae7a:	fa1f fb82 	uxth.w	fp, r2
 800ae7e:	b289      	uxth	r1, r1
 800ae80:	fb0a 110b 	mla	r1, sl, fp, r1
 800ae84:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ae88:	f8d9 2000 	ldr.w	r2, [r9]
 800ae8c:	4461      	add	r1, ip
 800ae8e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ae92:	fb0a c20b 	mla	r2, sl, fp, ip
 800ae96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ae9a:	b289      	uxth	r1, r1
 800ae9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aea0:	4577      	cmp	r7, lr
 800aea2:	f849 1b04 	str.w	r1, [r9], #4
 800aea6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aeaa:	d8e2      	bhi.n	800ae72 <__multiply+0xb2>
 800aeac:	9a01      	ldr	r2, [sp, #4]
 800aeae:	f845 c002 	str.w	ip, [r5, r2]
 800aeb2:	9a03      	ldr	r2, [sp, #12]
 800aeb4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aeb8:	3304      	adds	r3, #4
 800aeba:	f1b9 0f00 	cmp.w	r9, #0
 800aebe:	d020      	beq.n	800af02 <__multiply+0x142>
 800aec0:	6829      	ldr	r1, [r5, #0]
 800aec2:	f104 0c14 	add.w	ip, r4, #20
 800aec6:	46ae      	mov	lr, r5
 800aec8:	f04f 0a00 	mov.w	sl, #0
 800aecc:	f8bc b000 	ldrh.w	fp, [ip]
 800aed0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aed4:	fb09 220b 	mla	r2, r9, fp, r2
 800aed8:	4492      	add	sl, r2
 800aeda:	b289      	uxth	r1, r1
 800aedc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aee0:	f84e 1b04 	str.w	r1, [lr], #4
 800aee4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aee8:	f8be 1000 	ldrh.w	r1, [lr]
 800aeec:	0c12      	lsrs	r2, r2, #16
 800aeee:	fb09 1102 	mla	r1, r9, r2, r1
 800aef2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aef6:	4567      	cmp	r7, ip
 800aef8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aefc:	d8e6      	bhi.n	800aecc <__multiply+0x10c>
 800aefe:	9a01      	ldr	r2, [sp, #4]
 800af00:	50a9      	str	r1, [r5, r2]
 800af02:	3504      	adds	r5, #4
 800af04:	e79a      	b.n	800ae3c <__multiply+0x7c>
 800af06:	3e01      	subs	r6, #1
 800af08:	e79c      	b.n	800ae44 <__multiply+0x84>
 800af0a:	bf00      	nop
 800af0c:	0800c560 	.word	0x0800c560
 800af10:	0800c5ec 	.word	0x0800c5ec

0800af14 <__pow5mult>:
 800af14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af18:	4615      	mov	r5, r2
 800af1a:	f012 0203 	ands.w	r2, r2, #3
 800af1e:	4606      	mov	r6, r0
 800af20:	460f      	mov	r7, r1
 800af22:	d007      	beq.n	800af34 <__pow5mult+0x20>
 800af24:	4c25      	ldr	r4, [pc, #148]	; (800afbc <__pow5mult+0xa8>)
 800af26:	3a01      	subs	r2, #1
 800af28:	2300      	movs	r3, #0
 800af2a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800af2e:	f7ff fe51 	bl	800abd4 <__multadd>
 800af32:	4607      	mov	r7, r0
 800af34:	10ad      	asrs	r5, r5, #2
 800af36:	d03d      	beq.n	800afb4 <__pow5mult+0xa0>
 800af38:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800af3a:	b97c      	cbnz	r4, 800af5c <__pow5mult+0x48>
 800af3c:	2010      	movs	r0, #16
 800af3e:	f7fc fe83 	bl	8007c48 <malloc>
 800af42:	4602      	mov	r2, r0
 800af44:	6270      	str	r0, [r6, #36]	; 0x24
 800af46:	b928      	cbnz	r0, 800af54 <__pow5mult+0x40>
 800af48:	4b1d      	ldr	r3, [pc, #116]	; (800afc0 <__pow5mult+0xac>)
 800af4a:	481e      	ldr	r0, [pc, #120]	; (800afc4 <__pow5mult+0xb0>)
 800af4c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800af50:	f000 fc38 	bl	800b7c4 <__assert_func>
 800af54:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800af58:	6004      	str	r4, [r0, #0]
 800af5a:	60c4      	str	r4, [r0, #12]
 800af5c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800af60:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800af64:	b94c      	cbnz	r4, 800af7a <__pow5mult+0x66>
 800af66:	f240 2171 	movw	r1, #625	; 0x271
 800af6a:	4630      	mov	r0, r6
 800af6c:	f7ff ff12 	bl	800ad94 <__i2b>
 800af70:	2300      	movs	r3, #0
 800af72:	f8c8 0008 	str.w	r0, [r8, #8]
 800af76:	4604      	mov	r4, r0
 800af78:	6003      	str	r3, [r0, #0]
 800af7a:	f04f 0900 	mov.w	r9, #0
 800af7e:	07eb      	lsls	r3, r5, #31
 800af80:	d50a      	bpl.n	800af98 <__pow5mult+0x84>
 800af82:	4639      	mov	r1, r7
 800af84:	4622      	mov	r2, r4
 800af86:	4630      	mov	r0, r6
 800af88:	f7ff ff1a 	bl	800adc0 <__multiply>
 800af8c:	4639      	mov	r1, r7
 800af8e:	4680      	mov	r8, r0
 800af90:	4630      	mov	r0, r6
 800af92:	f7ff fdfd 	bl	800ab90 <_Bfree>
 800af96:	4647      	mov	r7, r8
 800af98:	106d      	asrs	r5, r5, #1
 800af9a:	d00b      	beq.n	800afb4 <__pow5mult+0xa0>
 800af9c:	6820      	ldr	r0, [r4, #0]
 800af9e:	b938      	cbnz	r0, 800afb0 <__pow5mult+0x9c>
 800afa0:	4622      	mov	r2, r4
 800afa2:	4621      	mov	r1, r4
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7ff ff0b 	bl	800adc0 <__multiply>
 800afaa:	6020      	str	r0, [r4, #0]
 800afac:	f8c0 9000 	str.w	r9, [r0]
 800afb0:	4604      	mov	r4, r0
 800afb2:	e7e4      	b.n	800af7e <__pow5mult+0x6a>
 800afb4:	4638      	mov	r0, r7
 800afb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afba:	bf00      	nop
 800afbc:	0800c738 	.word	0x0800c738
 800afc0:	0800c4ee 	.word	0x0800c4ee
 800afc4:	0800c5ec 	.word	0x0800c5ec

0800afc8 <__lshift>:
 800afc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afcc:	460c      	mov	r4, r1
 800afce:	6849      	ldr	r1, [r1, #4]
 800afd0:	6923      	ldr	r3, [r4, #16]
 800afd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800afd6:	68a3      	ldr	r3, [r4, #8]
 800afd8:	4607      	mov	r7, r0
 800afda:	4691      	mov	r9, r2
 800afdc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800afe0:	f108 0601 	add.w	r6, r8, #1
 800afe4:	42b3      	cmp	r3, r6
 800afe6:	db0b      	blt.n	800b000 <__lshift+0x38>
 800afe8:	4638      	mov	r0, r7
 800afea:	f7ff fd91 	bl	800ab10 <_Balloc>
 800afee:	4605      	mov	r5, r0
 800aff0:	b948      	cbnz	r0, 800b006 <__lshift+0x3e>
 800aff2:	4602      	mov	r2, r0
 800aff4:	4b2a      	ldr	r3, [pc, #168]	; (800b0a0 <__lshift+0xd8>)
 800aff6:	482b      	ldr	r0, [pc, #172]	; (800b0a4 <__lshift+0xdc>)
 800aff8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800affc:	f000 fbe2 	bl	800b7c4 <__assert_func>
 800b000:	3101      	adds	r1, #1
 800b002:	005b      	lsls	r3, r3, #1
 800b004:	e7ee      	b.n	800afe4 <__lshift+0x1c>
 800b006:	2300      	movs	r3, #0
 800b008:	f100 0114 	add.w	r1, r0, #20
 800b00c:	f100 0210 	add.w	r2, r0, #16
 800b010:	4618      	mov	r0, r3
 800b012:	4553      	cmp	r3, sl
 800b014:	db37      	blt.n	800b086 <__lshift+0xbe>
 800b016:	6920      	ldr	r0, [r4, #16]
 800b018:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b01c:	f104 0314 	add.w	r3, r4, #20
 800b020:	f019 091f 	ands.w	r9, r9, #31
 800b024:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b028:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b02c:	d02f      	beq.n	800b08e <__lshift+0xc6>
 800b02e:	f1c9 0e20 	rsb	lr, r9, #32
 800b032:	468a      	mov	sl, r1
 800b034:	f04f 0c00 	mov.w	ip, #0
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	fa02 f209 	lsl.w	r2, r2, r9
 800b03e:	ea42 020c 	orr.w	r2, r2, ip
 800b042:	f84a 2b04 	str.w	r2, [sl], #4
 800b046:	f853 2b04 	ldr.w	r2, [r3], #4
 800b04a:	4298      	cmp	r0, r3
 800b04c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b050:	d8f2      	bhi.n	800b038 <__lshift+0x70>
 800b052:	1b03      	subs	r3, r0, r4
 800b054:	3b15      	subs	r3, #21
 800b056:	f023 0303 	bic.w	r3, r3, #3
 800b05a:	3304      	adds	r3, #4
 800b05c:	f104 0215 	add.w	r2, r4, #21
 800b060:	4290      	cmp	r0, r2
 800b062:	bf38      	it	cc
 800b064:	2304      	movcc	r3, #4
 800b066:	f841 c003 	str.w	ip, [r1, r3]
 800b06a:	f1bc 0f00 	cmp.w	ip, #0
 800b06e:	d001      	beq.n	800b074 <__lshift+0xac>
 800b070:	f108 0602 	add.w	r6, r8, #2
 800b074:	3e01      	subs	r6, #1
 800b076:	4638      	mov	r0, r7
 800b078:	612e      	str	r6, [r5, #16]
 800b07a:	4621      	mov	r1, r4
 800b07c:	f7ff fd88 	bl	800ab90 <_Bfree>
 800b080:	4628      	mov	r0, r5
 800b082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b086:	f842 0f04 	str.w	r0, [r2, #4]!
 800b08a:	3301      	adds	r3, #1
 800b08c:	e7c1      	b.n	800b012 <__lshift+0x4a>
 800b08e:	3904      	subs	r1, #4
 800b090:	f853 2b04 	ldr.w	r2, [r3], #4
 800b094:	f841 2f04 	str.w	r2, [r1, #4]!
 800b098:	4298      	cmp	r0, r3
 800b09a:	d8f9      	bhi.n	800b090 <__lshift+0xc8>
 800b09c:	e7ea      	b.n	800b074 <__lshift+0xac>
 800b09e:	bf00      	nop
 800b0a0:	0800c560 	.word	0x0800c560
 800b0a4:	0800c5ec 	.word	0x0800c5ec

0800b0a8 <__mcmp>:
 800b0a8:	b530      	push	{r4, r5, lr}
 800b0aa:	6902      	ldr	r2, [r0, #16]
 800b0ac:	690c      	ldr	r4, [r1, #16]
 800b0ae:	1b12      	subs	r2, r2, r4
 800b0b0:	d10e      	bne.n	800b0d0 <__mcmp+0x28>
 800b0b2:	f100 0314 	add.w	r3, r0, #20
 800b0b6:	3114      	adds	r1, #20
 800b0b8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b0bc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b0c0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b0c4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b0c8:	42a5      	cmp	r5, r4
 800b0ca:	d003      	beq.n	800b0d4 <__mcmp+0x2c>
 800b0cc:	d305      	bcc.n	800b0da <__mcmp+0x32>
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	bd30      	pop	{r4, r5, pc}
 800b0d4:	4283      	cmp	r3, r0
 800b0d6:	d3f3      	bcc.n	800b0c0 <__mcmp+0x18>
 800b0d8:	e7fa      	b.n	800b0d0 <__mcmp+0x28>
 800b0da:	f04f 32ff 	mov.w	r2, #4294967295
 800b0de:	e7f7      	b.n	800b0d0 <__mcmp+0x28>

0800b0e0 <__mdiff>:
 800b0e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0e4:	460c      	mov	r4, r1
 800b0e6:	4606      	mov	r6, r0
 800b0e8:	4611      	mov	r1, r2
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	4690      	mov	r8, r2
 800b0ee:	f7ff ffdb 	bl	800b0a8 <__mcmp>
 800b0f2:	1e05      	subs	r5, r0, #0
 800b0f4:	d110      	bne.n	800b118 <__mdiff+0x38>
 800b0f6:	4629      	mov	r1, r5
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	f7ff fd09 	bl	800ab10 <_Balloc>
 800b0fe:	b930      	cbnz	r0, 800b10e <__mdiff+0x2e>
 800b100:	4b3a      	ldr	r3, [pc, #232]	; (800b1ec <__mdiff+0x10c>)
 800b102:	4602      	mov	r2, r0
 800b104:	f240 2132 	movw	r1, #562	; 0x232
 800b108:	4839      	ldr	r0, [pc, #228]	; (800b1f0 <__mdiff+0x110>)
 800b10a:	f000 fb5b 	bl	800b7c4 <__assert_func>
 800b10e:	2301      	movs	r3, #1
 800b110:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b114:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b118:	bfa4      	itt	ge
 800b11a:	4643      	movge	r3, r8
 800b11c:	46a0      	movge	r8, r4
 800b11e:	4630      	mov	r0, r6
 800b120:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b124:	bfa6      	itte	ge
 800b126:	461c      	movge	r4, r3
 800b128:	2500      	movge	r5, #0
 800b12a:	2501      	movlt	r5, #1
 800b12c:	f7ff fcf0 	bl	800ab10 <_Balloc>
 800b130:	b920      	cbnz	r0, 800b13c <__mdiff+0x5c>
 800b132:	4b2e      	ldr	r3, [pc, #184]	; (800b1ec <__mdiff+0x10c>)
 800b134:	4602      	mov	r2, r0
 800b136:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b13a:	e7e5      	b.n	800b108 <__mdiff+0x28>
 800b13c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b140:	6926      	ldr	r6, [r4, #16]
 800b142:	60c5      	str	r5, [r0, #12]
 800b144:	f104 0914 	add.w	r9, r4, #20
 800b148:	f108 0514 	add.w	r5, r8, #20
 800b14c:	f100 0e14 	add.w	lr, r0, #20
 800b150:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b154:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b158:	f108 0210 	add.w	r2, r8, #16
 800b15c:	46f2      	mov	sl, lr
 800b15e:	2100      	movs	r1, #0
 800b160:	f859 3b04 	ldr.w	r3, [r9], #4
 800b164:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b168:	fa1f f883 	uxth.w	r8, r3
 800b16c:	fa11 f18b 	uxtah	r1, r1, fp
 800b170:	0c1b      	lsrs	r3, r3, #16
 800b172:	eba1 0808 	sub.w	r8, r1, r8
 800b176:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b17a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b17e:	fa1f f888 	uxth.w	r8, r8
 800b182:	1419      	asrs	r1, r3, #16
 800b184:	454e      	cmp	r6, r9
 800b186:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b18a:	f84a 3b04 	str.w	r3, [sl], #4
 800b18e:	d8e7      	bhi.n	800b160 <__mdiff+0x80>
 800b190:	1b33      	subs	r3, r6, r4
 800b192:	3b15      	subs	r3, #21
 800b194:	f023 0303 	bic.w	r3, r3, #3
 800b198:	3304      	adds	r3, #4
 800b19a:	3415      	adds	r4, #21
 800b19c:	42a6      	cmp	r6, r4
 800b19e:	bf38      	it	cc
 800b1a0:	2304      	movcc	r3, #4
 800b1a2:	441d      	add	r5, r3
 800b1a4:	4473      	add	r3, lr
 800b1a6:	469e      	mov	lr, r3
 800b1a8:	462e      	mov	r6, r5
 800b1aa:	4566      	cmp	r6, ip
 800b1ac:	d30e      	bcc.n	800b1cc <__mdiff+0xec>
 800b1ae:	f10c 0203 	add.w	r2, ip, #3
 800b1b2:	1b52      	subs	r2, r2, r5
 800b1b4:	f022 0203 	bic.w	r2, r2, #3
 800b1b8:	3d03      	subs	r5, #3
 800b1ba:	45ac      	cmp	ip, r5
 800b1bc:	bf38      	it	cc
 800b1be:	2200      	movcc	r2, #0
 800b1c0:	441a      	add	r2, r3
 800b1c2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b1c6:	b17b      	cbz	r3, 800b1e8 <__mdiff+0x108>
 800b1c8:	6107      	str	r7, [r0, #16]
 800b1ca:	e7a3      	b.n	800b114 <__mdiff+0x34>
 800b1cc:	f856 8b04 	ldr.w	r8, [r6], #4
 800b1d0:	fa11 f288 	uxtah	r2, r1, r8
 800b1d4:	1414      	asrs	r4, r2, #16
 800b1d6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b1da:	b292      	uxth	r2, r2
 800b1dc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b1e0:	f84e 2b04 	str.w	r2, [lr], #4
 800b1e4:	1421      	asrs	r1, r4, #16
 800b1e6:	e7e0      	b.n	800b1aa <__mdiff+0xca>
 800b1e8:	3f01      	subs	r7, #1
 800b1ea:	e7ea      	b.n	800b1c2 <__mdiff+0xe2>
 800b1ec:	0800c560 	.word	0x0800c560
 800b1f0:	0800c5ec 	.word	0x0800c5ec

0800b1f4 <__ulp>:
 800b1f4:	b082      	sub	sp, #8
 800b1f6:	ed8d 0b00 	vstr	d0, [sp]
 800b1fa:	9b01      	ldr	r3, [sp, #4]
 800b1fc:	4912      	ldr	r1, [pc, #72]	; (800b248 <__ulp+0x54>)
 800b1fe:	4019      	ands	r1, r3
 800b200:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b204:	2900      	cmp	r1, #0
 800b206:	dd05      	ble.n	800b214 <__ulp+0x20>
 800b208:	2200      	movs	r2, #0
 800b20a:	460b      	mov	r3, r1
 800b20c:	ec43 2b10 	vmov	d0, r2, r3
 800b210:	b002      	add	sp, #8
 800b212:	4770      	bx	lr
 800b214:	4249      	negs	r1, r1
 800b216:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b21a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b21e:	f04f 0200 	mov.w	r2, #0
 800b222:	f04f 0300 	mov.w	r3, #0
 800b226:	da04      	bge.n	800b232 <__ulp+0x3e>
 800b228:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b22c:	fa41 f300 	asr.w	r3, r1, r0
 800b230:	e7ec      	b.n	800b20c <__ulp+0x18>
 800b232:	f1a0 0114 	sub.w	r1, r0, #20
 800b236:	291e      	cmp	r1, #30
 800b238:	bfda      	itte	le
 800b23a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b23e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b242:	2101      	movgt	r1, #1
 800b244:	460a      	mov	r2, r1
 800b246:	e7e1      	b.n	800b20c <__ulp+0x18>
 800b248:	7ff00000 	.word	0x7ff00000

0800b24c <__b2d>:
 800b24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b24e:	6905      	ldr	r5, [r0, #16]
 800b250:	f100 0714 	add.w	r7, r0, #20
 800b254:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b258:	1f2e      	subs	r6, r5, #4
 800b25a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b25e:	4620      	mov	r0, r4
 800b260:	f7ff fd48 	bl	800acf4 <__hi0bits>
 800b264:	f1c0 0320 	rsb	r3, r0, #32
 800b268:	280a      	cmp	r0, #10
 800b26a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b2e8 <__b2d+0x9c>
 800b26e:	600b      	str	r3, [r1, #0]
 800b270:	dc14      	bgt.n	800b29c <__b2d+0x50>
 800b272:	f1c0 0e0b 	rsb	lr, r0, #11
 800b276:	fa24 f10e 	lsr.w	r1, r4, lr
 800b27a:	42b7      	cmp	r7, r6
 800b27c:	ea41 030c 	orr.w	r3, r1, ip
 800b280:	bf34      	ite	cc
 800b282:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b286:	2100      	movcs	r1, #0
 800b288:	3015      	adds	r0, #21
 800b28a:	fa04 f000 	lsl.w	r0, r4, r0
 800b28e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b292:	ea40 0201 	orr.w	r2, r0, r1
 800b296:	ec43 2b10 	vmov	d0, r2, r3
 800b29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b29c:	42b7      	cmp	r7, r6
 800b29e:	bf3a      	itte	cc
 800b2a0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b2a4:	f1a5 0608 	subcc.w	r6, r5, #8
 800b2a8:	2100      	movcs	r1, #0
 800b2aa:	380b      	subs	r0, #11
 800b2ac:	d017      	beq.n	800b2de <__b2d+0x92>
 800b2ae:	f1c0 0c20 	rsb	ip, r0, #32
 800b2b2:	fa04 f500 	lsl.w	r5, r4, r0
 800b2b6:	42be      	cmp	r6, r7
 800b2b8:	fa21 f40c 	lsr.w	r4, r1, ip
 800b2bc:	ea45 0504 	orr.w	r5, r5, r4
 800b2c0:	bf8c      	ite	hi
 800b2c2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b2c6:	2400      	movls	r4, #0
 800b2c8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b2cc:	fa01 f000 	lsl.w	r0, r1, r0
 800b2d0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b2d4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b2d8:	ea40 0204 	orr.w	r2, r0, r4
 800b2dc:	e7db      	b.n	800b296 <__b2d+0x4a>
 800b2de:	ea44 030c 	orr.w	r3, r4, ip
 800b2e2:	460a      	mov	r2, r1
 800b2e4:	e7d7      	b.n	800b296 <__b2d+0x4a>
 800b2e6:	bf00      	nop
 800b2e8:	3ff00000 	.word	0x3ff00000

0800b2ec <__d2b>:
 800b2ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2f0:	4689      	mov	r9, r1
 800b2f2:	2101      	movs	r1, #1
 800b2f4:	ec57 6b10 	vmov	r6, r7, d0
 800b2f8:	4690      	mov	r8, r2
 800b2fa:	f7ff fc09 	bl	800ab10 <_Balloc>
 800b2fe:	4604      	mov	r4, r0
 800b300:	b930      	cbnz	r0, 800b310 <__d2b+0x24>
 800b302:	4602      	mov	r2, r0
 800b304:	4b25      	ldr	r3, [pc, #148]	; (800b39c <__d2b+0xb0>)
 800b306:	4826      	ldr	r0, [pc, #152]	; (800b3a0 <__d2b+0xb4>)
 800b308:	f240 310a 	movw	r1, #778	; 0x30a
 800b30c:	f000 fa5a 	bl	800b7c4 <__assert_func>
 800b310:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b314:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b318:	bb35      	cbnz	r5, 800b368 <__d2b+0x7c>
 800b31a:	2e00      	cmp	r6, #0
 800b31c:	9301      	str	r3, [sp, #4]
 800b31e:	d028      	beq.n	800b372 <__d2b+0x86>
 800b320:	4668      	mov	r0, sp
 800b322:	9600      	str	r6, [sp, #0]
 800b324:	f7ff fd06 	bl	800ad34 <__lo0bits>
 800b328:	9900      	ldr	r1, [sp, #0]
 800b32a:	b300      	cbz	r0, 800b36e <__d2b+0x82>
 800b32c:	9a01      	ldr	r2, [sp, #4]
 800b32e:	f1c0 0320 	rsb	r3, r0, #32
 800b332:	fa02 f303 	lsl.w	r3, r2, r3
 800b336:	430b      	orrs	r3, r1
 800b338:	40c2      	lsrs	r2, r0
 800b33a:	6163      	str	r3, [r4, #20]
 800b33c:	9201      	str	r2, [sp, #4]
 800b33e:	9b01      	ldr	r3, [sp, #4]
 800b340:	61a3      	str	r3, [r4, #24]
 800b342:	2b00      	cmp	r3, #0
 800b344:	bf14      	ite	ne
 800b346:	2202      	movne	r2, #2
 800b348:	2201      	moveq	r2, #1
 800b34a:	6122      	str	r2, [r4, #16]
 800b34c:	b1d5      	cbz	r5, 800b384 <__d2b+0x98>
 800b34e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b352:	4405      	add	r5, r0
 800b354:	f8c9 5000 	str.w	r5, [r9]
 800b358:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b35c:	f8c8 0000 	str.w	r0, [r8]
 800b360:	4620      	mov	r0, r4
 800b362:	b003      	add	sp, #12
 800b364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b368:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b36c:	e7d5      	b.n	800b31a <__d2b+0x2e>
 800b36e:	6161      	str	r1, [r4, #20]
 800b370:	e7e5      	b.n	800b33e <__d2b+0x52>
 800b372:	a801      	add	r0, sp, #4
 800b374:	f7ff fcde 	bl	800ad34 <__lo0bits>
 800b378:	9b01      	ldr	r3, [sp, #4]
 800b37a:	6163      	str	r3, [r4, #20]
 800b37c:	2201      	movs	r2, #1
 800b37e:	6122      	str	r2, [r4, #16]
 800b380:	3020      	adds	r0, #32
 800b382:	e7e3      	b.n	800b34c <__d2b+0x60>
 800b384:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b388:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b38c:	f8c9 0000 	str.w	r0, [r9]
 800b390:	6918      	ldr	r0, [r3, #16]
 800b392:	f7ff fcaf 	bl	800acf4 <__hi0bits>
 800b396:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b39a:	e7df      	b.n	800b35c <__d2b+0x70>
 800b39c:	0800c560 	.word	0x0800c560
 800b3a0:	0800c5ec 	.word	0x0800c5ec

0800b3a4 <__ratio>:
 800b3a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a8:	4688      	mov	r8, r1
 800b3aa:	4669      	mov	r1, sp
 800b3ac:	4681      	mov	r9, r0
 800b3ae:	f7ff ff4d 	bl	800b24c <__b2d>
 800b3b2:	a901      	add	r1, sp, #4
 800b3b4:	4640      	mov	r0, r8
 800b3b6:	ec55 4b10 	vmov	r4, r5, d0
 800b3ba:	ee10 aa10 	vmov	sl, s0
 800b3be:	f7ff ff45 	bl	800b24c <__b2d>
 800b3c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b3c6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800b3ca:	1a59      	subs	r1, r3, r1
 800b3cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3d0:	1ad3      	subs	r3, r2, r3
 800b3d2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800b3d6:	ec57 6b10 	vmov	r6, r7, d0
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	bfd6      	itet	le
 800b3de:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b3e2:	462a      	movgt	r2, r5
 800b3e4:	463a      	movle	r2, r7
 800b3e6:	46ab      	mov	fp, r5
 800b3e8:	bfd6      	itet	le
 800b3ea:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800b3ee:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800b3f2:	ee00 3a90 	vmovle	s1, r3
 800b3f6:	ec4b ab17 	vmov	d7, sl, fp
 800b3fa:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800b3fe:	b003      	add	sp, #12
 800b400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b404 <__copybits>:
 800b404:	3901      	subs	r1, #1
 800b406:	b570      	push	{r4, r5, r6, lr}
 800b408:	1149      	asrs	r1, r1, #5
 800b40a:	6914      	ldr	r4, [r2, #16]
 800b40c:	3101      	adds	r1, #1
 800b40e:	f102 0314 	add.w	r3, r2, #20
 800b412:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b416:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b41a:	1f05      	subs	r5, r0, #4
 800b41c:	42a3      	cmp	r3, r4
 800b41e:	d30c      	bcc.n	800b43a <__copybits+0x36>
 800b420:	1aa3      	subs	r3, r4, r2
 800b422:	3b11      	subs	r3, #17
 800b424:	f023 0303 	bic.w	r3, r3, #3
 800b428:	3211      	adds	r2, #17
 800b42a:	42a2      	cmp	r2, r4
 800b42c:	bf88      	it	hi
 800b42e:	2300      	movhi	r3, #0
 800b430:	4418      	add	r0, r3
 800b432:	2300      	movs	r3, #0
 800b434:	4288      	cmp	r0, r1
 800b436:	d305      	bcc.n	800b444 <__copybits+0x40>
 800b438:	bd70      	pop	{r4, r5, r6, pc}
 800b43a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b43e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b442:	e7eb      	b.n	800b41c <__copybits+0x18>
 800b444:	f840 3b04 	str.w	r3, [r0], #4
 800b448:	e7f4      	b.n	800b434 <__copybits+0x30>

0800b44a <__any_on>:
 800b44a:	f100 0214 	add.w	r2, r0, #20
 800b44e:	6900      	ldr	r0, [r0, #16]
 800b450:	114b      	asrs	r3, r1, #5
 800b452:	4298      	cmp	r0, r3
 800b454:	b510      	push	{r4, lr}
 800b456:	db11      	blt.n	800b47c <__any_on+0x32>
 800b458:	dd0a      	ble.n	800b470 <__any_on+0x26>
 800b45a:	f011 011f 	ands.w	r1, r1, #31
 800b45e:	d007      	beq.n	800b470 <__any_on+0x26>
 800b460:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b464:	fa24 f001 	lsr.w	r0, r4, r1
 800b468:	fa00 f101 	lsl.w	r1, r0, r1
 800b46c:	428c      	cmp	r4, r1
 800b46e:	d10b      	bne.n	800b488 <__any_on+0x3e>
 800b470:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b474:	4293      	cmp	r3, r2
 800b476:	d803      	bhi.n	800b480 <__any_on+0x36>
 800b478:	2000      	movs	r0, #0
 800b47a:	bd10      	pop	{r4, pc}
 800b47c:	4603      	mov	r3, r0
 800b47e:	e7f7      	b.n	800b470 <__any_on+0x26>
 800b480:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b484:	2900      	cmp	r1, #0
 800b486:	d0f5      	beq.n	800b474 <__any_on+0x2a>
 800b488:	2001      	movs	r0, #1
 800b48a:	e7f6      	b.n	800b47a <__any_on+0x30>

0800b48c <_calloc_r>:
 800b48c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b48e:	fba1 2402 	umull	r2, r4, r1, r2
 800b492:	b94c      	cbnz	r4, 800b4a8 <_calloc_r+0x1c>
 800b494:	4611      	mov	r1, r2
 800b496:	9201      	str	r2, [sp, #4]
 800b498:	f7fc fc60 	bl	8007d5c <_malloc_r>
 800b49c:	9a01      	ldr	r2, [sp, #4]
 800b49e:	4605      	mov	r5, r0
 800b4a0:	b930      	cbnz	r0, 800b4b0 <_calloc_r+0x24>
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	b003      	add	sp, #12
 800b4a6:	bd30      	pop	{r4, r5, pc}
 800b4a8:	220c      	movs	r2, #12
 800b4aa:	6002      	str	r2, [r0, #0]
 800b4ac:	2500      	movs	r5, #0
 800b4ae:	e7f8      	b.n	800b4a2 <_calloc_r+0x16>
 800b4b0:	4621      	mov	r1, r4
 800b4b2:	f7fc fbdf 	bl	8007c74 <memset>
 800b4b6:	e7f4      	b.n	800b4a2 <_calloc_r+0x16>

0800b4b8 <__ssputs_r>:
 800b4b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4bc:	688e      	ldr	r6, [r1, #8]
 800b4be:	429e      	cmp	r6, r3
 800b4c0:	4682      	mov	sl, r0
 800b4c2:	460c      	mov	r4, r1
 800b4c4:	4690      	mov	r8, r2
 800b4c6:	461f      	mov	r7, r3
 800b4c8:	d838      	bhi.n	800b53c <__ssputs_r+0x84>
 800b4ca:	898a      	ldrh	r2, [r1, #12]
 800b4cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b4d0:	d032      	beq.n	800b538 <__ssputs_r+0x80>
 800b4d2:	6825      	ldr	r5, [r4, #0]
 800b4d4:	6909      	ldr	r1, [r1, #16]
 800b4d6:	eba5 0901 	sub.w	r9, r5, r1
 800b4da:	6965      	ldr	r5, [r4, #20]
 800b4dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	444b      	add	r3, r9
 800b4e8:	106d      	asrs	r5, r5, #1
 800b4ea:	429d      	cmp	r5, r3
 800b4ec:	bf38      	it	cc
 800b4ee:	461d      	movcc	r5, r3
 800b4f0:	0553      	lsls	r3, r2, #21
 800b4f2:	d531      	bpl.n	800b558 <__ssputs_r+0xa0>
 800b4f4:	4629      	mov	r1, r5
 800b4f6:	f7fc fc31 	bl	8007d5c <_malloc_r>
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	b950      	cbnz	r0, 800b514 <__ssputs_r+0x5c>
 800b4fe:	230c      	movs	r3, #12
 800b500:	f8ca 3000 	str.w	r3, [sl]
 800b504:	89a3      	ldrh	r3, [r4, #12]
 800b506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b50a:	81a3      	strh	r3, [r4, #12]
 800b50c:	f04f 30ff 	mov.w	r0, #4294967295
 800b510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b514:	6921      	ldr	r1, [r4, #16]
 800b516:	464a      	mov	r2, r9
 800b518:	f7fc fb9e 	bl	8007c58 <memcpy>
 800b51c:	89a3      	ldrh	r3, [r4, #12]
 800b51e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b526:	81a3      	strh	r3, [r4, #12]
 800b528:	6126      	str	r6, [r4, #16]
 800b52a:	6165      	str	r5, [r4, #20]
 800b52c:	444e      	add	r6, r9
 800b52e:	eba5 0509 	sub.w	r5, r5, r9
 800b532:	6026      	str	r6, [r4, #0]
 800b534:	60a5      	str	r5, [r4, #8]
 800b536:	463e      	mov	r6, r7
 800b538:	42be      	cmp	r6, r7
 800b53a:	d900      	bls.n	800b53e <__ssputs_r+0x86>
 800b53c:	463e      	mov	r6, r7
 800b53e:	6820      	ldr	r0, [r4, #0]
 800b540:	4632      	mov	r2, r6
 800b542:	4641      	mov	r1, r8
 800b544:	f000 f96e 	bl	800b824 <memmove>
 800b548:	68a3      	ldr	r3, [r4, #8]
 800b54a:	1b9b      	subs	r3, r3, r6
 800b54c:	60a3      	str	r3, [r4, #8]
 800b54e:	6823      	ldr	r3, [r4, #0]
 800b550:	4433      	add	r3, r6
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	2000      	movs	r0, #0
 800b556:	e7db      	b.n	800b510 <__ssputs_r+0x58>
 800b558:	462a      	mov	r2, r5
 800b55a:	f000 f97d 	bl	800b858 <_realloc_r>
 800b55e:	4606      	mov	r6, r0
 800b560:	2800      	cmp	r0, #0
 800b562:	d1e1      	bne.n	800b528 <__ssputs_r+0x70>
 800b564:	6921      	ldr	r1, [r4, #16]
 800b566:	4650      	mov	r0, sl
 800b568:	f7fc fb8c 	bl	8007c84 <_free_r>
 800b56c:	e7c7      	b.n	800b4fe <__ssputs_r+0x46>
	...

0800b570 <_svfiprintf_r>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	4698      	mov	r8, r3
 800b576:	898b      	ldrh	r3, [r1, #12]
 800b578:	061b      	lsls	r3, r3, #24
 800b57a:	b09d      	sub	sp, #116	; 0x74
 800b57c:	4607      	mov	r7, r0
 800b57e:	460d      	mov	r5, r1
 800b580:	4614      	mov	r4, r2
 800b582:	d50e      	bpl.n	800b5a2 <_svfiprintf_r+0x32>
 800b584:	690b      	ldr	r3, [r1, #16]
 800b586:	b963      	cbnz	r3, 800b5a2 <_svfiprintf_r+0x32>
 800b588:	2140      	movs	r1, #64	; 0x40
 800b58a:	f7fc fbe7 	bl	8007d5c <_malloc_r>
 800b58e:	6028      	str	r0, [r5, #0]
 800b590:	6128      	str	r0, [r5, #16]
 800b592:	b920      	cbnz	r0, 800b59e <_svfiprintf_r+0x2e>
 800b594:	230c      	movs	r3, #12
 800b596:	603b      	str	r3, [r7, #0]
 800b598:	f04f 30ff 	mov.w	r0, #4294967295
 800b59c:	e0d1      	b.n	800b742 <_svfiprintf_r+0x1d2>
 800b59e:	2340      	movs	r3, #64	; 0x40
 800b5a0:	616b      	str	r3, [r5, #20]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	9309      	str	r3, [sp, #36]	; 0x24
 800b5a6:	2320      	movs	r3, #32
 800b5a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5b0:	2330      	movs	r3, #48	; 0x30
 800b5b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b75c <_svfiprintf_r+0x1ec>
 800b5b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5ba:	f04f 0901 	mov.w	r9, #1
 800b5be:	4623      	mov	r3, r4
 800b5c0:	469a      	mov	sl, r3
 800b5c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5c6:	b10a      	cbz	r2, 800b5cc <_svfiprintf_r+0x5c>
 800b5c8:	2a25      	cmp	r2, #37	; 0x25
 800b5ca:	d1f9      	bne.n	800b5c0 <_svfiprintf_r+0x50>
 800b5cc:	ebba 0b04 	subs.w	fp, sl, r4
 800b5d0:	d00b      	beq.n	800b5ea <_svfiprintf_r+0x7a>
 800b5d2:	465b      	mov	r3, fp
 800b5d4:	4622      	mov	r2, r4
 800b5d6:	4629      	mov	r1, r5
 800b5d8:	4638      	mov	r0, r7
 800b5da:	f7ff ff6d 	bl	800b4b8 <__ssputs_r>
 800b5de:	3001      	adds	r0, #1
 800b5e0:	f000 80aa 	beq.w	800b738 <_svfiprintf_r+0x1c8>
 800b5e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5e6:	445a      	add	r2, fp
 800b5e8:	9209      	str	r2, [sp, #36]	; 0x24
 800b5ea:	f89a 3000 	ldrb.w	r3, [sl]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	f000 80a2 	beq.w	800b738 <_svfiprintf_r+0x1c8>
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5fe:	f10a 0a01 	add.w	sl, sl, #1
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	9307      	str	r3, [sp, #28]
 800b606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b60a:	931a      	str	r3, [sp, #104]	; 0x68
 800b60c:	4654      	mov	r4, sl
 800b60e:	2205      	movs	r2, #5
 800b610:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b614:	4851      	ldr	r0, [pc, #324]	; (800b75c <_svfiprintf_r+0x1ec>)
 800b616:	f7f4 fe1b 	bl	8000250 <memchr>
 800b61a:	9a04      	ldr	r2, [sp, #16]
 800b61c:	b9d8      	cbnz	r0, 800b656 <_svfiprintf_r+0xe6>
 800b61e:	06d0      	lsls	r0, r2, #27
 800b620:	bf44      	itt	mi
 800b622:	2320      	movmi	r3, #32
 800b624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b628:	0711      	lsls	r1, r2, #28
 800b62a:	bf44      	itt	mi
 800b62c:	232b      	movmi	r3, #43	; 0x2b
 800b62e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b632:	f89a 3000 	ldrb.w	r3, [sl]
 800b636:	2b2a      	cmp	r3, #42	; 0x2a
 800b638:	d015      	beq.n	800b666 <_svfiprintf_r+0xf6>
 800b63a:	9a07      	ldr	r2, [sp, #28]
 800b63c:	4654      	mov	r4, sl
 800b63e:	2000      	movs	r0, #0
 800b640:	f04f 0c0a 	mov.w	ip, #10
 800b644:	4621      	mov	r1, r4
 800b646:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b64a:	3b30      	subs	r3, #48	; 0x30
 800b64c:	2b09      	cmp	r3, #9
 800b64e:	d94e      	bls.n	800b6ee <_svfiprintf_r+0x17e>
 800b650:	b1b0      	cbz	r0, 800b680 <_svfiprintf_r+0x110>
 800b652:	9207      	str	r2, [sp, #28]
 800b654:	e014      	b.n	800b680 <_svfiprintf_r+0x110>
 800b656:	eba0 0308 	sub.w	r3, r0, r8
 800b65a:	fa09 f303 	lsl.w	r3, r9, r3
 800b65e:	4313      	orrs	r3, r2
 800b660:	9304      	str	r3, [sp, #16]
 800b662:	46a2      	mov	sl, r4
 800b664:	e7d2      	b.n	800b60c <_svfiprintf_r+0x9c>
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	1d19      	adds	r1, r3, #4
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	9103      	str	r1, [sp, #12]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	bfbb      	ittet	lt
 800b672:	425b      	neglt	r3, r3
 800b674:	f042 0202 	orrlt.w	r2, r2, #2
 800b678:	9307      	strge	r3, [sp, #28]
 800b67a:	9307      	strlt	r3, [sp, #28]
 800b67c:	bfb8      	it	lt
 800b67e:	9204      	strlt	r2, [sp, #16]
 800b680:	7823      	ldrb	r3, [r4, #0]
 800b682:	2b2e      	cmp	r3, #46	; 0x2e
 800b684:	d10c      	bne.n	800b6a0 <_svfiprintf_r+0x130>
 800b686:	7863      	ldrb	r3, [r4, #1]
 800b688:	2b2a      	cmp	r3, #42	; 0x2a
 800b68a:	d135      	bne.n	800b6f8 <_svfiprintf_r+0x188>
 800b68c:	9b03      	ldr	r3, [sp, #12]
 800b68e:	1d1a      	adds	r2, r3, #4
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	9203      	str	r2, [sp, #12]
 800b694:	2b00      	cmp	r3, #0
 800b696:	bfb8      	it	lt
 800b698:	f04f 33ff 	movlt.w	r3, #4294967295
 800b69c:	3402      	adds	r4, #2
 800b69e:	9305      	str	r3, [sp, #20]
 800b6a0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b76c <_svfiprintf_r+0x1fc>
 800b6a4:	7821      	ldrb	r1, [r4, #0]
 800b6a6:	2203      	movs	r2, #3
 800b6a8:	4650      	mov	r0, sl
 800b6aa:	f7f4 fdd1 	bl	8000250 <memchr>
 800b6ae:	b140      	cbz	r0, 800b6c2 <_svfiprintf_r+0x152>
 800b6b0:	2340      	movs	r3, #64	; 0x40
 800b6b2:	eba0 000a 	sub.w	r0, r0, sl
 800b6b6:	fa03 f000 	lsl.w	r0, r3, r0
 800b6ba:	9b04      	ldr	r3, [sp, #16]
 800b6bc:	4303      	orrs	r3, r0
 800b6be:	3401      	adds	r4, #1
 800b6c0:	9304      	str	r3, [sp, #16]
 800b6c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6c6:	4826      	ldr	r0, [pc, #152]	; (800b760 <_svfiprintf_r+0x1f0>)
 800b6c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6cc:	2206      	movs	r2, #6
 800b6ce:	f7f4 fdbf 	bl	8000250 <memchr>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d038      	beq.n	800b748 <_svfiprintf_r+0x1d8>
 800b6d6:	4b23      	ldr	r3, [pc, #140]	; (800b764 <_svfiprintf_r+0x1f4>)
 800b6d8:	bb1b      	cbnz	r3, 800b722 <_svfiprintf_r+0x1b2>
 800b6da:	9b03      	ldr	r3, [sp, #12]
 800b6dc:	3307      	adds	r3, #7
 800b6de:	f023 0307 	bic.w	r3, r3, #7
 800b6e2:	3308      	adds	r3, #8
 800b6e4:	9303      	str	r3, [sp, #12]
 800b6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e8:	4433      	add	r3, r6
 800b6ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ec:	e767      	b.n	800b5be <_svfiprintf_r+0x4e>
 800b6ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	2001      	movs	r0, #1
 800b6f6:	e7a5      	b.n	800b644 <_svfiprintf_r+0xd4>
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	3401      	adds	r4, #1
 800b6fc:	9305      	str	r3, [sp, #20]
 800b6fe:	4619      	mov	r1, r3
 800b700:	f04f 0c0a 	mov.w	ip, #10
 800b704:	4620      	mov	r0, r4
 800b706:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b70a:	3a30      	subs	r2, #48	; 0x30
 800b70c:	2a09      	cmp	r2, #9
 800b70e:	d903      	bls.n	800b718 <_svfiprintf_r+0x1a8>
 800b710:	2b00      	cmp	r3, #0
 800b712:	d0c5      	beq.n	800b6a0 <_svfiprintf_r+0x130>
 800b714:	9105      	str	r1, [sp, #20]
 800b716:	e7c3      	b.n	800b6a0 <_svfiprintf_r+0x130>
 800b718:	fb0c 2101 	mla	r1, ip, r1, r2
 800b71c:	4604      	mov	r4, r0
 800b71e:	2301      	movs	r3, #1
 800b720:	e7f0      	b.n	800b704 <_svfiprintf_r+0x194>
 800b722:	ab03      	add	r3, sp, #12
 800b724:	9300      	str	r3, [sp, #0]
 800b726:	462a      	mov	r2, r5
 800b728:	4b0f      	ldr	r3, [pc, #60]	; (800b768 <_svfiprintf_r+0x1f8>)
 800b72a:	a904      	add	r1, sp, #16
 800b72c:	4638      	mov	r0, r7
 800b72e:	f7fc fc1b 	bl	8007f68 <_printf_float>
 800b732:	1c42      	adds	r2, r0, #1
 800b734:	4606      	mov	r6, r0
 800b736:	d1d6      	bne.n	800b6e6 <_svfiprintf_r+0x176>
 800b738:	89ab      	ldrh	r3, [r5, #12]
 800b73a:	065b      	lsls	r3, r3, #25
 800b73c:	f53f af2c 	bmi.w	800b598 <_svfiprintf_r+0x28>
 800b740:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b742:	b01d      	add	sp, #116	; 0x74
 800b744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b748:	ab03      	add	r3, sp, #12
 800b74a:	9300      	str	r3, [sp, #0]
 800b74c:	462a      	mov	r2, r5
 800b74e:	4b06      	ldr	r3, [pc, #24]	; (800b768 <_svfiprintf_r+0x1f8>)
 800b750:	a904      	add	r1, sp, #16
 800b752:	4638      	mov	r0, r7
 800b754:	f7fc fe94 	bl	8008480 <_printf_i>
 800b758:	e7eb      	b.n	800b732 <_svfiprintf_r+0x1c2>
 800b75a:	bf00      	nop
 800b75c:	0800c744 	.word	0x0800c744
 800b760:	0800c74e 	.word	0x0800c74e
 800b764:	08007f69 	.word	0x08007f69
 800b768:	0800b4b9 	.word	0x0800b4b9
 800b76c:	0800c74a 	.word	0x0800c74a

0800b770 <nan>:
 800b770:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b778 <nan+0x8>
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	00000000 	.word	0x00000000
 800b77c:	7ff80000 	.word	0x7ff80000

0800b780 <strncmp>:
 800b780:	b510      	push	{r4, lr}
 800b782:	b17a      	cbz	r2, 800b7a4 <strncmp+0x24>
 800b784:	4603      	mov	r3, r0
 800b786:	3901      	subs	r1, #1
 800b788:	1884      	adds	r4, r0, r2
 800b78a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b78e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b792:	4290      	cmp	r0, r2
 800b794:	d101      	bne.n	800b79a <strncmp+0x1a>
 800b796:	42a3      	cmp	r3, r4
 800b798:	d101      	bne.n	800b79e <strncmp+0x1e>
 800b79a:	1a80      	subs	r0, r0, r2
 800b79c:	bd10      	pop	{r4, pc}
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	d1f3      	bne.n	800b78a <strncmp+0xa>
 800b7a2:	e7fa      	b.n	800b79a <strncmp+0x1a>
 800b7a4:	4610      	mov	r0, r2
 800b7a6:	e7f9      	b.n	800b79c <strncmp+0x1c>

0800b7a8 <__ascii_wctomb>:
 800b7a8:	b149      	cbz	r1, 800b7be <__ascii_wctomb+0x16>
 800b7aa:	2aff      	cmp	r2, #255	; 0xff
 800b7ac:	bf85      	ittet	hi
 800b7ae:	238a      	movhi	r3, #138	; 0x8a
 800b7b0:	6003      	strhi	r3, [r0, #0]
 800b7b2:	700a      	strbls	r2, [r1, #0]
 800b7b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800b7b8:	bf98      	it	ls
 800b7ba:	2001      	movls	r0, #1
 800b7bc:	4770      	bx	lr
 800b7be:	4608      	mov	r0, r1
 800b7c0:	4770      	bx	lr
	...

0800b7c4 <__assert_func>:
 800b7c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b7c6:	4614      	mov	r4, r2
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	4b09      	ldr	r3, [pc, #36]	; (800b7f0 <__assert_func+0x2c>)
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4605      	mov	r5, r0
 800b7d0:	68d8      	ldr	r0, [r3, #12]
 800b7d2:	b14c      	cbz	r4, 800b7e8 <__assert_func+0x24>
 800b7d4:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <__assert_func+0x30>)
 800b7d6:	9100      	str	r1, [sp, #0]
 800b7d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b7dc:	4906      	ldr	r1, [pc, #24]	; (800b7f8 <__assert_func+0x34>)
 800b7de:	462b      	mov	r3, r5
 800b7e0:	f000 f80e 	bl	800b800 <fiprintf>
 800b7e4:	f000 fa80 	bl	800bce8 <abort>
 800b7e8:	4b04      	ldr	r3, [pc, #16]	; (800b7fc <__assert_func+0x38>)
 800b7ea:	461c      	mov	r4, r3
 800b7ec:	e7f3      	b.n	800b7d6 <__assert_func+0x12>
 800b7ee:	bf00      	nop
 800b7f0:	20000014 	.word	0x20000014
 800b7f4:	0800c755 	.word	0x0800c755
 800b7f8:	0800c762 	.word	0x0800c762
 800b7fc:	0800c790 	.word	0x0800c790

0800b800 <fiprintf>:
 800b800:	b40e      	push	{r1, r2, r3}
 800b802:	b503      	push	{r0, r1, lr}
 800b804:	4601      	mov	r1, r0
 800b806:	ab03      	add	r3, sp, #12
 800b808:	4805      	ldr	r0, [pc, #20]	; (800b820 <fiprintf+0x20>)
 800b80a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b80e:	6800      	ldr	r0, [r0, #0]
 800b810:	9301      	str	r3, [sp, #4]
 800b812:	f000 f879 	bl	800b908 <_vfiprintf_r>
 800b816:	b002      	add	sp, #8
 800b818:	f85d eb04 	ldr.w	lr, [sp], #4
 800b81c:	b003      	add	sp, #12
 800b81e:	4770      	bx	lr
 800b820:	20000014 	.word	0x20000014

0800b824 <memmove>:
 800b824:	4288      	cmp	r0, r1
 800b826:	b510      	push	{r4, lr}
 800b828:	eb01 0402 	add.w	r4, r1, r2
 800b82c:	d902      	bls.n	800b834 <memmove+0x10>
 800b82e:	4284      	cmp	r4, r0
 800b830:	4623      	mov	r3, r4
 800b832:	d807      	bhi.n	800b844 <memmove+0x20>
 800b834:	1e43      	subs	r3, r0, #1
 800b836:	42a1      	cmp	r1, r4
 800b838:	d008      	beq.n	800b84c <memmove+0x28>
 800b83a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b83e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b842:	e7f8      	b.n	800b836 <memmove+0x12>
 800b844:	4402      	add	r2, r0
 800b846:	4601      	mov	r1, r0
 800b848:	428a      	cmp	r2, r1
 800b84a:	d100      	bne.n	800b84e <memmove+0x2a>
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b852:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b856:	e7f7      	b.n	800b848 <memmove+0x24>

0800b858 <_realloc_r>:
 800b858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b85c:	4680      	mov	r8, r0
 800b85e:	4614      	mov	r4, r2
 800b860:	460e      	mov	r6, r1
 800b862:	b921      	cbnz	r1, 800b86e <_realloc_r+0x16>
 800b864:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b868:	4611      	mov	r1, r2
 800b86a:	f7fc ba77 	b.w	8007d5c <_malloc_r>
 800b86e:	b92a      	cbnz	r2, 800b87c <_realloc_r+0x24>
 800b870:	f7fc fa08 	bl	8007c84 <_free_r>
 800b874:	4625      	mov	r5, r4
 800b876:	4628      	mov	r0, r5
 800b878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b87c:	f000 fc58 	bl	800c130 <_malloc_usable_size_r>
 800b880:	4284      	cmp	r4, r0
 800b882:	4607      	mov	r7, r0
 800b884:	d802      	bhi.n	800b88c <_realloc_r+0x34>
 800b886:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b88a:	d812      	bhi.n	800b8b2 <_realloc_r+0x5a>
 800b88c:	4621      	mov	r1, r4
 800b88e:	4640      	mov	r0, r8
 800b890:	f7fc fa64 	bl	8007d5c <_malloc_r>
 800b894:	4605      	mov	r5, r0
 800b896:	2800      	cmp	r0, #0
 800b898:	d0ed      	beq.n	800b876 <_realloc_r+0x1e>
 800b89a:	42bc      	cmp	r4, r7
 800b89c:	4622      	mov	r2, r4
 800b89e:	4631      	mov	r1, r6
 800b8a0:	bf28      	it	cs
 800b8a2:	463a      	movcs	r2, r7
 800b8a4:	f7fc f9d8 	bl	8007c58 <memcpy>
 800b8a8:	4631      	mov	r1, r6
 800b8aa:	4640      	mov	r0, r8
 800b8ac:	f7fc f9ea 	bl	8007c84 <_free_r>
 800b8b0:	e7e1      	b.n	800b876 <_realloc_r+0x1e>
 800b8b2:	4635      	mov	r5, r6
 800b8b4:	e7df      	b.n	800b876 <_realloc_r+0x1e>

0800b8b6 <__sfputc_r>:
 800b8b6:	6893      	ldr	r3, [r2, #8]
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	b410      	push	{r4}
 800b8be:	6093      	str	r3, [r2, #8]
 800b8c0:	da08      	bge.n	800b8d4 <__sfputc_r+0x1e>
 800b8c2:	6994      	ldr	r4, [r2, #24]
 800b8c4:	42a3      	cmp	r3, r4
 800b8c6:	db01      	blt.n	800b8cc <__sfputc_r+0x16>
 800b8c8:	290a      	cmp	r1, #10
 800b8ca:	d103      	bne.n	800b8d4 <__sfputc_r+0x1e>
 800b8cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d0:	f000 b94a 	b.w	800bb68 <__swbuf_r>
 800b8d4:	6813      	ldr	r3, [r2, #0]
 800b8d6:	1c58      	adds	r0, r3, #1
 800b8d8:	6010      	str	r0, [r2, #0]
 800b8da:	7019      	strb	r1, [r3, #0]
 800b8dc:	4608      	mov	r0, r1
 800b8de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e2:	4770      	bx	lr

0800b8e4 <__sfputs_r>:
 800b8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8e6:	4606      	mov	r6, r0
 800b8e8:	460f      	mov	r7, r1
 800b8ea:	4614      	mov	r4, r2
 800b8ec:	18d5      	adds	r5, r2, r3
 800b8ee:	42ac      	cmp	r4, r5
 800b8f0:	d101      	bne.n	800b8f6 <__sfputs_r+0x12>
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	e007      	b.n	800b906 <__sfputs_r+0x22>
 800b8f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8fa:	463a      	mov	r2, r7
 800b8fc:	4630      	mov	r0, r6
 800b8fe:	f7ff ffda 	bl	800b8b6 <__sfputc_r>
 800b902:	1c43      	adds	r3, r0, #1
 800b904:	d1f3      	bne.n	800b8ee <__sfputs_r+0xa>
 800b906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b908 <_vfiprintf_r>:
 800b908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90c:	460d      	mov	r5, r1
 800b90e:	b09d      	sub	sp, #116	; 0x74
 800b910:	4614      	mov	r4, r2
 800b912:	4698      	mov	r8, r3
 800b914:	4606      	mov	r6, r0
 800b916:	b118      	cbz	r0, 800b920 <_vfiprintf_r+0x18>
 800b918:	6983      	ldr	r3, [r0, #24]
 800b91a:	b90b      	cbnz	r3, 800b920 <_vfiprintf_r+0x18>
 800b91c:	f000 fb06 	bl	800bf2c <__sinit>
 800b920:	4b89      	ldr	r3, [pc, #548]	; (800bb48 <_vfiprintf_r+0x240>)
 800b922:	429d      	cmp	r5, r3
 800b924:	d11b      	bne.n	800b95e <_vfiprintf_r+0x56>
 800b926:	6875      	ldr	r5, [r6, #4]
 800b928:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b92a:	07d9      	lsls	r1, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_vfiprintf_r+0x32>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	059a      	lsls	r2, r3, #22
 800b932:	d402      	bmi.n	800b93a <_vfiprintf_r+0x32>
 800b934:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b936:	f7f5 ffb6 	bl	80018a6 <__retarget_lock_acquire_recursive>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	071b      	lsls	r3, r3, #28
 800b93e:	d501      	bpl.n	800b944 <_vfiprintf_r+0x3c>
 800b940:	692b      	ldr	r3, [r5, #16]
 800b942:	b9eb      	cbnz	r3, 800b980 <_vfiprintf_r+0x78>
 800b944:	4629      	mov	r1, r5
 800b946:	4630      	mov	r0, r6
 800b948:	f000 f960 	bl	800bc0c <__swsetup_r>
 800b94c:	b1c0      	cbz	r0, 800b980 <_vfiprintf_r+0x78>
 800b94e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b950:	07dc      	lsls	r4, r3, #31
 800b952:	d50e      	bpl.n	800b972 <_vfiprintf_r+0x6a>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	b01d      	add	sp, #116	; 0x74
 800b95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95e:	4b7b      	ldr	r3, [pc, #492]	; (800bb4c <_vfiprintf_r+0x244>)
 800b960:	429d      	cmp	r5, r3
 800b962:	d101      	bne.n	800b968 <_vfiprintf_r+0x60>
 800b964:	68b5      	ldr	r5, [r6, #8]
 800b966:	e7df      	b.n	800b928 <_vfiprintf_r+0x20>
 800b968:	4b79      	ldr	r3, [pc, #484]	; (800bb50 <_vfiprintf_r+0x248>)
 800b96a:	429d      	cmp	r5, r3
 800b96c:	bf08      	it	eq
 800b96e:	68f5      	ldreq	r5, [r6, #12]
 800b970:	e7da      	b.n	800b928 <_vfiprintf_r+0x20>
 800b972:	89ab      	ldrh	r3, [r5, #12]
 800b974:	0598      	lsls	r0, r3, #22
 800b976:	d4ed      	bmi.n	800b954 <_vfiprintf_r+0x4c>
 800b978:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b97a:	f7f5 ffa8 	bl	80018ce <__retarget_lock_release_recursive>
 800b97e:	e7e9      	b.n	800b954 <_vfiprintf_r+0x4c>
 800b980:	2300      	movs	r3, #0
 800b982:	9309      	str	r3, [sp, #36]	; 0x24
 800b984:	2320      	movs	r3, #32
 800b986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b98a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b98e:	2330      	movs	r3, #48	; 0x30
 800b990:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bb54 <_vfiprintf_r+0x24c>
 800b994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b998:	f04f 0901 	mov.w	r9, #1
 800b99c:	4623      	mov	r3, r4
 800b99e:	469a      	mov	sl, r3
 800b9a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b9a4:	b10a      	cbz	r2, 800b9aa <_vfiprintf_r+0xa2>
 800b9a6:	2a25      	cmp	r2, #37	; 0x25
 800b9a8:	d1f9      	bne.n	800b99e <_vfiprintf_r+0x96>
 800b9aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b9ae:	d00b      	beq.n	800b9c8 <_vfiprintf_r+0xc0>
 800b9b0:	465b      	mov	r3, fp
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	4629      	mov	r1, r5
 800b9b6:	4630      	mov	r0, r6
 800b9b8:	f7ff ff94 	bl	800b8e4 <__sfputs_r>
 800b9bc:	3001      	adds	r0, #1
 800b9be:	f000 80aa 	beq.w	800bb16 <_vfiprintf_r+0x20e>
 800b9c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9c4:	445a      	add	r2, fp
 800b9c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b9c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	f000 80a2 	beq.w	800bb16 <_vfiprintf_r+0x20e>
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b9d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9dc:	f10a 0a01 	add.w	sl, sl, #1
 800b9e0:	9304      	str	r3, [sp, #16]
 800b9e2:	9307      	str	r3, [sp, #28]
 800b9e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b9ea:	4654      	mov	r4, sl
 800b9ec:	2205      	movs	r2, #5
 800b9ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9f2:	4858      	ldr	r0, [pc, #352]	; (800bb54 <_vfiprintf_r+0x24c>)
 800b9f4:	f7f4 fc2c 	bl	8000250 <memchr>
 800b9f8:	9a04      	ldr	r2, [sp, #16]
 800b9fa:	b9d8      	cbnz	r0, 800ba34 <_vfiprintf_r+0x12c>
 800b9fc:	06d1      	lsls	r1, r2, #27
 800b9fe:	bf44      	itt	mi
 800ba00:	2320      	movmi	r3, #32
 800ba02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba06:	0713      	lsls	r3, r2, #28
 800ba08:	bf44      	itt	mi
 800ba0a:	232b      	movmi	r3, #43	; 0x2b
 800ba0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba10:	f89a 3000 	ldrb.w	r3, [sl]
 800ba14:	2b2a      	cmp	r3, #42	; 0x2a
 800ba16:	d015      	beq.n	800ba44 <_vfiprintf_r+0x13c>
 800ba18:	9a07      	ldr	r2, [sp, #28]
 800ba1a:	4654      	mov	r4, sl
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	f04f 0c0a 	mov.w	ip, #10
 800ba22:	4621      	mov	r1, r4
 800ba24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba28:	3b30      	subs	r3, #48	; 0x30
 800ba2a:	2b09      	cmp	r3, #9
 800ba2c:	d94e      	bls.n	800bacc <_vfiprintf_r+0x1c4>
 800ba2e:	b1b0      	cbz	r0, 800ba5e <_vfiprintf_r+0x156>
 800ba30:	9207      	str	r2, [sp, #28]
 800ba32:	e014      	b.n	800ba5e <_vfiprintf_r+0x156>
 800ba34:	eba0 0308 	sub.w	r3, r0, r8
 800ba38:	fa09 f303 	lsl.w	r3, r9, r3
 800ba3c:	4313      	orrs	r3, r2
 800ba3e:	9304      	str	r3, [sp, #16]
 800ba40:	46a2      	mov	sl, r4
 800ba42:	e7d2      	b.n	800b9ea <_vfiprintf_r+0xe2>
 800ba44:	9b03      	ldr	r3, [sp, #12]
 800ba46:	1d19      	adds	r1, r3, #4
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	9103      	str	r1, [sp, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	bfbb      	ittet	lt
 800ba50:	425b      	neglt	r3, r3
 800ba52:	f042 0202 	orrlt.w	r2, r2, #2
 800ba56:	9307      	strge	r3, [sp, #28]
 800ba58:	9307      	strlt	r3, [sp, #28]
 800ba5a:	bfb8      	it	lt
 800ba5c:	9204      	strlt	r2, [sp, #16]
 800ba5e:	7823      	ldrb	r3, [r4, #0]
 800ba60:	2b2e      	cmp	r3, #46	; 0x2e
 800ba62:	d10c      	bne.n	800ba7e <_vfiprintf_r+0x176>
 800ba64:	7863      	ldrb	r3, [r4, #1]
 800ba66:	2b2a      	cmp	r3, #42	; 0x2a
 800ba68:	d135      	bne.n	800bad6 <_vfiprintf_r+0x1ce>
 800ba6a:	9b03      	ldr	r3, [sp, #12]
 800ba6c:	1d1a      	adds	r2, r3, #4
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	9203      	str	r2, [sp, #12]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	bfb8      	it	lt
 800ba76:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba7a:	3402      	adds	r4, #2
 800ba7c:	9305      	str	r3, [sp, #20]
 800ba7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bb64 <_vfiprintf_r+0x25c>
 800ba82:	7821      	ldrb	r1, [r4, #0]
 800ba84:	2203      	movs	r2, #3
 800ba86:	4650      	mov	r0, sl
 800ba88:	f7f4 fbe2 	bl	8000250 <memchr>
 800ba8c:	b140      	cbz	r0, 800baa0 <_vfiprintf_r+0x198>
 800ba8e:	2340      	movs	r3, #64	; 0x40
 800ba90:	eba0 000a 	sub.w	r0, r0, sl
 800ba94:	fa03 f000 	lsl.w	r0, r3, r0
 800ba98:	9b04      	ldr	r3, [sp, #16]
 800ba9a:	4303      	orrs	r3, r0
 800ba9c:	3401      	adds	r4, #1
 800ba9e:	9304      	str	r3, [sp, #16]
 800baa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baa4:	482c      	ldr	r0, [pc, #176]	; (800bb58 <_vfiprintf_r+0x250>)
 800baa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800baaa:	2206      	movs	r2, #6
 800baac:	f7f4 fbd0 	bl	8000250 <memchr>
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d03f      	beq.n	800bb34 <_vfiprintf_r+0x22c>
 800bab4:	4b29      	ldr	r3, [pc, #164]	; (800bb5c <_vfiprintf_r+0x254>)
 800bab6:	bb1b      	cbnz	r3, 800bb00 <_vfiprintf_r+0x1f8>
 800bab8:	9b03      	ldr	r3, [sp, #12]
 800baba:	3307      	adds	r3, #7
 800babc:	f023 0307 	bic.w	r3, r3, #7
 800bac0:	3308      	adds	r3, #8
 800bac2:	9303      	str	r3, [sp, #12]
 800bac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bac6:	443b      	add	r3, r7
 800bac8:	9309      	str	r3, [sp, #36]	; 0x24
 800baca:	e767      	b.n	800b99c <_vfiprintf_r+0x94>
 800bacc:	fb0c 3202 	mla	r2, ip, r2, r3
 800bad0:	460c      	mov	r4, r1
 800bad2:	2001      	movs	r0, #1
 800bad4:	e7a5      	b.n	800ba22 <_vfiprintf_r+0x11a>
 800bad6:	2300      	movs	r3, #0
 800bad8:	3401      	adds	r4, #1
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	4619      	mov	r1, r3
 800bade:	f04f 0c0a 	mov.w	ip, #10
 800bae2:	4620      	mov	r0, r4
 800bae4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bae8:	3a30      	subs	r2, #48	; 0x30
 800baea:	2a09      	cmp	r2, #9
 800baec:	d903      	bls.n	800baf6 <_vfiprintf_r+0x1ee>
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0c5      	beq.n	800ba7e <_vfiprintf_r+0x176>
 800baf2:	9105      	str	r1, [sp, #20]
 800baf4:	e7c3      	b.n	800ba7e <_vfiprintf_r+0x176>
 800baf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bafa:	4604      	mov	r4, r0
 800bafc:	2301      	movs	r3, #1
 800bafe:	e7f0      	b.n	800bae2 <_vfiprintf_r+0x1da>
 800bb00:	ab03      	add	r3, sp, #12
 800bb02:	9300      	str	r3, [sp, #0]
 800bb04:	462a      	mov	r2, r5
 800bb06:	4b16      	ldr	r3, [pc, #88]	; (800bb60 <_vfiprintf_r+0x258>)
 800bb08:	a904      	add	r1, sp, #16
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	f7fc fa2c 	bl	8007f68 <_printf_float>
 800bb10:	4607      	mov	r7, r0
 800bb12:	1c78      	adds	r0, r7, #1
 800bb14:	d1d6      	bne.n	800bac4 <_vfiprintf_r+0x1bc>
 800bb16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb18:	07d9      	lsls	r1, r3, #31
 800bb1a:	d405      	bmi.n	800bb28 <_vfiprintf_r+0x220>
 800bb1c:	89ab      	ldrh	r3, [r5, #12]
 800bb1e:	059a      	lsls	r2, r3, #22
 800bb20:	d402      	bmi.n	800bb28 <_vfiprintf_r+0x220>
 800bb22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb24:	f7f5 fed3 	bl	80018ce <__retarget_lock_release_recursive>
 800bb28:	89ab      	ldrh	r3, [r5, #12]
 800bb2a:	065b      	lsls	r3, r3, #25
 800bb2c:	f53f af12 	bmi.w	800b954 <_vfiprintf_r+0x4c>
 800bb30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb32:	e711      	b.n	800b958 <_vfiprintf_r+0x50>
 800bb34:	ab03      	add	r3, sp, #12
 800bb36:	9300      	str	r3, [sp, #0]
 800bb38:	462a      	mov	r2, r5
 800bb3a:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <_vfiprintf_r+0x258>)
 800bb3c:	a904      	add	r1, sp, #16
 800bb3e:	4630      	mov	r0, r6
 800bb40:	f7fc fc9e 	bl	8008480 <_printf_i>
 800bb44:	e7e4      	b.n	800bb10 <_vfiprintf_r+0x208>
 800bb46:	bf00      	nop
 800bb48:	0800c7b4 	.word	0x0800c7b4
 800bb4c:	0800c7d4 	.word	0x0800c7d4
 800bb50:	0800c794 	.word	0x0800c794
 800bb54:	0800c744 	.word	0x0800c744
 800bb58:	0800c74e 	.word	0x0800c74e
 800bb5c:	08007f69 	.word	0x08007f69
 800bb60:	0800b8e5 	.word	0x0800b8e5
 800bb64:	0800c74a 	.word	0x0800c74a

0800bb68 <__swbuf_r>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	460e      	mov	r6, r1
 800bb6c:	4614      	mov	r4, r2
 800bb6e:	4605      	mov	r5, r0
 800bb70:	b118      	cbz	r0, 800bb7a <__swbuf_r+0x12>
 800bb72:	6983      	ldr	r3, [r0, #24]
 800bb74:	b90b      	cbnz	r3, 800bb7a <__swbuf_r+0x12>
 800bb76:	f000 f9d9 	bl	800bf2c <__sinit>
 800bb7a:	4b21      	ldr	r3, [pc, #132]	; (800bc00 <__swbuf_r+0x98>)
 800bb7c:	429c      	cmp	r4, r3
 800bb7e:	d12b      	bne.n	800bbd8 <__swbuf_r+0x70>
 800bb80:	686c      	ldr	r4, [r5, #4]
 800bb82:	69a3      	ldr	r3, [r4, #24]
 800bb84:	60a3      	str	r3, [r4, #8]
 800bb86:	89a3      	ldrh	r3, [r4, #12]
 800bb88:	071a      	lsls	r2, r3, #28
 800bb8a:	d52f      	bpl.n	800bbec <__swbuf_r+0x84>
 800bb8c:	6923      	ldr	r3, [r4, #16]
 800bb8e:	b36b      	cbz	r3, 800bbec <__swbuf_r+0x84>
 800bb90:	6923      	ldr	r3, [r4, #16]
 800bb92:	6820      	ldr	r0, [r4, #0]
 800bb94:	1ac0      	subs	r0, r0, r3
 800bb96:	6963      	ldr	r3, [r4, #20]
 800bb98:	b2f6      	uxtb	r6, r6
 800bb9a:	4283      	cmp	r3, r0
 800bb9c:	4637      	mov	r7, r6
 800bb9e:	dc04      	bgt.n	800bbaa <__swbuf_r+0x42>
 800bba0:	4621      	mov	r1, r4
 800bba2:	4628      	mov	r0, r5
 800bba4:	f000 f92e 	bl	800be04 <_fflush_r>
 800bba8:	bb30      	cbnz	r0, 800bbf8 <__swbuf_r+0x90>
 800bbaa:	68a3      	ldr	r3, [r4, #8]
 800bbac:	3b01      	subs	r3, #1
 800bbae:	60a3      	str	r3, [r4, #8]
 800bbb0:	6823      	ldr	r3, [r4, #0]
 800bbb2:	1c5a      	adds	r2, r3, #1
 800bbb4:	6022      	str	r2, [r4, #0]
 800bbb6:	701e      	strb	r6, [r3, #0]
 800bbb8:	6963      	ldr	r3, [r4, #20]
 800bbba:	3001      	adds	r0, #1
 800bbbc:	4283      	cmp	r3, r0
 800bbbe:	d004      	beq.n	800bbca <__swbuf_r+0x62>
 800bbc0:	89a3      	ldrh	r3, [r4, #12]
 800bbc2:	07db      	lsls	r3, r3, #31
 800bbc4:	d506      	bpl.n	800bbd4 <__swbuf_r+0x6c>
 800bbc6:	2e0a      	cmp	r6, #10
 800bbc8:	d104      	bne.n	800bbd4 <__swbuf_r+0x6c>
 800bbca:	4621      	mov	r1, r4
 800bbcc:	4628      	mov	r0, r5
 800bbce:	f000 f919 	bl	800be04 <_fflush_r>
 800bbd2:	b988      	cbnz	r0, 800bbf8 <__swbuf_r+0x90>
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bbd8:	4b0a      	ldr	r3, [pc, #40]	; (800bc04 <__swbuf_r+0x9c>)
 800bbda:	429c      	cmp	r4, r3
 800bbdc:	d101      	bne.n	800bbe2 <__swbuf_r+0x7a>
 800bbde:	68ac      	ldr	r4, [r5, #8]
 800bbe0:	e7cf      	b.n	800bb82 <__swbuf_r+0x1a>
 800bbe2:	4b09      	ldr	r3, [pc, #36]	; (800bc08 <__swbuf_r+0xa0>)
 800bbe4:	429c      	cmp	r4, r3
 800bbe6:	bf08      	it	eq
 800bbe8:	68ec      	ldreq	r4, [r5, #12]
 800bbea:	e7ca      	b.n	800bb82 <__swbuf_r+0x1a>
 800bbec:	4621      	mov	r1, r4
 800bbee:	4628      	mov	r0, r5
 800bbf0:	f000 f80c 	bl	800bc0c <__swsetup_r>
 800bbf4:	2800      	cmp	r0, #0
 800bbf6:	d0cb      	beq.n	800bb90 <__swbuf_r+0x28>
 800bbf8:	f04f 37ff 	mov.w	r7, #4294967295
 800bbfc:	e7ea      	b.n	800bbd4 <__swbuf_r+0x6c>
 800bbfe:	bf00      	nop
 800bc00:	0800c7b4 	.word	0x0800c7b4
 800bc04:	0800c7d4 	.word	0x0800c7d4
 800bc08:	0800c794 	.word	0x0800c794

0800bc0c <__swsetup_r>:
 800bc0c:	4b32      	ldr	r3, [pc, #200]	; (800bcd8 <__swsetup_r+0xcc>)
 800bc0e:	b570      	push	{r4, r5, r6, lr}
 800bc10:	681d      	ldr	r5, [r3, #0]
 800bc12:	4606      	mov	r6, r0
 800bc14:	460c      	mov	r4, r1
 800bc16:	b125      	cbz	r5, 800bc22 <__swsetup_r+0x16>
 800bc18:	69ab      	ldr	r3, [r5, #24]
 800bc1a:	b913      	cbnz	r3, 800bc22 <__swsetup_r+0x16>
 800bc1c:	4628      	mov	r0, r5
 800bc1e:	f000 f985 	bl	800bf2c <__sinit>
 800bc22:	4b2e      	ldr	r3, [pc, #184]	; (800bcdc <__swsetup_r+0xd0>)
 800bc24:	429c      	cmp	r4, r3
 800bc26:	d10f      	bne.n	800bc48 <__swsetup_r+0x3c>
 800bc28:	686c      	ldr	r4, [r5, #4]
 800bc2a:	89a3      	ldrh	r3, [r4, #12]
 800bc2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc30:	0719      	lsls	r1, r3, #28
 800bc32:	d42c      	bmi.n	800bc8e <__swsetup_r+0x82>
 800bc34:	06dd      	lsls	r5, r3, #27
 800bc36:	d411      	bmi.n	800bc5c <__swsetup_r+0x50>
 800bc38:	2309      	movs	r3, #9
 800bc3a:	6033      	str	r3, [r6, #0]
 800bc3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bc40:	81a3      	strh	r3, [r4, #12]
 800bc42:	f04f 30ff 	mov.w	r0, #4294967295
 800bc46:	e03e      	b.n	800bcc6 <__swsetup_r+0xba>
 800bc48:	4b25      	ldr	r3, [pc, #148]	; (800bce0 <__swsetup_r+0xd4>)
 800bc4a:	429c      	cmp	r4, r3
 800bc4c:	d101      	bne.n	800bc52 <__swsetup_r+0x46>
 800bc4e:	68ac      	ldr	r4, [r5, #8]
 800bc50:	e7eb      	b.n	800bc2a <__swsetup_r+0x1e>
 800bc52:	4b24      	ldr	r3, [pc, #144]	; (800bce4 <__swsetup_r+0xd8>)
 800bc54:	429c      	cmp	r4, r3
 800bc56:	bf08      	it	eq
 800bc58:	68ec      	ldreq	r4, [r5, #12]
 800bc5a:	e7e6      	b.n	800bc2a <__swsetup_r+0x1e>
 800bc5c:	0758      	lsls	r0, r3, #29
 800bc5e:	d512      	bpl.n	800bc86 <__swsetup_r+0x7a>
 800bc60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc62:	b141      	cbz	r1, 800bc76 <__swsetup_r+0x6a>
 800bc64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc68:	4299      	cmp	r1, r3
 800bc6a:	d002      	beq.n	800bc72 <__swsetup_r+0x66>
 800bc6c:	4630      	mov	r0, r6
 800bc6e:	f7fc f809 	bl	8007c84 <_free_r>
 800bc72:	2300      	movs	r3, #0
 800bc74:	6363      	str	r3, [r4, #52]	; 0x34
 800bc76:	89a3      	ldrh	r3, [r4, #12]
 800bc78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc7c:	81a3      	strh	r3, [r4, #12]
 800bc7e:	2300      	movs	r3, #0
 800bc80:	6063      	str	r3, [r4, #4]
 800bc82:	6923      	ldr	r3, [r4, #16]
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	89a3      	ldrh	r3, [r4, #12]
 800bc88:	f043 0308 	orr.w	r3, r3, #8
 800bc8c:	81a3      	strh	r3, [r4, #12]
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	b94b      	cbnz	r3, 800bca6 <__swsetup_r+0x9a>
 800bc92:	89a3      	ldrh	r3, [r4, #12]
 800bc94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc9c:	d003      	beq.n	800bca6 <__swsetup_r+0x9a>
 800bc9e:	4621      	mov	r1, r4
 800bca0:	4630      	mov	r0, r6
 800bca2:	f000 fa05 	bl	800c0b0 <__smakebuf_r>
 800bca6:	89a0      	ldrh	r0, [r4, #12]
 800bca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bcac:	f010 0301 	ands.w	r3, r0, #1
 800bcb0:	d00a      	beq.n	800bcc8 <__swsetup_r+0xbc>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	60a3      	str	r3, [r4, #8]
 800bcb6:	6963      	ldr	r3, [r4, #20]
 800bcb8:	425b      	negs	r3, r3
 800bcba:	61a3      	str	r3, [r4, #24]
 800bcbc:	6923      	ldr	r3, [r4, #16]
 800bcbe:	b943      	cbnz	r3, 800bcd2 <__swsetup_r+0xc6>
 800bcc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bcc4:	d1ba      	bne.n	800bc3c <__swsetup_r+0x30>
 800bcc6:	bd70      	pop	{r4, r5, r6, pc}
 800bcc8:	0781      	lsls	r1, r0, #30
 800bcca:	bf58      	it	pl
 800bccc:	6963      	ldrpl	r3, [r4, #20]
 800bcce:	60a3      	str	r3, [r4, #8]
 800bcd0:	e7f4      	b.n	800bcbc <__swsetup_r+0xb0>
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	e7f7      	b.n	800bcc6 <__swsetup_r+0xba>
 800bcd6:	bf00      	nop
 800bcd8:	20000014 	.word	0x20000014
 800bcdc:	0800c7b4 	.word	0x0800c7b4
 800bce0:	0800c7d4 	.word	0x0800c7d4
 800bce4:	0800c794 	.word	0x0800c794

0800bce8 <abort>:
 800bce8:	b508      	push	{r3, lr}
 800bcea:	2006      	movs	r0, #6
 800bcec:	f000 fa50 	bl	800c190 <raise>
 800bcf0:	2001      	movs	r0, #1
 800bcf2:	f7f5 fabf 	bl	8001274 <_exit>
	...

0800bcf8 <__sflush_r>:
 800bcf8:	898a      	ldrh	r2, [r1, #12]
 800bcfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcfe:	4605      	mov	r5, r0
 800bd00:	0710      	lsls	r0, r2, #28
 800bd02:	460c      	mov	r4, r1
 800bd04:	d458      	bmi.n	800bdb8 <__sflush_r+0xc0>
 800bd06:	684b      	ldr	r3, [r1, #4]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	dc05      	bgt.n	800bd18 <__sflush_r+0x20>
 800bd0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	dc02      	bgt.n	800bd18 <__sflush_r+0x20>
 800bd12:	2000      	movs	r0, #0
 800bd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	d0f9      	beq.n	800bd12 <__sflush_r+0x1a>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd24:	682f      	ldr	r7, [r5, #0]
 800bd26:	602b      	str	r3, [r5, #0]
 800bd28:	d032      	beq.n	800bd90 <__sflush_r+0x98>
 800bd2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd2c:	89a3      	ldrh	r3, [r4, #12]
 800bd2e:	075a      	lsls	r2, r3, #29
 800bd30:	d505      	bpl.n	800bd3e <__sflush_r+0x46>
 800bd32:	6863      	ldr	r3, [r4, #4]
 800bd34:	1ac0      	subs	r0, r0, r3
 800bd36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd38:	b10b      	cbz	r3, 800bd3e <__sflush_r+0x46>
 800bd3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd3c:	1ac0      	subs	r0, r0, r3
 800bd3e:	2300      	movs	r3, #0
 800bd40:	4602      	mov	r2, r0
 800bd42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd44:	6a21      	ldr	r1, [r4, #32]
 800bd46:	4628      	mov	r0, r5
 800bd48:	47b0      	blx	r6
 800bd4a:	1c43      	adds	r3, r0, #1
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	d106      	bne.n	800bd5e <__sflush_r+0x66>
 800bd50:	6829      	ldr	r1, [r5, #0]
 800bd52:	291d      	cmp	r1, #29
 800bd54:	d82c      	bhi.n	800bdb0 <__sflush_r+0xb8>
 800bd56:	4a2a      	ldr	r2, [pc, #168]	; (800be00 <__sflush_r+0x108>)
 800bd58:	40ca      	lsrs	r2, r1
 800bd5a:	07d6      	lsls	r6, r2, #31
 800bd5c:	d528      	bpl.n	800bdb0 <__sflush_r+0xb8>
 800bd5e:	2200      	movs	r2, #0
 800bd60:	6062      	str	r2, [r4, #4]
 800bd62:	04d9      	lsls	r1, r3, #19
 800bd64:	6922      	ldr	r2, [r4, #16]
 800bd66:	6022      	str	r2, [r4, #0]
 800bd68:	d504      	bpl.n	800bd74 <__sflush_r+0x7c>
 800bd6a:	1c42      	adds	r2, r0, #1
 800bd6c:	d101      	bne.n	800bd72 <__sflush_r+0x7a>
 800bd6e:	682b      	ldr	r3, [r5, #0]
 800bd70:	b903      	cbnz	r3, 800bd74 <__sflush_r+0x7c>
 800bd72:	6560      	str	r0, [r4, #84]	; 0x54
 800bd74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd76:	602f      	str	r7, [r5, #0]
 800bd78:	2900      	cmp	r1, #0
 800bd7a:	d0ca      	beq.n	800bd12 <__sflush_r+0x1a>
 800bd7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd80:	4299      	cmp	r1, r3
 800bd82:	d002      	beq.n	800bd8a <__sflush_r+0x92>
 800bd84:	4628      	mov	r0, r5
 800bd86:	f7fb ff7d 	bl	8007c84 <_free_r>
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	6360      	str	r0, [r4, #52]	; 0x34
 800bd8e:	e7c1      	b.n	800bd14 <__sflush_r+0x1c>
 800bd90:	6a21      	ldr	r1, [r4, #32]
 800bd92:	2301      	movs	r3, #1
 800bd94:	4628      	mov	r0, r5
 800bd96:	47b0      	blx	r6
 800bd98:	1c41      	adds	r1, r0, #1
 800bd9a:	d1c7      	bne.n	800bd2c <__sflush_r+0x34>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d0c4      	beq.n	800bd2c <__sflush_r+0x34>
 800bda2:	2b1d      	cmp	r3, #29
 800bda4:	d001      	beq.n	800bdaa <__sflush_r+0xb2>
 800bda6:	2b16      	cmp	r3, #22
 800bda8:	d101      	bne.n	800bdae <__sflush_r+0xb6>
 800bdaa:	602f      	str	r7, [r5, #0]
 800bdac:	e7b1      	b.n	800bd12 <__sflush_r+0x1a>
 800bdae:	89a3      	ldrh	r3, [r4, #12]
 800bdb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdb4:	81a3      	strh	r3, [r4, #12]
 800bdb6:	e7ad      	b.n	800bd14 <__sflush_r+0x1c>
 800bdb8:	690f      	ldr	r7, [r1, #16]
 800bdba:	2f00      	cmp	r7, #0
 800bdbc:	d0a9      	beq.n	800bd12 <__sflush_r+0x1a>
 800bdbe:	0793      	lsls	r3, r2, #30
 800bdc0:	680e      	ldr	r6, [r1, #0]
 800bdc2:	bf08      	it	eq
 800bdc4:	694b      	ldreq	r3, [r1, #20]
 800bdc6:	600f      	str	r7, [r1, #0]
 800bdc8:	bf18      	it	ne
 800bdca:	2300      	movne	r3, #0
 800bdcc:	eba6 0807 	sub.w	r8, r6, r7
 800bdd0:	608b      	str	r3, [r1, #8]
 800bdd2:	f1b8 0f00 	cmp.w	r8, #0
 800bdd6:	dd9c      	ble.n	800bd12 <__sflush_r+0x1a>
 800bdd8:	6a21      	ldr	r1, [r4, #32]
 800bdda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bddc:	4643      	mov	r3, r8
 800bdde:	463a      	mov	r2, r7
 800bde0:	4628      	mov	r0, r5
 800bde2:	47b0      	blx	r6
 800bde4:	2800      	cmp	r0, #0
 800bde6:	dc06      	bgt.n	800bdf6 <__sflush_r+0xfe>
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdee:	81a3      	strh	r3, [r4, #12]
 800bdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf4:	e78e      	b.n	800bd14 <__sflush_r+0x1c>
 800bdf6:	4407      	add	r7, r0
 800bdf8:	eba8 0800 	sub.w	r8, r8, r0
 800bdfc:	e7e9      	b.n	800bdd2 <__sflush_r+0xda>
 800bdfe:	bf00      	nop
 800be00:	20400001 	.word	0x20400001

0800be04 <_fflush_r>:
 800be04:	b538      	push	{r3, r4, r5, lr}
 800be06:	690b      	ldr	r3, [r1, #16]
 800be08:	4605      	mov	r5, r0
 800be0a:	460c      	mov	r4, r1
 800be0c:	b913      	cbnz	r3, 800be14 <_fflush_r+0x10>
 800be0e:	2500      	movs	r5, #0
 800be10:	4628      	mov	r0, r5
 800be12:	bd38      	pop	{r3, r4, r5, pc}
 800be14:	b118      	cbz	r0, 800be1e <_fflush_r+0x1a>
 800be16:	6983      	ldr	r3, [r0, #24]
 800be18:	b90b      	cbnz	r3, 800be1e <_fflush_r+0x1a>
 800be1a:	f000 f887 	bl	800bf2c <__sinit>
 800be1e:	4b14      	ldr	r3, [pc, #80]	; (800be70 <_fflush_r+0x6c>)
 800be20:	429c      	cmp	r4, r3
 800be22:	d11b      	bne.n	800be5c <_fflush_r+0x58>
 800be24:	686c      	ldr	r4, [r5, #4]
 800be26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d0ef      	beq.n	800be0e <_fflush_r+0xa>
 800be2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be30:	07d0      	lsls	r0, r2, #31
 800be32:	d404      	bmi.n	800be3e <_fflush_r+0x3a>
 800be34:	0599      	lsls	r1, r3, #22
 800be36:	d402      	bmi.n	800be3e <_fflush_r+0x3a>
 800be38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be3a:	f7f5 fd34 	bl	80018a6 <__retarget_lock_acquire_recursive>
 800be3e:	4628      	mov	r0, r5
 800be40:	4621      	mov	r1, r4
 800be42:	f7ff ff59 	bl	800bcf8 <__sflush_r>
 800be46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be48:	07da      	lsls	r2, r3, #31
 800be4a:	4605      	mov	r5, r0
 800be4c:	d4e0      	bmi.n	800be10 <_fflush_r+0xc>
 800be4e:	89a3      	ldrh	r3, [r4, #12]
 800be50:	059b      	lsls	r3, r3, #22
 800be52:	d4dd      	bmi.n	800be10 <_fflush_r+0xc>
 800be54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be56:	f7f5 fd3a 	bl	80018ce <__retarget_lock_release_recursive>
 800be5a:	e7d9      	b.n	800be10 <_fflush_r+0xc>
 800be5c:	4b05      	ldr	r3, [pc, #20]	; (800be74 <_fflush_r+0x70>)
 800be5e:	429c      	cmp	r4, r3
 800be60:	d101      	bne.n	800be66 <_fflush_r+0x62>
 800be62:	68ac      	ldr	r4, [r5, #8]
 800be64:	e7df      	b.n	800be26 <_fflush_r+0x22>
 800be66:	4b04      	ldr	r3, [pc, #16]	; (800be78 <_fflush_r+0x74>)
 800be68:	429c      	cmp	r4, r3
 800be6a:	bf08      	it	eq
 800be6c:	68ec      	ldreq	r4, [r5, #12]
 800be6e:	e7da      	b.n	800be26 <_fflush_r+0x22>
 800be70:	0800c7b4 	.word	0x0800c7b4
 800be74:	0800c7d4 	.word	0x0800c7d4
 800be78:	0800c794 	.word	0x0800c794

0800be7c <std>:
 800be7c:	2300      	movs	r3, #0
 800be7e:	b510      	push	{r4, lr}
 800be80:	4604      	mov	r4, r0
 800be82:	e9c0 3300 	strd	r3, r3, [r0]
 800be86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be8a:	6083      	str	r3, [r0, #8]
 800be8c:	8181      	strh	r1, [r0, #12]
 800be8e:	6643      	str	r3, [r0, #100]	; 0x64
 800be90:	81c2      	strh	r2, [r0, #14]
 800be92:	6183      	str	r3, [r0, #24]
 800be94:	4619      	mov	r1, r3
 800be96:	2208      	movs	r2, #8
 800be98:	305c      	adds	r0, #92	; 0x5c
 800be9a:	f7fb feeb 	bl	8007c74 <memset>
 800be9e:	4b05      	ldr	r3, [pc, #20]	; (800beb4 <std+0x38>)
 800bea0:	6263      	str	r3, [r4, #36]	; 0x24
 800bea2:	4b05      	ldr	r3, [pc, #20]	; (800beb8 <std+0x3c>)
 800bea4:	62a3      	str	r3, [r4, #40]	; 0x28
 800bea6:	4b05      	ldr	r3, [pc, #20]	; (800bebc <std+0x40>)
 800bea8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800beaa:	4b05      	ldr	r3, [pc, #20]	; (800bec0 <std+0x44>)
 800beac:	6224      	str	r4, [r4, #32]
 800beae:	6323      	str	r3, [r4, #48]	; 0x30
 800beb0:	bd10      	pop	{r4, pc}
 800beb2:	bf00      	nop
 800beb4:	0800c1c9 	.word	0x0800c1c9
 800beb8:	0800c1eb 	.word	0x0800c1eb
 800bebc:	0800c223 	.word	0x0800c223
 800bec0:	0800c247 	.word	0x0800c247

0800bec4 <_cleanup_r>:
 800bec4:	4901      	ldr	r1, [pc, #4]	; (800becc <_cleanup_r+0x8>)
 800bec6:	f000 b8af 	b.w	800c028 <_fwalk_reent>
 800beca:	bf00      	nop
 800becc:	0800be05 	.word	0x0800be05

0800bed0 <__sfmoreglue>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	2268      	movs	r2, #104	; 0x68
 800bed4:	1e4d      	subs	r5, r1, #1
 800bed6:	4355      	muls	r5, r2
 800bed8:	460e      	mov	r6, r1
 800beda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bede:	f7fb ff3d 	bl	8007d5c <_malloc_r>
 800bee2:	4604      	mov	r4, r0
 800bee4:	b140      	cbz	r0, 800bef8 <__sfmoreglue+0x28>
 800bee6:	2100      	movs	r1, #0
 800bee8:	e9c0 1600 	strd	r1, r6, [r0]
 800beec:	300c      	adds	r0, #12
 800beee:	60a0      	str	r0, [r4, #8]
 800bef0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bef4:	f7fb febe 	bl	8007c74 <memset>
 800bef8:	4620      	mov	r0, r4
 800befa:	bd70      	pop	{r4, r5, r6, pc}

0800befc <__sfp_lock_acquire>:
 800befc:	4801      	ldr	r0, [pc, #4]	; (800bf04 <__sfp_lock_acquire+0x8>)
 800befe:	f7f5 bcd2 	b.w	80018a6 <__retarget_lock_acquire_recursive>
 800bf02:	bf00      	nop
 800bf04:	2000042c 	.word	0x2000042c

0800bf08 <__sfp_lock_release>:
 800bf08:	4801      	ldr	r0, [pc, #4]	; (800bf10 <__sfp_lock_release+0x8>)
 800bf0a:	f7f5 bce0 	b.w	80018ce <__retarget_lock_release_recursive>
 800bf0e:	bf00      	nop
 800bf10:	2000042c 	.word	0x2000042c

0800bf14 <__sinit_lock_acquire>:
 800bf14:	4801      	ldr	r0, [pc, #4]	; (800bf1c <__sinit_lock_acquire+0x8>)
 800bf16:	f7f5 bcc6 	b.w	80018a6 <__retarget_lock_acquire_recursive>
 800bf1a:	bf00      	nop
 800bf1c:	20000428 	.word	0x20000428

0800bf20 <__sinit_lock_release>:
 800bf20:	4801      	ldr	r0, [pc, #4]	; (800bf28 <__sinit_lock_release+0x8>)
 800bf22:	f7f5 bcd4 	b.w	80018ce <__retarget_lock_release_recursive>
 800bf26:	bf00      	nop
 800bf28:	20000428 	.word	0x20000428

0800bf2c <__sinit>:
 800bf2c:	b510      	push	{r4, lr}
 800bf2e:	4604      	mov	r4, r0
 800bf30:	f7ff fff0 	bl	800bf14 <__sinit_lock_acquire>
 800bf34:	69a3      	ldr	r3, [r4, #24]
 800bf36:	b11b      	cbz	r3, 800bf40 <__sinit+0x14>
 800bf38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bf3c:	f7ff bff0 	b.w	800bf20 <__sinit_lock_release>
 800bf40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bf44:	6523      	str	r3, [r4, #80]	; 0x50
 800bf46:	4b13      	ldr	r3, [pc, #76]	; (800bf94 <__sinit+0x68>)
 800bf48:	4a13      	ldr	r2, [pc, #76]	; (800bf98 <__sinit+0x6c>)
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	62a2      	str	r2, [r4, #40]	; 0x28
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	bf04      	itt	eq
 800bf52:	2301      	moveq	r3, #1
 800bf54:	61a3      	streq	r3, [r4, #24]
 800bf56:	4620      	mov	r0, r4
 800bf58:	f000 f820 	bl	800bf9c <__sfp>
 800bf5c:	6060      	str	r0, [r4, #4]
 800bf5e:	4620      	mov	r0, r4
 800bf60:	f000 f81c 	bl	800bf9c <__sfp>
 800bf64:	60a0      	str	r0, [r4, #8]
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 f818 	bl	800bf9c <__sfp>
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	60e0      	str	r0, [r4, #12]
 800bf70:	2104      	movs	r1, #4
 800bf72:	6860      	ldr	r0, [r4, #4]
 800bf74:	f7ff ff82 	bl	800be7c <std>
 800bf78:	68a0      	ldr	r0, [r4, #8]
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	2109      	movs	r1, #9
 800bf7e:	f7ff ff7d 	bl	800be7c <std>
 800bf82:	68e0      	ldr	r0, [r4, #12]
 800bf84:	2202      	movs	r2, #2
 800bf86:	2112      	movs	r1, #18
 800bf88:	f7ff ff78 	bl	800be7c <std>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	61a3      	str	r3, [r4, #24]
 800bf90:	e7d2      	b.n	800bf38 <__sinit+0xc>
 800bf92:	bf00      	nop
 800bf94:	0800c350 	.word	0x0800c350
 800bf98:	0800bec5 	.word	0x0800bec5

0800bf9c <__sfp>:
 800bf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf9e:	4607      	mov	r7, r0
 800bfa0:	f7ff ffac 	bl	800befc <__sfp_lock_acquire>
 800bfa4:	4b1e      	ldr	r3, [pc, #120]	; (800c020 <__sfp+0x84>)
 800bfa6:	681e      	ldr	r6, [r3, #0]
 800bfa8:	69b3      	ldr	r3, [r6, #24]
 800bfaa:	b913      	cbnz	r3, 800bfb2 <__sfp+0x16>
 800bfac:	4630      	mov	r0, r6
 800bfae:	f7ff ffbd 	bl	800bf2c <__sinit>
 800bfb2:	3648      	adds	r6, #72	; 0x48
 800bfb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bfb8:	3b01      	subs	r3, #1
 800bfba:	d503      	bpl.n	800bfc4 <__sfp+0x28>
 800bfbc:	6833      	ldr	r3, [r6, #0]
 800bfbe:	b30b      	cbz	r3, 800c004 <__sfp+0x68>
 800bfc0:	6836      	ldr	r6, [r6, #0]
 800bfc2:	e7f7      	b.n	800bfb4 <__sfp+0x18>
 800bfc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bfc8:	b9d5      	cbnz	r5, 800c000 <__sfp+0x64>
 800bfca:	4b16      	ldr	r3, [pc, #88]	; (800c024 <__sfp+0x88>)
 800bfcc:	60e3      	str	r3, [r4, #12]
 800bfce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfd2:	6665      	str	r5, [r4, #100]	; 0x64
 800bfd4:	f7f5 fc41 	bl	800185a <__retarget_lock_init_recursive>
 800bfd8:	f7ff ff96 	bl	800bf08 <__sfp_lock_release>
 800bfdc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bfe0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bfe4:	6025      	str	r5, [r4, #0]
 800bfe6:	61a5      	str	r5, [r4, #24]
 800bfe8:	2208      	movs	r2, #8
 800bfea:	4629      	mov	r1, r5
 800bfec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bff0:	f7fb fe40 	bl	8007c74 <memset>
 800bff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bffc:	4620      	mov	r0, r4
 800bffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c000:	3468      	adds	r4, #104	; 0x68
 800c002:	e7d9      	b.n	800bfb8 <__sfp+0x1c>
 800c004:	2104      	movs	r1, #4
 800c006:	4638      	mov	r0, r7
 800c008:	f7ff ff62 	bl	800bed0 <__sfmoreglue>
 800c00c:	4604      	mov	r4, r0
 800c00e:	6030      	str	r0, [r6, #0]
 800c010:	2800      	cmp	r0, #0
 800c012:	d1d5      	bne.n	800bfc0 <__sfp+0x24>
 800c014:	f7ff ff78 	bl	800bf08 <__sfp_lock_release>
 800c018:	230c      	movs	r3, #12
 800c01a:	603b      	str	r3, [r7, #0]
 800c01c:	e7ee      	b.n	800bffc <__sfp+0x60>
 800c01e:	bf00      	nop
 800c020:	0800c350 	.word	0x0800c350
 800c024:	ffff0001 	.word	0xffff0001

0800c028 <_fwalk_reent>:
 800c028:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c02c:	4606      	mov	r6, r0
 800c02e:	4688      	mov	r8, r1
 800c030:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c034:	2700      	movs	r7, #0
 800c036:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c03a:	f1b9 0901 	subs.w	r9, r9, #1
 800c03e:	d505      	bpl.n	800c04c <_fwalk_reent+0x24>
 800c040:	6824      	ldr	r4, [r4, #0]
 800c042:	2c00      	cmp	r4, #0
 800c044:	d1f7      	bne.n	800c036 <_fwalk_reent+0xe>
 800c046:	4638      	mov	r0, r7
 800c048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c04c:	89ab      	ldrh	r3, [r5, #12]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	d907      	bls.n	800c062 <_fwalk_reent+0x3a>
 800c052:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c056:	3301      	adds	r3, #1
 800c058:	d003      	beq.n	800c062 <_fwalk_reent+0x3a>
 800c05a:	4629      	mov	r1, r5
 800c05c:	4630      	mov	r0, r6
 800c05e:	47c0      	blx	r8
 800c060:	4307      	orrs	r7, r0
 800c062:	3568      	adds	r5, #104	; 0x68
 800c064:	e7e9      	b.n	800c03a <_fwalk_reent+0x12>

0800c066 <__swhatbuf_r>:
 800c066:	b570      	push	{r4, r5, r6, lr}
 800c068:	460e      	mov	r6, r1
 800c06a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c06e:	2900      	cmp	r1, #0
 800c070:	b096      	sub	sp, #88	; 0x58
 800c072:	4614      	mov	r4, r2
 800c074:	461d      	mov	r5, r3
 800c076:	da08      	bge.n	800c08a <__swhatbuf_r+0x24>
 800c078:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c07c:	2200      	movs	r2, #0
 800c07e:	602a      	str	r2, [r5, #0]
 800c080:	061a      	lsls	r2, r3, #24
 800c082:	d410      	bmi.n	800c0a6 <__swhatbuf_r+0x40>
 800c084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c088:	e00e      	b.n	800c0a8 <__swhatbuf_r+0x42>
 800c08a:	466a      	mov	r2, sp
 800c08c:	f000 f902 	bl	800c294 <_fstat_r>
 800c090:	2800      	cmp	r0, #0
 800c092:	dbf1      	blt.n	800c078 <__swhatbuf_r+0x12>
 800c094:	9a01      	ldr	r2, [sp, #4]
 800c096:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c09a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c09e:	425a      	negs	r2, r3
 800c0a0:	415a      	adcs	r2, r3
 800c0a2:	602a      	str	r2, [r5, #0]
 800c0a4:	e7ee      	b.n	800c084 <__swhatbuf_r+0x1e>
 800c0a6:	2340      	movs	r3, #64	; 0x40
 800c0a8:	2000      	movs	r0, #0
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	b016      	add	sp, #88	; 0x58
 800c0ae:	bd70      	pop	{r4, r5, r6, pc}

0800c0b0 <__smakebuf_r>:
 800c0b0:	898b      	ldrh	r3, [r1, #12]
 800c0b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0b4:	079d      	lsls	r5, r3, #30
 800c0b6:	4606      	mov	r6, r0
 800c0b8:	460c      	mov	r4, r1
 800c0ba:	d507      	bpl.n	800c0cc <__smakebuf_r+0x1c>
 800c0bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	6123      	str	r3, [r4, #16]
 800c0c4:	2301      	movs	r3, #1
 800c0c6:	6163      	str	r3, [r4, #20]
 800c0c8:	b002      	add	sp, #8
 800c0ca:	bd70      	pop	{r4, r5, r6, pc}
 800c0cc:	ab01      	add	r3, sp, #4
 800c0ce:	466a      	mov	r2, sp
 800c0d0:	f7ff ffc9 	bl	800c066 <__swhatbuf_r>
 800c0d4:	9900      	ldr	r1, [sp, #0]
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f7fb fe3f 	bl	8007d5c <_malloc_r>
 800c0de:	b948      	cbnz	r0, 800c0f4 <__smakebuf_r+0x44>
 800c0e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c0e4:	059a      	lsls	r2, r3, #22
 800c0e6:	d4ef      	bmi.n	800c0c8 <__smakebuf_r+0x18>
 800c0e8:	f023 0303 	bic.w	r3, r3, #3
 800c0ec:	f043 0302 	orr.w	r3, r3, #2
 800c0f0:	81a3      	strh	r3, [r4, #12]
 800c0f2:	e7e3      	b.n	800c0bc <__smakebuf_r+0xc>
 800c0f4:	4b0d      	ldr	r3, [pc, #52]	; (800c12c <__smakebuf_r+0x7c>)
 800c0f6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c0f8:	89a3      	ldrh	r3, [r4, #12]
 800c0fa:	6020      	str	r0, [r4, #0]
 800c0fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c100:	81a3      	strh	r3, [r4, #12]
 800c102:	9b00      	ldr	r3, [sp, #0]
 800c104:	6163      	str	r3, [r4, #20]
 800c106:	9b01      	ldr	r3, [sp, #4]
 800c108:	6120      	str	r0, [r4, #16]
 800c10a:	b15b      	cbz	r3, 800c124 <__smakebuf_r+0x74>
 800c10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c110:	4630      	mov	r0, r6
 800c112:	f000 f8d1 	bl	800c2b8 <_isatty_r>
 800c116:	b128      	cbz	r0, 800c124 <__smakebuf_r+0x74>
 800c118:	89a3      	ldrh	r3, [r4, #12]
 800c11a:	f023 0303 	bic.w	r3, r3, #3
 800c11e:	f043 0301 	orr.w	r3, r3, #1
 800c122:	81a3      	strh	r3, [r4, #12]
 800c124:	89a0      	ldrh	r0, [r4, #12]
 800c126:	4305      	orrs	r5, r0
 800c128:	81a5      	strh	r5, [r4, #12]
 800c12a:	e7cd      	b.n	800c0c8 <__smakebuf_r+0x18>
 800c12c:	0800bec5 	.word	0x0800bec5

0800c130 <_malloc_usable_size_r>:
 800c130:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c134:	1f18      	subs	r0, r3, #4
 800c136:	2b00      	cmp	r3, #0
 800c138:	bfbc      	itt	lt
 800c13a:	580b      	ldrlt	r3, [r1, r0]
 800c13c:	18c0      	addlt	r0, r0, r3
 800c13e:	4770      	bx	lr

0800c140 <_raise_r>:
 800c140:	291f      	cmp	r1, #31
 800c142:	b538      	push	{r3, r4, r5, lr}
 800c144:	4604      	mov	r4, r0
 800c146:	460d      	mov	r5, r1
 800c148:	d904      	bls.n	800c154 <_raise_r+0x14>
 800c14a:	2316      	movs	r3, #22
 800c14c:	6003      	str	r3, [r0, #0]
 800c14e:	f04f 30ff 	mov.w	r0, #4294967295
 800c152:	bd38      	pop	{r3, r4, r5, pc}
 800c154:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c156:	b112      	cbz	r2, 800c15e <_raise_r+0x1e>
 800c158:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c15c:	b94b      	cbnz	r3, 800c172 <_raise_r+0x32>
 800c15e:	4620      	mov	r0, r4
 800c160:	f000 f830 	bl	800c1c4 <_getpid_r>
 800c164:	462a      	mov	r2, r5
 800c166:	4601      	mov	r1, r0
 800c168:	4620      	mov	r0, r4
 800c16a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c16e:	f000 b817 	b.w	800c1a0 <_kill_r>
 800c172:	2b01      	cmp	r3, #1
 800c174:	d00a      	beq.n	800c18c <_raise_r+0x4c>
 800c176:	1c59      	adds	r1, r3, #1
 800c178:	d103      	bne.n	800c182 <_raise_r+0x42>
 800c17a:	2316      	movs	r3, #22
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	2001      	movs	r0, #1
 800c180:	e7e7      	b.n	800c152 <_raise_r+0x12>
 800c182:	2400      	movs	r4, #0
 800c184:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c188:	4628      	mov	r0, r5
 800c18a:	4798      	blx	r3
 800c18c:	2000      	movs	r0, #0
 800c18e:	e7e0      	b.n	800c152 <_raise_r+0x12>

0800c190 <raise>:
 800c190:	4b02      	ldr	r3, [pc, #8]	; (800c19c <raise+0xc>)
 800c192:	4601      	mov	r1, r0
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	f7ff bfd3 	b.w	800c140 <_raise_r>
 800c19a:	bf00      	nop
 800c19c:	20000014 	.word	0x20000014

0800c1a0 <_kill_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4d07      	ldr	r5, [pc, #28]	; (800c1c0 <_kill_r+0x20>)
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	4608      	mov	r0, r1
 800c1aa:	4611      	mov	r1, r2
 800c1ac:	602b      	str	r3, [r5, #0]
 800c1ae:	f7f5 f851 	bl	8001254 <_kill>
 800c1b2:	1c43      	adds	r3, r0, #1
 800c1b4:	d102      	bne.n	800c1bc <_kill_r+0x1c>
 800c1b6:	682b      	ldr	r3, [r5, #0]
 800c1b8:	b103      	cbz	r3, 800c1bc <_kill_r+0x1c>
 800c1ba:	6023      	str	r3, [r4, #0]
 800c1bc:	bd38      	pop	{r3, r4, r5, pc}
 800c1be:	bf00      	nop
 800c1c0:	20000448 	.word	0x20000448

0800c1c4 <_getpid_r>:
 800c1c4:	f7f5 b83e 	b.w	8001244 <_getpid>

0800c1c8 <__sread>:
 800c1c8:	b510      	push	{r4, lr}
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1d0:	f000 f894 	bl	800c2fc <_read_r>
 800c1d4:	2800      	cmp	r0, #0
 800c1d6:	bfab      	itete	ge
 800c1d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c1da:	89a3      	ldrhlt	r3, [r4, #12]
 800c1dc:	181b      	addge	r3, r3, r0
 800c1de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c1e2:	bfac      	ite	ge
 800c1e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c1e6:	81a3      	strhlt	r3, [r4, #12]
 800c1e8:	bd10      	pop	{r4, pc}

0800c1ea <__swrite>:
 800c1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1ee:	461f      	mov	r7, r3
 800c1f0:	898b      	ldrh	r3, [r1, #12]
 800c1f2:	05db      	lsls	r3, r3, #23
 800c1f4:	4605      	mov	r5, r0
 800c1f6:	460c      	mov	r4, r1
 800c1f8:	4616      	mov	r6, r2
 800c1fa:	d505      	bpl.n	800c208 <__swrite+0x1e>
 800c1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c200:	2302      	movs	r3, #2
 800c202:	2200      	movs	r2, #0
 800c204:	f000 f868 	bl	800c2d8 <_lseek_r>
 800c208:	89a3      	ldrh	r3, [r4, #12]
 800c20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c20e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c212:	81a3      	strh	r3, [r4, #12]
 800c214:	4632      	mov	r2, r6
 800c216:	463b      	mov	r3, r7
 800c218:	4628      	mov	r0, r5
 800c21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c21e:	f000 b817 	b.w	800c250 <_write_r>

0800c222 <__sseek>:
 800c222:	b510      	push	{r4, lr}
 800c224:	460c      	mov	r4, r1
 800c226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c22a:	f000 f855 	bl	800c2d8 <_lseek_r>
 800c22e:	1c43      	adds	r3, r0, #1
 800c230:	89a3      	ldrh	r3, [r4, #12]
 800c232:	bf15      	itete	ne
 800c234:	6560      	strne	r0, [r4, #84]	; 0x54
 800c236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c23a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c23e:	81a3      	strheq	r3, [r4, #12]
 800c240:	bf18      	it	ne
 800c242:	81a3      	strhne	r3, [r4, #12]
 800c244:	bd10      	pop	{r4, pc}

0800c246 <__sclose>:
 800c246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c24a:	f000 b813 	b.w	800c274 <_close_r>
	...

0800c250 <_write_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d07      	ldr	r5, [pc, #28]	; (800c270 <_write_r+0x20>)
 800c254:	4604      	mov	r4, r0
 800c256:	4608      	mov	r0, r1
 800c258:	4611      	mov	r1, r2
 800c25a:	2200      	movs	r2, #0
 800c25c:	602a      	str	r2, [r5, #0]
 800c25e:	461a      	mov	r2, r3
 800c260:	f7f5 f82f 	bl	80012c2 <_write>
 800c264:	1c43      	adds	r3, r0, #1
 800c266:	d102      	bne.n	800c26e <_write_r+0x1e>
 800c268:	682b      	ldr	r3, [r5, #0]
 800c26a:	b103      	cbz	r3, 800c26e <_write_r+0x1e>
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	20000448 	.word	0x20000448

0800c274 <_close_r>:
 800c274:	b538      	push	{r3, r4, r5, lr}
 800c276:	4d06      	ldr	r5, [pc, #24]	; (800c290 <_close_r+0x1c>)
 800c278:	2300      	movs	r3, #0
 800c27a:	4604      	mov	r4, r0
 800c27c:	4608      	mov	r0, r1
 800c27e:	602b      	str	r3, [r5, #0]
 800c280:	f7f5 f83b 	bl	80012fa <_close>
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	d102      	bne.n	800c28e <_close_r+0x1a>
 800c288:	682b      	ldr	r3, [r5, #0]
 800c28a:	b103      	cbz	r3, 800c28e <_close_r+0x1a>
 800c28c:	6023      	str	r3, [r4, #0]
 800c28e:	bd38      	pop	{r3, r4, r5, pc}
 800c290:	20000448 	.word	0x20000448

0800c294 <_fstat_r>:
 800c294:	b538      	push	{r3, r4, r5, lr}
 800c296:	4d07      	ldr	r5, [pc, #28]	; (800c2b4 <_fstat_r+0x20>)
 800c298:	2300      	movs	r3, #0
 800c29a:	4604      	mov	r4, r0
 800c29c:	4608      	mov	r0, r1
 800c29e:	4611      	mov	r1, r2
 800c2a0:	602b      	str	r3, [r5, #0]
 800c2a2:	f7f5 f836 	bl	8001312 <_fstat>
 800c2a6:	1c43      	adds	r3, r0, #1
 800c2a8:	d102      	bne.n	800c2b0 <_fstat_r+0x1c>
 800c2aa:	682b      	ldr	r3, [r5, #0]
 800c2ac:	b103      	cbz	r3, 800c2b0 <_fstat_r+0x1c>
 800c2ae:	6023      	str	r3, [r4, #0]
 800c2b0:	bd38      	pop	{r3, r4, r5, pc}
 800c2b2:	bf00      	nop
 800c2b4:	20000448 	.word	0x20000448

0800c2b8 <_isatty_r>:
 800c2b8:	b538      	push	{r3, r4, r5, lr}
 800c2ba:	4d06      	ldr	r5, [pc, #24]	; (800c2d4 <_isatty_r+0x1c>)
 800c2bc:	2300      	movs	r3, #0
 800c2be:	4604      	mov	r4, r0
 800c2c0:	4608      	mov	r0, r1
 800c2c2:	602b      	str	r3, [r5, #0]
 800c2c4:	f7f5 f835 	bl	8001332 <_isatty>
 800c2c8:	1c43      	adds	r3, r0, #1
 800c2ca:	d102      	bne.n	800c2d2 <_isatty_r+0x1a>
 800c2cc:	682b      	ldr	r3, [r5, #0]
 800c2ce:	b103      	cbz	r3, 800c2d2 <_isatty_r+0x1a>
 800c2d0:	6023      	str	r3, [r4, #0]
 800c2d2:	bd38      	pop	{r3, r4, r5, pc}
 800c2d4:	20000448 	.word	0x20000448

0800c2d8 <_lseek_r>:
 800c2d8:	b538      	push	{r3, r4, r5, lr}
 800c2da:	4d07      	ldr	r5, [pc, #28]	; (800c2f8 <_lseek_r+0x20>)
 800c2dc:	4604      	mov	r4, r0
 800c2de:	4608      	mov	r0, r1
 800c2e0:	4611      	mov	r1, r2
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	602a      	str	r2, [r5, #0]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	f7f5 f82e 	bl	8001348 <_lseek>
 800c2ec:	1c43      	adds	r3, r0, #1
 800c2ee:	d102      	bne.n	800c2f6 <_lseek_r+0x1e>
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	b103      	cbz	r3, 800c2f6 <_lseek_r+0x1e>
 800c2f4:	6023      	str	r3, [r4, #0]
 800c2f6:	bd38      	pop	{r3, r4, r5, pc}
 800c2f8:	20000448 	.word	0x20000448

0800c2fc <_read_r>:
 800c2fc:	b538      	push	{r3, r4, r5, lr}
 800c2fe:	4d07      	ldr	r5, [pc, #28]	; (800c31c <_read_r+0x20>)
 800c300:	4604      	mov	r4, r0
 800c302:	4608      	mov	r0, r1
 800c304:	4611      	mov	r1, r2
 800c306:	2200      	movs	r2, #0
 800c308:	602a      	str	r2, [r5, #0]
 800c30a:	461a      	mov	r2, r3
 800c30c:	f7f4 ffbc 	bl	8001288 <_read>
 800c310:	1c43      	adds	r3, r0, #1
 800c312:	d102      	bne.n	800c31a <_read_r+0x1e>
 800c314:	682b      	ldr	r3, [r5, #0]
 800c316:	b103      	cbz	r3, 800c31a <_read_r+0x1e>
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	bd38      	pop	{r3, r4, r5, pc}
 800c31c:	20000448 	.word	0x20000448

0800c320 <_init>:
 800c320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c322:	bf00      	nop
 800c324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c326:	bc08      	pop	{r3}
 800c328:	469e      	mov	lr, r3
 800c32a:	4770      	bx	lr

0800c32c <_fini>:
 800c32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c32e:	bf00      	nop
 800c330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c332:	bc08      	pop	{r3}
 800c334:	469e      	mov	lr, r3
 800c336:	4770      	bx	lr
