
SBGC32_QuickStart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd88  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004744  0800df88  0800df88  0001df88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126cc  080126cc  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080126cc  080126cc  000226cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126d4  080126d4  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126d4  080126d4  000226d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080126d8  080126d8  000226d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080126dc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001e0  080128bc  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080128bc  00030528  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027981  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004196  00000000  00000000  00057b8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  0005bd28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001300  00000000  00000000  0005d1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d069  00000000  00000000  0005e4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002059e  00000000  00000000  0008b531  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106191  00000000  00000000  000abacf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b1c60  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000694c  00000000  00000000  001b1cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800df70 	.word	0x0800df70

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800df70 	.word	0x0800df70

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9ac 	b.w	80009d8 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9d08      	ldr	r5, [sp, #32]
 800070e:	4604      	mov	r4, r0
 8000710:	468e      	mov	lr, r1
 8000712:	2b00      	cmp	r3, #0
 8000714:	d14d      	bne.n	80007b2 <__udivmoddi4+0xaa>
 8000716:	428a      	cmp	r2, r1
 8000718:	4694      	mov	ip, r2
 800071a:	d969      	bls.n	80007f0 <__udivmoddi4+0xe8>
 800071c:	fab2 f282 	clz	r2, r2
 8000720:	b152      	cbz	r2, 8000738 <__udivmoddi4+0x30>
 8000722:	fa01 f302 	lsl.w	r3, r1, r2
 8000726:	f1c2 0120 	rsb	r1, r2, #32
 800072a:	fa20 f101 	lsr.w	r1, r0, r1
 800072e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000732:	ea41 0e03 	orr.w	lr, r1, r3
 8000736:	4094      	lsls	r4, r2
 8000738:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800073c:	0c21      	lsrs	r1, r4, #16
 800073e:	fbbe f6f8 	udiv	r6, lr, r8
 8000742:	fa1f f78c 	uxth.w	r7, ip
 8000746:	fb08 e316 	mls	r3, r8, r6, lr
 800074a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800074e:	fb06 f107 	mul.w	r1, r6, r7
 8000752:	4299      	cmp	r1, r3
 8000754:	d90a      	bls.n	800076c <__udivmoddi4+0x64>
 8000756:	eb1c 0303 	adds.w	r3, ip, r3
 800075a:	f106 30ff 	add.w	r0, r6, #4294967295
 800075e:	f080 811f 	bcs.w	80009a0 <__udivmoddi4+0x298>
 8000762:	4299      	cmp	r1, r3
 8000764:	f240 811c 	bls.w	80009a0 <__udivmoddi4+0x298>
 8000768:	3e02      	subs	r6, #2
 800076a:	4463      	add	r3, ip
 800076c:	1a5b      	subs	r3, r3, r1
 800076e:	b2a4      	uxth	r4, r4
 8000770:	fbb3 f0f8 	udiv	r0, r3, r8
 8000774:	fb08 3310 	mls	r3, r8, r0, r3
 8000778:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800077c:	fb00 f707 	mul.w	r7, r0, r7
 8000780:	42a7      	cmp	r7, r4
 8000782:	d90a      	bls.n	800079a <__udivmoddi4+0x92>
 8000784:	eb1c 0404 	adds.w	r4, ip, r4
 8000788:	f100 33ff 	add.w	r3, r0, #4294967295
 800078c:	f080 810a 	bcs.w	80009a4 <__udivmoddi4+0x29c>
 8000790:	42a7      	cmp	r7, r4
 8000792:	f240 8107 	bls.w	80009a4 <__udivmoddi4+0x29c>
 8000796:	4464      	add	r4, ip
 8000798:	3802      	subs	r0, #2
 800079a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800079e:	1be4      	subs	r4, r4, r7
 80007a0:	2600      	movs	r6, #0
 80007a2:	b11d      	cbz	r5, 80007ac <__udivmoddi4+0xa4>
 80007a4:	40d4      	lsrs	r4, r2
 80007a6:	2300      	movs	r3, #0
 80007a8:	e9c5 4300 	strd	r4, r3, [r5]
 80007ac:	4631      	mov	r1, r6
 80007ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007b2:	428b      	cmp	r3, r1
 80007b4:	d909      	bls.n	80007ca <__udivmoddi4+0xc2>
 80007b6:	2d00      	cmp	r5, #0
 80007b8:	f000 80ef 	beq.w	800099a <__udivmoddi4+0x292>
 80007bc:	2600      	movs	r6, #0
 80007be:	e9c5 0100 	strd	r0, r1, [r5]
 80007c2:	4630      	mov	r0, r6
 80007c4:	4631      	mov	r1, r6
 80007c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ca:	fab3 f683 	clz	r6, r3
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d14a      	bne.n	8000868 <__udivmoddi4+0x160>
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d302      	bcc.n	80007dc <__udivmoddi4+0xd4>
 80007d6:	4282      	cmp	r2, r0
 80007d8:	f200 80f9 	bhi.w	80009ce <__udivmoddi4+0x2c6>
 80007dc:	1a84      	subs	r4, r0, r2
 80007de:	eb61 0303 	sbc.w	r3, r1, r3
 80007e2:	2001      	movs	r0, #1
 80007e4:	469e      	mov	lr, r3
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d0e0      	beq.n	80007ac <__udivmoddi4+0xa4>
 80007ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80007ee:	e7dd      	b.n	80007ac <__udivmoddi4+0xa4>
 80007f0:	b902      	cbnz	r2, 80007f4 <__udivmoddi4+0xec>
 80007f2:	deff      	udf	#255	; 0xff
 80007f4:	fab2 f282 	clz	r2, r2
 80007f8:	2a00      	cmp	r2, #0
 80007fa:	f040 8092 	bne.w	8000922 <__udivmoddi4+0x21a>
 80007fe:	eba1 010c 	sub.w	r1, r1, ip
 8000802:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000806:	fa1f fe8c 	uxth.w	lr, ip
 800080a:	2601      	movs	r6, #1
 800080c:	0c20      	lsrs	r0, r4, #16
 800080e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000812:	fb07 1113 	mls	r1, r7, r3, r1
 8000816:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800081a:	fb0e f003 	mul.w	r0, lr, r3
 800081e:	4288      	cmp	r0, r1
 8000820:	d908      	bls.n	8000834 <__udivmoddi4+0x12c>
 8000822:	eb1c 0101 	adds.w	r1, ip, r1
 8000826:	f103 38ff 	add.w	r8, r3, #4294967295
 800082a:	d202      	bcs.n	8000832 <__udivmoddi4+0x12a>
 800082c:	4288      	cmp	r0, r1
 800082e:	f200 80cb 	bhi.w	80009c8 <__udivmoddi4+0x2c0>
 8000832:	4643      	mov	r3, r8
 8000834:	1a09      	subs	r1, r1, r0
 8000836:	b2a4      	uxth	r4, r4
 8000838:	fbb1 f0f7 	udiv	r0, r1, r7
 800083c:	fb07 1110 	mls	r1, r7, r0, r1
 8000840:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000844:	fb0e fe00 	mul.w	lr, lr, r0
 8000848:	45a6      	cmp	lr, r4
 800084a:	d908      	bls.n	800085e <__udivmoddi4+0x156>
 800084c:	eb1c 0404 	adds.w	r4, ip, r4
 8000850:	f100 31ff 	add.w	r1, r0, #4294967295
 8000854:	d202      	bcs.n	800085c <__udivmoddi4+0x154>
 8000856:	45a6      	cmp	lr, r4
 8000858:	f200 80bb 	bhi.w	80009d2 <__udivmoddi4+0x2ca>
 800085c:	4608      	mov	r0, r1
 800085e:	eba4 040e 	sub.w	r4, r4, lr
 8000862:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000866:	e79c      	b.n	80007a2 <__udivmoddi4+0x9a>
 8000868:	f1c6 0720 	rsb	r7, r6, #32
 800086c:	40b3      	lsls	r3, r6
 800086e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000872:	ea4c 0c03 	orr.w	ip, ip, r3
 8000876:	fa20 f407 	lsr.w	r4, r0, r7
 800087a:	fa01 f306 	lsl.w	r3, r1, r6
 800087e:	431c      	orrs	r4, r3
 8000880:	40f9      	lsrs	r1, r7
 8000882:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000886:	fa00 f306 	lsl.w	r3, r0, r6
 800088a:	fbb1 f8f9 	udiv	r8, r1, r9
 800088e:	0c20      	lsrs	r0, r4, #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fb09 1118 	mls	r1, r9, r8, r1
 8000898:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800089c:	fb08 f00e 	mul.w	r0, r8, lr
 80008a0:	4288      	cmp	r0, r1
 80008a2:	fa02 f206 	lsl.w	r2, r2, r6
 80008a6:	d90b      	bls.n	80008c0 <__udivmoddi4+0x1b8>
 80008a8:	eb1c 0101 	adds.w	r1, ip, r1
 80008ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80008b0:	f080 8088 	bcs.w	80009c4 <__udivmoddi4+0x2bc>
 80008b4:	4288      	cmp	r0, r1
 80008b6:	f240 8085 	bls.w	80009c4 <__udivmoddi4+0x2bc>
 80008ba:	f1a8 0802 	sub.w	r8, r8, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1a09      	subs	r1, r1, r0
 80008c2:	b2a4      	uxth	r4, r4
 80008c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80008c8:	fb09 1110 	mls	r1, r9, r0, r1
 80008cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80008d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80008d4:	458e      	cmp	lr, r1
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x1e2>
 80008d8:	eb1c 0101 	adds.w	r1, ip, r1
 80008dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e0:	d26c      	bcs.n	80009bc <__udivmoddi4+0x2b4>
 80008e2:	458e      	cmp	lr, r1
 80008e4:	d96a      	bls.n	80009bc <__udivmoddi4+0x2b4>
 80008e6:	3802      	subs	r0, #2
 80008e8:	4461      	add	r1, ip
 80008ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80008ee:	fba0 9402 	umull	r9, r4, r0, r2
 80008f2:	eba1 010e 	sub.w	r1, r1, lr
 80008f6:	42a1      	cmp	r1, r4
 80008f8:	46c8      	mov	r8, r9
 80008fa:	46a6      	mov	lr, r4
 80008fc:	d356      	bcc.n	80009ac <__udivmoddi4+0x2a4>
 80008fe:	d053      	beq.n	80009a8 <__udivmoddi4+0x2a0>
 8000900:	b15d      	cbz	r5, 800091a <__udivmoddi4+0x212>
 8000902:	ebb3 0208 	subs.w	r2, r3, r8
 8000906:	eb61 010e 	sbc.w	r1, r1, lr
 800090a:	fa01 f707 	lsl.w	r7, r1, r7
 800090e:	fa22 f306 	lsr.w	r3, r2, r6
 8000912:	40f1      	lsrs	r1, r6
 8000914:	431f      	orrs	r7, r3
 8000916:	e9c5 7100 	strd	r7, r1, [r5]
 800091a:	2600      	movs	r6, #0
 800091c:	4631      	mov	r1, r6
 800091e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000922:	f1c2 0320 	rsb	r3, r2, #32
 8000926:	40d8      	lsrs	r0, r3
 8000928:	fa0c fc02 	lsl.w	ip, ip, r2
 800092c:	fa21 f303 	lsr.w	r3, r1, r3
 8000930:	4091      	lsls	r1, r2
 8000932:	4301      	orrs	r1, r0
 8000934:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000938:	fa1f fe8c 	uxth.w	lr, ip
 800093c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000940:	fb07 3610 	mls	r6, r7, r0, r3
 8000944:	0c0b      	lsrs	r3, r1, #16
 8000946:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800094a:	fb00 f60e 	mul.w	r6, r0, lr
 800094e:	429e      	cmp	r6, r3
 8000950:	fa04 f402 	lsl.w	r4, r4, r2
 8000954:	d908      	bls.n	8000968 <__udivmoddi4+0x260>
 8000956:	eb1c 0303 	adds.w	r3, ip, r3
 800095a:	f100 38ff 	add.w	r8, r0, #4294967295
 800095e:	d22f      	bcs.n	80009c0 <__udivmoddi4+0x2b8>
 8000960:	429e      	cmp	r6, r3
 8000962:	d92d      	bls.n	80009c0 <__udivmoddi4+0x2b8>
 8000964:	3802      	subs	r0, #2
 8000966:	4463      	add	r3, ip
 8000968:	1b9b      	subs	r3, r3, r6
 800096a:	b289      	uxth	r1, r1
 800096c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000970:	fb07 3316 	mls	r3, r7, r6, r3
 8000974:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000978:	fb06 f30e 	mul.w	r3, r6, lr
 800097c:	428b      	cmp	r3, r1
 800097e:	d908      	bls.n	8000992 <__udivmoddi4+0x28a>
 8000980:	eb1c 0101 	adds.w	r1, ip, r1
 8000984:	f106 38ff 	add.w	r8, r6, #4294967295
 8000988:	d216      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 800098a:	428b      	cmp	r3, r1
 800098c:	d914      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800098e:	3e02      	subs	r6, #2
 8000990:	4461      	add	r1, ip
 8000992:	1ac9      	subs	r1, r1, r3
 8000994:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000998:	e738      	b.n	800080c <__udivmoddi4+0x104>
 800099a:	462e      	mov	r6, r5
 800099c:	4628      	mov	r0, r5
 800099e:	e705      	b.n	80007ac <__udivmoddi4+0xa4>
 80009a0:	4606      	mov	r6, r0
 80009a2:	e6e3      	b.n	800076c <__udivmoddi4+0x64>
 80009a4:	4618      	mov	r0, r3
 80009a6:	e6f8      	b.n	800079a <__udivmoddi4+0x92>
 80009a8:	454b      	cmp	r3, r9
 80009aa:	d2a9      	bcs.n	8000900 <__udivmoddi4+0x1f8>
 80009ac:	ebb9 0802 	subs.w	r8, r9, r2
 80009b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80009b4:	3801      	subs	r0, #1
 80009b6:	e7a3      	b.n	8000900 <__udivmoddi4+0x1f8>
 80009b8:	4646      	mov	r6, r8
 80009ba:	e7ea      	b.n	8000992 <__udivmoddi4+0x28a>
 80009bc:	4620      	mov	r0, r4
 80009be:	e794      	b.n	80008ea <__udivmoddi4+0x1e2>
 80009c0:	4640      	mov	r0, r8
 80009c2:	e7d1      	b.n	8000968 <__udivmoddi4+0x260>
 80009c4:	46d0      	mov	r8, sl
 80009c6:	e77b      	b.n	80008c0 <__udivmoddi4+0x1b8>
 80009c8:	3b02      	subs	r3, #2
 80009ca:	4461      	add	r1, ip
 80009cc:	e732      	b.n	8000834 <__udivmoddi4+0x12c>
 80009ce:	4630      	mov	r0, r6
 80009d0:	e709      	b.n	80007e6 <__udivmoddi4+0xde>
 80009d2:	4464      	add	r4, ip
 80009d4:	3802      	subs	r0, #2
 80009d6:	e742      	b.n	800085e <__udivmoddi4+0x156>

080009d8 <__aeabi_idiv0>:
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	4a0e      	ldr	r2, [pc, #56]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	6313      	str	r3, [r2, #48]	; 0x30
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_GPIO_Init+0x44>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a08      	ldr	r2, [pc, #32]	; (8000a20 <MX_GPIO_Init+0x44>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_GPIO_Init+0x44>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	603b      	str	r3, [r7, #0]
 8000a10:	683b      	ldr	r3, [r7, #0]

}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop
 8000a20:	40023800 	.word	0x40023800

08000a24 <SerialAPI_GetConfirmStatus>:
	 *	@param	*confirm - pointer to confirmation structure
	 *
	 *	@return	sbgcConfirm_t.status
	 */
	static inline sbgcConfirmStatus_t SerialAPI_GetConfirmStatus (sbgcConfirm_t *confirm)
	{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
		return confirm->status;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	79db      	ldrb	r3, [r3, #7]
	}
 8000a30:	4618      	mov	r0, r3
 8000a32:	370c      	adds	r7, #12
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <CallbackReadRealTimeData>:


#if (SBGC_NON_BLOCKING_MODE)

	void CallbackReadRealTimeData (void *param)
	{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
		unused_(param);

		DebugSBGC32_PrintMessage(&SBGC32_Device, "Realtime data received!\n");
 8000a44:	4903      	ldr	r1, [pc, #12]	; (8000a54 <CallbackReadRealTimeData+0x18>)
 8000a46:	4804      	ldr	r0, [pc, #16]	; (8000a58 <CallbackReadRealTimeData+0x1c>)
 8000a48:	f005 fa90 	bl	8005f6c <DebugSBGC32_PrintMessage>

		/* This data may be obtained from the RealTimeData structure */
	}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	0800df88 	.word	0x0800df88
 8000a58:	200001fc 	.word	0x200001fc

08000a5c <CallbackGetAnglesExt>:


	void CallbackGetAnglesExt (void *param)
	{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b084      	sub	sp, #16
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
		i32 frameCamAngleTemp = sbgcDegreeToAngle(GetAnglesExt.AxisGAE[PITCH].frameCamAngle);
 8000a64:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <CallbackGetAnglesExt+0x4c>)
 8000a66:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00f      	beq.n	8000a8e <CallbackGetAnglesExt+0x32>
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <CallbackGetAnglesExt+0x4c>)
 8000a70:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000a74:	ee07 3a90 	vmov	s15, r3
 8000a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a7c:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000aac <CallbackGetAnglesExt+0x50>
 8000a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a88:	ee17 3a90 	vmov	r3, s15
 8000a8c:	e000      	b.n	8000a90 <CallbackGetAnglesExt+0x34>
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]

		/* If the callback argument was NULL, the library defaults to passing a pointer to the SBGC32_Device object */
		DebugSBGC32_PrintStructElement((sbgcGeneral_t*)param, &frameCamAngleTemp, "Current Angle Pitch =", sbgcINT);
 8000a92:	f107 010c 	add.w	r1, r7, #12
 8000a96:	2306      	movs	r3, #6
 8000a98:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <CallbackGetAnglesExt+0x54>)
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f005 fa7a 	bl	8005f94 <DebugSBGC32_PrintStructElement>
	}
 8000aa0:	bf00      	nop
 8000aa2:	3710      	adds	r7, #16
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000348 	.word	0x20000348
 8000aac:	42360b61 	.word	0x42360b61
 8000ab0:	0800dfa4 	.word	0x0800dfa4

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b086      	sub	sp, #24
 8000ab8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aba:	f000 fd0e 	bl	80014da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abe:	f000 f969 	bl	8000d94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac2:	f7ff ff8b 	bl	80009dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8000ac6:	f000 fb61 	bl	800118c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000aca:	f000 fbd1 	bl	8001270 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000ace:	f000 fbff 	bl	80012d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* SimpleBGC32 Init */
	SBGC32_Init(&SBGC32_Device);
 8000ad2:	489c      	ldr	r0, [pc, #624]	; (8000d44 <main+0x290>)
 8000ad4:	f008 fe94 	bl	8009800 <SBGC32_Init>

	/* Configure the gimbal movement */
	ControlConfig.flags = CtrlCONFIG_FLAG_NEED_CONFIRM;
 8000ad8:	4b9b      	ldr	r3, [pc, #620]	; (8000d48 <main+0x294>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	775a      	strb	r2, [r3, #29]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	779a      	strb	r2, [r3, #30]

	ControlConfig.AxisCCtrl[PITCH].angleLPF = 1;
 8000ae2:	4b99      	ldr	r3, [pc, #612]	; (8000d48 <main+0x294>)
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	739a      	strb	r2, [r3, #14]
	ControlConfig.AxisCCtrl[PITCH].speedLPF = 1;
 8000ae8:	4b97      	ldr	r3, [pc, #604]	; (8000d48 <main+0x294>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	73da      	strb	r2, [r3, #15]

	Control.mode[PITCH] = CtrlMODE_ANGLE;
 8000aee:	4b97      	ldr	r3, [pc, #604]	; (8000d4c <main+0x298>)
 8000af0:	2202      	movs	r2, #2
 8000af2:	705a      	strb	r2, [r3, #1]

	Control.AxisC[PITCH].angle = sbgcAngleToDegree(30);
 8000af4:	4b95      	ldr	r3, [pc, #596]	; (8000d4c <main+0x298>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	f042 0255 	orr.w	r2, r2, #85	; 0x55
 8000afc:	725a      	strb	r2, [r3, #9]
 8000afe:	2200      	movs	r2, #0
 8000b00:	f042 0205 	orr.w	r2, r2, #5
 8000b04:	729a      	strb	r2, [r3, #10]
	Control.AxisC[PITCH].speed = sbgcSpeedToValue(3);
 8000b06:	4b91      	ldr	r3, [pc, #580]	; (8000d4c <main+0x298>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f042 0218 	orr.w	r2, r2, #24
 8000b0e:	71da      	strb	r2, [r3, #7]
 8000b10:	2200      	movs	r2, #0
 8000b12:	721a      	strb	r2, [r3, #8]
		static sbgcCommandToken_t tokenMP3, tokenRTD, tokenGAE, tokenBI, tokenCtrl;

		/* Register the serial commands */
		/* It's possible to use the commands without tokens in this mode */
		/* Configure gimbal to further control */
		SBGC32_ControlConfig(&SBGC32_Device, &ControlConfig, &Confirm, SBGC_DEFAULT_ARGS_);
 8000b14:	2300      	movs	r3, #0
 8000b16:	9304      	str	r3, [sp, #16]
 8000b18:	2300      	movs	r3, #0
 8000b1a:	9303      	str	r3, [sp, #12]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	9302      	str	r3, [sp, #8]
 8000b20:	2364      	movs	r3, #100	; 0x64
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	2301      	movs	r3, #1
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2300      	movs	r3, #0
 8000b2a:	4a89      	ldr	r2, [pc, #548]	; (8000d50 <main+0x29c>)
 8000b2c:	4986      	ldr	r1, [pc, #536]	; (8000d48 <main+0x294>)
 8000b2e:	4885      	ldr	r0, [pc, #532]	; (8000d44 <main+0x290>)
 8000b30:	f008 fc0c 	bl	800934c <SBGC32_ControlConfig>

		/* Send and receive the 2 registered serial commands */
		sbgcBlockQueue(SBGC32_ProcessAllCommands(&SBGC32_Device));
 8000b34:	bf00      	nop
 8000b36:	4883      	ldr	r0, [pc, #524]	; (8000d44 <main+0x290>)
 8000b38:	f006 fe0d 	bl	8007756 <SBGC32_ProcessAllCommands>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d1f9      	bne.n	8000b36 <main+0x82>

		if (SerialAPI_GetConfirmStatus(&Confirm) == sbgcCONFIRM_RECEIVED)
 8000b42:	4883      	ldr	r0, [pc, #524]	; (8000d50 <main+0x29c>)
 8000b44:	f7ff ff6e 	bl	8000a24 <SerialAPI_GetConfirmStatus>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d104      	bne.n	8000b58 <main+0xa4>
			DebugSBGC32_PrintMessage(&SBGC32_Device, "The gimbal configured successfully!\n");
 8000b4e:	4981      	ldr	r1, [pc, #516]	; (8000d54 <main+0x2a0>)
 8000b50:	487c      	ldr	r0, [pc, #496]	; (8000d44 <main+0x290>)
 8000b52:	f005 fa0b 	bl	8005f6c <DebugSBGC32_PrintMessage>
 8000b56:	e00e      	b.n	8000b76 <main+0xc2>

		else if (SerialAPI_GetConfirmStatus(&Confirm) == sbgcCONFIRM_ERROR)
 8000b58:	487d      	ldr	r0, [pc, #500]	; (8000d50 <main+0x29c>)
 8000b5a:	f7ff ff63 	bl	8000a24 <SerialAPI_GetConfirmStatus>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d104      	bne.n	8000b6e <main+0xba>
			DebugSBGC32_PrintMessage(&SBGC32_Device, "Gimbal configuration parameters error!\n");
 8000b64:	497c      	ldr	r1, [pc, #496]	; (8000d58 <main+0x2a4>)
 8000b66:	4877      	ldr	r0, [pc, #476]	; (8000d44 <main+0x290>)
 8000b68:	f005 fa00 	bl	8005f6c <DebugSBGC32_PrintMessage>
 8000b6c:	e003      	b.n	8000b76 <main+0xc2>

		else  // sbgcCONFIRM_NOT_RECEIVED
			DebugSBGC32_PrintMessage(&SBGC32_Device, "Communication Error! The confirmation command was not received at all!\n");
 8000b6e:	497b      	ldr	r1, [pc, #492]	; (8000d5c <main+0x2a8>)
 8000b70:	4874      	ldr	r0, [pc, #464]	; (8000d44 <main+0x290>)
 8000b72:	f005 f9fb 	bl	8005f6c <DebugSBGC32_PrintMessage>

		/* This command will enter the user callback after successful reception */
		SBGC32_ReadRealTimeData4(&SBGC32_Device, &RealTimeData, SBGC_DEFAULT_FEATURES_, &tokenRTD, CallbackReadRealTimeData, NULL);
 8000b76:	2300      	movs	r3, #0
 8000b78:	9303      	str	r3, [sp, #12]
 8000b7a:	4b79      	ldr	r3, [pc, #484]	; (8000d60 <main+0x2ac>)
 8000b7c:	9302      	str	r3, [sp, #8]
 8000b7e:	4b79      	ldr	r3, [pc, #484]	; (8000d64 <main+0x2b0>)
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	2364      	movs	r3, #100	; 0x64
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2301      	movs	r3, #1
 8000b88:	2200      	movs	r2, #0
 8000b8a:	4977      	ldr	r1, [pc, #476]	; (8000d68 <main+0x2b4>)
 8000b8c:	486d      	ldr	r0, [pc, #436]	; (8000d44 <main+0x290>)
 8000b8e:	f008 fc96 	bl	80094be <SBGC32_ReadRealTimeData4>

		/* It's also possible to use a single token for two commands if each of
		   those commands consists of just one internal serial command */
		SBGC32_Control(&SBGC32_Device, &Control, SBGC_DEFAULT_FEATURES_, &tokenCtrl, SBGC_NO_CALLBACK_);
 8000b92:	2300      	movs	r3, #0
 8000b94:	9303      	str	r3, [sp, #12]
 8000b96:	2300      	movs	r3, #0
 8000b98:	9302      	str	r3, [sp, #8]
 8000b9a:	4b74      	ldr	r3, [pc, #464]	; (8000d6c <main+0x2b8>)
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2364      	movs	r3, #100	; 0x64
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	4969      	ldr	r1, [pc, #420]	; (8000d4c <main+0x298>)
 8000ba8:	4866      	ldr	r0, [pc, #408]	; (8000d44 <main+0x290>)
 8000baa:	f008 fb93 	bl	80092d4 <SBGC32_Control>
		/* The SBGC32_Control function doesn't automatically process the confirmation command, so it must be registered manually */
		SBGC32_CheckConfirmation(&SBGC32_Device, &Confirm, CMD_CONTROL, SBGC_DEFAULT_FEATURES_, &tokenCtrl, SBGC_NO_CALLBACK_);
 8000bae:	2300      	movs	r3, #0
 8000bb0:	9304      	str	r3, [sp, #16]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9303      	str	r3, [sp, #12]
 8000bb6:	4b6d      	ldr	r3, [pc, #436]	; (8000d6c <main+0x2b8>)
 8000bb8:	9302      	str	r3, [sp, #8]
 8000bba:	2364      	movs	r3, #100	; 0x64
 8000bbc:	9301      	str	r3, [sp, #4]
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	9300      	str	r3, [sp, #0]
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	2243      	movs	r2, #67	; 0x43
 8000bc6:	4962      	ldr	r1, [pc, #392]	; (8000d50 <main+0x29c>)
 8000bc8:	485e      	ldr	r0, [pc, #376]	; (8000d44 <main+0x290>)
 8000bca:	f007 f83d 	bl	8007c48 <SBGC32_CheckConfirmation>

		/* Register usual commands */
		SBGC32_ReadBoardInfo(&SBGC32_Device, &BoardInfo, 0, SBGC_DEFAULT_FEATURES_, &tokenBI, SBGC_NO_CALLBACK_);
 8000bce:	2300      	movs	r3, #0
 8000bd0:	9304      	str	r3, [sp, #16]
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	9303      	str	r3, [sp, #12]
 8000bd6:	4b66      	ldr	r3, [pc, #408]	; (8000d70 <main+0x2bc>)
 8000bd8:	9302      	str	r3, [sp, #8]
 8000bda:	2364      	movs	r3, #100	; 0x64
 8000bdc:	9301      	str	r3, [sp, #4]
 8000bde:	2301      	movs	r3, #1
 8000be0:	9300      	str	r3, [sp, #0]
 8000be2:	2300      	movs	r3, #0
 8000be4:	2200      	movs	r2, #0
 8000be6:	4963      	ldr	r1, [pc, #396]	; (8000d74 <main+0x2c0>)
 8000be8:	4856      	ldr	r0, [pc, #344]	; (8000d44 <main+0x290>)
 8000bea:	f008 fd20 	bl	800962e <SBGC32_ReadBoardInfo>
		SBGC32_ReadParams3(&SBGC32_Device, &MainParams3, sbgcCURRENT_PROFILE, SBGC_DEFAULT_FEATURES_, &tokenMP3, SBGC_NO_CALLBACK_);
 8000bee:	2300      	movs	r3, #0
 8000bf0:	9304      	str	r3, [sp, #16]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	9303      	str	r3, [sp, #12]
 8000bf6:	4b60      	ldr	r3, [pc, #384]	; (8000d78 <main+0x2c4>)
 8000bf8:	9302      	str	r3, [sp, #8]
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	9301      	str	r3, [sp, #4]
 8000bfe:	2301      	movs	r3, #1
 8000c00:	9300      	str	r3, [sp, #0]
 8000c02:	2300      	movs	r3, #0
 8000c04:	22ff      	movs	r2, #255	; 0xff
 8000c06:	495d      	ldr	r1, [pc, #372]	; (8000d7c <main+0x2c8>)
 8000c08:	484e      	ldr	r0, [pc, #312]	; (8000d44 <main+0x290>)
 8000c0a:	f008 fbf3 	bl	80093f4 <SBGC32_ReadParams3>

		/* Register the serial commands that will not be deleted */
		SBGC32_GetAnglesExt(&SBGC32_Device, &GetAnglesExt, SCParam_RETAIN | SCParam_NO_NEED_LOG, SCPrior_LOW, SCTimeout_DEFAULT,
 8000c0e:	2300      	movs	r3, #0
 8000c10:	9303      	str	r3, [sp, #12]
 8000c12:	4b5b      	ldr	r3, [pc, #364]	; (8000d80 <main+0x2cc>)
 8000c14:	9302      	str	r3, [sp, #8]
 8000c16:	4b5b      	ldr	r3, [pc, #364]	; (8000d84 <main+0x2d0>)
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	2364      	movs	r3, #100	; 0x64
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	220c      	movs	r2, #12
 8000c22:	4959      	ldr	r1, [pc, #356]	; (8000d88 <main+0x2d4>)
 8000c24:	4847      	ldr	r0, [pc, #284]	; (8000d44 <main+0x290>)
 8000c26:	f008 fca6 	bl	8009576 <SBGC32_GetAnglesExt>
				&tokenGAE, CallbackGetAnglesExt, NULL);

		/* Thus there are 10 serial commands in the main command queue */

		/* Using tokens, it's possible to manage the serial commands in any order */
		sbgcBlockCommand(SBGC32_Transmit(&SBGC32_Device, &tokenBI));
 8000c2a:	bf00      	nop
 8000c2c:	4950      	ldr	r1, [pc, #320]	; (8000d70 <main+0x2bc>)
 8000c2e:	4845      	ldr	r0, [pc, #276]	; (8000d44 <main+0x290>)
 8000c30:	f006 fc17 	bl	8007462 <SBGC32_Transmit>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b01      	cmp	r3, #1
 8000c38:	d0f8      	beq.n	8000c2c <main+0x178>

		sbgcBlockCommand(SBGC32_Transmit(&SBGC32_Device, &tokenRTD));
 8000c3a:	bf00      	nop
 8000c3c:	4949      	ldr	r1, [pc, #292]	; (8000d64 <main+0x2b0>)
 8000c3e:	4841      	ldr	r0, [pc, #260]	; (8000d44 <main+0x290>)
 8000c40:	f006 fc0f 	bl	8007462 <SBGC32_Transmit>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d0f8      	beq.n	8000c3c <main+0x188>

		sbgcBlockCommand(SBGC32_Receive(&SBGC32_Device, &tokenBI));
 8000c4a:	bf00      	nop
 8000c4c:	4948      	ldr	r1, [pc, #288]	; (8000d70 <main+0x2bc>)
 8000c4e:	483d      	ldr	r0, [pc, #244]	; (8000d44 <main+0x290>)
 8000c50:	f006 fc64 	bl	800751c <SBGC32_Receive>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d0f8      	beq.n	8000c4c <main+0x198>

		sbgcBlockCommand(SBGC32_Transmit(&SBGC32_Device, &tokenMP3));
 8000c5a:	bf00      	nop
 8000c5c:	4946      	ldr	r1, [pc, #280]	; (8000d78 <main+0x2c4>)
 8000c5e:	4839      	ldr	r0, [pc, #228]	; (8000d44 <main+0x290>)
 8000c60:	f006 fbff 	bl	8007462 <SBGC32_Transmit>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b01      	cmp	r3, #1
 8000c68:	d0f8      	beq.n	8000c5c <main+0x1a8>

		sbgcBlockCommand(SBGC32_Receive(&SBGC32_Device, &tokenRTD));
 8000c6a:	bf00      	nop
 8000c6c:	493d      	ldr	r1, [pc, #244]	; (8000d64 <main+0x2b0>)
 8000c6e:	4835      	ldr	r0, [pc, #212]	; (8000d44 <main+0x290>)
 8000c70:	f006 fc54 	bl	800751c <SBGC32_Receive>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d0f8      	beq.n	8000c6c <main+0x1b8>

		sbgcBlockCommand(SBGC32_Transmit(&SBGC32_Device, &tokenCtrl));
 8000c7a:	bf00      	nop
 8000c7c:	493b      	ldr	r1, [pc, #236]	; (8000d6c <main+0x2b8>)
 8000c7e:	4831      	ldr	r0, [pc, #196]	; (8000d44 <main+0x290>)
 8000c80:	f006 fbef 	bl	8007462 <SBGC32_Transmit>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d0f8      	beq.n	8000c7c <main+0x1c8>

		sbgcBlockCommand(SBGC32_Receive(&SBGC32_Device, &tokenMP3));
 8000c8a:	bf00      	nop
 8000c8c:	493a      	ldr	r1, [pc, #232]	; (8000d78 <main+0x2c4>)
 8000c8e:	482d      	ldr	r0, [pc, #180]	; (8000d44 <main+0x290>)
 8000c90:	f006 fc44 	bl	800751c <SBGC32_Receive>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d0f8      	beq.n	8000c8c <main+0x1d8>

		sbgcBlockCommand(SBGC32_Receive(&SBGC32_Device, &tokenCtrl));
 8000c9a:	bf00      	nop
 8000c9c:	4933      	ldr	r1, [pc, #204]	; (8000d6c <main+0x2b8>)
 8000c9e:	4829      	ldr	r0, [pc, #164]	; (8000d44 <main+0x290>)
 8000ca0:	f006 fc3c 	bl	800751c <SBGC32_Receive>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d0f8      	beq.n	8000c9c <main+0x1e8>
		/* sbgcBlockCommand is a stub to successful handle of the serial commands.
		   It's possible to avoid using this stub by waiting for specific time
		   intervals or sending/receiving commands with a significant delay
		   after executing external user code */

		if (SerialAPI_GetConfirmStatus(&Confirm) != sbgcCONFIRM_RECEIVED)
 8000caa:	4829      	ldr	r0, [pc, #164]	; (8000d50 <main+0x29c>)
 8000cac:	f7ff feba 	bl	8000a24 <SerialAPI_GetConfirmStatus>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d004      	beq.n	8000cc0 <main+0x20c>
		{
			DebugSBGC32_PrintMessage(&SBGC32_Device, "No confirmation of control detected! Terminating the program...");
 8000cb6:	4935      	ldr	r1, [pc, #212]	; (8000d8c <main+0x2d8>)
 8000cb8:	4822      	ldr	r0, [pc, #136]	; (8000d44 <main+0x290>)
 8000cba:	f005 f957 	bl	8005f6c <DebugSBGC32_PrintMessage>

			/* There is no point in proceeding without starting the data stream */
			while (1);  // Stop the program here
 8000cbe:	e7fe      	b.n	8000cbe <main+0x20a>
		}

		/* Get current time */
		timestamp = sbgcGetTick();
 8000cc0:	f000 fc5c 	bl	800157c <HAL_GetTick>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	4a32      	ldr	r2, [pc, #200]	; (8000d90 <main+0x2dc>)
 8000cc8:	6013      	str	r3, [r2, #0]

		/* Get the current PITCH angle over a period of SBGC_GET_ANGLES_TIMEOUT */
		while ((sbgcGetTick() - timestamp) < SBGC_GET_ANGLES_TIMEOUT)
 8000cca:	e00b      	b.n	8000ce4 <main+0x230>
		{
			SBGC32_Transmit(&SBGC32_Device, &tokenGAE);
 8000ccc:	492d      	ldr	r1, [pc, #180]	; (8000d84 <main+0x2d0>)
 8000cce:	481d      	ldr	r0, [pc, #116]	; (8000d44 <main+0x290>)
 8000cd0:	f006 fbc7 	bl	8007462 <SBGC32_Transmit>

			sbgcDelay(SBGC_GET_ANGLES_INTERVAL);
 8000cd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd8:	f000 fc5c 	bl	8001594 <HAL_Delay>

			SBGC32_Receive(&SBGC32_Device, &tokenGAE);
 8000cdc:	4929      	ldr	r1, [pc, #164]	; (8000d84 <main+0x2d0>)
 8000cde:	4819      	ldr	r0, [pc, #100]	; (8000d44 <main+0x290>)
 8000ce0:	f006 fc1c 	bl	800751c <SBGC32_Receive>
		while ((sbgcGetTick() - timestamp) < SBGC_GET_ANGLES_TIMEOUT)
 8000ce4:	f000 fc4a 	bl	800157c <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	4b29      	ldr	r3, [pc, #164]	; (8000d90 <main+0x2dc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	1ad3      	subs	r3, r2, r3
 8000cf0:	f643 2297 	movw	r2, #14999	; 0x3a97
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d9e9      	bls.n	8000ccc <main+0x218>
		}

		/* Free this command by exchanging SCParam_RETAIN parameter with SCParam_NO */
		SBGC32_GetAnglesExt(&SBGC32_Device, &GetAnglesExt, SCParam_NO, SCPrior_LOW, SCTimeout_DEFAULT, &tokenGAE, SBGC_NO_CALLBACK_);
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	9303      	str	r3, [sp, #12]
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	9302      	str	r3, [sp, #8]
 8000d00:	4b20      	ldr	r3, [pc, #128]	; (8000d84 <main+0x2d0>)
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2364      	movs	r3, #100	; 0x64
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2301      	movs	r3, #1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	491e      	ldr	r1, [pc, #120]	; (8000d88 <main+0x2d4>)
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <main+0x290>)
 8000d10:	f008 fc31 	bl	8009576 <SBGC32_GetAnglesExt>

		/* Return camera to the start position */
		SBGC32_ExecuteMenu(&SBGC32_Device, MENU_CMD_HOME_POSITION, &Confirm, SBGC_DEFAULT_ARGS_);
 8000d14:	2300      	movs	r3, #0
 8000d16:	9304      	str	r3, [sp, #16]
 8000d18:	2300      	movs	r3, #0
 8000d1a:	9303      	str	r3, [sp, #12]
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	9302      	str	r3, [sp, #8]
 8000d20:	2364      	movs	r3, #100	; 0x64
 8000d22:	9301      	str	r3, [sp, #4]
 8000d24:	2301      	movs	r3, #1
 8000d26:	9300      	str	r3, [sp, #0]
 8000d28:	2300      	movs	r3, #0
 8000d2a:	4a09      	ldr	r2, [pc, #36]	; (8000d50 <main+0x29c>)
 8000d2c:	2112      	movs	r1, #18
 8000d2e:	4805      	ldr	r0, [pc, #20]	; (8000d44 <main+0x290>)
 8000d30:	f008 fce2 	bl	80096f8 <SBGC32_ExecuteMenu>

		/* Finish the last 4 serial commands */
		sbgcBlockQueue(SBGC32_ProcessAllCommands(&SBGC32_Device));
 8000d34:	bf00      	nop
 8000d36:	4803      	ldr	r0, [pc, #12]	; (8000d44 <main+0x290>)
 8000d38:	f006 fd0d 	bl	8007756 <SBGC32_ProcessAllCommands>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d1f9      	bne.n	8000d36 <main+0x282>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <main+0x28e>
 8000d44:	200001fc 	.word	0x200001fc
 8000d48:	20000218 	.word	0x20000218
 8000d4c:	20000208 	.word	0x20000208
 8000d50:	20000394 	.word	0x20000394
 8000d54:	0800dfbc 	.word	0x0800dfbc
 8000d58:	0800dfe4 	.word	0x0800dfe4
 8000d5c:	0800e00c 	.word	0x0800e00c
 8000d60:	08000a3d 	.word	0x08000a3d
 8000d64:	200003a0 	.word	0x200003a0
 8000d68:	200002cc 	.word	0x200002cc
 8000d6c:	200003a2 	.word	0x200003a2
 8000d70:	200003a4 	.word	0x200003a4
 8000d74:	20000380 	.word	0x20000380
 8000d78:	200003a6 	.word	0x200003a6
 8000d7c:	20000244 	.word	0x20000244
 8000d80:	08000a5d 	.word	0x08000a5d
 8000d84:	200003a8 	.word	0x200003a8
 8000d88:	20000348 	.word	0x20000348
 8000d8c:	0800e054 	.word	0x0800e054
 8000d90:	2000039c 	.word	0x2000039c

08000d94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b094      	sub	sp, #80	; 0x50
 8000d98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2234      	movs	r2, #52	; 0x34
 8000da0:	2100      	movs	r1, #0
 8000da2:	4618      	mov	r0, r3
 8000da4:	f008 fd78 	bl	8009898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da8:	f107 0308 	add.w	r3, r7, #8
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <SystemClock_Config+0xd4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a2a      	ldr	r2, [pc, #168]	; (8000e68 <SystemClock_Config+0xd4>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <SystemClock_Config+0xd4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	607b      	str	r3, [r7, #4]
 8000dce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd0:	4b26      	ldr	r3, [pc, #152]	; (8000e6c <SystemClock_Config+0xd8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a25      	ldr	r2, [pc, #148]	; (8000e6c <SystemClock_Config+0xd8>)
 8000dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <SystemClock_Config+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df0:	2310      	movs	r3, #16
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df4:	2302      	movs	r3, #2
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dfc:	2308      	movs	r3, #8
 8000dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e00:	23d8      	movs	r3, #216	; 0xd8
 8000e02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e10:	f107 031c 	add.w	r3, r7, #28
 8000e14:	4618      	mov	r0, r3
 8000e16:	f000 ff81 	bl	8001d1c <HAL_RCC_OscConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e20:	f000 f82b 	bl	8000e7a <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e24:	f000 ff2a 	bl	8001c7c <HAL_PWREx_EnableOverDrive>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e2e:	f000 f824 	bl	8000e7a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e32:	230f      	movs	r3, #15
 8000e34:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e36:	2302      	movs	r3, #2
 8000e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e48:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	2107      	movs	r1, #7
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 fa11 	bl	8002278 <HAL_RCC_ClockConfig>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e5c:	f000 f80d 	bl	8000e7a <Error_Handler>
  }
}
 8000e60:	bf00      	nop
 8000e62:	3750      	adds	r7, #80	; 0x50
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40007000 	.word	0x40007000

08000e70 <SerialAPI_FatalErrorHandler>:

/* USER CODE BEGIN 4 */

void SerialAPI_FatalErrorHandler (void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e74:	b672      	cpsid	i
}
 8000e76:	bf00      	nop
	/* User common error handler */
	__disable_irq();

	while (1);
 8000e78:	e7fe      	b.n	8000e78 <SerialAPI_FatalErrorHandler+0x8>

08000e7a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000e7e:	b672      	cpsid	i
}
 8000e80:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e82:	e7fe      	b.n	8000e82 <Error_Handler+0x8>

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e94:	6413      	str	r3, [r2, #64]	; 0x40
 8000e96:	4b0c      	ldr	r3, [pc, #48]	; (8000ec8 <HAL_MspInit+0x44>)
 8000e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_MspInit+0x44>)
 8000ea8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eac:	6453      	str	r3, [r2, #68]	; 0x44
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_MspInit+0x44>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <NMI_Handler+0x4>

08000ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <HardFault_Handler+0x4>

08000ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <MemManage_Handler+0x4>

08000ede <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <BusFault_Handler+0x4>

08000ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <UsageFault_Handler+0x4>

08000eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f06:	b480      	push	{r7}
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr

08000f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f18:	f000 fb1c 	bl	8001554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	sbgcTimerIRQ_Handler(&SBGC32_Device);
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <TIM2_IRQHandler+0x38>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d10c      	bne.n	8000f4c <TIM2_IRQHandler+0x2c>
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <TIM2_IRQHandler+0x38>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	f003 0301 	and.w	r3, r3, #1
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d105      	bne.n	8000f4c <TIM2_IRQHandler+0x2c>
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <TIM2_IRQHandler+0x3c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f008 f847 	bl	8008fda <DriverSBGC32_TimerCallBack>

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM2_IRQHandler+0x38>)
 8000f4e:	f002 f871 	bl	8003034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200003b0 	.word	0x200003b0
 8000f5c:	200001fc 	.word	0x200001fc

08000f60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	sbgcUART_IRQ_Handler(&SBGC32_Device);
 8000f64:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <USART1_IRQHandler+0x74>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f6e:	2b40      	cmp	r3, #64	; 0x40
 8000f70:	d10c      	bne.n	8000f8c <USART1_IRQHandler+0x2c>
 8000f72:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <USART1_IRQHandler+0x74>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <USART1_IRQHandler+0x2c>
 8000f80:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <USART1_IRQHandler+0x78>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f008 f896 	bl	80090b8 <DriverSBGC32_UART_TxCallBack>
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <USART1_IRQHandler+0x74>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 0320 	and.w	r3, r3, #32
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	d10c      	bne.n	8000fb4 <USART1_IRQHandler+0x54>
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <USART1_IRQHandler+0x74>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d005      	beq.n	8000fb4 <USART1_IRQHandler+0x54>
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <USART1_IRQHandler+0x78>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f008 f924 	bl	80091fc <DriverSBGC32_UART_RxCallBack>
 8000fb4:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <USART1_IRQHandler+0x74>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	69db      	ldr	r3, [r3, #28]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b08      	cmp	r3, #8
 8000fc0:	d103      	bne.n	8000fca <USART1_IRQHandler+0x6a>
 8000fc2:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <USART1_IRQHandler+0x74>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2208      	movs	r2, #8
 8000fc8:	621a      	str	r2, [r3, #32]

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000fca:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <USART1_IRQHandler+0x74>)
 8000fcc:	f002 fd56 	bl	8003a7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200003fc 	.word	0x200003fc
 8000fd8:	200001fc 	.word	0x200001fc

08000fdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  return 1;
 8000fe0:	2301      	movs	r3, #1
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_kill>:

int _kill(int pid, int sig)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ff6:	f008 fc0f 	bl	8009818 <__errno>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2216      	movs	r2, #22
 8000ffe:	601a      	str	r2, [r3, #0]
  return -1;
 8001000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <_exit>:

void _exit (int status)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001014:	f04f 31ff 	mov.w	r1, #4294967295
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ffe7 	bl	8000fec <_kill>
  while (1) {}    /* Make sure we hang here */
 800101e:	e7fe      	b.n	800101e <_exit+0x12>

08001020 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	60b9      	str	r1, [r7, #8]
 800102a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e00a      	b.n	8001048 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001032:	f3af 8000 	nop.w
 8001036:	4601      	mov	r1, r0
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	1c5a      	adds	r2, r3, #1
 800103c:	60ba      	str	r2, [r7, #8]
 800103e:	b2ca      	uxtb	r2, r1
 8001040:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	3301      	adds	r3, #1
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	dbf0      	blt.n	8001032 <_read+0x12>
  }

  return len;
 8001050:	687b      	ldr	r3, [r7, #4]
}
 8001052:	4618      	mov	r0, r3
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e009      	b.n	8001080 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf1      	blt.n	800106c <_write+0x12>
  }
  return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <_close>:

int _close(int file)
{
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800109e:	4618      	mov	r0, r3
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
 80010b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ba:	605a      	str	r2, [r3, #4]
  return 0;
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_isatty>:

int _isatty(int file)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010ec:	2300      	movs	r3, #0
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001104:	4a14      	ldr	r2, [pc, #80]	; (8001158 <_sbrk+0x5c>)
 8001106:	4b15      	ldr	r3, [pc, #84]	; (800115c <_sbrk+0x60>)
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001110:	4b13      	ldr	r3, [pc, #76]	; (8001160 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001118:	4b11      	ldr	r3, [pc, #68]	; (8001160 <_sbrk+0x64>)
 800111a:	4a12      	ldr	r2, [pc, #72]	; (8001164 <_sbrk+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <_sbrk+0x64>)
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4413      	add	r3, r2
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	429a      	cmp	r2, r3
 800112a:	d207      	bcs.n	800113c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800112c:	f008 fb74 	bl	8009818 <__errno>
 8001130:	4603      	mov	r3, r0
 8001132:	220c      	movs	r2, #12
 8001134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	e009      	b.n	8001150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001142:	4b07      	ldr	r3, [pc, #28]	; (8001160 <_sbrk+0x64>)
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4413      	add	r3, r2
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <_sbrk+0x64>)
 800114c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800114e:	68fb      	ldr	r3, [r7, #12]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20080000 	.word	0x20080000
 800115c:	00000400 	.word	0x00000400
 8001160:	200003ac 	.word	0x200003ac
 8001164:	20000528 	.word	0x20000528

08001168 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <SystemInit+0x20>)
 800116e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001172:	4a05      	ldr	r2, [pc, #20]	; (8001188 <SystemInit+0x20>)
 8001174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000ed00 	.word	0xe000ed00

0800118c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a0:	1d3b      	adds	r3, r7, #4
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <MX_TIM2_Init+0x98>)
 80011ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <MX_TIM2_Init+0x98>)
 80011b4:	226b      	movs	r2, #107	; 0x6b
 80011b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_TIM2_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <MX_TIM2_Init+0x98>)
 80011c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b17      	ldr	r3, [pc, #92]	; (8001224 <MX_TIM2_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011cc:	4b15      	ldr	r3, [pc, #84]	; (8001224 <MX_TIM2_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011d2:	4814      	ldr	r0, [pc, #80]	; (8001224 <MX_TIM2_Init+0x98>)
 80011d4:	f001 fe5e 	bl	8002e94 <HAL_TIM_Base_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80011de:	f7ff fe4c 	bl	8000e7a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4619      	mov	r1, r3
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <MX_TIM2_Init+0x98>)
 80011f0:	f002 f828 	bl	8003244 <HAL_TIM_ConfigClockSource>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80011fa:	f7ff fe3e 	bl	8000e7a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011fe:	2320      	movs	r3, #32
 8001200:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4806      	ldr	r0, [pc, #24]	; (8001224 <MX_TIM2_Init+0x98>)
 800120c:	f002 fa5c 	bl	80036c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001216:	f7ff fe30 	bl	8000e7a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800121a:	bf00      	nop
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200003b0 	.word	0x200003b0

08001228 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001238:	d113      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	4a0b      	ldr	r2, [pc, #44]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	6413      	str	r3, [r2, #64]	; 0x40
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <HAL_TIM_Base_MspInit+0x44>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2101      	movs	r1, #1
 8001256:	201c      	movs	r0, #28
 8001258:	f000 fa9b 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800125c:	201c      	movs	r0, #28
 800125e:	f000 fab4 	bl	80017ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001274:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 8001276:	4a15      	ldr	r2, [pc, #84]	; (80012cc <MX_USART1_UART_Init+0x5c>)
 8001278:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 800127c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001280:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 8001296:	220c      	movs	r2, #12
 8001298:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129a:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a0:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012a6:	4b08      	ldr	r3, [pc, #32]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_USART1_UART_Init+0x58>)
 80012b4:	f002 fab4 	bl	8003820 <HAL_UART_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80012be:	f7ff fddc 	bl	8000e7a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	200003fc 	.word	0x200003fc
 80012cc:	40011000 	.word	0x40011000

080012d0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012d6:	4a15      	ldr	r2, [pc, #84]	; (800132c <MX_USART2_UART_Init+0x5c>)
 80012d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e8:	4b0f      	ldr	r3, [pc, #60]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012f6:	220c      	movs	r2, #12
 80012f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012fa:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <MX_USART2_UART_Init+0x58>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001300:	4b09      	ldr	r3, [pc, #36]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001302:	2200      	movs	r2, #0
 8001304:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001306:	4b08      	ldr	r3, [pc, #32]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001308:	2200      	movs	r2, #0
 800130a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800130c:	4b06      	ldr	r3, [pc, #24]	; (8001328 <MX_USART2_UART_Init+0x58>)
 800130e:	2200      	movs	r2, #0
 8001310:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8001312:	4805      	ldr	r0, [pc, #20]	; (8001328 <MX_USART2_UART_Init+0x58>)
 8001314:	f002 fad2 	bl	80038bc <HAL_HalfDuplex_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800131e:	f7ff fdac 	bl	8000e7a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001322:	bf00      	nop
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000484 	.word	0x20000484
 800132c:	40004400 	.word	0x40004400

08001330 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b0b0      	sub	sp, #192	; 0xc0
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	2290      	movs	r2, #144	; 0x90
 800134e:	2100      	movs	r1, #0
 8001350:	4618      	mov	r0, r3
 8001352:	f008 faa1 	bl	8009898 <memset>
  if(uartHandle->Instance==USART1)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a46      	ldr	r2, [pc, #280]	; (8001474 <HAL_UART_MspInit+0x144>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d144      	bne.n	80013ea <HAL_UART_MspInit+0xba>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001360:	2340      	movs	r3, #64	; 0x40
 8001362:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001364:	2300      	movs	r3, #0
 8001366:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4618      	mov	r0, r3
 800136e:	f001 f969 	bl	8002644 <HAL_RCCEx_PeriphCLKConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001378:	f7ff fd7f 	bl	8000e7a <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800137c:	4b3e      	ldr	r3, [pc, #248]	; (8001478 <HAL_UART_MspInit+0x148>)
 800137e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001380:	4a3d      	ldr	r2, [pc, #244]	; (8001478 <HAL_UART_MspInit+0x148>)
 8001382:	f043 0310 	orr.w	r3, r3, #16
 8001386:	6453      	str	r3, [r2, #68]	; 0x44
 8001388:	4b3b      	ldr	r3, [pc, #236]	; (8001478 <HAL_UART_MspInit+0x148>)
 800138a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138c:	f003 0310 	and.w	r3, r3, #16
 8001390:	61bb      	str	r3, [r7, #24]
 8001392:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_UART_MspInit+0x148>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a37      	ldr	r2, [pc, #220]	; (8001478 <HAL_UART_MspInit+0x148>)
 800139a:	f043 0302 	orr.w	r3, r3, #2
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_UART_MspInit+0x148>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0302 	and.w	r3, r3, #2
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80013ac:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80013b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b4:	2302      	movs	r3, #2
 80013b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80013c6:	2304      	movs	r3, #4
 80013c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013d0:	4619      	mov	r1, r3
 80013d2:	482a      	ldr	r0, [pc, #168]	; (800147c <HAL_UART_MspInit+0x14c>)
 80013d4:	f000 faa6 	bl	8001924 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80013d8:	2200      	movs	r2, #0
 80013da:	2105      	movs	r1, #5
 80013dc:	2025      	movs	r0, #37	; 0x25
 80013de:	f000 f9d8 	bl	8001792 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013e2:	2025      	movs	r0, #37	; 0x25
 80013e4:	f000 f9f1 	bl	80017ca <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80013e8:	e03f      	b.n	800146a <HAL_UART_MspInit+0x13a>
  else if(uartHandle->Instance==USART2)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <HAL_UART_MspInit+0x150>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d13a      	bne.n	800146a <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4618      	mov	r0, r3
 8001402:	f001 f91f 	bl	8002644 <HAL_RCCEx_PeriphCLKConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800140c:	f7ff fd35 	bl	8000e7a <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_UART_MspInit+0x148>)
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_UART_MspInit+0x148>)
 8001416:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800141a:	6413      	str	r3, [r2, #64]	; 0x40
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_UART_MspInit+0x148>)
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <HAL_UART_MspInit+0x148>)
 800142a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <HAL_UART_MspInit+0x148>)
 800142e:	f043 0301 	orr.w	r3, r3, #1
 8001432:	6313      	str	r3, [r2, #48]	; 0x30
 8001434:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_UART_MspInit+0x148>)
 8001436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001440:	2304      	movs	r3, #4
 8001442:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001446:	2312      	movs	r3, #18
 8001448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001452:	2303      	movs	r3, #3
 8001454:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001458:	2307      	movs	r3, #7
 800145a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <HAL_UART_MspInit+0x154>)
 8001466:	f000 fa5d 	bl	8001924 <HAL_GPIO_Init>
}
 800146a:	bf00      	nop
 800146c:	37c0      	adds	r7, #192	; 0xc0
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40011000 	.word	0x40011000
 8001478:	40023800 	.word	0x40023800
 800147c:	40020400 	.word	0x40020400
 8001480:	40004400 	.word	0x40004400
 8001484:	40020000 	.word	0x40020000

08001488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800148c:	f7ff fe6c 	bl	8001168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001492:	490d      	ldr	r1, [pc, #52]	; (80014c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001494:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001498:	e002      	b.n	80014a0 <LoopCopyDataInit>

0800149a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800149a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800149c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149e:	3304      	adds	r3, #4

080014a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a4:	d3f9      	bcc.n	800149a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a6:	4a0a      	ldr	r2, [pc, #40]	; (80014d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014a8:	4c0a      	ldr	r4, [pc, #40]	; (80014d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ac:	e001      	b.n	80014b2 <LoopFillZerobss>

080014ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014b0:	3204      	adds	r2, #4

080014b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b4:	d3fb      	bcc.n	80014ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014b6:	f008 f9b5 	bl	8009824 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014ba:	f7ff fafb 	bl	8000ab4 <main>
  bx  lr    
 80014be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80014c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80014c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80014cc:	080126dc 	.word	0x080126dc
  ldr r2, =_sbss
 80014d0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80014d4:	20000528 	.word	0x20000528

080014d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014d8:	e7fe      	b.n	80014d8 <ADC_IRQHandler>

080014da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 f94c 	bl	800177c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014e4:	200f      	movs	r0, #15
 80014e6:	f000 f805 	bl	80014f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ea:	f7ff fccb 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014fc:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_InitTick+0x54>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b12      	ldr	r3, [pc, #72]	; (800154c <HAL_InitTick+0x58>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f967 	bl	80017e6 <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e00e      	b.n	8001540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2b0f      	cmp	r3, #15
 8001526:	d80a      	bhi.n	800153e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001528:	2200      	movs	r2, #0
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	f04f 30ff 	mov.w	r0, #4294967295
 8001530:	f000 f92f 	bl	8001792 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001534:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_InitTick+0x5c>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	e000      	b.n	8001540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
}
 8001540:	4618      	mov	r0, r3
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000000 	.word	0x20000000
 800154c:	20000008 	.word	0x20000008
 8001550:	20000004 	.word	0x20000004

08001554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <HAL_IncTick+0x20>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	461a      	mov	r2, r3
 800155e:	4b06      	ldr	r3, [pc, #24]	; (8001578 <HAL_IncTick+0x24>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4413      	add	r3, r2
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_IncTick+0x24>)
 8001566:	6013      	str	r3, [r2, #0]
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000008 	.word	0x20000008
 8001578:	2000050c 	.word	0x2000050c

0800157c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  return uwTick;
 8001580:	4b03      	ldr	r3, [pc, #12]	; (8001590 <HAL_GetTick+0x14>)
 8001582:	681b      	ldr	r3, [r3, #0]
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2000050c 	.word	0x2000050c

08001594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800159c:	f7ff ffee 	bl	800157c <HAL_GetTick>
 80015a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ac:	d005      	beq.n	80015ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ae:	4b0a      	ldr	r3, [pc, #40]	; (80015d8 <HAL_Delay+0x44>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	4413      	add	r3, r2
 80015b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ba:	bf00      	nop
 80015bc:	f7ff ffde 	bl	800157c <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	68bb      	ldr	r3, [r7, #8]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	68fa      	ldr	r2, [r7, #12]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d8f7      	bhi.n	80015bc <HAL_Delay+0x28>
  {
  }
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20000008 	.word	0x20000008

080015dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015ec:	4b0b      	ldr	r3, [pc, #44]	; (800161c <__NVIC_SetPriorityGrouping+0x40>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015f8:	4013      	ands	r3, r2
 80015fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <__NVIC_SetPriorityGrouping+0x44>)
 8001606:	4313      	orrs	r3, r2
 8001608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800160a:	4a04      	ldr	r2, [pc, #16]	; (800161c <__NVIC_SetPriorityGrouping+0x40>)
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	60d3      	str	r3, [r2, #12]
}
 8001610:	bf00      	nop
 8001612:	3714      	adds	r7, #20
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	05fa0000 	.word	0x05fa0000

08001624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001628:	4b04      	ldr	r3, [pc, #16]	; (800163c <__NVIC_GetPriorityGrouping+0x18>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	0a1b      	lsrs	r3, r3, #8
 800162e:	f003 0307 	and.w	r3, r3, #7
}
 8001632:	4618      	mov	r0, r3
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	db0b      	blt.n	800166a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	f003 021f 	and.w	r2, r3, #31
 8001658:	4907      	ldr	r1, [pc, #28]	; (8001678 <__NVIC_EnableIRQ+0x38>)
 800165a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165e:	095b      	lsrs	r3, r3, #5
 8001660:	2001      	movs	r0, #1
 8001662:	fa00 f202 	lsl.w	r2, r0, r2
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	e000e100 	.word	0xe000e100

0800167c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168c:	2b00      	cmp	r3, #0
 800168e:	db0a      	blt.n	80016a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	b2da      	uxtb	r2, r3
 8001694:	490c      	ldr	r1, [pc, #48]	; (80016c8 <__NVIC_SetPriority+0x4c>)
 8001696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169a:	0112      	lsls	r2, r2, #4
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	440b      	add	r3, r1
 80016a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a4:	e00a      	b.n	80016bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4908      	ldr	r1, [pc, #32]	; (80016cc <__NVIC_SetPriority+0x50>)
 80016ac:	79fb      	ldrb	r3, [r7, #7]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	3b04      	subs	r3, #4
 80016b4:	0112      	lsls	r2, r2, #4
 80016b6:	b2d2      	uxtb	r2, r2
 80016b8:	440b      	add	r3, r1
 80016ba:	761a      	strb	r2, [r3, #24]
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000e100 	.word	0xe000e100
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b089      	sub	sp, #36	; 0x24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e4:	69fb      	ldr	r3, [r7, #28]
 80016e6:	f1c3 0307 	rsb	r3, r3, #7
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	bf28      	it	cs
 80016ee:	2304      	movcs	r3, #4
 80016f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	3304      	adds	r3, #4
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d902      	bls.n	8001700 <NVIC_EncodePriority+0x30>
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	3b03      	subs	r3, #3
 80016fe:	e000      	b.n	8001702 <NVIC_EncodePriority+0x32>
 8001700:	2300      	movs	r3, #0
 8001702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	401a      	ands	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001718:	f04f 31ff 	mov.w	r1, #4294967295
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	43d9      	mvns	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001728:	4313      	orrs	r3, r2
         );
}
 800172a:	4618      	mov	r0, r3
 800172c:	3724      	adds	r7, #36	; 0x24
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001748:	d301      	bcc.n	800174e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800174a:	2301      	movs	r3, #1
 800174c:	e00f      	b.n	800176e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174e:	4a0a      	ldr	r2, [pc, #40]	; (8001778 <SysTick_Config+0x40>)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3b01      	subs	r3, #1
 8001754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001756:	210f      	movs	r1, #15
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f7ff ff8e 	bl	800167c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001760:	4b05      	ldr	r3, [pc, #20]	; (8001778 <SysTick_Config+0x40>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001766:	4b04      	ldr	r3, [pc, #16]	; (8001778 <SysTick_Config+0x40>)
 8001768:	2207      	movs	r2, #7
 800176a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	e000e010 	.word	0xe000e010

0800177c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff ff29 	bl	80015dc <__NVIC_SetPriorityGrouping>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
 800179e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017a4:	f7ff ff3e 	bl	8001624 <__NVIC_GetPriorityGrouping>
 80017a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	68b9      	ldr	r1, [r7, #8]
 80017ae:	6978      	ldr	r0, [r7, #20]
 80017b0:	f7ff ff8e 	bl	80016d0 <NVIC_EncodePriority>
 80017b4:	4602      	mov	r2, r0
 80017b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017ba:	4611      	mov	r1, r2
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff ff5d 	bl	800167c <__NVIC_SetPriority>
}
 80017c2:	bf00      	nop
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b082      	sub	sp, #8
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff ff31 	bl	8001640 <__NVIC_EnableIRQ>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b082      	sub	sp, #8
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	f7ff ffa2 	bl	8001738 <SysTick_Config>
 80017f4:	4603      	mov	r3, r0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800180c:	f7ff feb6 	bl	800157c <HAL_GetTick>
 8001810:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d008      	beq.n	8001830 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2280      	movs	r2, #128	; 0x80
 8001822:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2200      	movs	r2, #0
 8001828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e052      	b.n	80018d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0216 	bic.w	r2, r2, #22
 800183e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800184e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	2b00      	cmp	r3, #0
 8001856:	d103      	bne.n	8001860 <HAL_DMA_Abort+0x62>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800185c:	2b00      	cmp	r3, #0
 800185e:	d007      	beq.n	8001870 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0208 	bic.w	r2, r2, #8
 800186e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001880:	e013      	b.n	80018aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001882:	f7ff fe7b 	bl	800157c <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b05      	cmp	r3, #5
 800188e:	d90c      	bls.n	80018aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2203      	movs	r2, #3
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2200      	movs	r2, #0
 80018a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e015      	b.n	80018d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0301 	and.w	r3, r3, #1
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1e4      	bne.n	8001882 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018bc:	223f      	movs	r2, #63	; 0x3f
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018de:	b480      	push	{r7}
 80018e0:	b083      	sub	sp, #12
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d004      	beq.n	80018fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e00c      	b.n	8001916 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2205      	movs	r2, #5
 8001900:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0201 	bic.w	r2, r2, #1
 8001912:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001932:	2300      	movs	r3, #0
 8001934:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800193a:	2300      	movs	r3, #0
 800193c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800193e:	2300      	movs	r3, #0
 8001940:	61fb      	str	r3, [r7, #28]
 8001942:	e175      	b.n	8001c30 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001944:	2201      	movs	r2, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	4013      	ands	r3, r2
 8001956:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	429a      	cmp	r2, r3
 800195e:	f040 8164 	bne.w	8001c2a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
 800196a:	2b01      	cmp	r3, #1
 800196c:	d005      	beq.n	800197a <HAL_GPIO_Init+0x56>
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d130      	bne.n	80019dc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	2203      	movs	r2, #3
 8001986:	fa02 f303 	lsl.w	r3, r2, r3
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019b0:	2201      	movs	r2, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	091b      	lsrs	r3, r3, #4
 80019c6:	f003 0201 	and.w	r2, r3, #1
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d017      	beq.n	8001a18 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69ba      	ldr	r2, [r7, #24]
 8001a16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d123      	bne.n	8001a6c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	08da      	lsrs	r2, r3, #3
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	3208      	adds	r2, #8
 8001a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	f003 0307 	and.w	r3, r3, #7
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4013      	ands	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	691a      	ldr	r2, [r3, #16]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f003 0307 	and.w	r3, r3, #7
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	08da      	lsrs	r2, r3, #3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	3208      	adds	r2, #8
 8001a66:	69b9      	ldr	r1, [r7, #24]
 8001a68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2203      	movs	r2, #3
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f003 0203 	and.w	r2, r3, #3
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	f000 80be 	beq.w	8001c2a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	4b66      	ldr	r3, [pc, #408]	; (8001c48 <HAL_GPIO_Init+0x324>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a65      	ldr	r2, [pc, #404]	; (8001c48 <HAL_GPIO_Init+0x324>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b63      	ldr	r3, [pc, #396]	; (8001c48 <HAL_GPIO_Init+0x324>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ac6:	4a61      	ldr	r2, [pc, #388]	; (8001c4c <HAL_GPIO_Init+0x328>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	220f      	movs	r2, #15
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43db      	mvns	r3, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a58      	ldr	r2, [pc, #352]	; (8001c50 <HAL_GPIO_Init+0x32c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d037      	beq.n	8001b62 <HAL_GPIO_Init+0x23e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a57      	ldr	r2, [pc, #348]	; (8001c54 <HAL_GPIO_Init+0x330>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d031      	beq.n	8001b5e <HAL_GPIO_Init+0x23a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a56      	ldr	r2, [pc, #344]	; (8001c58 <HAL_GPIO_Init+0x334>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02b      	beq.n	8001b5a <HAL_GPIO_Init+0x236>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a55      	ldr	r2, [pc, #340]	; (8001c5c <HAL_GPIO_Init+0x338>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d025      	beq.n	8001b56 <HAL_GPIO_Init+0x232>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a54      	ldr	r2, [pc, #336]	; (8001c60 <HAL_GPIO_Init+0x33c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01f      	beq.n	8001b52 <HAL_GPIO_Init+0x22e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a53      	ldr	r2, [pc, #332]	; (8001c64 <HAL_GPIO_Init+0x340>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0x22a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a52      	ldr	r2, [pc, #328]	; (8001c68 <HAL_GPIO_Init+0x344>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d013      	beq.n	8001b4a <HAL_GPIO_Init+0x226>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a51      	ldr	r2, [pc, #324]	; (8001c6c <HAL_GPIO_Init+0x348>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00d      	beq.n	8001b46 <HAL_GPIO_Init+0x222>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a50      	ldr	r2, [pc, #320]	; (8001c70 <HAL_GPIO_Init+0x34c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d007      	beq.n	8001b42 <HAL_GPIO_Init+0x21e>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a4f      	ldr	r2, [pc, #316]	; (8001c74 <HAL_GPIO_Init+0x350>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d101      	bne.n	8001b3e <HAL_GPIO_Init+0x21a>
 8001b3a:	2309      	movs	r3, #9
 8001b3c:	e012      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b3e:	230a      	movs	r3, #10
 8001b40:	e010      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b42:	2308      	movs	r3, #8
 8001b44:	e00e      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b46:	2307      	movs	r3, #7
 8001b48:	e00c      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b4a:	2306      	movs	r3, #6
 8001b4c:	e00a      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b4e:	2305      	movs	r3, #5
 8001b50:	e008      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b52:	2304      	movs	r3, #4
 8001b54:	e006      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b56:	2303      	movs	r3, #3
 8001b58:	e004      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e002      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <HAL_GPIO_Init+0x240>
 8001b62:	2300      	movs	r3, #0
 8001b64:	69fa      	ldr	r2, [r7, #28]
 8001b66:	f002 0203 	and.w	r2, r2, #3
 8001b6a:	0092      	lsls	r2, r2, #2
 8001b6c:	4093      	lsls	r3, r2
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b74:	4935      	ldr	r1, [pc, #212]	; (8001c4c <HAL_GPIO_Init+0x328>)
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	089b      	lsrs	r3, r3, #2
 8001b7a:	3302      	adds	r3, #2
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b82:	4b3d      	ldr	r3, [pc, #244]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ba6:	4a34      	ldr	r2, [pc, #208]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bd0:	4a29      	ldr	r2, [pc, #164]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bd6:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4013      	ands	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bfa:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c00:	4b1d      	ldr	r3, [pc, #116]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c24:	4a14      	ldr	r2, [pc, #80]	; (8001c78 <HAL_GPIO_Init+0x354>)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	2b0f      	cmp	r3, #15
 8001c34:	f67f ae86 	bls.w	8001944 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40013800 	.word	0x40013800
 8001c50:	40020000 	.word	0x40020000
 8001c54:	40020400 	.word	0x40020400
 8001c58:	40020800 	.word	0x40020800
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40021000 	.word	0x40021000
 8001c64:	40021400 	.word	0x40021400
 8001c68:	40021800 	.word	0x40021800
 8001c6c:	40021c00 	.word	0x40021c00
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40022400 	.word	0x40022400
 8001c78:	40013c00 	.word	0x40013c00

08001c7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001c82:	2300      	movs	r3, #0
 8001c84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001c86:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a22      	ldr	r2, [pc, #136]	; (8001d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <HAL_PWREx_EnableOverDrive+0x98>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001c9e:	4b1e      	ldr	r3, [pc, #120]	; (8001d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1d      	ldr	r2, [pc, #116]	; (8001d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001caa:	f7ff fc67 	bl	800157c <HAL_GetTick>
 8001cae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cb0:	e009      	b.n	8001cc6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001cb2:	f7ff fc63 	bl	800157c <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cc0:	d901      	bls.n	8001cc6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e022      	b.n	8001d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd2:	d1ee      	bne.n	8001cb2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001cd4:	4b10      	ldr	r3, [pc, #64]	; (8001d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a0f      	ldr	r2, [pc, #60]	; (8001d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cde:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce0:	f7ff fc4c 	bl	800157c <HAL_GetTick>
 8001ce4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ce6:	e009      	b.n	8001cfc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ce8:	f7ff fc48 	bl	800157c <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001cf6:	d901      	bls.n	8001cfc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e007      	b.n	8001d0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001cfc:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d08:	d1ee      	bne.n	8001ce8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	40007000 	.word	0x40007000

08001d1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e29b      	b.n	800226a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8087 	beq.w	8001e4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d40:	4b96      	ldr	r3, [pc, #600]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 030c 	and.w	r3, r3, #12
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	d00c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4c:	4b93      	ldr	r3, [pc, #588]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 030c 	and.w	r3, r3, #12
 8001d54:	2b08      	cmp	r3, #8
 8001d56:	d112      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62>
 8001d58:	4b90      	ldr	r3, [pc, #576]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d64:	d10b      	bne.n	8001d7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d66:	4b8d      	ldr	r3, [pc, #564]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d06c      	beq.n	8001e4c <HAL_RCC_OscConfig+0x130>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d168      	bne.n	8001e4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e275      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d86:	d106      	bne.n	8001d96 <HAL_RCC_OscConfig+0x7a>
 8001d88:	4b84      	ldr	r3, [pc, #528]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a83      	ldr	r2, [pc, #524]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	e02e      	b.n	8001df4 <HAL_RCC_OscConfig+0xd8>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10c      	bne.n	8001db8 <HAL_RCC_OscConfig+0x9c>
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a7e      	ldr	r2, [pc, #504]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	6013      	str	r3, [r2, #0]
 8001daa:	4b7c      	ldr	r3, [pc, #496]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a7b      	ldr	r2, [pc, #492]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001db0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001db4:	6013      	str	r3, [r2, #0]
 8001db6:	e01d      	b.n	8001df4 <HAL_RCC_OscConfig+0xd8>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dc0:	d10c      	bne.n	8001ddc <HAL_RCC_OscConfig+0xc0>
 8001dc2:	4b76      	ldr	r3, [pc, #472]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a75      	ldr	r2, [pc, #468]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001dc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b73      	ldr	r3, [pc, #460]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a72      	ldr	r2, [pc, #456]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e00b      	b.n	8001df4 <HAL_RCC_OscConfig+0xd8>
 8001ddc:	4b6f      	ldr	r3, [pc, #444]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a6e      	ldr	r2, [pc, #440]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001de6:	6013      	str	r3, [r2, #0]
 8001de8:	4b6c      	ldr	r3, [pc, #432]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a6b      	ldr	r2, [pc, #428]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001dee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001df2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d013      	beq.n	8001e24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfc:	f7ff fbbe 	bl	800157c <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e04:	f7ff fbba 	bl	800157c <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b64      	cmp	r3, #100	; 0x64
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e229      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e16:	4b61      	ldr	r3, [pc, #388]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0xe8>
 8001e22:	e014      	b.n	8001e4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7ff fbaa 	bl	800157c <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e2c:	f7ff fba6 	bl	800157c <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b64      	cmp	r3, #100	; 0x64
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e215      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3e:	4b57      	ldr	r3, [pc, #348]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x110>
 8001e4a:	e000      	b.n	8001e4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d069      	beq.n	8001f2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e5a:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	f003 030c 	and.w	r3, r3, #12
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00b      	beq.n	8001e7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e66:	4b4d      	ldr	r3, [pc, #308]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d11c      	bne.n	8001eac <HAL_RCC_OscConfig+0x190>
 8001e72:	4b4a      	ldr	r3, [pc, #296]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d116      	bne.n	8001eac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e7e:	4b47      	ldr	r3, [pc, #284]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d005      	beq.n	8001e96 <HAL_RCC_OscConfig+0x17a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d001      	beq.n	8001e96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e1e9      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e96:	4b41      	ldr	r3, [pc, #260]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	493d      	ldr	r1, [pc, #244]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	e040      	b.n	8001f2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d023      	beq.n	8001efc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eb4:	4b39      	ldr	r3, [pc, #228]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001eba:	f043 0301 	orr.w	r3, r3, #1
 8001ebe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fb5c 	bl	800157c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec8:	f7ff fb58 	bl	800157c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1c7      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eda:	4b30      	ldr	r3, [pc, #192]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee6:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4929      	ldr	r1, [pc, #164]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]
 8001efa:	e018      	b.n	8001f2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001efc:	4b27      	ldr	r3, [pc, #156]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001f02:	f023 0301 	bic.w	r3, r3, #1
 8001f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f08:	f7ff fb38 	bl	800157c <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f10:	f7ff fb34 	bl	800157c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e1a3      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f22:	4b1e      	ldr	r3, [pc, #120]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0308 	and.w	r3, r3, #8
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d038      	beq.n	8001fac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d019      	beq.n	8001f76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f42:	4b16      	ldr	r3, [pc, #88]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001f44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f46:	4a15      	ldr	r2, [pc, #84]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4e:	f7ff fb15 	bl	800157c <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff fb11 	bl	800157c <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e180      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x23a>
 8001f74:	e01a      	b.n	8001fac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f76:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f7a:	4a08      	ldr	r2, [pc, #32]	; (8001f9c <HAL_RCC_OscConfig+0x280>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f82:	f7ff fafb 	bl	800157c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8a:	f7ff faf7 	bl	800157c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d903      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e166      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
 8001f9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa0:	4b92      	ldr	r3, [pc, #584]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8001fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	f000 80a4 	beq.w	8002102 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fba:	4b8c      	ldr	r3, [pc, #560]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10d      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	4b89      	ldr	r3, [pc, #548]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	4a88      	ldr	r2, [pc, #544]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8001fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd2:	4b86      	ldr	r3, [pc, #536]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe2:	4b83      	ldr	r3, [pc, #524]	; (80021f0 <HAL_RCC_OscConfig+0x4d4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d118      	bne.n	8002020 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001fee:	4b80      	ldr	r3, [pc, #512]	; (80021f0 <HAL_RCC_OscConfig+0x4d4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a7f      	ldr	r2, [pc, #508]	; (80021f0 <HAL_RCC_OscConfig+0x4d4>)
 8001ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ff8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ffa:	f7ff fabf 	bl	800157c <HAL_GetTick>
 8001ffe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002002:	f7ff fabb 	bl	800157c <HAL_GetTick>
 8002006:	4602      	mov	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b64      	cmp	r3, #100	; 0x64
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e12a      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002014:	4b76      	ldr	r3, [pc, #472]	; (80021f0 <HAL_RCC_OscConfig+0x4d4>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201c:	2b00      	cmp	r3, #0
 800201e:	d0f0      	beq.n	8002002 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x31a>
 8002028:	4b70      	ldr	r3, [pc, #448]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a6f      	ldr	r2, [pc, #444]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 800202e:	f043 0301 	orr.w	r3, r3, #1
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
 8002034:	e02d      	b.n	8002092 <HAL_RCC_OscConfig+0x376>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x33c>
 800203e:	4b6b      	ldr	r3, [pc, #428]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002042:	4a6a      	ldr	r2, [pc, #424]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002044:	f023 0301 	bic.w	r3, r3, #1
 8002048:	6713      	str	r3, [r2, #112]	; 0x70
 800204a:	4b68      	ldr	r3, [pc, #416]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 800204c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204e:	4a67      	ldr	r2, [pc, #412]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002050:	f023 0304 	bic.w	r3, r3, #4
 8002054:	6713      	str	r3, [r2, #112]	; 0x70
 8002056:	e01c      	b.n	8002092 <HAL_RCC_OscConfig+0x376>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	2b05      	cmp	r3, #5
 800205e:	d10c      	bne.n	800207a <HAL_RCC_OscConfig+0x35e>
 8002060:	4b62      	ldr	r3, [pc, #392]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002064:	4a61      	ldr	r2, [pc, #388]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002066:	f043 0304 	orr.w	r3, r3, #4
 800206a:	6713      	str	r3, [r2, #112]	; 0x70
 800206c:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 800206e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002070:	4a5e      	ldr	r2, [pc, #376]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002072:	f043 0301 	orr.w	r3, r3, #1
 8002076:	6713      	str	r3, [r2, #112]	; 0x70
 8002078:	e00b      	b.n	8002092 <HAL_RCC_OscConfig+0x376>
 800207a:	4b5c      	ldr	r3, [pc, #368]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800207e:	4a5b      	ldr	r2, [pc, #364]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002080:	f023 0301 	bic.w	r3, r3, #1
 8002084:	6713      	str	r3, [r2, #112]	; 0x70
 8002086:	4b59      	ldr	r3, [pc, #356]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	4a58      	ldr	r2, [pc, #352]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d015      	beq.n	80020c6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209a:	f7ff fa6f 	bl	800157c <HAL_GetTick>
 800209e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a0:	e00a      	b.n	80020b8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7ff fa6b 	bl	800157c <HAL_GetTick>
 80020a6:	4602      	mov	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e0d8      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d0ee      	beq.n	80020a2 <HAL_RCC_OscConfig+0x386>
 80020c4:	e014      	b.n	80020f0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020c6:	f7ff fa59 	bl	800157c <HAL_GetTick>
 80020ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020cc:	e00a      	b.n	80020e4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ce:	f7ff fa55 	bl	800157c <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020dc:	4293      	cmp	r3, r2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e0c2      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e4:	4b41      	ldr	r3, [pc, #260]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ee      	bne.n	80020ce <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d105      	bne.n	8002102 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	4a3c      	ldr	r2, [pc, #240]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 80020fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002100:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80ae 	beq.w	8002268 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800210c:	4b37      	ldr	r3, [pc, #220]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b08      	cmp	r3, #8
 8002116:	d06d      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d14b      	bne.n	80021b8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002120:	4b32      	ldr	r3, [pc, #200]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a31      	ldr	r2, [pc, #196]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002126:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800212a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800212c:	f7ff fa26 	bl	800157c <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7ff fa22 	bl	800157c <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e091      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69da      	ldr	r2, [r3, #28]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002160:	019b      	lsls	r3, r3, #6
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002168:	085b      	lsrs	r3, r3, #1
 800216a:	3b01      	subs	r3, #1
 800216c:	041b      	lsls	r3, r3, #16
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800217c:	071b      	lsls	r3, r3, #28
 800217e:	491b      	ldr	r1, [pc, #108]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002180:	4313      	orrs	r3, r2
 8002182:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002184:	4b19      	ldr	r3, [pc, #100]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a18      	ldr	r2, [pc, #96]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff f9f4 	bl	800157c <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7ff f9f0 	bl	800157c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e05f      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x47c>
 80021b6:	e057      	b.n	8002268 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a0b      	ldr	r2, [pc, #44]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 80021be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff f9da 	bl	800157c <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7ff f9d6 	bl	800157c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e045      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	4b03      	ldr	r3, [pc, #12]	; (80021ec <HAL_RCC_OscConfig+0x4d0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x4b0>
 80021ea:	e03d      	b.n	8002268 <HAL_RCC_OscConfig+0x54c>
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80021f4:	4b1f      	ldr	r3, [pc, #124]	; (8002274 <HAL_RCC_OscConfig+0x558>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	699b      	ldr	r3, [r3, #24]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d030      	beq.n	8002264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d129      	bne.n	8002264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d122      	bne.n	8002264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002224:	4013      	ands	r3, r2
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800222a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800222c:	4293      	cmp	r3, r2
 800222e:	d119      	bne.n	8002264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800223a:	085b      	lsrs	r3, r3, #1
 800223c:	3b01      	subs	r3, #1
 800223e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d10f      	bne.n	8002264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002250:	429a      	cmp	r2, r3
 8002252:	d107      	bne.n	8002264 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023800 	.word	0x40023800

08002278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0d0      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 030f 	and.w	r3, r3, #15
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d910      	bls.n	80022c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b67      	ldr	r3, [pc, #412]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 020f 	bic.w	r2, r3, #15
 80022a6:	4965      	ldr	r1, [pc, #404]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e0b8      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d020      	beq.n	800230e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d005      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022d8:	4b59      	ldr	r3, [pc, #356]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	4a58      	ldr	r2, [pc, #352]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 80022de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d005      	beq.n	80022fc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022f0:	4b53      	ldr	r3, [pc, #332]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4a52      	ldr	r2, [pc, #328]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 80022f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022fc:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	494d      	ldr	r1, [pc, #308]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 800230a:	4313      	orrs	r3, r2
 800230c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0301 	and.w	r3, r3, #1
 8002316:	2b00      	cmp	r3, #0
 8002318:	d040      	beq.n	800239c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d115      	bne.n	800235a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e07f      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	2b02      	cmp	r3, #2
 8002338:	d107      	bne.n	800234a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d109      	bne.n	800235a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e073      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234a:	4b3d      	ldr	r3, [pc, #244]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e06b      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800235a:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f023 0203 	bic.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	4936      	ldr	r1, [pc, #216]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 8002368:	4313      	orrs	r3, r2
 800236a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800236c:	f7ff f906 	bl	800157c <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	e00a      	b.n	800238a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7ff f902 	bl	800157c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002382:	4293      	cmp	r3, r2
 8002384:	d901      	bls.n	800238a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	e053      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 020c 	and.w	r2, r3, #12
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	429a      	cmp	r2, r3
 800239a:	d1eb      	bne.n	8002374 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 030f 	and.w	r3, r3, #15
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	d210      	bcs.n	80023cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023aa:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f023 020f 	bic.w	r2, r3, #15
 80023b2:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ba:	4b20      	ldr	r3, [pc, #128]	; (800243c <HAL_RCC_ClockConfig+0x1c4>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d001      	beq.n	80023cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e032      	b.n	8002432 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0304 	and.w	r3, r3, #4
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d008      	beq.n	80023ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d8:	4b19      	ldr	r3, [pc, #100]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	4916      	ldr	r1, [pc, #88]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023f6:	4b12      	ldr	r3, [pc, #72]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	490e      	ldr	r1, [pc, #56]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800240a:	f000 f821 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800240e:	4602      	mov	r2, r0
 8002410:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <HAL_RCC_ClockConfig+0x1c8>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 030f 	and.w	r3, r3, #15
 800241a:	490a      	ldr	r1, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x1cc>)
 800241c:	5ccb      	ldrb	r3, [r1, r3]
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a09      	ldr	r2, [pc, #36]	; (8002448 <HAL_RCC_ClockConfig+0x1d0>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_ClockConfig+0x1d4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff f862 	bl	80014f4 <HAL_InitTick>

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	40023c00 	.word	0x40023c00
 8002440:	40023800 	.word	0x40023800
 8002444:	08011044 	.word	0x08011044
 8002448:	20000000 	.word	0x20000000
 800244c:	20000004 	.word	0x20000004

08002450 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002450:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002454:	b090      	sub	sp, #64	; 0x40
 8002456:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	637b      	str	r3, [r7, #52]	; 0x34
 800245c:	2300      	movs	r3, #0
 800245e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002460:	2300      	movs	r3, #0
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002464:	2300      	movs	r3, #0
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002468:	4b59      	ldr	r3, [pc, #356]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f003 030c 	and.w	r3, r3, #12
 8002470:	2b08      	cmp	r3, #8
 8002472:	d00d      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x40>
 8002474:	2b08      	cmp	r3, #8
 8002476:	f200 80a1 	bhi.w	80025bc <HAL_RCC_GetSysClockFreq+0x16c>
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_RCC_GetSysClockFreq+0x34>
 800247e:	2b04      	cmp	r3, #4
 8002480:	d003      	beq.n	800248a <HAL_RCC_GetSysClockFreq+0x3a>
 8002482:	e09b      	b.n	80025bc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002484:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002488:	e09b      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800248a:	4b53      	ldr	r3, [pc, #332]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x188>)
 800248c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800248e:	e098      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002490:	4b4f      	ldr	r3, [pc, #316]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x180>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800249a:	4b4d      	ldr	r3, [pc, #308]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x180>)
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d028      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024a6:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	099b      	lsrs	r3, r3, #6
 80024ac:	2200      	movs	r2, #0
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	627a      	str	r2, [r7, #36]	; 0x24
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80024b8:	2100      	movs	r1, #0
 80024ba:	4b47      	ldr	r3, [pc, #284]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024bc:	fb03 f201 	mul.w	r2, r3, r1
 80024c0:	2300      	movs	r3, #0
 80024c2:	fb00 f303 	mul.w	r3, r0, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	4a43      	ldr	r2, [pc, #268]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x188>)
 80024ca:	fba0 1202 	umull	r1, r2, r0, r2
 80024ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024d0:	460a      	mov	r2, r1
 80024d2:	62ba      	str	r2, [r7, #40]	; 0x28
 80024d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024d6:	4413      	add	r3, r2
 80024d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024dc:	2200      	movs	r2, #0
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	61fa      	str	r2, [r7, #28]
 80024e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024e6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024ea:	f7fe f8bd 	bl	8000668 <__aeabi_uldivmod>
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4613      	mov	r3, r2
 80024f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024f6:	e053      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024f8:	4b35      	ldr	r3, [pc, #212]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	099b      	lsrs	r3, r3, #6
 80024fe:	2200      	movs	r2, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	617a      	str	r2, [r7, #20]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800250a:	f04f 0b00 	mov.w	fp, #0
 800250e:	4652      	mov	r2, sl
 8002510:	465b      	mov	r3, fp
 8002512:	f04f 0000 	mov.w	r0, #0
 8002516:	f04f 0100 	mov.w	r1, #0
 800251a:	0159      	lsls	r1, r3, #5
 800251c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002520:	0150      	lsls	r0, r2, #5
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	ebb2 080a 	subs.w	r8, r2, sl
 800252a:	eb63 090b 	sbc.w	r9, r3, fp
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800253a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800253e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002542:	ebb2 0408 	subs.w	r4, r2, r8
 8002546:	eb63 0509 	sbc.w	r5, r3, r9
 800254a:	f04f 0200 	mov.w	r2, #0
 800254e:	f04f 0300 	mov.w	r3, #0
 8002552:	00eb      	lsls	r3, r5, #3
 8002554:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002558:	00e2      	lsls	r2, r4, #3
 800255a:	4614      	mov	r4, r2
 800255c:	461d      	mov	r5, r3
 800255e:	eb14 030a 	adds.w	r3, r4, sl
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	eb45 030b 	adc.w	r3, r5, fp
 8002568:	607b      	str	r3, [r7, #4]
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	f04f 0300 	mov.w	r3, #0
 8002572:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002576:	4629      	mov	r1, r5
 8002578:	028b      	lsls	r3, r1, #10
 800257a:	4621      	mov	r1, r4
 800257c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002580:	4621      	mov	r1, r4
 8002582:	028a      	lsls	r2, r1, #10
 8002584:	4610      	mov	r0, r2
 8002586:	4619      	mov	r1, r3
 8002588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258a:	2200      	movs	r2, #0
 800258c:	60bb      	str	r3, [r7, #8]
 800258e:	60fa      	str	r2, [r7, #12]
 8002590:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002594:	f7fe f868 	bl	8000668 <__aeabi_uldivmod>
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4613      	mov	r3, r2
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80025a0:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x180>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	3301      	adds	r3, #1
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80025b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80025b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025ba:	e002      	b.n	80025c2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025bc:	4b05      	ldr	r3, [pc, #20]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x184>)
 80025be:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80025c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3740      	adds	r7, #64	; 0x40
 80025c8:	46bd      	mov	sp, r7
 80025ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	00f42400 	.word	0x00f42400
 80025d8:	017d7840 	.word	0x017d7840

080025dc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025f8:	f7ff fff0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b05      	ldr	r3, [pc, #20]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a9b      	lsrs	r3, r3, #10
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002610:	4618      	mov	r0, r3
 8002612:	bd80      	pop	{r7, pc}
 8002614:	40023800 	.word	0x40023800
 8002618:	08011054 	.word	0x08011054

0800261c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002620:	f7ff ffdc 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002624:	4602      	mov	r2, r0
 8002626:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	0b5b      	lsrs	r3, r3, #13
 800262c:	f003 0307 	and.w	r3, r3, #7
 8002630:	4903      	ldr	r1, [pc, #12]	; (8002640 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002632:	5ccb      	ldrb	r3, [r1, r3]
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002638:	4618      	mov	r0, r3
 800263a:	bd80      	pop	{r7, pc}
 800263c:	40023800 	.word	0x40023800
 8002640:	08011054 	.word	0x08011054

08002644 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002650:	2300      	movs	r3, #0
 8002652:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	2b00      	cmp	r3, #0
 800266a:	d012      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800266c:	4b69      	ldr	r3, [pc, #420]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	4a68      	ldr	r2, [pc, #416]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002672:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002676:	6093      	str	r3, [r2, #8]
 8002678:	4b66      	ldr	r3, [pc, #408]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800267a:	689a      	ldr	r2, [r3, #8]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002680:	4964      	ldr	r1, [pc, #400]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002682:	4313      	orrs	r3, r2
 8002684:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800268e:	2301      	movs	r3, #1
 8002690:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d017      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800269e:	4b5d      	ldr	r3, [pc, #372]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ac:	4959      	ldr	r1, [pc, #356]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026bc:	d101      	bne.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80026be:	2301      	movs	r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80026ca:	2301      	movs	r3, #1
 80026cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d017      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026da:	4b4e      	ldr	r3, [pc, #312]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	494a      	ldr	r1, [pc, #296]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f8:	d101      	bne.n	80026fe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80026fa:	2301      	movs	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002706:	2301      	movs	r3, #1
 8002708:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002716:	2301      	movs	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 808b 	beq.w	800283e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002728:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272c:	4a39      	ldr	r2, [pc, #228]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800272e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002732:	6413      	str	r3, [r2, #64]	; 0x40
 8002734:	4b37      	ldr	r3, [pc, #220]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002740:	4b35      	ldr	r3, [pc, #212]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a34      	ldr	r2, [pc, #208]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800274a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800274c:	f7fe ff16 	bl	800157c <HAL_GetTick>
 8002750:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe ff12 	bl	800157c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e38f      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002766:	4b2c      	ldr	r3, [pc, #176]	; (8002818 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002772:	4b28      	ldr	r3, [pc, #160]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800277a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d035      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002786:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	429a      	cmp	r2, r3
 800278e:	d02e      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002790:	4b20      	ldr	r3, [pc, #128]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002798:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800279a:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800279c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279e:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027a6:	4b1b      	ldr	r3, [pc, #108]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a1a      	ldr	r2, [pc, #104]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80027b2:	4a18      	ldr	r2, [pc, #96]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80027b8:	4b16      	ldr	r3, [pc, #88]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d114      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c4:	f7fe feda 	bl	800157c <HAL_GetTick>
 80027c8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ca:	e00a      	b.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027cc:	f7fe fed6 	bl	800157c <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027da:	4293      	cmp	r3, r2
 80027dc:	d901      	bls.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	e351      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0ee      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027fa:	d111      	bne.n	8002820 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80027fc:	4b05      	ldr	r3, [pc, #20]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002808:	4b04      	ldr	r3, [pc, #16]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800280a:	400b      	ands	r3, r1
 800280c:	4901      	ldr	r1, [pc, #4]	; (8002814 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
 8002812:	e00b      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002814:	40023800 	.word	0x40023800
 8002818:	40007000 	.word	0x40007000
 800281c:	0ffffcff 	.word	0x0ffffcff
 8002820:	4bac      	ldr	r3, [pc, #688]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4aab      	ldr	r2, [pc, #684]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002826:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800282a:	6093      	str	r3, [r2, #8]
 800282c:	4ba9      	ldr	r3, [pc, #676]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800282e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002834:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002838:	49a6      	ldr	r1, [pc, #664]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800283a:	4313      	orrs	r3, r2
 800283c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0310 	and.w	r3, r3, #16
 8002846:	2b00      	cmp	r3, #0
 8002848:	d010      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800284a:	4ba2      	ldr	r3, [pc, #648]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800284c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002850:	4aa0      	ldr	r2, [pc, #640]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002856:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800285a:	4b9e      	ldr	r3, [pc, #632]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800285c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002864:	499b      	ldr	r1, [pc, #620]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00a      	beq.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002878:	4b96      	ldr	r3, [pc, #600]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002886:	4993      	ldr	r1, [pc, #588]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800289a:	4b8e      	ldr	r3, [pc, #568]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800289c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028a8:	498a      	ldr	r1, [pc, #552]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028bc:	4b85      	ldr	r3, [pc, #532]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ca:	4982      	ldr	r1, [pc, #520]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00a      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028de:	4b7d      	ldr	r3, [pc, #500]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ec:	4979      	ldr	r1, [pc, #484]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002900:	4b74      	ldr	r3, [pc, #464]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290e:	4971      	ldr	r1, [pc, #452]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00a      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002922:	4b6c      	ldr	r3, [pc, #432]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002928:	f023 020c 	bic.w	r2, r3, #12
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002930:	4968      	ldr	r1, [pc, #416]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002932:	4313      	orrs	r3, r2
 8002934:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d00a      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002944:	4b63      	ldr	r3, [pc, #396]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002952:	4960      	ldr	r1, [pc, #384]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002954:	4313      	orrs	r3, r2
 8002956:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002966:	4b5b      	ldr	r3, [pc, #364]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002974:	4957      	ldr	r1, [pc, #348]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002988:	4b52      	ldr	r3, [pc, #328]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002996:	494f      	ldr	r1, [pc, #316]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80029aa:	4b4a      	ldr	r3, [pc, #296]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b8:	4946      	ldr	r1, [pc, #280]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80029cc:	4b41      	ldr	r3, [pc, #260]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	493e      	ldr	r1, [pc, #248]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80029ee:	4b39      	ldr	r3, [pc, #228]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029fc:	4935      	ldr	r1, [pc, #212]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a10:	4b30      	ldr	r3, [pc, #192]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a1e:	492d      	ldr	r1, [pc, #180]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d011      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002a32:	4b28      	ldr	r3, [pc, #160]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a40:	4924      	ldr	r1, [pc, #144]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002a4c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a50:	d101      	bne.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002a52:	2301      	movs	r3, #1
 8002a54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002a62:	2301      	movs	r3, #1
 8002a64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a72:	4b18      	ldr	r3, [pc, #96]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a78:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	4914      	ldr	r1, [pc, #80]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00b      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a94:	4b0f      	ldr	r3, [pc, #60]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002aa4:	490b      	ldr	r1, [pc, #44]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00f      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ac8:	4902      	ldr	r1, [pc, #8]	; (8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ad0:	e002      	b.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ad2:	bf00      	nop
 8002ad4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002ae4:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af4:	4986      	ldr	r1, [pc, #536]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d00b      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002b08:	4b81      	ldr	r3, [pc, #516]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b0e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b18:	497d      	ldr	r1, [pc, #500]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d006      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80d6 	beq.w	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b34:	4b76      	ldr	r3, [pc, #472]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a75      	ldr	r2, [pc, #468]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b40:	f7fe fd1c 	bl	800157c <HAL_GetTick>
 8002b44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b46:	e008      	b.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002b48:	f7fe fd18 	bl	800157c <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	; 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e195      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b5a:	4b6d      	ldr	r3, [pc, #436]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d021      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11d      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002b7a:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b80:	0c1b      	lsrs	r3, r3, #16
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002b88:	4b61      	ldr	r3, [pc, #388]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b8e:	0e1b      	lsrs	r3, r3, #24
 8002b90:	f003 030f 	and.w	r3, r3, #15
 8002b94:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	019a      	lsls	r2, r3, #6
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	041b      	lsls	r3, r3, #16
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	061b      	lsls	r3, r3, #24
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	071b      	lsls	r3, r3, #28
 8002bae:	4958      	ldr	r1, [pc, #352]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d004      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bca:	d00a      	beq.n	8002be2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d02e      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002be0:	d129      	bne.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002be2:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002bf0:	4b47      	ldr	r3, [pc, #284]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002bf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bf6:	0f1b      	lsrs	r3, r3, #28
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	019a      	lsls	r2, r3, #6
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	041b      	lsls	r3, r3, #16
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	431a      	orrs	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	071b      	lsls	r3, r3, #28
 8002c16:	493e      	ldr	r1, [pc, #248]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c1e:	4b3c      	ldr	r3, [pc, #240]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c24:	f023 021f 	bic.w	r2, r3, #31
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	4938      	ldr	r1, [pc, #224]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d01d      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c42:	4b33      	ldr	r3, [pc, #204]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c48:	0e1b      	lsrs	r3, r3, #24
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c50:	4b2f      	ldr	r3, [pc, #188]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c56:	0f1b      	lsrs	r3, r3, #28
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	019a      	lsls	r2, r3, #6
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	041b      	lsls	r3, r3, #16
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	061b      	lsls	r3, r3, #24
 8002c70:	431a      	orrs	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	071b      	lsls	r3, r3, #28
 8002c76:	4926      	ldr	r1, [pc, #152]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d011      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	019a      	lsls	r2, r3, #6
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	041b      	lsls	r3, r3, #16
 8002c96:	431a      	orrs	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	061b      	lsls	r3, r3, #24
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	071b      	lsls	r3, r3, #28
 8002ca6:	491a      	ldr	r1, [pc, #104]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cb4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cba:	f7fe fc5f 	bl	800157c <HAL_GetTick>
 8002cbe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002cc2:	f7fe fc5b 	bl	800157c <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b64      	cmp	r3, #100	; 0x64
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e0d8      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	f040 80ce 	bne.w	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002ce8:	4b09      	ldr	r3, [pc, #36]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf4:	f7fe fc42 	bl	800157c <HAL_GetTick>
 8002cf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002cfc:	f7fe fc3e 	bl	800157c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b64      	cmp	r3, #100	; 0x64
 8002d08:	d904      	bls.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e0bb      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002d0e:	bf00      	nop
 8002d10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d14:	4b5e      	ldr	r3, [pc, #376]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d20:	d0ec      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d009      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d02e      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d12a      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002d4a:	4b51      	ldr	r3, [pc, #324]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002d58:	4b4d      	ldr	r3, [pc, #308]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	0f1b      	lsrs	r3, r3, #28
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	019a      	lsls	r2, r3, #6
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	041b      	lsls	r3, r3, #16
 8002d70:	431a      	orrs	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	071b      	lsls	r3, r3, #28
 8002d7e:	4944      	ldr	r1, [pc, #272]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002d86:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d94:	3b01      	subs	r3, #1
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	493d      	ldr	r1, [pc, #244]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d022      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002db4:	d11d      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002db6:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbc:	0e1b      	lsrs	r3, r3, #24
 8002dbe:	f003 030f 	and.w	r3, r3, #15
 8002dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002dc4:	4b32      	ldr	r3, [pc, #200]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dca:	0f1b      	lsrs	r3, r3, #28
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	019a      	lsls	r2, r3, #6
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	041b      	lsls	r3, r3, #16
 8002dde:	431a      	orrs	r2, r3
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	061b      	lsls	r3, r3, #24
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	071b      	lsls	r3, r3, #28
 8002dea:	4929      	ldr	r1, [pc, #164]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0308 	and.w	r3, r3, #8
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d028      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002dfe:	4b24      	ldr	r3, [pc, #144]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	0e1b      	lsrs	r3, r3, #24
 8002e06:	f003 030f 	and.w	r3, r3, #15
 8002e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002e0c:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e12:	0c1b      	lsrs	r3, r3, #16
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695b      	ldr	r3, [r3, #20]
 8002e1e:	019a      	lsls	r2, r3, #6
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	061b      	lsls	r3, r3, #24
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	69db      	ldr	r3, [r3, #28]
 8002e30:	071b      	lsls	r3, r3, #28
 8002e32:	4917      	ldr	r1, [pc, #92]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002e3a:	4b15      	ldr	r3, [pc, #84]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	4911      	ldr	r1, [pc, #68]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e50:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a0e      	ldr	r2, [pc, #56]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7fe fb8e 	bl	800157c <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002e64:	f7fe fb8a 	bl	800157c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	; 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e007      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e82:	d1ef      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3720      	adds	r7, #32
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40023800 	.word	0x40023800

08002e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e049      	b.n	8002f3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe f9b4 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f000 fab2 	bl	800343c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d001      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e054      	b.n	8003006 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a26      	ldr	r2, [pc, #152]	; (8003014 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d01d      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a22      	ldr	r2, [pc, #136]	; (8003018 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d018      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a21      	ldr	r2, [pc, #132]	; (800301c <HAL_TIM_Base_Start_IT+0xd8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d013      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1f      	ldr	r2, [pc, #124]	; (8003020 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d00e      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1e      	ldr	r2, [pc, #120]	; (8003024 <HAL_TIM_Base_Start_IT+0xe0>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d009      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_TIM_Base_Start_IT+0xe4>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d004      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x80>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a1b      	ldr	r2, [pc, #108]	; (800302c <HAL_TIM_Base_Start_IT+0xe8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d115      	bne.n	8002ff0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_TIM_Base_Start_IT+0xec>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b06      	cmp	r3, #6
 8002fd4:	d015      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0xbe>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fdc:	d011      	beq.n	8003002 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f042 0201 	orr.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fee:	e008      	b.n	8003002 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e000      	b.n	8003004 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003002:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3714      	adds	r7, #20
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	40010000 	.word	0x40010000
 8003018:	40000400 	.word	0x40000400
 800301c:	40000800 	.word	0x40000800
 8003020:	40000c00 	.word	0x40000c00
 8003024:	40010400 	.word	0x40010400
 8003028:	40014000 	.word	0x40014000
 800302c:	40001800 	.word	0x40001800
 8003030:	00010007 	.word	0x00010007

08003034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68db      	ldr	r3, [r3, #12]
 8003042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d020      	beq.n	8003098 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0202 	mvn.w	r2, #2
 8003068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f9be 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f9b0 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f9c1 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d020      	beq.n	80030e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0304 	and.w	r3, r3, #4
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d01b      	beq.n	80030e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0204 	mvn.w	r2, #4
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f998 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f98a 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f99b 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d020      	beq.n	8003130 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d01b      	beq.n	8003130 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f06f 0208 	mvn.w	r2, #8
 8003100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2204      	movs	r2, #4
 8003106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f972 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 800311c:	e005      	b.n	800312a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f964 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f975 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	d020      	beq.n	800317c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f003 0310 	and.w	r3, r3, #16
 8003140:	2b00      	cmp	r3, #0
 8003142:	d01b      	beq.n	800317c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f06f 0210 	mvn.w	r2, #16
 800314c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2208      	movs	r2, #8
 8003152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f94c 	bl	8003400 <HAL_TIM_IC_CaptureCallback>
 8003168:	e005      	b.n	8003176 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f93e 	bl	80033ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f000 f94f 	bl	8003414 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0201 	mvn.w	r2, #1
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f91c 	bl	80033d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d104      	bne.n	80031b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00c      	beq.n	80031ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80031c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 fb15 	bl	80037f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00c      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fb0d 	bl	800380c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800320e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f909 	bl	8003428 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	f003 0320 	and.w	r3, r3, #32
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00c      	beq.n	800323a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f003 0320 	and.w	r3, r3, #32
 8003226:	2b00      	cmp	r3, #0
 8003228:	d007      	beq.n	800323a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f06f 0220 	mvn.w	r2, #32
 8003232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 fad5 	bl	80037e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800323a:	bf00      	nop
 800323c:	3710      	adds	r7, #16
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_TIM_ConfigClockSource+0x1c>
 800325c:	2302      	movs	r3, #2
 800325e:	e0b4      	b.n	80033ca <HAL_TIM_ConfigClockSource+0x186>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	4b56      	ldr	r3, [pc, #344]	; (80033d4 <HAL_TIM_ConfigClockSource+0x190>)
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003298:	d03e      	beq.n	8003318 <HAL_TIM_ConfigClockSource+0xd4>
 800329a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800329e:	f200 8087 	bhi.w	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a6:	f000 8086 	beq.w	80033b6 <HAL_TIM_ConfigClockSource+0x172>
 80032aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ae:	d87f      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032b0:	2b70      	cmp	r3, #112	; 0x70
 80032b2:	d01a      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0xa6>
 80032b4:	2b70      	cmp	r3, #112	; 0x70
 80032b6:	d87b      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032b8:	2b60      	cmp	r3, #96	; 0x60
 80032ba:	d050      	beq.n	800335e <HAL_TIM_ConfigClockSource+0x11a>
 80032bc:	2b60      	cmp	r3, #96	; 0x60
 80032be:	d877      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032c0:	2b50      	cmp	r3, #80	; 0x50
 80032c2:	d03c      	beq.n	800333e <HAL_TIM_ConfigClockSource+0xfa>
 80032c4:	2b50      	cmp	r3, #80	; 0x50
 80032c6:	d873      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032c8:	2b40      	cmp	r3, #64	; 0x40
 80032ca:	d058      	beq.n	800337e <HAL_TIM_ConfigClockSource+0x13a>
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d86f      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d0:	2b30      	cmp	r3, #48	; 0x30
 80032d2:	d064      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x15a>
 80032d4:	2b30      	cmp	r3, #48	; 0x30
 80032d6:	d86b      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032d8:	2b20      	cmp	r3, #32
 80032da:	d060      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x15a>
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d867      	bhi.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d05c      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x15a>
 80032e4:	2b10      	cmp	r3, #16
 80032e6:	d05a      	beq.n	800339e <HAL_TIM_ConfigClockSource+0x15a>
 80032e8:	e062      	b.n	80033b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6899      	ldr	r1, [r3, #8]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685a      	ldr	r2, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f000 f9c5 	bl	8003688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800330c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	609a      	str	r2, [r3, #8]
      break;
 8003316:	e04f      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6818      	ldr	r0, [r3, #0]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	6899      	ldr	r1, [r3, #8]
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	f000 f9ae 	bl	8003688 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689a      	ldr	r2, [r3, #8]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800333a:	609a      	str	r2, [r3, #8]
      break;
 800333c:	e03c      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6818      	ldr	r0, [r3, #0]
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	461a      	mov	r2, r3
 800334c:	f000 f922 	bl	8003594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2150      	movs	r1, #80	; 0x50
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f97b 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 800335c:	e02c      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6818      	ldr	r0, [r3, #0]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6859      	ldr	r1, [r3, #4]
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	461a      	mov	r2, r3
 800336c:	f000 f941 	bl	80035f2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2160      	movs	r1, #96	; 0x60
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f96b 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 800337c:	e01c      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6818      	ldr	r0, [r3, #0]
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	6859      	ldr	r1, [r3, #4]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	461a      	mov	r2, r3
 800338c:	f000 f902 	bl	8003594 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2140      	movs	r1, #64	; 0x40
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f95b 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 800339c:	e00c      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4619      	mov	r1, r3
 80033a8:	4610      	mov	r0, r2
 80033aa:	f000 f952 	bl	8003652 <TIM_ITRx_SetConfig>
      break;
 80033ae:	e003      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	73fb      	strb	r3, [r7, #15]
      break;
 80033b4:	e000      	b.n	80033b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80033b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	fffeff88 	.word	0xfffeff88

080033d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a46      	ldr	r2, [pc, #280]	; (8003568 <TIM_Base_SetConfig+0x12c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800345a:	d00f      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a43      	ldr	r2, [pc, #268]	; (800356c <TIM_Base_SetConfig+0x130>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00b      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a42      	ldr	r2, [pc, #264]	; (8003570 <TIM_Base_SetConfig+0x134>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d007      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a41      	ldr	r2, [pc, #260]	; (8003574 <TIM_Base_SetConfig+0x138>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d003      	beq.n	800347c <TIM_Base_SetConfig+0x40>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a40      	ldr	r2, [pc, #256]	; (8003578 <TIM_Base_SetConfig+0x13c>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d108      	bne.n	800348e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	4313      	orrs	r3, r2
 800348c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a35      	ldr	r2, [pc, #212]	; (8003568 <TIM_Base_SetConfig+0x12c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d02b      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800349c:	d027      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a32      	ldr	r2, [pc, #200]	; (800356c <TIM_Base_SetConfig+0x130>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d023      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a31      	ldr	r2, [pc, #196]	; (8003570 <TIM_Base_SetConfig+0x134>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d01f      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a30      	ldr	r2, [pc, #192]	; (8003574 <TIM_Base_SetConfig+0x138>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d01b      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2f      	ldr	r2, [pc, #188]	; (8003578 <TIM_Base_SetConfig+0x13c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d017      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2e      	ldr	r2, [pc, #184]	; (800357c <TIM_Base_SetConfig+0x140>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d013      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2d      	ldr	r2, [pc, #180]	; (8003580 <TIM_Base_SetConfig+0x144>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00f      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <TIM_Base_SetConfig+0x148>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00b      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a2b      	ldr	r2, [pc, #172]	; (8003588 <TIM_Base_SetConfig+0x14c>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a2a      	ldr	r2, [pc, #168]	; (800358c <TIM_Base_SetConfig+0x150>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d003      	beq.n	80034ee <TIM_Base_SetConfig+0xb2>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a29      	ldr	r2, [pc, #164]	; (8003590 <TIM_Base_SetConfig+0x154>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d108      	bne.n	8003500 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	695b      	ldr	r3, [r3, #20]
 800350a:	4313      	orrs	r3, r2
 800350c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	689a      	ldr	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <TIM_Base_SetConfig+0x12c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d003      	beq.n	8003534 <TIM_Base_SetConfig+0xf8>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <TIM_Base_SetConfig+0x13c>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d103      	bne.n	800353c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	691a      	ldr	r2, [r3, #16]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	f023 0201 	bic.w	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	611a      	str	r2, [r3, #16]
  }
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	40010000 	.word	0x40010000
 800356c:	40000400 	.word	0x40000400
 8003570:	40000800 	.word	0x40000800
 8003574:	40000c00 	.word	0x40000c00
 8003578:	40010400 	.word	0x40010400
 800357c:	40014000 	.word	0x40014000
 8003580:	40014400 	.word	0x40014400
 8003584:	40014800 	.word	0x40014800
 8003588:	40001800 	.word	0x40001800
 800358c:	40001c00 	.word	0x40001c00
 8003590:	40002000 	.word	0x40002000

08003594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003594:	b480      	push	{r7}
 8003596:	b087      	sub	sp, #28
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a1b      	ldr	r3, [r3, #32]
 80035a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	f023 0201 	bic.w	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	f023 030a 	bic.w	r3, r3, #10
 80035d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	697a      	ldr	r2, [r7, #20]
 80035e4:	621a      	str	r2, [r3, #32]
}
 80035e6:	bf00      	nop
 80035e8:	371c      	adds	r7, #28
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b087      	sub	sp, #28
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	60f8      	str	r0, [r7, #12]
 80035fa:	60b9      	str	r1, [r7, #8]
 80035fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6a1b      	ldr	r3, [r3, #32]
 8003602:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a1b      	ldr	r3, [r3, #32]
 8003608:	f023 0210 	bic.w	r2, r3, #16
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800361c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	031b      	lsls	r3, r3, #12
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	4313      	orrs	r3, r2
 8003626:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800362e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	693a      	ldr	r2, [r7, #16]
 800363e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	621a      	str	r2, [r3, #32]
}
 8003646:	bf00      	nop
 8003648:	371c      	adds	r7, #28
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr

08003652 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003652:	b480      	push	{r7}
 8003654:	b085      	sub	sp, #20
 8003656:	af00      	add	r7, sp, #0
 8003658:	6078      	str	r0, [r7, #4]
 800365a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003668:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4313      	orrs	r3, r2
 8003670:	f043 0307 	orr.w	r3, r3, #7
 8003674:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	609a      	str	r2, [r3, #8]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	021a      	lsls	r2, r3, #8
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	431a      	orrs	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e06d      	b.n	80037bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a30      	ldr	r2, [pc, #192]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a2f      	ldr	r2, [pc, #188]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d108      	bne.n	8003726 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800371a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800372c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a20      	ldr	r2, [pc, #128]	; (80037c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d022      	beq.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003752:	d01d      	beq.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a1d      	ldr	r2, [pc, #116]	; (80037d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d018      	beq.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	4a1c      	ldr	r2, [pc, #112]	; (80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d013      	beq.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d00e      	beq.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d009      	beq.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a16      	ldr	r2, [pc, #88]	; (80037dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d004      	beq.n	8003790 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a15      	ldr	r2, [pc, #84]	; (80037e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d10c      	bne.n	80037aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003796:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	4313      	orrs	r3, r2
 80037a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40010400 	.word	0x40010400
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40000800 	.word	0x40000800
 80037d8:	40000c00 	.word	0x40000c00
 80037dc:	40014000 	.word	0x40014000
 80037e0:	40001800 	.word	0x40001800

080037e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr

08003820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e040      	b.n	80038b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d106      	bne.n	8003848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f7fd fd74 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2224      	movs	r2, #36	; 0x24
 800384c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fe7e 	bl	8004568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fc17 	bl	80040a0 <UART_SetConfig>
 8003872:	4603      	mov	r3, r0
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e01b      	b.n	80038b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800388a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800389a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0201 	orr.w	r2, r2, #1
 80038aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fefd 	bl	80046ac <UART_CheckIdleState>
 80038b2:	4603      	mov	r3, r0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3708      	adds	r7, #8
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e048      	b.n	8003960 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d106      	bne.n	80038e4 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fd fd26 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2224      	movs	r2, #36	; 0x24
 80038e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f022 0201 	bic.w	r2, r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fe30 	bl	8004568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fbc9 	bl	80040a0 <UART_SetConfig>
 800390e:	4603      	mov	r3, r0
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e023      	b.n	8003960 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003926:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689a      	ldr	r2, [r3, #8]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8003936:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f042 0208 	orr.w	r2, r2, #8
 8003946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 fea7 	bl	80046ac <UART_CheckIdleState>
 800395e:	4603      	mov	r3, r0
}
 8003960:	4618      	mov	r0, r3
 8003962:	3708      	adds	r7, #8
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08a      	sub	sp, #40	; 0x28
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	603b      	str	r3, [r7, #0]
 8003974:	4613      	mov	r3, r2
 8003976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800397c:	2b20      	cmp	r3, #32
 800397e:	d177      	bne.n	8003a70 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d002      	beq.n	800398c <HAL_UART_Transmit+0x24>
 8003986:	88fb      	ldrh	r3, [r7, #6]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d101      	bne.n	8003990 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e070      	b.n	8003a72 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2221      	movs	r2, #33	; 0x21
 800399c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800399e:	f7fd fded 	bl	800157c <HAL_GetTick>
 80039a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	88fa      	ldrh	r2, [r7, #6]
 80039a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	88fa      	ldrh	r2, [r7, #6]
 80039b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039bc:	d108      	bne.n	80039d0 <HAL_UART_Transmit+0x68>
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d104      	bne.n	80039d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	61bb      	str	r3, [r7, #24]
 80039ce:	e003      	b.n	80039d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039d8:	e02f      	b.n	8003a3a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2180      	movs	r1, #128	; 0x80
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 ff09 	bl	80047fc <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d004      	beq.n	80039fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e03b      	b.n	8003a72 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10b      	bne.n	8003a18 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	461a      	mov	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	3302      	adds	r3, #2
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	e007      	b.n	8003a28 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	781a      	ldrb	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	3301      	adds	r3, #1
 8003a26:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	3b01      	subs	r3, #1
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1c9      	bne.n	80039da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2140      	movs	r1, #64	; 0x40
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 fed3 	bl	80047fc <UART_WaitOnFlagUntilTimeout>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d004      	beq.n	8003a66 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e005      	b.n	8003a72 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e000      	b.n	8003a72 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003a70:	2302      	movs	r3, #2
  }
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
	...

08003a7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b0ba      	sub	sp, #232	; 0xe8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003aa2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003aa6:	f640 030f 	movw	r3, #2063	; 0x80f
 8003aaa:	4013      	ands	r3, r2
 8003aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003ab0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d115      	bne.n	8003ae4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003abc:	f003 0320 	and.w	r3, r3, #32
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00f      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac8:	f003 0320 	and.w	r3, r3, #32
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	f000 82ac 	beq.w	8004032 <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	4798      	blx	r3
      }
      return;
 8003ae2:	e2a6      	b.n	8004032 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8117 	beq.w	8003d1c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d106      	bne.n	8003b08 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003afa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003afe:	4b85      	ldr	r3, [pc, #532]	; (8003d14 <HAL_UART_IRQHandler+0x298>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f000 810a 	beq.w	8003d1c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d011      	beq.n	8003b38 <HAL_UART_IRQHandler+0xbc>
 8003b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00b      	beq.n	8003b38 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2201      	movs	r2, #1
 8003b26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d011      	beq.n	8003b68 <HAL_UART_IRQHandler+0xec>
 8003b44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d00b      	beq.n	8003b68 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2202      	movs	r2, #2
 8003b56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	f043 0204 	orr.w	r2, r3, #4
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d011      	beq.n	8003b98 <HAL_UART_IRQHandler+0x11c>
 8003b74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b78:	f003 0301 	and.w	r3, r3, #1
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d00b      	beq.n	8003b98 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2204      	movs	r2, #4
 8003b86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b8e:	f043 0202 	orr.w	r2, r3, #2
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b9c:	f003 0308 	and.w	r3, r3, #8
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d017      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d105      	bne.n	8003bbc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003bb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003bb4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00b      	beq.n	8003bd4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2208      	movs	r2, #8
 8003bc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bca:	f043 0208 	orr.w	r2, r3, #8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d012      	beq.n	8003c06 <HAL_UART_IRQHandler+0x18a>
 8003be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003be4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00c      	beq.n	8003c06 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003bf4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bfc:	f043 0220 	orr.w	r2, r3, #32
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8212 	beq.w	8004036 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c16:	f003 0320 	and.w	r3, r3, #32
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00d      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d007      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d005      	beq.n	8003c5e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003c56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d04f      	beq.n	8003cfe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 fe39 	bl	80048d6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d141      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c80:	e853 3f00 	ldrex	r3, [r3]
 8003c84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003c88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	3308      	adds	r3, #8
 8003c9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003c9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003caa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003cae:	e841 2300 	strex	r3, r2, [r1]
 8003cb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1d9      	bne.n	8003c72 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d013      	beq.n	8003cee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cca:	4a13      	ldr	r2, [pc, #76]	; (8003d18 <HAL_UART_IRQHandler+0x29c>)
 8003ccc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fd fe03 	bl	80018de <HAL_DMA_Abort_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cec:	e00f      	b.n	8003d0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f9b6 	bl	8004060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cf4:	e00b      	b.n	8003d0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9b2 	bl	8004060 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	e007      	b.n	8003d0e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9ae 	bl	8004060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003d0c:	e193      	b.n	8004036 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d0e:	bf00      	nop
    return;
 8003d10:	e191      	b.n	8004036 <HAL_UART_IRQHandler+0x5ba>
 8003d12:	bf00      	nop
 8003d14:	04000120 	.word	0x04000120
 8003d18:	0800499f 	.word	0x0800499f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d20:	2b01      	cmp	r3, #1
 8003d22:	f040 814c 	bne.w	8003fbe <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0310 	and.w	r3, r3, #16
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	f000 8145 	beq.w	8003fbe <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f000 813e 	beq.w	8003fbe <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2210      	movs	r2, #16
 8003d48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d54:	2b40      	cmp	r3, #64	; 0x40
 8003d56:	f040 80b6 	bne.w	8003ec6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d66:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f000 8165 	beq.w	800403a <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003d76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	f080 815d 	bcs.w	800403a <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003d86:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d94:	f000 8086 	beq.w	8003ea4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003da4:	e853 3f00 	ldrex	r3, [r3]
 8003da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003dce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1da      	bne.n	8003d98 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3308      	adds	r3, #8
 8003de8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003df2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3308      	adds	r3, #8
 8003e02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003e06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003e0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003e0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003e12:	e841 2300 	strex	r3, r2, [r1]
 8003e16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003e18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e1      	bne.n	8003de2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3308      	adds	r3, #8
 8003e24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e28:	e853 3f00 	ldrex	r3, [r3]
 8003e2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003e30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003e44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003e4a:	e841 2300 	strex	r3, r2, [r1]
 8003e4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1e3      	bne.n	8003e1e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6c:	e853 3f00 	ldrex	r3, [r3]
 8003e70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e74:	f023 0310 	bic.w	r3, r3, #16
 8003e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003e88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003e8e:	e841 2300 	strex	r3, r2, [r1]
 8003e92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1e4      	bne.n	8003e64 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fd fcad 	bl	80017fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2202      	movs	r2, #2
 8003ea8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f8d8 	bl	8004074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ec4:	e0b9      	b.n	800403a <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 80ab 	beq.w	800403e <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8003ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 80a6 	beq.w	800403e <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	e853 3f00 	ldrex	r3, [r3]
 8003efe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f14:	647b      	str	r3, [r7, #68]	; 0x44
 8003f16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e4      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	e853 3f00 	ldrex	r3, [r3]
 8003f36:	623b      	str	r3, [r7, #32]
   return(result);
 8003f38:	6a3b      	ldr	r3, [r7, #32]
 8003f3a:	f023 0301 	bic.w	r3, r3, #1
 8003f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	3308      	adds	r3, #8
 8003f48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003f4c:	633a      	str	r2, [r7, #48]	; 0x30
 8003f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f54:	e841 2300 	strex	r3, r2, [r1]
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d1e3      	bne.n	8003f28 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
 8003f88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f96:	61fb      	str	r3, [r7, #28]
 8003f98:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f9a:	69b9      	ldr	r1, [r7, #24]
 8003f9c:	69fa      	ldr	r2, [r7, #28]
 8003f9e:	e841 2300 	strex	r3, r2, [r1]
 8003fa2:	617b      	str	r3, [r7, #20]
   return(result);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1e4      	bne.n	8003f74 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2202      	movs	r2, #2
 8003fae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f85c 	bl	8004074 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003fbc:	e03f      	b.n	800403e <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00e      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x56c>
 8003fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d008      	beq.n	8003fe8 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003fde:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f853 	bl	800408c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003fe6:	e02d      	b.n	8004044 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003fe8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00e      	beq.n	8004012 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01c      	beq.n	8004042 <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	4798      	blx	r3
    }
    return;
 8004010:	e017      	b.n	8004042 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d012      	beq.n	8004044 <HAL_UART_IRQHandler+0x5c8>
 800401e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00c      	beq.n	8004044 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fccd 	bl	80049ca <UART_EndTransmit_IT>
    return;
 8004030:	e008      	b.n	8004044 <HAL_UART_IRQHandler+0x5c8>
      return;
 8004032:	bf00      	nop
 8004034:	e006      	b.n	8004044 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004036:	bf00      	nop
 8004038:	e004      	b.n	8004044 <HAL_UART_IRQHandler+0x5c8>
      return;
 800403a:	bf00      	nop
 800403c:	e002      	b.n	8004044 <HAL_UART_IRQHandler+0x5c8>
      return;
 800403e:	bf00      	nop
 8004040:	e000      	b.n	8004044 <HAL_UART_IRQHandler+0x5c8>
    return;
 8004042:	bf00      	nop
  }

}
 8004044:	37e8      	adds	r7, #232	; 0xe8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop

0800404c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004068:	bf00      	nop
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004080:	bf00      	nop
 8004082:	370c      	adds	r7, #12
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr

0800408c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800408c:	b480      	push	{r7}
 800408e:	b083      	sub	sp, #12
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	431a      	orrs	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4ba6      	ldr	r3, [pc, #664]	; (8004364 <UART_SetConfig+0x2c4>)
 80040cc:	4013      	ands	r3, r2
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	6812      	ldr	r2, [r2, #0]
 80040d2:	6979      	ldr	r1, [r7, #20]
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	430a      	orrs	r2, r1
 8004110:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a94      	ldr	r2, [pc, #592]	; (8004368 <UART_SetConfig+0x2c8>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d120      	bne.n	800415e <UART_SetConfig+0xbe>
 800411c:	4b93      	ldr	r3, [pc, #588]	; (800436c <UART_SetConfig+0x2cc>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b03      	cmp	r3, #3
 8004128:	d816      	bhi.n	8004158 <UART_SetConfig+0xb8>
 800412a:	a201      	add	r2, pc, #4	; (adr r2, 8004130 <UART_SetConfig+0x90>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004141 	.word	0x08004141
 8004134:	0800414d 	.word	0x0800414d
 8004138:	08004147 	.word	0x08004147
 800413c:	08004153 	.word	0x08004153
 8004140:	2301      	movs	r3, #1
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e150      	b.n	80043e8 <UART_SetConfig+0x348>
 8004146:	2302      	movs	r3, #2
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e14d      	b.n	80043e8 <UART_SetConfig+0x348>
 800414c:	2304      	movs	r3, #4
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e14a      	b.n	80043e8 <UART_SetConfig+0x348>
 8004152:	2308      	movs	r3, #8
 8004154:	77fb      	strb	r3, [r7, #31]
 8004156:	e147      	b.n	80043e8 <UART_SetConfig+0x348>
 8004158:	2310      	movs	r3, #16
 800415a:	77fb      	strb	r3, [r7, #31]
 800415c:	e144      	b.n	80043e8 <UART_SetConfig+0x348>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a83      	ldr	r2, [pc, #524]	; (8004370 <UART_SetConfig+0x2d0>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d132      	bne.n	80041ce <UART_SetConfig+0x12e>
 8004168:	4b80      	ldr	r3, [pc, #512]	; (800436c <UART_SetConfig+0x2cc>)
 800416a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b0c      	cmp	r3, #12
 8004174:	d828      	bhi.n	80041c8 <UART_SetConfig+0x128>
 8004176:	a201      	add	r2, pc, #4	; (adr r2, 800417c <UART_SetConfig+0xdc>)
 8004178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800417c:	080041b1 	.word	0x080041b1
 8004180:	080041c9 	.word	0x080041c9
 8004184:	080041c9 	.word	0x080041c9
 8004188:	080041c9 	.word	0x080041c9
 800418c:	080041bd 	.word	0x080041bd
 8004190:	080041c9 	.word	0x080041c9
 8004194:	080041c9 	.word	0x080041c9
 8004198:	080041c9 	.word	0x080041c9
 800419c:	080041b7 	.word	0x080041b7
 80041a0:	080041c9 	.word	0x080041c9
 80041a4:	080041c9 	.word	0x080041c9
 80041a8:	080041c9 	.word	0x080041c9
 80041ac:	080041c3 	.word	0x080041c3
 80041b0:	2300      	movs	r3, #0
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e118      	b.n	80043e8 <UART_SetConfig+0x348>
 80041b6:	2302      	movs	r3, #2
 80041b8:	77fb      	strb	r3, [r7, #31]
 80041ba:	e115      	b.n	80043e8 <UART_SetConfig+0x348>
 80041bc:	2304      	movs	r3, #4
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e112      	b.n	80043e8 <UART_SetConfig+0x348>
 80041c2:	2308      	movs	r3, #8
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e10f      	b.n	80043e8 <UART_SetConfig+0x348>
 80041c8:	2310      	movs	r3, #16
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e10c      	b.n	80043e8 <UART_SetConfig+0x348>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a68      	ldr	r2, [pc, #416]	; (8004374 <UART_SetConfig+0x2d4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d120      	bne.n	800421a <UART_SetConfig+0x17a>
 80041d8:	4b64      	ldr	r3, [pc, #400]	; (800436c <UART_SetConfig+0x2cc>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041e2:	2b30      	cmp	r3, #48	; 0x30
 80041e4:	d013      	beq.n	800420e <UART_SetConfig+0x16e>
 80041e6:	2b30      	cmp	r3, #48	; 0x30
 80041e8:	d814      	bhi.n	8004214 <UART_SetConfig+0x174>
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d009      	beq.n	8004202 <UART_SetConfig+0x162>
 80041ee:	2b20      	cmp	r3, #32
 80041f0:	d810      	bhi.n	8004214 <UART_SetConfig+0x174>
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <UART_SetConfig+0x15c>
 80041f6:	2b10      	cmp	r3, #16
 80041f8:	d006      	beq.n	8004208 <UART_SetConfig+0x168>
 80041fa:	e00b      	b.n	8004214 <UART_SetConfig+0x174>
 80041fc:	2300      	movs	r3, #0
 80041fe:	77fb      	strb	r3, [r7, #31]
 8004200:	e0f2      	b.n	80043e8 <UART_SetConfig+0x348>
 8004202:	2302      	movs	r3, #2
 8004204:	77fb      	strb	r3, [r7, #31]
 8004206:	e0ef      	b.n	80043e8 <UART_SetConfig+0x348>
 8004208:	2304      	movs	r3, #4
 800420a:	77fb      	strb	r3, [r7, #31]
 800420c:	e0ec      	b.n	80043e8 <UART_SetConfig+0x348>
 800420e:	2308      	movs	r3, #8
 8004210:	77fb      	strb	r3, [r7, #31]
 8004212:	e0e9      	b.n	80043e8 <UART_SetConfig+0x348>
 8004214:	2310      	movs	r3, #16
 8004216:	77fb      	strb	r3, [r7, #31]
 8004218:	e0e6      	b.n	80043e8 <UART_SetConfig+0x348>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a56      	ldr	r2, [pc, #344]	; (8004378 <UART_SetConfig+0x2d8>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d120      	bne.n	8004266 <UART_SetConfig+0x1c6>
 8004224:	4b51      	ldr	r3, [pc, #324]	; (800436c <UART_SetConfig+0x2cc>)
 8004226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800422e:	2bc0      	cmp	r3, #192	; 0xc0
 8004230:	d013      	beq.n	800425a <UART_SetConfig+0x1ba>
 8004232:	2bc0      	cmp	r3, #192	; 0xc0
 8004234:	d814      	bhi.n	8004260 <UART_SetConfig+0x1c0>
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d009      	beq.n	800424e <UART_SetConfig+0x1ae>
 800423a:	2b80      	cmp	r3, #128	; 0x80
 800423c:	d810      	bhi.n	8004260 <UART_SetConfig+0x1c0>
 800423e:	2b00      	cmp	r3, #0
 8004240:	d002      	beq.n	8004248 <UART_SetConfig+0x1a8>
 8004242:	2b40      	cmp	r3, #64	; 0x40
 8004244:	d006      	beq.n	8004254 <UART_SetConfig+0x1b4>
 8004246:	e00b      	b.n	8004260 <UART_SetConfig+0x1c0>
 8004248:	2300      	movs	r3, #0
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e0cc      	b.n	80043e8 <UART_SetConfig+0x348>
 800424e:	2302      	movs	r3, #2
 8004250:	77fb      	strb	r3, [r7, #31]
 8004252:	e0c9      	b.n	80043e8 <UART_SetConfig+0x348>
 8004254:	2304      	movs	r3, #4
 8004256:	77fb      	strb	r3, [r7, #31]
 8004258:	e0c6      	b.n	80043e8 <UART_SetConfig+0x348>
 800425a:	2308      	movs	r3, #8
 800425c:	77fb      	strb	r3, [r7, #31]
 800425e:	e0c3      	b.n	80043e8 <UART_SetConfig+0x348>
 8004260:	2310      	movs	r3, #16
 8004262:	77fb      	strb	r3, [r7, #31]
 8004264:	e0c0      	b.n	80043e8 <UART_SetConfig+0x348>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a44      	ldr	r2, [pc, #272]	; (800437c <UART_SetConfig+0x2dc>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d125      	bne.n	80042bc <UART_SetConfig+0x21c>
 8004270:	4b3e      	ldr	r3, [pc, #248]	; (800436c <UART_SetConfig+0x2cc>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800427e:	d017      	beq.n	80042b0 <UART_SetConfig+0x210>
 8004280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004284:	d817      	bhi.n	80042b6 <UART_SetConfig+0x216>
 8004286:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800428a:	d00b      	beq.n	80042a4 <UART_SetConfig+0x204>
 800428c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004290:	d811      	bhi.n	80042b6 <UART_SetConfig+0x216>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d003      	beq.n	800429e <UART_SetConfig+0x1fe>
 8004296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429a:	d006      	beq.n	80042aa <UART_SetConfig+0x20a>
 800429c:	e00b      	b.n	80042b6 <UART_SetConfig+0x216>
 800429e:	2300      	movs	r3, #0
 80042a0:	77fb      	strb	r3, [r7, #31]
 80042a2:	e0a1      	b.n	80043e8 <UART_SetConfig+0x348>
 80042a4:	2302      	movs	r3, #2
 80042a6:	77fb      	strb	r3, [r7, #31]
 80042a8:	e09e      	b.n	80043e8 <UART_SetConfig+0x348>
 80042aa:	2304      	movs	r3, #4
 80042ac:	77fb      	strb	r3, [r7, #31]
 80042ae:	e09b      	b.n	80043e8 <UART_SetConfig+0x348>
 80042b0:	2308      	movs	r3, #8
 80042b2:	77fb      	strb	r3, [r7, #31]
 80042b4:	e098      	b.n	80043e8 <UART_SetConfig+0x348>
 80042b6:	2310      	movs	r3, #16
 80042b8:	77fb      	strb	r3, [r7, #31]
 80042ba:	e095      	b.n	80043e8 <UART_SetConfig+0x348>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a2f      	ldr	r2, [pc, #188]	; (8004380 <UART_SetConfig+0x2e0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d125      	bne.n	8004312 <UART_SetConfig+0x272>
 80042c6:	4b29      	ldr	r3, [pc, #164]	; (800436c <UART_SetConfig+0x2cc>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80042d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042d4:	d017      	beq.n	8004306 <UART_SetConfig+0x266>
 80042d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80042da:	d817      	bhi.n	800430c <UART_SetConfig+0x26c>
 80042dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e0:	d00b      	beq.n	80042fa <UART_SetConfig+0x25a>
 80042e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e6:	d811      	bhi.n	800430c <UART_SetConfig+0x26c>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <UART_SetConfig+0x254>
 80042ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042f0:	d006      	beq.n	8004300 <UART_SetConfig+0x260>
 80042f2:	e00b      	b.n	800430c <UART_SetConfig+0x26c>
 80042f4:	2301      	movs	r3, #1
 80042f6:	77fb      	strb	r3, [r7, #31]
 80042f8:	e076      	b.n	80043e8 <UART_SetConfig+0x348>
 80042fa:	2302      	movs	r3, #2
 80042fc:	77fb      	strb	r3, [r7, #31]
 80042fe:	e073      	b.n	80043e8 <UART_SetConfig+0x348>
 8004300:	2304      	movs	r3, #4
 8004302:	77fb      	strb	r3, [r7, #31]
 8004304:	e070      	b.n	80043e8 <UART_SetConfig+0x348>
 8004306:	2308      	movs	r3, #8
 8004308:	77fb      	strb	r3, [r7, #31]
 800430a:	e06d      	b.n	80043e8 <UART_SetConfig+0x348>
 800430c:	2310      	movs	r3, #16
 800430e:	77fb      	strb	r3, [r7, #31]
 8004310:	e06a      	b.n	80043e8 <UART_SetConfig+0x348>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1b      	ldr	r2, [pc, #108]	; (8004384 <UART_SetConfig+0x2e4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d138      	bne.n	800438e <UART_SetConfig+0x2ee>
 800431c:	4b13      	ldr	r3, [pc, #76]	; (800436c <UART_SetConfig+0x2cc>)
 800431e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004322:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004326:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800432a:	d017      	beq.n	800435c <UART_SetConfig+0x2bc>
 800432c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004330:	d82a      	bhi.n	8004388 <UART_SetConfig+0x2e8>
 8004332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004336:	d00b      	beq.n	8004350 <UART_SetConfig+0x2b0>
 8004338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800433c:	d824      	bhi.n	8004388 <UART_SetConfig+0x2e8>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <UART_SetConfig+0x2aa>
 8004342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004346:	d006      	beq.n	8004356 <UART_SetConfig+0x2b6>
 8004348:	e01e      	b.n	8004388 <UART_SetConfig+0x2e8>
 800434a:	2300      	movs	r3, #0
 800434c:	77fb      	strb	r3, [r7, #31]
 800434e:	e04b      	b.n	80043e8 <UART_SetConfig+0x348>
 8004350:	2302      	movs	r3, #2
 8004352:	77fb      	strb	r3, [r7, #31]
 8004354:	e048      	b.n	80043e8 <UART_SetConfig+0x348>
 8004356:	2304      	movs	r3, #4
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	e045      	b.n	80043e8 <UART_SetConfig+0x348>
 800435c:	2308      	movs	r3, #8
 800435e:	77fb      	strb	r3, [r7, #31]
 8004360:	e042      	b.n	80043e8 <UART_SetConfig+0x348>
 8004362:	bf00      	nop
 8004364:	efff69f3 	.word	0xefff69f3
 8004368:	40011000 	.word	0x40011000
 800436c:	40023800 	.word	0x40023800
 8004370:	40004400 	.word	0x40004400
 8004374:	40004800 	.word	0x40004800
 8004378:	40004c00 	.word	0x40004c00
 800437c:	40005000 	.word	0x40005000
 8004380:	40011400 	.word	0x40011400
 8004384:	40007800 	.word	0x40007800
 8004388:	2310      	movs	r3, #16
 800438a:	77fb      	strb	r3, [r7, #31]
 800438c:	e02c      	b.n	80043e8 <UART_SetConfig+0x348>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a72      	ldr	r2, [pc, #456]	; (800455c <UART_SetConfig+0x4bc>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d125      	bne.n	80043e4 <UART_SetConfig+0x344>
 8004398:	4b71      	ldr	r3, [pc, #452]	; (8004560 <UART_SetConfig+0x4c0>)
 800439a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800439e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80043a2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043a6:	d017      	beq.n	80043d8 <UART_SetConfig+0x338>
 80043a8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043ac:	d817      	bhi.n	80043de <UART_SetConfig+0x33e>
 80043ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b2:	d00b      	beq.n	80043cc <UART_SetConfig+0x32c>
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b8:	d811      	bhi.n	80043de <UART_SetConfig+0x33e>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <UART_SetConfig+0x326>
 80043be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043c2:	d006      	beq.n	80043d2 <UART_SetConfig+0x332>
 80043c4:	e00b      	b.n	80043de <UART_SetConfig+0x33e>
 80043c6:	2300      	movs	r3, #0
 80043c8:	77fb      	strb	r3, [r7, #31]
 80043ca:	e00d      	b.n	80043e8 <UART_SetConfig+0x348>
 80043cc:	2302      	movs	r3, #2
 80043ce:	77fb      	strb	r3, [r7, #31]
 80043d0:	e00a      	b.n	80043e8 <UART_SetConfig+0x348>
 80043d2:	2304      	movs	r3, #4
 80043d4:	77fb      	strb	r3, [r7, #31]
 80043d6:	e007      	b.n	80043e8 <UART_SetConfig+0x348>
 80043d8:	2308      	movs	r3, #8
 80043da:	77fb      	strb	r3, [r7, #31]
 80043dc:	e004      	b.n	80043e8 <UART_SetConfig+0x348>
 80043de:	2310      	movs	r3, #16
 80043e0:	77fb      	strb	r3, [r7, #31]
 80043e2:	e001      	b.n	80043e8 <UART_SetConfig+0x348>
 80043e4:	2310      	movs	r3, #16
 80043e6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69db      	ldr	r3, [r3, #28]
 80043ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043f0:	d15b      	bne.n	80044aa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80043f2:	7ffb      	ldrb	r3, [r7, #31]
 80043f4:	2b08      	cmp	r3, #8
 80043f6:	d828      	bhi.n	800444a <UART_SetConfig+0x3aa>
 80043f8:	a201      	add	r2, pc, #4	; (adr r2, 8004400 <UART_SetConfig+0x360>)
 80043fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043fe:	bf00      	nop
 8004400:	08004425 	.word	0x08004425
 8004404:	0800442d 	.word	0x0800442d
 8004408:	08004435 	.word	0x08004435
 800440c:	0800444b 	.word	0x0800444b
 8004410:	0800443b 	.word	0x0800443b
 8004414:	0800444b 	.word	0x0800444b
 8004418:	0800444b 	.word	0x0800444b
 800441c:	0800444b 	.word	0x0800444b
 8004420:	08004443 	.word	0x08004443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004424:	f7fe f8e6 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8004428:	61b8      	str	r0, [r7, #24]
        break;
 800442a:	e013      	b.n	8004454 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800442c:	f7fe f8f6 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 8004430:	61b8      	str	r0, [r7, #24]
        break;
 8004432:	e00f      	b.n	8004454 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004434:	4b4b      	ldr	r3, [pc, #300]	; (8004564 <UART_SetConfig+0x4c4>)
 8004436:	61bb      	str	r3, [r7, #24]
        break;
 8004438:	e00c      	b.n	8004454 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800443a:	f7fe f809 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 800443e:	61b8      	str	r0, [r7, #24]
        break;
 8004440:	e008      	b.n	8004454 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004446:	61bb      	str	r3, [r7, #24]
        break;
 8004448:	e004      	b.n	8004454 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	77bb      	strb	r3, [r7, #30]
        break;
 8004452:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d074      	beq.n	8004544 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	005a      	lsls	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	441a      	add	r2, r3
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	fbb2 f3f3 	udiv	r3, r2, r3
 800446e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b0f      	cmp	r3, #15
 8004474:	d916      	bls.n	80044a4 <UART_SetConfig+0x404>
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800447c:	d212      	bcs.n	80044a4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	b29b      	uxth	r3, r3
 8004482:	f023 030f 	bic.w	r3, r3, #15
 8004486:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	085b      	lsrs	r3, r3, #1
 800448c:	b29b      	uxth	r3, r3
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	b29a      	uxth	r2, r3
 8004494:	89fb      	ldrh	r3, [r7, #14]
 8004496:	4313      	orrs	r3, r2
 8004498:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	89fa      	ldrh	r2, [r7, #14]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	e04f      	b.n	8004544 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	77bb      	strb	r3, [r7, #30]
 80044a8:	e04c      	b.n	8004544 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044aa:	7ffb      	ldrb	r3, [r7, #31]
 80044ac:	2b08      	cmp	r3, #8
 80044ae:	d828      	bhi.n	8004502 <UART_SetConfig+0x462>
 80044b0:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <UART_SetConfig+0x418>)
 80044b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b6:	bf00      	nop
 80044b8:	080044dd 	.word	0x080044dd
 80044bc:	080044e5 	.word	0x080044e5
 80044c0:	080044ed 	.word	0x080044ed
 80044c4:	08004503 	.word	0x08004503
 80044c8:	080044f3 	.word	0x080044f3
 80044cc:	08004503 	.word	0x08004503
 80044d0:	08004503 	.word	0x08004503
 80044d4:	08004503 	.word	0x08004503
 80044d8:	080044fb 	.word	0x080044fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044dc:	f7fe f88a 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 80044e0:	61b8      	str	r0, [r7, #24]
        break;
 80044e2:	e013      	b.n	800450c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e4:	f7fe f89a 	bl	800261c <HAL_RCC_GetPCLK2Freq>
 80044e8:	61b8      	str	r0, [r7, #24]
        break;
 80044ea:	e00f      	b.n	800450c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044ec:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <UART_SetConfig+0x4c4>)
 80044ee:	61bb      	str	r3, [r7, #24]
        break;
 80044f0:	e00c      	b.n	800450c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044f2:	f7fd ffad 	bl	8002450 <HAL_RCC_GetSysClockFreq>
 80044f6:	61b8      	str	r0, [r7, #24]
        break;
 80044f8:	e008      	b.n	800450c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fe:	61bb      	str	r3, [r7, #24]
        break;
 8004500:	e004      	b.n	800450c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004502:	2300      	movs	r3, #0
 8004504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	77bb      	strb	r3, [r7, #30]
        break;
 800450a:	bf00      	nop
    }

    if (pclk != 0U)
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d018      	beq.n	8004544 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	085a      	lsrs	r2, r3, #1
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	441a      	add	r2, r3
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	2b0f      	cmp	r3, #15
 800452a:	d909      	bls.n	8004540 <UART_SetConfig+0x4a0>
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004532:	d205      	bcs.n	8004540 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	b29a      	uxth	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	60da      	str	r2, [r3, #12]
 800453e:	e001      	b.n	8004544 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004550:	7fbb      	ldrb	r3, [r7, #30]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40007c00 	.word	0x40007c00
 8004560:	40023800 	.word	0x40023800
 8004564:	00f42400 	.word	0x00f42400

08004568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00a      	beq.n	8004592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00a      	beq.n	80045d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	f003 0304 	and.w	r3, r3, #4
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00a      	beq.n	80045f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	430a      	orrs	r2, r1
 80045f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	f003 0310 	and.w	r3, r3, #16
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00a      	beq.n	800461a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	430a      	orrs	r2, r1
 800463a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d01a      	beq.n	800467e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004662:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004666:	d10a      	bne.n	800467e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	430a      	orrs	r2, r1
 800467c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00a      	beq.n	80046a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	430a      	orrs	r2, r1
 800469e:	605a      	str	r2, [r3, #4]
  }
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b098      	sub	sp, #96	; 0x60
 80046b0:	af02      	add	r7, sp, #8
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046bc:	f7fc ff5e 	bl	800157c <HAL_GetTick>
 80046c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0308 	and.w	r3, r3, #8
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d12e      	bne.n	800472e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d4:	9300      	str	r3, [sp, #0]
 80046d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046d8:	2200      	movs	r2, #0
 80046da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f88c 	bl	80047fc <UART_WaitOnFlagUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d021      	beq.n	800472e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f2:	e853 3f00 	ldrex	r3, [r3]
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	461a      	mov	r2, r3
 8004706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004708:	647b      	str	r3, [r7, #68]	; 0x44
 800470a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800470e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004710:	e841 2300 	strex	r3, r2, [r1]
 8004714:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1e6      	bne.n	80046ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e062      	b.n	80047f4 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b04      	cmp	r3, #4
 800473a:	d149      	bne.n	80047d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800473c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004744:	2200      	movs	r2, #0
 8004746:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f000 f856 	bl	80047fc <UART_WaitOnFlagUntilTimeout>
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d03c      	beq.n	80047d0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	e853 3f00 	ldrex	r3, [r3]
 8004762:	623b      	str	r3, [r7, #32]
   return(result);
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800476a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	461a      	mov	r2, r3
 8004772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004774:	633b      	str	r3, [r7, #48]	; 0x30
 8004776:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004778:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800477a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800477c:	e841 2300 	strex	r3, r2, [r1]
 8004780:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1e6      	bne.n	8004756 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	3308      	adds	r3, #8
 800478e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	e853 3f00 	ldrex	r3, [r3]
 8004796:	60fb      	str	r3, [r7, #12]
   return(result);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f023 0301 	bic.w	r3, r3, #1
 800479e:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	3308      	adds	r3, #8
 80047a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047a8:	61fa      	str	r2, [r7, #28]
 80047aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ac:	69b9      	ldr	r1, [r7, #24]
 80047ae:	69fa      	ldr	r2, [r7, #28]
 80047b0:	e841 2300 	strex	r3, r2, [r1]
 80047b4:	617b      	str	r3, [r7, #20]
   return(result);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1e5      	bne.n	8004788 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2220      	movs	r2, #32
 80047c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e011      	b.n	80047f4 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3758      	adds	r7, #88	; 0x58
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	603b      	str	r3, [r7, #0]
 8004808:	4613      	mov	r3, r2
 800480a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800480c:	e04f      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004814:	d04b      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004816:	f7fc feb1 	bl	800157c <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	69ba      	ldr	r2, [r7, #24]
 8004822:	429a      	cmp	r2, r3
 8004824:	d302      	bcc.n	800482c <UART_WaitOnFlagUntilTimeout+0x30>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e04e      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b00      	cmp	r3, #0
 800483c:	d037      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b80      	cmp	r3, #128	; 0x80
 8004842:	d034      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xb2>
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d031      	beq.n	80048ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69db      	ldr	r3, [r3, #28]
 8004850:	f003 0308 	and.w	r3, r3, #8
 8004854:	2b08      	cmp	r3, #8
 8004856:	d110      	bne.n	800487a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2208      	movs	r2, #8
 800485e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 f838 	bl	80048d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2208      	movs	r2, #8
 800486a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e029      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	69db      	ldr	r3, [r3, #28]
 8004880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004888:	d111      	bne.n	80048ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004894:	68f8      	ldr	r0, [r7, #12]
 8004896:	f000 f81e 	bl	80048d6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2220      	movs	r2, #32
 800489e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e00f      	b.n	80048ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69da      	ldr	r2, [r3, #28]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	4013      	ands	r3, r2
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	bf0c      	ite	eq
 80048be:	2301      	moveq	r3, #1
 80048c0:	2300      	movne	r3, #0
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	461a      	mov	r2, r3
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d0a0      	beq.n	800480e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b095      	sub	sp, #84	; 0x54
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e6:	e853 3f00 	ldrex	r3, [r3]
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	461a      	mov	r2, r3
 80048fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048fc:	643b      	str	r3, [r7, #64]	; 0x40
 80048fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004900:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004902:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004904:	e841 2300 	strex	r3, r2, [r1]
 8004908:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	2b00      	cmp	r3, #0
 800490e:	d1e6      	bne.n	80048de <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3308      	adds	r3, #8
 8004916:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	64bb      	str	r3, [r7, #72]	; 0x48
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004930:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e5      	bne.n	8004910 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	2b01      	cmp	r3, #1
 800494a:	d118      	bne.n	800497e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	e853 3f00 	ldrex	r3, [r3]
 8004958:	60bb      	str	r3, [r7, #8]
   return(result);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	f023 0310 	bic.w	r3, r3, #16
 8004960:	647b      	str	r3, [r7, #68]	; 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	461a      	mov	r2, r3
 8004968:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	6979      	ldr	r1, [r7, #20]
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	e841 2300 	strex	r3, r2, [r1]
 8004976:	613b      	str	r3, [r7, #16]
   return(result);
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1e6      	bne.n	800494c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004992:	bf00      	nop
 8004994:	3754      	adds	r7, #84	; 0x54
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800499e:	b580      	push	{r7, lr}
 80049a0:	b084      	sub	sp, #16
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff fb4f 	bl	8004060 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049c2:	bf00      	nop
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}

080049ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049ca:	b580      	push	{r7, lr}
 80049cc:	b088      	sub	sp, #32
 80049ce:	af00      	add	r7, sp, #0
 80049d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	e853 3f00 	ldrex	r3, [r3]
 80049de:	60bb      	str	r3, [r7, #8]
   return(result);
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	61bb      	str	r3, [r7, #24]
 80049f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f4:	6979      	ldr	r1, [r7, #20]
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	e841 2300 	strex	r3, r2, [r1]
 80049fc:	613b      	str	r3, [r7, #16]
   return(result);
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1e6      	bne.n	80049d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2220      	movs	r2, #32
 8004a08:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7ff fb1b 	bl	800404c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a16:	bf00      	nop
 8004a18:	3720      	adds	r7, #32
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bd80      	pop	{r7, pc}

08004a1e <SerialAPI_WriteByte>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	byte - byte to write
 */
static void SerialAPI_WriteByte (sbgcGeneral_t *gSBGC, ui8 byte)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
 8004a26:	460b      	mov	r3, r1
 8004a28:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d157      	bne.n	8004ae4 <SerialAPI_WriteByte+0xc6>

	if (calculateFreeTx_() < sizeof(ui8))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d310      	bcc.n	8004a6a <SerialAPI_WriteByte+0x4c>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a50:	461a      	mov	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a60:	bf0c      	ite	eq
 8004a62:	2301      	moveq	r3, #1
 8004a64:	2300      	movne	r3, #0
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	e00c      	b.n	8004a84 <SerialAPI_WriteByte+0x66>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	bf0c      	ite	eq
 8004a7e:	2301      	moveq	r3, #1
 8004a80:	2300      	movne	r3, #0
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <SerialAPI_WriteByte+0x80>
		serialAPI_Abort()
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	2205      	movs	r2, #5
 8004a98:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004a9c:	e023      	b.n	8004ae6 <SerialAPI_WriteByte+0xc8>

	serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize] = byte;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6852      	ldr	r2, [r2, #4]
 8004aaa:	6a12      	ldr	r2, [r2, #32]
 8004aac:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004ab0:	4413      	add	r3, r2
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	701a      	strb	r2, [r3, #0]
	serialAPI_CurCmd_->_payloadSize += sizeof(ui8);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	6a1b      	ldr	r3, [r3, #32]
 8004ac6:	3201      	adds	r2, #1
 8004ac8:	b2d2      	uxtb	r2, r2
 8004aca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gSBGC->_api->txCommandBuffHead += sizeof(ui8);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	3201      	adds	r2, #1
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004ae2:	e000      	b.n	8004ae6 <SerialAPI_WriteByte+0xc8>
	serialAPI_Assert()
 8004ae4:	bf00      	nop
}
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <SerialAPI_ReadByte>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read byte
 */
static ui8 SerialAPI_ReadByte (sbgcGeneral_t *gSBGC)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
	ui8 byte = (ui8)*serialAPI_CurCmd_->_payload;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	73fb      	strb	r3, [r7, #15]

	if (((uintptr_t)serialAPI_CurCmd_->_payload) != calculateEndRx_())
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b14:	33ff      	adds	r3, #255	; 0xff
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d006      	beq.n	8004b28 <SerialAPI_ReadByte+0x38>
		serialAPI_CurCmd_->_payload++;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b22:	3201      	adds	r2, #1
 8004b24:	629a      	str	r2, [r3, #40]	; 0x28
 8004b26:	e006      	b.n	8004b36 <SerialAPI_ReadByte+0x46>

	else
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685a      	ldr	r2, [r3, #4]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	6a1b      	ldr	r3, [r3, #32]
 8004b32:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28

	return byte;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3714      	adds	r7, #20
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <SerialAPI_WriteWord>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	word - two bytes to write
 */
static void SerialAPI_WriteWord (sbgcGeneral_t *gSBGC, ui16 word)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	460b      	mov	r3, r1
 8004b4e:	807b      	strh	r3, [r7, #2]
	serialAPI_Assert()
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d15e      	bne.n	8004c18 <SerialAPI_WriteWord+0xd4>

	if (calculateFreeTx_() < sizeof(ui16))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d311      	bcc.n	8004b92 <SerialAPI_WriteWord+0x4e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004b76:	461a      	mov	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	bf94      	ite	ls
 8004b8a:	2301      	movls	r3, #1
 8004b8c:	2300      	movhi	r3, #0
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	e00e      	b.n	8004bb0 <SerialAPI_WriteWord+0x6c>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	bf94      	ite	ls
 8004baa:	2301      	movls	r3, #1
 8004bac:	2300      	movhi	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d00a      	beq.n	8004bca <SerialAPI_WriteWord+0x86>
		serialAPI_Abort()
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2203      	movs	r2, #3
 8004bba:	701a      	strb	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	2205      	movs	r2, #5
 8004bc4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004bc8:	e027      	b.n	8004c1a <SerialAPI_WriteWord+0xd6>

	gSBGC->_api->toLE(&word, &serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], sizeof(ui16));
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6852      	ldr	r2, [r2, #4]
 8004bd4:	6a12      	ldr	r2, [r2, #32]
 8004bd6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004bd8:	6879      	ldr	r1, [r7, #4]
 8004bda:	6849      	ldr	r1, [r1, #4]
 8004bdc:	6a09      	ldr	r1, [r1, #32]
 8004bde:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8004be2:	4411      	add	r1, r2
 8004be4:	1cb8      	adds	r0, r7, #2
 8004be6:	2202      	movs	r2, #2
 8004be8:	4798      	blx	r3
	serialAPI_CurCmd_->_payloadSize += sizeof(ui16);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	3202      	adds	r2, #2
 8004bfc:	b2d2      	uxtb	r2, r2
 8004bfe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gSBGC->_api->txCommandBuffHead += sizeof(ui16);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	3202      	adds	r2, #2
 8004c10:	b2d2      	uxtb	r2, r2
 8004c12:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004c16:	e000      	b.n	8004c1a <SerialAPI_WriteWord+0xd6>
	serialAPI_Assert()
 8004c18:	bf00      	nop
}
 8004c1a:	3708      	adds	r7, #8
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <SerialAPI_ReadWord>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read word
 */
static ui16 SerialAPI_ReadWord (sbgcGeneral_t *gSBGC)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
	ui16 word;

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (sizeof(ui16) - 1)))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d225      	bcs.n	8004c8c <SerialAPI_ReadWord+0x6c>
	{
		ui8 wordBuff [2];

		wordBuff[0] = *serialAPI_CurCmd_->_payload;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	733b      	strb	r3, [r7, #12]
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	685a      	ldr	r2, [r3, #4]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c58:	629a      	str	r2, [r3, #40]	; 0x28
		wordBuff[1] = *serialAPI_CurCmd_->_payload;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	737b      	strb	r3, [r7, #13]
		serialAPI_CurCmd_->_payload += sizeof(ui8);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	6a1b      	ldr	r3, [r3, #32]
 8004c74:	3201      	adds	r2, #1
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28
		gSBGC->_api->fromLE(&word, wordBuff, sizeof(ui16));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c7e:	f107 010c 	add.w	r1, r7, #12
 8004c82:	f107 000e 	add.w	r0, r7, #14
 8004c86:	2202      	movs	r2, #2
 8004c88:	4798      	blx	r3
 8004c8a:	e013      	b.n	8004cb4 <SerialAPI_ReadWord+0x94>
	}

	else
	{
		gSBGC->_api->fromLE(&word, serialAPI_CurCmd_->_payload, sizeof(ui16));
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	6852      	ldr	r2, [r2, #4]
 8004c96:	6a12      	ldr	r2, [r2, #32]
 8004c98:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004c9a:	f107 000e 	add.w	r0, r7, #14
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	4798      	blx	r3
		serialAPI_CurCmd_->_payload += sizeof(ui16);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	6a1b      	ldr	r3, [r3, #32]
 8004cb0:	3202      	adds	r2, #2
 8004cb2:	629a      	str	r2, [r3, #40]	; 0x28
	}

	if (((uintptr_t)serialAPI_CurCmd_->_payload) > calculateEndRx_())
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc4:	33ff      	adds	r3, #255	; 0xff
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d906      	bls.n	8004cd8 <SerialAPI_ReadWord+0xb8>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

	return word;
 8004cd8:	89fb      	ldrh	r3, [r7, #14]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <SerialAPI_WriteLong>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	dword - four bytes to write
 */
static void SerialAPI_WriteLong (sbgcGeneral_t *gSBGC, ui32 dword)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b082      	sub	sp, #8
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
 8004cea:	6039      	str	r1, [r7, #0]
	serialAPI_Assert()
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d15e      	bne.n	8004db4 <SerialAPI_WriteLong+0xd2>

	if (calculateFreeTx_() < sizeof(ui32))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d311      	bcc.n	8004d2e <SerialAPI_WriteLong+0x4c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d12:	461a      	mov	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	bf94      	ite	ls
 8004d26:	2301      	movls	r3, #1
 8004d28:	2300      	movhi	r3, #0
 8004d2a:	b2db      	uxtb	r3, r3
 8004d2c:	e00e      	b.n	8004d4c <SerialAPI_WriteLong+0x6a>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	2b03      	cmp	r3, #3
 8004d44:	bf94      	ite	ls
 8004d46:	2301      	movls	r3, #1
 8004d48:	2300      	movhi	r3, #0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <SerialAPI_WriteLong+0x84>
		serialAPI_Abort()
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	2203      	movs	r2, #3
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	6a1b      	ldr	r3, [r3, #32]
 8004d5e:	2205      	movs	r2, #5
 8004d60:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004d64:	e027      	b.n	8004db6 <SerialAPI_WriteLong+0xd4>

	gSBGC->_api->toLE(&dword, &serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], 4);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	687a      	ldr	r2, [r7, #4]
 8004d6e:	6852      	ldr	r2, [r2, #4]
 8004d70:	6a12      	ldr	r2, [r2, #32]
 8004d72:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	6849      	ldr	r1, [r1, #4]
 8004d78:	6a09      	ldr	r1, [r1, #32]
 8004d7a:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8004d7e:	4411      	add	r1, r2
 8004d80:	4638      	mov	r0, r7
 8004d82:	2204      	movs	r2, #4
 8004d84:	4798      	blx	r3
	serialAPI_CurCmd_->_payloadSize += sizeof(ui32);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	6a1b      	ldr	r3, [r3, #32]
 8004d96:	3204      	adds	r2, #4
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gSBGC->_api->txCommandBuffHead += sizeof(ui32);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	3204      	adds	r2, #4
 8004dac:	b2d2      	uxtb	r2, r2
 8004dae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004db2:	e000      	b.n	8004db6 <SerialAPI_WriteLong+0xd4>
	serialAPI_Assert()
 8004db4:	bf00      	nop
}
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <SerialAPI_ReadLong>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read long
 */
static ui32 SerialAPI_ReadLong (sbgcGeneral_t *gSBGC)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
	ui32 dword;

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (sizeof(ui32) - 1)))
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dca:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	6a1b      	ldr	r3, [r3, #32]
 8004dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd6:	3303      	adds	r3, #3
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d23e      	bcs.n	8004e5a <SerialAPI_ReadLong+0x9e>
	{
		ui8 longBuff [4];
		ui8 cutSize = (calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de2:	461a      	mov	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	75fb      	strb	r3, [r7, #23]

		memcpy(longBuff, serialAPI_CurCmd_->_payload, cutSize);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	6a1b      	ldr	r3, [r3, #32]
 8004df6:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004df8:	7dfa      	ldrb	r2, [r7, #23]
 8004dfa:	f107 030c 	add.w	r3, r7, #12
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f004 fd3c 	bl	800987c <memcpy>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004e10:	629a      	str	r2, [r3, #40]	; 0x28
		memcpy(&longBuff[cutSize], serialAPI_CurCmd_->_payload, sizeof(ui32) - cutSize);
 8004e12:	7dfb      	ldrb	r3, [r7, #23]
 8004e14:	f107 020c 	add.w	r2, r7, #12
 8004e18:	18d0      	adds	r0, r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	6a1b      	ldr	r3, [r3, #32]
 8004e20:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	f1c3 0304 	rsb	r3, r3, #4
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f004 fd27 	bl	800987c <memcpy>
		serialAPI_CurCmd_->_payload += sizeof(ui32) - cutSize;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004e36:	7dfb      	ldrb	r3, [r7, #23]
 8004e38:	f1c3 0204 	rsb	r2, r3, #4
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	6a1b      	ldr	r3, [r3, #32]
 8004e42:	440a      	add	r2, r1
 8004e44:	629a      	str	r2, [r3, #40]	; 0x28
		gSBGC->_api->fromLE(&dword, longBuff, sizeof(ui32));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4c:	f107 010c 	add.w	r1, r7, #12
 8004e50:	f107 0010 	add.w	r0, r7, #16
 8004e54:	2204      	movs	r2, #4
 8004e56:	4798      	blx	r3
 8004e58:	e013      	b.n	8004e82 <SerialAPI_ReadLong+0xc6>
	}

	else
	{
		gSBGC->_api->fromLE(&dword, serialAPI_CurCmd_->_payload, sizeof(ui32));
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6852      	ldr	r2, [r2, #4]
 8004e64:	6a12      	ldr	r2, [r2, #32]
 8004e66:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8004e68:	f107 0010 	add.w	r0, r7, #16
 8004e6c:	2204      	movs	r2, #4
 8004e6e:	4798      	blx	r3
		serialAPI_CurCmd_->_payload += 4;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	3204      	adds	r2, #4
 8004e80:	629a      	str	r2, [r3, #40]	; 0x28
	}

	if (((uintptr_t)serialAPI_CurCmd_->_payload) > calculateEndRx_())
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e92:	33ff      	adds	r3, #255	; 0xff
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d906      	bls.n	8004ea6 <SerialAPI_ReadLong+0xea>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ea4:	629a      	str	r2, [r3, #40]	; 0x28

	return dword;
 8004ea6:	693b      	ldr	r3, [r7, #16]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <SerialAPI_WriteBuff>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*buff - written data
 *	@param	size - written data size
 */
static void SerialAPI_WriteBuff (sbgcGeneral_t *gSBGC, const void *buff, ui8 size)
{
 8004eb0:	b590      	push	{r4, r7, lr}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	71fb      	strb	r3, [r7, #7]
	serialAPI_Assert()
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d15e      	bne.n	8004f86 <SerialAPI_WriteBuff+0xd6>

	if (!size) return;
 8004ec8:	79fb      	ldrb	r3, [r7, #7]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d05d      	beq.n	8004f8a <SerialAPI_WriteBuff+0xda>

	if (calculateFreeTx_() < size)
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d30c      	bcc.n	8004efc <SerialAPI_WriteBuff+0x4c>
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004eea:	461a      	mov	r2, r3
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8004efa:	e009      	b.n	8004f10 <SerialAPI_WriteBuff+0x60>
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f04:	461a      	mov	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	79fa      	ldrb	r2, [r7, #7]
 8004f12:	4293      	cmp	r3, r2
 8004f14:	da0a      	bge.n	8004f2c <SerialAPI_WriteBuff+0x7c>
		serialAPI_Abort()
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2203      	movs	r2, #3
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	2205      	movs	r2, #5
 8004f26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8004f2a:	e02f      	b.n	8004f8c <SerialAPI_WriteBuff+0xdc>

	#if (SBGC_SYS_BIG_ENDIAN)
		sbgcParserMap_t parserMap = gSBGC->_api->getCmdPM(serialAPI_CurCmd_);
	#else
		sbgcParserMap_t parserMap = PM_DEFAULT_8BIT;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	75fb      	strb	r3, [r7, #23]
	#endif

	serialAPI_CurCmd_->_payloadSize +=
			gSBGC->_api->convWithPM(&serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], buff, size, parserMap);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	6852      	ldr	r2, [r2, #4]
 8004f42:	6a12      	ldr	r2, [r2, #32]
 8004f44:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8004f48:	1898      	adds	r0, r3, r2
 8004f4a:	7dfb      	ldrb	r3, [r7, #23]
 8004f4c:	79fa      	ldrb	r2, [r7, #7]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	47a0      	blx	r4
 8004f52:	4603      	mov	r3, r0
 8004f54:	4619      	mov	r1, r3
	serialAPI_CurCmd_->_payloadSize +=
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	6a1b      	ldr	r3, [r3, #32]
 8004f5c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	440a      	add	r2, r1
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	gSBGC->_api->txCommandBuffHead += size;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	79fa      	ldrb	r2, [r7, #7]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8004f84:	e002      	b.n	8004f8c <SerialAPI_WriteBuff+0xdc>
	serialAPI_Assert()
 8004f86:	bf00      	nop
 8004f88:	e000      	b.n	8004f8c <SerialAPI_WriteBuff+0xdc>
	if (!size) return;
 8004f8a:	bf00      	nop
}
 8004f8c:	371c      	adds	r7, #28
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd90      	pop	{r4, r7, pc}

08004f92 <SerialAPI_ReadBuff>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*buff - where data will be written
 *	@param	size - read data size
 */
static void SerialAPI_ReadBuff (sbgcGeneral_t *gSBGC, void *buff, ui8 size)
{
 8004f92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f96:	b089      	sub	sp, #36	; 0x24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	60f8      	str	r0, [r7, #12]
 8004f9c:	60b9      	str	r1, [r7, #8]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	71fb      	strb	r3, [r7, #7]
	sbgcParserMap_t parserMap = gSBGC->_api->getCmdPM(serialAPI_CurCmd_);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	6852      	ldr	r2, [r2, #4]
 8004fac:	6a12      	ldr	r2, [r2, #32]
 8004fae:	4610      	mov	r0, r2
 8004fb0:	4798      	blx	r3
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	77fb      	strb	r3, [r7, #31]

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (size - 1)))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc8:	4619      	mov	r1, r3
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	440b      	add	r3, r1
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d266      	bcs.n	80050a2 <SerialAPI_ReadBuff+0x110>
	{
 8004fd4:	466b      	mov	r3, sp
 8004fd6:	461e      	mov	r6, r3
		ui8 buffTemp [size];
 8004fd8:	79f9      	ldrb	r1, [r7, #7]
 8004fda:	460b      	mov	r3, r1
 8004fdc:	3b01      	subs	r3, #1
 8004fde:	61bb      	str	r3, [r7, #24]
 8004fe0:	b2cb      	uxtb	r3, r1
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	4698      	mov	r8, r3
 8004fe6:	4691      	mov	r9, r2
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	f04f 0300 	mov.w	r3, #0
 8004ff0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ff4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ff8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ffc:	b2cb      	uxtb	r3, r1
 8004ffe:	2200      	movs	r2, #0
 8005000:	461c      	mov	r4, r3
 8005002:	4615      	mov	r5, r2
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	00eb      	lsls	r3, r5, #3
 800500e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005012:	00e2      	lsls	r2, r4, #3
 8005014:	460b      	mov	r3, r1
 8005016:	3307      	adds	r3, #7
 8005018:	08db      	lsrs	r3, r3, #3
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	ebad 0d03 	sub.w	sp, sp, r3
 8005020:	466b      	mov	r3, sp
 8005022:	3300      	adds	r3, #0
 8005024:	617b      	str	r3, [r7, #20]
		ui8 cutSize = (calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502c:	461a      	mov	r2, r3
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	74fb      	strb	r3, [r7, #19]

		memcpy(buffTemp, serialAPI_CurCmd_->_payload, cutSize);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	7cfa      	ldrb	r2, [r7, #19]
 8005044:	4619      	mov	r1, r3
 8005046:	6978      	ldr	r0, [r7, #20]
 8005048:	f004 fc18 	bl	800987c <memcpy>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	685a      	ldr	r2, [r3, #4]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005058:	629a      	str	r2, [r3, #40]	; 0x28
		memcpy(&buffTemp[cutSize], serialAPI_CurCmd_->_payload, size - cutSize);
 800505a:	7cfb      	ldrb	r3, [r7, #19]
 800505c:	697a      	ldr	r2, [r7, #20]
 800505e:	18d0      	adds	r0, r2, r3
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005068:	79fa      	ldrb	r2, [r7, #7]
 800506a:	7cfb      	ldrb	r3, [r7, #19]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	461a      	mov	r2, r3
 8005070:	f004 fc04 	bl	800987c <memcpy>
		serialAPI_CurCmd_->_payload += size - cutSize;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800507c:	79f9      	ldrb	r1, [r7, #7]
 800507e:	7cfb      	ldrb	r3, [r7, #19]
 8005080:	1acb      	subs	r3, r1, r3
 8005082:	4619      	mov	r1, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	440a      	add	r2, r1
 800508c:	629a      	str	r2, [r3, #40]	; 0x28
		gSBGC->_api->convWithPM(buff, buffTemp, size, parserMap);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8005094:	7ffb      	ldrb	r3, [r7, #31]
 8005096:	79fa      	ldrb	r2, [r7, #7]
 8005098:	6979      	ldr	r1, [r7, #20]
 800509a:	68b8      	ldr	r0, [r7, #8]
 800509c:	47a0      	blx	r4
 800509e:	46b5      	mov	sp, r6
	}

	else
		serialAPI_CurCmd_->_payload += gSBGC->_api->convWithPM(buff, serialAPI_CurCmd_->_payload, size, parserMap);
}
 80050a0:	e015      	b.n	80050ce <SerialAPI_ReadBuff+0x13c>
		serialAPI_CurCmd_->_payload += gSBGC->_api->convWithPM(buff, serialAPI_CurCmd_->_payload, size, parserMap);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80050b0:	7ffb      	ldrb	r3, [r7, #31]
 80050b2:	79fa      	ldrb	r2, [r7, #7]
 80050b4:	68b8      	ldr	r0, [r7, #8]
 80050b6:	47a0      	blx	r4
 80050b8:	4603      	mov	r3, r0
 80050ba:	4619      	mov	r1, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	440a      	add	r2, r1
 80050cc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80050ce:	bf00      	nop
 80050d0:	3724      	adds	r7, #36	; 0x24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080050d8 <SerialAPI_WriteEmptyBuff>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	size - size of filled with zeros data
 */
static void SerialAPI_WriteEmptyBuff (sbgcGeneral_t *gSBGC, ui8 size)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d156      	bne.n	800519c <SerialAPI_WriteEmptyBuff+0xc4>

	if (calculateFreeTx_() < size)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050fe:	429a      	cmp	r2, r3
 8005100:	d30c      	bcc.n	800511c <SerialAPI_WriteEmptyBuff+0x44>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800510a:	461a      	mov	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800511a:	e009      	b.n	8005130 <SerialAPI_WriteEmptyBuff+0x58>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8005124:	461a      	mov	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	78fa      	ldrb	r2, [r7, #3]
 8005132:	4293      	cmp	r3, r2
 8005134:	da0a      	bge.n	800514c <SerialAPI_WriteEmptyBuff+0x74>
		serialAPI_Abort()
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2203      	movs	r2, #3
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	2205      	movs	r2, #5
 8005146:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800514a:	e028      	b.n	800519e <SerialAPI_WriteEmptyBuff+0xc6>

	memset(&serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], 0, size);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	6852      	ldr	r2, [r2, #4]
 8005158:	6a12      	ldr	r2, [r2, #32]
 800515a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800515e:	4413      	add	r3, r2
 8005160:	78fa      	ldrb	r2, [r7, #3]
 8005162:	2100      	movs	r1, #0
 8005164:	4618      	mov	r0, r3
 8005166:	f004 fb97 	bl	8009898 <memset>
	serialAPI_CurCmd_->_payloadSize += size;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	6a1b      	ldr	r3, [r3, #32]
 8005170:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	6a1b      	ldr	r3, [r3, #32]
 800517a:	78fa      	ldrb	r2, [r7, #3]
 800517c:	440a      	add	r2, r1
 800517e:	b2d2      	uxtb	r2, r2
 8005180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	gSBGC->_api->txCommandBuffHead += size;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	440a      	add	r2, r1
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800519a:	e000      	b.n	800519e <SerialAPI_WriteEmptyBuff+0xc6>
	serialAPI_Assert()
 800519c:	bf00      	nop
}
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <SerialAPI_SkipBytes>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	size - size of skipped data
 */
static void SerialAPI_SkipBytes (sbgcGeneral_t *gSBGC, ui8 size)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	70fb      	strb	r3, [r7, #3]
	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + size))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b6:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	4619      	mov	r1, r3
 80051c4:	78fb      	ldrb	r3, [r7, #3]
 80051c6:	440b      	add	r3, r1
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d216      	bcs.n	80051fa <SerialAPI_SkipBytes+0x56>
	{
		ui8 restSize = size - ((calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d4:	461a      	mov	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	78fb      	ldrb	r3, [r7, #3]
 80051e2:	4413      	add	r3, r2
 80051e4:	73fb      	strb	r3, [r7, #15]

		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff + restSize;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051ec:	7bfa      	ldrb	r2, [r7, #15]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	440a      	add	r2, r1
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
	}

	else
		serialAPI_CurCmd_->_payload += size;
}
 80051f8:	e009      	b.n	800520e <SerialAPI_SkipBytes+0x6a>
		serialAPI_CurCmd_->_payload += size;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005202:	78fa      	ldrb	r2, [r7, #3]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	440a      	add	r2, r1
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800520e:	bf00      	nop
 8005210:	3714      	adds	r7, #20
 8005212:	46bd      	mov	sp, r7
 8005214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005218:	4770      	bx	lr

0800521a <SerialAPI_StartWrite>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	cmdID - SBGC32 command identifier
 */
static void SerialAPI_StartWrite (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID
								  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b084      	sub	sp, #16
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	4608      	mov	r0, r1
 8005224:	4611      	mov	r1, r2
 8005226:	461a      	mov	r2, r3
 8005228:	4603      	mov	r3, r0
 800522a:	70fb      	strb	r3, [r7, #3]
 800522c:	460b      	mov	r3, r1
 800522e:	70bb      	strb	r3, [r7, #2]
 8005230:	4613      	mov	r3, r2
 8005232:	707b      	strb	r3, [r7, #1]
	/* Lock all SerialAPI operations to add a new command */
	serialAPI_Lock()
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	f040 80de 	bne.w	80053fc <SerialAPI_StartWrite+0x1e2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE)

		for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	e05d      	b.n	800530a <SerialAPI_StartWrite+0xf0>
			if ((gSBGC->_api->commandBuff[i]._commandID == cmdID) && (!(gSBGC->_api->commandBuff[i].parameters & SCParam_RX)) &&
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	6959      	ldr	r1, [r3, #20]
 8005254:	7bfa      	ldrb	r2, [r7, #15]
 8005256:	4613      	mov	r3, r2
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	4413      	add	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	440b      	add	r3, r1
 8005260:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005264:	78fa      	ldrb	r2, [r7, #3]
 8005266:	429a      	cmp	r2, r3
 8005268:	d14c      	bne.n	8005304 <SerialAPI_StartWrite+0xea>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	6959      	ldr	r1, [r3, #20]
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	4613      	mov	r3, r2
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	4413      	add	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	440b      	add	r3, r1
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	b25b      	sxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	db3f      	blt.n	8005304 <SerialAPI_StartWrite+0xea>
				(gSBGC->_api->commandBuff[i].parameters & SCParam_RETAIN) && (!(parameters & SCParam_RETAIN)))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	6959      	ldr	r1, [r3, #20]
 800528a:	7bfa      	ldrb	r2, [r7, #15]
 800528c:	4613      	mov	r3, r2
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	4413      	add	r3, r2
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	440b      	add	r3, r1
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	f003 0304 	and.w	r3, r3, #4
			if ((gSBGC->_api->commandBuff[i]._commandID == cmdID) && (!(gSBGC->_api->commandBuff[i].parameters & SCParam_RX)) &&
 800529c:	2b00      	cmp	r3, #0
 800529e:	d031      	beq.n	8005304 <SerialAPI_StartWrite+0xea>
				(gSBGC->_api->commandBuff[i].parameters & SCParam_RETAIN) && (!(parameters & SCParam_RETAIN)))
 80052a0:	78bb      	ldrb	r3, [r7, #2]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d12c      	bne.n	8005304 <SerialAPI_StartWrite+0xea>
			/* The serial command must be freed */
			{
				serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[i];
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	6959      	ldr	r1, [r3, #20]
 80052b0:	7bfa      	ldrb	r2, [r7, #15]
 80052b2:	4613      	mov	r3, r2
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	4413      	add	r3, r2
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	461a      	mov	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	440a      	add	r2, r1
 80052c2:	621a      	str	r2, [r3, #32]

				serialAPI_CurCmd_->parameters = (serialAPI_CommandParam_t)parameters;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	78ba      	ldrb	r2, [r7, #2]
 80052cc:	701a      	strb	r2, [r3, #0]
				serialAPI_CurCmd_->priority = priority;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	6a1b      	ldr	r3, [r3, #32]
 80052d4:	787a      	ldrb	r2, [r7, #1]
 80052d6:	705a      	strb	r2, [r3, #1]
				serialAPI_CurCmd_->timeout = timeout;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	69ba      	ldr	r2, [r7, #24]
 80052e0:	605a      	str	r2, [r3, #4]

				#if (SBGC_USES_CALLBACKS)

					serialAPI_CurCmd_->callback = callback;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	6a1b      	ldr	r3, [r3, #32]
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	609a      	str	r2, [r3, #8]
					serialAPI_CurCmd_->callbackArg = callbackArg;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f4:	60da      	str	r2, [r3, #12]

				#endif

				serialAPI_CurCmd_->_state = SCState_FORMING;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	2201      	movs	r2, #1
 80052fe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

				/* Continue to register the command */
				return;
 8005302:	e07c      	b.n	80053fe <SerialAPI_StartWrite+0x1e4>
		for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8005304:	7bfb      	ldrb	r3, [r7, #15]
 8005306:	3301      	adds	r3, #1
 8005308:	73fb      	strb	r3, [r7, #15]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	7e1b      	ldrb	r3, [r3, #24]
 8005310:	7bfa      	ldrb	r2, [r7, #15]
 8005312:	429a      	cmp	r2, r3
 8005314:	d39b      	bcc.n	800524e <SerialAPI_StartWrite+0x34>
			}

	#endif

	if (gSBGC->_api->commandNumber >= SBGC_MAX_COMMAND_NUM)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	7e1b      	ldrb	r3, [r3, #24]
 800531c:	2b09      	cmp	r3, #9
 800531e:	d907      	bls.n	8005330 <SerialAPI_StartWrite+0x116>
	{
		gSBGC->_lastCommandStatus = sbgcCOMMAND_BUFFER_OVERFLOW_ERROR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2209      	movs	r2, #9
 8005324:	725a      	strb	r2, [r3, #9]
		serialAPI_Error()
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2203      	movs	r2, #3
 800532c:	701a      	strb	r2, [r3, #0]
 800532e:	e066      	b.n	80053fe <SerialAPI_StartWrite+0x1e4>
			}

	#endif

	/* Begin to registration for a new command */
	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[gSBGC->_api->commandNumber];
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	695a      	ldr	r2, [r3, #20]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	7e1b      	ldrb	r3, [r3, #24]
 800533c:	4619      	mov	r1, r3
 800533e:	460b      	mov	r3, r1
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	440b      	add	r3, r1
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	4619      	mov	r1, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	440a      	add	r2, r1
 800534e:	621a      	str	r2, [r3, #32]
	gSBGC->_api->commandNumber++;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	7e1a      	ldrb	r2, [r3, #24]
 8005356:	3201      	adds	r2, #1
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	761a      	strb	r2, [r3, #24]

	clearCmd_(serialAPI_CurCmd_);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	2230      	movs	r2, #48	; 0x30
 8005364:	2100      	movs	r1, #0
 8005366:	4618      	mov	r0, r3
 8005368:	f004 fa96 	bl	8009898 <memset>

	serialAPI_CurCmd_->_payload = &gSBGC->_api->txCommandBuff[gSBGC->_api->txCommandBuffHead];
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800537a:	4619      	mov	r1, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	6a1b      	ldr	r3, [r3, #32]
 8005382:	440a      	add	r2, r1
 8005384:	629a      	str	r2, [r3, #40]	; 0x28

	serialAPI_CurCmd_->_id = ++gSBGC->_api->commandTotalCount;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	69da      	ldr	r2, [r3, #28]
 800538c:	3201      	adds	r2, #1
 800538e:	61da      	str	r2, [r3, #28]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	6852      	ldr	r2, [r2, #4]
 8005394:	6a12      	ldr	r2, [r2, #32]
 8005396:	69db      	ldr	r3, [r3, #28]
 8005398:	6113      	str	r3, [r2, #16]
	serialAPI_CurCmd_->_state = SCState_FORMING;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	serialAPI_CurCmd_->_commandID = cmdID;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	#if (SBGC_NON_BLOCKING_MODE)

		serialAPI_CurCmd_->parameters = (serialAPI_CommandParam_t)(serialAPI_CurCmd_->parameters | parameters);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	7819      	ldrb	r1, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	78ba      	ldrb	r2, [r7, #2]
 80053c2:	430a      	orrs	r2, r1
 80053c4:	b2d2      	uxtb	r2, r2
 80053c6:	701a      	strb	r2, [r3, #0]
		serialAPI_CurCmd_->priority = priority;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	787a      	ldrb	r2, [r7, #1]
 80053d0:	705a      	strb	r2, [r3, #1]
		serialAPI_CurCmd_->timeout = timeout;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	6a1b      	ldr	r3, [r3, #32]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	605a      	str	r2, [r3, #4]

		#if (SBGC_USES_CALLBACKS)

			serialAPI_CurCmd_->callback = callback;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	6a3a      	ldr	r2, [r7, #32]
 80053e4:	609a      	str	r2, [r3, #8]
			serialAPI_CurCmd_->callbackArg = callbackArg;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053ee:	60da      	str	r2, [r3, #12]

		#endif

		gSBGC->_api->commandSortFlag = sbgcFALSE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053fa:	e000      	b.n	80053fe <SerialAPI_StartWrite+0x1e4>
	serialAPI_Lock()
 80053fc:	bf00      	nop

	#endif
}
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <SerialAPI_StartRead>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	cmdID - SBGC32 command identifier
 */
static void SerialAPI_StartRead (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID
								 /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	4608      	mov	r0, r1
 800540e:	4611      	mov	r1, r2
 8005410:	461a      	mov	r2, r3
 8005412:	4603      	mov	r3, r0
 8005414:	70fb      	strb	r3, [r7, #3]
 8005416:	460b      	mov	r3, r1
 8005418:	70bb      	strb	r3, [r7, #2]
 800541a:	4613      	mov	r3, r2
 800541c:	707b      	strb	r3, [r7, #1]
	/* The SerialAPI is always locked at here */

	serialAPI_Assert()
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	f040 80d5 	bne.w	80055d4 <SerialAPI_StartRead+0x1d0>

	#if (SBGC_NON_BLOCKING_MODE)

		for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 800542a:	2300      	movs	r3, #0
 800542c:	73fb      	strb	r3, [r7, #15]
 800542e:	e060      	b.n	80054f2 <SerialAPI_StartRead+0xee>
			if ((gSBGC->_api->commandBuff[i]._commandID == cmdID) && (gSBGC->_api->commandBuff[i].parameters & SCParam_RX) &&
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	6959      	ldr	r1, [r3, #20]
 8005436:	7bfa      	ldrb	r2, [r7, #15]
 8005438:	4613      	mov	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	4413      	add	r3, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	440b      	add	r3, r1
 8005442:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005446:	78fa      	ldrb	r2, [r7, #3]
 8005448:	429a      	cmp	r2, r3
 800544a:	d14f      	bne.n	80054ec <SerialAPI_StartRead+0xe8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	6959      	ldr	r1, [r3, #20]
 8005452:	7bfa      	ldrb	r2, [r7, #15]
 8005454:	4613      	mov	r3, r2
 8005456:	005b      	lsls	r3, r3, #1
 8005458:	4413      	add	r3, r2
 800545a:	011b      	lsls	r3, r3, #4
 800545c:	440b      	add	r3, r1
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	b25b      	sxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	da42      	bge.n	80054ec <SerialAPI_StartRead+0xe8>
				(gSBGC->_api->commandBuff[i].parameters & SCParam_RETAIN) && (!(parameters & SCParam_RETAIN)))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	6959      	ldr	r1, [r3, #20]
 800546c:	7bfa      	ldrb	r2, [r7, #15]
 800546e:	4613      	mov	r3, r2
 8005470:	005b      	lsls	r3, r3, #1
 8005472:	4413      	add	r3, r2
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	440b      	add	r3, r1
 8005478:	781b      	ldrb	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
			if ((gSBGC->_api->commandBuff[i]._commandID == cmdID) && (gSBGC->_api->commandBuff[i].parameters & SCParam_RX) &&
 800547e:	2b00      	cmp	r3, #0
 8005480:	d034      	beq.n	80054ec <SerialAPI_StartRead+0xe8>
				(gSBGC->_api->commandBuff[i].parameters & SCParam_RETAIN) && (!(parameters & SCParam_RETAIN)))
 8005482:	78bb      	ldrb	r3, [r7, #2]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d12f      	bne.n	80054ec <SerialAPI_StartRead+0xe8>
			/* The serial command must be freed */
			{
				serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[i];
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	6959      	ldr	r1, [r3, #20]
 8005492:	7bfa      	ldrb	r2, [r7, #15]
 8005494:	4613      	mov	r3, r2
 8005496:	005b      	lsls	r3, r3, #1
 8005498:	4413      	add	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	461a      	mov	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	440a      	add	r2, r1
 80054a4:	621a      	str	r2, [r3, #32]

				serialAPI_CurCmd_->parameters = (serialAPI_CommandParam_t)(parameters | SCParam_RX);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	78ba      	ldrb	r2, [r7, #2]
 80054ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80054b2:	b2d2      	uxtb	r2, r2
 80054b4:	701a      	strb	r2, [r3, #0]
				serialAPI_CurCmd_->priority = priority;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	787a      	ldrb	r2, [r7, #1]
 80054be:	705a      	strb	r2, [r3, #1]
				serialAPI_CurCmd_->timeout = timeout;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	605a      	str	r2, [r3, #4]

				#if (SBGC_USES_CALLBACKS)

					serialAPI_CurCmd_->callback = callback;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	6a3a      	ldr	r2, [r7, #32]
 80054d2:	609a      	str	r2, [r3, #8]
					serialAPI_CurCmd_->callbackArg = callbackArg;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054dc:	60da      	str	r2, [r3, #12]

				#endif

				serialAPI_CurCmd_->_state = SCState_FORMING;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	2201      	movs	r2, #1
 80054e6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

				/* Continue to register the command */
				return;
 80054ea:	e074      	b.n	80055d6 <SerialAPI_StartRead+0x1d2>
		for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 80054ec:	7bfb      	ldrb	r3, [r7, #15]
 80054ee:	3301      	adds	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	7e1b      	ldrb	r3, [r3, #24]
 80054f8:	7bfa      	ldrb	r2, [r7, #15]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	d398      	bcc.n	8005430 <SerialAPI_StartRead+0x2c>
			}

	#endif

	if (gSBGC->_api->commandNumber >= SBGC_MAX_COMMAND_NUM)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	7e1b      	ldrb	r3, [r3, #24]
 8005504:	2b09      	cmp	r3, #9
 8005506:	d907      	bls.n	8005518 <SerialAPI_StartRead+0x114>
	{
		gSBGC->_lastCommandStatus = sbgcCOMMAND_BUFFER_OVERFLOW_ERROR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2209      	movs	r2, #9
 800550c:	725a      	strb	r2, [r3, #9]
		serialAPI_Error()
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	2203      	movs	r2, #3
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e05e      	b.n	80055d6 <SerialAPI_StartRead+0x1d2>
			}

	#endif

	/* Begin to registration for a new command */
	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[gSBGC->_api->commandNumber];
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	695a      	ldr	r2, [r3, #20]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	7e1b      	ldrb	r3, [r3, #24]
 8005524:	4619      	mov	r1, r3
 8005526:	460b      	mov	r3, r1
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	440b      	add	r3, r1
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	440a      	add	r2, r1
 8005536:	621a      	str	r2, [r3, #32]
	gSBGC->_api->commandNumber++;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	7e1a      	ldrb	r2, [r3, #24]
 800553e:	3201      	adds	r2, #1
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	761a      	strb	r2, [r3, #24]

	clearCmd_(serialAPI_CurCmd_);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	2230      	movs	r2, #48	; 0x30
 800554c:	2100      	movs	r1, #0
 800554e:	4618      	mov	r0, r3
 8005550:	f004 f9a2 	bl	8009898 <memset>

	serialAPI_CurCmd_->_id = ++gSBGC->_api->commandTotalCount;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	69da      	ldr	r2, [r3, #28]
 800555a:	3201      	adds	r2, #1
 800555c:	61da      	str	r2, [r3, #28]
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6852      	ldr	r2, [r2, #4]
 8005562:	6a12      	ldr	r2, [r2, #32]
 8005564:	69db      	ldr	r3, [r3, #28]
 8005566:	6113      	str	r3, [r2, #16]
	serialAPI_CurCmd_->_state = SCState_FORMING;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	2201      	movs	r2, #1
 8005570:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	serialAPI_CurCmd_->_commandID = cmdID;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	685b      	ldr	r3, [r3, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	78fa      	ldrb	r2, [r7, #3]
 800557c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	serialAPI_CurCmd_->parameters = SCParam_RX;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	6a1b      	ldr	r3, [r3, #32]
 8005586:	2280      	movs	r2, #128	; 0x80
 8005588:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE)

		serialAPI_CurCmd_->parameters = (serialAPI_CommandParam_t)(serialAPI_CurCmd_->parameters | parameters);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	7819      	ldrb	r1, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	6a1b      	ldr	r3, [r3, #32]
 8005598:	78ba      	ldrb	r2, [r7, #2]
 800559a:	430a      	orrs	r2, r1
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]
		serialAPI_CurCmd_->priority = priority;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	787a      	ldrb	r2, [r7, #1]
 80055a8:	705a      	strb	r2, [r3, #1]
		serialAPI_CurCmd_->timeout = timeout;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	69ba      	ldr	r2, [r7, #24]
 80055b2:	605a      	str	r2, [r3, #4]

		#if (SBGC_USES_CALLBACKS)

			serialAPI_CurCmd_->callback = callback;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	6a3a      	ldr	r2, [r7, #32]
 80055bc:	609a      	str	r2, [r3, #8]
			serialAPI_CurCmd_->callbackArg = callbackArg;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c6:	60da      	str	r2, [r3, #12]

		#endif

		gSBGC->_api->commandSortFlag = sbgcFALSE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	2200      	movs	r2, #0
 80055ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80055d2:	e000      	b.n	80055d6 <SerialAPI_StartRead+0x1d2>
	serialAPI_Assert()
 80055d4:	bf00      	nop

	#endif
}
 80055d6:	3710      	adds	r7, #16
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <SerialAPI_FinishWrite>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_FinishWrite (sbgcGeneral_t *gSBGC)
{
 80055dc:	b480      	push	{r7}
 80055de:	b083      	sub	sp, #12
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
	serialAPI_Assert()
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d110      	bne.n	8005610 <SerialAPI_FinishWrite+0x34>
		}

	#endif

	#if (SBGC_USES_TOKENS)
		gSBGC->_api->lastCommandToken = ((sbgcCommandToken_t)serialAPI_CurCmd_->_id) & 0x000000FF;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	6a1b      	ldr	r3, [r3, #32]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	b2d2      	uxtb	r2, r2
 80055fe:	b292      	uxth	r2, r2
 8005600:	84da      	strh	r2, [r3, #38]	; 0x26
	#endif

	serialAPI_CurCmd_->_state = SCState_PREPARED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	2202      	movs	r2, #2
 800560a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800560e:	e000      	b.n	8005612 <SerialAPI_FinishWrite+0x36>
	serialAPI_Assert()
 8005610:	bf00      	nop
}
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <SerialAPI_FinishRead>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_FinishRead (sbgcGeneral_t *gSBGC)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	serialAPI_Assert()
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b01      	cmp	r3, #1
 800562c:	d11f      	bne.n	800566e <SerialAPI_FinishRead+0x52>

	#endif

	#if (SBGC_USES_TOKENS)

		gSBGC->_api->lastCommandToken &= 0x00FF;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	b2d2      	uxtb	r2, r2
 800563a:	b292      	uxth	r2, r2
 800563c:	84da      	strh	r2, [r3, #38]	; 0x26
		gSBGC->_api->lastCommandToken |= (((sbgcCommandToken_t)serialAPI_CurCmd_->_id) << 8) & 0x0000FF00;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005644:	b21a      	sxth	r2, r3
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	6a1b      	ldr	r3, [r3, #32]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	b29b      	uxth	r3, r3
 8005650:	021b      	lsls	r3, r3, #8
 8005652:	b21b      	sxth	r3, r3
 8005654:	4313      	orrs	r3, r2
 8005656:	b21a      	sxth	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	b292      	uxth	r2, r2
 800565e:	84da      	strh	r2, [r3, #38]	; 0x26

	#endif

	serialAPI_CurCmd_->_state = SCState_PREPARED;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	6a1b      	ldr	r3, [r3, #32]
 8005666:	2202      	movs	r2, #2
 8005668:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800566c:	e000      	b.n	8005670 <SerialAPI_FinishRead+0x54>
	serialAPI_Assert()
 800566e:	bf00      	nop
}
 8005670:	370c      	adds	r7, #12
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <SerialAPI_AbortLastCmd>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_AbortLastCmd (sbgcGeneral_t *gSBGC)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
	#if (SBGC_USES_LOGS)
		gSBGC->_api->writeLog(gSBGC, &lastCommand_);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	6959      	ldr	r1, [r3, #20]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	7e1b      	ldrb	r3, [r3, #24]
 8005694:	4618      	mov	r0, r3
 8005696:	4603      	mov	r3, r0
 8005698:	005b      	lsls	r3, r3, #1
 800569a:	4403      	add	r3, r0
 800569c:	011b      	lsls	r3, r3, #4
 800569e:	3b30      	subs	r3, #48	; 0x30
 80056a0:	440b      	add	r3, r1
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	4790      	blx	r2
	#endif

	clearCmd_(&lastCommand_);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	695a      	ldr	r2, [r3, #20]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	7e1b      	ldrb	r3, [r3, #24]
 80056b4:	4619      	mov	r1, r3
 80056b6:	460b      	mov	r3, r1
 80056b8:	005b      	lsls	r3, r3, #1
 80056ba:	440b      	add	r3, r1
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	3b30      	subs	r3, #48	; 0x30
 80056c0:	4413      	add	r3, r2
 80056c2:	2230      	movs	r2, #48	; 0x30
 80056c4:	2100      	movs	r1, #0
 80056c6:	4618      	mov	r0, r3
 80056c8:	f004 f8e6 	bl	8009898 <memset>
	gSBGC->_api->commandNumber--;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	7e1a      	ldrb	r2, [r3, #24]
 80056d2:	3a01      	subs	r2, #1
 80056d4:	b2d2      	uxtb	r2, r2
 80056d6:	761a      	strb	r2, [r3, #24]
}
 80056d8:	bf00      	nop
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <PostCheckConfirmation>:
	 *			See @ref SerialAPI_AddConfirmationCommand function
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 */
	static void PostCheckConfirmation (sbgcGeneral_t *gSBGC)
	{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
		sbgcConfirm_t *confirm = (sbgcConfirm_t*)serialAPI_CurCmdDest_;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	69db      	ldr	r3, [r3, #28]
 80056f0:	60fb      	str	r3, [r7, #12]

		SerialAPI_SkipBytes(gSBGC, 1);  // Skip commandID
 80056f2:	2101      	movs	r1, #1
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff fd55 	bl	80051a4 <SerialAPI_SkipBytes>

		if (serialAPI_CurCmd_->_commandID == CMD_CONFIRM)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005704:	2b43      	cmp	r3, #67	; 0x43
 8005706:	d122      	bne.n	800574e <PostCheckConfirmation+0x6e>
		{
			if (serialAPI_CurCmd_->_payloadSize == 2)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005712:	2b02      	cmp	r3, #2
 8005714:	d108      	bne.n	8005728 <PostCheckConfirmation+0x48>
				confirm->cmdData = SerialAPI_ReadByte(gSBGC);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f7ff f9ea 	bl	8004af0 <SerialAPI_ReadByte>
 800571c:	4603      	mov	r3, r0
 800571e:	b29a      	uxth	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8a3 2001 	strh.w	r2, [r3, #1]
 8005726:	e00e      	b.n	8005746 <PostCheckConfirmation+0x66>

			else if (serialAPI_CurCmd_->_payloadSize == 3)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005732:	2b03      	cmp	r3, #3
 8005734:	d107      	bne.n	8005746 <PostCheckConfirmation+0x66>
				confirm->cmdData = SerialAPI_ReadWord(gSBGC);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7ff fa72 	bl	8004c20 <SerialAPI_ReadWord>
 800573c:	4603      	mov	r3, r0
 800573e:	461a      	mov	r2, r3
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f8a3 2001 	strh.w	r2, [r3, #1]

			confirm->status = sbgcCONFIRM_RECEIVED;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	71da      	strb	r2, [r3, #7]
			if (serialAPI_CurCmd_->_payloadSize > 1)
				SerialAPI_ReadBuff(gSBGC, confirm->errorData, 4);

			confirm->status = sbgcCONFIRM_ERROR;
		}
	}
 800574c:	e01e      	b.n	800578c <PostCheckConfirmation+0xac>
		else if (serialAPI_CurCmd_->_commandID == CMD_ERROR)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	6a1b      	ldr	r3, [r3, #32]
 8005754:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005758:	2bff      	cmp	r3, #255	; 0xff
 800575a:	d117      	bne.n	800578c <PostCheckConfirmation+0xac>
			confirm->errorCode = SerialAPI_ReadByte(gSBGC);
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f7ff f9c7 	bl	8004af0 <SerialAPI_ReadByte>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	705a      	strb	r2, [r3, #1]
			if (serialAPI_CurCmd_->_payloadSize > 1)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005774:	2b01      	cmp	r3, #1
 8005776:	d906      	bls.n	8005786 <PostCheckConfirmation+0xa6>
				SerialAPI_ReadBuff(gSBGC, confirm->errorData, 4);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	3302      	adds	r3, #2
 800577c:	2204      	movs	r2, #4
 800577e:	4619      	mov	r1, r3
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff fc06 	bl	8004f92 <SerialAPI_ReadBuff>
			confirm->status = sbgcCONFIRM_ERROR;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2202      	movs	r2, #2
 800578a:	71da      	strb	r2, [r3, #7]
	}
 800578c:	bf00      	nop
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <SerialAPI_AssignSystemEvent>:
 *			directly to pDestination
 *	@param	*pDestination - where the data will be written or changed
 *	@param	size - destination buffer size
 */
static void SerialAPI_AssignSystemEvent (sbgcGeneral_t *gSBGC, serialAPI_Event_t serialAPI_Event, void *pDestination, ui16 size)
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
 80057a0:	807b      	strh	r3, [r7, #2]
	serialAPI_Assert()
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d10f      	bne.n	80057cc <SerialAPI_AssignSystemEvent+0x38>
		if (pDestination == NULL)
			serialAPI_Abort()

	#endif

	serialAPI_CurCmd_->_serialAPI_Event = serialAPI_Event;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	619a      	str	r2, [r3, #24]
	serialAPI_CurCmd_->_pDestination = pDestination;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	61da      	str	r2, [r3, #28]
	serialAPI_CurCmd_->_destinationSize = size;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	887a      	ldrh	r2, [r7, #2]
 80057c8:	841a      	strh	r2, [r3, #32]
 80057ca:	e000      	b.n	80057ce <SerialAPI_AssignSystemEvent+0x3a>
	serialAPI_Assert()
 80057cc:	bf00      	nop
}
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <SerialAPI_AddConfirmationCommand>:
 *	@param	cmdID - identifier of the command
 *			that needs to be confirmed
 */
static void SerialAPI_AddConfirmationCommand (sbgcGeneral_t *gSBGC, sbgcConfirm_t *confirm, serialAPI_CommandID_t cmdID
											  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b088      	sub	sp, #32
 80057dc:	af04      	add	r7, sp, #16
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	4611      	mov	r1, r2
 80057e4:	461a      	mov	r2, r3
 80057e6:	460b      	mov	r3, r1
 80057e8:	71fb      	strb	r3, [r7, #7]
 80057ea:	4613      	mov	r3, r2
 80057ec:	71bb      	strb	r3, [r7, #6]
	serialAPI_Assert()
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d12f      	bne.n	8005858 <SerialAPI_AddConfirmationCommand+0x80>

	if (confirm == SBGC_NO_CONFIRM) return;
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d02e      	beq.n	800585c <SerialAPI_AddConfirmationCommand+0x84>

	#if (SBGC_NEED_CONFIRM_CMD)

		#if (SBGC_NON_BLOCKING_MODE)

			if (serialAPI_CurCmd_ == NULL)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d02b      	beq.n	8005860 <SerialAPI_AddConfirmationCommand+0x88>
			/* Break, if depended Tx command doesn't exist */
				return;

			else if (serialAPI_CurCmd_->_state != SCState_PREPARED)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8005812:	2b02      	cmp	r3, #2
 8005814:	d126      	bne.n	8005864 <SerialAPI_AddConfirmationCommand+0x8c>
				return;

		#endif

		/* Clear confirmation command */
		memset(confirm, 0, sizeof(sbgcConfirm_t));
 8005816:	2208      	movs	r2, #8
 8005818:	2100      	movs	r1, #0
 800581a:	68b8      	ldr	r0, [r7, #8]
 800581c:	f004 f83c 	bl	8009898 <memset>

		/* Assign command ID to confirm */
		confirm->commandID = cmdID;
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	79fa      	ldrb	r2, [r7, #7]
 8005824:	701a      	strb	r2, [r3, #0]

		/* Start read */
		SerialAPI_StartRead(gSBGC, CMD_CONFIRM SBGC_ADVANCED_ARGS__);
 8005826:	7e39      	ldrb	r1, [r7, #24]
 8005828:	79ba      	ldrb	r2, [r7, #6]
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	9303      	str	r3, [sp, #12]
 800582e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005830:	9302      	str	r3, [sp, #8]
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	9301      	str	r3, [sp, #4]
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	9300      	str	r3, [sp, #0]
 800583a:	460b      	mov	r3, r1
 800583c:	2143      	movs	r1, #67	; 0x43
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f7ff fde0 	bl	8005404 <SerialAPI_StartRead>
		SerialAPI_AssignSystemEvent(gSBGC, PostCheckConfirmation, confirm, sizeof(sbgcConfirm_t));
 8005844:	2308      	movs	r3, #8
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	4908      	ldr	r1, [pc, #32]	; (800586c <SerialAPI_AddConfirmationCommand+0x94>)
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff ffa2 	bl	8005794 <SerialAPI_AssignSystemEvent>
		SerialAPI_FinishRead(gSBGC);
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff fee3 	bl	800561c <SerialAPI_FinishRead>
 8005856:	e006      	b.n	8005866 <SerialAPI_AddConfirmationCommand+0x8e>
	serialAPI_Assert()
 8005858:	bf00      	nop
 800585a:	e004      	b.n	8005866 <SerialAPI_AddConfirmationCommand+0x8e>
	if (confirm == SBGC_NO_CONFIRM) return;
 800585c:	bf00      	nop
 800585e:	e002      	b.n	8005866 <SerialAPI_AddConfirmationCommand+0x8e>
				return;
 8005860:	bf00      	nop
 8005862:	e000      	b.n	8005866 <SerialAPI_AddConfirmationCommand+0x8e>
				return;
 8005864:	bf00      	nop

	#else
		unused_(gSBGC);
	#endif
}
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	080056e1 	.word	0x080056e1

08005870 <SerialAPI_DefinePayloadSize>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	payloadSize - how many bytes command waits
 */
static void SerialAPI_DefinePayloadSize (sbgcGeneral_t *gSBGC, ui8 payloadSize)
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	460b      	mov	r3, r1
 800587a:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	2b01      	cmp	r3, #1
 8005884:	d106      	bne.n	8005894 <SerialAPI_DefinePayloadSize+0x24>

	serialAPI_CurCmd_->_payloadSize = payloadSize;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	78fa      	ldrb	r2, [r7, #3]
 800588e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005892:	e000      	b.n	8005896 <SerialAPI_DefinePayloadSize+0x26>
	serialAPI_Assert()
 8005894:	bf00      	nop
}
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <SerialAPI_BoundCommands>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_BoundCommands (sbgcGeneral_t *gSBGC)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
	#if (SBGC_USES_BLOCKING_MODE)
		return;
	#endif

	if (gSBGC->_api->serialAPI_Status == serialAPI_ERROR)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	685b      	ldr	r3, [r3, #4]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d11e      	bne.n	80058f0 <SerialAPI_BoundCommands+0x50>
	{
		if (serialAPI_CurCmd_->parameters & SCParam_RX)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	b25b      	sxtb	r3, r3
 80058bc:	2b00      	cmp	r3, #0
 80058be:	da10      	bge.n	80058e2 <SerialAPI_BoundCommands+0x42>
		/* It means that Rx command was corrupted but still exist. Abort previous Tx command */
			gSBGC->_api->commandBuff[gSBGC->_api->commandNumber - 2]._state = SCState_ABORTED;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	7e1b      	ldrb	r3, [r3, #24]
 80058cc:	4619      	mov	r1, r3
 80058ce:	460b      	mov	r3, r1
 80058d0:	005b      	lsls	r3, r3, #1
 80058d2:	440b      	add	r3, r1
 80058d4:	011b      	lsls	r3, r3, #4
 80058d6:	3b60      	subs	r3, #96	; 0x60
 80058d8:	4413      	add	r3, r2
 80058da:	2205      	movs	r2, #5
 80058dc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

		else
			serialAPI_CurCmd_->_state = SCState_ABORTED;

		return;
 80058e0:	e04a      	b.n	8005978 <SerialAPI_BoundCommands+0xd8>
			serialAPI_CurCmd_->_state = SCState_ABORTED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	2205      	movs	r2, #5
 80058ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		return;
 80058ee:	e043      	b.n	8005978 <SerialAPI_BoundCommands+0xd8>
	}

	if (gSBGC->_api->commandNumber == 0) return;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	7e1b      	ldrb	r3, [r3, #24]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d039      	beq.n	800596e <SerialAPI_BoundCommands+0xce>
	if (!(serialAPI_CurCmd_->parameters & SCParam_RX)) return;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b25b      	sxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	da34      	bge.n	8005972 <SerialAPI_BoundCommands+0xd2>

	serialAPI_Assert()
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d131      	bne.n	8005976 <SerialAPI_BoundCommands+0xd6>

	/* Bound commands if everything is OK */
	serialAPI_Command_t *TxCmd = &gSBGC->_api->commandBuff[gSBGC->_api->commandNumber - 2];
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	695a      	ldr	r2, [r3, #20]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	7e1b      	ldrb	r3, [r3, #24]
 800591e:	4619      	mov	r1, r3
 8005920:	460b      	mov	r3, r1
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	440b      	add	r3, r1
 8005926:	011b      	lsls	r3, r3, #4
 8005928:	3b60      	subs	r3, #96	; 0x60
 800592a:	4413      	add	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
	serialAPI_Command_t *RxCmd = serialAPI_CurCmd_;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	60bb      	str	r3, [r7, #8]

	/* ID exchange */
	TxCmd->_relatedCommandID = RxCmd->_id;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	691a      	ldr	r2, [r3, #16]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	615a      	str	r2, [r3, #20]
	RxCmd->_relatedCommandID = TxCmd->_id;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	691a      	ldr	r2, [r3, #16]
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	615a      	str	r2, [r3, #20]

	#if (SBGC_USES_CALLBACKS)

		if (TxCmd->parameters & SCParam_TX_CALLBACK)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d006      	beq.n	8005960 <SerialAPI_BoundCommands+0xc0>
		{
			RxCmd->callback = NULL;
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2200      	movs	r2, #0
 8005956:	609a      	str	r2, [r3, #8]
			RxCmd->callbackArg = NULL;
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2200      	movs	r2, #0
 800595c:	60da      	str	r2, [r3, #12]
 800595e:	e00b      	b.n	8005978 <SerialAPI_BoundCommands+0xd8>
		}

		else
		{
			TxCmd->callback = NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	609a      	str	r2, [r3, #8]
			TxCmd->callbackArg = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	e004      	b.n	8005978 <SerialAPI_BoundCommands+0xd8>
	if (gSBGC->_api->commandNumber == 0) return;
 800596e:	bf00      	nop
 8005970:	e002      	b.n	8005978 <SerialAPI_BoundCommands+0xd8>
	if (!(serialAPI_CurCmd_->parameters & SCParam_RX)) return;
 8005972:	bf00      	nop
 8005974:	e000      	b.n	8005978 <SerialAPI_BoundCommands+0xd8>
	serialAPI_Assert()
 8005976:	bf00      	nop
		}

	#endif
}
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr

08005982 <SerialAPI_Exit>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
static sbgcCommandStatus_t SerialAPI_Exit (sbgcGeneral_t *gSBGC)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b082      	sub	sp, #8
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
	if (gSBGC->_api->serialAPI_Status == serialAPI_ERROR)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b03      	cmp	r3, #3
 8005992:	d120      	bne.n	80059d6 <SerialAPI_Exit+0x54>
	/* Check what's wrong */
	{
		while ((lastCommand_._state == SCState_ABORTED) && gSBGC->_api->commandNumber)
 8005994:	e002      	b.n	800599c <SerialAPI_Exit+0x1a>
		/* Delete all corrupted commands */
			SerialAPI_AbortLastCmd(gSBGC);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff fe6f 	bl	800567a <SerialAPI_AbortLastCmd>
		while ((lastCommand_._state == SCState_ABORTED) && gSBGC->_api->commandNumber)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	7e1b      	ldrb	r3, [r3, #24]
 80059a8:	4619      	mov	r1, r3
 80059aa:	460b      	mov	r3, r1
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	440b      	add	r3, r1
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	3b30      	subs	r3, #48	; 0x30
 80059b4:	4413      	add	r3, r2
 80059b6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80059ba:	2b05      	cmp	r3, #5
 80059bc:	d104      	bne.n	80059c8 <SerialAPI_Exit+0x46>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	7e1b      	ldrb	r3, [r3, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d1e6      	bne.n	8005996 <SerialAPI_Exit+0x14>

        serialAPI_Unlock()
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	701a      	strb	r2, [r3, #0]

		/* Return error code */
		return gSBGC->_lastCommandStatus;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	7a5b      	ldrb	r3, [r3, #9]
 80059d4:	e017      	b.n	8005a06 <SerialAPI_Exit+0x84>

	#endif

	#if (SBGC_NON_BLOCKING_MODE)

		if (gSBGC->_api->serialAPI_Status == serialAPI_FORMING)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b01      	cmp	r3, #1
 80059de:	d10d      	bne.n	80059fc <SerialAPI_Exit+0x7a>
			serialAPI_Unlock()
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
			gSBGC->_lastCommandStatus = sbgcCOMMAND_SERIAL_API_BUSY_ERROR;
			return gSBGC->_lastCommandStatus;
		}

		#if (SBGC_SEND_IMMEDIATELY == sbgcOFF)
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	725a      	strb	r2, [r3, #9]
		#endif

	#endif

	serialAPI_Unlock()
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	701a      	strb	r2, [r3, #0]

	return gSBGC->_lastCommandStatus;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	7a5b      	ldrb	r3, [r3, #9]
 80059fa:	e004      	b.n	8005a06 <SerialAPI_Exit+0x84>
			gSBGC->_lastCommandStatus = sbgcCOMMAND_SERIAL_API_BUSY_ERROR;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	220a      	movs	r2, #10
 8005a00:	725a      	strb	r2, [r3, #9]
			return gSBGC->_lastCommandStatus;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	7a5b      	ldrb	r3, [r3, #9]
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3708      	adds	r7, #8
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <PrivateSerialAPI_LinkCommandBuild>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkCommandBuild (sbgcGeneral_t *gSBGC)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	gSBGC->_api->writeByte	= SerialAPI_WriteByte;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	4a2e      	ldr	r2, [pc, #184]	; (8005ad8 <PrivateSerialAPI_LinkCommandBuild+0xc8>)
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54
	gSBGC->_api->readByte	= SerialAPI_ReadByte;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	4a2d      	ldr	r2, [pc, #180]	; (8005adc <PrivateSerialAPI_LinkCommandBuild+0xcc>)
 8005a26:	661a      	str	r2, [r3, #96]	; 0x60
	gSBGC->_api->writeWord	= SerialAPI_WriteWord;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	4a2c      	ldr	r2, [pc, #176]	; (8005ae0 <PrivateSerialAPI_LinkCommandBuild+0xd0>)
 8005a2e:	659a      	str	r2, [r3, #88]	; 0x58
	gSBGC->_api->readWord	= SerialAPI_ReadWord;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	4a2b      	ldr	r2, [pc, #172]	; (8005ae4 <PrivateSerialAPI_LinkCommandBuild+0xd4>)
 8005a36:	665a      	str	r2, [r3, #100]	; 0x64
	gSBGC->_api->writeLong	= SerialAPI_WriteLong;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	4a2a      	ldr	r2, [pc, #168]	; (8005ae8 <PrivateSerialAPI_LinkCommandBuild+0xd8>)
 8005a3e:	65da      	str	r2, [r3, #92]	; 0x5c
	gSBGC->_api->readLong	= SerialAPI_ReadLong;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	4a29      	ldr	r2, [pc, #164]	; (8005aec <PrivateSerialAPI_LinkCommandBuild+0xdc>)
 8005a46:	669a      	str	r2, [r3, #104]	; 0x68
	gSBGC->_api->writeBuff	= SerialAPI_WriteBuff;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	4a28      	ldr	r2, [pc, #160]	; (8005af0 <PrivateSerialAPI_LinkCommandBuild+0xe0>)
 8005a4e:	66da      	str	r2, [r3, #108]	; 0x6c
	gSBGC->_api->readBuff	= SerialAPI_ReadBuff;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	4a27      	ldr	r2, [pc, #156]	; (8005af4 <PrivateSerialAPI_LinkCommandBuild+0xe4>)
 8005a56:	671a      	str	r2, [r3, #112]	; 0x70
	gSBGC->_api->writeEmptyBuff
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_WriteEmptyBuff;
 8005a5c:	4a26      	ldr	r2, [pc, #152]	; (8005af8 <PrivateSerialAPI_LinkCommandBuild+0xe8>)
 8005a5e:	675a      	str	r2, [r3, #116]	; 0x74
	gSBGC->_api->skipBytes	= SerialAPI_SkipBytes;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a25      	ldr	r2, [pc, #148]	; (8005afc <PrivateSerialAPI_LinkCommandBuild+0xec>)
 8005a66:	679a      	str	r2, [r3, #120]	; 0x78
	gSBGC->_api->startWrite	= SerialAPI_StartWrite;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	4a24      	ldr	r2, [pc, #144]	; (8005b00 <PrivateSerialAPI_LinkCommandBuild+0xf0>)
 8005a6e:	67da      	str	r2, [r3, #124]	; 0x7c
	gSBGC->_api->startRead	= SerialAPI_StartRead;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	4a23      	ldr	r2, [pc, #140]	; (8005b04 <PrivateSerialAPI_LinkCommandBuild+0xf4>)
 8005a76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	gSBGC->_api->finishWrite
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_FinishWrite;
 8005a7e:	4a22      	ldr	r2, [pc, #136]	; (8005b08 <PrivateSerialAPI_LinkCommandBuild+0xf8>)
 8005a80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	gSBGC->_api->finishRead	= SerialAPI_FinishRead;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	4a20      	ldr	r2, [pc, #128]	; (8005b0c <PrivateSerialAPI_LinkCommandBuild+0xfc>)
 8005a8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	gSBGC->_api->abortLast	= SerialAPI_AbortLastCmd;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	4a1f      	ldr	r2, [pc, #124]	; (8005b10 <PrivateSerialAPI_LinkCommandBuild+0x100>)
 8005a94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	gSBGC->_api->addConfirm	= SerialAPI_AddConfirmationCommand;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a1d      	ldr	r2, [pc, #116]	; (8005b14 <PrivateSerialAPI_LinkCommandBuild+0x104>)
 8005a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	gSBGC->_api->assignEvent
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_AssignSystemEvent;
 8005aa6:	4a1c      	ldr	r2, [pc, #112]	; (8005b18 <PrivateSerialAPI_LinkCommandBuild+0x108>)
 8005aa8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	gSBGC->_api->definePayload
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_DefinePayloadSize;
 8005ab0:	4a1a      	ldr	r2, [pc, #104]	; (8005b1c <PrivateSerialAPI_LinkCommandBuild+0x10c>)
 8005ab2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	gSBGC->_api->bound		= SerialAPI_BoundCommands;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	4a19      	ldr	r2, [pc, #100]	; (8005b20 <PrivateSerialAPI_LinkCommandBuild+0x110>)
 8005abc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	gSBGC->_api->exit		= SerialAPI_Exit;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <PrivateSerialAPI_LinkCommandBuild+0x114>)
 8005ac6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	08004a1f 	.word	0x08004a1f
 8005adc:	08004af1 	.word	0x08004af1
 8005ae0:	08004b45 	.word	0x08004b45
 8005ae4:	08004c21 	.word	0x08004c21
 8005ae8:	08004ce3 	.word	0x08004ce3
 8005aec:	08004dbd 	.word	0x08004dbd
 8005af0:	08004eb1 	.word	0x08004eb1
 8005af4:	08004f93 	.word	0x08004f93
 8005af8:	080050d9 	.word	0x080050d9
 8005afc:	080051a5 	.word	0x080051a5
 8005b00:	0800521b 	.word	0x0800521b
 8005b04:	08005405 	.word	0x08005405
 8005b08:	080055dd 	.word	0x080055dd
 8005b0c:	0800561d 	.word	0x0800561d
 8005b10:	0800567b 	.word	0x0800567b
 8005b14:	080057d9 	.word	0x080057d9
 8005b18:	08005795 	.word	0x08005795
 8005b1c:	08005871 	.word	0x08005871
 8005b20:	080058a1 	.word	0x080058a1
 8005b24:	08005983 	.word	0x08005983

08005b28 <SerialAPI_CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
static ui16 SerialAPI_CRC16_Calculate (ui8 const *data, ui16 length)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	807b      	strh	r3, [r7, #2]
	ui16 CRC_Register = 0;
 8005b34:	2300      	movs	r3, #0
 8005b36:	81fb      	strh	r3, [r7, #14]
	ui8 shiftRegister, dataBit, CRC_Bit;

	for (ui16 i = 0; i < length; i++)
 8005b38:	2300      	movs	r3, #0
 8005b3a:	817b      	strh	r3, [r7, #10]
 8005b3c:	e02a      	b.n	8005b94 <SerialAPI_CRC16_Calculate+0x6c>
	{
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8005b3e:	2301      	movs	r3, #1
 8005b40:	737b      	strb	r3, [r7, #13]
 8005b42:	e021      	b.n	8005b88 <SerialAPI_CRC16_Calculate+0x60>
		{
			dataBit = (data[i] & shiftRegister) ? 1 : 0;
 8005b44:	897b      	ldrh	r3, [r7, #10]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4413      	add	r3, r2
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	7b7b      	ldrb	r3, [r7, #13]
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	bf14      	ite	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	2300      	moveq	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	727b      	strb	r3, [r7, #9]
			CRC_Bit = CRC_Register >> 15;
 8005b5e:	89fb      	ldrh	r3, [r7, #14]
 8005b60:	0bdb      	lsrs	r3, r3, #15
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	723b      	strb	r3, [r7, #8]
			CRC_Register <<= 1;
 8005b66:	89fb      	ldrh	r3, [r7, #14]
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	81fb      	strh	r3, [r7, #14]

			if (dataBit != CRC_Bit)
 8005b6c:	7a7a      	ldrb	r2, [r7, #9]
 8005b6e:	7a3b      	ldrb	r3, [r7, #8]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d006      	beq.n	8005b82 <SerialAPI_CRC16_Calculate+0x5a>
				CRC_Register ^= SBGC_CRC16_POLYNOM;
 8005b74:	89fb      	ldrh	r3, [r7, #14]
 8005b76:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8005b7a:	f083 037a 	eor.w	r3, r3, #122	; 0x7a
 8005b7e:	43db      	mvns	r3, r3
 8005b80:	81fb      	strh	r3, [r7, #14]
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8005b82:	7b7b      	ldrb	r3, [r7, #13]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	737b      	strb	r3, [r7, #13]
 8005b88:	7b7b      	ldrb	r3, [r7, #13]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1da      	bne.n	8005b44 <SerialAPI_CRC16_Calculate+0x1c>
	for (ui16 i = 0; i < length; i++)
 8005b8e:	897b      	ldrh	r3, [r7, #10]
 8005b90:	3301      	adds	r3, #1
 8005b92:	817b      	strh	r3, [r7, #10]
 8005b94:	897a      	ldrh	r2, [r7, #10]
 8005b96:	887b      	ldrh	r3, [r7, #2]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d3d0      	bcc.n	8005b3e <SerialAPI_CRC16_Calculate+0x16>
		}
	}

	return CRC_Register;
 8005b9c:	89fb      	ldrh	r3, [r7, #14]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3714      	adds	r7, #20
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <SBGC32_TX>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SBGC32_TX (sbgcGeneral_t *gSBGC)
{
 8005baa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	466b      	mov	r3, sp
 8005bb6:	461e      	mov	r6, r3
	ui8 dataBuff [gSBGC->_api->currentSerialCommand->_payloadSize + SBGC_SERVICE_BYTES_NUM];
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005bc2:	1d99      	adds	r1, r3, #6
 8005bc4:	1e4b      	subs	r3, r1, #1
 8005bc6:	617b      	str	r3, [r7, #20]
 8005bc8:	460a      	mov	r2, r1
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4690      	mov	r8, r2
 8005bce:	4699      	mov	r9, r3
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bdc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005be0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005be4:	460a      	mov	r2, r1
 8005be6:	2300      	movs	r3, #0
 8005be8:	4614      	mov	r4, r2
 8005bea:	461d      	mov	r5, r3
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	00eb      	lsls	r3, r5, #3
 8005bf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bfa:	00e2      	lsls	r2, r4, #3
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	3307      	adds	r3, #7
 8005c00:	08db      	lsrs	r3, r3, #3
 8005c02:	00db      	lsls	r3, r3, #3
 8005c04:	ebad 0d03 	sub.w	sp, sp, r3
 8005c08:	466b      	mov	r3, sp
 8005c0a:	3300      	adds	r3, #0
 8005c0c:	613b      	str	r3, [r7, #16]

	/* Forming the command */
	dataBuff[0] = (SBGC_PROTOCOL_VERSION - 1) ? SBGC_P2_START_CHARACTER : SBGC_P1_START_CHARACTER;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	2224      	movs	r2, #36	; 0x24
 8005c12:	701a      	strb	r2, [r3, #0]
	dataBuff[1] = gSBGC->_api->currentSerialCommand->_commandID;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	705a      	strb	r2, [r3, #1]
	dataBuff[2] = gSBGC->_api->currentSerialCommand->_payloadSize;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	709a      	strb	r2, [r3, #2]
	dataBuff[3] = dataBuff[1] + dataBuff[2];  // No need Modulo256 calculation
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	785a      	ldrb	r2, [r3, #1]
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	789b      	ldrb	r3, [r3, #2]
 8005c38:	4413      	add	r3, r2
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	70da      	strb	r2, [r3, #3]

	memcpy(&dataBuff[4], gSBGC->_api->currentSerialCommand->_payload, gSBGC->_api->currentSerialCommand->_payloadSize);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	1d18      	adds	r0, r3, #4
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c56:	461a      	mov	r2, r3
 8005c58:	f003 fe10 	bl	800987c <memcpy>

	/* ui8 size = real size current gSBGC->_api->currentSerialCommand */
	ui8 size = gSBGC->_api->currentSerialCommand->_payloadSize + SBGC_SERVICE_BYTES_NUM;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	685b      	ldr	r3, [r3, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c66:	3306      	adds	r3, #6
 8005c68:	73fb      	strb	r3, [r7, #15]
		dataBuff[4 + gSBGC->_api->currentSerialCommand->_payloadSize] =
				SerialAPI_Modulo256_Calculate(gSBGC->_api->currentSerialCommand->_payload, gSBGC->_api->currentSerialCommand->_payloadSize);

	else  // V.2
	{
		ui16 CRC16_Res = SerialAPI_CRC16_Calculate(&dataBuff[1], (4 + gSBGC->_api->currentSerialCommand->_payloadSize) - 1);
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1c5a      	adds	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c78:	b29b      	uxth	r3, r3
 8005c7a:	3303      	adds	r3, #3
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4610      	mov	r0, r2
 8005c82:	f7ff ff51 	bl	8005b28 <SerialAPI_CRC16_Calculate>
 8005c86:	4603      	mov	r3, r0
 8005c88:	81bb      	strh	r3, [r7, #12]
		memcpy(&dataBuff[4 + gSBGC->_api->currentSerialCommand->_payloadSize], &CRC16_Res, sizeof(CRC16_Res));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	6a1b      	ldr	r3, [r3, #32]
 8005c90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c94:	3304      	adds	r3, #4
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4413      	add	r3, r2
 8005c9a:	89ba      	ldrh	r2, [r7, #12]
 8005c9c:	801a      	strh	r2, [r3, #0]
		sbgcTicks_t launchTime = serialAPI_GetTick();

	#endif

	/* Transmit now */
	ui8 txStatus = gSBGC->_ll->drvTx(gSBGC->_ll->drv, dataBuff, size);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	689b      	ldr	r3, [r3, #8]
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	6812      	ldr	r2, [r2, #0]
 8005ca8:	6810      	ldr	r0, [r2, #0]
 8005caa:	7bfa      	ldrb	r2, [r7, #15]
 8005cac:	b292      	uxth	r2, r2
 8005cae:	6939      	ldr	r1, [r7, #16]
 8005cb0:	4798      	blx	r3
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	73bb      	strb	r3, [r7, #14]

	#if (SBGC_NON_BLOCKING_MODE)

		if (txStatus != SBGC_DRV_TX_OK_FLAG)
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <SBGC32_TX+0x11c>
		if (txStatus != SBGC_DRV_TX_OK_FLAG)
		{

	#endif

			gSBGC->_lastSerialCommandStatus = serialAPI_TX_BUS_BUSY_ERROR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	721a      	strb	r2, [r3, #8]
 8005cc2:	46b5      	mov	sp, r6
 8005cc4:	e003      	b.n	8005cce <SBGC32_TX+0x124>
			return;
		}

	/* Command was transmitted fine */
	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	721a      	strb	r2, [r3, #8]
 8005ccc:	46b5      	mov	sp, r6
}
 8005cce:	371c      	adds	r7, #28
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005cd8 <SBGC32_RX>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SBGC32_RX (sbgcGeneral_t *gSBGC)
{
 8005cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cdc:	b089      	sub	sp, #36	; 0x24
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
	/* Parser initializing */
	static ui8 headBuff [3];  /* Header buffer:
	headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */

	ui8 startSymSample = (SBGC_PROTOCOL_VERSION - 1) ? SBGC_P2_START_CHARACTER : SBGC_P1_START_CHARACTER;
 8005ce2:	2324      	movs	r3, #36	; 0x24
 8005ce4:	77fb      	strb	r3, [r7, #31]
		// Next - a command received OK

	}	parserState = STATE_IDLE;

	/* Start parse */
	switch (parserState)
 8005ce6:	4b94      	ldr	r3, [pc, #592]	; (8005f38 <SBGC32_RX+0x260>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b03      	cmp	r3, #3
 8005cec:	d07b      	beq.n	8005de6 <SBGC32_RX+0x10e>
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	f300 811e 	bgt.w	8005f30 <SBGC32_RX+0x258>
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	dc02      	bgt.n	8005cfe <SBGC32_RX+0x26>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da03      	bge.n	8005d04 <SBGC32_RX+0x2c>
 8005cfc:	e118      	b.n	8005f30 <SBGC32_RX+0x258>
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d02e      	beq.n	8005d60 <SBGC32_RX+0x88>
 8005d02:	e115      	b.n	8005f30 <SBGC32_RX+0x258>
	{
		/* Waiting start byte */
		case STATE_IDLE :
		case STATE_RESYNC :
		{
			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6812      	ldr	r2, [r2, #0]
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	4610      	mov	r0, r2
 8005d12:	4798      	blx	r3
 8005d14:	4603      	mov	r3, r0
 8005d16:	837b      	strh	r3, [r7, #26]

			if (availableBytes && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 8005d18:	8b7b      	ldrh	r3, [r7, #26]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <SBGC32_RX+0x78>
 8005d1e:	8b7b      	ldrh	r3, [r7, #26]
 8005d20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <SBGC32_RX+0x78>
			{
				ui8 startSym = 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	737b      	strb	r3, [r7, #13]

				gSBGC->_ll->drvRx(gSBGC->_ll->drv, &startSym);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	687a      	ldr	r2, [r7, #4]
 8005d34:	6812      	ldr	r2, [r2, #0]
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	f107 010d 	add.w	r1, r7, #13
 8005d3c:	4610      	mov	r0, r2
 8005d3e:	4798      	blx	r3

				if (startSym != startSymSample)
 8005d40:	7b7b      	ldrb	r3, [r7, #13]
 8005d42:	7ffa      	ldrb	r2, [r7, #31]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d007      	beq.n	8005d58 <SBGC32_RX+0x80>
				{
					gSBGC->_lastSerialCommandStatus = serialAPI_RX_EMPTY_BUFF_ERROR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	721a      	strb	r2, [r3, #8]
 8005d4e:	e0ef      	b.n	8005f30 <SBGC32_RX+0x258>
				}
			}

			else
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_EMPTY_BUFF_ERROR;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2202      	movs	r2, #2
 8005d54:	721a      	strb	r2, [r3, #8]
				break;
 8005d56:	e0eb      	b.n	8005f30 <SBGC32_RX+0x258>
			{
 8005d58:	bf00      	nop
			}

			parserState = STATE_CHECK_HEADER;
 8005d5a:	4b77      	ldr	r3, [pc, #476]	; (8005f38 <SBGC32_RX+0x260>)
 8005d5c:	2202      	movs	r2, #2
 8005d5e:	701a      	strb	r2, [r3, #0]
		}

		/* Waiting whole header */
		case STATE_CHECK_HEADER :
		{
			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	6812      	ldr	r2, [r2, #0]
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
 8005d70:	4603      	mov	r3, r0
 8005d72:	837b      	strh	r3, [r7, #26]

			if ((availableBytes >= 3) && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 8005d74:	8b7b      	ldrh	r3, [r7, #26]
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d919      	bls.n	8005dae <SBGC32_RX+0xd6>
 8005d7a:	8b7b      	ldrh	r3, [r7, #26]
 8005d7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d014      	beq.n	8005dae <SBGC32_RX+0xd6>
				for (ui8 i = 0; i < 3; i++)
 8005d84:	2300      	movs	r3, #0
 8005d86:	77bb      	strb	r3, [r7, #30]
 8005d88:	e00d      	b.n	8005da6 <SBGC32_RX+0xce>
					gSBGC->_ll->drvRx(gSBGC->_ll->drv, &headBuff[i]);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6812      	ldr	r2, [r2, #0]
 8005d94:	6810      	ldr	r0, [r2, #0]
 8005d96:	7fba      	ldrb	r2, [r7, #30]
 8005d98:	4968      	ldr	r1, [pc, #416]	; (8005f3c <SBGC32_RX+0x264>)
 8005d9a:	440a      	add	r2, r1
 8005d9c:	4611      	mov	r1, r2
 8005d9e:	4798      	blx	r3
				for (ui8 i = 0; i < 3; i++)
 8005da0:	7fbb      	ldrb	r3, [r7, #30]
 8005da2:	3301      	adds	r3, #1
 8005da4:	77bb      	strb	r3, [r7, #30]
 8005da6:	7fbb      	ldrb	r3, [r7, #30]
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d9ee      	bls.n	8005d8a <SBGC32_RX+0xb2>
 8005dac:	e003      	b.n	8005db6 <SBGC32_RX+0xde>

			else
			/* The parser could not read the next 3 header bytes. Try again in the next time */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_BUFFER_REALTIME_ERROR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2203      	movs	r2, #3
 8005db2:	721a      	strb	r2, [r3, #8]
				break;
 8005db4:	e0bc      	b.n	8005f30 <SBGC32_RX+0x258>
			}

			if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8005db6:	4b61      	ldr	r3, [pc, #388]	; (8005f3c <SBGC32_RX+0x264>)
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	4b60      	ldr	r3, [pc, #384]	; (8005f3c <SBGC32_RX+0x264>)
 8005dbc:	785b      	ldrb	r3, [r3, #1]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	b2da      	uxtb	r2, r3
 8005dc2:	4b5e      	ldr	r3, [pc, #376]	; (8005f3c <SBGC32_RX+0x264>)
 8005dc4:	789b      	ldrb	r3, [r3, #2]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d103      	bne.n	8005dd2 <SBGC32_RX+0xfa>
				(headBuff[0] == 0))
 8005dca:	4b5c      	ldr	r3, [pc, #368]	; (8005f3c <SBGC32_RX+0x264>)
 8005dcc:	781b      	ldrb	r3, [r3, #0]
			if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <SBGC32_RX+0x108>
			/* The header checksum is wrong. Break this command and look forward for a new command */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_HEADER_CHECKSUM_ERROR;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2204      	movs	r2, #4
 8005dd6:	721a      	strb	r2, [r3, #8]
				parserState = STATE_RESYNC;
 8005dd8:	4b57      	ldr	r3, [pc, #348]	; (8005f38 <SBGC32_RX+0x260>)
 8005dda:	2201      	movs	r2, #1
 8005ddc:	701a      	strb	r2, [r3, #0]
				break;
 8005dde:	e0a7      	b.n	8005f30 <SBGC32_RX+0x258>
			}

			parserState = STATE_CHECK_PAYLOAD;
 8005de0:	4b55      	ldr	r3, [pc, #340]	; (8005f38 <SBGC32_RX+0x260>)
 8005de2:	2203      	movs	r2, #3
 8005de4:	701a      	strb	r2, [r3, #0]
			/* Passing to the next state */
		}

		/* Waiting whole payload and checksum */
		case STATE_CHECK_PAYLOAD :
		{
 8005de6:	466b      	mov	r3, sp
 8005de8:	461e      	mov	r6, r3
			ui8 checksumSize = SBGC_PROTOCOL_VERSION;
 8005dea:	2302      	movs	r3, #2
 8005dec:	767b      	strb	r3, [r7, #25]
			ui8 complexBuff [sizeof(headBuff) + headBuff[1] + checksumSize];  // (Header + payloadSize + checksum) buffer
 8005dee:	4b53      	ldr	r3, [pc, #332]	; (8005f3c <SBGC32_RX+0x264>)
 8005df0:	785b      	ldrb	r3, [r3, #1]
 8005df2:	461a      	mov	r2, r3
 8005df4:	7e7b      	ldrb	r3, [r7, #25]
 8005df6:	4413      	add	r3, r2
 8005df8:	1cd9      	adds	r1, r3, #3
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	617b      	str	r3, [r7, #20]
 8005e00:	2300      	movs	r3, #0
 8005e02:	4688      	mov	r8, r1
 8005e04:	4699      	mov	r9, r3
 8005e06:	f04f 0200 	mov.w	r2, #0
 8005e0a:	f04f 0300 	mov.w	r3, #0
 8005e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	460c      	mov	r4, r1
 8005e1e:	461d      	mov	r5, r3
 8005e20:	f04f 0200 	mov.w	r2, #0
 8005e24:	f04f 0300 	mov.w	r3, #0
 8005e28:	00eb      	lsls	r3, r5, #3
 8005e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e2e:	00e2      	lsls	r2, r4, #3
 8005e30:	1dcb      	adds	r3, r1, #7
 8005e32:	08db      	lsrs	r3, r3, #3
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	ebad 0d03 	sub.w	sp, sp, r3
 8005e3a:	466b      	mov	r3, sp
 8005e3c:	3300      	adds	r3, #0
 8005e3e:	613b      	str	r3, [r7, #16]

			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	6812      	ldr	r2, [r2, #0]
 8005e4a:	6812      	ldr	r2, [r2, #0]
 8005e4c:	4610      	mov	r0, r2
 8005e4e:	4798      	blx	r3
 8005e50:	4603      	mov	r3, r0
 8005e52:	837b      	strh	r3, [r7, #26]

			if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 8005e54:	8b7a      	ldrh	r2, [r7, #26]
 8005e56:	4b39      	ldr	r3, [pc, #228]	; (8005f3c <SBGC32_RX+0x264>)
 8005e58:	785b      	ldrb	r3, [r3, #1]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	7e7b      	ldrb	r3, [r7, #25]
 8005e5e:	440b      	add	r3, r1
 8005e60:	429a      	cmp	r2, r3
 8005e62:	db1f      	blt.n	8005ea4 <SBGC32_RX+0x1cc>
 8005e64:	8b7b      	ldrh	r3, [r7, #26]
 8005e66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d01a      	beq.n	8005ea4 <SBGC32_RX+0x1cc>
				for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 8005e6e:	2300      	movs	r3, #0
 8005e70:	777b      	strb	r3, [r7, #29]
 8005e72:	e00e      	b.n	8005e92 <SBGC32_RX+0x1ba>
					gSBGC->_ll->drvRx(gSBGC->_ll->drv, &complexBuff[i + 3]);  // Offset from header space
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6812      	ldr	r2, [r2, #0]
 8005e7e:	6810      	ldr	r0, [r2, #0]
 8005e80:	7f7a      	ldrb	r2, [r7, #29]
 8005e82:	3203      	adds	r2, #3
 8005e84:	6939      	ldr	r1, [r7, #16]
 8005e86:	440a      	add	r2, r1
 8005e88:	4611      	mov	r1, r2
 8005e8a:	4798      	blx	r3
				for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 8005e8c:	7f7b      	ldrb	r3, [r7, #29]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	777b      	strb	r3, [r7, #29]
 8005e92:	7f7a      	ldrb	r2, [r7, #29]
 8005e94:	4b29      	ldr	r3, [pc, #164]	; (8005f3c <SBGC32_RX+0x264>)
 8005e96:	785b      	ldrb	r3, [r3, #1]
 8005e98:	4619      	mov	r1, r3
 8005e9a:	7e7b      	ldrb	r3, [r7, #25]
 8005e9c:	440b      	add	r3, r1
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	dbe8      	blt.n	8005e74 <SBGC32_RX+0x19c>
 8005ea2:	e003      	b.n	8005eac <SBGC32_RX+0x1d4>

			else
			/* The parser could not read the next payload in the full volume. Try again in the next time */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_BUFFER_REALTIME_ERROR;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	721a      	strb	r2, [r3, #8]
				break;
 8005eaa:	e040      	b.n	8005f2e <SBGC32_RX+0x256>
				}
			}

			else  // V.2
			{
				memcpy(complexBuff, headBuff, 3);
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	4a23      	ldr	r2, [pc, #140]	; (8005f3c <SBGC32_RX+0x264>)
 8005eb0:	8811      	ldrh	r1, [r2, #0]
 8005eb2:	7892      	ldrb	r2, [r2, #2]
 8005eb4:	8019      	strh	r1, [r3, #0]
 8005eb6:	709a      	strb	r2, [r3, #2]
				ui16 CRC_Res = SerialAPI_CRC16_Calculate(complexBuff, headBuff[1] + 3);
 8005eb8:	4b20      	ldr	r3, [pc, #128]	; (8005f3c <SBGC32_RX+0x264>)
 8005eba:	785b      	ldrb	r3, [r3, #1]
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	3303      	adds	r3, #3
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6938      	ldr	r0, [r7, #16]
 8005ec6:	f7ff fe2f 	bl	8005b28 <SerialAPI_CRC16_Calculate>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	81fb      	strh	r3, [r7, #14]

				if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8005ece:	89fb      	ldrh	r3, [r7, #14]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	4a1a      	ldr	r2, [pc, #104]	; (8005f3c <SBGC32_RX+0x264>)
 8005ed4:	7852      	ldrb	r2, [r2, #1]
 8005ed6:	3203      	adds	r2, #3
 8005ed8:	6939      	ldr	r1, [r7, #16]
 8005eda:	5c8a      	ldrb	r2, [r1, r2]
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d011      	beq.n	8005f04 <SBGC32_RX+0x22c>
				   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 8005ee0:	89fb      	ldrh	r3, [r7, #14]
 8005ee2:	0a1b      	lsrs	r3, r3, #8
 8005ee4:	b29b      	uxth	r3, r3
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	4a14      	ldr	r2, [pc, #80]	; (8005f3c <SBGC32_RX+0x264>)
 8005eea:	7852      	ldrb	r2, [r2, #1]
 8005eec:	3204      	adds	r2, #4
 8005eee:	6939      	ldr	r1, [r7, #16]
 8005ef0:	5c8a      	ldrb	r2, [r1, r2]
				if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d006      	beq.n	8005f04 <SBGC32_RX+0x22c>
				/* The command came corrupted. Break it, look forward for a new command */
				{
					gSBGC->_lastSerialCommandStatus = serialAPI_RX_PAYLOAD_CHECKSUM_ERROR;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2205      	movs	r2, #5
 8005efa:	721a      	strb	r2, [r3, #8]
					parserState = STATE_RESYNC;
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <SBGC32_RX+0x260>)
 8005efe:	2201      	movs	r2, #1
 8005f00:	701a      	strb	r2, [r3, #0]
					break;
 8005f02:	e014      	b.n	8005f2e <SBGC32_RX+0x256>
				}

			#endif

			/* Data passed all checks. Fill the new serialCommand struct */
			gSBGC->_api->saveCmd(gSBGC, (serialAPI_CommandID_t)headBuff[0], headBuff[1], &complexBuff[3]);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	f8d3 40a4 	ldr.w	r4, [r3, #164]	; 0xa4
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <SBGC32_RX+0x264>)
 8005f0e:	7819      	ldrb	r1, [r3, #0]
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <SBGC32_RX+0x264>)
 8005f12:	785a      	ldrb	r2, [r3, #1]
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	3303      	adds	r3, #3
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	47a0      	blx	r4

			/* Prepare parser for new reading */
			parserState = STATE_IDLE;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <SBGC32_RX+0x260>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]

			gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	721a      	strb	r2, [r3, #8]
			return;
 8005f28:	bf00      	nop
 8005f2a:	46b5      	mov	sp, r6
 8005f2c:	e000      	b.n	8005f30 <SBGC32_RX+0x258>
 8005f2e:	46b5      	mov	sp, r6
		}
	}

	/* The command wasn't received. Exit */
}
 8005f30:	3724      	adds	r7, #36	; 0x24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f38:	20000510 	.word	0x20000510
 8005f3c:	20000514 	.word	0x20000514

08005f40 <PrivateSerialAPI_LinkLowLayer>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkLowLayer (sbgcGeneral_t *gSBGC)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
	gSBGC->_ll->tx = SBGC32_TX;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a05      	ldr	r2, [pc, #20]	; (8005f64 <PrivateSerialAPI_LinkLowLayer+0x24>)
 8005f4e:	61da      	str	r2, [r3, #28]
	gSBGC->_ll->rx = SBGC32_RX;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a04      	ldr	r2, [pc, #16]	; (8005f68 <PrivateSerialAPI_LinkLowLayer+0x28>)
 8005f56:	621a      	str	r2, [r3, #32]
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	08005bab 	.word	0x08005bab
 8005f68:	08005cd9 	.word	0x08005cd9

08005f6c <DebugSBGC32_PrintMessage>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*str - printable string
 */
void DebugSBGC32_PrintMessage (sbgcGeneral_t *gSBGC, const char *str)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	#if (SBGC_NEED_ASSERTS)
		if (gSBGC->_ll->drvTxDebug == NULL) return;
	#endif

	gSBGC->_ll->drvTxDebug((char*)str, strlen(str));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695c      	ldr	r4, [r3, #20]
 8005f7c:	6838      	ldr	r0, [r7, #0]
 8005f7e:	f7fa f95f 	bl	8000240 <strlen>
 8005f82:	4603      	mov	r3, r0
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	4619      	mov	r1, r3
 8005f88:	6838      	ldr	r0, [r7, #0]
 8005f8a:	47a0      	blx	r4
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd90      	pop	{r4, r7, pc}

08005f94 <DebugSBGC32_PrintStructElement>:
 *	@param	*pValue - printable variable
 *	@param	*str - debug info string
 *	@param	vType - type of variable
 */
void DebugSBGC32_PrintStructElement (sbgcGeneral_t *gSBGC, void *pValue, const char *str, sbgcVarType_t vType)
{
 8005f94:	b590      	push	{r4, r7, lr}
 8005f96:	b0bb      	sub	sp, #236	; 0xec
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	70fb      	strb	r3, [r7, #3]
	char debugStr [SBGC_DEBUG_BUFF_SIZE] = { 0 };
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005fa8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fac:	223c      	movs	r2, #60	; 0x3c
 8005fae:	2100      	movs	r1, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f003 fc71 	bl	8009898 <memset>

	if (!(vType & sbgcFLAG))
 8005fb6:	78fb      	ldrb	r3, [r7, #3]
 8005fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f040 8105 	bne.w	80061cc <DebugSBGC32_PrintStructElement+0x238>
	/* Simple values */
	{
		switch (vType)
 8005fc2:	78fb      	ldrb	r3, [r7, #3]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	2b06      	cmp	r3, #6
 8005fc8:	f200 81f7 	bhi.w	80063ba <DebugSBGC32_PrintStructElement+0x426>
 8005fcc:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <DebugSBGC32_PrintStructElement+0x40>)
 8005fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd2:	bf00      	nop
 8005fd4:	08005ff1 	.word	0x08005ff1
 8005fd8:	080060b7 	.word	0x080060b7
 8005fdc:	08006033 	.word	0x08006033
 8005fe0:	080060fb 	.word	0x080060fb
 8005fe4:	08006075 	.word	0x08006075
 8005fe8:	0800613f 	.word	0x0800613f
 8005fec:	08006181 	.word	0x08006181
		{
			case sbgcUCHAR :
			{
				char valueStr [4];

				gSBGC->_ll->debugSprintf(valueStr, "%u", *(ui8*)pValue);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	f107 0094 	add.w	r0, r7, #148	; 0x94
 8005ffe:	49ad      	ldr	r1, [pc, #692]	; (80062b4 <DebugSBGC32_PrintStructElement+0x320>)
 8006000:	4798      	blx	r3

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f7fa f91c 	bl	8000240 <strlen>
 8006008:	4603      	mov	r3, r0
 800600a:	2b3c      	cmp	r3, #60	; 0x3c
 800600c:	d906      	bls.n	800601c <DebugSBGC32_PrintStructElement+0x88>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 800600e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006012:	223c      	movs	r2, #60	; 0x3c
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4618      	mov	r0, r3
 8006018:	f004 fba4 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699c      	ldr	r4, [r3, #24]
 8006022:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006026:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	49a2      	ldr	r1, [pc, #648]	; (80062b8 <DebugSBGC32_PrintStructElement+0x324>)
 800602e:	47a0      	blx	r4
				break;
 8006030:	e1c4      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>

			case sbgcUSHORT :
			{
				char valueStr [6];

				gSBGC->_ll->debugSprintf(valueStr, "%u", *(ui16*)pValue);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	699b      	ldr	r3, [r3, #24]
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	8812      	ldrh	r2, [r2, #0]
 800603c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8006040:	499c      	ldr	r1, [pc, #624]	; (80062b4 <DebugSBGC32_PrintStructElement+0x320>)
 8006042:	4798      	blx	r3

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7fa f8fb 	bl	8000240 <strlen>
 800604a:	4603      	mov	r3, r0
 800604c:	2b3a      	cmp	r3, #58	; 0x3a
 800604e:	d906      	bls.n	800605e <DebugSBGC32_PrintStructElement+0xca>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 8006050:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006054:	223a      	movs	r2, #58	; 0x3a
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	4618      	mov	r0, r3
 800605a:	f004 fb83 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	699c      	ldr	r4, [r3, #24]
 8006064:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8006068:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	4992      	ldr	r1, [pc, #584]	; (80062b8 <DebugSBGC32_PrintStructElement+0x324>)
 8006070:	47a0      	blx	r4
				break;
 8006072:	e1a3      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>
				char valueStr [11];

				#ifdef _L32__
					gSBGC->_ll->debugSprintf(valueStr, "%u", *(ui32*)pValue);
				#else
					gSBGC->_ll->debugSprintf(valueStr, "%lu", *(ui32*)pValue);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	6812      	ldr	r2, [r2, #0]
 800607e:	f107 0080 	add.w	r0, r7, #128	; 0x80
 8006082:	498e      	ldr	r1, [pc, #568]	; (80062bc <DebugSBGC32_PrintStructElement+0x328>)
 8006084:	4798      	blx	r3
				#endif

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7fa f8da 	bl	8000240 <strlen>
 800608c:	4603      	mov	r3, r0
 800608e:	2b35      	cmp	r3, #53	; 0x35
 8006090:	d906      	bls.n	80060a0 <DebugSBGC32_PrintStructElement+0x10c>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 8006092:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006096:	2235      	movs	r2, #53	; 0x35
 8006098:	6879      	ldr	r1, [r7, #4]
 800609a:	4618      	mov	r0, r3
 800609c:	f004 fb62 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699c      	ldr	r4, [r3, #24]
 80060a6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80060aa:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4981      	ldr	r1, [pc, #516]	; (80062b8 <DebugSBGC32_PrintStructElement+0x324>)
 80060b2:	47a0      	blx	r4
				break;
 80060b4:	e182      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>

			case sbgcCHAR :
			{
				char valueStr [5];

				gSBGC->_ll->debugSprintf(valueStr, "%i", *(i8*)pValue);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	f992 2000 	ldrsb.w	r2, [r2]
 80060c2:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80060c6:	497e      	ldr	r1, [pc, #504]	; (80062c0 <DebugSBGC32_PrintStructElement+0x32c>)
 80060c8:	4798      	blx	r3

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f7fa f8b8 	bl	8000240 <strlen>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b3b      	cmp	r3, #59	; 0x3b
 80060d4:	d906      	bls.n	80060e4 <DebugSBGC32_PrintStructElement+0x150>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 80060d6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80060da:	223b      	movs	r2, #59	; 0x3b
 80060dc:	6879      	ldr	r1, [r7, #4]
 80060de:	4618      	mov	r0, r3
 80060e0:	f004 fb40 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699c      	ldr	r4, [r3, #24]
 80060ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80060ee:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	4970      	ldr	r1, [pc, #448]	; (80062b8 <DebugSBGC32_PrintStructElement+0x324>)
 80060f6:	47a0      	blx	r4
				break;
 80060f8:	e160      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>

			case sbgcSHORT :
			{
				char valueStr [7];

				gSBGC->_ll->debugSprintf(valueStr, "%i", *(i16*)pValue);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	68ba      	ldr	r2, [r7, #8]
 8006102:	f9b2 2000 	ldrsh.w	r2, [r2]
 8006106:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800610a:	496d      	ldr	r1, [pc, #436]	; (80062c0 <DebugSBGC32_PrintStructElement+0x32c>)
 800610c:	4798      	blx	r3

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 800610e:	6878      	ldr	r0, [r7, #4]
 8006110:	f7fa f896 	bl	8000240 <strlen>
 8006114:	4603      	mov	r3, r0
 8006116:	2b39      	cmp	r3, #57	; 0x39
 8006118:	d906      	bls.n	8006128 <DebugSBGC32_PrintStructElement+0x194>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 800611a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800611e:	2239      	movs	r2, #57	; 0x39
 8006120:	6879      	ldr	r1, [r7, #4]
 8006122:	4618      	mov	r0, r3
 8006124:	f004 fb1e 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	699c      	ldr	r4, [r3, #24]
 800612e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006132:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	495f      	ldr	r1, [pc, #380]	; (80062b8 <DebugSBGC32_PrintStructElement+0x324>)
 800613a:	47a0      	blx	r4
				break;
 800613c:	e13e      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>
				char valueStr [12];

				#ifdef _L32__
					gSBGC->_ll->debugSprintf(valueStr, "%i", *(i32*)pValue);
				#else
					gSBGC->_ll->debugSprintf(valueStr, "%li", *(i32*)pValue);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	699b      	ldr	r3, [r3, #24]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800614c:	495d      	ldr	r1, [pc, #372]	; (80062c4 <DebugSBGC32_PrintStructElement+0x330>)
 800614e:	4798      	blx	r3
				#endif

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f7fa f875 	bl	8000240 <strlen>
 8006156:	4603      	mov	r3, r0
 8006158:	2b34      	cmp	r3, #52	; 0x34
 800615a:	d906      	bls.n	800616a <DebugSBGC32_PrintStructElement+0x1d6>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 800615c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006160:	2234      	movs	r2, #52	; 0x34
 8006162:	6879      	ldr	r1, [r7, #4]
 8006164:	4618      	mov	r0, r3
 8006166:	f004 fafd 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	699c      	ldr	r4, [r3, #24]
 8006170:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006174:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	494f      	ldr	r1, [pc, #316]	; (80062b8 <DebugSBGC32_PrintStructElement+0x324>)
 800617c:	47a0      	blx	r4
				break;
 800617e:	e11d      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>

			case sbgcFLOAT :
			{
				char valueStr [16];

				gSBGC->_ll->debugSprintf(valueStr, "%.3f", *(float*)pValue);  // .3f is default. May be changed
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699c      	ldr	r4, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	edd3 7a00 	vldr	s15, [r3]
 800618c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006190:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8006194:	ec53 2b17 	vmov	r2, r3, d7
 8006198:	494b      	ldr	r1, [pc, #300]	; (80062c8 <DebugSBGC32_PrintStructElement+0x334>)
 800619a:	47a0      	blx	r4

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr)))
 800619c:	6878      	ldr	r0, [r7, #4]
 800619e:	f7fa f84f 	bl	8000240 <strlen>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b30      	cmp	r3, #48	; 0x30
 80061a6:	d906      	bls.n	80061b6 <DebugSBGC32_PrintStructElement+0x222>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(valueStr));
 80061a8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80061ac:	2230      	movs	r2, #48	; 0x30
 80061ae:	6879      	ldr	r1, [r7, #4]
 80061b0:	4618      	mov	r0, r3
 80061b2:	f004 fad7 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, valueStr);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699c      	ldr	r4, [r3, #24]
 80061bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80061c0:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	493c      	ldr	r1, [pc, #240]	; (80062b8 <DebugSBGC32_PrintStructElement+0x324>)
 80061c8:	47a0      	blx	r4
				break;
 80061ca:	e0f7      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>
	}

	else
	/* Flags */
	{
		switch (vType & CLEAN_TYPE_MASK)
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	2b05      	cmp	r3, #5
 80061d4:	f000 80a7 	beq.w	8006326 <DebugSBGC32_PrintStructElement+0x392>
 80061d8:	2b05      	cmp	r3, #5
 80061da:	f300 80ef 	bgt.w	80063bc <DebugSBGC32_PrintStructElement+0x428>
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d002      	beq.n	80061e8 <DebugSBGC32_PrintStructElement+0x254>
 80061e2:	2b03      	cmp	r3, #3
 80061e4:	d049      	beq.n	800627a <DebugSBGC32_PrintStructElement+0x2e6>
 80061e6:	e0e9      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>
		{
			case sbgcUCHAR :
			{
				char flagStr [9];
				ui8 valueTemp = *(ui8*)pValue;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	f887 30d9 	strb.w	r3, [r7, #217]	; 0xd9

				for (ui8 i = 0; i < 8; i++)
 80061f0:	2300      	movs	r3, #0
 80061f2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80061f6:	e021      	b.n	800623c <DebugSBGC32_PrintStructElement+0x2a8>
				{
					if (valueTemp & (1 << i))
 80061f8:	f897 20d9 	ldrb.w	r2, [r7, #217]	; 0xd9
 80061fc:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006200:	fa42 f303 	asr.w	r3, r2, r3
 8006204:	f003 0301 	and.w	r3, r3, #1
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <DebugSBGC32_PrintStructElement+0x28c>
						flagStr[7 - i] = '1';
 800620c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006210:	f1c3 0307 	rsb	r3, r3, #7
 8006214:	33e8      	adds	r3, #232	; 0xe8
 8006216:	443b      	add	r3, r7
 8006218:	2231      	movs	r2, #49	; 0x31
 800621a:	f803 2ca0 	strb.w	r2, [r3, #-160]
 800621e:	e008      	b.n	8006232 <DebugSBGC32_PrintStructElement+0x29e>

					else
						flagStr[7 - i] = '0';
 8006220:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006224:	f1c3 0307 	rsb	r3, r3, #7
 8006228:	33e8      	adds	r3, #232	; 0xe8
 800622a:	443b      	add	r3, r7
 800622c:	2230      	movs	r2, #48	; 0x30
 800622e:	f803 2ca0 	strb.w	r2, [r3, #-160]
				for (ui8 i = 0; i < 8; i++)
 8006232:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006236:	3301      	adds	r3, #1
 8006238:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 800623c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8006240:	2b07      	cmp	r3, #7
 8006242:	d9d9      	bls.n	80061f8 <DebugSBGC32_PrintStructElement+0x264>
				}

				flagStr[8] = '\0';
 8006244:	2300      	movs	r3, #0
 8006246:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr)))
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f7f9 fff8 	bl	8000240 <strlen>
 8006250:	4603      	mov	r3, r0
 8006252:	2b37      	cmp	r3, #55	; 0x37
 8006254:	d906      	bls.n	8006264 <DebugSBGC32_PrintStructElement+0x2d0>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr));
 8006256:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800625a:	2237      	movs	r2, #55	; 0x37
 800625c:	6879      	ldr	r1, [r7, #4]
 800625e:	4618      	mov	r0, r3
 8006260:	f004 fa80 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, flagStr);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699c      	ldr	r4, [r3, #24]
 800626a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800626e:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	4910      	ldr	r1, [pc, #64]	; (80062b8 <DebugSBGC32_PrintStructElement+0x324>)
 8006276:	47a0      	blx	r4
				break;
 8006278:	e0a0      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>
			}

			case sbgcUSHORT :
			{
				char flagStr [17];
				ui16 valueTemp = *(ui16*)pValue;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	f8a7 30da 	strh.w	r3, [r7, #218]	; 0xda

				for (ui16 i = 0; i < 16; i++)
 8006282:	2300      	movs	r3, #0
 8006284:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 8006288:	e02e      	b.n	80062e8 <DebugSBGC32_PrintStructElement+0x354>
				{
					if (valueTemp & (1 << i))
 800628a:	f8b7 20da 	ldrh.w	r2, [r7, #218]	; 0xda
 800628e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 8006292:	fa42 f303 	asr.w	r3, r2, r3
 8006296:	f003 0301 	and.w	r3, r3, #1
 800629a:	2b00      	cmp	r3, #0
 800629c:	d016      	beq.n	80062cc <DebugSBGC32_PrintStructElement+0x338>
						flagStr[15 - i] = '1';
 800629e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80062a2:	f1c3 030f 	rsb	r3, r3, #15
 80062a6:	33e8      	adds	r3, #232	; 0xe8
 80062a8:	443b      	add	r3, r7
 80062aa:	2231      	movs	r2, #49	; 0x31
 80062ac:	f803 2cb4 	strb.w	r2, [r3, #-180]
 80062b0:	e015      	b.n	80062de <DebugSBGC32_PrintStructElement+0x34a>
 80062b2:	bf00      	nop
 80062b4:	0800e094 	.word	0x0800e094
 80062b8:	0800e098 	.word	0x0800e098
 80062bc:	0800e0a0 	.word	0x0800e0a0
 80062c0:	0800e0a4 	.word	0x0800e0a4
 80062c4:	0800e0a8 	.word	0x0800e0a8
 80062c8:	0800e0ac 	.word	0x0800e0ac

					else
						flagStr[15 - i] = '0';
 80062cc:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80062d0:	f1c3 030f 	rsb	r3, r3, #15
 80062d4:	33e8      	adds	r3, #232	; 0xe8
 80062d6:	443b      	add	r3, r7
 80062d8:	2230      	movs	r2, #48	; 0x30
 80062da:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for (ui16 i = 0; i < 16; i++)
 80062de:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80062e2:	3301      	adds	r3, #1
 80062e4:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
 80062e8:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80062ec:	2b0f      	cmp	r3, #15
 80062ee:	d9cc      	bls.n	800628a <DebugSBGC32_PrintStructElement+0x2f6>
				}

				flagStr[16] = '\0';
 80062f0:	2300      	movs	r3, #0
 80062f2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr)))
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f7f9 ffa2 	bl	8000240 <strlen>
 80062fc:	4603      	mov	r3, r0
 80062fe:	2b2f      	cmp	r3, #47	; 0x2f
 8006300:	d906      	bls.n	8006310 <DebugSBGC32_PrintStructElement+0x37c>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr));
 8006302:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006306:	222f      	movs	r2, #47	; 0x2f
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	4618      	mov	r0, r3
 800630c:	f004 fa2a 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, flagStr);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699c      	ldr	r4, [r3, #24]
 8006316:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800631a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	492b      	ldr	r1, [pc, #172]	; (80063d0 <DebugSBGC32_PrintStructElement+0x43c>)
 8006322:	47a0      	blx	r4
				break;
 8006324:	e04a      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>
			}

			case sbgcUINT :
			{
				char flagStr [33];
				ui32 valueTemp = *(ui32*)pValue;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

				for (ui32 i = 0; i < 32; i++)
 800632e:	2300      	movs	r3, #0
 8006330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006334:	e022      	b.n	800637c <DebugSBGC32_PrintStructElement+0x3e8>
				{
					if (valueTemp & (1 << i))
 8006336:	2201      	movs	r2, #1
 8006338:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800633c:	fa02 f303 	lsl.w	r3, r2, r3
 8006340:	461a      	mov	r2, r3
 8006342:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006346:	4013      	ands	r3, r2
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <DebugSBGC32_PrintStructElement+0x3cc>
						flagStr[31 - i] = '1';
 800634c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006350:	f1c3 031f 	rsb	r3, r3, #31
 8006354:	33e8      	adds	r3, #232	; 0xe8
 8006356:	443b      	add	r3, r7
 8006358:	2231      	movs	r2, #49	; 0x31
 800635a:	f803 2cd8 	strb.w	r2, [r3, #-216]
 800635e:	e008      	b.n	8006372 <DebugSBGC32_PrintStructElement+0x3de>

					else
						flagStr[31 - i] = '0';
 8006360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006364:	f1c3 031f 	rsb	r3, r3, #31
 8006368:	33e8      	adds	r3, #232	; 0xe8
 800636a:	443b      	add	r3, r7
 800636c:	2230      	movs	r2, #48	; 0x30
 800636e:	f803 2cd8 	strb.w	r2, [r3, #-216]
				for (ui32 i = 0; i < 32; i++)
 8006372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006376:	3301      	adds	r3, #1
 8006378:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800637c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006380:	2b1f      	cmp	r3, #31
 8006382:	d9d8      	bls.n	8006336 <DebugSBGC32_PrintStructElement+0x3a2>
				}

				flagStr[32] = '\0';
 8006384:	2300      	movs	r3, #0
 8006386:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

				if (strlen(str) > (SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr)))
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f7f9 ff58 	bl	8000240 <strlen>
 8006390:	4603      	mov	r3, r0
 8006392:	2b1f      	cmp	r3, #31
 8006394:	d906      	bls.n	80063a4 <DebugSBGC32_PrintStructElement+0x410>
					strncat(debugStr, str, SBGC_DEBUG_BUFF_SIZE - sizeof(flagStr));
 8006396:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800639a:	221f      	movs	r2, #31
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	4618      	mov	r0, r3
 80063a0:	f004 f9e0 	bl	800a764 <strncat>

				gSBGC->_ll->debugSprintf(debugStr, "%s %s\n", str, flagStr);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699c      	ldr	r4, [r3, #24]
 80063aa:	f107 0310 	add.w	r3, r7, #16
 80063ae:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	4906      	ldr	r1, [pc, #24]	; (80063d0 <DebugSBGC32_PrintStructElement+0x43c>)
 80063b6:	47a0      	blx	r4
				break;
 80063b8:	e000      	b.n	80063bc <DebugSBGC32_PrintStructElement+0x428>
				break;
 80063ba:	bf00      	nop
			}
		}
	}

	DebugSBGC32_PrintMessage(gSBGC, debugStr);
 80063bc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80063c0:	4619      	mov	r1, r3
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	f7ff fdd2 	bl	8005f6c <DebugSBGC32_PrintMessage>
}
 80063c8:	bf00      	nop
 80063ca:	37ec      	adds	r7, #236	; 0xec
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd90      	pop	{r4, r7, pc}
 80063d0:	0800e098 	.word	0x0800e098

080063d4 <DebugSBGC32_WriteLog>:
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 *	@param	*serialCommand - pointer to a serial command
	 */
	static void DebugSBGC32_WriteLog (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
	{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b094      	sub	sp, #80	; 0x50
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
		if (serialCommand->parameters & SCParam_NO_NEED_LOG) return;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	f003 0308 	and.w	r3, r3, #8
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f040 8100 	bne.w	80065ec <DebugSBGC32_WriteLog+0x218>

		char logBuffer [SBGC_DEBUG_BUFF_SIZE] = { 0 };
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]
 80063f0:	f107 0310 	add.w	r3, r7, #16
 80063f4:	223c      	movs	r2, #60	; 0x3c
 80063f6:	2100      	movs	r1, #0
 80063f8:	4618      	mov	r0, r3
 80063fa:	f003 fa4d 	bl	8009898 <memset>
		ui8 pointer = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		#if (SBGC_LOG_COMMAND_NUMBER)

			#ifdef _L32__
				pointer += gSBGC->_ll->debugSprintf(logBuffer, "%u. ", serialCommand->_id);
			#else
				pointer += gSBGC->_ll->debugSprintf(logBuffer, "%lu. ", serialCommand->_id);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	683a      	ldr	r2, [r7, #0]
 800640c:	6912      	ldr	r2, [r2, #16]
 800640e:	f107 000c 	add.w	r0, r7, #12
 8006412:	4978      	ldr	r1, [pc, #480]	; (80065f4 <DebugSBGC32_WriteLog+0x220>)
 8006414:	4798      	blx	r3
 8006416:	4603      	mov	r3, r0
 8006418:	b2da      	uxtb	r2, r3
 800641a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800641e:	4413      	add	r3, r2
 8006420:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		#endif

		#if (SBGC_LOG_COMMAND_DIR)

			pointer += (serialCommand->parameters & SCParam_RX) ?
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	b25b      	sxtb	r3, r3
						gSBGC->_ll->debugSprintf(&logBuffer[pointer], "<-- ", serialCommand->_id) :
 800642a:	2b00      	cmp	r3, #0
 800642c:	da0d      	bge.n	800644a <DebugSBGC32_WriteLog+0x76>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	699b      	ldr	r3, [r3, #24]
 8006434:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006438:	f107 010c 	add.w	r1, r7, #12
 800643c:	1888      	adds	r0, r1, r2
 800643e:	683a      	ldr	r2, [r7, #0]
 8006440:	6912      	ldr	r2, [r2, #16]
 8006442:	496d      	ldr	r1, [pc, #436]	; (80065f8 <DebugSBGC32_WriteLog+0x224>)
 8006444:	4798      	blx	r3
 8006446:	4603      	mov	r3, r0
 8006448:	e00c      	b.n	8006464 <DebugSBGC32_WriteLog+0x90>
						gSBGC->_ll->debugSprintf(&logBuffer[pointer], "--> ", serialCommand->_id);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8006454:	f107 010c 	add.w	r1, r7, #12
 8006458:	1888      	adds	r0, r1, r2
 800645a:	683a      	ldr	r2, [r7, #0]
 800645c:	6912      	ldr	r2, [r2, #16]
 800645e:	4967      	ldr	r1, [pc, #412]	; (80065fc <DebugSBGC32_WriteLog+0x228>)
 8006460:	4798      	blx	r3
 8006462:	4603      	mov	r3, r0
			pointer += (serialCommand->parameters & SCParam_RX) ?
 8006464:	b2da      	uxtb	r2, r3
 8006466:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800646a:	4413      	add	r3, r2
 800646c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

		#endif

		#if (SBGC_LOG_COMMAND_NAME)
			pointer += ParserSBGC32_ConvertCommandID_ToString(serialCommand, &logBuffer[pointer], SBGC_DEBUG_BUFF_SIZE - pointer);
 8006470:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006474:	f107 020c 	add.w	r2, r7, #12
 8006478:	18d1      	adds	r1, r2, r3
 800647a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800647e:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8006482:	b2db      	uxtb	r3, r3
 8006484:	461a      	mov	r2, r3
 8006486:	6838      	ldr	r0, [r7, #0]
 8006488:	f001 fdf0 	bl	800806c <ParserSBGC32_ConvertCommandID_ToString>
 800648c:	4603      	mov	r3, r0
 800648e:	461a      	mov	r2, r3
 8006490:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8006494:	4413      	add	r3, r2
 8006496:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], " ");
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80064a4:	f107 010c 	add.w	r1, r7, #12
 80064a8:	440a      	add	r2, r1
 80064aa:	4955      	ldr	r1, [pc, #340]	; (8006600 <DebugSBGC32_WriteLog+0x22c>)
 80064ac:	4610      	mov	r0, r2
 80064ae:	4798      	blx	r3
 80064b0:	4603      	mov	r3, r0
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064b8:	4413      	add	r3, r2
 80064ba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		#endif

		#if (SBGC_LOG_COMMAND_ID)
			pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], "(#%d): ", serialCommand->_commandID);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80064c8:	f107 010c 	add.w	r1, r7, #12
 80064cc:	1888      	adds	r0, r1, r2
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	f892 2023 	ldrb.w	r2, [r2, #35]	; 0x23
 80064d4:	494b      	ldr	r1, [pc, #300]	; (8006604 <DebugSBGC32_WriteLog+0x230>)
 80064d6:	4798      	blx	r3
 80064d8:	4603      	mov	r3, r0
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064e0:	4413      	add	r3, r2
 80064e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		#endif

		#if (SBGC_LOG_COMMAND_STATUS)
			pointer += ParserSBGC32_ConvertCommandStatusToString(serialCommand, &logBuffer[pointer], SBGC_DEBUG_BUFF_SIZE - pointer);
 80064e6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064ea:	f107 020c 	add.w	r2, r7, #12
 80064ee:	18d1      	adds	r1, r2, r3
 80064f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80064f4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	461a      	mov	r2, r3
 80064fc:	6838      	ldr	r0, [r7, #0]
 80064fe:	f002 fb6b 	bl	8008bd8 <ParserSBGC32_ConvertCommandStatusToString>
 8006502:	4603      	mov	r3, r0
 8006504:	461a      	mov	r2, r3
 8006506:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800650a:	4413      	add	r3, r2
 800650c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], " ");
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800651a:	f107 010c 	add.w	r1, r7, #12
 800651e:	440a      	add	r2, r1
 8006520:	4937      	ldr	r1, [pc, #220]	; (8006600 <DebugSBGC32_WriteLog+0x22c>)
 8006522:	4610      	mov	r0, r2
 8006524:	4798      	blx	r3
 8006526:	4603      	mov	r3, r0
 8006528:	b2da      	uxtb	r2, r3
 800652a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800652e:	4413      	add	r3, r2
 8006530:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		#endif

		#if (SBGC_LOG_COMMAND_PARAM && SBGC_NON_BLOCKING_MODE)

			if (serialCommand->parameters & SCParam_TX_CALLBACK) pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], " (TC)");
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d011      	beq.n	8006564 <DebugSBGC32_WriteLog+0x190>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800654a:	f107 010c 	add.w	r1, r7, #12
 800654e:	440a      	add	r2, r1
 8006550:	492d      	ldr	r1, [pc, #180]	; (8006608 <DebugSBGC32_WriteLog+0x234>)
 8006552:	4610      	mov	r0, r2
 8006554:	4798      	blx	r3
 8006556:	4603      	mov	r3, r0
 8006558:	b2da      	uxtb	r2, r3
 800655a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800655e:	4413      	add	r3, r2
 8006560:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			if (serialCommand->parameters & SCParam_FORCE_CALLBACK) pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], " (FC)");
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	781b      	ldrb	r3, [r3, #0]
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d011      	beq.n	8006594 <DebugSBGC32_WriteLog+0x1c0>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699b      	ldr	r3, [r3, #24]
 8006576:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800657a:	f107 010c 	add.w	r1, r7, #12
 800657e:	440a      	add	r2, r1
 8006580:	4922      	ldr	r1, [pc, #136]	; (800660c <DebugSBGC32_WriteLog+0x238>)
 8006582:	4610      	mov	r0, r2
 8006584:	4798      	blx	r3
 8006586:	4603      	mov	r3, r0
 8006588:	b2da      	uxtb	r2, r3
 800658a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800658e:	4413      	add	r3, r2
 8006590:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

			if (serialCommand->parameters & SCParam_RETAIN) pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], " (RT)");
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	781b      	ldrb	r3, [r3, #0]
 8006598:	f003 0304 	and.w	r3, r3, #4
 800659c:	2b00      	cmp	r3, #0
 800659e:	d011      	beq.n	80065c4 <DebugSBGC32_WriteLog+0x1f0>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80065aa:	f107 010c 	add.w	r1, r7, #12
 80065ae:	440a      	add	r2, r1
 80065b0:	4917      	ldr	r1, [pc, #92]	; (8006610 <DebugSBGC32_WriteLog+0x23c>)
 80065b2:	4610      	mov	r0, r2
 80065b4:	4798      	blx	r3
 80065b6:	4603      	mov	r3, r0
 80065b8:	b2da      	uxtb	r2, r3
 80065ba:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065be:	4413      	add	r3, r2
 80065c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				pointer += gSBGC->_ll->debugSprintf(&logBuffer[pointer], " [%d]:", serialCommand->_payloadSize);

			else
		#endif

				logBuffer[pointer] = '\n';
 80065c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065c8:	3350      	adds	r3, #80	; 0x50
 80065ca:	443b      	add	r3, r7
 80065cc:	220a      	movs	r2, #10
 80065ce:	f803 2c44 	strb.w	r2, [r3, #-68]

		if (pointer >= SBGC_DEBUG_BUFF_SIZE)
 80065d2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80065d6:	2b3f      	cmp	r3, #63	; 0x3f
 80065d8:	d901      	bls.n	80065de <DebugSBGC32_WriteLog+0x20a>
			SerialAPI_FatalErrorHandler();
 80065da:	f7fa fc49 	bl	8000e70 <SerialAPI_FatalErrorHandler>

		DebugSBGC32_PrintMessage(gSBGC, logBuffer);
 80065de:	f107 030c 	add.w	r3, r7, #12
 80065e2:	4619      	mov	r1, r3
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff fcc1 	bl	8005f6c <DebugSBGC32_PrintMessage>
 80065ea:	e000      	b.n	80065ee <DebugSBGC32_WriteLog+0x21a>
		if (serialCommand->parameters & SCParam_NO_NEED_LOG) return;
 80065ec:	bf00      	nop

				payloadOffset += (SBGC_DEBUG_BUFF_SIZE / 4);
			}

		#endif
	}
 80065ee:	3750      	adds	r7, #80	; 0x50
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	0800e0c4 	.word	0x0800e0c4
 80065f8:	0800e0cc 	.word	0x0800e0cc
 80065fc:	0800e0d4 	.word	0x0800e0d4
 8006600:	0800e0dc 	.word	0x0800e0dc
 8006604:	0800e0e0 	.word	0x0800e0e0
 8006608:	0800e0e8 	.word	0x0800e0e8
 800660c:	0800e0f0 	.word	0x0800e0f0
 8006610:	0800e0f8 	.word	0x0800e0f8

08006614 <PrivateSerialAPI_LinkDebug>:
	 *	@note	Quasi-private function
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 */
	void PrivateSerialAPI_LinkDebug (sbgcGeneral_t *gSBGC)
	{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
		gSBGC->_api->writeLog = DebugSBGC32_WriteLog;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	4a03      	ldr	r2, [pc, #12]	; (8006630 <PrivateSerialAPI_LinkDebug+0x1c>)
 8006622:	651a      	str	r2, [r3, #80]	; 0x50
	}
 8006624:	bf00      	nop
 8006626:	370c      	adds	r7, #12
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr
 8006630:	080063d5 	.word	0x080063d5

08006634 <SerialAPI_FindCommandsByToken>:
	 *
	 *	@return	Complex index in the next format:
	 *			0-7 bits - Tx lowest 8-bit | 8-15 bits - Rx lowest 8-bit
	 */
	static ui16 SerialAPI_FindCommandsByToken (sbgcGeneral_t *gSBGC, sbgcCommandToken_t commandToken)
	{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	807b      	strh	r3, [r7, #2]
		if (commandToken == SBGC_EMPTY_TOKEN) return SBGC_EMPTY_TOKEN;
 8006640:	887b      	ldrh	r3, [r7, #2]
 8006642:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006646:	4293      	cmp	r3, r2
 8006648:	d102      	bne.n	8006650 <SerialAPI_FindCommandsByToken+0x1c>
 800664a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800664e:	e079      	b.n	8006744 <SerialAPI_FindCommandsByToken+0x110>

		ui16 complexIndex = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	81fb      	strh	r3, [r7, #14]
		ui8 txCmdID = commandToken & 0x00FF;
 8006654:	887b      	ldrh	r3, [r7, #2]
 8006656:	737b      	strb	r3, [r7, #13]
		ui8 rxCmdID = commandToken >> 8;
 8006658:	887b      	ldrh	r3, [r7, #2]
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	b29b      	uxth	r3, r3
 800665e:	733b      	strb	r3, [r7, #12]

		sbgcBoolean_t needTx = sbgcFALSE, needRx = sbgcFALSE;
 8006660:	2300      	movs	r3, #0
 8006662:	72fb      	strb	r3, [r7, #11]
 8006664:	2300      	movs	r3, #0
 8006666:	72bb      	strb	r3, [r7, #10]

		if (txCmdID)
 8006668:	7b7b      	ldrb	r3, [r7, #13]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d001      	beq.n	8006672 <SerialAPI_FindCommandsByToken+0x3e>
			needTx = sbgcTRUE;
 800666e:	2301      	movs	r3, #1
 8006670:	72fb      	strb	r3, [r7, #11]

		if (rxCmdID)
 8006672:	7b3b      	ldrb	r3, [r7, #12]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <SerialAPI_FindCommandsByToken+0x48>
			needRx = sbgcTRUE;
 8006678:	2301      	movs	r3, #1
 800667a:	72bb      	strb	r3, [r7, #10]

		for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 800667c:	2300      	movs	r3, #0
 800667e:	727b      	strb	r3, [r7, #9]
 8006680:	e04a      	b.n	8006718 <SerialAPI_FindCommandsByToken+0xe4>
		{
			if (((gSBGC->_api->commandBuff[i]._id & 0x000000FF) == (ui32)txCmdID) &&
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	6959      	ldr	r1, [r3, #20]
 8006688:	7a7a      	ldrb	r2, [r7, #9]
 800668a:	4613      	mov	r3, r2
 800668c:	005b      	lsls	r3, r3, #1
 800668e:	4413      	add	r3, r2
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	440b      	add	r3, r1
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	b2da      	uxtb	r2, r3
 8006698:	7b7b      	ldrb	r3, [r7, #13]
 800669a:	429a      	cmp	r2, r3
 800669c:	d114      	bne.n	80066c8 <SerialAPI_FindCommandsByToken+0x94>
				(!(gSBGC->_api->commandBuff[i].parameters & SCParam_RX)))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	6959      	ldr	r1, [r3, #20]
 80066a4:	7a7a      	ldrb	r2, [r7, #9]
 80066a6:	4613      	mov	r3, r2
 80066a8:	005b      	lsls	r3, r3, #1
 80066aa:	4413      	add	r3, r2
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	440b      	add	r3, r1
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	b25b      	sxtb	r3, r3
			if (((gSBGC->_api->commandBuff[i]._id & 0x000000FF) == (ui32)txCmdID) &&
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	db07      	blt.n	80066c8 <SerialAPI_FindCommandsByToken+0x94>
			{
				complexIndex |= (i & 0x00FF);
 80066b8:	7a7b      	ldrb	r3, [r7, #9]
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	89fb      	ldrh	r3, [r7, #14]
 80066be:	4313      	orrs	r3, r2
 80066c0:	81fb      	strh	r3, [r7, #14]
				txCmdID = 0;
 80066c2:	2300      	movs	r3, #0
 80066c4:	737b      	strb	r3, [r7, #13]
 80066c6:	e024      	b.n	8006712 <SerialAPI_FindCommandsByToken+0xde>
			}

			else if ((gSBGC->_api->commandBuff[i]._id & 0x000000FF) == (ui32)rxCmdID &&
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	6959      	ldr	r1, [r3, #20]
 80066ce:	7a7a      	ldrb	r2, [r7, #9]
 80066d0:	4613      	mov	r3, r2
 80066d2:	005b      	lsls	r3, r3, #1
 80066d4:	4413      	add	r3, r2
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	440b      	add	r3, r1
 80066da:	691b      	ldr	r3, [r3, #16]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	7b3b      	ldrb	r3, [r7, #12]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d116      	bne.n	8006712 <SerialAPI_FindCommandsByToken+0xde>
					 (gSBGC->_api->commandBuff[i].parameters & SCParam_RX))
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	6959      	ldr	r1, [r3, #20]
 80066ea:	7a7a      	ldrb	r2, [r7, #9]
 80066ec:	4613      	mov	r3, r2
 80066ee:	005b      	lsls	r3, r3, #1
 80066f0:	4413      	add	r3, r2
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	440b      	add	r3, r1
 80066f6:	781b      	ldrb	r3, [r3, #0]
			else if ((gSBGC->_api->commandBuff[i]._id & 0x000000FF) == (ui32)rxCmdID &&
 80066f8:	b25b      	sxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	da09      	bge.n	8006712 <SerialAPI_FindCommandsByToken+0xde>
			{
				complexIndex |= ((i << 8) & 0xFF00);
 80066fe:	7a7b      	ldrb	r3, [r7, #9]
 8006700:	021b      	lsls	r3, r3, #8
 8006702:	b21a      	sxth	r2, r3
 8006704:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006708:	4313      	orrs	r3, r2
 800670a:	b21b      	sxth	r3, r3
 800670c:	81fb      	strh	r3, [r7, #14]
				rxCmdID = 0;
 800670e:	2300      	movs	r3, #0
 8006710:	733b      	strb	r3, [r7, #12]
		for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8006712:	7a7b      	ldrb	r3, [r7, #9]
 8006714:	3301      	adds	r3, #1
 8006716:	727b      	strb	r3, [r7, #9]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	7e1b      	ldrb	r3, [r3, #24]
 800671e:	7a7a      	ldrb	r2, [r7, #9]
 8006720:	429a      	cmp	r2, r3
 8006722:	d3ae      	bcc.n	8006682 <SerialAPI_FindCommandsByToken+0x4e>
			}
		}

		if ((needTx && txCmdID) && (needRx && rxCmdID))
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <SerialAPI_FindCommandsByToken+0x10e>
 800672a:	7b7b      	ldrb	r3, [r7, #13]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d008      	beq.n	8006742 <SerialAPI_FindCommandsByToken+0x10e>
 8006730:	7abb      	ldrb	r3, [r7, #10]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <SerialAPI_FindCommandsByToken+0x10e>
 8006736:	7b3b      	ldrb	r3, [r7, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d002      	beq.n	8006742 <SerialAPI_FindCommandsByToken+0x10e>
			complexIndex = SBGC_EMPTY_TOKEN;
 800673c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006740:	81fb      	strh	r3, [r7, #14]

		return complexIndex;
 8006742:	89fb      	ldrh	r3, [r7, #14]
	}
 8006744:	4618      	mov	r0, r3
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <SerialAPI_DeleteSentCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to command
 */
static void SerialAPI_DeleteSentCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8006750:	b480      	push	{r7}
 8006752:	b085      	sub	sp, #20
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	if (serialCommand->_payloadSize == 0)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	f000 808a 	beq.w	800687a <SerialAPI_DeleteSentCommand+0x12a>
		return;

	ui16 buffPointer = (ui16)(serialCommand->_payload - gSBGC->_api->txCommandBuff);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	685b      	ldr	r3, [r3, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006770:	1ad3      	subs	r3, r2, r3
 8006772:	81bb      	strh	r3, [r7, #12]
	ui16 shiftSize = calcFreeSpaceFIFO(gSBGC->_api->txCommandBuffHead, buffPointer, SBGC_TX_BUFF_TOTAL_SIZE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800677c:	b29b      	uxth	r3, r3
 800677e:	89ba      	ldrh	r2, [r7, #12]
 8006780:	429a      	cmp	r2, r3
 8006782:	d30b      	bcc.n	800679c <SerialAPI_DeleteSentCommand+0x4c>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800678c:	b29a      	uxth	r2, r3
 800678e:	89bb      	ldrh	r3, [r7, #12]
 8006790:	1ad3      	subs	r3, r2, r3
 8006792:	b29b      	uxth	r3, r3
 8006794:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006798:	b29b      	uxth	r3, r3
 800679a:	e007      	b.n	80067ac <SerialAPI_DeleteSentCommand+0x5c>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	89bb      	ldrh	r3, [r7, #12]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	817b      	strh	r3, [r7, #10]
	shiftSize = (shiftSize == SBGC_TX_BUFF_TOTAL_SIZE) ? 0 : shiftSize;
 80067ae:	897b      	ldrh	r3, [r7, #10]
 80067b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b4:	d001      	beq.n	80067ba <SerialAPI_DeleteSentCommand+0x6a>
 80067b6:	897b      	ldrh	r3, [r7, #10]
 80067b8:	e000      	b.n	80067bc <SerialAPI_DeleteSentCommand+0x6c>
 80067ba:	2300      	movs	r3, #0
 80067bc:	817b      	strh	r3, [r7, #10]

	if (buffPointer != gSBGC->_api->txCommandBuffTail)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	89ba      	ldrh	r2, [r7, #12]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d047      	beq.n	800685e <SerialAPI_DeleteSentCommand+0x10e>
	/* This command isn't first */
	{
		if (((buffPointer + serialCommand->_payloadSize) & SBGC_TX_BUFF_SIZE_MASK) == gSBGC->_api->txCommandBuffHead)
 80067ce:	89bb      	ldrh	r3, [r7, #12]
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 80067d6:	4413      	add	r3, r2
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	6852      	ldr	r2, [r2, #4]
 80067de:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d10d      	bne.n	8006802 <SerialAPI_DeleteSentCommand+0xb2>
		/* This command is latest */
		{
			gSBGC->_api->txCommandBuffHead -= serialCommand->_payloadSize;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	1a8a      	subs	r2, r1, r2
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			return;
 8006800:	e03c      	b.n	800687c <SerialAPI_DeleteSentCommand+0x12c>
		}

		/* This command is between other commands */
		for (ui16 i = 0; i < shiftSize; i++)
 8006802:	2300      	movs	r3, #0
 8006804:	81fb      	strh	r3, [r7, #14]
 8006806:	e018      	b.n	800683a <SerialAPI_DeleteSentCommand+0xea>
		/* Shifting */
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
					gSBGC->_api->txCommandBuff[((buffPointer + serialCommand->_payloadSize + i) & SBGC_TX_BUFF_SIZE_MASK)];
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800680e:	89bb      	ldrh	r3, [r7, #12]
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	f891 1024 	ldrb.w	r1, [r1, #36]	; 0x24
 8006816:	4419      	add	r1, r3
 8006818:	89fb      	ldrh	r3, [r7, #14]
 800681a:	440b      	add	r3, r1
 800681c:	b2db      	uxtb	r3, r3
 800681e:	441a      	add	r2, r3
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8006826:	89b8      	ldrh	r0, [r7, #12]
 8006828:	89fb      	ldrh	r3, [r7, #14]
 800682a:	4403      	add	r3, r0
 800682c:	b2db      	uxtb	r3, r3
 800682e:	440b      	add	r3, r1
					gSBGC->_api->txCommandBuff[((buffPointer + serialCommand->_payloadSize + i) & SBGC_TX_BUFF_SIZE_MASK)];
 8006830:	7812      	ldrb	r2, [r2, #0]
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
 8006832:	701a      	strb	r2, [r3, #0]
		for (ui16 i = 0; i < shiftSize; i++)
 8006834:	89fb      	ldrh	r3, [r7, #14]
 8006836:	3301      	adds	r3, #1
 8006838:	81fb      	strh	r3, [r7, #14]
 800683a:	89fa      	ldrh	r2, [r7, #14]
 800683c:	897b      	ldrh	r3, [r7, #10]
 800683e:	429a      	cmp	r2, r3
 8006840:	d3e2      	bcc.n	8006808 <SerialAPI_DeleteSentCommand+0xb8>

		/* Shift head after buffer shifting */
		gSBGC->_api->txCommandBuffHead -= serialCommand->_payloadSize;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	1a8a      	subs	r2, r1, r2
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800685c:	e00e      	b.n	800687c <SerialAPI_DeleteSentCommand+0x12c>
	}

	else
	/* This command is first */
		gSBGC->_api->txCommandBuffTail += serialCommand->_payloadSize;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	440a      	add	r2, r1
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006878:	e000      	b.n	800687c <SerialAPI_DeleteSentCommand+0x12c>
		return;
 800687a:	bf00      	nop
}
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006884:	4770      	bx	lr

08006886 <SerialAPI_SaveReceivedCommand>:
 *	@param	cmdID - ID part of serial command
 *	@param	payloadSize - size part of serial command
 *	@param	*payload - pointer to payload part of serial command
 */
static void SerialAPI_SaveReceivedCommand (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID, ui8 payloadSize, ui8 const *payload)
{
 8006886:	b490      	push	{r4, r7}
 8006888:	b086      	sub	sp, #24
 800688a:	af00      	add	r7, sp, #0
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	607b      	str	r3, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	72fb      	strb	r3, [r7, #11]
 8006894:	4613      	mov	r3, r2
 8006896:	72bb      	strb	r3, [r7, #10]
	if ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)) &&
 8006898:	7abb      	ldrb	r3, [r7, #10]
 800689a:	1c5a      	adds	r2, r3, #1
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068ac:	4299      	cmp	r1, r3
 80068ae:	d30c      	bcc.n	80068ca <SerialAPI_SaveReceivedCommand+0x44>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068b8:	4619      	mov	r1, r3
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068c2:	1acb      	subs	r3, r1, r3
 80068c4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80068c8:	e009      	b.n	80068de <SerialAPI_SaveReceivedCommand+0x58>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068d2:	4619      	mov	r1, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068dc:	1acb      	subs	r3, r1, r3
 80068de:	4293      	cmp	r3, r2
 80068e0:	dc4e      	bgt.n	8006980 <SerialAPI_SaveReceivedCommand+0xfa>
		(gSBGC->_api->rxCommandBuffHead != gSBGC->_api->rxCommandBuffTail))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)) &&
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d044      	beq.n	8006980 <SerialAPI_SaveReceivedCommand+0xfa>
			return;

		#else

			/* It's necessary to clean the space for a new serial command */
			while ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)))
 80068f6:	e016      	b.n	8006926 <SerialAPI_SaveReceivedCommand+0xa0>
				gSBGC->_api->rxCommandBuffTail += gSBGC->_api->rxCommandBuff[(gSBGC->_api->rxCommandBuffTail + 1) & SBGC_RX_BUFF_SIZE_MASK] + 2;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800690e:	3301      	adds	r3, #1
 8006910:	b2db      	uxtb	r3, r3
 8006912:	440b      	add	r3, r1
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	4413      	add	r3, r2
 8006918:	b2da      	uxtb	r2, r3
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	3202      	adds	r2, #2
 8006920:	b2d2      	uxtb	r2, r2
 8006922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			while ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)))
 8006926:	7abb      	ldrb	r3, [r7, #10]
 8006928:	1c5a      	adds	r2, r3, #1
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800693a:	4299      	cmp	r1, r3
 800693c:	d30c      	bcc.n	8006958 <SerialAPI_SaveReceivedCommand+0xd2>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006946:	4619      	mov	r1, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006950:	1acb      	subs	r3, r1, r3
 8006952:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8006956:	e009      	b.n	800696c <SerialAPI_SaveReceivedCommand+0xe6>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006960:	4619      	mov	r1, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800696a:	1acb      	subs	r3, r1, r3
 800696c:	4293      	cmp	r3, r2
 800696e:	ddc3      	ble.n	80068f8 <SerialAPI_SaveReceivedCommand+0x72>

			gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800697c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

		#endif
	}

	gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = cmdID;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800698e:	1c50      	adds	r0, r2, #1
 8006990:	b2c0      	uxtb	r0, r0
 8006992:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
 8006996:	4613      	mov	r3, r2
 8006998:	440b      	add	r3, r1
 800699a:	7afa      	ldrb	r2, [r7, #11]
 800699c:	701a      	strb	r2, [r3, #0]
	gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = payloadSize;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80069ac:	1c50      	adds	r0, r2, #1
 80069ae:	b2c0      	uxtb	r0, r0
 80069b0:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
 80069b4:	4613      	mov	r3, r2
 80069b6:	440b      	add	r3, r1
 80069b8:	7aba      	ldrb	r2, [r7, #10]
 80069ba:	701a      	strb	r2, [r3, #0]

	for (ui16 i = 0; i < payloadSize; i++)
 80069bc:	2300      	movs	r3, #0
 80069be:	82fb      	strh	r3, [r7, #22]
 80069c0:	e014      	b.n	80069ec <SerialAPI_SaveReceivedCommand+0x166>
		gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = payload[i];
 80069c2:	8afb      	ldrh	r3, [r7, #22]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	18d1      	adds	r1, r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80069d6:	1c54      	adds	r4, r2, #1
 80069d8:	b2e4      	uxtb	r4, r4
 80069da:	f883 4035 	strb.w	r4, [r3, #53]	; 0x35
 80069de:	4613      	mov	r3, r2
 80069e0:	4403      	add	r3, r0
 80069e2:	780a      	ldrb	r2, [r1, #0]
 80069e4:	701a      	strb	r2, [r3, #0]
	for (ui16 i = 0; i < payloadSize; i++)
 80069e6:	8afb      	ldrh	r3, [r7, #22]
 80069e8:	3301      	adds	r3, #1
 80069ea:	82fb      	strh	r3, [r7, #22]
 80069ec:	7abb      	ldrb	r3, [r7, #10]
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	8afa      	ldrh	r2, [r7, #22]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d3e5      	bcc.n	80069c2 <SerialAPI_SaveReceivedCommand+0x13c>
}
 80069f6:	bf00      	nop
 80069f8:	bf00      	nop
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bc90      	pop	{r4, r7}
 8006a00:	4770      	bx	lr

08006a02 <SerialAPI_ReadReceivedCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to command
 */
static ui8 SerialAPI_ReadReceivedCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8006a02:	b480      	push	{r7}
 8006a04:	b085      	sub	sp, #20
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	6078      	str	r0, [r7, #4]
 8006a0a:	6039      	str	r1, [r7, #0]
	serialCommand->_commandID = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP++];
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006a1a:	1c50      	adds	r0, r2, #1
 8006a1c:	b2c0      	uxtb	r0, r0
 8006a1e:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
 8006a22:	4613      	mov	r3, r2
 8006a24:	440b      	add	r3, r1
 8006a26:	781a      	ldrb	r2, [r3, #0]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

	ui8 payloadSize = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP++];
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006a3c:	1c50      	adds	r0, r2, #1
 8006a3e:	b2c0      	uxtb	r0, r0
 8006a40:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
 8006a44:	4613      	mov	r3, r2
 8006a46:	440b      	add	r3, r1
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	73fb      	strb	r3, [r7, #15]

	serialCommand->_payload = &gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP];
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	687a      	ldr	r2, [r7, #4]
 8006a54:	6852      	ldr	r2, [r2, #4]
 8006a56:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006a5a:	441a      	add	r2, r3
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	629a      	str	r2, [r3, #40]	; 0x28
	gSBGC->_api->rxCommandBuffCurP += payloadSize;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	7bfa      	ldrb	r2, [r7, #15]
 8006a6e:	440a      	add	r2, r1
 8006a70:	b2d2      	uxtb	r2, r2
 8006a72:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return payloadSize;
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3714      	adds	r7, #20
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <SerialAPI_DeleteReceivedCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*payload - pointer to command's payload
 */
static void SerialAPI_DeleteReceivedCommand (sbgcGeneral_t *gSBGC, ui8 const *payload)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
	if (payload == NULL)
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	f000 80ab 	beq.w	8006bec <SerialAPI_DeleteReceivedCommand+0x168>
		return;

	/* Note: gSBGC->_api->rxCommandBuffCurP aren't available to read here */

	ui16 buffPointer = (((((uintptr_t)payload) - 2) & SBGC_RX_BUFF_SIZE_MASK) - (uintptr_t)gSBGC->_api->rxCommandBuff) & SBGC_RX_BUFF_SIZE_MASK;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	6852      	ldr	r2, [r2, #4]
 8006a9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	3b02      	subs	r3, #2
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	81bb      	strh	r3, [r7, #12]
	ui8 cmdSize = gSBGC->_api->rxCommandBuff[((buffPointer + 1) & SBGC_RX_BUFF_SIZE_MASK)] + 2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ab0:	89bb      	ldrh	r3, [r7, #12]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	3302      	adds	r3, #2
 8006abc:	72fb      	strb	r3, [r7, #11]
	ui16 shiftSize = calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffHead, (buffPointer + cmdSize) & SBGC_RX_BUFF_SIZE_MASK,
 8006abe:	89ba      	ldrh	r2, [r7, #12]
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6852      	ldr	r2, [r2, #4]
 8006aca:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	db11      	blt.n	8006af6 <SerialAPI_DeleteReceivedCommand+0x72>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	7afb      	ldrb	r3, [r7, #11]
 8006ade:	b299      	uxth	r1, r3
 8006ae0:	89bb      	ldrh	r3, [r7, #12]
 8006ae2:	440b      	add	r3, r1
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	1ad3      	subs	r3, r2, r3
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	e00d      	b.n	8006b12 <SerialAPI_DeleteReceivedCommand+0x8e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	7afb      	ldrb	r3, [r7, #11]
 8006b02:	b299      	uxth	r1, r3
 8006b04:	89bb      	ldrh	r3, [r7, #12]
 8006b06:	440b      	add	r3, r1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	813b      	strh	r3, [r7, #8]
									   SBGC_RX_BUFF_TOTAL_SIZE);
	shiftSize = (shiftSize == SBGC_RX_BUFF_TOTAL_SIZE) ? 0 : shiftSize;
 8006b14:	893b      	ldrh	r3, [r7, #8]
 8006b16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b1a:	d001      	beq.n	8006b20 <SerialAPI_DeleteReceivedCommand+0x9c>
 8006b1c:	893b      	ldrh	r3, [r7, #8]
 8006b1e:	e000      	b.n	8006b22 <SerialAPI_DeleteReceivedCommand+0x9e>
 8006b20:	2300      	movs	r3, #0
 8006b22:	813b      	strh	r3, [r7, #8]

	if (buffPointer != gSBGC->_api->rxCommandBuffTail)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	89ba      	ldrh	r2, [r7, #12]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d047      	beq.n	8006bc4 <SerialAPI_DeleteReceivedCommand+0x140>
	/* This command isn't first */
	{
		if (((buffPointer + cmdSize) & SBGC_RX_BUFF_SIZE_MASK) == gSBGC->_api->rxCommandBuffHead)
 8006b34:	89ba      	ldrh	r2, [r7, #12]
 8006b36:	7afb      	ldrb	r3, [r7, #11]
 8006b38:	4413      	add	r3, r2
 8006b3a:	b2db      	uxtb	r3, r3
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	6852      	ldr	r2, [r2, #4]
 8006b40:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d113      	bne.n	8006b70 <SerialAPI_DeleteReceivedCommand+0xec>
		/* This command is latest */
		{
			gSBGC->_api->rxCommandBuffHead -= cmdSize;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	7afa      	ldrb	r2, [r7, #11]
 8006b56:	1a8a      	subs	r2, r1, r2
 8006b58:	b2d2      	uxtb	r2, r2
 8006b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			/* Prepare the parser for next reading */
			gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006b6a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			return;
 8006b6e:	e03e      	b.n	8006bee <SerialAPI_DeleteReceivedCommand+0x16a>
		}

		/* This command is between other commands */
		for (ui16 i = 0; i < shiftSize; i++)
 8006b70:	2300      	movs	r3, #0
 8006b72:	81fb      	strh	r3, [r7, #14]
 8006b74:	e016      	b.n	8006ba4 <SerialAPI_DeleteReceivedCommand+0x120>
		/* Shifting */
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
					gSBGC->_api->rxCommandBuff[((buffPointer + cmdSize + i) & SBGC_RX_BUFF_SIZE_MASK)];
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b7c:	89b9      	ldrh	r1, [r7, #12]
 8006b7e:	7afb      	ldrb	r3, [r7, #11]
 8006b80:	4419      	add	r1, r3
 8006b82:	89fb      	ldrh	r3, [r7, #14]
 8006b84:	440b      	add	r3, r1
 8006b86:	b2db      	uxtb	r3, r3
 8006b88:	441a      	add	r2, r3
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b90:	89b8      	ldrh	r0, [r7, #12]
 8006b92:	89fb      	ldrh	r3, [r7, #14]
 8006b94:	4403      	add	r3, r0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	440b      	add	r3, r1
					gSBGC->_api->rxCommandBuff[((buffPointer + cmdSize + i) & SBGC_RX_BUFF_SIZE_MASK)];
 8006b9a:	7812      	ldrb	r2, [r2, #0]
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
 8006b9c:	701a      	strb	r2, [r3, #0]
		for (ui16 i = 0; i < shiftSize; i++)
 8006b9e:	89fb      	ldrh	r3, [r7, #14]
 8006ba0:	3301      	adds	r3, #1
 8006ba2:	81fb      	strh	r3, [r7, #14]
 8006ba4:	89fa      	ldrh	r2, [r7, #14]
 8006ba6:	893b      	ldrh	r3, [r7, #8]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d3e4      	bcc.n	8006b76 <SerialAPI_DeleteReceivedCommand+0xf2>

		/* Shift head after buffer shifting */
		gSBGC->_api->rxCommandBuffHead -= cmdSize;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	7afa      	ldrb	r2, [r7, #11]
 8006bba:	1a8a      	subs	r2, r1, r2
 8006bbc:	b2d2      	uxtb	r2, r2
 8006bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006bc2:	e00a      	b.n	8006bda <SerialAPI_DeleteReceivedCommand+0x156>
	}

	else
	/* This command is first */
		gSBGC->_api->rxCommandBuffTail += cmdSize;  // Shift head pointer
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	7afa      	ldrb	r2, [r7, #11]
 8006bd2:	440a      	add	r2, r1
 8006bd4:	b2d2      	uxtb	r2, r2
 8006bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Prepare the parser for next reading */
	gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006be6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006bea:	e000      	b.n	8006bee <SerialAPI_DeleteReceivedCommand+0x16a>
		return;
 8006bec:	bf00      	nop
}
 8006bee:	3714      	adds	r7, #20
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <SerialAPI_DeleteCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	index - command sequence number
 */
static void SerialAPI_DeleteCommand (sbgcGeneral_t *gSBGC, ui8 index)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	460b      	mov	r3, r1
 8006c02:	70fb      	strb	r3, [r7, #3]
	if ((index >= gSBGC->_api->commandNumber) || (gSBGC->_api->commandNumber == 0))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	7e1b      	ldrb	r3, [r3, #24]
 8006c0a:	78fa      	ldrb	r2, [r7, #3]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d27f      	bcs.n	8006d10 <SerialAPI_DeleteCommand+0x118>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	7e1b      	ldrb	r3, [r3, #24]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d07a      	beq.n	8006d10 <SerialAPI_DeleteCommand+0x118>
		return;

	if (gSBGC->_api->commandBuff[index]._state != SCState_FORMING)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	6959      	ldr	r1, [r3, #20]
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	4613      	mov	r3, r2
 8006c24:	005b      	lsls	r3, r3, #1
 8006c26:	4413      	add	r3, r2
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	440b      	add	r3, r1
 8006c2c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d03c      	beq.n	8006cae <SerialAPI_DeleteCommand+0xb6>
	/* A command was in runtime */
	{
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006c34:	2300      	movs	r3, #0
 8006c36:	60fb      	str	r3, [r7, #12]
 8006c38:	e01e      	b.n	8006c78 <SerialAPI_DeleteCommand+0x80>
			memcpy(&gSBGC->_api->commandBuff[index + i], &gSBGC->_api->commandBuff[index + i + 1], sizeof(serialAPI_Command_t));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	695a      	ldr	r2, [r3, #20]
 8006c40:	78f9      	ldrb	r1, [r7, #3]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	440b      	add	r3, r1
 8006c46:	4619      	mov	r1, r3
 8006c48:	460b      	mov	r3, r1
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	440b      	add	r3, r1
 8006c4e:	011b      	lsls	r3, r3, #4
 8006c50:	18d0      	adds	r0, r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	6959      	ldr	r1, [r3, #20]
 8006c58:	78fa      	ldrb	r2, [r7, #3]
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	1c5a      	adds	r2, r3, #1
 8006c60:	4613      	mov	r3, r2
 8006c62:	005b      	lsls	r3, r3, #1
 8006c64:	4413      	add	r3, r2
 8006c66:	011b      	lsls	r3, r3, #4
 8006c68:	440b      	add	r3, r1
 8006c6a:	2230      	movs	r2, #48	; 0x30
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	f002 fe05 	bl	800987c <memcpy>
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	3301      	adds	r3, #1
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	7e1b      	ldrb	r3, [r3, #24]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	78fb      	ldrb	r3, [r7, #3]
 8006c82:	1ad3      	subs	r3, r2, r3
 8006c84:	3b01      	subs	r3, #1
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	dbd6      	blt.n	8006c3a <SerialAPI_DeleteCommand+0x42>

		gSBGC->_api->commandNumber--;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	7e1a      	ldrb	r2, [r3, #24]
 8006c92:	3a01      	subs	r2, #1
 8006c94:	b2d2      	uxtb	r2, r2
 8006c96:	761a      	strb	r2, [r3, #24]
		gSBGC->_api->commandNumber = constrain_(gSBGC->_api->commandNumber, 0, SBGC_MAX_COMMAND_NUM);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	685b      	ldr	r3, [r3, #4]
 8006c9c:	7e1a      	ldrb	r2, [r3, #24]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	2a0a      	cmp	r2, #10
 8006ca4:	bf28      	it	cs
 8006ca6:	220a      	movcs	r2, #10
 8006ca8:	b2d2      	uxtb	r2, r2
 8006caa:	761a      	strb	r2, [r3, #24]
 8006cac:	e02b      	b.n	8006d06 <SerialAPI_DeleteCommand+0x10e>
	}

	else
	/* A command cannot continue to exist cause a daughter command doesn't fit to the command buffer */
	{
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60bb      	str	r3, [r7, #8]
 8006cb2:	e01e      	b.n	8006cf2 <SerialAPI_DeleteCommand+0xfa>
			memcpy(&gSBGC->_api->commandBuff[index + i], &gSBGC->_api->commandBuff[index + i + 1], sizeof(serialAPI_Command_t));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	695a      	ldr	r2, [r3, #20]
 8006cba:	78f9      	ldrb	r1, [r7, #3]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	440b      	add	r3, r1
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	440b      	add	r3, r1
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	18d0      	adds	r0, r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	6959      	ldr	r1, [r3, #20]
 8006cd2:	78fa      	ldrb	r2, [r7, #3]
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	011b      	lsls	r3, r3, #4
 8006ce2:	440b      	add	r3, r1
 8006ce4:	2230      	movs	r2, #48	; 0x30
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f002 fdc8 	bl	800987c <memcpy>
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	60bb      	str	r3, [r7, #8]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	7e1b      	ldrb	r3, [r3, #24]
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	1ad3      	subs	r3, r2, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	dbd6      	blt.n	8006cb4 <SerialAPI_DeleteCommand+0xbc>
	}

	serialAPI_CurCmd_ = NULL;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	621a      	str	r2, [r3, #32]
 8006d0e:	e000      	b.n	8006d12 <SerialAPI_DeleteCommand+0x11a>
		return;
 8006d10:	bf00      	nop
}
 8006d12:	3710      	adds	r7, #16
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <SerialAPI_FindCommandByID>:
 *	@param	ID - serialAPI_Command_t.ID
 *
 *	@return Pointer to found serial command
 */
static serialAPI_Command_t *SerialAPI_FindCommandByID (sbgcGeneral_t *gSBGC, ui32 ID)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b085      	sub	sp, #20
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	6039      	str	r1, [r7, #0]
	for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8006d22:	2300      	movs	r3, #0
 8006d24:	73fb      	strb	r3, [r7, #15]
 8006d26:	e019      	b.n	8006d5c <SerialAPI_FindCommandByID+0x44>
		if (gSBGC->_api->commandBuff[i]._id == ID)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	6959      	ldr	r1, [r3, #20]
 8006d2e:	7bfa      	ldrb	r2, [r7, #15]
 8006d30:	4613      	mov	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	4413      	add	r3, r2
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	440b      	add	r3, r1
 8006d3a:	691b      	ldr	r3, [r3, #16]
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	429a      	cmp	r2, r3
 8006d40:	d109      	bne.n	8006d56 <SerialAPI_FindCommandByID+0x3e>
			return &gSBGC->_api->commandBuff[i];
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	6959      	ldr	r1, [r3, #20]
 8006d48:	7bfa      	ldrb	r2, [r7, #15]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	4413      	add	r3, r2
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	440b      	add	r3, r1
 8006d54:	e009      	b.n	8006d6a <SerialAPI_FindCommandByID+0x52>
	for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	73fb      	strb	r3, [r7, #15]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	7e1b      	ldrb	r3, [r3, #24]
 8006d62:	7bfa      	ldrb	r2, [r7, #15]
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d3df      	bcc.n	8006d28 <SerialAPI_FindCommandByID+0x10>

	return NULL;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr

08006d76 <SBGC32_SendCommand>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to completed structure
 *			ready to be transmitted
 */
static void SBGC32_SendCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b082      	sub	sp, #8
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
 8006d7e:	6039      	str	r1, [r7, #0]
			gSBGC->_api->txErrorsCount++;
		}

	#else

		if (serialCommand->_state == SCState_PREPARED)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d10e      	bne.n	8006da8 <SBGC32_SendCommand+0x32>
		/* Launch the command */
		{
			serialCommand->_state = SCState_PROCESSING;
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2203      	movs	r2, #3
 8006d8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			serialCommand->_timestamp = serialAPI_GetTick();
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	6812      	ldr	r2, [r2, #0]
 8006d9e:	4610      	mov	r0, r2
 8006da0:	4798      	blx	r3
 8006da2:	4602      	mov	r2, r0
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	62da      	str	r2, [r3, #44]	; 0x2c
		}

		/* Transmit */
		gSBGC->_ll->tx(gSBGC);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	7a1b      	ldrb	r3, [r3, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d104      	bne.n	8006dc4 <SBGC32_SendCommand+0x4e>
			serialCommand->_state = SCState_PROCESSED;
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	22ff      	movs	r2, #255	; 0xff
 8006dbe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				gSBGC->_api->txErrorsCount++;
			}
		}

	#endif
}
 8006dc2:	e025      	b.n	8006e10 <SBGC32_SendCommand+0x9a>
		else if ((serialAPI_GetTick() - serialCommand->_timestamp) > serialCommand->timeout)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	4798      	blx	r3
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	1ad2      	subs	r2, r2, r3
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d915      	bls.n	8006e10 <SBGC32_SendCommand+0x9a>
			if (serialCommand->_state & SCParam_RETAIN)
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d004      	beq.n	8006dfc <SBGC32_SendCommand+0x86>
				serialCommand->_state = SCState_RELOAD;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	2204      	movs	r2, #4
 8006df6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8006dfa:	e009      	b.n	8006e10 <SBGC32_SendCommand+0x9a>
				serialCommand->_state = SCState_ERROR;
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2206      	movs	r2, #6
 8006e00:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				gSBGC->_api->txErrorsCount++;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	685b      	ldr	r3, [r3, #4]
 8006e08:	8a1a      	ldrh	r2, [r3, #16]
 8006e0a:	3201      	adds	r2, #1
 8006e0c:	b292      	uxth	r2, r2
 8006e0e:	821a      	strh	r2, [r3, #16]
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <SerialAPI_FilterSerialCommand>:
 *	@param	payloadSize - size of received command
 *
 *	@return	Whether the command will be accepted or not
 */
static sbgcBoolean_t SerialAPI_FilterSerialCommand (serialAPI_Command_t *serialCommand, ui8 payloadSize)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
	/* Check the expected payload size */
	if ((serialCommand->_payloadSize != 0) && (serialCommand->_payloadSize != payloadSize))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d007      	beq.n	8006e3e <SerialAPI_FilterSerialCommand+0x26>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e34:	78fa      	ldrb	r2, [r7, #3]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d001      	beq.n	8006e3e <SerialAPI_FilterSerialCommand+0x26>
		return sbgcFALSE;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e01e      	b.n	8006e7c <SerialAPI_FilterSerialCommand+0x64>

	serialCommand->_payloadSize = payloadSize;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	78fa      	ldrb	r2, [r7, #3]
 8006e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	switch (serialCommand->_commandID)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006e4c:	2b43      	cmp	r3, #67	; 0x43
 8006e4e:	d001      	beq.n	8006e54 <SerialAPI_FilterSerialCommand+0x3c>
 8006e50:	2bff      	cmp	r3, #255	; 0xff
 8006e52:	d10f      	bne.n	8006e74 <SerialAPI_FilterSerialCommand+0x5c>
		case CMD_CONFIRM :
		case CMD_ERROR :
		{
			#if (SBGC_NEED_CONFIRM_CMD)

				if (serialCommand->_pDestination)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d00d      	beq.n	8006e78 <SerialAPI_FilterSerialCommand+0x60>
				{
					sbgcConfirm_t *confirm = (sbgcConfirm_t*)serialCommand->_pDestination;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	60fb      	str	r3, [r7, #12]

					if (confirm->commandID != serialCommand->_payload[0])
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	781a      	ldrb	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d003      	beq.n	8006e78 <SerialAPI_FilterSerialCommand+0x60>
						return sbgcFALSE;
 8006e70:	2300      	movs	r3, #0
 8006e72:	e003      	b.n	8006e7c <SerialAPI_FilterSerialCommand+0x64>
				break;
			#endif
		}

		default :
			break;
 8006e74:	bf00      	nop
 8006e76:	e000      	b.n	8006e7a <SerialAPI_FilterSerialCommand+0x62>
				break;
 8006e78:	bf00      	nop
	}

	return sbgcTRUE;
 8006e7a:	2301      	movs	r3, #1
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <SBGC32_FindCommand>:
 *	@param	*serialCommand - pointer to a structure, into which
 *			the found serial command will be overwritten
 *	@param	cmdID - SBGC32 command identifier
 */
static void SBGC32_FindCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand, serialAPI_CommandID_t cmdID)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	4613      	mov	r3, r2
 8006e94:	71fb      	strb	r3, [r7, #7]
	serialAPI_CommandID_t cmdID_Temp;

	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	721a      	strb	r2, [r3, #8]
		serialCommand->_state = SCState_PROCESSING;
		serialCommand->timeout = SBGC_DEFAULT_TIMEOUT;

	#else

		if (serialCommand->_state == SCState_PREPARED)
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d10e      	bne.n	8006ec4 <SBGC32_FindCommand+0x3c>
		{
			serialCommand->_timestamp = serialAPI_GetTick();
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	68fa      	ldr	r2, [r7, #12]
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	6812      	ldr	r2, [r2, #0]
 8006eb2:	4610      	mov	r0, r2
 8006eb4:	4798      	blx	r3
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	62da      	str	r2, [r3, #44]	; 0x2c
			serialCommand->_state = SCState_PROCESSING;
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		}

	#endif

	gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	685a      	ldr	r2, [r3, #4]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006ed0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Start high-layer parsing */
	while (1)
	{
		if (gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d104      	bne.n	8006ef2 <SBGC32_FindCommand+0x6a>
		/* Read a new data if the Rx buffer is empty or there wasn't a needed command there */
			gSBGC->_ll->rx(gSBGC);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	4798      	blx	r3

		cmdID_Temp = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP];
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	6852      	ldr	r2, [r2, #4]
 8006efc:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8006f00:	4413      	add	r3, r2
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	75fb      	strb	r3, [r7, #23]

		/* Handling */
		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	7a1b      	ldrb	r3, [r3, #8]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d146      	bne.n	8006f9c <SBGC32_FindCommand+0x114>
		/* We have some serial command */
		{
			if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 8006f0e:	79fb      	ldrb	r3, [r7, #7]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d00c      	beq.n	8006f2e <SBGC32_FindCommand+0xa6>
 8006f14:	7dfa      	ldrb	r2, [r7, #23]
 8006f16:	79fb      	ldrb	r3, [r7, #7]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d008      	beq.n	8006f2e <SBGC32_FindCommand+0xa6>
				(cmdID_Temp == cmdID) ||
 8006f1c:	79fb      	ldrb	r3, [r7, #7]
 8006f1e:	2b43      	cmp	r3, #67	; 0x43
 8006f20:	d002      	beq.n	8006f28 <SBGC32_FindCommand+0xa0>
				(((cmdID == CMD_CONFIRM) || (cmdID == CMD_CAN_DEVICE_SCAN)) && (cmdID_Temp == CMD_ERROR)))
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	2b60      	cmp	r3, #96	; 0x60
 8006f26:	d11c      	bne.n	8006f62 <SBGC32_FindCommand+0xda>
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2bff      	cmp	r3, #255	; 0xff
 8006f2c:	d119      	bne.n	8006f62 <SBGC32_FindCommand+0xda>
			/* A correct command has parsed (or a CMD_ERROR have come while we wait a CMD_CONFIRM or a CMD_CAN_DEVICE_SCAN) */
			{
				ui8 payloadSize = SerialAPI_ReadReceivedCommand(gSBGC, serialCommand);
 8006f2e:	68b9      	ldr	r1, [r7, #8]
 8006f30:	68f8      	ldr	r0, [r7, #12]
 8006f32:	f7ff fd66 	bl	8006a02 <SerialAPI_ReadReceivedCommand>
 8006f36:	4603      	mov	r3, r0
 8006f38:	75bb      	strb	r3, [r7, #22]

				if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d007      	beq.n	8006f50 <SBGC32_FindCommand+0xc8>
					SerialAPI_FilterSerialCommand(serialCommand, payloadSize))
 8006f40:	7dbb      	ldrb	r3, [r7, #22]
 8006f42:	4619      	mov	r1, r3
 8006f44:	68b8      	ldr	r0, [r7, #8]
 8006f46:	f7ff ff67 	bl	8006e18 <SerialAPI_FilterSerialCommand>
 8006f4a:	4603      	mov	r3, r0
				if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d024      	beq.n	8006f9a <SBGC32_FindCommand+0x112>
				/* Search command has required advanced searching patterns, or they aren't requested.
				   Or pass next if receiving any command */
				{
					serialCommand->_payloadSize = payloadSize;
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	7dba      	ldrb	r2, [r7, #22]
 8006f54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					serialCommand->_state = SCState_PROCESSED;
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	22ff      	movs	r2, #255	; 0xff
 8006f5c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

					/* Command was received fine, exit */
					return;
 8006f60:	e05f      	b.n	8007022 <SBGC32_FindCommand+0x19a>
				}

				/* Else search command doesn't correspond advanced searching patterns. Go next */
			}

			else if (cmdID_Temp != cmdID)
 8006f62:	7dfa      	ldrb	r2, [r7, #23]
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d018      	beq.n	8006f9c <SBGC32_FindCommand+0x114>
			/* Has wrong command parsed or  */
				gSBGC->_api->rxCommandBuffCurP += gSBGC->_api->rxCommandBuff[(gSBGC->_api->rxCommandBuffCurP + 1) & SBGC_RX_BUFF_SIZE_MASK] + 2;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	685b      	ldr	r3, [r3, #4]
 8006f7c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006f80:	3301      	adds	r3, #1
 8006f82:	b2db      	uxtb	r3, r3
 8006f84:	440b      	add	r3, r1
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	4413      	add	r3, r2
 8006f8a:	b2da      	uxtb	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	3202      	adds	r2, #2
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006f98:	e000      	b.n	8006f9c <SBGC32_FindCommand+0x114>
			{
 8006f9a:	bf00      	nop
		}

		/* Timeout and buffer ending checking */
		#if (SBGC_NON_BLOCKING_MODE)

			if ((gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead) &&
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d191      	bne.n	8006ed4 <SBGC32_FindCommand+0x4c>
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK))
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	7a1b      	ldrb	r3, [r3, #8]
			if ((gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead) &&
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d08d      	beq.n	8006ed4 <SBGC32_FindCommand+0x4c>

		#endif

			{
				/* Return rxCommandBuffCurP to the buffer start */
				gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	685a      	ldr	r2, [r3, #4]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006fc4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

				#if (SBGC_USES_OS_SUPPORT == sbgcOFF)

					#if (SBGC_NON_BLOCKING_MODE)

						if ((serialAPI_GetTick() - serialCommand->_timestamp) > serialCommand->timeout)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	4798      	blx	r3
 8006fd8:	4602      	mov	r2, r0
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fde:	1ad2      	subs	r2, r2, r3
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d914      	bls.n	8007012 <SBGC32_FindCommand+0x18a>
						{
							if (serialCommand->parameters & SCParam_RETAIN)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d004      	beq.n	8006ffe <SBGC32_FindCommand+0x176>
								serialCommand->_state = SCState_RELOAD;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2204      	movs	r2, #4
 8006ff8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8006ffc:	e009      	b.n	8007012 <SBGC32_FindCommand+0x18a>

							else
							{
								serialCommand->_state = SCState_ERROR;
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2206      	movs	r2, #6
 8007002:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
								gSBGC->_api->rxErrorsCount++;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	8a5a      	ldrh	r2, [r3, #18]
 800700c:	3201      	adds	r2, #1
 800700e:	b292      	uxth	r2, r2
 8007010:	825a      	strh	r2, [r3, #18]
						serialCommand->_state = SCState_ERROR;
						gSBGC->_api->rxErrorsCount++;

					#endif

					if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	7a1b      	ldrb	r3, [r3, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d102      	bne.n	8007020 <SBGC32_FindCommand+0x198>
					/* For example a case when a stream clogs serialAPI */
						gSBGC->_lastSerialCommandStatus = serialAPI_RX_NOT_FOUND_ERROR;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2206      	movs	r2, #6
 800701e:	721a      	strb	r2, [r3, #8]

				#endif

				return;
 8007020:	bf00      	nop
			}
	}
}
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <SerialAPI_SortCommands>:
	 *	@note	Private function
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 */
	static void SerialAPI_SortCommands (sbgcGeneral_t *gSBGC)
	{
 8007028:	b580      	push	{r7, lr}
 800702a:	b092      	sub	sp, #72	; 0x48
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
		if (gSBGC->_api->commandSortFlag) return;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	f040 8104 	bne.w	8007246 <SerialAPI_SortCommands+0x21e>
		serialAPI_Command_t cmdTemp;
		ui16 commandIndexTemp;
		ui8 commandPriorityTemp;
		ui32 commandID_Temp;

		for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 800703e:	2300      	movs	r3, #0
 8007040:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007044:	e0f1      	b.n	800722a <SerialAPI_SortCommands+0x202>
		{
			commandIndexTemp = 0;
 8007046:	2300      	movs	r3, #0
 8007048:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			commandPriorityTemp = 0;
 800704c:	2300      	movs	r3, #0
 800704e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
			commandID_Temp = 0xFFFFFFFFU;
 8007052:	f04f 33ff 	mov.w	r3, #4294967295
 8007056:	643b      	str	r3, [r7, #64]	; 0x40

			for (ui8 k = i; k < gSBGC->_api->commandNumber; k++)
 8007058:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800705c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007060:	e093      	b.n	800718a <SerialAPI_SortCommands+0x162>
			{
				/* Sorting by priority, direction and index */
				if ((gSBGC->_api->commandBuff[k].priority > commandPriorityTemp) ||
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	6959      	ldr	r1, [r3, #20]
 8007068:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800706c:	4613      	mov	r3, r2
 800706e:	005b      	lsls	r3, r3, #1
 8007070:	4413      	add	r3, r2
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	440b      	add	r3, r1
 8007076:	785b      	ldrb	r3, [r3, #1]
 8007078:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800707c:	429a      	cmp	r2, r3
 800707e:	d362      	bcc.n	8007146 <SerialAPI_SortCommands+0x11e>
					/* or there are two same-priority command, but it's necessary to up TX command under RX command */
					((gSBGC->_api->commandBuff[k].priority == commandPriorityTemp) &&
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	6959      	ldr	r1, [r3, #20]
 8007086:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800708a:	4613      	mov	r3, r2
 800708c:	005b      	lsls	r3, r3, #1
 800708e:	4413      	add	r3, r2
 8007090:	011b      	lsls	r3, r3, #4
 8007092:	440b      	add	r3, r1
 8007094:	785b      	ldrb	r3, [r3, #1]
				if ((gSBGC->_api->commandBuff[k].priority > commandPriorityTemp) ||
 8007096:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800709a:	429a      	cmp	r2, r3
 800709c:	d11b      	bne.n	80070d6 <SerialAPI_SortCommands+0xae>
					((gSBGC->_api->commandBuff[commandIndexTemp].parameters & SCParam_RX) &&
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	6959      	ldr	r1, [r3, #20]
 80070a4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80070a8:	4613      	mov	r3, r2
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	4413      	add	r3, r2
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	440b      	add	r3, r1
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	b25b      	sxtb	r3, r3
					((gSBGC->_api->commandBuff[k].priority == commandPriorityTemp) &&
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	da0d      	bge.n	80070d6 <SerialAPI_SortCommands+0xae>
					(!(gSBGC->_api->commandBuff[k].parameters & SCParam_RX)))) ||
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	6959      	ldr	r1, [r3, #20]
 80070c0:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80070c4:	4613      	mov	r3, r2
 80070c6:	005b      	lsls	r3, r3, #1
 80070c8:	4413      	add	r3, r2
 80070ca:	011b      	lsls	r3, r3, #4
 80070cc:	440b      	add	r3, r1
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	b25b      	sxtb	r3, r3
					((gSBGC->_api->commandBuff[commandIndexTemp].parameters & SCParam_RX) &&
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da37      	bge.n	8007146 <SerialAPI_SortCommands+0x11e>
					/* or two commands with similar priority and direction but they have different id (number) */
					((gSBGC->_api->commandBuff[k].priority == commandPriorityTemp) &&
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	685b      	ldr	r3, [r3, #4]
 80070da:	6959      	ldr	r1, [r3, #20]
 80070dc:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 80070e0:	4613      	mov	r3, r2
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	4413      	add	r3, r2
 80070e6:	011b      	lsls	r3, r3, #4
 80070e8:	440b      	add	r3, r1
 80070ea:	785b      	ldrb	r3, [r3, #1]
					(!(gSBGC->_api->commandBuff[k].parameters & SCParam_RX)))) ||
 80070ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d145      	bne.n	8007180 <SerialAPI_SortCommands+0x158>
					((gSBGC->_api->commandBuff[commandIndexTemp].parameters & SCParam_RX) == (gSBGC->_api->commandBuff[k].parameters & SCParam_RX)) &&
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	6959      	ldr	r1, [r3, #20]
 80070fa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80070fe:	4613      	mov	r3, r2
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	4413      	add	r3, r2
 8007104:	011b      	lsls	r3, r3, #4
 8007106:	440b      	add	r3, r1
 8007108:	7819      	ldrb	r1, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	6958      	ldr	r0, [r3, #20]
 8007110:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007114:	4613      	mov	r3, r2
 8007116:	005b      	lsls	r3, r3, #1
 8007118:	4413      	add	r3, r2
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	4403      	add	r3, r0
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	404b      	eors	r3, r1
 8007122:	b2db      	uxtb	r3, r3
 8007124:	b25b      	sxtb	r3, r3
					((gSBGC->_api->commandBuff[k].priority == commandPriorityTemp) &&
 8007126:	2b00      	cmp	r3, #0
 8007128:	db2a      	blt.n	8007180 <SerialAPI_SortCommands+0x158>
					(gSBGC->_api->commandBuff[k]._id < commandID_Temp)))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	6959      	ldr	r1, [r3, #20]
 8007130:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007134:	4613      	mov	r3, r2
 8007136:	005b      	lsls	r3, r3, #1
 8007138:	4413      	add	r3, r2
 800713a:	011b      	lsls	r3, r3, #4
 800713c:	440b      	add	r3, r1
 800713e:	691b      	ldr	r3, [r3, #16]
					((gSBGC->_api->commandBuff[commandIndexTemp].parameters & SCParam_RX) == (gSBGC->_api->commandBuff[k].parameters & SCParam_RX)) &&
 8007140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007142:	429a      	cmp	r2, r3
 8007144:	d91c      	bls.n	8007180 <SerialAPI_SortCommands+0x158>
				{
					commandPriorityTemp = gSBGC->_api->commandBuff[k].priority;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	6959      	ldr	r1, [r3, #20]
 800714c:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007150:	4613      	mov	r3, r2
 8007152:	005b      	lsls	r3, r3, #1
 8007154:	4413      	add	r3, r2
 8007156:	011b      	lsls	r3, r3, #4
 8007158:	440b      	add	r3, r1
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
					commandID_Temp = gSBGC->_api->commandBuff[k]._id;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	6959      	ldr	r1, [r3, #20]
 8007166:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 800716a:	4613      	mov	r3, r2
 800716c:	005b      	lsls	r3, r3, #1
 800716e:	4413      	add	r3, r2
 8007170:	011b      	lsls	r3, r3, #4
 8007172:	440b      	add	r3, r1
 8007174:	691b      	ldr	r3, [r3, #16]
 8007176:	643b      	str	r3, [r7, #64]	; 0x40

					commandIndexTemp = k;
 8007178:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800717c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			for (ui8 k = i; k < gSBGC->_api->commandNumber; k++)
 8007180:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8007184:	3301      	adds	r3, #1
 8007186:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	7e1b      	ldrb	r3, [r3, #24]
 8007190:	f897 203e 	ldrb.w	r2, [r7, #62]	; 0x3e
 8007194:	429a      	cmp	r2, r3
 8007196:	f4ff af64 	bcc.w	8007062 <SerialAPI_SortCommands+0x3a>
				}
			}

			if ((commandIndexTemp != i) && (commandPriorityTemp > 0))
 800719a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800719e:	b29b      	uxth	r3, r3
 80071a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d03b      	beq.n	8007220 <SerialAPI_SortCommands+0x1f8>
 80071a8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d037      	beq.n	8007220 <SerialAPI_SortCommands+0x1f8>
			{
				memcpy(&cmdTemp, &gSBGC->_api->commandBuff[i], sizeof(serialAPI_Command_t));
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	6959      	ldr	r1, [r3, #20]
 80071b6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80071ba:	4613      	mov	r3, r2
 80071bc:	005b      	lsls	r3, r3, #1
 80071be:	4413      	add	r3, r2
 80071c0:	011b      	lsls	r3, r3, #4
 80071c2:	4419      	add	r1, r3
 80071c4:	f107 030c 	add.w	r3, r7, #12
 80071c8:	2230      	movs	r2, #48	; 0x30
 80071ca:	4618      	mov	r0, r3
 80071cc:	f002 fb56 	bl	800987c <memcpy>
				memcpy(&gSBGC->_api->commandBuff[i], &gSBGC->_api->commandBuff[commandIndexTemp], sizeof(serialAPI_Command_t));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	6959      	ldr	r1, [r3, #20]
 80071d6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80071da:	4613      	mov	r3, r2
 80071dc:	005b      	lsls	r3, r3, #1
 80071de:	4413      	add	r3, r2
 80071e0:	011b      	lsls	r3, r3, #4
 80071e2:	18c8      	adds	r0, r1, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	6959      	ldr	r1, [r3, #20]
 80071ea:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80071ee:	4613      	mov	r3, r2
 80071f0:	005b      	lsls	r3, r3, #1
 80071f2:	4413      	add	r3, r2
 80071f4:	011b      	lsls	r3, r3, #4
 80071f6:	440b      	add	r3, r1
 80071f8:	2230      	movs	r2, #48	; 0x30
 80071fa:	4619      	mov	r1, r3
 80071fc:	f002 fb3e 	bl	800987c <memcpy>
				memcpy(&gSBGC->_api->commandBuff[commandIndexTemp], &cmdTemp, sizeof(serialAPI_Command_t));
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	6959      	ldr	r1, [r3, #20]
 8007206:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800720a:	4613      	mov	r3, r2
 800720c:	005b      	lsls	r3, r3, #1
 800720e:	4413      	add	r3, r2
 8007210:	011b      	lsls	r3, r3, #4
 8007212:	440b      	add	r3, r1
 8007214:	f107 010c 	add.w	r1, r7, #12
 8007218:	2230      	movs	r2, #48	; 0x30
 800721a:	4618      	mov	r0, r3
 800721c:	f002 fb2e 	bl	800987c <memcpy>
		for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 8007220:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007224:	3301      	adds	r3, #1
 8007226:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	7e1b      	ldrb	r3, [r3, #24]
 8007230:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8007234:	429a      	cmp	r2, r3
 8007236:	f4ff af06 	bcc.w	8007046 <SerialAPI_SortCommands+0x1e>
			}
		}

		gSBGC->_api->commandSortFlag = sbgcTRUE;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007244:	e000      	b.n	8007248 <SerialAPI_SortCommands+0x220>
		if (gSBGC->_api->commandSortFlag) return;
 8007246:	bf00      	nop
	}
 8007248:	3748      	adds	r7, #72	; 0x48
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <SerialAPI_ProcessCommand>:
 *	@param	index - command sequence number
 *
 *	@return	True if command wasn't deleted, false otherwise
 */
static sbgcBoolean_t SerialAPI_ProcessCommand (sbgcGeneral_t *gSBGC, ui8 index)
{
 800724e:	b580      	push	{r7, lr}
 8007250:	b084      	sub	sp, #16
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	70fb      	strb	r3, [r7, #3]
	sbgcBoolean_t commandExist = sbgcTRUE;
 800725a:	2301      	movs	r3, #1
 800725c:	73fb      	strb	r3, [r7, #15]

	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[index];
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	6959      	ldr	r1, [r3, #20]
 8007264:	78fa      	ldrb	r2, [r7, #3]
 8007266:	4613      	mov	r3, r2
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	4413      	add	r3, r2
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	461a      	mov	r2, r3
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	440a      	add	r2, r1
 8007276:	621a      	str	r2, [r3, #32]

	sbgcBoolean_t thisCommandRx = (serialAPI_CurCmd_->parameters & SCParam_RX) ? sbgcTRUE : sbgcFALSE;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	781b      	ldrb	r3, [r3, #0]
 8007280:	09db      	lsrs	r3, r3, #7
 8007282:	73bb      	strb	r3, [r7, #14]

	if (thisCommandRx)
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00c      	beq.n	80072a4 <SerialAPI_ProcessCommand+0x56>
	{
		/* Don't find command yet if the library uses OS functional */
		#if (SBGC_USES_OS_SUPPORT == sbgcOFF)
			SBGC32_FindCommand(gSBGC, serialAPI_CurCmd_, serialAPI_CurCmd_->_commandID);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	6a19      	ldr	r1, [r3, #32]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
 8007296:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800729a:	461a      	mov	r2, r3
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7ff fdf3 	bl	8006e88 <SBGC32_FindCommand>
 80072a2:	e006      	b.n	80072b2 <SerialAPI_ProcessCommand+0x64>
		#endif
	}

	else
		SBGC32_SendCommand(gSBGC, serialAPI_CurCmd_);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f7ff fd62 	bl	8006d76 <SBGC32_SendCommand>

	/* After physical operations... */
	switch (serialAPI_CurCmd_->_state)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	6a1b      	ldr	r3, [r3, #32]
 80072b8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80072bc:	2bff      	cmp	r3, #255	; 0xff
 80072be:	d008      	beq.n	80072d2 <SerialAPI_ProcessCommand+0x84>
 80072c0:	2bff      	cmp	r3, #255	; 0xff
 80072c2:	f300 80c8 	bgt.w	8007456 <SerialAPI_ProcessCommand+0x208>
 80072c6:	2b04      	cmp	r3, #4
 80072c8:	f000 80b5 	beq.w	8007436 <SerialAPI_ProcessCommand+0x1e8>
 80072cc:	2b06      	cmp	r3, #6
 80072ce:	f040 80c2 	bne.w	8007456 <SerialAPI_ProcessCommand+0x208>
		{
			/* Finish the command */
			#if (SBGC_USES_LOGS)

				/* Print log */
				gSBGC->_api->writeLog(gSBGC, serialAPI_CurCmd_);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6852      	ldr	r2, [r2, #4]
 80072dc:	6a12      	ldr	r2, [r2, #32]
 80072de:	4611      	mov	r1, r2
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	4798      	blx	r3

			#endif

			/* It's necessary to save payload pointer cause the next actions may shift it */
			void *payloadTemp = serialAPI_CurCmd_->_payload;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	6a1b      	ldr	r3, [r3, #32]
 80072ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ec:	60bb      	str	r3, [r7, #8]

			if ((serialAPI_CurCmd_->_state == SCState_PROCESSED) || (serialAPI_CurCmd_->parameters & SCParam_EVENT_ANYWAY))
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	6a1b      	ldr	r3, [r3, #32]
 80072f4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80072f8:	2bff      	cmp	r3, #255	; 0xff
 80072fa:	d007      	beq.n	800730c <SerialAPI_ProcessCommand+0xbe>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007308:	2b00      	cmp	r3, #0
 800730a:	d037      	beq.n	800737c <SerialAPI_ProcessCommand+0x12e>
			/* Execute SerialAPI event */
			{
				if (serialAPI_CurCmd_->_serialAPI_Event)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	6a1b      	ldr	r3, [r3, #32]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d006      	beq.n	8007326 <SerialAPI_ProcessCommand+0xd8>
					((serialAPI_Event_t)serialAPI_CurCmd_->_serialAPI_Event)(gSBGC);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	699b      	ldr	r3, [r3, #24]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	4798      	blx	r3
 8007324:	e025      	b.n	8007372 <SerialAPI_ProcessCommand+0x124>

				else if (thisCommandRx && (serialAPI_CurCmd_->_pDestination != NULL))  // and it don't have an event
 8007326:	7bbb      	ldrb	r3, [r7, #14]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d022      	beq.n	8007372 <SerialAPI_ProcessCommand+0x124>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01c      	beq.n	8007372 <SerialAPI_ProcessCommand+0x124>
				{
					if (serialAPI_CurCmd_->_destinationSize < serialAPI_CurCmd_->_payloadSize)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685b      	ldr	r3, [r3, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	8c1a      	ldrh	r2, [r3, #32]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	685b      	ldr	r3, [r3, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800734a:	b29b      	uxth	r3, r3
 800734c:	429a      	cmp	r2, r3
 800734e:	d202      	bcs.n	8007356 <SerialAPI_ProcessCommand+0x108>
						SerialAPI_FatalErrorHandler();
 8007350:	f7f9 fd8e 	bl	8000e70 <SerialAPI_FatalErrorHandler>
 8007354:	e00d      	b.n	8007372 <SerialAPI_ProcessCommand+0x124>

					else
						gSBGC->_api->readBuff(gSBGC, serialAPI_CurCmd_->_pDestination, serialAPI_CurCmd_->_payloadSize);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800735c:	687a      	ldr	r2, [r7, #4]
 800735e:	6852      	ldr	r2, [r2, #4]
 8007360:	6a12      	ldr	r2, [r2, #32]
 8007362:	69d1      	ldr	r1, [r2, #28]
 8007364:	687a      	ldr	r2, [r7, #4]
 8007366:	6852      	ldr	r2, [r2, #4]
 8007368:	6a12      	ldr	r2, [r2, #32]
 800736a:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	4798      	blx	r3
				}

				/* Return payload pointer to the start */
				serialAPI_CurCmd_->_payload = payloadTemp;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	6a1b      	ldr	r3, [r3, #32]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	629a      	str	r2, [r3, #40]	; 0x28
			}

			#if (SBGC_USES_CALLBACKS)

				if (((serialAPI_CurCmd_->_state == SCState_PROCESSED) || (serialAPI_CurCmd_->parameters & SCParam_FORCE_CALLBACK)) &&
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007386:	2bff      	cmp	r3, #255	; 0xff
 8007388:	d007      	beq.n	800739a <SerialAPI_ProcessCommand+0x14c>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	685b      	ldr	r3, [r3, #4]
 800738e:	6a1b      	ldr	r3, [r3, #32]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	f003 0302 	and.w	r3, r3, #2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d01a      	beq.n	80073d0 <SerialAPI_ProcessCommand+0x182>
					serialAPI_CurCmd_->callback)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	689b      	ldr	r3, [r3, #8]
				if (((serialAPI_CurCmd_->_state == SCState_PROCESSED) || (serialAPI_CurCmd_->parameters & SCParam_FORCE_CALLBACK)) &&
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d014      	beq.n	80073d0 <SerialAPI_ProcessCommand+0x182>
				/* Pass to user's callback */
				{
					if (serialAPI_CurCmd_->callbackArg == NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	6a1b      	ldr	r3, [r3, #32]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d104      	bne.n	80073bc <SerialAPI_ProcessCommand+0x16e>
					/* If callbackArg is NULL, assign the general object to this */
						serialAPI_CurCmd_->callbackArg = gSBGC;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	60da      	str	r2, [r3, #12]

					((serialAPI_Callback_t)serialAPI_CurCmd_->callback)(serialAPI_CurCmd_->callbackArg);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	685b      	ldr	r3, [r3, #4]
 80073c0:	6a1b      	ldr	r3, [r3, #32]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	6852      	ldr	r2, [r2, #4]
 80073c8:	6a12      	ldr	r2, [r2, #32]
 80073ca:	68d2      	ldr	r2, [r2, #12]
 80073cc:	4610      	mov	r0, r2
 80073ce:	4798      	blx	r3

			#endif

			#if (SBGC_NON_BLOCKING_MODE)

				if (serialAPI_CurCmd_->parameters & SCParam_RETAIN)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	685b      	ldr	r3, [r3, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d005      	beq.n	80073ec <SerialAPI_ProcessCommand+0x19e>
				/* Command processed fine. Reload it */
					serialAPI_CurCmd_->_state = SCState_RELOAD;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	2204      	movs	r2, #4
 80073e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			#endif

			if (thisCommandRx)
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d004      	beq.n	80073fc <SerialAPI_ProcessCommand+0x1ae>
			/* Delete command ID, size and payload from Rx buffer in any case */
				SerialAPI_DeleteReceivedCommand(gSBGC, payloadTemp);
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7ff fb45 	bl	8006a84 <SerialAPI_DeleteReceivedCommand>
 80073fa:	e006      	b.n	800740a <SerialAPI_ProcessCommand+0x1bc>

			else
			/* Delete command payload from Tx buffer and command object from main command buffer */
				SerialAPI_DeleteSentCommand(gSBGC, serialAPI_CurCmd_);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	6a1b      	ldr	r3, [r3, #32]
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f7ff f9a3 	bl	8006750 <SerialAPI_DeleteSentCommand>
					/* Return here from another thread and finish */
				}

			#endif

			if (serialAPI_CurCmd_->_state != SCState_RELOAD)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007414:	2b04      	cmp	r3, #4
 8007416:	d007      	beq.n	8007428 <SerialAPI_ProcessCommand+0x1da>
			{
				commandExist = sbgcFALSE;
 8007418:	2300      	movs	r3, #0
 800741a:	73fb      	strb	r3, [r7, #15]
				SerialAPI_DeleteCommand(gSBGC, index);
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	4619      	mov	r1, r3
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f7ff fbe9 	bl	8006bf8 <SerialAPI_DeleteCommand>

			else
			/* Reload serial command */
				serialAPI_CurCmd_->_state = SCState_PREPARED;

			break;
 8007426:	e017      	b.n	8007458 <SerialAPI_ProcessCommand+0x20a>
				serialAPI_CurCmd_->_state = SCState_PREPARED;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	2202      	movs	r2, #2
 8007430:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			break;
 8007434:	e010      	b.n	8007458 <SerialAPI_ProcessCommand+0x20a>
		case SCState_RELOAD :

			#if (SBGC_USES_LOGS)

				/* Print log */
				gSBGC->_api->writeLog(gSBGC, serialAPI_CurCmd_);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6852      	ldr	r2, [r2, #4]
 8007440:	6a12      	ldr	r2, [r2, #32]
 8007442:	4611      	mov	r1, r2
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	4798      	blx	r3

			#endif

			/* Reload serial command */
			serialAPI_CurCmd_->_state = SCState_PREPARED;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			break;
 8007454:	e000      	b.n	8007458 <SerialAPI_ProcessCommand+0x20a>

		default :
			break;
 8007456:	bf00      	nop
	}

	return commandExist;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <SBGC32_Transmit>:
	 *			SerialAPI request from SBGC32_ functions
	 *
	 *	@return	Communication status
	 */
	sbgcCommandStatus_t SBGC32_Transmit (sbgcGeneral_t *gSBGC, sbgcCommandToken_t *commandToken)
	{
 8007462:	b580      	push	{r7, lr}
 8007464:	b084      	sub	sp, #16
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	6039      	str	r1, [r7, #0]
		#if (SBGC_NEED_ASSERTS)
			if (commandToken == NULL) return sbgcCOMMAND_PARAM_ASSERT_ERROR;
		#endif

		serialAPI_LockBus()
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <SBGC32_Transmit+0x18>
 8007476:	230a      	movs	r3, #10
 8007478:	e04c      	b.n	8007514 <SBGC32_Transmit+0xb2>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	701a      	strb	r2, [r3, #0]

		sbgcCommandToken_t token = SerialAPI_FindCommandsByToken(gSBGC, *commandToken);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	881b      	ldrh	r3, [r3, #0]
 8007486:	4619      	mov	r1, r3
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7ff f8d3 	bl	8006634 <SerialAPI_FindCommandsByToken>
 800748e:	4603      	mov	r3, r0
 8007490:	81fb      	strh	r3, [r7, #14]
		ui8 txIndex = token;
 8007492:	89fb      	ldrh	r3, [r7, #14]
 8007494:	737b      	strb	r3, [r7, #13]

		if ((token == SBGC_EMPTY_TOKEN) || (txIndex >= gSBGC->_api->commandNumber) ||
 8007496:	89fb      	ldrh	r3, [r7, #14]
 8007498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800749c:	4293      	cmp	r3, r2
 800749e:	d012      	beq.n	80074c6 <SBGC32_Transmit+0x64>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	7e1b      	ldrb	r3, [r3, #24]
 80074a6:	7b7a      	ldrb	r2, [r7, #13]
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d20c      	bcs.n	80074c6 <SBGC32_Transmit+0x64>
			(gSBGC->_api->commandBuff[txIndex].parameters & SCParam_RX))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	6959      	ldr	r1, [r3, #20]
 80074b2:	7b7a      	ldrb	r2, [r7, #13]
 80074b4:	4613      	mov	r3, r2
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	4413      	add	r3, r2
 80074ba:	011b      	lsls	r3, r3, #4
 80074bc:	440b      	add	r3, r1
 80074be:	781b      	ldrb	r3, [r3, #0]
		if ((token == SBGC_EMPTY_TOKEN) || (txIndex >= gSBGC->_api->commandNumber) ||
 80074c0:	b25b      	sxtb	r3, r3
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	da05      	bge.n	80074d2 <SBGC32_Transmit+0x70>
		{
			serialAPI_Unlock()
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	2200      	movs	r2, #0
 80074cc:	701a      	strb	r2, [r3, #0]

			return sbgcCOMMAND_TOKEN_NOT_FOUND;
 80074ce:	230b      	movs	r3, #11
 80074d0:	e020      	b.n	8007514 <SBGC32_Transmit+0xb2>
		}

		/* Send found command */
		if (SerialAPI_ProcessCommand(gSBGC, txIndex) && (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK))
 80074d2:	7b7b      	ldrb	r3, [r7, #13]
 80074d4:	4619      	mov	r1, r3
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff feb9 	bl	800724e <SerialAPI_ProcessCommand>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d007      	beq.n	80074f2 <SBGC32_Transmit+0x90>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	7a1b      	ldrb	r3, [r3, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d003      	beq.n	80074f2 <SBGC32_Transmit+0x90>
		/* Serial command still exists */
			gSBGC->_lastCommandStatus = sbgcCOMMAND_PROCESSING;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	725a      	strb	r2, [r3, #9]
 80074f0:	e00a      	b.n	8007508 <SBGC32_Transmit+0xa6>

		else if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	7a1b      	ldrb	r3, [r3, #8]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d103      	bne.n	8007502 <SBGC32_Transmit+0xa0>
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	725a      	strb	r2, [r3, #9]
 8007500:	e002      	b.n	8007508 <SBGC32_Transmit+0xa6>

		else
			gSBGC->_lastCommandStatus = sbgcCOMMAND_TX_ERROR;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2203      	movs	r2, #3
 8007506:	725a      	strb	r2, [r3, #9]

		serialAPI_Unlock()
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	701a      	strb	r2, [r3, #0]

		return gSBGC->_lastCommandStatus;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	7a5b      	ldrb	r3, [r3, #9]
	}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <SBGC32_Receive>:
	 *			SerialAPI request from SBGC32_ functions
	 *
	 *	@return	Communication status
	 */
	sbgcCommandStatus_t SBGC32_Receive (sbgcGeneral_t *gSBGC, sbgcCommandToken_t *commandToken)
	{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
		#if (SBGC_NEED_ASSERTS)
			if (commandToken == NULL) return sbgcCOMMAND_PARAM_ASSERT_ERROR;
		#endif

		serialAPI_LockBus()
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d001      	beq.n	8007534 <SBGC32_Receive+0x18>
 8007530:	230a      	movs	r3, #10
 8007532:	e04e      	b.n	80075d2 <SBGC32_Receive+0xb6>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	701a      	strb	r2, [r3, #0]

		sbgcCommandToken_t token = SerialAPI_FindCommandsByToken(gSBGC, *commandToken);
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	881b      	ldrh	r3, [r3, #0]
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7ff f876 	bl	8006634 <SerialAPI_FindCommandsByToken>
 8007548:	4603      	mov	r3, r0
 800754a:	81fb      	strh	r3, [r7, #14]
		ui8 rxIndex = (token >> 8) & 0x00FF;
 800754c:	89fb      	ldrh	r3, [r7, #14]
 800754e:	0a1b      	lsrs	r3, r3, #8
 8007550:	b29b      	uxth	r3, r3
 8007552:	737b      	strb	r3, [r7, #13]

		if ((token == SBGC_EMPTY_TOKEN) || (rxIndex >= gSBGC->_api->commandNumber) ||
 8007554:	89fb      	ldrh	r3, [r7, #14]
 8007556:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800755a:	4293      	cmp	r3, r2
 800755c:	d012      	beq.n	8007584 <SBGC32_Receive+0x68>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	7e1b      	ldrb	r3, [r3, #24]
 8007564:	7b7a      	ldrb	r2, [r7, #13]
 8007566:	429a      	cmp	r2, r3
 8007568:	d20c      	bcs.n	8007584 <SBGC32_Receive+0x68>
			(!(gSBGC->_api->commandBuff[rxIndex].parameters & SCParam_RX)))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	6959      	ldr	r1, [r3, #20]
 8007570:	7b7a      	ldrb	r2, [r7, #13]
 8007572:	4613      	mov	r3, r2
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	4413      	add	r3, r2
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	440b      	add	r3, r1
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	b25b      	sxtb	r3, r3
		if ((token == SBGC_EMPTY_TOKEN) || (rxIndex >= gSBGC->_api->commandNumber) ||
 8007580:	2b00      	cmp	r3, #0
 8007582:	db05      	blt.n	8007590 <SBGC32_Receive+0x74>
		{
			serialAPI_Unlock()
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	701a      	strb	r2, [r3, #0]

			return sbgcCOMMAND_TOKEN_NOT_FOUND;
 800758c:	230b      	movs	r3, #11
 800758e:	e020      	b.n	80075d2 <SBGC32_Receive+0xb6>
		}

		/* Try to read required command */
		if (SerialAPI_ProcessCommand(gSBGC, rxIndex) && (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK))
 8007590:	7b7b      	ldrb	r3, [r7, #13]
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f7ff fe5a 	bl	800724e <SerialAPI_ProcessCommand>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d007      	beq.n	80075b0 <SBGC32_Receive+0x94>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	7a1b      	ldrb	r3, [r3, #8]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d003      	beq.n	80075b0 <SBGC32_Receive+0x94>
		/* Serial command still exists */
			gSBGC->_lastCommandStatus = sbgcCOMMAND_PROCESSING;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	725a      	strb	r2, [r3, #9]
 80075ae:	e00a      	b.n	80075c6 <SBGC32_Receive+0xaa>

		else if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	7a1b      	ldrb	r3, [r3, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d103      	bne.n	80075c0 <SBGC32_Receive+0xa4>
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	725a      	strb	r2, [r3, #9]
 80075be:	e002      	b.n	80075c6 <SBGC32_Receive+0xaa>

		else
			gSBGC->_lastSerialCommandStatus = sbgcCOMMAND_RX_ERROR;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2204      	movs	r2, #4
 80075c4:	721a      	strb	r2, [r3, #8]

		serialAPI_Unlock()
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]

		return gSBGC->_lastCommandStatus;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	7a5b      	ldrb	r3, [r3, #9]
	}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <SBGC32_TransmitAllCommands>:
	 *	@param	*gSBGC - serial connection descriptor
	 *
	 *	@return	Communication status
	 */
	sbgcCommandStatus_t SBGC32_TransmitAllCommands (sbgcGeneral_t *gSBGC)
	{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
		sbgcBoolean_t queueIsEmptyFlag = sbgcTRUE;
 80075e2:	2301      	movs	r3, #1
 80075e4:	73fb      	strb	r3, [r7, #15]
		ui8 commandNumber;

		serialAPI_LockBus()
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d001      	beq.n	80075f4 <SBGC32_TransmitAllCommands+0x1a>
 80075f0:	230a      	movs	r3, #10
 80075f2:	e04d      	b.n	8007690 <SBGC32_TransmitAllCommands+0xb6>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2202      	movs	r2, #2
 80075fa:	701a      	strb	r2, [r3, #0]

		SerialAPI_SortCommands(gSBGC);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff fd13 	bl	8007028 <SerialAPI_SortCommands>

		for (ui8 i = 0; i < gSBGC->_api->commandNumber;)
 8007602:	2300      	movs	r3, #0
 8007604:	73bb      	strb	r3, [r7, #14]
 8007606:	e032      	b.n	800766e <SBGC32_TransmitAllCommands+0x94>
		{
			if (!(gSBGC->_api->commandBuff[i].parameters & SCParam_RX))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6959      	ldr	r1, [r3, #20]
 800760e:	7bba      	ldrb	r2, [r7, #14]
 8007610:	4613      	mov	r3, r2
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	4413      	add	r3, r2
 8007616:	011b      	lsls	r3, r3, #4
 8007618:	440b      	add	r3, r1
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	b25b      	sxtb	r3, r3
 800761e:	2b00      	cmp	r3, #0
 8007620:	db22      	blt.n	8007668 <SBGC32_TransmitAllCommands+0x8e>
			{
				queueIsEmptyFlag = sbgcFALSE;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]

				commandNumber = gSBGC->_api->commandNumber;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	7e1b      	ldrb	r3, [r3, #24]
 800762c:	737b      	strb	r3, [r7, #13]

				SerialAPI_ProcessCommand(gSBGC, i);
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7ff fe0b 	bl	800724e <SerialAPI_ProcessCommand>

				if (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	7a1b      	ldrb	r3, [r3, #8]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d006      	beq.n	800764e <SBGC32_TransmitAllCommands+0x74>
				{
					gSBGC->_lastCommandStatus = sbgcCOMMAND_TX_ERROR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2203      	movs	r2, #3
 8007644:	725a      	strb	r2, [r3, #9]
					i++;
 8007646:	7bbb      	ldrb	r3, [r7, #14]
 8007648:	3301      	adds	r3, #1
 800764a:	73bb      	strb	r3, [r7, #14]
 800764c:	e00f      	b.n	800766e <SBGC32_TransmitAllCommands+0x94>
				}

				else
				{
					gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	725a      	strb	r2, [r3, #9]

					if (commandNumber == gSBGC->_api->commandNumber)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	685b      	ldr	r3, [r3, #4]
 8007658:	7e1b      	ldrb	r3, [r3, #24]
 800765a:	7b7a      	ldrb	r2, [r7, #13]
 800765c:	429a      	cmp	r2, r3
 800765e:	d106      	bne.n	800766e <SBGC32_TransmitAllCommands+0x94>
					/* There was a retained command */
						i++;
 8007660:	7bbb      	ldrb	r3, [r7, #14]
 8007662:	3301      	adds	r3, #1
 8007664:	73bb      	strb	r3, [r7, #14]
 8007666:	e002      	b.n	800766e <SBGC32_TransmitAllCommands+0x94>
				}
			}

			else
				i++;
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	3301      	adds	r3, #1
 800766c:	73bb      	strb	r3, [r7, #14]
		for (ui8 i = 0; i < gSBGC->_api->commandNumber;)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	7e1b      	ldrb	r3, [r3, #24]
 8007674:	7bba      	ldrb	r2, [r7, #14]
 8007676:	429a      	cmp	r2, r3
 8007678:	d3c6      	bcc.n	8007608 <SBGC32_TransmitAllCommands+0x2e>
		}

		serialAPI_Unlock()
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	701a      	strb	r2, [r3, #0]

		if (queueIsEmptyFlag)
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <SBGC32_TransmitAllCommands+0xb2>
			return sbgcCOMMAND_QUEUE_IS_EMPTY;
 8007688:	2302      	movs	r3, #2
 800768a:	e001      	b.n	8007690 <SBGC32_TransmitAllCommands+0xb6>

		return gSBGC->_lastCommandStatus;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	7a5b      	ldrb	r3, [r3, #9]
	}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <SBGC32_ReceiveAllCommands>:
	 *	@param	*gSBGC - serial connection descriptor
	 *
	 *	@return	Communication status
	 */
	sbgcCommandStatus_t SBGC32_ReceiveAllCommands (sbgcGeneral_t *gSBGC)
	{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
		sbgcBoolean_t queueIsEmptyFlag = sbgcTRUE;
 80076a0:	2301      	movs	r3, #1
 80076a2:	73fb      	strb	r3, [r7, #15]
		ui8 commandNumber;

		serialAPI_LockBus()
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <SBGC32_ReceiveAllCommands+0x1a>
 80076ae:	230a      	movs	r3, #10
 80076b0:	e04d      	b.n	800774e <SBGC32_ReceiveAllCommands+0xb6>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	2202      	movs	r2, #2
 80076b8:	701a      	strb	r2, [r3, #0]

		SerialAPI_SortCommands(gSBGC);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff fcb4 	bl	8007028 <SerialAPI_SortCommands>

		for (ui8 i = 0; i < gSBGC->_api->commandNumber;)
 80076c0:	2300      	movs	r3, #0
 80076c2:	73bb      	strb	r3, [r7, #14]
 80076c4:	e032      	b.n	800772c <SBGC32_ReceiveAllCommands+0x94>
		{
			if (gSBGC->_api->commandBuff[i].parameters & SCParam_RX)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	6959      	ldr	r1, [r3, #20]
 80076cc:	7bba      	ldrb	r2, [r7, #14]
 80076ce:	4613      	mov	r3, r2
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4413      	add	r3, r2
 80076d4:	011b      	lsls	r3, r3, #4
 80076d6:	440b      	add	r3, r1
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	b25b      	sxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	da22      	bge.n	8007726 <SBGC32_ReceiveAllCommands+0x8e>
			{
				queueIsEmptyFlag = sbgcFALSE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	73fb      	strb	r3, [r7, #15]

				commandNumber = gSBGC->_api->commandNumber;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	7e1b      	ldrb	r3, [r3, #24]
 80076ea:	737b      	strb	r3, [r7, #13]

				SerialAPI_ProcessCommand(gSBGC, i);
 80076ec:	7bbb      	ldrb	r3, [r7, #14]
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7ff fdac 	bl	800724e <SerialAPI_ProcessCommand>

				if (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	7a1b      	ldrb	r3, [r3, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d006      	beq.n	800770c <SBGC32_ReceiveAllCommands+0x74>
				{
					gSBGC->_lastCommandStatus = sbgcCOMMAND_RX_ERROR;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2204      	movs	r2, #4
 8007702:	725a      	strb	r2, [r3, #9]
					i++;
 8007704:	7bbb      	ldrb	r3, [r7, #14]
 8007706:	3301      	adds	r3, #1
 8007708:	73bb      	strb	r3, [r7, #14]
 800770a:	e00f      	b.n	800772c <SBGC32_ReceiveAllCommands+0x94>
				}

				else
				{
					gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	725a      	strb	r2, [r3, #9]

					if (commandNumber == gSBGC->_api->commandNumber)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	7e1b      	ldrb	r3, [r3, #24]
 8007718:	7b7a      	ldrb	r2, [r7, #13]
 800771a:	429a      	cmp	r2, r3
 800771c:	d106      	bne.n	800772c <SBGC32_ReceiveAllCommands+0x94>
					/* There was a retained command */
						i++;
 800771e:	7bbb      	ldrb	r3, [r7, #14]
 8007720:	3301      	adds	r3, #1
 8007722:	73bb      	strb	r3, [r7, #14]
 8007724:	e002      	b.n	800772c <SBGC32_ReceiveAllCommands+0x94>
				}
			}

			else
				i++;
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	3301      	adds	r3, #1
 800772a:	73bb      	strb	r3, [r7, #14]
		for (ui8 i = 0; i < gSBGC->_api->commandNumber;)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	7e1b      	ldrb	r3, [r3, #24]
 8007732:	7bba      	ldrb	r2, [r7, #14]
 8007734:	429a      	cmp	r2, r3
 8007736:	d3c6      	bcc.n	80076c6 <SBGC32_ReceiveAllCommands+0x2e>
		}

		serialAPI_Unlock()
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]

		if (queueIsEmptyFlag)
 8007740:	7bfb      	ldrb	r3, [r7, #15]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <SBGC32_ReceiveAllCommands+0xb2>
			return sbgcCOMMAND_QUEUE_IS_EMPTY;
 8007746:	2302      	movs	r3, #2
 8007748:	e001      	b.n	800774e <SBGC32_ReceiveAllCommands+0xb6>

		return gSBGC->_lastCommandStatus;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7a5b      	ldrb	r3, [r3, #9]
	}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <SBGC32_ProcessAllCommands>:
	 *	@param	*gSBGC - serial connection descriptor
	 *
	 *	@return	Communication status
	 */
	sbgcCommandStatus_t SBGC32_ProcessAllCommands (sbgcGeneral_t *gSBGC)
	{
 8007756:	b580      	push	{r7, lr}
 8007758:	b084      	sub	sp, #16
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
		sbgcBoolean_t queueIsEmptyFlag = sbgcFALSE;
 800775e:	2300      	movs	r3, #0
 8007760:	73fb      	strb	r3, [r7, #15]

		if (SBGC32_TransmitAllCommands(gSBGC) == sbgcCOMMAND_QUEUE_IS_EMPTY)
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7ff ff39 	bl	80075da <SBGC32_TransmitAllCommands>
 8007768:	4603      	mov	r3, r0
 800776a:	2b02      	cmp	r3, #2
 800776c:	d101      	bne.n	8007772 <SBGC32_ProcessAllCommands+0x1c>
			queueIsEmptyFlag = sbgcTRUE;
 800776e:	2301      	movs	r3, #1
 8007770:	73fb      	strb	r3, [r7, #15]

		if ((SBGC32_ReceiveAllCommands(gSBGC) == sbgcCOMMAND_QUEUE_IS_EMPTY) && queueIsEmptyFlag)
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7ff ff90 	bl	8007698 <SBGC32_ReceiveAllCommands>
 8007778:	4603      	mov	r3, r0
 800777a:	2b02      	cmp	r3, #2
 800777c:	d104      	bne.n	8007788 <SBGC32_ProcessAllCommands+0x32>
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <SBGC32_ProcessAllCommands+0x32>
			return sbgcCOMMAND_QUEUE_IS_EMPTY;
 8007784:	2302      	movs	r3, #2
 8007786:	e001      	b.n	800778c <SBGC32_ProcessAllCommands+0x36>

		return gSBGC->_lastCommandStatus;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	7a5b      	ldrb	r3, [r3, #9]
	}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <PostSetupLibrary>:
 *			See @ref SBGC32_SetupLibrary function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostSetupLibrary (sbgcGeneral_t *gSBGC)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
	/* Read all data manually only */

	if (serialAPI_CurCmd_->_commandID == CMD_BOARD_INFO)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	6a1b      	ldr	r3, [r3, #32]
 80077a2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80077a6:	2b56      	cmp	r3, #86	; 0x56
 80077a8:	d14e      	bne.n	8007848 <PostSetupLibrary+0xb4>
	/* Getting board information */
	{
		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	7a1b      	ldrb	r3, [r3, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f040 809c 	bne.w	80078ec <PostSetupLibrary+0x158>
		{
			ui32 boardFeatures;

			/* Don't care about _payload pointer verge cause there is a first command */
			gSBGC->_api->boardVersion = *(serialAPI_CurCmd_->_payload + BI_BOARD_VER_OFFSET);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	6a1b      	ldr	r3, [r3, #32]
 80077ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	7812      	ldrb	r2, [r2, #0]
 80077c2:	705a      	strb	r2, [r3, #1]
			gSBGC->_api->fromLE(&gSBGC->_api->firmwareVersion, serialAPI_CurCmd_->_payload + BI_FRW_VER_OFFSET,
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077ca:	687a      	ldr	r2, [r7, #4]
 80077cc:	6852      	ldr	r2, [r2, #4]
 80077ce:	1c90      	adds	r0, r2, #2
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	6852      	ldr	r2, [r2, #4]
 80077d4:	6a12      	ldr	r2, [r2, #32]
 80077d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80077d8:	1c51      	adds	r1, r2, #1
 80077da:	2202      	movs	r2, #2
 80077dc:	4798      	blx	r3
								sizeof(gSBGC->_api->firmwareVersion));

			boardFeatures = (((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_OFFSET))) & 0x0000FFFF) |
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077e6:	3304      	adds	r3, #4
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
					((((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_E_OFFSET))) << 16) & 0xFFFF0000);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f4:	330b      	adds	r3, #11
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	041b      	lsls	r3, r3, #16
			boardFeatures = (((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_OFFSET))) & 0x0000FFFF) |
 80077fa:	4313      	orrs	r3, r2
 80077fc:	61fb      	str	r3, [r7, #28]

			gSBGC->_api->fromLE(&gSBGC->_api->boardFeatures, (ui8*)(&boardFeatures), sizeof(gSBGC->_api->boardFeatures));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	6852      	ldr	r2, [r2, #4]
 8007808:	f102 0008 	add.w	r0, r2, #8
 800780c:	f107 011c 	add.w	r1, r7, #28
 8007810:	2204      	movs	r2, #4
 8007812:	4798      	blx	r3

			gSBGC->_api->fromLE(&gSBGC->_api->baseFirmwareVersion, serialAPI_CurCmd_->_payload + BI_BASE_FRW_VER_OFFSET,
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	685b      	ldr	r3, [r3, #4]
 8007818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781a:	687a      	ldr	r2, [r7, #4]
 800781c:	6852      	ldr	r2, [r2, #4]
 800781e:	1d10      	adds	r0, r2, #4
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	6852      	ldr	r2, [r2, #4]
 8007824:	6a12      	ldr	r2, [r2, #32]
 8007826:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007828:	f102 0110 	add.w	r1, r2, #16
 800782c:	2202      	movs	r2, #2
 800782e:	4798      	blx	r3
								sizeof(gSBGC->_api->baseFirmwareVersion));

			if (gSBGC->_api->baseFirmwareVersion == 0)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	889b      	ldrh	r3, [r3, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d164      	bne.n	8007904 <PostSetupLibrary+0x170>
			/* Some SBGC32 boards have no this data field */
				gSBGC->_api->baseFirmwareVersion = gSBGC->_api->firmwareVersion;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	685a      	ldr	r2, [r3, #4]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	8852      	ldrh	r2, [r2, #2]
 8007844:	809a      	strh	r2, [r3, #4]
 8007846:	e05d      	b.n	8007904 <PostSetupLibrary+0x170>

			return;
		}
	}

	else if (serialAPI_CurCmd_->_commandID == CMD_BOARD_INFO_3)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	6a1b      	ldr	r3, [r3, #32]
 800784e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8007852:	2b14      	cmp	r3, #20
 8007854:	d14a      	bne.n	80078ec <PostSetupLibrary+0x158>
	/* Getting total adjustable variables number */
	{
		if (gSBGC->_api->firmwareVersion && (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	885b      	ldrh	r3, [r3, #2]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d045      	beq.n	80078ec <PostSetupLibrary+0x158>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	7a1b      	ldrb	r3, [r3, #8]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d141      	bne.n	80078ec <PostSetupLibrary+0x158>
		{
			gSBGC->_api->fromLE(&gSBGC->_api->boardFeatures2, serialAPI_CurCmd_->_payload + BI3_BOARD_FTR_E2_OFFSET,
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	6852      	ldr	r2, [r2, #4]
 8007872:	f102 000c 	add.w	r0, r2, #12
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6852      	ldr	r2, [r2, #4]
 800787a:	6a12      	ldr	r2, [r2, #32]
 800787c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800787e:	f102 0134 	add.w	r1, r2, #52	; 0x34
 8007882:	2204      	movs	r2, #4
 8007884:	4798      	blx	r3
			#if (SBGC_NEED_DEBUG)

				char boardVersionStr [5],
					 firmwareVersionStr [8];

				ParserSBGC32_FormatBoardVersion(gSBGC, gSBGC->_api->boardVersion, BUFF_SIZE_(boardVersionStr));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	7859      	ldrb	r1, [r3, #1]
 800788c:	f107 0214 	add.w	r2, r7, #20
 8007890:	2305      	movs	r3, #5
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f001 fa0a 	bl	8008cac <ParserSBGC32_FormatBoardVersion>
				ParserSBGC32_FormatFirmwareVersion(gSBGC, gSBGC->_api->firmwareVersion, BUFF_SIZE_(firmwareVersionStr));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	8859      	ldrh	r1, [r3, #2]
 800789e:	f107 020c 	add.w	r2, r7, #12
 80078a2:	2308      	movs	r3, #8
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f001 fa33 	bl	8008d10 <ParserSBGC32_FormatFirmwareVersion>

				DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n");
 80078aa:	4918      	ldr	r1, [pc, #96]	; (800790c <PostSetupLibrary+0x178>)
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f7fe fb5d 	bl	8005f6c <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, "The system is ready to go!\n");
 80078b2:	4917      	ldr	r1, [pc, #92]	; (8007910 <PostSetupLibrary+0x17c>)
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f7fe fb59 	bl	8005f6c <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, "Board Version: ");
 80078ba:	4916      	ldr	r1, [pc, #88]	; (8007914 <PostSetupLibrary+0x180>)
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7fe fb55 	bl	8005f6c <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, boardVersionStr);
 80078c2:	f107 0314 	add.w	r3, r7, #20
 80078c6:	4619      	mov	r1, r3
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f7fe fb4f 	bl	8005f6c <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, "\nFirmware Version: ");
 80078ce:	4912      	ldr	r1, [pc, #72]	; (8007918 <PostSetupLibrary+0x184>)
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f7fe fb4b 	bl	8005f6c <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, firmwareVersionStr);
 80078d6:	f107 030c 	add.w	r3, r7, #12
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f7fe fb45 	bl	8005f6c <DebugSBGC32_PrintMessage>
				DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n\n");
 80078e2:	490e      	ldr	r1, [pc, #56]	; (800791c <PostSetupLibrary+0x188>)
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fe fb41 	bl	8005f6c <DebugSBGC32_PrintMessage>
 80078ea:	e00b      	b.n	8007904 <PostSetupLibrary+0x170>
		}
	}

	#if (SBGC_NEED_DEBUG)

		DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n");
 80078ec:	4907      	ldr	r1, [pc, #28]	; (800790c <PostSetupLibrary+0x178>)
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f7fe fb3c 	bl	8005f6c <DebugSBGC32_PrintMessage>
		DebugSBGC32_PrintMessage(gSBGC, "Communication Error!\n");
 80078f4:	490a      	ldr	r1, [pc, #40]	; (8007920 <PostSetupLibrary+0x18c>)
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7fe fb38 	bl	8005f6c <DebugSBGC32_PrintMessage>
		DebugSBGC32_PrintMessage(gSBGC, "********************************\n\n");
 80078fc:	4909      	ldr	r1, [pc, #36]	; (8007924 <PostSetupLibrary+0x190>)
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f7fe fb34 	bl	8005f6c <DebugSBGC32_PrintMessage>

	#endif
}
 8007904:	3720      	adds	r7, #32
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	0800e20c 	.word	0x0800e20c
 8007910:	0800e230 	.word	0x0800e230
 8007914:	0800e24c 	.word	0x0800e24c
 8007918:	0800e25c 	.word	0x0800e25c
 800791c:	0800e270 	.word	0x0800e270
 8007920:	0800e294 	.word	0x0800e294
 8007924:	0800e2ac 	.word	0x0800e2ac

08007928 <SBGC32_SetupLibrary>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_SetupLibrary (sbgcGeneral_t *gSBGC)
{
 8007928:	b590      	push	{r4, r7, lr}
 800792a:	b089      	sub	sp, #36	; 0x24
 800792c:	af04      	add	r7, sp, #16
 800792e:	6078      	str	r0, [r7, #4]
	gSBGC->_api = (serialAPI_General_t*)sbgcMalloc(sizeof(serialAPI_General_t));
 8007930:	20ac      	movs	r0, #172	; 0xac
 8007932:	f001 ff9b 	bl	800986c <malloc>
 8007936:	4603      	mov	r3, r0
 8007938:	461a      	mov	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	605a      	str	r2, [r3, #4]

	PrivateSerialAPI_LinkLowLayer(gSBGC);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7fe fafe 	bl	8005f40 <PrivateSerialAPI_LinkLowLayer>
	PrivateSerialAPI_LinkConverter(gSBGC);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f001 faad 	bl	8008ea4 <PrivateSerialAPI_LinkConverter>

	#if (SBGC_USES_LOGS)
		PrivateSerialAPI_LinkDebug(gSBGC);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fe fe62 	bl	8006614 <PrivateSerialAPI_LinkDebug>
	#endif

	PrivateSerialAPI_LinkCommandBuild(gSBGC);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7fe f85d 	bl	8005a10 <PrivateSerialAPI_LinkCommandBuild>

	/* Link high-layer service functions */
	gSBGC->_api->saveCmd = SerialAPI_SaveReceivedCommand;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	4a97      	ldr	r2, [pc, #604]	; (8007bb8 <SBGC32_SetupLibrary+0x290>)
 800795c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	gSBGC->_api->findCmd = SerialAPI_FindCommandByID;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	4a95      	ldr	r2, [pc, #596]	; (8007bbc <SBGC32_SetupLibrary+0x294>)
 8007966:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
		SystemSBGC32_CreateMutex(&gSBGC->_api->mutexSerialAPI);
		SystemSBGC32_GiveMutex(&gSBGC->_api->mutexSerialAPI);

	#endif

	gSBGC->_api->serialAPI_Status = serialAPI_OK;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	701a      	strb	r2, [r3, #0]

	gSBGC->_api->boardVersion = 0;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	705a      	strb	r2, [r3, #1]
	gSBGC->_api->firmwareVersion = 0;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	805a      	strh	r2, [r3, #2]
	gSBGC->_api->baseFirmwareVersion = 0;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	809a      	strh	r2, [r3, #4]

	#if (SBGC_ADJVAR_MODULE)
		gSBGC->_api->adjVarsNumber = SBGC_ADJ_VARS_MIN_QUANTITY;
	#endif

	gSBGC->_api->txErrorsCount = 0;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	821a      	strh	r2, [r3, #16]
	gSBGC->_api->rxErrorsCount = 0;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	2200      	movs	r2, #0
 8007998:	825a      	strh	r2, [r3, #18]

	gSBGC->_api->commandBuff = (serialAPI_Command_t*)sbgcMalloc(sizeof(serialAPI_Command_t) * SBGC_MAX_COMMAND_NUM);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	685c      	ldr	r4, [r3, #4]
 800799e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80079a2:	f001 ff63 	bl	800986c <malloc>
 80079a6:	4603      	mov	r3, r0
 80079a8:	6163      	str	r3, [r4, #20]
	gSBGC->_api->commandNumber = 0;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	761a      	strb	r2, [r3, #24]
	gSBGC->_api->commandTotalCount = 0;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	61da      	str	r2, [r3, #28]

	gSBGC->_api->currentSerialCommand = NULL;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	621a      	str	r2, [r3, #32]

	#if (SBGC_NON_BLOCKING_MODE)
		gSBGC->_api->commandSortFlag = sbgcTRUE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	#endif

	#if (SBGC_USES_TOKENS)
		gSBGC->_api->lastCommandToken = 0;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	84da      	strh	r2, [r3, #38]	; 0x26
	#endif

	gSBGC->_api->txCommandBuff = (ui8*)sbgcMalloc(SBGC_TX_BUFF_TOTAL_SIZE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685c      	ldr	r4, [r3, #4]
 80079d8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80079dc:	f001 ff46 	bl	800986c <malloc>
 80079e0:	4603      	mov	r3, r0
 80079e2:	62a3      	str	r3, [r4, #40]	; 0x28
	gSBGC->_api->txCommandBuffTail = 0;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gSBGC->_api->txCommandBuffHead = 0;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	gSBGC->_api->rxCommandBuff = (ui8*)sbgcMalloc(SBGC_RX_BUFF_TOTAL_SIZE);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685c      	ldr	r4, [r3, #4]
 80079fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007a00:	f001 ff34 	bl	800986c <malloc>
 8007a04:	4603      	mov	r3, r0
 8007a06:	6323      	str	r3, [r4, #48]	; 0x30
	gSBGC->_api->rxCommandBuffTail = 0;
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	gSBGC->_api->rxCommandBuffHead = 0;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	gSBGC->_api->rxCommandBuffCurP = 0;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	721a      	strb	r2, [r3, #8]
	gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	725a      	strb	r2, [r3, #9]

	/* Startup delay */
	sbgcTicks_t launchTime = serialAPI_GetTick();
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	6812      	ldr	r2, [r2, #0]
 8007a3c:	6812      	ldr	r2, [r2, #0]
 8007a3e:	4610      	mov	r0, r2
 8007a40:	4798      	blx	r3
 8007a42:	60f8      	str	r0, [r7, #12]

	while ((serialAPI_GetTick() - launchTime) < SBGC_STARTUP_DELAY);
 8007a44:	bf00      	nop
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	6812      	ldr	r2, [r2, #0]
 8007a50:	6812      	ldr	r2, [r2, #0]
 8007a52:	4610      	mov	r0, r2
 8007a54:	4798      	blx	r3
 8007a56:	4602      	mov	r2, r0
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8007a60:	d3f1      	bcc.n	8007a46 <SBGC32_SetupLibrary+0x11e>

	/* Getting board information */
	gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO SBGC_DEFAULT_ARGS__);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8007a68:	2300      	movs	r3, #0
 8007a6a:	9303      	str	r3, [sp, #12]
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9302      	str	r3, [sp, #8]
 8007a70:	2300      	movs	r3, #0
 8007a72:	9301      	str	r3, [sp, #4]
 8007a74:	2364      	movs	r3, #100	; 0x64
 8007a76:	9300      	str	r3, [sp, #0]
 8007a78:	2301      	movs	r3, #1
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	2156      	movs	r1, #86	; 0x56
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	47a0      	blx	r4
	gSBGC->_api->writeWord(gSBGC, 0);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a88:	2100      	movs	r1, #0
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	4798      	blx	r3
	serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	6a1b      	ldr	r3, [r3, #32]
 8007a94:	781a      	ldrb	r2, [r3, #0]
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	6a1b      	ldr	r3, [r3, #32]
 8007a9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007aa0:	b2d2      	uxtb	r2, r2
 8007aa2:	701a      	strb	r2, [r3, #0]

	#if (SBGC_USES_OS_SUPPORT)
		serialAPI_CurCmd_->priority = SCPrior_SUPREME;
	#endif

	gSBGC->_api->finishWrite(gSBGC);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	685b      	ldr	r3, [r3, #4]
 8007aa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	4798      	blx	r3

	serialAPI_Unlock()
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
		sbgcBlockQueue(SBGC32_TransmitAllCommands(gSBGC));
 8007ab8:	bf00      	nop
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7ff fd8d 	bl	80075da <SBGC32_TransmitAllCommands>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d1f9      	bne.n	8007aba <SBGC32_SetupLibrary+0x192>
	#endif

	serialAPI_LockRead();
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <SBGC32_SetupLibrary+0x1ac>
 8007ad0:	230a      	movs	r3, #10
 8007ad2:	e0b3      	b.n	8007c3c <SBGC32_SetupLibrary+0x314>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2201      	movs	r2, #1
 8007ada:	701a      	strb	r2, [r3, #0]

	gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO SBGC_DEFAULT_ARGS__);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	9303      	str	r3, [sp, #12]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	9302      	str	r3, [sp, #8]
 8007aec:	2300      	movs	r3, #0
 8007aee:	9301      	str	r3, [sp, #4]
 8007af0:	2364      	movs	r3, #100	; 0x64
 8007af2:	9300      	str	r3, [sp, #0]
 8007af4:	2301      	movs	r3, #1
 8007af6:	2200      	movs	r2, #0
 8007af8:	2156      	movs	r1, #86	; 0x56
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	47a0      	blx	r4
	gSBGC->_api->assignEvent(gSBGC, PostSetupLibrary, gSBGC, SBGC_MAX_PAYLOAD_SIZE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8007b06:	23ff      	movs	r3, #255	; 0xff
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	492d      	ldr	r1, [pc, #180]	; (8007bc0 <SBGC32_SetupLibrary+0x298>)
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	47a0      	blx	r4
	serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	6a1b      	ldr	r3, [r3, #32]
 8007b16:	781a      	ldrb	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	6a1b      	ldr	r3, [r3, #32]
 8007b1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b22:	b2d2      	uxtb	r2, r2
 8007b24:	701a      	strb	r2, [r3, #0]

	#if (SBGC_USES_OS_SUPPORT)
		serialAPI_CurCmd_->priority = SCPrior_SUPREME;
	#endif

	gSBGC->_api->finishRead(gSBGC);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	4798      	blx	r3

	serialAPI_Unlock()
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
		sbgcBlockQueue(SBGC32_ReceiveAllCommands(gSBGC));
 8007b3a:	bf00      	nop
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff fdab 	bl	8007698 <SBGC32_ReceiveAllCommands>
 8007b42:	4603      	mov	r3, r0
 8007b44:	2b02      	cmp	r3, #2
 8007b46:	d1f9      	bne.n	8007b3c <SBGC32_SetupLibrary+0x214>
	#endif

	if (gSBGC->_lastCommandStatus == sbgcCOMMAND_OK)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	7a5b      	ldrb	r3, [r3, #9]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d173      	bne.n	8007c38 <SBGC32_SetupLibrary+0x310>
	/* Getting the second features part and total adjustable variables number */
	{
		gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO_3 SBGC_DEFAULT_ARGS__);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	685b      	ldr	r3, [r3, #4]
 8007b54:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8007b56:	2300      	movs	r3, #0
 8007b58:	9303      	str	r3, [sp, #12]
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	9302      	str	r3, [sp, #8]
 8007b5e:	2300      	movs	r3, #0
 8007b60:	9301      	str	r3, [sp, #4]
 8007b62:	2364      	movs	r3, #100	; 0x64
 8007b64:	9300      	str	r3, [sp, #0]
 8007b66:	2301      	movs	r3, #1
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2114      	movs	r1, #20
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	47a0      	blx	r4
		serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	6a1b      	ldr	r3, [r3, #32]
 8007b76:	781a      	ldrb	r2, [r3, #0]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	6a1b      	ldr	r3, [r3, #32]
 8007b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b82:	b2d2      	uxtb	r2, r2
 8007b84:	701a      	strb	r2, [r3, #0]

		#if (SBGC_USES_OS_SUPPORT)
			serialAPI_CurCmd_->priority = SCPrior_SUPREME;
		#endif

		gSBGC->_api->finishWrite(gSBGC);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4798      	blx	r3

		serialAPI_Unlock()
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]

		#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
			sbgcBlockQueue(SBGC32_TransmitAllCommands(gSBGC));
 8007b9a:	bf00      	nop
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7ff fd1c 	bl	80075da <SBGC32_TransmitAllCommands>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	d1f9      	bne.n	8007b9c <SBGC32_SetupLibrary+0x274>
		#endif

		serialAPI_LockRead();
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	685b      	ldr	r3, [r3, #4]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d008      	beq.n	8007bc4 <SBGC32_SetupLibrary+0x29c>
 8007bb2:	230a      	movs	r3, #10
 8007bb4:	e042      	b.n	8007c3c <SBGC32_SetupLibrary+0x314>
 8007bb6:	bf00      	nop
 8007bb8:	08006887 	.word	0x08006887
 8007bbc:	08006d19 	.word	0x08006d19
 8007bc0:	08007795 	.word	0x08007795
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	2201      	movs	r2, #1
 8007bca:	701a      	strb	r2, [r3, #0]

		gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO_3 SBGC_DEFAULT_ARGS__);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	685b      	ldr	r3, [r3, #4]
 8007bd0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	2300      	movs	r3, #0
 8007bda:	9302      	str	r3, [sp, #8]
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	2364      	movs	r3, #100	; 0x64
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	2301      	movs	r3, #1
 8007be6:	2200      	movs	r2, #0
 8007be8:	2114      	movs	r1, #20
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	47a0      	blx	r4
		gSBGC->_api->assignEvent(gSBGC, PostSetupLibrary, gSBGC, SBGC_MAX_PAYLOAD_SIZE);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8007bf6:	23ff      	movs	r3, #255	; 0xff
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	4912      	ldr	r1, [pc, #72]	; (8007c44 <SBGC32_SetupLibrary+0x31c>)
 8007bfc:	6878      	ldr	r0, [r7, #4]
 8007bfe:	47a0      	blx	r4
		serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	6a1b      	ldr	r3, [r3, #32]
 8007c06:	781a      	ldrb	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	6a1b      	ldr	r3, [r3, #32]
 8007c0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]

		#if (SBGC_USES_OS_SUPPORT)
			serialAPI_CurCmd_->priority = SCPrior_SUPREME;
		#endif

		gSBGC->_api->finishRead(gSBGC);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	4798      	blx	r3

		serialAPI_Unlock()
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	701a      	strb	r2, [r3, #0]

		#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
			sbgcBlockQueue(SBGC32_ReceiveAllCommands(gSBGC));
 8007c2a:	bf00      	nop
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff fd33 	bl	8007698 <SBGC32_ReceiveAllCommands>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d1f9      	bne.n	8007c2c <SBGC32_SetupLibrary+0x304>
		#endif
	}

	return gSBGC->_lastCommandStatus;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	7a5b      	ldrb	r3, [r3, #9]
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3714      	adds	r7, #20
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd90      	pop	{r4, r7, pc}
 8007c44:	08007795 	.word	0x08007795

08007c48 <SBGC32_CheckConfirmation>:
	 *
	 *	@return	Communication status
	 */
	sbgcCommandStatus_t SBGC32_CheckConfirmation (sbgcGeneral_t *gSBGC, sbgcConfirm_t *confirm, serialAPI_CommandID_t cmdID
												  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
	{
 8007c48:	b590      	push	{r4, r7, lr}
 8007c4a:	b08b      	sub	sp, #44	; 0x2c
 8007c4c:	af06      	add	r7, sp, #24
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	4611      	mov	r1, r2
 8007c54:	461a      	mov	r2, r3
 8007c56:	460b      	mov	r3, r1
 8007c58:	71fb      	strb	r3, [r7, #7]
 8007c5a:	4613      	mov	r3, r2
 8007c5c:	71bb      	strb	r3, [r7, #6]
		/* It's necessary to lock SerialAPI before Rx operation */
		serialAPI_LockRead()
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	781b      	ldrb	r3, [r3, #0]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d001      	beq.n	8007c6c <SBGC32_CheckConfirmation+0x24>
 8007c68:	230a      	movs	r3, #10
 8007c6a:	e027      	b.n	8007cbc <SBGC32_CheckConfirmation+0x74>
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	701a      	strb	r2, [r3, #0]

		gSBGC->_api->addConfirm(gSBGC, confirm, cmdID SBGC_ADVANCED_ARGS__);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	685b      	ldr	r3, [r3, #4]
 8007c78:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8007c7c:	79b9      	ldrb	r1, [r7, #6]
 8007c7e:	79fa      	ldrb	r2, [r7, #7]
 8007c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c82:	9304      	str	r3, [sp, #16]
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	9303      	str	r3, [sp, #12]
 8007c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c8a:	9302      	str	r3, [sp, #8]
 8007c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c8e:	9301      	str	r3, [sp, #4]
 8007c90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c94:	9300      	str	r3, [sp, #0]
 8007c96:	460b      	mov	r3, r1
 8007c98:	68b9      	ldr	r1, [r7, #8]
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	47a0      	blx	r4

		serialAPI_GiveToken()
 8007c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d004      	beq.n	8007cae <SBGC32_CheckConfirmation+0x66>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8007caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cac:	801a      	strh	r2, [r3, #0]

		return gSBGC->_api->exit(gSBGC);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	4798      	blx	r3
 8007cba:	4603      	mov	r3, r0
	}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3714      	adds	r7, #20
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd90      	pop	{r4, r7, pc}

08007cc4 <SerialAPI_LinkDriver>:
 *			current time in milliseconds
 */
void SerialAPI_LinkDriver (sbgcGeneral_t *gSBGC, sbgcTx_t tx, sbgcRx_t rx,
						   sbgcAvailableBytes_t availableBytes, sbgcTxDebug_t txDebug,
						   sbgcGetTime_t getTime)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
 8007cd0:	603b      	str	r3, [r7, #0]
	gSBGC->_ll = (sbgcLowLayer_t*)sbgcMalloc(sizeof(sbgcLowLayer_t));
 8007cd2:	2024      	movs	r0, #36	; 0x24
 8007cd4:	f001 fdca 	bl	800986c <malloc>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	461a      	mov	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	601a      	str	r2, [r3, #0]

	gSBGC->_ll->drvTx = tx;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68ba      	ldr	r2, [r7, #8]
 8007ce6:	609a      	str	r2, [r3, #8]
	gSBGC->_ll->drvRx = rx;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	60da      	str	r2, [r3, #12]
	gSBGC->_ll->drvAvailableBytes = availableBytes;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	683a      	ldr	r2, [r7, #0]
 8007cf6:	611a      	str	r2, [r3, #16]

	#if (SBGC_NEED_DEBUG)
		gSBGC->_ll->drvTxDebug = txDebug;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	69ba      	ldr	r2, [r7, #24]
 8007cfe:	615a      	str	r2, [r3, #20]
	#else
		gSBGC->_ll->drvTxDebug = NULL;
	#endif

	gSBGC->_ll->drvGetTime = getTime;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69fa      	ldr	r2, [r7, #28]
 8007d06:	605a      	str	r2, [r3, #4]

	#if (SBGC_USES_CUSTOM_SPRINTF)
		SerialAPI_LinkSprintf(gSBGC);
	#else
		gSBGC->_ll->debugSprintf = sprintf;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	4a02      	ldr	r2, [pc, #8]	; (8007d18 <SerialAPI_LinkDriver+0x54>)
 8007d0e:	619a      	str	r2, [r3, #24]
	#endif
}
 8007d10:	bf00      	nop
 8007d12:	3710      	adds	r7, #16
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	0800a725 	.word	0x0800a725

08007d1c <ParserSBGC32_ConvertTypeToSize>:
 */
/**	@addtogroup	Data_Parse
 *	@{
 */
static ui8 ParserSBGC32_ConvertTypeToSize (sbgcVarType_t varType)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	4603      	mov	r3, r0
 8007d24:	71fb      	strb	r3, [r7, #7]
	ui8 res = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]

	switch (varType & CLEAN_TYPE_MASK)
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	f003 0307 	and.w	r3, r3, #7
 8007d30:	2b81      	cmp	r3, #129	; 0x81
 8007d32:	d00e      	beq.n	8007d52 <ParserSBGC32_ConvertTypeToSize+0x36>
 8007d34:	2b81      	cmp	r3, #129	; 0x81
 8007d36:	dc15      	bgt.n	8007d64 <ParserSBGC32_ConvertTypeToSize+0x48>
 8007d38:	2b07      	cmp	r3, #7
 8007d3a:	dc13      	bgt.n	8007d64 <ParserSBGC32_ConvertTypeToSize+0x48>
 8007d3c:	2b05      	cmp	r3, #5
 8007d3e:	da0e      	bge.n	8007d5e <ParserSBGC32_ConvertTypeToSize+0x42>
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	dc02      	bgt.n	8007d4a <ParserSBGC32_ConvertTypeToSize+0x2e>
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	dc04      	bgt.n	8007d52 <ParserSBGC32_ConvertTypeToSize+0x36>
		case sbgcFLOAT :
			res = 4;
			break;

		default :
			break;
 8007d48:	e00c      	b.n	8007d64 <ParserSBGC32_ConvertTypeToSize+0x48>
 8007d4a:	3b03      	subs	r3, #3
	switch (varType & CLEAN_TYPE_MASK)
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d809      	bhi.n	8007d64 <ParserSBGC32_ConvertTypeToSize+0x48>
 8007d50:	e002      	b.n	8007d58 <ParserSBGC32_ConvertTypeToSize+0x3c>
			res = 1;
 8007d52:	2301      	movs	r3, #1
 8007d54:	73fb      	strb	r3, [r7, #15]
			break;
 8007d56:	e006      	b.n	8007d66 <ParserSBGC32_ConvertTypeToSize+0x4a>
			res = 2;
 8007d58:	2302      	movs	r3, #2
 8007d5a:	73fb      	strb	r3, [r7, #15]
			break;
 8007d5c:	e003      	b.n	8007d66 <ParserSBGC32_ConvertTypeToSize+0x4a>
			res = 4;
 8007d5e:	2304      	movs	r3, #4
 8007d60:	73fb      	strb	r3, [r7, #15]
			break;
 8007d62:	e000      	b.n	8007d66 <ParserSBGC32_ConvertTypeToSize+0x4a>
			break;
 8007d64:	bf00      	nop
	}

	return res;
 8007d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3714      	adds	r7, #20
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d72:	4770      	bx	lr

08007d74 <ParserSBGC32_AssignStructByParserMap>:
	 *	@param	parserMap - structure type for assign
	 *
	 *	@return	Number of elements of an assigned structure
	 */
	static ui8 ParserSBGC32_AssignStructByParserMap (const void *uStruct, sbgcParserMap_t parserMap)
	{
 8007d74:	b480      	push	{r7}
 8007d76:	b085      	sub	sp, #20
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	70fb      	strb	r3, [r7, #3]
		const sbgcParameterReferenceInfo_t **buffArr = (const sbgcParameterReferenceInfo_t**)uStruct;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60fb      	str	r3, [r7, #12]

		switch (parserMap)
 8007d84:	78fb      	ldrb	r3, [r7, #3]
 8007d86:	3b0b      	subs	r3, #11
 8007d88:	2b21      	cmp	r3, #33	; 0x21
 8007d8a:	f200 80f4 	bhi.w	8007f76 <ParserSBGC32_AssignStructByParserMap+0x202>
 8007d8e:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <ParserSBGC32_AssignStructByParserMap+0x20>)
 8007d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d94:	08007e1d 	.word	0x08007e1d
 8007d98:	08007e29 	.word	0x08007e29
 8007d9c:	08007e35 	.word	0x08007e35
 8007da0:	08007e41 	.word	0x08007e41
 8007da4:	08007e4d 	.word	0x08007e4d
 8007da8:	08007e59 	.word	0x08007e59
 8007dac:	08007e65 	.word	0x08007e65
 8007db0:	08007e71 	.word	0x08007e71
 8007db4:	08007e7d 	.word	0x08007e7d
 8007db8:	08007f77 	.word	0x08007f77
 8007dbc:	08007f77 	.word	0x08007f77
 8007dc0:	08007f77 	.word	0x08007f77
 8007dc4:	08007f77 	.word	0x08007f77
 8007dc8:	08007f77 	.word	0x08007f77
 8007dcc:	08007e89 	.word	0x08007e89
 8007dd0:	08007e95 	.word	0x08007e95
 8007dd4:	08007ea1 	.word	0x08007ea1
 8007dd8:	08007ead 	.word	0x08007ead
 8007ddc:	08007eb9 	.word	0x08007eb9
 8007de0:	08007ec5 	.word	0x08007ec5
 8007de4:	08007ed1 	.word	0x08007ed1
 8007de8:	08007edd 	.word	0x08007edd
 8007dec:	08007edd 	.word	0x08007edd
 8007df0:	08007ef3 	.word	0x08007ef3
 8007df4:	08007eff 	.word	0x08007eff
 8007df8:	08007f0b 	.word	0x08007f0b
 8007dfc:	08007f17 	.word	0x08007f17
 8007e00:	08007f23 	.word	0x08007f23
 8007e04:	08007f2f 	.word	0x08007f2f
 8007e08:	08007f3b 	.word	0x08007f3b
 8007e0c:	08007f47 	.word	0x08007f47
 8007e10:	08007f53 	.word	0x08007f53
 8007e14:	08007f5f 	.word	0x08007f5f
 8007e18:	08007f6b 	.word	0x08007f6b
					return calibCoggingReferenceInfoArrayElCnt;

			#endif

			case PM_AHRS_DEBUG_INFO :
				*buffArr = AHRS_DebugInfoReferenceInfoArray;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4a5b      	ldr	r2, [pc, #364]	; (8007f8c <ParserSBGC32_AssignStructByParserMap+0x218>)
 8007e20:	601a      	str	r2, [r3, #0]
				return AHRS_DebugInfoReferenceInfoArrayElCnt;
 8007e22:	4b5b      	ldr	r3, [pc, #364]	; (8007f90 <ParserSBGC32_AssignStructByParserMap+0x21c>)
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	e0ab      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

			case PM_MOTOR_4_CONTROL :
				*buffArr = motor4_ControlReferenceInfoArray;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	4a5a      	ldr	r2, [pc, #360]	; (8007f94 <ParserSBGC32_AssignStructByParserMap+0x220>)
 8007e2c:	601a      	str	r2, [r3, #0]
				return motor4_ControlReferenceInfoArrayElCnt;
 8007e2e:	4b5a      	ldr	r3, [pc, #360]	; (8007f98 <ParserSBGC32_AssignStructByParserMap+0x224>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	e0a5      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

			#if (SBGC_CONTROL_MODULE)

				case PM_CONTROL :
					*buffArr = controlReferenceInfoArray;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	4a59      	ldr	r2, [pc, #356]	; (8007f9c <ParserSBGC32_AssignStructByParserMap+0x228>)
 8007e38:	601a      	str	r2, [r3, #0]
					return controlReferenceInfoArrayElCnt;
 8007e3a:	4b59      	ldr	r3, [pc, #356]	; (8007fa0 <ParserSBGC32_AssignStructByParserMap+0x22c>)
 8007e3c:	781b      	ldrb	r3, [r3, #0]
 8007e3e:	e09f      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_CONTROL_EXT :
					*buffArr = controlExtReferenceInfoArray;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	4a58      	ldr	r2, [pc, #352]	; (8007fa4 <ParserSBGC32_AssignStructByParserMap+0x230>)
 8007e44:	601a      	str	r2, [r3, #0]
					return controlExtReferenceInfoArrayElCnt;
 8007e46:	4b58      	ldr	r3, [pc, #352]	; (8007fa8 <ParserSBGC32_AssignStructByParserMap+0x234>)
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	e099      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_CONTROL_QUAT :
					*buffArr = controlQuatReferenceInfoArray;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	4a57      	ldr	r2, [pc, #348]	; (8007fac <ParserSBGC32_AssignStructByParserMap+0x238>)
 8007e50:	601a      	str	r2, [r3, #0]
					return controlQuatReferenceInfoArrayElCnt;
 8007e52:	4b57      	ldr	r3, [pc, #348]	; (8007fb0 <ParserSBGC32_AssignStructByParserMap+0x23c>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	e093      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_EXT_MOTORS_CONTROL :
					*buffArr = extMotorsControlReferenceInfoArray;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	4a56      	ldr	r2, [pc, #344]	; (8007fb4 <ParserSBGC32_AssignStructByParserMap+0x240>)
 8007e5c:	601a      	str	r2, [r3, #0]
					return extMotorsControlReferenceInfoArrayElCnt;
 8007e5e:	4b56      	ldr	r3, [pc, #344]	; (8007fb8 <ParserSBGC32_AssignStructByParserMap+0x244>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	e08d      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_CONTROL_CONFIG :
					*buffArr = controlConfigReferenceInfoArray;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	4a55      	ldr	r2, [pc, #340]	; (8007fbc <ParserSBGC32_AssignStructByParserMap+0x248>)
 8007e68:	601a      	str	r2, [r3, #0]
					return controlConfigReferenceInfoArrayElCnt;
 8007e6a:	4b55      	ldr	r3, [pc, #340]	; (8007fc0 <ParserSBGC32_AssignStructByParserMap+0x24c>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	e087      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_CONTROL_QUAT_CONFIG :
					*buffArr = controlQuatConfigReferenceInfoArray;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	4a54      	ldr	r2, [pc, #336]	; (8007fc4 <ParserSBGC32_AssignStructByParserMap+0x250>)
 8007e74:	601a      	str	r2, [r3, #0]
					return controlQuatConfigReferenceInfoArrayElCnt;
 8007e76:	4b54      	ldr	r3, [pc, #336]	; (8007fc8 <ParserSBGC32_AssignStructByParserMap+0x254>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	e081      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_EXT_MOTORS_CONTROL_CONFIG :
					*buffArr = extMotorsControlConfigReferenceInfoArray;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4a53      	ldr	r2, [pc, #332]	; (8007fcc <ParserSBGC32_AssignStructByParserMap+0x258>)
 8007e80:	601a      	str	r2, [r3, #0]
					return extMotorsControlConfigReferenceInfoArrayElCnt;
 8007e82:	4b53      	ldr	r3, [pc, #332]	; (8007fd0 <ParserSBGC32_AssignStructByParserMap+0x25c>)
 8007e84:	781b      	ldrb	r3, [r3, #0]
 8007e86:	e07b      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>
			#endif

			#if (SBGC_PROFILES_MODULE)

				case PM_MAIN_PARAMS_3 :
					*buffArr = mainParams3_ReferenceInfoArray;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	4a52      	ldr	r2, [pc, #328]	; (8007fd4 <ParserSBGC32_AssignStructByParserMap+0x260>)
 8007e8c:	601a      	str	r2, [r3, #0]
					return mainParams3_ReferenceInfoArrayElCnt;
 8007e8e:	4b52      	ldr	r3, [pc, #328]	; (8007fd8 <ParserSBGC32_AssignStructByParserMap+0x264>)
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	e075      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_MAIN_PARAMS_EXT :
					*buffArr = mainParamsExtReferenceInfoArray;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4a51      	ldr	r2, [pc, #324]	; (8007fdc <ParserSBGC32_AssignStructByParserMap+0x268>)
 8007e98:	601a      	str	r2, [r3, #0]
					return mainParamsExtReferenceInfoArrayElCnt;
 8007e9a:	4b51      	ldr	r3, [pc, #324]	; (8007fe0 <ParserSBGC32_AssignStructByParserMap+0x26c>)
 8007e9c:	781b      	ldrb	r3, [r3, #0]
 8007e9e:	e06f      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_MAIN_PARAMS_EXT2 :
					*buffArr = mainParamsExt2_ReferenceInfoArray;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4a50      	ldr	r2, [pc, #320]	; (8007fe4 <ParserSBGC32_AssignStructByParserMap+0x270>)
 8007ea4:	601a      	str	r2, [r3, #0]
					return mainParamsExt2_ReferenceInfoArrayElCnt;
 8007ea6:	4b50      	ldr	r3, [pc, #320]	; (8007fe8 <ParserSBGC32_AssignStructByParserMap+0x274>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	e069      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_MAIN_PARAMS_EXT3 :
					*buffArr = mainParamsExt3_ReferenceInfoArray;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	4a4f      	ldr	r2, [pc, #316]	; (8007fec <ParserSBGC32_AssignStructByParserMap+0x278>)
 8007eb0:	601a      	str	r2, [r3, #0]
					return mainParamsExt3_ReferenceInfoArrayElCnt;
 8007eb2:	4b4f      	ldr	r3, [pc, #316]	; (8007ff0 <ParserSBGC32_AssignStructByParserMap+0x27c>)
 8007eb4:	781b      	ldrb	r3, [r3, #0]
 8007eb6:	e063      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>
			#endif

			#if (SBGC_REALTIME_MODULE)

				case PM_DATA_STREAM_INTERVAL :
					*buffArr = dataStreamIntervalReferenceInfoArray;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	4a4e      	ldr	r2, [pc, #312]	; (8007ff4 <ParserSBGC32_AssignStructByParserMap+0x280>)
 8007ebc:	601a      	str	r2, [r3, #0]
					return dataStreamIntervalReferenceInfoArrayElCnt;
 8007ebe:	4b4e      	ldr	r3, [pc, #312]	; (8007ff8 <ParserSBGC32_AssignStructByParserMap+0x284>)
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	e05d      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_SYSTEM_POWER_STATE :
					*buffArr = systemPowerStateReferenceInfoArray;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4a4d      	ldr	r2, [pc, #308]	; (8007ffc <ParserSBGC32_AssignStructByParserMap+0x288>)
 8007ec8:	601a      	str	r2, [r3, #0]
					return systemPowerStateReferenceInfoArrayElCnt;
 8007eca:	4b4d      	ldr	r3, [pc, #308]	; (8008000 <ParserSBGC32_AssignStructByParserMap+0x28c>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	e057      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_COMMUNICATION_ERRORS :
					*buffArr = communicationErrorsReferenceInfoArray;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4a4c      	ldr	r2, [pc, #304]	; (8008004 <ParserSBGC32_AssignStructByParserMap+0x290>)
 8007ed4:	601a      	str	r2, [r3, #0]
					return communicationErrorsReferenceInfoArrayElCnt;
 8007ed6:	4b4c      	ldr	r3, [pc, #304]	; (8008008 <ParserSBGC32_AssignStructByParserMap+0x294>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	e051      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_REALTIME_DATA_3 :
				case PM_REALTIME_DATA_4 :
				{
					*buffArr = realTimeDataReferenceInfoArray;
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	4a4b      	ldr	r2, [pc, #300]	; (800800c <ParserSBGC32_AssignStructByParserMap+0x298>)
 8007ee0:	601a      	str	r2, [r3, #0]

					if (parserMap == PM_REALTIME_DATA_3)
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d101      	bne.n	8007eec <ParserSBGC32_AssignStructByParserMap+0x178>
						return COUNTOF_REALTIME_DATA_3;
 8007ee8:	231b      	movs	r3, #27
 8007eea:	e049      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

					else
						return realTimeDataReferenceInfoArrayElCnt;
 8007eec:	4b48      	ldr	r3, [pc, #288]	; (8008010 <ParserSBGC32_AssignStructByParserMap+0x29c>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	e046      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>
				}

				case PM_GET_ANGLES :
					*buffArr = getAnglesReferenceInfoArray;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4a47      	ldr	r2, [pc, #284]	; (8008014 <ParserSBGC32_AssignStructByParserMap+0x2a0>)
 8007ef6:	601a      	str	r2, [r3, #0]
					return getAnglesReferenceInfoArrayElCnt;
 8007ef8:	4b47      	ldr	r3, [pc, #284]	; (8008018 <ParserSBGC32_AssignStructByParserMap+0x2a4>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	e040      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_GET_ANGLES_EXT :
					*buffArr = getAnglesExtReferenceInfoArray;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a46      	ldr	r2, [pc, #280]	; (800801c <ParserSBGC32_AssignStructByParserMap+0x2a8>)
 8007f02:	601a      	str	r2, [r3, #0]
					return getAnglesExtReferenceInfoArrayElCnt;
 8007f04:	4b46      	ldr	r3, [pc, #280]	; (8008020 <ParserSBGC32_AssignStructByParserMap+0x2ac>)
 8007f06:	781b      	ldrb	r3, [r3, #0]
 8007f08:	e03a      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>
			#endif

			#if (SBGC_SERVICE_MODULE)

				case PM_BOARD_INFO :
					*buffArr = boardInfoReferenceInfoArray;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4a45      	ldr	r2, [pc, #276]	; (8008024 <ParserSBGC32_AssignStructByParserMap+0x2b0>)
 8007f0e:	601a      	str	r2, [r3, #0]
					return boardInfoReferenceInfoArrayElCnt;
 8007f10:	4b45      	ldr	r3, [pc, #276]	; (8008028 <ParserSBGC32_AssignStructByParserMap+0x2b4>)
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	e034      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_BOARD_INFO_3 :
					*buffArr = boardInfo3_ReferenceInfoArray;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	4a44      	ldr	r2, [pc, #272]	; (800802c <ParserSBGC32_AssignStructByParserMap+0x2b8>)
 8007f1a:	601a      	str	r2, [r3, #0]
					return boardInfo3_ReferenceInfoArrayElCnt;
 8007f1c:	4b44      	ldr	r3, [pc, #272]	; (8008030 <ParserSBGC32_AssignStructByParserMap+0x2bc>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	e02e      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_AUTO_PID :
					*buffArr = autoPID_ReferenceInfoArray;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4a43      	ldr	r2, [pc, #268]	; (8008034 <ParserSBGC32_AssignStructByParserMap+0x2c0>)
 8007f26:	601a      	str	r2, [r3, #0]
					return autoPID_ReferenceInfoArrayElCnt;
 8007f28:	4b43      	ldr	r3, [pc, #268]	; (8008038 <ParserSBGC32_AssignStructByParserMap+0x2c4>)
 8007f2a:	781b      	ldrb	r3, [r3, #0]
 8007f2c:	e028      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_AUTO_PID_2 :
					*buffArr = autoPID2_ReferenceInfoArray;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	4a42      	ldr	r2, [pc, #264]	; (800803c <ParserSBGC32_AssignStructByParserMap+0x2c8>)
 8007f32:	601a      	str	r2, [r3, #0]
					return autoPID2_ReferenceInfoArrayElCnt;
 8007f34:	4b42      	ldr	r3, [pc, #264]	; (8008040 <ParserSBGC32_AssignStructByParserMap+0x2cc>)
 8007f36:	781b      	ldrb	r3, [r3, #0]
 8007f38:	e022      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_AUTO_PID_STATE :
					*buffArr = autoPID_StateReferenceInfoArray;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	4a41      	ldr	r2, [pc, #260]	; (8008044 <ParserSBGC32_AssignStructByParserMap+0x2d0>)
 8007f3e:	601a      	str	r2, [r3, #0]
					return autoPID_StateReferenceInfoArrayElCnt;
 8007f40:	4b41      	ldr	r3, [pc, #260]	; (8008048 <ParserSBGC32_AssignStructByParserMap+0x2d4>)
 8007f42:	781b      	ldrb	r3, [r3, #0]
 8007f44:	e01c      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_SYNC_MOTORS :
					*buffArr = syncMotorsReferenceInfoArray;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	4a40      	ldr	r2, [pc, #256]	; (800804c <ParserSBGC32_AssignStructByParserMap+0x2d8>)
 8007f4a:	601a      	str	r2, [r3, #0]
					return syncMotorsReferenceInfoArrayElCnt;
 8007f4c:	4b40      	ldr	r3, [pc, #256]	; (8008050 <ParserSBGC32_AssignStructByParserMap+0x2dc>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	e016      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_SCRIPT_DEBUG_INFO :
					*buffArr = scriptDebugInfoReferenceInfoArray;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	4a3f      	ldr	r2, [pc, #252]	; (8008054 <ParserSBGC32_AssignStructByParserMap+0x2e0>)
 8007f56:	601a      	str	r2, [r3, #0]
					return scriptDebugInfoReferenceInfoArrayElCnt;
 8007f58:	4b3f      	ldr	r3, [pc, #252]	; (8008058 <ParserSBGC32_AssignStructByParserMap+0x2e4>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	e010      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_STATE_VARS :
					*buffArr = stateVarsReferenceInfoArray;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	4a3e      	ldr	r2, [pc, #248]	; (800805c <ParserSBGC32_AssignStructByParserMap+0x2e8>)
 8007f62:	601a      	str	r2, [r3, #0]
					return stateVarsReferenceInfoArrayElCnt;
 8007f64:	4b3e      	ldr	r3, [pc, #248]	; (8008060 <ParserSBGC32_AssignStructByParserMap+0x2ec>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	e00a      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

				case PM_CAN_DEVICE_SCAN :
					*buffArr = CAN_DeviceScanReferenceInfoArray;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	4a3d      	ldr	r2, [pc, #244]	; (8008064 <ParserSBGC32_AssignStructByParserMap+0x2f0>)
 8007f6e:	601a      	str	r2, [r3, #0]
					return CAN_DeviceScanReferenceInfoArrayElCnt;
 8007f70:	4b3d      	ldr	r3, [pc, #244]	; (8008068 <ParserSBGC32_AssignStructByParserMap+0x2f4>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	e004      	b.n	8007f80 <ParserSBGC32_AssignStructByParserMap+0x20c>

			#endif

			/* Prevent [-Wswitch] warning (never come here) */
			default :
				break;
 8007f76:	bf00      	nop
		}

		*buffArr = NULL;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	601a      	str	r2, [r3, #0]
		return 0;
 8007f7e:	2300      	movs	r3, #0
	}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	0801105c 	.word	0x0801105c
 8007f90:	080110bc 	.word	0x080110bc
 8007f94:	080110c0 	.word	0x080110c0
 8007f98:	080110d8 	.word	0x080110d8
 8007f9c:	080110dc 	.word	0x080110dc
 8007fa0:	08011114 	.word	0x08011114
 8007fa4:	08011118 	.word	0x08011118
 8007fa8:	08011168 	.word	0x08011168
 8007fac:	0801116c 	.word	0x0801116c
 8007fb0:	0801118c 	.word	0x0801118c
 8007fb4:	08011190 	.word	0x08011190
 8007fb8:	08011210 	.word	0x08011210
 8007fbc:	08011214 	.word	0x08011214
 8007fc0:	080112f4 	.word	0x080112f4
 8007fc4:	080112f8 	.word	0x080112f8
 8007fc8:	08011330 	.word	0x08011330
 8007fcc:	08011334 	.word	0x08011334
 8007fd0:	0801136c 	.word	0x0801136c
 8007fd4:	08011370 	.word	0x08011370
 8007fd8:	080116b8 	.word	0x080116b8
 8007fdc:	080116bc 	.word	0x080116bc
 8007fe0:	080117d4 	.word	0x080117d4
 8007fe4:	080117d8 	.word	0x080117d8
 8007fe8:	08011a58 	.word	0x08011a58
 8007fec:	08011a5c 	.word	0x08011a5c
 8007ff0:	08011bc4 	.word	0x08011bc4
 8007ff4:	08011bc8 	.word	0x08011bc8
 8007ff8:	08011bf0 	.word	0x08011bf0
 8007ffc:	08011bf4 	.word	0x08011bf4
 8008000:	08011c8c 	.word	0x08011c8c
 8008004:	08011c90 	.word	0x08011c90
 8008008:	08011cb0 	.word	0x08011cb0
 800800c:	08011cb4 	.word	0x08011cb4
 8008010:	08011e04 	.word	0x08011e04
 8008014:	08011e08 	.word	0x08011e08
 8008018:	08011e50 	.word	0x08011e50
 800801c:	08011e54 	.word	0x08011e54
 8008020:	08011eb4 	.word	0x08011eb4
 8008024:	08011eb8 	.word	0x08011eb8
 8008028:	08011f10 	.word	0x08011f10
 800802c:	08011f14 	.word	0x08011f14
 8008030:	08011fc4 	.word	0x08011fc4
 8008034:	08011fc8 	.word	0x08011fc8
 8008038:	08011ff8 	.word	0x08011ff8
 800803c:	08011ffc 	.word	0x08011ffc
 8008040:	080120e4 	.word	0x080120e4
 8008044:	080120e8 	.word	0x080120e8
 8008048:	08012148 	.word	0x08012148
 800804c:	0801214c 	.word	0x0801214c
 8008050:	0801216c 	.word	0x0801216c
 8008054:	08012170 	.word	0x08012170
 8008058:	08012180 	.word	0x08012180
 800805c:	08012184 	.word	0x08012184
 8008060:	08012204 	.word	0x08012204
 8008064:	08012208 	.word	0x08012208
 8008068:	08012220 	.word	0x08012220

0800806c <ParserSBGC32_ConvertCommandID_ToString>:
 *	@param	size - buffer size
 *
 *	@return	Length of a writable string
 */
ui8 ParserSBGC32_ConvertCommandID_ToString (serialAPI_Command_t *serialCommand, char *str, ui8 size)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	4613      	mov	r3, r2
 8008078:	71fb      	strb	r3, [r7, #7]
	if (size < SBGC_CMD_ID_NAME_MAX_LEN) return 0;
 800807a:	79fb      	ldrb	r3, [r7, #7]
 800807c:	2b1f      	cmp	r3, #31
 800807e:	d802      	bhi.n	8008086 <ParserSBGC32_ConvertCommandID_ToString+0x1a>
 8008080:	2300      	movs	r3, #0
 8008082:	f000 bd9e 	b.w	8008bc2 <ParserSBGC32_ConvertCommandID_ToString+0xb56>

	switch (serialCommand->_commandID)
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800808c:	3b01      	subs	r3, #1
 800808e:	2bfe      	cmp	r3, #254	; 0xfe
 8008090:	f200 8592 	bhi.w	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
 8008094:	a201      	add	r2, pc, #4	; (adr r2, 800809c <ParserSBGC32_ConvertCommandID_ToString+0x30>)
 8008096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800809a:	bf00      	nop
 800809c:	08008bb9 	.word	0x08008bb9
 80080a0:	08008bb9 	.word	0x08008bb9
 80080a4:	08008bb9 	.word	0x08008bb9
 80080a8:	08008bb9 	.word	0x08008bb9
 80080ac:	08008bb9 	.word	0x08008bb9
 80080b0:	08008bb9 	.word	0x08008bb9
 80080b4:	08008bb9 	.word	0x08008bb9
 80080b8:	08008bb9 	.word	0x08008bb9
 80080bc:	08008bb9 	.word	0x08008bb9
 80080c0:	08008bb9 	.word	0x08008bb9
 80080c4:	08008bb9 	.word	0x08008bb9
 80080c8:	08008bb9 	.word	0x08008bb9
 80080cc:	08008bb9 	.word	0x08008bb9
 80080d0:	08008bb9 	.word	0x08008bb9
 80080d4:	08008bb9 	.word	0x08008bb9
 80080d8:	08008bb9 	.word	0x08008bb9
 80080dc:	08008bb9 	.word	0x08008bb9
 80080e0:	08008bb9 	.word	0x08008bb9
 80080e4:	08008bb9 	.word	0x08008bb9
 80080e8:	08008499 	.word	0x08008499
 80080ec:	080084a5 	.word	0x080084a5
 80080f0:	080084b1 	.word	0x080084b1
 80080f4:	080084bd 	.word	0x080084bd
 80080f8:	080084c9 	.word	0x080084c9
 80080fc:	080084d5 	.word	0x080084d5
 8008100:	080084e1 	.word	0x080084e1
 8008104:	080084ed 	.word	0x080084ed
 8008108:	080084f9 	.word	0x080084f9
 800810c:	08008505 	.word	0x08008505
 8008110:	08008511 	.word	0x08008511
 8008114:	0800851d 	.word	0x0800851d
 8008118:	08008529 	.word	0x08008529
 800811c:	08008535 	.word	0x08008535
 8008120:	08008541 	.word	0x08008541
 8008124:	0800854d 	.word	0x0800854d
 8008128:	08008559 	.word	0x08008559
 800812c:	08008bb9 	.word	0x08008bb9
 8008130:	08008bb9 	.word	0x08008bb9
 8008134:	08008565 	.word	0x08008565
 8008138:	08008571 	.word	0x08008571
 800813c:	0800857d 	.word	0x0800857d
 8008140:	08008589 	.word	0x08008589
 8008144:	08008595 	.word	0x08008595
 8008148:	080085a1 	.word	0x080085a1
 800814c:	080085ad 	.word	0x080085ad
 8008150:	080085b9 	.word	0x080085b9
 8008154:	080085c5 	.word	0x080085c5
 8008158:	080085d1 	.word	0x080085d1
 800815c:	080085dd 	.word	0x080085dd
 8008160:	080085e9 	.word	0x080085e9
 8008164:	080085f5 	.word	0x080085f5
 8008168:	08008601 	.word	0x08008601
 800816c:	0800860d 	.word	0x0800860d
 8008170:	08008619 	.word	0x08008619
 8008174:	08008625 	.word	0x08008625
 8008178:	08008631 	.word	0x08008631
 800817c:	0800863d 	.word	0x0800863d
 8008180:	08008649 	.word	0x08008649
 8008184:	08008655 	.word	0x08008655
 8008188:	08008bb9 	.word	0x08008bb9
 800818c:	08008661 	.word	0x08008661
 8008190:	0800866d 	.word	0x0800866d
 8008194:	08008679 	.word	0x08008679
 8008198:	08008685 	.word	0x08008685
 800819c:	08008691 	.word	0x08008691
 80081a0:	0800869d 	.word	0x0800869d
 80081a4:	080086a9 	.word	0x080086a9
 80081a8:	080086cb 	.word	0x080086cb
 80081ac:	080086d7 	.word	0x080086d7
 80081b0:	080086e3 	.word	0x080086e3
 80081b4:	080086ef 	.word	0x080086ef
 80081b8:	080086fb 	.word	0x080086fb
 80081bc:	08008707 	.word	0x08008707
 80081c0:	08008713 	.word	0x08008713
 80081c4:	0800871f 	.word	0x0800871f
 80081c8:	08008bb9 	.word	0x08008bb9
 80081cc:	0800872b 	.word	0x0800872b
 80081d0:	08008bb9 	.word	0x08008bb9
 80081d4:	08008815 	.word	0x08008815
 80081d8:	08008821 	.word	0x08008821
 80081dc:	08008bb9 	.word	0x08008bb9
 80081e0:	0800882d 	.word	0x0800882d
 80081e4:	08008bb9 	.word	0x08008bb9
 80081e8:	08008839 	.word	0x08008839
 80081ec:	08008845 	.word	0x08008845
 80081f0:	08008851 	.word	0x08008851
 80081f4:	0800885d 	.word	0x0800885d
 80081f8:	08008869 	.word	0x08008869
 80081fc:	08008875 	.word	0x08008875
 8008200:	08008881 	.word	0x08008881
 8008204:	0800888d 	.word	0x0800888d
 8008208:	08008899 	.word	0x08008899
 800820c:	080088a5 	.word	0x080088a5
 8008210:	080088b1 	.word	0x080088b1
 8008214:	080088bd 	.word	0x080088bd
 8008218:	080088c9 	.word	0x080088c9
 800821c:	080088d5 	.word	0x080088d5
 8008220:	080088e1 	.word	0x080088e1
 8008224:	080088ed 	.word	0x080088ed
 8008228:	080088f9 	.word	0x080088f9
 800822c:	08008905 	.word	0x08008905
 8008230:	08008911 	.word	0x08008911
 8008234:	0800891d 	.word	0x0800891d
 8008238:	08008929 	.word	0x08008929
 800823c:	08008935 	.word	0x08008935
 8008240:	08008941 	.word	0x08008941
 8008244:	0800894d 	.word	0x0800894d
 8008248:	08008959 	.word	0x08008959
 800824c:	08008965 	.word	0x08008965
 8008250:	08008971 	.word	0x08008971
 8008254:	0800897d 	.word	0x0800897d
 8008258:	08008989 	.word	0x08008989
 800825c:	08008995 	.word	0x08008995
 8008260:	080089a1 	.word	0x080089a1
 8008264:	080089ad 	.word	0x080089ad
 8008268:	080089b9 	.word	0x080089b9
 800826c:	080089c5 	.word	0x080089c5
 8008270:	080089d1 	.word	0x080089d1
 8008274:	080089dd 	.word	0x080089dd
 8008278:	080089e9 	.word	0x080089e9
 800827c:	080089f5 	.word	0x080089f5
 8008280:	08008bb9 	.word	0x08008bb9
 8008284:	08008a01 	.word	0x08008a01
 8008288:	08008bb9 	.word	0x08008bb9
 800828c:	08008bb9 	.word	0x08008bb9
 8008290:	08008bb9 	.word	0x08008bb9
 8008294:	08008a0d 	.word	0x08008a0d
 8008298:	08008a19 	.word	0x08008a19
 800829c:	08008a25 	.word	0x08008a25
 80082a0:	08008a31 	.word	0x08008a31
 80082a4:	08008a3d 	.word	0x08008a3d
 80082a8:	08008a49 	.word	0x08008a49
 80082ac:	08008bb9 	.word	0x08008bb9
 80082b0:	08008bb9 	.word	0x08008bb9
 80082b4:	08008bb9 	.word	0x08008bb9
 80082b8:	08008bb9 	.word	0x08008bb9
 80082bc:	08008bb9 	.word	0x08008bb9
 80082c0:	08008bb9 	.word	0x08008bb9
 80082c4:	08008bb9 	.word	0x08008bb9
 80082c8:	08008a55 	.word	0x08008a55
 80082cc:	08008a61 	.word	0x08008a61
 80082d0:	08008a6d 	.word	0x08008a6d
 80082d4:	08008bb9 	.word	0x08008bb9
 80082d8:	08008bb9 	.word	0x08008bb9
 80082dc:	08008bb9 	.word	0x08008bb9
 80082e0:	08008bb9 	.word	0x08008bb9
 80082e4:	08008bb9 	.word	0x08008bb9
 80082e8:	08008bb9 	.word	0x08008bb9
 80082ec:	08008bb9 	.word	0x08008bb9
 80082f0:	08008a79 	.word	0x08008a79
 80082f4:	08008a85 	.word	0x08008a85
 80082f8:	08008bb9 	.word	0x08008bb9
 80082fc:	08008bb9 	.word	0x08008bb9
 8008300:	08008bb9 	.word	0x08008bb9
 8008304:	08008bb9 	.word	0x08008bb9
 8008308:	08008bb9 	.word	0x08008bb9
 800830c:	08008bb9 	.word	0x08008bb9
 8008310:	08008bb9 	.word	0x08008bb9
 8008314:	08008bb9 	.word	0x08008bb9
 8008318:	08008bb9 	.word	0x08008bb9
 800831c:	08008bb9 	.word	0x08008bb9
 8008320:	08008bb9 	.word	0x08008bb9
 8008324:	08008bb9 	.word	0x08008bb9
 8008328:	08008bb9 	.word	0x08008bb9
 800832c:	08008bb9 	.word	0x08008bb9
 8008330:	08008bb9 	.word	0x08008bb9
 8008334:	08008bb9 	.word	0x08008bb9
 8008338:	08008bb9 	.word	0x08008bb9
 800833c:	08008bb9 	.word	0x08008bb9
 8008340:	08008bb9 	.word	0x08008bb9
 8008344:	08008bb9 	.word	0x08008bb9
 8008348:	08008bb9 	.word	0x08008bb9
 800834c:	08008bb9 	.word	0x08008bb9
 8008350:	08008bb9 	.word	0x08008bb9
 8008354:	08008bb9 	.word	0x08008bb9
 8008358:	08008bb9 	.word	0x08008bb9
 800835c:	08008bb9 	.word	0x08008bb9
 8008360:	08008bb9 	.word	0x08008bb9
 8008364:	08008bb9 	.word	0x08008bb9
 8008368:	08008bb9 	.word	0x08008bb9
 800836c:	08008bb9 	.word	0x08008bb9
 8008370:	08008bb9 	.word	0x08008bb9
 8008374:	08008bb9 	.word	0x08008bb9
 8008378:	08008bb9 	.word	0x08008bb9
 800837c:	08008bb9 	.word	0x08008bb9
 8008380:	08008bb9 	.word	0x08008bb9
 8008384:	08008bb9 	.word	0x08008bb9
 8008388:	08008bb9 	.word	0x08008bb9
 800838c:	08008bb9 	.word	0x08008bb9
 8008390:	08008bb9 	.word	0x08008bb9
 8008394:	08008bb9 	.word	0x08008bb9
 8008398:	08008bb9 	.word	0x08008bb9
 800839c:	08008bb9 	.word	0x08008bb9
 80083a0:	08008bb9 	.word	0x08008bb9
 80083a4:	08008bb9 	.word	0x08008bb9
 80083a8:	08008bb9 	.word	0x08008bb9
 80083ac:	08008bb9 	.word	0x08008bb9
 80083b0:	08008bb9 	.word	0x08008bb9
 80083b4:	08008bb9 	.word	0x08008bb9
 80083b8:	08008bb9 	.word	0x08008bb9
 80083bc:	08008bb9 	.word	0x08008bb9
 80083c0:	08008bb9 	.word	0x08008bb9
 80083c4:	08008bb9 	.word	0x08008bb9
 80083c8:	08008bb9 	.word	0x08008bb9
 80083cc:	08008bb9 	.word	0x08008bb9
 80083d0:	08008bb9 	.word	0x08008bb9
 80083d4:	08008bb9 	.word	0x08008bb9
 80083d8:	08008bb9 	.word	0x08008bb9
 80083dc:	08008bb9 	.word	0x08008bb9
 80083e0:	08008bb9 	.word	0x08008bb9
 80083e4:	08008bb9 	.word	0x08008bb9
 80083e8:	08008bb9 	.word	0x08008bb9
 80083ec:	08008bb9 	.word	0x08008bb9
 80083f0:	08008bb9 	.word	0x08008bb9
 80083f4:	08008bb9 	.word	0x08008bb9
 80083f8:	08008bb9 	.word	0x08008bb9
 80083fc:	08008bb9 	.word	0x08008bb9
 8008400:	08008bb9 	.word	0x08008bb9
 8008404:	08008bb9 	.word	0x08008bb9
 8008408:	08008bb9 	.word	0x08008bb9
 800840c:	08008bb9 	.word	0x08008bb9
 8008410:	08008bb9 	.word	0x08008bb9
 8008414:	08008bb9 	.word	0x08008bb9
 8008418:	08008bb9 	.word	0x08008bb9
 800841c:	08008bb9 	.word	0x08008bb9
 8008420:	08008bb9 	.word	0x08008bb9
 8008424:	08008bb9 	.word	0x08008bb9
 8008428:	08008bb9 	.word	0x08008bb9
 800842c:	08008bb9 	.word	0x08008bb9
 8008430:	08008bb9 	.word	0x08008bb9
 8008434:	08008bb9 	.word	0x08008bb9
 8008438:	08008bb9 	.word	0x08008bb9
 800843c:	08008bb9 	.word	0x08008bb9
 8008440:	08008bb9 	.word	0x08008bb9
 8008444:	08008bb9 	.word	0x08008bb9
 8008448:	08008bb9 	.word	0x08008bb9
 800844c:	08008bb9 	.word	0x08008bb9
 8008450:	08008bb9 	.word	0x08008bb9
 8008454:	08008bb9 	.word	0x08008bb9
 8008458:	08008bb9 	.word	0x08008bb9
 800845c:	08008bb9 	.word	0x08008bb9
 8008460:	08008bb9 	.word	0x08008bb9
 8008464:	08008bb9 	.word	0x08008bb9
 8008468:	08008bb9 	.word	0x08008bb9
 800846c:	08008bb9 	.word	0x08008bb9
 8008470:	08008bb9 	.word	0x08008bb9
 8008474:	08008bb9 	.word	0x08008bb9
 8008478:	08008bb9 	.word	0x08008bb9
 800847c:	08008a91 	.word	0x08008a91
 8008480:	08008a9d 	.word	0x08008a9d
 8008484:	08008aa9 	.word	0x08008aa9
 8008488:	08008bb9 	.word	0x08008bb9
 800848c:	08008b95 	.word	0x08008b95
 8008490:	08008ba1 	.word	0x08008ba1
 8008494:	08008bad 	.word	0x08008bad
	{
		case sbgcANY_SERIAL_COMMAND :				break;

		case CMD_BOARD_INFO_3 :						memcpy(str, TEXT_LENGTH_("CMD_BOARD_INFO_3")); break;
 8008498:	2210      	movs	r2, #16
 800849a:	49a7      	ldr	r1, [pc, #668]	; (8008738 <ParserSBGC32_ConvertCommandID_ToString+0x6cc>)
 800849c:	68b8      	ldr	r0, [r7, #8]
 800849e:	f001 f9ed 	bl	800987c <memcpy>
 80084a2:	e389      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_PARAMS_3 :					memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS_3")); break;
 80084a4:	2211      	movs	r2, #17
 80084a6:	49a5      	ldr	r1, [pc, #660]	; (800873c <ParserSBGC32_ConvertCommandID_ToString+0x6d0>)
 80084a8:	68b8      	ldr	r0, [r7, #8]
 80084aa:	f001 f9e7 	bl	800987c <memcpy>
 80084ae:	e383      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_PARAMS_3 :					memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_3")); break;
 80084b0:	2212      	movs	r2, #18
 80084b2:	49a3      	ldr	r1, [pc, #652]	; (8008740 <ParserSBGC32_ConvertCommandID_ToString+0x6d4>)
 80084b4:	68b8      	ldr	r0, [r7, #8]
 80084b6:	f001 f9e1 	bl	800987c <memcpy>
 80084ba:	e37d      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_REALTIME_DATA_3 :					memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA_3")); break;
 80084bc:	2213      	movs	r2, #19
 80084be:	49a1      	ldr	r1, [pc, #644]	; (8008744 <ParserSBGC32_ConvertCommandID_ToString+0x6d8>)
 80084c0:	68b8      	ldr	r0, [r7, #8]
 80084c2:	f001 f9db 	bl	800987c <memcpy>
 80084c6:	e377      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SELECT_IMU_3 :						memcpy(str, TEXT_LENGTH_("CMD_SELECT_IMU_3")); break;
 80084c8:	2210      	movs	r2, #16
 80084ca:	499f      	ldr	r1, [pc, #636]	; (8008748 <ParserSBGC32_ConvertCommandID_ToString+0x6dc>)
 80084cc:	68b8      	ldr	r0, [r7, #8]
 80084ce:	f001 f9d5 	bl	800987c <memcpy>
 80084d2:	e371      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_REALTIME_DATA_4 :					memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA_4")); break;
 80084d4:	2213      	movs	r2, #19
 80084d6:	499d      	ldr	r1, [pc, #628]	; (800874c <ParserSBGC32_ConvertCommandID_ToString+0x6e0>)
 80084d8:	68b8      	ldr	r0, [r7, #8]
 80084da:	f001 f9cf 	bl	800987c <memcpy>
 80084de:	e36b      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_ENCODERS_CALIB_OFFSET_4 :			memcpy(str, TEXT_LENGTH_("CMD_ENCODERS_CALIB_OFFSET_4")); break;
 80084e0:	221b      	movs	r2, #27
 80084e2:	499b      	ldr	r1, [pc, #620]	; (8008750 <ParserSBGC32_ConvertCommandID_ToString+0x6e4>)
 80084e4:	68b8      	ldr	r0, [r7, #8]
 80084e6:	f001 f9c9 	bl	800987c <memcpy>
 80084ea:	e365      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_ENCODERS_CALIB_FLD_OFFSET_4 :		memcpy(str, TEXT_LENGTH_("CMD_ENCODERS_CALIB_FLD_OFFSET_4")); break;
 80084ec:	221f      	movs	r2, #31
 80084ee:	4999      	ldr	r1, [pc, #612]	; (8008754 <ParserSBGC32_ConvertCommandID_ToString+0x6e8>)
 80084f0:	68b8      	ldr	r0, [r7, #8]
 80084f2:	f001 f9c3 	bl	800987c <memcpy>
 80084f6:	e35f      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_PROFILE_NAMES :				memcpy(str, TEXT_LENGTH_("CMD_READ_PROFILE_NAMES")); break;
 80084f8:	2216      	movs	r2, #22
 80084fa:	4997      	ldr	r1, [pc, #604]	; (8008758 <ParserSBGC32_ConvertCommandID_ToString+0x6ec>)
 80084fc:	68b8      	ldr	r0, [r7, #8]
 80084fe:	f001 f9bd 	bl	800987c <memcpy>
 8008502:	e359      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_PROFILE_NAMES :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_PROFILE_NAMES")); break;
 8008504:	2217      	movs	r2, #23
 8008506:	4995      	ldr	r1, [pc, #596]	; (800875c <ParserSBGC32_ConvertCommandID_ToString+0x6f0>)
 8008508:	68b8      	ldr	r0, [r7, #8]
 800850a:	f001 f9b7 	bl	800987c <memcpy>
 800850e:	e353      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_QUEUE_PARAMS_INFO_3 :				memcpy(str, TEXT_LENGTH_("CMD_QUEUE_PARAMS_INFO_3")); break;
 8008510:	2217      	movs	r2, #23
 8008512:	4993      	ldr	r1, [pc, #588]	; (8008760 <ParserSBGC32_ConvertCommandID_ToString+0x6f4>)
 8008514:	68b8      	ldr	r0, [r7, #8]
 8008516:	f001 f9b1 	bl	800987c <memcpy>
 800851a:	e34d      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SET_ADJ_VARS_VAL :					memcpy(str, TEXT_LENGTH_("CMD_SET_ADJ_VARS_VAL")); break;
 800851c:	2214      	movs	r2, #20
 800851e:	4991      	ldr	r1, [pc, #580]	; (8008764 <ParserSBGC32_ConvertCommandID_ToString+0x6f8>)
 8008520:	68b8      	ldr	r0, [r7, #8]
 8008522:	f001 f9ab 	bl	800987c <memcpy>
 8008526:	e347      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SAVE_PARAMS_3 :					memcpy(str, TEXT_LENGTH_("CMD_SAVE_PARAMS_3")); break;
 8008528:	2211      	movs	r2, #17
 800852a:	498f      	ldr	r1, [pc, #572]	; (8008768 <ParserSBGC32_ConvertCommandID_ToString+0x6fc>)
 800852c:	68b8      	ldr	r0, [r7, #8]
 800852e:	f001 f9a5 	bl	800987c <memcpy>
 8008532:	e341      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_PARAMS_EXT :					memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS_EXT")); break;
 8008534:	2213      	movs	r2, #19
 8008536:	498d      	ldr	r1, [pc, #564]	; (800876c <ParserSBGC32_ConvertCommandID_ToString+0x700>)
 8008538:	68b8      	ldr	r0, [r7, #8]
 800853a:	f001 f99f 	bl	800987c <memcpy>
 800853e:	e33b      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_PARAMS_EXT :					memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_EXT")); break;
 8008540:	2214      	movs	r2, #20
 8008542:	498b      	ldr	r1, [pc, #556]	; (8008770 <ParserSBGC32_ConvertCommandID_ToString+0x704>)
 8008544:	68b8      	ldr	r0, [r7, #8]
 8008546:	f001 f999 	bl	800987c <memcpy>
 800854a:	e335      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_AUTO_PID :							memcpy(str, TEXT_LENGTH_("CMD_AUTO_PID")); break;
 800854c:	220c      	movs	r2, #12
 800854e:	4989      	ldr	r1, [pc, #548]	; (8008774 <ParserSBGC32_ConvertCommandID_ToString+0x708>)
 8008550:	68b8      	ldr	r0, [r7, #8]
 8008552:	f001 f993 	bl	800987c <memcpy>
 8008556:	e32f      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SERVO_OUT :						memcpy(str, TEXT_LENGTH_("CMD_SERVO_OUT")); break;
 8008558:	220d      	movs	r2, #13
 800855a:	4987      	ldr	r1, [pc, #540]	; (8008778 <ParserSBGC32_ConvertCommandID_ToString+0x70c>)
 800855c:	68b8      	ldr	r0, [r7, #8]
 800855e:	f001 f98d 	bl	800987c <memcpy>
 8008562:	e329      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_I2C_WRITE_REG_BUF :				memcpy(str, TEXT_LENGTH_("CMD_I2C_WRITE_REG_BUF")); break;
 8008564:	2215      	movs	r2, #21
 8008566:	4985      	ldr	r1, [pc, #532]	; (800877c <ParserSBGC32_ConvertCommandID_ToString+0x710>)
 8008568:	68b8      	ldr	r0, [r7, #8]
 800856a:	f001 f987 	bl	800987c <memcpy>
 800856e:	e323      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_I2C_READ_REG_BUF :					memcpy(str, TEXT_LENGTH_("CMD_I2C_READ_REG_BUF")); break;
 8008570:	2214      	movs	r2, #20
 8008572:	4983      	ldr	r1, [pc, #524]	; (8008780 <ParserSBGC32_ConvertCommandID_ToString+0x714>)
 8008574:	68b8      	ldr	r0, [r7, #8]
 8008576:	f001 f981 	bl	800987c <memcpy>
 800857a:	e31d      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_EXTERNAL_DATA :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_EXTERNAL_DATA")); break;
 800857c:	2217      	movs	r2, #23
 800857e:	4981      	ldr	r1, [pc, #516]	; (8008784 <ParserSBGC32_ConvertCommandID_ToString+0x718>)
 8008580:	68b8      	ldr	r0, [r7, #8]
 8008582:	f001 f97b 	bl	800987c <memcpy>
 8008586:	e317      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_EXTERNAL_DATA :				memcpy(str, TEXT_LENGTH_("CMD_READ_EXTERNAL_DATA")); break;
 8008588:	2216      	movs	r2, #22
 800858a:	497f      	ldr	r1, [pc, #508]	; (8008788 <ParserSBGC32_ConvertCommandID_ToString+0x71c>)
 800858c:	68b8      	ldr	r0, [r7, #8]
 800858e:	f001 f975 	bl	800987c <memcpy>
 8008592:	e311      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_ADJ_VARS_CFG :				memcpy(str, TEXT_LENGTH_("CMD_READ_ADJ_VARS_CFG")); break;
 8008594:	2215      	movs	r2, #21
 8008596:	497d      	ldr	r1, [pc, #500]	; (800878c <ParserSBGC32_ConvertCommandID_ToString+0x720>)
 8008598:	68b8      	ldr	r0, [r7, #8]
 800859a:	f001 f96f 	bl	800987c <memcpy>
 800859e:	e30b      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_ADJ_VARS_CFG :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_ADJ_VARS_CFG")); break;
 80085a0:	2216      	movs	r2, #22
 80085a2:	497b      	ldr	r1, [pc, #492]	; (8008790 <ParserSBGC32_ConvertCommandID_ToString+0x724>)
 80085a4:	68b8      	ldr	r0, [r7, #8]
 80085a6:	f001 f969 	bl	800987c <memcpy>
 80085aa:	e305      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_API_VIRT_CH_CONTROL :				memcpy(str, TEXT_LENGTH_("CMD_API_VIRT_CH_CONTROL")); break;
 80085ac:	2217      	movs	r2, #23
 80085ae:	4979      	ldr	r1, [pc, #484]	; (8008794 <ParserSBGC32_ConvertCommandID_ToString+0x728>)
 80085b0:	68b8      	ldr	r0, [r7, #8]
 80085b2:	f001 f963 	bl	800987c <memcpy>
 80085b6:	e2ff      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_ADJ_VARS_STATE :					memcpy(str, TEXT_LENGTH_("CMD_ADJ_VARS_STATE")); break;
 80085b8:	2212      	movs	r2, #18
 80085ba:	4977      	ldr	r1, [pc, #476]	; (8008798 <ParserSBGC32_ConvertCommandID_ToString+0x72c>)
 80085bc:	68b8      	ldr	r0, [r7, #8]
 80085be:	f001 f95d 	bl	800987c <memcpy>
 80085c2:	e2f9      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EEPROM_WRITE :						memcpy(str, TEXT_LENGTH_("CMD_EEPROM_WRITE")); break;
 80085c4:	2210      	movs	r2, #16
 80085c6:	4975      	ldr	r1, [pc, #468]	; (800879c <ParserSBGC32_ConvertCommandID_ToString+0x730>)
 80085c8:	68b8      	ldr	r0, [r7, #8]
 80085ca:	f001 f957 	bl	800987c <memcpy>
 80085ce:	e2f3      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EEPROM_READ :						memcpy(str, TEXT_LENGTH_("CMD_EEPROM_READ")); break;
 80085d0:	220f      	movs	r2, #15
 80085d2:	4973      	ldr	r1, [pc, #460]	; (80087a0 <ParserSBGC32_ConvertCommandID_ToString+0x734>)
 80085d4:	68b8      	ldr	r0, [r7, #8]
 80085d6:	f001 f951 	bl	800987c <memcpy>
 80085da:	e2ed      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_INFO :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_INFO")); break;
 80085dc:	220e      	movs	r2, #14
 80085de:	4971      	ldr	r1, [pc, #452]	; (80087a4 <ParserSBGC32_ConvertCommandID_ToString+0x738>)
 80085e0:	68b8      	ldr	r0, [r7, #8]
 80085e2:	f001 f94b 	bl	800987c <memcpy>
 80085e6:	e2e7      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SIGN_MESSAGE :						memcpy(str, TEXT_LENGTH_("CMD_SIGN_MESSAGE")); break;
 80085e8:	2210      	movs	r2, #16
 80085ea:	496f      	ldr	r1, [pc, #444]	; (80087a8 <ParserSBGC32_ConvertCommandID_ToString+0x73c>)
 80085ec:	68b8      	ldr	r0, [r7, #8]
 80085ee:	f001 f945 	bl	800987c <memcpy>
 80085f2:	e2e1      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_BOOT_MODE_3 :						memcpy(str, TEXT_LENGTH_("CMD_BOOT_MODE_3")); break;
 80085f4:	220f      	movs	r2, #15
 80085f6:	496d      	ldr	r1, [pc, #436]	; (80087ac <ParserSBGC32_ConvertCommandID_ToString+0x740>)
 80085f8:	68b8      	ldr	r0, [r7, #8]
 80085fa:	f001 f93f 	bl	800987c <memcpy>
 80085fe:	e2db      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SYSTEM_STATE :						memcpy(str, TEXT_LENGTH_("CMD_SYSTEM_STATE")); break;
 8008600:	2210      	movs	r2, #16
 8008602:	496b      	ldr	r1, [pc, #428]	; (80087b0 <ParserSBGC32_ConvertCommandID_ToString+0x744>)
 8008604:	68b8      	ldr	r0, [r7, #8]
 8008606:	f001 f939 	bl	800987c <memcpy>
 800860a:	e2d5      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_FILE :						memcpy(str, TEXT_LENGTH_("CMD_READ_FILE")); break;
 800860c:	220d      	movs	r2, #13
 800860e:	4969      	ldr	r1, [pc, #420]	; (80087b4 <ParserSBGC32_ConvertCommandID_ToString+0x748>)
 8008610:	68b8      	ldr	r0, [r7, #8]
 8008612:	f001 f933 	bl	800987c <memcpy>
 8008616:	e2cf      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_FILE :						memcpy(str, TEXT_LENGTH_("CMD_WRITE_FILE")); break;
 8008618:	220e      	movs	r2, #14
 800861a:	4967      	ldr	r1, [pc, #412]	; (80087b8 <ParserSBGC32_ConvertCommandID_ToString+0x74c>)
 800861c:	68b8      	ldr	r0, [r7, #8]
 800861e:	f001 f92d 	bl	800987c <memcpy>
 8008622:	e2c9      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_FS_CLEAR_ALL :						memcpy(str, TEXT_LENGTH_("CMD_FS_CLEAR_ALL")); break;
 8008624:	2210      	movs	r2, #16
 8008626:	4965      	ldr	r1, [pc, #404]	; (80087bc <ParserSBGC32_ConvertCommandID_ToString+0x750>)
 8008628:	68b8      	ldr	r0, [r7, #8]
 800862a:	f001 f927 	bl	800987c <memcpy>
 800862e:	e2c3      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_AHRS_HELPER :						memcpy(str, TEXT_LENGTH_("CMD_AHRS_HELPER")); break;
 8008630:	220f      	movs	r2, #15
 8008632:	4963      	ldr	r1, [pc, #396]	; (80087c0 <ParserSBGC32_ConvertCommandID_ToString+0x754>)
 8008634:	68b8      	ldr	r0, [r7, #8]
 8008636:	f001 f921 	bl	800987c <memcpy>
 800863a:	e2bd      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_RUN_SCRIPT :						memcpy(str, TEXT_LENGTH_("CMD_RUN_SCRIPT")); break;
 800863c:	220e      	movs	r2, #14
 800863e:	4961      	ldr	r1, [pc, #388]	; (80087c4 <ParserSBGC32_ConvertCommandID_ToString+0x758>)
 8008640:	68b8      	ldr	r0, [r7, #8]
 8008642:	f001 f91b 	bl	800987c <memcpy>
 8008646:	e2b7      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SCRIPT_DEBUG :						memcpy(str, TEXT_LENGTH_("CMD_SCRIPT_DEBUG")); break;
 8008648:	2210      	movs	r2, #16
 800864a:	495f      	ldr	r1, [pc, #380]	; (80087c8 <ParserSBGC32_ConvertCommandID_ToString+0x75c>)
 800864c:	68b8      	ldr	r0, [r7, #8]
 800864e:	f001 f915 	bl	800987c <memcpy>
 8008652:	e2b1      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_MAG :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_MAG")); break;
 8008654:	220d      	movs	r2, #13
 8008656:	495d      	ldr	r1, [pc, #372]	; (80087cc <ParserSBGC32_ConvertCommandID_ToString+0x760>)
 8008658:	68b8      	ldr	r0, [r7, #8]
 800865a:	f001 f90f 	bl	800987c <memcpy>
 800865e:	e2ab      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_GET_ANGLES_EXT :					memcpy(str, TEXT_LENGTH_("CMD_GET_ANGLES_EXT")); break;
 8008660:	2212      	movs	r2, #18
 8008662:	495b      	ldr	r1, [pc, #364]	; (80087d0 <ParserSBGC32_ConvertCommandID_ToString+0x764>)
 8008664:	68b8      	ldr	r0, [r7, #8]
 8008666:	f001 f909 	bl	800987c <memcpy>
 800866a:	e2a5      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_PARAMS_EXT2 :					memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS_EXT2")); break;
 800866c:	2214      	movs	r2, #20
 800866e:	4959      	ldr	r1, [pc, #356]	; (80087d4 <ParserSBGC32_ConvertCommandID_ToString+0x768>)
 8008670:	68b8      	ldr	r0, [r7, #8]
 8008672:	f001 f903 	bl	800987c <memcpy>
 8008676:	e29f      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_PARAMS_EXT2 :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_EXT2")); break;
 8008678:	2215      	movs	r2, #21
 800867a:	4957      	ldr	r1, [pc, #348]	; (80087d8 <ParserSBGC32_ConvertCommandID_ToString+0x76c>)
 800867c:	68b8      	ldr	r0, [r7, #8]
 800867e:	f001 f8fd 	bl	800987c <memcpy>
 8008682:	e299      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_GET_ADJ_VARS_VAL :					memcpy(str, TEXT_LENGTH_("CMD_GET_ADJ_VARS_VAL")); break;
 8008684:	2214      	movs	r2, #20
 8008686:	4955      	ldr	r1, [pc, #340]	; (80087dc <ParserSBGC32_ConvertCommandID_ToString+0x770>)
 8008688:	68b8      	ldr	r0, [r7, #8]
 800868a:	f001 f8f7 	bl	800987c <memcpy>
 800868e:	e293      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_ACC :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_ACC")); break;
 8008690:	220d      	movs	r2, #13
 8008692:	4953      	ldr	r1, [pc, #332]	; (80087e0 <ParserSBGC32_ConvertCommandID_ToString+0x774>)
 8008694:	68b8      	ldr	r0, [r7, #8]
 8008696:	f001 f8f1 	bl	800987c <memcpy>
 800869a:	e28d      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_BAT :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_BAT")); break;
 800869c:	220d      	movs	r2, #13
 800869e:	4951      	ldr	r1, [pc, #324]	; (80087e4 <ParserSBGC32_ConvertCommandID_ToString+0x778>)
 80086a0:	68b8      	ldr	r0, [r7, #8]
 80086a2:	f001 f8eb 	bl	800987c <memcpy>
 80086a6:	e287      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case 67 :
			/* CMD_CONFIRM or CMD_CONTROL */
			if (serialCommand->parameters &
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	781b      	ldrb	r3, [r3, #0]
 80086ac:	b25b      	sxtb	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	da05      	bge.n	80086be <ParserSBGC32_ConvertCommandID_ToString+0x652>
				SCParam_RX)							memcpy(str, TEXT_LENGTH_("CMD_CONFIRM"));
 80086b2:	220b      	movs	r2, #11
 80086b4:	494c      	ldr	r1, [pc, #304]	; (80087e8 <ParserSBGC32_ConvertCommandID_ToString+0x77c>)
 80086b6:	68b8      	ldr	r0, [r7, #8]
 80086b8:	f001 f8e0 	bl	800987c <memcpy>
			else									memcpy(str, TEXT_LENGTH_("CMD_CONTROL"));
			break;
 80086bc:	e27c      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
			else									memcpy(str, TEXT_LENGTH_("CMD_CONTROL"));
 80086be:	220b      	movs	r2, #11
 80086c0:	494a      	ldr	r1, [pc, #296]	; (80087ec <ParserSBGC32_ConvertCommandID_ToString+0x780>)
 80086c2:	68b8      	ldr	r0, [r7, #8]
 80086c4:	f001 f8da 	bl	800987c <memcpy>
			break;
 80086c8:	e276      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_REALTIME_DATA :					memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA")); break;
 80086ca:	2211      	movs	r2, #17
 80086cc:	4948      	ldr	r1, [pc, #288]	; (80087f0 <ParserSBGC32_ConvertCommandID_ToString+0x784>)
 80086ce:	68b8      	ldr	r0, [r7, #8]
 80086d0:	f001 f8d4 	bl	800987c <memcpy>
 80086d4:	e270      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EXECUTE_MENU :						memcpy(str, TEXT_LENGTH_("CMD_EXECUTE_MENU")); break;
 80086d6:	2210      	movs	r2, #16
 80086d8:	4946      	ldr	r1, [pc, #280]	; (80087f4 <ParserSBGC32_ConvertCommandID_ToString+0x788>)
 80086da:	68b8      	ldr	r0, [r7, #8]
 80086dc:	f001 f8ce 	bl	800987c <memcpy>
 80086e0:	e26a      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_USE_DEFAULTS :						memcpy(str, TEXT_LENGTH_("CMD_USE_DEFAULTS")); break;
 80086e2:	2210      	movs	r2, #16
 80086e4:	4944      	ldr	r1, [pc, #272]	; (80087f8 <ParserSBGC32_ConvertCommandID_ToString+0x78c>)
 80086e6:	68b8      	ldr	r0, [r7, #8]
 80086e8:	f001 f8c8 	bl	800987c <memcpy>
 80086ec:	e264      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_EXT_GAIN :					memcpy(str, TEXT_LENGTH_("CMD_CALIB_EXT_GAIN")); break;
 80086ee:	2212      	movs	r2, #18
 80086f0:	4942      	ldr	r1, [pc, #264]	; (80087fc <ParserSBGC32_ConvertCommandID_ToString+0x790>)
 80086f2:	68b8      	ldr	r0, [r7, #8]
 80086f4:	f001 f8c2 	bl	800987c <memcpy>
 80086f8:	e25e      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_HELPER_DATA :						memcpy(str, TEXT_LENGTH_("CMD_HELPER_DATA")); break;
 80086fa:	220f      	movs	r2, #15
 80086fc:	4940      	ldr	r1, [pc, #256]	; (8008800 <ParserSBGC32_ConvertCommandID_ToString+0x794>)
 80086fe:	68b8      	ldr	r0, [r7, #8]
 8008700:	f001 f8bc 	bl	800987c <memcpy>
 8008704:	e258      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_GET_ANGLES :						memcpy(str, TEXT_LENGTH_("CMD_GET_ANGLES")); break;
 8008706:	220e      	movs	r2, #14
 8008708:	493e      	ldr	r1, [pc, #248]	; (8008804 <ParserSBGC32_ConvertCommandID_ToString+0x798>)
 800870a:	68b8      	ldr	r0, [r7, #8]
 800870c:	f001 f8b6 	bl	800987c <memcpy>
 8008710:	e252      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_MOTOR_MAG_LINK :				memcpy(str, TEXT_LENGTH_("CMD_CALIB_MOTOR_MAG_LINK")); break;
 8008712:	2218      	movs	r2, #24
 8008714:	493c      	ldr	r1, [pc, #240]	; (8008808 <ParserSBGC32_ConvertCommandID_ToString+0x79c>)
 8008716:	68b8      	ldr	r0, [r7, #8]
 8008718:	f001 f8b0 	bl	800987c <memcpy>
 800871c:	e24c      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_GYRO_CORRECTION :					memcpy(str, TEXT_LENGTH_("CMD_GYRO_CORRECTION")); break;
 800871e:	2213      	movs	r2, #19
 8008720:	493a      	ldr	r1, [pc, #232]	; (800880c <ParserSBGC32_ConvertCommandID_ToString+0x7a0>)
 8008722:	68b8      	ldr	r0, [r7, #8]
 8008724:	f001 f8aa 	bl	800987c <memcpy>
 8008728:	e246      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_MOTORS_ON :						memcpy(str, TEXT_LENGTH_("CMD_MOTORS_ON")); break;
 800872a:	220d      	movs	r2, #13
 800872c:	4938      	ldr	r1, [pc, #224]	; (8008810 <ParserSBGC32_ConvertCommandID_ToString+0x7a4>)
 800872e:	68b8      	ldr	r0, [r7, #8]
 8008730:	f001 f8a4 	bl	800987c <memcpy>
 8008734:	e240      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
 8008736:	bf00      	nop
 8008738:	0800e4b4 	.word	0x0800e4b4
 800873c:	0800e4c8 	.word	0x0800e4c8
 8008740:	0800e4dc 	.word	0x0800e4dc
 8008744:	0800e4f0 	.word	0x0800e4f0
 8008748:	0800e504 	.word	0x0800e504
 800874c:	0800e518 	.word	0x0800e518
 8008750:	0800e52c 	.word	0x0800e52c
 8008754:	0800e548 	.word	0x0800e548
 8008758:	0800e568 	.word	0x0800e568
 800875c:	0800e580 	.word	0x0800e580
 8008760:	0800e598 	.word	0x0800e598
 8008764:	0800e5b0 	.word	0x0800e5b0
 8008768:	0800e5c8 	.word	0x0800e5c8
 800876c:	0800e5dc 	.word	0x0800e5dc
 8008770:	0800e5f0 	.word	0x0800e5f0
 8008774:	0800e608 	.word	0x0800e608
 8008778:	0800e618 	.word	0x0800e618
 800877c:	0800e628 	.word	0x0800e628
 8008780:	0800e640 	.word	0x0800e640
 8008784:	0800e658 	.word	0x0800e658
 8008788:	0800e670 	.word	0x0800e670
 800878c:	0800e688 	.word	0x0800e688
 8008790:	0800e6a0 	.word	0x0800e6a0
 8008794:	0800e6b8 	.word	0x0800e6b8
 8008798:	0800e6d0 	.word	0x0800e6d0
 800879c:	0800e6e4 	.word	0x0800e6e4
 80087a0:	0800e6f8 	.word	0x0800e6f8
 80087a4:	0800e708 	.word	0x0800e708
 80087a8:	0800e718 	.word	0x0800e718
 80087ac:	0800e72c 	.word	0x0800e72c
 80087b0:	0800e73c 	.word	0x0800e73c
 80087b4:	0800e750 	.word	0x0800e750
 80087b8:	0800e760 	.word	0x0800e760
 80087bc:	0800e770 	.word	0x0800e770
 80087c0:	0800e784 	.word	0x0800e784
 80087c4:	0800e794 	.word	0x0800e794
 80087c8:	0800e7a4 	.word	0x0800e7a4
 80087cc:	0800e7b8 	.word	0x0800e7b8
 80087d0:	0800e7c8 	.word	0x0800e7c8
 80087d4:	0800e7dc 	.word	0x0800e7dc
 80087d8:	0800e7f4 	.word	0x0800e7f4
 80087dc:	0800e80c 	.word	0x0800e80c
 80087e0:	0800e824 	.word	0x0800e824
 80087e4:	0800e834 	.word	0x0800e834
 80087e8:	0800e844 	.word	0x0800e844
 80087ec:	0800e850 	.word	0x0800e850
 80087f0:	0800e85c 	.word	0x0800e85c
 80087f4:	0800e870 	.word	0x0800e870
 80087f8:	0800e884 	.word	0x0800e884
 80087fc:	0800e898 	.word	0x0800e898
 8008800:	0800e8ac 	.word	0x0800e8ac
 8008804:	0800e8bc 	.word	0x0800e8bc
 8008808:	0800e8cc 	.word	0x0800e8cc
 800880c:	0800e8e8 	.word	0x0800e8e8
 8008810:	0800e8fc 	.word	0x0800e8fc
		case CMD_CALIB_OFFSET :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_OFFSET")); break;
 8008814:	2210      	movs	r2, #16
 8008816:	49a7      	ldr	r1, [pc, #668]	; (8008ab4 <ParserSBGC32_ConvertCommandID_ToString+0xa48>)
 8008818:	68b8      	ldr	r0, [r7, #8]
 800881a:	f001 f82f 	bl	800987c <memcpy>
 800881e:	e1cb      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_POLES :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_POLES")); break;
 8008820:	220f      	movs	r2, #15
 8008822:	49a5      	ldr	r1, [pc, #660]	; (8008ab8 <ParserSBGC32_ConvertCommandID_ToString+0xa4c>)
 8008824:	68b8      	ldr	r0, [r7, #8]
 8008826:	f001 f829 	bl	800987c <memcpy>
 800882a:	e1c5      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_PARAMS :						memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS")); break;
 800882c:	220f      	movs	r2, #15
 800882e:	49a3      	ldr	r1, [pc, #652]	; (8008abc <ParserSBGC32_ConvertCommandID_ToString+0xa50>)
 8008830:	68b8      	ldr	r0, [r7, #8]
 8008832:	f001 f823 	bl	800987c <memcpy>
 8008836:	e1bf      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_TRIGGER_PIN :						memcpy(str, TEXT_LENGTH_("CMD_TRIGGER_PIN")); break;
 8008838:	220f      	movs	r2, #15
 800883a:	49a1      	ldr	r1, [pc, #644]	; (8008ac0 <ParserSBGC32_ConvertCommandID_ToString+0xa54>)
 800883c:	68b8      	ldr	r0, [r7, #8]
 800883e:	f001 f81d 	bl	800987c <memcpy>
 8008842:	e1b9      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_DATA_STREAM_INTERVAL :				memcpy(str, TEXT_LENGTH_("CMD_DATA_STREAM_INTERVAL")); break;
 8008844:	2218      	movs	r2, #24
 8008846:	499f      	ldr	r1, [pc, #636]	; (8008ac4 <ParserSBGC32_ConvertCommandID_ToString+0xa58>)
 8008848:	68b8      	ldr	r0, [r7, #8]
 800884a:	f001 f817 	bl	800987c <memcpy>
 800884e:	e1b3      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_BOARD_INFO :						memcpy(str, TEXT_LENGTH_("CMD_BOARD_INFO")); break;
 8008850:	220e      	movs	r2, #14
 8008852:	499d      	ldr	r1, [pc, #628]	; (8008ac8 <ParserSBGC32_ConvertCommandID_ToString+0xa5c>)
 8008854:	68b8      	ldr	r0, [r7, #8]
 8008856:	f001 f811 	bl	800987c <memcpy>
 800885a:	e1ad      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_PARAMS :						memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS")); break;
 800885c:	2210      	movs	r2, #16
 800885e:	499b      	ldr	r1, [pc, #620]	; (8008acc <ParserSBGC32_ConvertCommandID_ToString+0xa60>)
 8008860:	68b8      	ldr	r0, [r7, #8]
 8008862:	f001 f80b 	bl	800987c <memcpy>
 8008866:	e1a7      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_REALTIME_DATA_CUSTOM :				memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA_CUSTOM")); break;
 8008868:	2218      	movs	r2, #24
 800886a:	4999      	ldr	r1, [pc, #612]	; (8008ad0 <ParserSBGC32_ConvertCommandID_ToString+0xa64>)
 800886c:	68b8      	ldr	r0, [r7, #8]
 800886e:	f001 f805 	bl	800987c <memcpy>
 8008872:	e1a1      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_BEEP_SOUND :						memcpy(str, TEXT_LENGTH_("CMD_BEEP_SOUND")); break;
 8008874:	220e      	movs	r2, #14
 8008876:	4997      	ldr	r1, [pc, #604]	; (8008ad4 <ParserSBGC32_ConvertCommandID_ToString+0xa68>)
 8008878:	68b8      	ldr	r0, [r7, #8]
 800887a:	f000 ffff 	bl	800987c <memcpy>
 800887e:	e19b      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CONTROL_CONFIG :					memcpy(str, TEXT_LENGTH_("CMD_CONTROL_CONFIG")); break;
 8008880:	2212      	movs	r2, #18
 8008882:	4995      	ldr	r1, [pc, #596]	; (8008ad8 <ParserSBGC32_ConvertCommandID_ToString+0xa6c>)
 8008884:	68b8      	ldr	r0, [r7, #8]
 8008886:	f000 fff9 	bl	800987c <memcpy>
 800888a:	e195      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_ORIENT_CORR :				memcpy(str, TEXT_LENGTH_("CMD_CALIB_ORIENT_CORR")); break;
 800888c:	2215      	movs	r2, #21
 800888e:	4993      	ldr	r1, [pc, #588]	; (8008adc <ParserSBGC32_ConvertCommandID_ToString+0xa70>)
 8008890:	68b8      	ldr	r0, [r7, #8]
 8008892:	f000 fff3 	bl	800987c <memcpy>
 8008896:	e18f      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_COGGING_CALIB_INFO :				memcpy(str, TEXT_LENGTH_("CMD_COGGING_CALIB_INFO")); break;
 8008898:	2216      	movs	r2, #22
 800889a:	4991      	ldr	r1, [pc, #580]	; (8008ae0 <ParserSBGC32_ConvertCommandID_ToString+0xa74>)
 800889c:	68b8      	ldr	r0, [r7, #8]
 800889e:	f000 ffed 	bl	800987c <memcpy>
 80088a2:	e189      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_COGGING :					memcpy(str, TEXT_LENGTH_("CMD_CALIB_COGGING")); break;
 80088a4:	2211      	movs	r2, #17
 80088a6:	498f      	ldr	r1, [pc, #572]	; (8008ae4 <ParserSBGC32_ConvertCommandID_ToString+0xa78>)
 80088a8:	68b8      	ldr	r0, [r7, #8]
 80088aa:	f000 ffe7 	bl	800987c <memcpy>
 80088ae:	e183      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_ACC_EXT_REF :				memcpy(str, TEXT_LENGTH_("CMD_CALIB_ACC_EXT_REF")); break;
 80088b0:	2215      	movs	r2, #21
 80088b2:	498d      	ldr	r1, [pc, #564]	; (8008ae8 <ParserSBGC32_ConvertCommandID_ToString+0xa7c>)
 80088b4:	68b8      	ldr	r0, [r7, #8]
 80088b6:	f000 ffe1 	bl	800987c <memcpy>
 80088ba:	e17d      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_PROFILE_SET :						memcpy(str, TEXT_LENGTH_("CMD_PROFILE_SET")); break;
 80088bc:	220f      	movs	r2, #15
 80088be:	498b      	ldr	r1, [pc, #556]	; (8008aec <ParserSBGC32_ConvertCommandID_ToString+0xa80>)
 80088c0:	68b8      	ldr	r0, [r7, #8]
 80088c2:	f000 ffdb 	bl	800987c <memcpy>
 80088c6:	e177      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CAN_DEVICE_SCAN :					memcpy(str, TEXT_LENGTH_("CMD_CAN_DEVICE_SCAN")); break;
 80088c8:	2213      	movs	r2, #19
 80088ca:	4989      	ldr	r1, [pc, #548]	; (8008af0 <ParserSBGC32_ConvertCommandID_ToString+0xa84>)
 80088cc:	68b8      	ldr	r0, [r7, #8]
 80088ce:	f000 ffd5 	bl	800987c <memcpy>
 80088d2:	e171      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CAN_DRV_HARD_PARAMS :				memcpy(str, TEXT_LENGTH_("CMD_CAN_DRV_HARD_PARAMS")); break;
 80088d4:	2217      	movs	r2, #23
 80088d6:	4987      	ldr	r1, [pc, #540]	; (8008af4 <ParserSBGC32_ConvertCommandID_ToString+0xa88>)
 80088d8:	68b8      	ldr	r0, [r7, #8]
 80088da:	f000 ffcf 	bl	800987c <memcpy>
 80088de:	e16b      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CAN_DRV_STATE :					memcpy(str, TEXT_LENGTH_("CMD_CAN_DRV_STATE")); break;
 80088e0:	2211      	movs	r2, #17
 80088e2:	4985      	ldr	r1, [pc, #532]	; (8008af8 <ParserSBGC32_ConvertCommandID_ToString+0xa8c>)
 80088e4:	68b8      	ldr	r0, [r7, #8]
 80088e6:	f000 ffc9 	bl	800987c <memcpy>
 80088ea:	e165      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CAN_DRV_CALIBRATE :				memcpy(str, TEXT_LENGTH_("CMD_CAN_DRV_CALIBRATE")); break;
 80088ec:	2215      	movs	r2, #21
 80088ee:	4983      	ldr	r1, [pc, #524]	; (8008afc <ParserSBGC32_ConvertCommandID_ToString+0xa90>)
 80088f0:	68b8      	ldr	r0, [r7, #8]
 80088f2:	f000 ffc3 	bl	800987c <memcpy>
 80088f6:	e15f      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_RC_INPUTS :					memcpy(str, TEXT_LENGTH_("CMD_READ_RC_INPUTS")); break;
 80088f8:	2212      	movs	r2, #18
 80088fa:	4981      	ldr	r1, [pc, #516]	; (8008b00 <ParserSBGC32_ConvertCommandID_ToString+0xa94>)
 80088fc:	68b8      	ldr	r0, [r7, #8]
 80088fe:	f000 ffbd 	bl	800987c <memcpy>
 8008902:	e159      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_REALTIME_DATA_CAN_DRV :			memcpy(str, TEXT_LENGTH_("CMD_REALTIME_DATA_CAN_DRV")); break;
 8008904:	2219      	movs	r2, #25
 8008906:	497f      	ldr	r1, [pc, #508]	; (8008b04 <ParserSBGC32_ConvertCommandID_ToString+0xa98>)
 8008908:	68b8      	ldr	r0, [r7, #8]
 800890a:	f000 ffb7 	bl	800987c <memcpy>
 800890e:	e153      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EVENT :							memcpy(str, TEXT_LENGTH_("CMD_EVENT")); break;
 8008910:	2209      	movs	r2, #9
 8008912:	497d      	ldr	r1, [pc, #500]	; (8008b08 <ParserSBGC32_ConvertCommandID_ToString+0xa9c>)
 8008914:	68b8      	ldr	r0, [r7, #8]
 8008916:	f000 ffb1 	bl	800987c <memcpy>
 800891a:	e14d      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_GYRO :						memcpy(str, TEXT_LENGTH_("CMD_CALIB_GYRO")); break;
 800891c:	220e      	movs	r2, #14
 800891e:	497b      	ldr	r1, [pc, #492]	; (8008b0c <ParserSBGC32_ConvertCommandID_ToString+0xaa0>)
 8008920:	68b8      	ldr	r0, [r7, #8]
 8008922:	f000 ffab 	bl	800987c <memcpy>
 8008926:	e147      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_PARAMS_EXT3 :					memcpy(str, TEXT_LENGTH_("CMD_READ_PARAMS_EXT3")); break;
 8008928:	2214      	movs	r2, #20
 800892a:	4979      	ldr	r1, [pc, #484]	; (8008b10 <ParserSBGC32_ConvertCommandID_ToString+0xaa4>)
 800892c:	68b8      	ldr	r0, [r7, #8]
 800892e:	f000 ffa5 	bl	800987c <memcpy>
 8008932:	e141      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_PARAMS_EXT3 :				memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_EXT3")); break;
 8008934:	2215      	movs	r2, #21
 8008936:	4977      	ldr	r1, [pc, #476]	; (8008b14 <ParserSBGC32_ConvertCommandID_ToString+0xaa8>)
 8008938:	68b8      	ldr	r0, [r7, #8]
 800893a:	f000 ff9f 	bl	800987c <memcpy>
 800893e:	e13b      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EXT_IMU_DEBUG_INFO :				memcpy(str, TEXT_LENGTH_("CMD_EXT_IMU_DEBUG_INFO")); break;
 8008940:	2216      	movs	r2, #22
 8008942:	4975      	ldr	r1, [pc, #468]	; (8008b18 <ParserSBGC32_ConvertCommandID_ToString+0xaac>)
 8008944:	68b8      	ldr	r0, [r7, #8]
 8008946:	f000 ff99 	bl	800987c <memcpy>
 800894a:	e135      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SET_DEVICE_ADDR :					memcpy(str, TEXT_LENGTH_("CMD_SET_DEVICE_ADDR")); break;
 800894c:	2213      	movs	r2, #19
 800894e:	4973      	ldr	r1, [pc, #460]	; (8008b1c <ParserSBGC32_ConvertCommandID_ToString+0xab0>)
 8008950:	68b8      	ldr	r0, [r7, #8]
 8008952:	f000 ff93 	bl	800987c <memcpy>
 8008956:	e12f      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_AUTO_PID2 :						memcpy(str, TEXT_LENGTH_("CMD_AUTO_PID2")); break;
 8008958:	220d      	movs	r2, #13
 800895a:	4971      	ldr	r1, [pc, #452]	; (8008b20 <ParserSBGC32_ConvertCommandID_ToString+0xab4>)
 800895c:	68b8      	ldr	r0, [r7, #8]
 800895e:	f000 ff8d 	bl	800987c <memcpy>
 8008962:	e129      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_MOTORS_OFF :						memcpy(str, TEXT_LENGTH_("CMD_MOTORS_OFF")); break;
 8008964:	220e      	movs	r2, #14
 8008966:	496f      	ldr	r1, [pc, #444]	; (8008b24 <ParserSBGC32_ConvertCommandID_ToString+0xab8>)
 8008968:	68b8      	ldr	r0, [r7, #8]
 800896a:	f000 ff87 	bl	800987c <memcpy>
 800896e:	e123      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EXT_IMU_CMD :						memcpy(str, TEXT_LENGTH_("CMD_EXT_IMU_CMD")); break;
 8008970:	220f      	movs	r2, #15
 8008972:	496d      	ldr	r1, [pc, #436]	; (8008b28 <ParserSBGC32_ConvertCommandID_ToString+0xabc>)
 8008974:	68b8      	ldr	r0, [r7, #8]
 8008976:	f000 ff81 	bl	800987c <memcpy>
 800897a:	e11d      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_READ_STATE_VARS :					memcpy(str, TEXT_LENGTH_("CMD_READ_STATE_VARS")); break;
 800897c:	2213      	movs	r2, #19
 800897e:	496b      	ldr	r1, [pc, #428]	; (8008b2c <ParserSBGC32_ConvertCommandID_ToString+0xac0>)
 8008980:	68b8      	ldr	r0, [r7, #8]
 8008982:	f000 ff7b 	bl	800987c <memcpy>
 8008986:	e117      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_STATE_VARS :					memcpy(str, TEXT_LENGTH_("CMD_WRITE_STATE_VARS")); break;
 8008988:	2214      	movs	r2, #20
 800898a:	4969      	ldr	r1, [pc, #420]	; (8008b30 <ParserSBGC32_ConvertCommandID_ToString+0xac4>)
 800898c:	68b8      	ldr	r0, [r7, #8]
 800898e:	f000 ff75 	bl	800987c <memcpy>
 8008992:	e111      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SERIAL_PROXY :						memcpy(str, TEXT_LENGTH_("CMD_SERIAL_PROXY")); break;
 8008994:	2210      	movs	r2, #16
 8008996:	4967      	ldr	r1, [pc, #412]	; (8008b34 <ParserSBGC32_ConvertCommandID_ToString+0xac8>)
 8008998:	68b8      	ldr	r0, [r7, #8]
 800899a:	f000 ff6f 	bl	800987c <memcpy>
 800899e:	e10b      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_RESET :							memcpy(str, TEXT_LENGTH_("CMD_RESET")); break;
 80089a0:	2209      	movs	r2, #9
 80089a2:	4965      	ldr	r1, [pc, #404]	; (8008b38 <ParserSBGC32_ConvertCommandID_ToString+0xacc>)
 80089a4:	68b8      	ldr	r0, [r7, #8]
 80089a6:	f000 ff69 	bl	800987c <memcpy>
 80089aa:	e105      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_IMU_ADVANCED_CALIB :				memcpy(str, TEXT_LENGTH_("CMD_IMU_ADVANCED_CALIB")); break;
 80089ac:	2216      	movs	r2, #22
 80089ae:	4963      	ldr	r1, [pc, #396]	; (8008b3c <ParserSBGC32_ConvertCommandID_ToString+0xad0>)
 80089b0:	68b8      	ldr	r0, [r7, #8]
 80089b2:	f000 ff63 	bl	800987c <memcpy>
 80089b6:	e0ff      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_API_VIRT_CH_HIGH_RES :				memcpy(str, TEXT_LENGTH_("CMD_API_VIRT_CH_HIGH_RES")); break;
 80089b8:	2218      	movs	r2, #24
 80089ba:	4961      	ldr	r1, [pc, #388]	; (8008b40 <ParserSBGC32_ConvertCommandID_ToString+0xad4>)
 80089bc:	68b8      	ldr	r0, [r7, #8]
 80089be:	f000 ff5d 	bl	800987c <memcpy>
 80089c2:	e0f9      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_ENCODER_LUT :				memcpy(str, TEXT_LENGTH_("CMD_CALIB_ENCODER_LUT")); break;
 80089c4:	2215      	movs	r2, #21
 80089c6:	495f      	ldr	r1, [pc, #380]	; (8008b44 <ParserSBGC32_ConvertCommandID_ToString+0xad8>)
 80089c8:	68b8      	ldr	r0, [r7, #8]
 80089ca:	f000 ff57 	bl	800987c <memcpy>
 80089ce:	e0f3      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_ENCODER_LUT_RES :			memcpy(str, TEXT_LENGTH_("CMD_CALIB_ENCODER_LUT_RES")); break;
 80089d0:	2219      	movs	r2, #25
 80089d2:	495d      	ldr	r1, [pc, #372]	; (8008b48 <ParserSBGC32_ConvertCommandID_ToString+0xadc>)
 80089d4:	68b8      	ldr	r0, [r7, #8]
 80089d6:	f000 ff51 	bl	800987c <memcpy>
 80089da:	e0ed      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_WRITE_PARAMS_SET :					memcpy(str, TEXT_LENGTH_("CMD_WRITE_PARAMS_SET")); break;
 80089dc:	2214      	movs	r2, #20
 80089de:	495b      	ldr	r1, [pc, #364]	; (8008b4c <ParserSBGC32_ConvertCommandID_ToString+0xae0>)
 80089e0:	68b8      	ldr	r0, [r7, #8]
 80089e2:	f000 ff4b 	bl	800987c <memcpy>
 80089e6:	e0e7      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CALIB_CUR_SENS :					memcpy(str, TEXT_LENGTH_("CMD_CALIB_CUR_SENS")); break;
 80089e8:	2212      	movs	r2, #18
 80089ea:	4959      	ldr	r1, [pc, #356]	; (8008b50 <ParserSBGC32_ConvertCommandID_ToString+0xae4>)
 80089ec:	68b8      	ldr	r0, [r7, #8]
 80089ee:	f000 ff45 	bl	800987c <memcpy>
 80089f2:	e0e1      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CONTROL_EXT :						memcpy(str, TEXT_LENGTH_("CMD_CONTROL_EXT")); break;
 80089f4:	220f      	movs	r2, #15
 80089f6:	4957      	ldr	r1, [pc, #348]	; (8008b54 <ParserSBGC32_ConvertCommandID_ToString+0xae8>)
 80089f8:	68b8      	ldr	r0, [r7, #8]
 80089fa:	f000 ff3f 	bl	800987c <memcpy>
 80089fe:	e0db      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SYNC_MOTORS :						memcpy(str, TEXT_LENGTH_("CMD_SYNC_MOTORS")); break;
 8008a00:	220f      	movs	r2, #15
 8008a02:	4955      	ldr	r1, [pc, #340]	; (8008b58 <ParserSBGC32_ConvertCommandID_ToString+0xaec>)
 8008a04:	68b8      	ldr	r0, [r7, #8]
 8008a06:	f000 ff39 	bl	800987c <memcpy>
 8008a0a:	e0d5      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CAN_DRV_TELEMETRY :				memcpy(str, TEXT_LENGTH_("CMD_CAN_DRV_TELEMETRY")); break;
 8008a0c:	2215      	movs	r2, #21
 8008a0e:	4953      	ldr	r1, [pc, #332]	; (8008b5c <ParserSBGC32_ConvertCommandID_ToString+0xaf0>)
 8008a10:	68b8      	ldr	r0, [r7, #8]
 8008a12:	f000 ff33 	bl	800987c <memcpy>
 8008a16:	e0cf      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EXT_MOTORS_ACTION :				memcpy(str, TEXT_LENGTH_("CMD_EXT_MOTORS_ACTION")); break;
 8008a18:	2215      	movs	r2, #21
 8008a1a:	4951      	ldr	r1, [pc, #324]	; (8008b60 <ParserSBGC32_ConvertCommandID_ToString+0xaf4>)
 8008a1c:	68b8      	ldr	r0, [r7, #8]
 8008a1e:	f000 ff2d 	bl	800987c <memcpy>
 8008a22:	e0c9      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EXT_MOTORS_CONTROL :				memcpy(str, TEXT_LENGTH_("CMD_EXT_MOTORS_CONTROL")); break;
 8008a24:	2216      	movs	r2, #22
 8008a26:	494f      	ldr	r1, [pc, #316]	; (8008b64 <ParserSBGC32_ConvertCommandID_ToString+0xaf8>)
 8008a28:	68b8      	ldr	r0, [r7, #8]
 8008a2a:	f000 ff27 	bl	800987c <memcpy>
 8008a2e:	e0c3      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EXT_MOTORS_CONTROL_CONFIG :		memcpy(str, TEXT_LENGTH_("CMD_EXT_MOTORS_CONTROL_CONFIG")); break;
 8008a30:	221d      	movs	r2, #29
 8008a32:	494d      	ldr	r1, [pc, #308]	; (8008b68 <ParserSBGC32_ConvertCommandID_ToString+0xafc>)
 8008a34:	68b8      	ldr	r0, [r7, #8]
 8008a36:	f000 ff21 	bl	800987c <memcpy>
 8008a3a:	e0bd      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EXT_MOTORS_STATE :					memcpy(str, TEXT_LENGTH_("CMD_EXT_MOTORS_STATE")); break;
 8008a3c:	2214      	movs	r2, #20
 8008a3e:	494b      	ldr	r1, [pc, #300]	; (8008b6c <ParserSBGC32_ConvertCommandID_ToString+0xb00>)
 8008a40:	68b8      	ldr	r0, [r7, #8]
 8008a42:	f000 ff1b 	bl	800987c <memcpy>
 8008a46:	e0b7      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_ADJ_VARS_INFO :					memcpy(str, TEXT_LENGTH_("CMD_ADJ_VARS_INFO")); break;
 8008a48:	2211      	movs	r2, #17
 8008a4a:	4949      	ldr	r1, [pc, #292]	; (8008b70 <ParserSBGC32_ConvertCommandID_ToString+0xb04>)
 8008a4c:	68b8      	ldr	r0, [r7, #8]
 8008a4e:	f000 ff15 	bl	800987c <memcpy>
 8008a52:	e0b1      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CONTROL_QUAT :						memcpy(str, TEXT_LENGTH_("CMD_CONTROL_QUAT")); break;
 8008a54:	2210      	movs	r2, #16
 8008a56:	4947      	ldr	r1, [pc, #284]	; (8008b74 <ParserSBGC32_ConvertCommandID_ToString+0xb08>)
 8008a58:	68b8      	ldr	r0, [r7, #8]
 8008a5a:	f000 ff0f 	bl	800987c <memcpy>
 8008a5e:	e0ab      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CONTROL_QUAT_STATUS :				memcpy(str, TEXT_LENGTH_("CMD_CONTROL_QUAT_STATUS")); break;
 8008a60:	2217      	movs	r2, #23
 8008a62:	4945      	ldr	r1, [pc, #276]	; (8008b78 <ParserSBGC32_ConvertCommandID_ToString+0xb0c>)
 8008a64:	68b8      	ldr	r0, [r7, #8]
 8008a66:	f000 ff09 	bl	800987c <memcpy>
 8008a6a:	e0a5      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_CONTROL_QUAT_CONFIG :				memcpy(str, TEXT_LENGTH_("CMD_CONTROL_QUAT_CONFIG")); break;
 8008a6c:	2217      	movs	r2, #23
 8008a6e:	4943      	ldr	r1, [pc, #268]	; (8008b7c <ParserSBGC32_ConvertCommandID_ToString+0xb10>)
 8008a70:	68b8      	ldr	r0, [r7, #8]
 8008a72:	f000 ff03 	bl	800987c <memcpy>
 8008a76:	e09f      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_EXT_SENS_CMD :						memcpy(str, TEXT_LENGTH_("CMD_EXT_SENS_CMD")); break;
 8008a78:	2210      	movs	r2, #16
 8008a7a:	4941      	ldr	r1, [pc, #260]	; (8008b80 <ParserSBGC32_ConvertCommandID_ToString+0xb14>)
 8008a7c:	68b8      	ldr	r0, [r7, #8]
 8008a7e:	f000 fefd 	bl	800987c <memcpy>
 8008a82:	e099      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_TRANSPARENT_SAPI :					memcpy(str, TEXT_LENGTH_("CMD_TRANSPARENT_SAPI")); break;
 8008a84:	2214      	movs	r2, #20
 8008a86:	493f      	ldr	r1, [pc, #252]	; (8008b84 <ParserSBGC32_ConvertCommandID_ToString+0xb18>)
 8008a88:	68b8      	ldr	r0, [r7, #8]
 8008a8a:	f000 fef7 	bl	800987c <memcpy>
 8008a8e:	e093      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_SET_DEBUG_PORT :					memcpy(str, TEXT_LENGTH_("CMD_SET_DEBUG_PORT")); break;
 8008a90:	2212      	movs	r2, #18
 8008a92:	493d      	ldr	r1, [pc, #244]	; (8008b88 <ParserSBGC32_ConvertCommandID_ToString+0xb1c>)
 8008a94:	68b8      	ldr	r0, [r7, #8]
 8008a96:	f000 fef1 	bl	800987c <memcpy>
 8008a9a:	e08d      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_MAVLINK_INFO :						memcpy(str, TEXT_LENGTH_("CMD_MAVLINK_INFO")); break;
 8008a9c:	2210      	movs	r2, #16
 8008a9e:	493b      	ldr	r1, [pc, #236]	; (8008b8c <ParserSBGC32_ConvertCommandID_ToString+0xb20>)
 8008aa0:	68b8      	ldr	r0, [r7, #8]
 8008aa2:	f000 feeb 	bl	800987c <memcpy>
 8008aa6:	e087      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_MAVLINK_DEBUG :					memcpy(str, TEXT_LENGTH_("CMD_MAVLINK_DEBUG")); break;
 8008aa8:	2211      	movs	r2, #17
 8008aaa:	4939      	ldr	r1, [pc, #228]	; (8008b90 <ParserSBGC32_ConvertCommandID_ToString+0xb24>)
 8008aac:	68b8      	ldr	r0, [r7, #8]
 8008aae:	f000 fee5 	bl	800987c <memcpy>
 8008ab2:	e081      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
 8008ab4:	0800e90c 	.word	0x0800e90c
 8008ab8:	0800e920 	.word	0x0800e920
 8008abc:	0800e930 	.word	0x0800e930
 8008ac0:	0800e940 	.word	0x0800e940
 8008ac4:	0800e950 	.word	0x0800e950
 8008ac8:	0800e96c 	.word	0x0800e96c
 8008acc:	0800e97c 	.word	0x0800e97c
 8008ad0:	0800e990 	.word	0x0800e990
 8008ad4:	0800e9ac 	.word	0x0800e9ac
 8008ad8:	0800e9bc 	.word	0x0800e9bc
 8008adc:	0800e9d0 	.word	0x0800e9d0
 8008ae0:	0800e9e8 	.word	0x0800e9e8
 8008ae4:	0800ea00 	.word	0x0800ea00
 8008ae8:	0800ea14 	.word	0x0800ea14
 8008aec:	0800ea2c 	.word	0x0800ea2c
 8008af0:	0800ea3c 	.word	0x0800ea3c
 8008af4:	0800ea50 	.word	0x0800ea50
 8008af8:	0800ea68 	.word	0x0800ea68
 8008afc:	0800ea7c 	.word	0x0800ea7c
 8008b00:	0800ea94 	.word	0x0800ea94
 8008b04:	0800eaa8 	.word	0x0800eaa8
 8008b08:	0800eac4 	.word	0x0800eac4
 8008b0c:	0800ead0 	.word	0x0800ead0
 8008b10:	0800eae0 	.word	0x0800eae0
 8008b14:	0800eaf8 	.word	0x0800eaf8
 8008b18:	0800eb10 	.word	0x0800eb10
 8008b1c:	0800eb28 	.word	0x0800eb28
 8008b20:	0800eb3c 	.word	0x0800eb3c
 8008b24:	0800eb4c 	.word	0x0800eb4c
 8008b28:	0800eb5c 	.word	0x0800eb5c
 8008b2c:	0800eb6c 	.word	0x0800eb6c
 8008b30:	0800eb80 	.word	0x0800eb80
 8008b34:	0800eb98 	.word	0x0800eb98
 8008b38:	0800ebac 	.word	0x0800ebac
 8008b3c:	0800ebb8 	.word	0x0800ebb8
 8008b40:	0800ebd0 	.word	0x0800ebd0
 8008b44:	0800ebec 	.word	0x0800ebec
 8008b48:	0800ec04 	.word	0x0800ec04
 8008b4c:	0800ec20 	.word	0x0800ec20
 8008b50:	0800ec38 	.word	0x0800ec38
 8008b54:	0800ec4c 	.word	0x0800ec4c
 8008b58:	0800ec5c 	.word	0x0800ec5c
 8008b5c:	0800ec6c 	.word	0x0800ec6c
 8008b60:	0800ec84 	.word	0x0800ec84
 8008b64:	0800ec9c 	.word	0x0800ec9c
 8008b68:	0800ecb4 	.word	0x0800ecb4
 8008b6c:	0800ecd4 	.word	0x0800ecd4
 8008b70:	0800ecec 	.word	0x0800ecec
 8008b74:	0800ed00 	.word	0x0800ed00
 8008b78:	0800ed14 	.word	0x0800ed14
 8008b7c:	0800ed2c 	.word	0x0800ed2c
 8008b80:	0800ed44 	.word	0x0800ed44
 8008b84:	0800ed58 	.word	0x0800ed58
 8008b88:	0800ed70 	.word	0x0800ed70
 8008b8c:	0800ed84 	.word	0x0800ed84
 8008b90:	0800ed98 	.word	0x0800ed98
		case CMD_DEBUG_VARS_INFO_3 :				memcpy(str, TEXT_LENGTH_("CMD_DEBUG_VARS_INFO_3")); break;
 8008b94:	2215      	movs	r2, #21
 8008b96:	490d      	ldr	r1, [pc, #52]	; (8008bcc <ParserSBGC32_ConvertCommandID_ToString+0xb60>)
 8008b98:	68b8      	ldr	r0, [r7, #8]
 8008b9a:	f000 fe6f 	bl	800987c <memcpy>
 8008b9e:	e00b      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_DEBUG_VARS_3 :						memcpy(str, TEXT_LENGTH_("CMD_DEBUG_VARS_3")); break;
 8008ba0:	2210      	movs	r2, #16
 8008ba2:	490b      	ldr	r1, [pc, #44]	; (8008bd0 <ParserSBGC32_ConvertCommandID_ToString+0xb64>)
 8008ba4:	68b8      	ldr	r0, [r7, #8]
 8008ba6:	f000 fe69 	bl	800987c <memcpy>
 8008baa:	e005      	b.n	8008bb8 <ParserSBGC32_ConvertCommandID_ToString+0xb4c>
		case CMD_ERROR :							memcpy(str, TEXT_LENGTH_("CMD_ERROR")); break;
 8008bac:	2209      	movs	r2, #9
 8008bae:	4909      	ldr	r1, [pc, #36]	; (8008bd4 <ParserSBGC32_ConvertCommandID_ToString+0xb68>)
 8008bb0:	68b8      	ldr	r0, [r7, #8]
 8008bb2:	f000 fe63 	bl	800987c <memcpy>
 8008bb6:	bf00      	nop
	}

	return strlen(str);
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	f7f7 fb41 	bl	8000240 <strlen>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	b2db      	uxtb	r3, r3
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	0800edac 	.word	0x0800edac
 8008bd0:	0800edc4 	.word	0x0800edc4
 8008bd4:	0800edd8 	.word	0x0800edd8

08008bd8 <ParserSBGC32_ConvertCommandStatusToString>:
 *	@param	size - buffer size
 *
 *	@return	Length of a writable string
 */
ui8 ParserSBGC32_ConvertCommandStatusToString (serialAPI_Command_t *serialCommand, char *str, ui8 size)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	4613      	mov	r3, r2
 8008be4:	71fb      	strb	r3, [r7, #7]
	if (size < SBGC_CMD_STATUS_NAME_MAX_LEN) return 0;
 8008be6:	79fb      	ldrb	r3, [r7, #7]
 8008be8:	2b09      	cmp	r3, #9
 8008bea:	d801      	bhi.n	8008bf0 <ParserSBGC32_ConvertCommandStatusToString+0x18>
 8008bec:	2300      	movs	r3, #0
 8008bee:	e04b      	b.n	8008c88 <ParserSBGC32_ConvertCommandStatusToString+0xb0>

	switch (serialCommand->_state)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8008bf6:	2b06      	cmp	r3, #6
 8008bf8:	dc14      	bgt.n	8008c24 <ParserSBGC32_ConvertCommandStatusToString+0x4c>
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	dd3f      	ble.n	8008c7e <ParserSBGC32_ConvertCommandStatusToString+0xa6>
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	2b05      	cmp	r3, #5
 8008c02:	d83c      	bhi.n	8008c7e <ParserSBGC32_ConvertCommandStatusToString+0xa6>
 8008c04:	a201      	add	r2, pc, #4	; (adr r2, 8008c0c <ParserSBGC32_ConvertCommandStatusToString+0x34>)
 8008c06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c0a:	bf00      	nop
 8008c0c:	08008c2b 	.word	0x08008c2b
 8008c10:	08008c43 	.word	0x08008c43
 8008c14:	08008c4f 	.word	0x08008c4f
 8008c18:	08008c5b 	.word	0x08008c5b
 8008c1c:	08008c37 	.word	0x08008c37
 8008c20:	08008c67 	.word	0x08008c67
 8008c24:	2bff      	cmp	r3, #255	; 0xff
 8008c26:	d024      	beq.n	8008c72 <ParserSBGC32_ConvertCommandStatusToString+0x9a>
 8008c28:	e029      	b.n	8008c7e <ParserSBGC32_ConvertCommandStatusToString+0xa6>
	{
		case SCState_FORMING :						memcpy(str, TEXT_LENGTH_("FORMING")); break;
 8008c2a:	2207      	movs	r2, #7
 8008c2c:	4918      	ldr	r1, [pc, #96]	; (8008c90 <ParserSBGC32_ConvertCommandStatusToString+0xb8>)
 8008c2e:	68b8      	ldr	r0, [r7, #8]
 8008c30:	f000 fe24 	bl	800987c <memcpy>
 8008c34:	e023      	b.n	8008c7e <ParserSBGC32_ConvertCommandStatusToString+0xa6>
		case SCState_ABORTED :						memcpy(str, TEXT_LENGTH_("ABORTED")); break;
 8008c36:	2207      	movs	r2, #7
 8008c38:	4916      	ldr	r1, [pc, #88]	; (8008c94 <ParserSBGC32_ConvertCommandStatusToString+0xbc>)
 8008c3a:	68b8      	ldr	r0, [r7, #8]
 8008c3c:	f000 fe1e 	bl	800987c <memcpy>
 8008c40:	e01d      	b.n	8008c7e <ParserSBGC32_ConvertCommandStatusToString+0xa6>
		case SCState_PREPARED :						memcpy(str, TEXT_LENGTH_("PREPARED")); break;
 8008c42:	2208      	movs	r2, #8
 8008c44:	4914      	ldr	r1, [pc, #80]	; (8008c98 <ParserSBGC32_ConvertCommandStatusToString+0xc0>)
 8008c46:	68b8      	ldr	r0, [r7, #8]
 8008c48:	f000 fe18 	bl	800987c <memcpy>
 8008c4c:	e017      	b.n	8008c7e <ParserSBGC32_ConvertCommandStatusToString+0xa6>
		case SCState_PROCESSING :					memcpy(str, TEXT_LENGTH_("PROCESSING")); break;
 8008c4e:	220a      	movs	r2, #10
 8008c50:	4912      	ldr	r1, [pc, #72]	; (8008c9c <ParserSBGC32_ConvertCommandStatusToString+0xc4>)
 8008c52:	68b8      	ldr	r0, [r7, #8]
 8008c54:	f000 fe12 	bl	800987c <memcpy>
 8008c58:	e011      	b.n	8008c7e <ParserSBGC32_ConvertCommandStatusToString+0xa6>
		case SCState_RELOAD :						memcpy(str, TEXT_LENGTH_("RELOAD")); break;
 8008c5a:	2206      	movs	r2, #6
 8008c5c:	4910      	ldr	r1, [pc, #64]	; (8008ca0 <ParserSBGC32_ConvertCommandStatusToString+0xc8>)
 8008c5e:	68b8      	ldr	r0, [r7, #8]
 8008c60:	f000 fe0c 	bl	800987c <memcpy>
 8008c64:	e00b      	b.n	8008c7e <ParserSBGC32_ConvertCommandStatusToString+0xa6>
		case SCState_ERROR :						memcpy(str, TEXT_LENGTH_("ERROR")); break;
 8008c66:	2205      	movs	r2, #5
 8008c68:	490e      	ldr	r1, [pc, #56]	; (8008ca4 <ParserSBGC32_ConvertCommandStatusToString+0xcc>)
 8008c6a:	68b8      	ldr	r0, [r7, #8]
 8008c6c:	f000 fe06 	bl	800987c <memcpy>
 8008c70:	e005      	b.n	8008c7e <ParserSBGC32_ConvertCommandStatusToString+0xa6>
		case SCState_PROCESSED :					memcpy(str, TEXT_LENGTH_("PROCESSED")); break;
 8008c72:	2209      	movs	r2, #9
 8008c74:	490c      	ldr	r1, [pc, #48]	; (8008ca8 <ParserSBGC32_ConvertCommandStatusToString+0xd0>)
 8008c76:	68b8      	ldr	r0, [r7, #8]
 8008c78:	f000 fe00 	bl	800987c <memcpy>
 8008c7c:	bf00      	nop
	}

	return strlen(str);
 8008c7e:	68b8      	ldr	r0, [r7, #8]
 8008c80:	f7f7 fade 	bl	8000240 <strlen>
 8008c84:	4603      	mov	r3, r0
 8008c86:	b2db      	uxtb	r3, r3
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	0800ede4 	.word	0x0800ede4
 8008c94:	0800edec 	.word	0x0800edec
 8008c98:	0800edf4 	.word	0x0800edf4
 8008c9c:	0800ee00 	.word	0x0800ee00
 8008ca0:	0800ee0c 	.word	0x0800ee0c
 8008ca4:	0800ee14 	.word	0x0800ee14
 8008ca8:	0800ee1c 	.word	0x0800ee1c

08008cac <ParserSBGC32_FormatBoardVersion>:
 *	@param	boardVer - sbgcBoardInfo_t.boardVer
 *	@param	*pBuff - buffer to write
 *	@param	size - buffer size
 */
void ParserSBGC32_FormatBoardVersion (sbgcGeneral_t *gSBGC, ui8 boardVer, char *pBuff, ui8 size)
{
 8008cac:	b590      	push	{r4, r7, lr}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	460b      	mov	r3, r1
 8008cba:	72fb      	strb	r3, [r7, #11]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	72bb      	strb	r3, [r7, #10]
	if ((!pBuff) || (size < SBGC_BOARD_VERSION_MAX_LEN)) return;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d01c      	beq.n	8008d00 <ParserSBGC32_FormatBoardVersion+0x54>
 8008cc6:	7abb      	ldrb	r3, [r7, #10]
 8008cc8:	2b04      	cmp	r3, #4
 8008cca:	d919      	bls.n	8008d00 <ParserSBGC32_FormatBoardVersion+0x54>

	ui8 majorVer = boardVer / 10;
 8008ccc:	7afb      	ldrb	r3, [r7, #11]
 8008cce:	4a0e      	ldr	r2, [pc, #56]	; (8008d08 <ParserSBGC32_FormatBoardVersion+0x5c>)
 8008cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd4:	08db      	lsrs	r3, r3, #3
 8008cd6:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = boardVer % 10;
 8008cd8:	7afa      	ldrb	r2, [r7, #11]
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <ParserSBGC32_FormatBoardVersion+0x5c>)
 8008cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8008ce0:	08d9      	lsrs	r1, r3, #3
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	009b      	lsls	r3, r3, #2
 8008ce6:	440b      	add	r3, r1
 8008ce8:	005b      	lsls	r3, r3, #1
 8008cea:	1ad3      	subs	r3, r2, r3
 8008cec:	75bb      	strb	r3, [r7, #22]
	gSBGC->_ll->debugSprintf(pBuff, "%u.%u", majorVer, minorVer);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	699c      	ldr	r4, [r3, #24]
 8008cf4:	7dfa      	ldrb	r2, [r7, #23]
 8008cf6:	7dbb      	ldrb	r3, [r7, #22]
 8008cf8:	4904      	ldr	r1, [pc, #16]	; (8008d0c <ParserSBGC32_FormatBoardVersion+0x60>)
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	47a0      	blx	r4
 8008cfe:	e000      	b.n	8008d02 <ParserSBGC32_FormatBoardVersion+0x56>
	if ((!pBuff) || (size < SBGC_BOARD_VERSION_MAX_LEN)) return;
 8008d00:	bf00      	nop
}
 8008d02:	371c      	adds	r7, #28
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd90      	pop	{r4, r7, pc}
 8008d08:	cccccccd 	.word	0xcccccccd
 8008d0c:	0800ee28 	.word	0x0800ee28

08008d10 <ParserSBGC32_FormatFirmwareVersion>:
 *	@param	firmwareVer - sbgcBoardInfo_t.firmwareVer
 *	@param	*pBuff - buffer to write
 *	@param	size - buffer size
 */
void ParserSBGC32_FormatFirmwareVersion (sbgcGeneral_t *gSBGC, ui16 firmwareVer, char *pBuff, ui8 size)
{
 8008d10:	b590      	push	{r4, r7, lr}
 8008d12:	b089      	sub	sp, #36	; 0x24
 8008d14:	af02      	add	r7, sp, #8
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	607a      	str	r2, [r7, #4]
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	460b      	mov	r3, r1
 8008d1e:	817b      	strh	r3, [r7, #10]
 8008d20:	4613      	mov	r3, r2
 8008d22:	727b      	strb	r3, [r7, #9]
	if ((!pBuff) || (size < SBGC_FIRMWARE_VERSION_MAX_LEN)) return;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d057      	beq.n	8008dda <ParserSBGC32_FormatFirmwareVersion+0xca>
 8008d2a:	7a7b      	ldrb	r3, [r7, #9]
 8008d2c:	2b07      	cmp	r3, #7
 8008d2e:	d954      	bls.n	8008dda <ParserSBGC32_FormatFirmwareVersion+0xca>

	ui8 majorVer = firmwareVer / 1000;
 8008d30:	897b      	ldrh	r3, [r7, #10]
 8008d32:	4a2c      	ldr	r2, [pc, #176]	; (8008de4 <ParserSBGC32_FormatFirmwareVersion+0xd4>)
 8008d34:	fba2 2303 	umull	r2, r3, r2, r3
 8008d38:	099b      	lsrs	r3, r3, #6
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	75fb      	strb	r3, [r7, #23]
	ui8 minorVer = (firmwareVer % 1000) / 10;
 8008d3e:	897b      	ldrh	r3, [r7, #10]
 8008d40:	4a28      	ldr	r2, [pc, #160]	; (8008de4 <ParserSBGC32_FormatFirmwareVersion+0xd4>)
 8008d42:	fba2 1203 	umull	r1, r2, r2, r3
 8008d46:	0992      	lsrs	r2, r2, #6
 8008d48:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d4c:	fb01 f202 	mul.w	r2, r1, r2
 8008d50:	1a9b      	subs	r3, r3, r2
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	4a24      	ldr	r2, [pc, #144]	; (8008de8 <ParserSBGC32_FormatFirmwareVersion+0xd8>)
 8008d56:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5a:	08db      	lsrs	r3, r3, #3
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	75bb      	strb	r3, [r7, #22]
	ui8 betaVer = firmwareVer % 10;
 8008d60:	897a      	ldrh	r2, [r7, #10]
 8008d62:	4b21      	ldr	r3, [pc, #132]	; (8008de8 <ParserSBGC32_FormatFirmwareVersion+0xd8>)
 8008d64:	fba3 1302 	umull	r1, r3, r3, r2
 8008d68:	08d9      	lsrs	r1, r3, #3
 8008d6a:	460b      	mov	r3, r1
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	440b      	add	r3, r1
 8008d70:	005b      	lsls	r3, r3, #1
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	b29b      	uxth	r3, r3
 8008d76:	757b      	strb	r3, [r7, #21]

	if (betaVer && (firmwareVer < 2730))
 8008d78:	7d7b      	ldrb	r3, [r7, #21]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d010      	beq.n	8008da0 <ParserSBGC32_FormatFirmwareVersion+0x90>
 8008d7e:	897b      	ldrh	r3, [r7, #10]
 8008d80:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d80b      	bhi.n	8008da0 <ParserSBGC32_FormatFirmwareVersion+0x90>
		gSBGC->_ll->debugSprintf(pBuff, "%u.%ub%u", majorVer, minorVer, betaVer);
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	699c      	ldr	r4, [r3, #24]
 8008d8e:	7dfa      	ldrb	r2, [r7, #23]
 8008d90:	7db9      	ldrb	r1, [r7, #22]
 8008d92:	7d7b      	ldrb	r3, [r7, #21]
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	460b      	mov	r3, r1
 8008d98:	4914      	ldr	r1, [pc, #80]	; (8008dec <ParserSBGC32_FormatFirmwareVersion+0xdc>)
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	47a0      	blx	r4
 8008d9e:	e01d      	b.n	8008ddc <ParserSBGC32_FormatFirmwareVersion+0xcc>

	else if (betaVer && (firmwareVer >= 2730))
 8008da0:	7d7b      	ldrb	r3, [r7, #21]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d010      	beq.n	8008dc8 <ParserSBGC32_FormatFirmwareVersion+0xb8>
 8008da6:	897b      	ldrh	r3, [r7, #10]
 8008da8:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d90b      	bls.n	8008dc8 <ParserSBGC32_FormatFirmwareVersion+0xb8>
		gSBGC->_ll->debugSprintf(pBuff, "%u.%u.%u", majorVer, minorVer, betaVer);
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	699c      	ldr	r4, [r3, #24]
 8008db6:	7dfa      	ldrb	r2, [r7, #23]
 8008db8:	7db9      	ldrb	r1, [r7, #22]
 8008dba:	7d7b      	ldrb	r3, [r7, #21]
 8008dbc:	9300      	str	r3, [sp, #0]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	490b      	ldr	r1, [pc, #44]	; (8008df0 <ParserSBGC32_FormatFirmwareVersion+0xe0>)
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	47a0      	blx	r4
 8008dc6:	e009      	b.n	8008ddc <ParserSBGC32_FormatFirmwareVersion+0xcc>

	else
		gSBGC->_ll->debugSprintf(pBuff, "%u.%u", majorVer, minorVer);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	699c      	ldr	r4, [r3, #24]
 8008dce:	7dfa      	ldrb	r2, [r7, #23]
 8008dd0:	7dbb      	ldrb	r3, [r7, #22]
 8008dd2:	4908      	ldr	r1, [pc, #32]	; (8008df4 <ParserSBGC32_FormatFirmwareVersion+0xe4>)
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	47a0      	blx	r4
 8008dd8:	e000      	b.n	8008ddc <ParserSBGC32_FormatFirmwareVersion+0xcc>
	if ((!pBuff) || (size < SBGC_FIRMWARE_VERSION_MAX_LEN)) return;
 8008dda:	bf00      	nop
}
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd90      	pop	{r4, r7, pc}
 8008de2:	bf00      	nop
 8008de4:	10624dd3 	.word	0x10624dd3
 8008de8:	cccccccd 	.word	0xcccccccd
 8008dec:	0800ee30 	.word	0x0800ee30
 8008df0:	0800ee3c 	.word	0x0800ee3c
 8008df4:	0800ee28 	.word	0x0800ee28

08008df8 <ParserSBGC32_ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
static void ParserSBGC32_ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b084      	sub	sp, #16
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	4613      	mov	r3, r2
 8008e04:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 8008e06:	79fb      	ldrb	r3, [r7, #7]
 8008e08:	2b04      	cmp	r3, #4
 8008e0a:	d80b      	bhi.n	8008e24 <ParserSBGC32_ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 8008e0c:	79fb      	ldrb	r3, [r7, #7]
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d101      	bne.n	8008e16 <ParserSBGC32_ToLittleEndian+0x1e>
 8008e12:	2304      	movs	r3, #4
 8008e14:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 8008e16:	79fb      	ldrb	r3, [r7, #7]
 8008e18:	461a      	mov	r2, r3
 8008e1a:	68f9      	ldr	r1, [r7, #12]
 8008e1c:	68b8      	ldr	r0, [r7, #8]
 8008e1e:	f000 fd2d 	bl	800987c <memcpy>
 8008e22:	e000      	b.n	8008e26 <ParserSBGC32_ToLittleEndian+0x2e>
	if (size > 4) return;
 8008e24:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			ParserSBGC32_SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <ParserSBGC32_FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
static void ParserSBGC32_FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	4613      	mov	r3, r2
 8008e38:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 8008e3a:	79fb      	ldrb	r3, [r7, #7]
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d80b      	bhi.n	8008e58 <ParserSBGC32_FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	2b03      	cmp	r3, #3
 8008e44:	d101      	bne.n	8008e4a <ParserSBGC32_FromLittleEndian+0x1e>
 8008e46:	2304      	movs	r3, #4
 8008e48:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 8008e4a:	79fb      	ldrb	r3, [r7, #7]
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	68b9      	ldr	r1, [r7, #8]
 8008e50:	68f8      	ldr	r0, [r7, #12]
 8008e52:	f000 fd13 	bl	800987c <memcpy>
 8008e56:	e000      	b.n	8008e5a <ParserSBGC32_FromLittleEndian+0x2e>
	if (size > 4) return;
 8008e58:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			ParserSBGC32_SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <ParserSBGC32_GetCommandParserMap>:
 *	@param	*serialCommand - pointer to command
 *
 *	@return	Parser mapping pattern
 */
static sbgcParserMap_t ParserSBGC32_GetCommandParserMap (serialAPI_Command_t *serialCommand)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b083      	sub	sp, #12
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
	#if (SBGC_SYS_BIG_ENDIAN == sbgcOFF)

		unused_(serialCommand);
		return PM_DEFAULT_8BIT;
 8008e68:	2300      	movs	r3, #0

			default :																return PM_DEFAULT_8BIT;
		}

	#endif
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <ParserSBGC32_ConvertWithPM>:
 *	@param	parserMap - data type required for correct parsing
 *
 *	@return	Size of written data
 */
static ui8 ParserSBGC32_ConvertWithPM (void *pDestination, const void *pSource, ui8 size, sbgcParserMap_t parserMap)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b084      	sub	sp, #16
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	60f8      	str	r0, [r7, #12]
 8008e7e:	60b9      	str	r1, [r7, #8]
 8008e80:	4611      	mov	r1, r2
 8008e82:	461a      	mov	r2, r3
 8008e84:	460b      	mov	r3, r1
 8008e86:	71fb      	strb	r3, [r7, #7]
 8008e88:	4613      	mov	r3, r2
 8008e8a:	71bb      	strb	r3, [r7, #6]
	#if (SBGC_NEED_ASSERTS)
		if ((pDestination == NULL) || (size == 0)) return 0;
	#endif

	memcpy(pDestination, pSource, size);
 8008e8c:	79fb      	ldrb	r3, [r7, #7]
 8008e8e:	461a      	mov	r2, r3
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 fcf2 	bl	800987c <memcpy>
		ParserSBGC32_SwapBytesInStruct((ui8*)pDestination, size, parserMap);
	#else
		unused_(parserMap);
	#endif

	return size;
 8008e98:	79fb      	ldrb	r3, [r7, #7]
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3710      	adds	r7, #16
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bd80      	pop	{r7, pc}
	...

08008ea4 <PrivateSerialAPI_LinkConverter>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkConverter (sbgcGeneral_t *gSBGC)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b083      	sub	sp, #12
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	gSBGC->_api->typeToSize	= ParserSBGC32_ConvertTypeToSize;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	685b      	ldr	r3, [r3, #4]
 8008eb0:	4a0d      	ldr	r2, [pc, #52]	; (8008ee8 <PrivateSerialAPI_LinkConverter+0x44>)
 8008eb2:	639a      	str	r2, [r3, #56]	; 0x38

	#if (SBGC_USES_REF_INFO)
		gSBGC->_api->assignByPM	= ParserSBGC32_AssignStructByParserMap;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	685b      	ldr	r3, [r3, #4]
 8008eb8:	4a0c      	ldr	r2, [pc, #48]	; (8008eec <PrivateSerialAPI_LinkConverter+0x48>)
 8008eba:	63da      	str	r2, [r3, #60]	; 0x3c
	#endif

	gSBGC->_api->toLE		= ParserSBGC32_ToLittleEndian;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	685b      	ldr	r3, [r3, #4]
 8008ec0:	4a0b      	ldr	r2, [pc, #44]	; (8008ef0 <PrivateSerialAPI_LinkConverter+0x4c>)
 8008ec2:	641a      	str	r2, [r3, #64]	; 0x40
	gSBGC->_api->fromLE		= ParserSBGC32_FromLittleEndian;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	4a0a      	ldr	r2, [pc, #40]	; (8008ef4 <PrivateSerialAPI_LinkConverter+0x50>)
 8008eca:	645a      	str	r2, [r3, #68]	; 0x44
	gSBGC->_api->getCmdPM	= ParserSBGC32_GetCommandParserMap;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	4a09      	ldr	r2, [pc, #36]	; (8008ef8 <PrivateSerialAPI_LinkConverter+0x54>)
 8008ed2:	649a      	str	r2, [r3, #72]	; 0x48
	gSBGC->_api->convWithPM	= ParserSBGC32_ConvertWithPM;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	685b      	ldr	r3, [r3, #4]
 8008ed8:	4a08      	ldr	r2, [pc, #32]	; (8008efc <PrivateSerialAPI_LinkConverter+0x58>)
 8008eda:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	08007d1d 	.word	0x08007d1d
 8008eec:	08007d75 	.word	0x08007d75
 8008ef0:	08008df9 	.word	0x08008df9
 8008ef4:	08008e2d 	.word	0x08008e2d
 8008ef8:	08008e61 	.word	0x08008e61
 8008efc:	08008e77 	.word	0x08008e77

08008f00 <DriverSBGC32_Init>:
 *	@param	**driver - main hardware driver object
 *	@param	*uart - user defined UART object
 *	@param	*tim - user defined timer object
 */
void DriverSBGC32_Init (void **driver, SBGC_DRV_UART_TYPE_DEF__ *uart, SBGC_DRV_TIMER_TYPE_DEF__ *tim)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	60f8      	str	r0, [r7, #12]
 8008f08:	60b9      	str	r1, [r7, #8]
 8008f0a:	607a      	str	r2, [r7, #4]
	*driver = sbgcMalloc(sizeof(sbgcDriver_t));
 8008f0c:	201c      	movs	r0, #28
 8008f0e:	f000 fcad 	bl	800986c <malloc>
 8008f12:	4603      	mov	r3, r0
 8008f14:	461a      	mov	r2, r3
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	601a      	str	r2, [r3, #0]

	sbgcDriver_t *drv = (sbgcDriver_t*)(*driver);
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	617b      	str	r3, [r7, #20]

	#if (SBGC_DRV_HAL_TIMER || SBGC_DRV_LL_TIMER)
		/* Timer */
		drv->tim = tim;
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	687a      	ldr	r2, [r7, #4]
 8008f24:	601a      	str	r2, [r3, #0]
		drv->timCount = 0;
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	605a      	str	r2, [r3, #4]
	#else
		unused_(tim);
	#endif

    /* UART */
	drv->uart = uart;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	68ba      	ldr	r2, [r7, #8]
 8008f30:	609a      	str	r2, [r3, #8]

		DriverSBGC32_UART_Init(drv);

	#endif

	drv->txBuffer = (ui8*)sbgcMalloc(SBGC_DRV_TX_BUFF_TOTAL_SIZE);
 8008f32:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008f36:	f000 fc99 	bl	800986c <malloc>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	697b      	ldr	r3, [r7, #20]
 8008f40:	60da      	str	r2, [r3, #12]
	drv->rxBuffer = (ui8*)sbgcMalloc(SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 8008f42:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008f46:	f000 fc91 	bl	800986c <malloc>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	615a      	str	r2, [r3, #20]

	DriverSBGC32_ClearTxBuff(drv);
 8008f52:	6978      	ldr	r0, [r7, #20]
 8008f54:	f000 f8da 	bl	800910c <DriverSBGC32_ClearTxBuff>
	DriverSBGC32_ClearRxBuff(drv);
 8008f58:	6978      	ldr	r0, [r7, #20]
 8008f5a:	f000 f98e 	bl	800927a <DriverSBGC32_ClearRxBuff>

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
		/* UART Interrupts executable code */
		DISABLE_UART_CR1_TCIE(drv->uart);
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	689b      	ldr	r3, [r3, #8]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f70:	601a      	str	r2, [r3, #0]
		ENABLE_UART_CR1_RXNEIE(drv->uart);
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	689b      	ldr	r3, [r3, #8]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f042 0220 	orr.w	r2, r2, #32
 8008f84:	601a      	str	r2, [r3, #0]
		DISABLE_UART_CR1_IDLEIE(drv->uart);
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	689b      	ldr	r3, [r3, #8]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 0210 	bic.w	r2, r2, #16
 8008f98:	601a      	str	r2, [r3, #0]

		(void)READ_UART_BYTE(drv->uart);
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	689b      	ldr	r3, [r3, #8]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		CLEAR_UART_ORE(drv->uart);
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2208      	movs	r2, #8
 8008faa:	621a      	str	r2, [r3, #32]
		LL_DMA_EnableStream(SBGC_DMA_UART_RX, SBGC_DMA_UART_RX_STREAM);

	#endif

	#if (SBGC_DRV_HAL_TIMER || SBGC_DRV_LL_TIMER)
		START_TIMER(drv->tim);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7f9 ffc7 	bl	8002f44 <HAL_TIM_Base_Start_IT>
	#endif
}
 8008fb6:	bf00      	nop
 8008fb8:	3718      	adds	r7, #24
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <DriverSBGC32_GetTimeMs>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Current time
 */
sbgcTicks_t DriverSBGC32_GetTimeMs (void *driver)
{
 8008fbe:	b480      	push	{r7}
 8008fc0:	b085      	sub	sp, #20
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60fb      	str	r3, [r7, #12]

	#if (SBGC_USES_OS_SUPPORT)
		drv->timCount = sbgcGetTick();
	#endif

	return drv->timCount;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	685b      	ldr	r3, [r3, #4]
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3714      	adds	r7, #20
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <DriverSBGC32_TimerCallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_TimerCallBack (void *driver)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b085      	sub	sp, #20
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	685b      	ldr	r3, [r3, #4]
 8008fea:	1c5a      	adds	r2, r3, #1
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	605a      	str	r2, [r3, #4]

	#if (SBGC_DRV_LL_TIMER)
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 8008ff0:	bf00      	nop
 8008ff2:	3714      	adds	r7, #20
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <DriverSBGC32_UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx status
 */
ui8 DriverSBGC32_UartTransmitData (void *driver, ui8 *data, ui16 size)
{
 8008ffc:	b490      	push	{r4, r7}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	4613      	mov	r3, r2
 8009008:	80fb      	strh	r3, [r7, #6]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	617b      	str	r3, [r7, #20]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->txTail != drv->txHead)
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	7c1a      	ldrb	r2, [r3, #16]
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	7c5b      	ldrb	r3, [r3, #17]
 8009016:	429a      	cmp	r2, r3
 8009018:	d009      	beq.n	800902e <DriverSBGC32_UartTransmitData+0x32>
			ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	689b      	ldr	r3, [r3, #8]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800902c:	601a      	str	r2, [r3, #0]

		/* Free space check */
		if (calcFreeSpaceFIFO(drv->txTail, drv->txHead, SBGC_DRV_TX_BUFF_TOTAL_SIZE) <= size)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	7c5a      	ldrb	r2, [r3, #17]
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	7c1b      	ldrb	r3, [r3, #16]
 8009036:	429a      	cmp	r2, r3
 8009038:	d308      	bcc.n	800904c <DriverSBGC32_UartTransmitData+0x50>
 800903a:	697b      	ldr	r3, [r7, #20]
 800903c:	7c5b      	ldrb	r3, [r3, #17]
 800903e:	461a      	mov	r2, r3
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	7c1b      	ldrb	r3, [r3, #16]
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800904a:	e005      	b.n	8009058 <DriverSBGC32_UartTransmitData+0x5c>
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	7c1b      	ldrb	r3, [r3, #16]
 8009050:	461a      	mov	r2, r3
 8009052:	697b      	ldr	r3, [r7, #20]
 8009054:	7c5b      	ldrb	r3, [r3, #17]
 8009056:	1ad3      	subs	r3, r2, r3
 8009058:	88fa      	ldrh	r2, [r7, #6]
 800905a:	4293      	cmp	r3, r2
 800905c:	dc0f      	bgt.n	800907e <DriverSBGC32_UartTransmitData+0x82>
		{
			/*  - - - User Tx Buffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return SBGC_DRV_TX_BUFF_OVERFLOW_FLAG;
 800905e:	2301      	movs	r3, #1
 8009060:	e025      	b.n	80090ae <DriverSBGC32_UartTransmitData+0xb2>
		}

		while (size--)
			drv->txBuffer[drv->txHead++] = *(data++);
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	1c5a      	adds	r2, r3, #1
 8009066:	60ba      	str	r2, [r7, #8]
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	68d1      	ldr	r1, [r2, #12]
 800906c:	697a      	ldr	r2, [r7, #20]
 800906e:	7c52      	ldrb	r2, [r2, #17]
 8009070:	1c50      	adds	r0, r2, #1
 8009072:	b2c4      	uxtb	r4, r0
 8009074:	6978      	ldr	r0, [r7, #20]
 8009076:	7444      	strb	r4, [r0, #17]
 8009078:	440a      	add	r2, r1
 800907a:	781b      	ldrb	r3, [r3, #0]
 800907c:	7013      	strb	r3, [r2, #0]
		while (size--)
 800907e:	88fb      	ldrh	r3, [r7, #6]
 8009080:	1e5a      	subs	r2, r3, #1
 8009082:	80fa      	strh	r2, [r7, #6]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1ec      	bne.n	8009062 <DriverSBGC32_UartTransmitData+0x66>

		if (!GET_FLAG_UART_CR1_TCIE(drv->uart))
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009094:	2b00      	cmp	r3, #0
 8009096:	d109      	bne.n	80090ac <DriverSBGC32_UartTransmitData+0xb0>
			ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090aa:	601a      	str	r2, [r3, #0]
			LL_DMA_EnableStream(SBGC_DMA_UART_TX, SBGC_DMA_UART_TX_STREAM);
		}

	#endif

	return SBGC_DRV_TX_OK_FLAG;
 80090ac:	2300      	movs	r3, #0
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3718      	adds	r7, #24
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc90      	pop	{r4, r7}
 80090b6:	4770      	bx	lr

080090b8 <DriverSBGC32_UART_TxCallBack>:
/**	@brief	UART transfer completion interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_UART_TxCallBack (void *driver)
{
 80090b8:	b480      	push	{r7}
 80090ba:	b085      	sub	sp, #20
 80090bc:	af00      	add	r7, sp, #0
 80090be:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)

		WRITE_UART_BYTE(drv->uart, drv->txBuffer[drv->txTail++] & (ui32)0xFF);
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	68da      	ldr	r2, [r3, #12]
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	7c1b      	ldrb	r3, [r3, #16]
 80090cc:	1c59      	adds	r1, r3, #1
 80090ce:	b2c8      	uxtb	r0, r1
 80090d0:	68f9      	ldr	r1, [r7, #12]
 80090d2:	7408      	strb	r0, [r1, #16]
 80090d4:	4413      	add	r3, r2
 80090d6:	781a      	ldrb	r2, [r3, #0]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	629a      	str	r2, [r3, #40]	; 0x28

		if (drv->txTail == drv->txHead)
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	7c1a      	ldrb	r2, [r3, #16]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	7c5b      	ldrb	r3, [r3, #17]
 80090e8:	429a      	cmp	r2, r3
 80090ea:	d109      	bne.n	8009100 <DriverSBGC32_UART_TxCallBack+0x48>
		{
			DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	689b      	ldr	r3, [r3, #8]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	689b      	ldr	r3, [r3, #8]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090fe:	601a      	str	r2, [r3, #0]
			drv->txHead = 0;

		drv->txTail = drv->txHead;

	#endif
}
 8009100:	bf00      	nop
 8009102:	3714      	adds	r7, #20
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <DriverSBGC32_ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_ClearTxBuff (void *driver)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	60fb      	str	r3, [r7, #12]

	memset(drv->txBuffer, 0, SBGC_DRV_TX_BUFF_TOTAL_SIZE);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009120:	2100      	movs	r1, #0
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fbb8 	bl	8009898 <memset>
	drv->txTail = 0;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	741a      	strb	r2, [r3, #16]
	drv->txHead = 0;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2200      	movs	r2, #0
 8009132:	745a      	strb	r2, [r3, #17]
}
 8009134:	bf00      	nop
 8009136:	3710      	adds	r7, #16
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}

0800913c <DriverSBGC32_GetAvailableBytes>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 DriverSBGC32_GetAvailableBytes (void *driver)
{
 800913c:	b480      	push	{r7}
 800913e:	b085      	sub	sp, #20
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->rxOverflowFlag)
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	7e9b      	ldrb	r3, [r3, #26]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <DriverSBGC32_GetAvailableBytes+0x1a>
			return SBGC_RX_BUFFER_OVERFLOW_FLAG;
 8009150:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009154:	e023      	b.n	800919e <DriverSBGC32_GetAvailableBytes+0x62>

		ui16 availableBytes = calcFreeSpaceFIFO(drv->rxHead, drv->rxTail, SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	7e1a      	ldrb	r2, [r3, #24]
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	7e5b      	ldrb	r3, [r3, #25]
 800915e:	429a      	cmp	r2, r3
 8009160:	d30b      	bcc.n	800917a <DriverSBGC32_GetAvailableBytes+0x3e>
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	7e5b      	ldrb	r3, [r3, #25]
 8009166:	b29a      	uxth	r2, r3
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	7e1b      	ldrb	r3, [r3, #24]
 800916c:	b29b      	uxth	r3, r3
 800916e:	1ad3      	subs	r3, r2, r3
 8009170:	b29b      	uxth	r3, r3
 8009172:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009176:	b29b      	uxth	r3, r3
 8009178:	e007      	b.n	800918a <DriverSBGC32_GetAvailableBytes+0x4e>
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	7e5b      	ldrb	r3, [r3, #25]
 800917e:	b29a      	uxth	r2, r3
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	7e1b      	ldrb	r3, [r3, #24]
 8009184:	b29b      	uxth	r3, r3
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	b29b      	uxth	r3, r3
 800918a:	817b      	strh	r3, [r7, #10]
		availableBytes = (availableBytes == SBGC_DRV_RX_BUFF_TOTAL_SIZE) ? 0 : availableBytes;
 800918c:	897b      	ldrh	r3, [r7, #10]
 800918e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009192:	d001      	beq.n	8009198 <DriverSBGC32_GetAvailableBytes+0x5c>
 8009194:	897b      	ldrh	r3, [r7, #10]
 8009196:	e000      	b.n	800919a <DriverSBGC32_GetAvailableBytes+0x5e>
 8009198:	2300      	movs	r3, #0
 800919a:	817b      	strh	r3, [r7, #10]

		return availableBytes;
 800919c:	897b      	ldrh	r3, [r7, #10]

		drv->rxHead = SBGC_DRV_RX_BUFF_TOTAL_SIZE - GET_DMA_RX_COUNTER(SBGC_DMA_UART_RX);
		return (drv->rxHead - drv->rxTail) & SBGC_DRV_RX_BUFF_SIZE_MASK;

	#endif
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <DriverSBGC32_UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Rx status
 */
ui8 DriverSBGC32_UartReceiveByte (void *driver, ui8 *data)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	6039      	str	r1, [r7, #0]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->rxTail == drv->rxHead)
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	7e1a      	ldrb	r2, [r3, #24]
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	7e5b      	ldrb	r3, [r3, #25]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d101      	bne.n	80091c8 <DriverSBGC32_UartReceiveByte+0x1e>
		{
			/*  - - - - User Receive-Complete Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return SBGC_DRV_RX_BUFF_EMPTY_FLAG;
 80091c4:	2301      	movs	r3, #1
 80091c6:	e013      	b.n	80091f0 <DriverSBGC32_UartReceiveByte+0x46>
		}

		*data = drv->rxBuffer[drv->rxTail++];
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	695a      	ldr	r2, [r3, #20]
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	7e1b      	ldrb	r3, [r3, #24]
 80091d0:	1c59      	adds	r1, r3, #1
 80091d2:	b2c8      	uxtb	r0, r1
 80091d4:	68f9      	ldr	r1, [r7, #12]
 80091d6:	7608      	strb	r0, [r1, #24]
 80091d8:	4413      	add	r3, r2
 80091da:	781a      	ldrb	r2, [r3, #0]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	701a      	strb	r2, [r3, #0]

		if (drv->rxOverflowFlag == 1)  // Reset the overflow flag
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	7e9b      	ldrb	r3, [r3, #26]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d102      	bne.n	80091ee <DriverSBGC32_UartReceiveByte+0x44>
			drv->rxOverflowFlag = 0;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	769a      	strb	r2, [r3, #26]
		if (drv->rxTail != drv->rxHead)
			drv->rxTail++;

	#endif

	return SBGC_DRV_RX_BUSY_FLAG;  // Rx ring buffer isn't empty
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3714      	adds	r7, #20
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <DriverSBGC32_UART_RxCallBack>:
	/**	@brief	UART receive completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void DriverSBGC32_UART_RxCallBack (void *driver)
	{
 80091fc:	b490      	push	{r4, r7}
 80091fe:	b084      	sub	sp, #16
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
		sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	60fb      	str	r3, [r7, #12]

		if (!calcFreeSpaceFIFO(drv->rxTail, drv->rxHead, SBGC_DRV_RX_BUFF_TOTAL_SIZE))
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	7e5a      	ldrb	r2, [r3, #25]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	7e1b      	ldrb	r3, [r3, #24]
 8009210:	429a      	cmp	r2, r3
 8009212:	d30c      	bcc.n	800922e <DriverSBGC32_UART_RxCallBack+0x32>
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	7e5b      	ldrb	r3, [r3, #25]
 8009218:	461a      	mov	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	7e1b      	ldrb	r3, [r3, #24]
 800921e:	1ad3      	subs	r3, r2, r3
 8009220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009224:	bf0c      	ite	eq
 8009226:	2301      	moveq	r3, #1
 8009228:	2300      	movne	r3, #0
 800922a:	b2db      	uxtb	r3, r3
 800922c:	e008      	b.n	8009240 <DriverSBGC32_UART_RxCallBack+0x44>
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	7e1a      	ldrb	r2, [r3, #24]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	7e5b      	ldrb	r3, [r3, #25]
 8009236:	429a      	cmp	r2, r3
 8009238:	bf0c      	ite	eq
 800923a:	2301      	moveq	r3, #1
 800923c:	2300      	movne	r3, #0
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d007      	beq.n	8009254 <DriverSBGC32_UART_RxCallBack+0x58>
		{
			/* - - - - User rxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */

			(void)READ_UART_BYTE(drv->uart);  // Prevent hardware overflow error (USART_ISR_ORE)
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	6a5b      	ldr	r3, [r3, #36]	; 0x24

			drv->rxOverflowFlag = 1;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2201      	movs	r2, #1
 8009250:	769a      	strb	r2, [r3, #26]

			return;
 8009252:	e00e      	b.n	8009272 <DriverSBGC32_UART_RxCallBack+0x76>
		}

		drv->rxBuffer[drv->rxHead++] = READ_UART_BYTE(drv->uart);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	689b      	ldr	r3, [r3, #8]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	695a      	ldr	r2, [r3, #20]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	7e5b      	ldrb	r3, [r3, #25]
 8009264:	1c59      	adds	r1, r3, #1
 8009266:	b2cc      	uxtb	r4, r1
 8009268:	68f9      	ldr	r1, [r7, #12]
 800926a:	764c      	strb	r4, [r1, #25]
 800926c:	4413      	add	r3, r2
 800926e:	b2c2      	uxtb	r2, r0
 8009270:	701a      	strb	r2, [r3, #0]
	}
 8009272:	3710      	adds	r7, #16
 8009274:	46bd      	mov	sp, r7
 8009276:	bc90      	pop	{r4, r7}
 8009278:	4770      	bx	lr

0800927a <DriverSBGC32_ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_ClearRxBuff (void *driver)
{
 800927a:	b580      	push	{r7, lr}
 800927c:	b084      	sub	sp, #16
 800927e:	af00      	add	r7, sp, #0
 8009280:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	60fb      	str	r3, [r7, #12]

	memset(drv->rxBuffer, 0, SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800928e:	2100      	movs	r1, #0
 8009290:	4618      	mov	r0, r3
 8009292:	f000 fb01 	bl	8009898 <memset>
	drv->rxTail = 0;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	761a      	strb	r2, [r3, #24]
	drv->rxHead = 0;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	765a      	strb	r2, [r3, #25]
	drv->rxOverflowFlag = 0;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2200      	movs	r2, #0
 80092a6:	769a      	strb	r2, [r3, #26]
}
 80092a8:	bf00      	nop
 80092aa:	3710      	adds	r7, #16
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <DriverSBGC32_UartTransmitDebugData>:
 *
 *	@param	*data - debug data
 *	@param	length - size of debug data
 */
void DriverSBGC32_UartTransmitDebugData (char *data, ui16 length)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	460b      	mov	r3, r1
 80092ba:	807b      	strh	r3, [r7, #2]
	#if (SBGC_DRV_USE_UART_DEBUG && (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_HAL_DMA_UART))

		/* UART HAL executable code */
		HAL_UART_Transmit(SBGC_DEBUG_SERIAL_PORT, (ui8*)data, length, 100);
 80092bc:	887a      	ldrh	r2, [r7, #2]
 80092be:	2364      	movs	r3, #100	; 0x64
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	4803      	ldr	r0, [pc, #12]	; (80092d0 <DriverSBGC32_UartTransmitDebugData+0x20>)
 80092c4:	f7fa fb50 	bl	8003968 <HAL_UART_Transmit>

			LL_USART_TransmitData8(SBGC_DEBUG_SERIAL_PORT, *(data++));
		}

	#endif
}
 80092c8:	bf00      	nop
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20000484 	.word	0x20000484

080092d4 <SBGC32_Control>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_Control (sbgcGeneral_t *gSBGC, const sbgcControl_t *control
									/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80092d4:	b590      	push	{r4, r7, lr}
 80092d6:	b089      	sub	sp, #36	; 0x24
 80092d8:	af04      	add	r7, sp, #16
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4611      	mov	r1, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	460b      	mov	r3, r1
 80092e4:	71fb      	strb	r3, [r7, #7]
 80092e6:	4613      	mov	r3, r2
 80092e8:	71bb      	strb	r3, [r7, #6]
	gSBGC->_api->startWrite(gSBGC, CMD_CONTROL SBGC_ADVANCED_ARGS__);
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80092f0:	79b9      	ldrb	r1, [r7, #6]
 80092f2:	79fa      	ldrb	r2, [r7, #7]
 80092f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f6:	9303      	str	r3, [sp, #12]
 80092f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fa:	9302      	str	r3, [sp, #8]
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	9301      	str	r3, [sp, #4]
 8009300:	6a3b      	ldr	r3, [r7, #32]
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	460b      	mov	r3, r1
 8009306:	2143      	movs	r1, #67	; 0x43
 8009308:	68f8      	ldr	r0, [r7, #12]
 800930a:	47a0      	blx	r4
	gSBGC->_api->writeBuff(gSBGC, control, sizeof(sbgcControl_t));
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009312:	220f      	movs	r2, #15
 8009314:	68b9      	ldr	r1, [r7, #8]
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009322:	68f8      	ldr	r0, [r7, #12]
 8009324:	4798      	blx	r3

	serialAPI_GiveToken()
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009328:	2b00      	cmp	r3, #0
 800932a:	d004      	beq.n	8009336 <SBGC32_Control+0x62>
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8009332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009334:	801a      	strh	r2, [r3, #0]

	return gSBGC->_api->exit(gSBGC);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800933e:	68f8      	ldr	r0, [r7, #12]
 8009340:	4798      	blx	r3
 8009342:	4603      	mov	r3, r0
}
 8009344:	4618      	mov	r0, r3
 8009346:	3714      	adds	r7, #20
 8009348:	46bd      	mov	sp, r7
 800934a:	bd90      	pop	{r4, r7, pc}

0800934c <SBGC32_ControlConfig>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ControlConfig (sbgcGeneral_t *gSBGC, const sbgcControlConfig_t *controlConfig, sbgcConfirm_t *confirm
										  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 800934c:	b590      	push	{r4, r7, lr}
 800934e:	b08b      	sub	sp, #44	; 0x2c
 8009350:	af06      	add	r7, sp, #24
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	70fb      	strb	r3, [r7, #3]
	sbgcAssertFrwVer(2610)

	gSBGC->_api->startWrite(gSBGC, CMD_CONTROL_CONFIG SBGC_ADVANCED_ARGS__);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8009360:	f897 1020 	ldrb.w	r1, [r7, #32]
 8009364:	78fa      	ldrb	r2, [r7, #3]
 8009366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009368:	9303      	str	r3, [sp, #12]
 800936a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936c:	9302      	str	r3, [sp, #8]
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	460b      	mov	r3, r1
 8009378:	215a      	movs	r1, #90	; 0x5a
 800937a:	68f8      	ldr	r0, [r7, #12]
 800937c:	47a0      	blx	r4
	gSBGC->_api->writeBuff(gSBGC, controlConfig, sizeof(sbgcControlConfig_t));
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009384:	2229      	movs	r2, #41	; 0x29
 8009386:	68b9      	ldr	r1, [r7, #8]
 8009388:	68f8      	ldr	r0, [r7, #12]
 800938a:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	685b      	ldr	r3, [r3, #4]
 8009390:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009394:	68f8      	ldr	r0, [r7, #12]
 8009396:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_CONTROL_CONFIG SBGC_ADVANCED_ARGS__);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 80093a0:	78fa      	ldrb	r2, [r7, #3]
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	9304      	str	r3, [sp, #16]
 80093a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a8:	9303      	str	r3, [sp, #12]
 80093aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ac:	9302      	str	r3, [sp, #8]
 80093ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	4613      	mov	r3, r2
 80093ba:	225a      	movs	r2, #90	; 0x5a
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	68f8      	ldr	r0, [r7, #12]
 80093c0:	47a0      	blx	r4

	gSBGC->_api->bound(gSBGC);
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80093ca:	68f8      	ldr	r0, [r7, #12]
 80093cc:	4798      	blx	r3

	serialAPI_GiveToken()
 80093ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d004      	beq.n	80093de <SBGC32_ControlConfig+0x92>
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	801a      	strh	r2, [r3, #0]

	return gSBGC->_api->exit(gSBGC);
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80093e6:	68f8      	ldr	r0, [r7, #12]
 80093e8:	4798      	blx	r3
 80093ea:	4603      	mov	r3, r0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd90      	pop	{r4, r7, pc}

080093f4 <SBGC32_ReadParams3>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadParams3 (sbgcGeneral_t *gSBGC, sbgcMainParams3_t *mainParams3, sbgcProfile_t profileID
										/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80093f4:	b590      	push	{r4, r7, lr}
 80093f6:	b089      	sub	sp, #36	; 0x24
 80093f8:	af04      	add	r7, sp, #16
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	4611      	mov	r1, r2
 8009400:	461a      	mov	r2, r3
 8009402:	460b      	mov	r3, r1
 8009404:	71fb      	strb	r3, [r7, #7]
 8009406:	4613      	mov	r3, r2
 8009408:	71bb      	strb	r3, [r7, #6]
	#if (SBGC_NEED_ASSERTS)
		if ((profileID > sbgcPROFILE_5) && (profileID != sbgcCURRENT_PROFILE)) return sbgcCOMMAND_PARAM_ASSERT_ERROR;
	#endif

	gSBGC->_api->startWrite(gSBGC, CMD_READ_PARAMS_3 SBGC_ADVANCED_ARGS__);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8009410:	f897 1020 	ldrb.w	r1, [r7, #32]
 8009414:	79ba      	ldrb	r2, [r7, #6]
 8009416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009418:	9303      	str	r3, [sp, #12]
 800941a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800941c:	9302      	str	r3, [sp, #8]
 800941e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009420:	9301      	str	r3, [sp, #4]
 8009422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009424:	9300      	str	r3, [sp, #0]
 8009426:	460b      	mov	r3, r1
 8009428:	2115      	movs	r1, #21
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	47a0      	blx	r4
	gSBGC->_api->writeByte(gSBGC, profileID);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009434:	79fa      	ldrb	r2, [r7, #7]
 8009436:	4611      	mov	r1, r2
 8009438:	68f8      	ldr	r0, [r7, #12]
 800943a:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_READ_PARAMS_3 SBGC_ADVANCED_ARGS__);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8009450:	f897 1020 	ldrb.w	r1, [r7, #32]
 8009454:	79ba      	ldrb	r2, [r7, #6]
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	9303      	str	r3, [sp, #12]
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	9302      	str	r3, [sp, #8]
 800945e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009460:	9301      	str	r3, [sp, #4]
 8009462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009464:	9300      	str	r3, [sp, #0]
 8009466:	460b      	mov	r3, r1
 8009468:	2115      	movs	r1, #21
 800946a:	68f8      	ldr	r0, [r7, #12]
 800946c:	47a0      	blx	r4
	gSBGC->_api->assignEvent(gSBGC, NULL, mainParams3, sizeof(sbgcMainParams3_t));
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	685b      	ldr	r3, [r3, #4]
 8009472:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 8009476:	2386      	movs	r3, #134	; 0x86
 8009478:	68ba      	ldr	r2, [r7, #8]
 800947a:	2100      	movs	r1, #0
 800947c:	68f8      	ldr	r0, [r7, #12]
 800947e:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	685b      	ldr	r3, [r3, #4]
 8009484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009488:	68f8      	ldr	r0, [r7, #12]
 800948a:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009494:	68f8      	ldr	r0, [r7, #12]
 8009496:	4798      	blx	r3

	serialAPI_GiveToken()
 8009498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949a:	2b00      	cmp	r3, #0
 800949c:	d004      	beq.n	80094a8 <SBGC32_ReadParams3+0xb4>
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80094a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094a6:	801a      	strh	r2, [r3, #0]

	return gSBGC->_api->exit(gSBGC);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	4798      	blx	r3
 80094b4:	4603      	mov	r3, r0
}
 80094b6:	4618      	mov	r0, r3
 80094b8:	3714      	adds	r7, #20
 80094ba:	46bd      	mov	sp, r7
 80094bc:	bd90      	pop	{r4, r7, pc}

080094be <SBGC32_ReadRealTimeData4>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadRealTimeData4 (sbgcGeneral_t *gSBGC, sbgcRealTimeData_t *realTimeData
											  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80094be:	b590      	push	{r4, r7, lr}
 80094c0:	b089      	sub	sp, #36	; 0x24
 80094c2:	af04      	add	r7, sp, #16
 80094c4:	60f8      	str	r0, [r7, #12]
 80094c6:	60b9      	str	r1, [r7, #8]
 80094c8:	4611      	mov	r1, r2
 80094ca:	461a      	mov	r2, r3
 80094cc:	460b      	mov	r3, r1
 80094ce:	71fb      	strb	r3, [r7, #7]
 80094d0:	4613      	mov	r3, r2
 80094d2:	71bb      	strb	r3, [r7, #6]
	gSBGC->_api->startWrite(gSBGC, CMD_REALTIME_DATA_4 SBGC_ADVANCED_ARGS__);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	685b      	ldr	r3, [r3, #4]
 80094d8:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 80094da:	79b9      	ldrb	r1, [r7, #6]
 80094dc:	79fa      	ldrb	r2, [r7, #7]
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	9303      	str	r3, [sp, #12]
 80094e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094e4:	9302      	str	r3, [sp, #8]
 80094e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e8:	9301      	str	r3, [sp, #4]
 80094ea:	6a3b      	ldr	r3, [r7, #32]
 80094ec:	9300      	str	r3, [sp, #0]
 80094ee:	460b      	mov	r3, r1
 80094f0:	2119      	movs	r1, #25
 80094f2:	68f8      	ldr	r0, [r7, #12]
 80094f4:	47a0      	blx	r4
	gSBGC->_api->finishWrite(gSBGC);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	685b      	ldr	r3, [r3, #4]
 80094fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094fe:	68f8      	ldr	r0, [r7, #12]
 8009500:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_REALTIME_DATA_4 SBGC_ADVANCED_ARGS__);
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800950a:	79b9      	ldrb	r1, [r7, #6]
 800950c:	79fa      	ldrb	r2, [r7, #7]
 800950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009510:	9303      	str	r3, [sp, #12]
 8009512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009514:	9302      	str	r3, [sp, #8]
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	9301      	str	r3, [sp, #4]
 800951a:	6a3b      	ldr	r3, [r7, #32]
 800951c:	9300      	str	r3, [sp, #0]
 800951e:	460b      	mov	r3, r1
 8009520:	2119      	movs	r1, #25
 8009522:	68f8      	ldr	r0, [r7, #12]
 8009524:	47a0      	blx	r4
	gSBGC->_api->assignEvent(gSBGC, NULL, realTimeData, sizeof(sbgcRealTimeData_t));
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	685b      	ldr	r3, [r3, #4]
 800952a:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 800952e:	237c      	movs	r3, #124	; 0x7c
 8009530:	68ba      	ldr	r2, [r7, #8]
 8009532:	2100      	movs	r1, #0
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800954c:	68f8      	ldr	r0, [r7, #12]
 800954e:	4798      	blx	r3

	serialAPI_GiveToken()
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <SBGC32_ReadRealTimeData4+0xa2>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800955c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955e:	801a      	strh	r2, [r3, #0]

	return gSBGC->_api->exit(gSBGC);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	685b      	ldr	r3, [r3, #4]
 8009564:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	4798      	blx	r3
 800956c:	4603      	mov	r3, r0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3714      	adds	r7, #20
 8009572:	46bd      	mov	sp, r7
 8009574:	bd90      	pop	{r4, r7, pc}

08009576 <SBGC32_GetAnglesExt>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_GetAnglesExt (sbgcGeneral_t *gSBGC, sbgcGetAnglesExt_t *getAnglesExt
										 /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009576:	b590      	push	{r4, r7, lr}
 8009578:	b089      	sub	sp, #36	; 0x24
 800957a:	af04      	add	r7, sp, #16
 800957c:	60f8      	str	r0, [r7, #12]
 800957e:	60b9      	str	r1, [r7, #8]
 8009580:	4611      	mov	r1, r2
 8009582:	461a      	mov	r2, r3
 8009584:	460b      	mov	r3, r1
 8009586:	71fb      	strb	r3, [r7, #7]
 8009588:	4613      	mov	r3, r2
 800958a:	71bb      	strb	r3, [r7, #6]
	gSBGC->_api->startWrite(gSBGC, CMD_GET_ANGLES_EXT SBGC_ADVANCED_ARGS__);
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8009592:	79b9      	ldrb	r1, [r7, #6]
 8009594:	79fa      	ldrb	r2, [r7, #7]
 8009596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009598:	9303      	str	r3, [sp, #12]
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	9302      	str	r3, [sp, #8]
 800959e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a0:	9301      	str	r3, [sp, #4]
 80095a2:	6a3b      	ldr	r3, [r7, #32]
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	460b      	mov	r3, r1
 80095a8:	213d      	movs	r1, #61	; 0x3d
 80095aa:	68f8      	ldr	r0, [r7, #12]
 80095ac:	47a0      	blx	r4
	gSBGC->_api->finishWrite(gSBGC);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_GET_ANGLES_EXT SBGC_ADVANCED_ARGS__);
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	685b      	ldr	r3, [r3, #4]
 80095be:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 80095c2:	79b9      	ldrb	r1, [r7, #6]
 80095c4:	79fa      	ldrb	r2, [r7, #7]
 80095c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c8:	9303      	str	r3, [sp, #12]
 80095ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095cc:	9302      	str	r3, [sp, #8]
 80095ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	6a3b      	ldr	r3, [r7, #32]
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	460b      	mov	r3, r1
 80095d8:	213d      	movs	r1, #61	; 0x3d
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	47a0      	blx	r4
	gSBGC->_api->assignEvent(gSBGC, NULL, getAnglesExt, sizeof(sbgcGetAnglesExt_t));
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	685b      	ldr	r3, [r3, #4]
 80095e2:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80095e6:	2336      	movs	r3, #54	; 0x36
 80095e8:	68ba      	ldr	r2, [r7, #8]
 80095ea:	2100      	movs	r1, #0
 80095ec:	68f8      	ldr	r0, [r7, #12]
 80095ee:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009604:	68f8      	ldr	r0, [r7, #12]
 8009606:	4798      	blx	r3

	serialAPI_GiveToken()
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	2b00      	cmp	r3, #0
 800960c:	d004      	beq.n	8009618 <SBGC32_GetAnglesExt+0xa2>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	801a      	strh	r2, [r3, #0]

	return gSBGC->_api->exit(gSBGC);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	4798      	blx	r3
 8009624:	4603      	mov	r3, r0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	bd90      	pop	{r4, r7, pc}

0800962e <SBGC32_ReadBoardInfo>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadBoardInfo (sbgcGeneral_t *gSBGC, sbgcBoardInfo_t *boardInfo, ui16 cfg
										  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 800962e:	b590      	push	{r4, r7, lr}
 8009630:	b089      	sub	sp, #36	; 0x24
 8009632:	af04      	add	r7, sp, #16
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	60b9      	str	r1, [r7, #8]
 8009638:	4611      	mov	r1, r2
 800963a:	461a      	mov	r2, r3
 800963c:	460b      	mov	r3, r1
 800963e:	80fb      	strh	r3, [r7, #6]
 8009640:	4613      	mov	r3, r2
 8009642:	717b      	strb	r3, [r7, #5]
	gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO SBGC_ADVANCED_ARGS__);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 800964a:	f897 1020 	ldrb.w	r1, [r7, #32]
 800964e:	797a      	ldrb	r2, [r7, #5]
 8009650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009652:	9303      	str	r3, [sp, #12]
 8009654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009656:	9302      	str	r3, [sp, #8]
 8009658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800965a:	9301      	str	r3, [sp, #4]
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	9300      	str	r3, [sp, #0]
 8009660:	460b      	mov	r3, r1
 8009662:	2156      	movs	r1, #86	; 0x56
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	47a0      	blx	r4
	gSBGC->_api->writeWord(gSBGC, cfg);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800966e:	88fa      	ldrh	r2, [r7, #6]
 8009670:	4611      	mov	r1, r2
 8009672:	68f8      	ldr	r0, [r7, #12]
 8009674:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800967e:	68f8      	ldr	r0, [r7, #12]
 8009680:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO SBGC_ADVANCED_ARGS__);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	685b      	ldr	r3, [r3, #4]
 8009686:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800968a:	f897 1020 	ldrb.w	r1, [r7, #32]
 800968e:	797a      	ldrb	r2, [r7, #5]
 8009690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009692:	9303      	str	r3, [sp, #12]
 8009694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009696:	9302      	str	r3, [sp, #8]
 8009698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969e:	9300      	str	r3, [sp, #0]
 80096a0:	460b      	mov	r3, r1
 80096a2:	2156      	movs	r1, #86	; 0x56
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	47a0      	blx	r4
	gSBGC->_api->assignEvent(gSBGC, NULL, boardInfo, sizeof(sbgcBoardInfo_t));
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	f8d3 4094 	ldr.w	r4, [r3, #148]	; 0x94
 80096b0:	2312      	movs	r3, #18
 80096b2:	68ba      	ldr	r2, [r7, #8]
 80096b4:	2100      	movs	r1, #0
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096c2:	68f8      	ldr	r0, [r7, #12]
 80096c4:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	4798      	blx	r3

	serialAPI_GiveToken()
 80096d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d004      	beq.n	80096e2 <SBGC32_ReadBoardInfo+0xb4>
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 80096de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096e0:	801a      	strh	r2, [r3, #0]

	return gSBGC->_api->exit(gSBGC);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	4798      	blx	r3
 80096ee:	4603      	mov	r3, r0
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3714      	adds	r7, #20
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd90      	pop	{r4, r7, pc}

080096f8 <SBGC32_ExecuteMenu>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ExecuteMenu (sbgcGeneral_t *gSBGC, sbgcMenuCommand_t menuCommandID, sbgcConfirm_t *confirm
										/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80096f8:	b590      	push	{r4, r7, lr}
 80096fa:	b08b      	sub	sp, #44	; 0x2c
 80096fc:	af06      	add	r7, sp, #24
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	607a      	str	r2, [r7, #4]
 8009702:	461a      	mov	r2, r3
 8009704:	460b      	mov	r3, r1
 8009706:	72fb      	strb	r3, [r7, #11]
 8009708:	4613      	mov	r3, r2
 800970a:	72bb      	strb	r3, [r7, #10]
	sbgcAssertParam(menuCommandID, MENU_CMD_NO, MENU_CMD_SET_RC_TRIM)

	gSBGC->_api->startWrite(gSBGC, CMD_EXECUTE_MENU SBGC_ADVANCED_ARGS__);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	6fdc      	ldr	r4, [r3, #124]	; 0x7c
 8009712:	f897 1020 	ldrb.w	r1, [r7, #32]
 8009716:	7aba      	ldrb	r2, [r7, #10]
 8009718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800971a:	9303      	str	r3, [sp, #12]
 800971c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800971e:	9302      	str	r3, [sp, #8]
 8009720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009722:	9301      	str	r3, [sp, #4]
 8009724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009726:	9300      	str	r3, [sp, #0]
 8009728:	460b      	mov	r3, r1
 800972a:	2145      	movs	r1, #69	; 0x45
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	47a0      	blx	r4
	gSBGC->_api->writeByte(gSBGC, menuCommandID);
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009736:	7afa      	ldrb	r2, [r7, #11]
 8009738:	4611      	mov	r1, r2
 800973a:	68f8      	ldr	r0, [r7, #12]
 800973c:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009746:	68f8      	ldr	r0, [r7, #12]
 8009748:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_EXECUTE_MENU SBGC_ADVANCED_ARGS__);
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	f8d3 4090 	ldr.w	r4, [r3, #144]	; 0x90
 8009752:	7aba      	ldrb	r2, [r7, #10]
 8009754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009756:	9304      	str	r3, [sp, #16]
 8009758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975a:	9303      	str	r3, [sp, #12]
 800975c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975e:	9302      	str	r3, [sp, #8]
 8009760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009762:	9301      	str	r3, [sp, #4]
 8009764:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	4613      	mov	r3, r2
 800976c:	2245      	movs	r2, #69	; 0x45
 800976e:	6879      	ldr	r1, [r7, #4]
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	47a0      	blx	r4

	gSBGC->_api->bound(gSBGC);
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800977c:	68f8      	ldr	r0, [r7, #12]
 800977e:	4798      	blx	r3

	serialAPI_GiveToken()
 8009780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009782:	2b00      	cmp	r3, #0
 8009784:	d004      	beq.n	8009790 <SBGC32_ExecuteMenu+0x98>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	685b      	ldr	r3, [r3, #4]
 800978a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800978c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978e:	801a      	strh	r2, [r3, #0]

	return gSBGC->_api->exit(gSBGC);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	685b      	ldr	r3, [r3, #4]
 8009794:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	4798      	blx	r3
 800979c:	4603      	mov	r3, r0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd90      	pop	{r4, r7, pc}
	...

080097a8 <PrivateSBGC32_EnterInit>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t PrivateSBGC32_EnterInit (sbgcGeneral_t *gSBGC)
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b084      	sub	sp, #16
 80097ac:	af02      	add	r7, sp, #8
 80097ae:	6078      	str	r0, [r7, #4]

			DriverSBGC32_Init(&gSBGC->_ll->drv, SBGC_SERIAL_PORT, SBGC_SERIAL_SPEED);

		#elif (SBGC_USE_STM32_DRIVER)

			SerialAPI_LinkDriver(gSBGC, DriverSBGC32_UartTransmitData, DriverSBGC32_UartReceiveByte, DriverSBGC32_GetAvailableBytes,
 80097b0:	4b0c      	ldr	r3, [pc, #48]	; (80097e4 <PrivateSBGC32_EnterInit+0x3c>)
 80097b2:	9301      	str	r3, [sp, #4]
 80097b4:	4b0c      	ldr	r3, [pc, #48]	; (80097e8 <PrivateSBGC32_EnterInit+0x40>)
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	4b0c      	ldr	r3, [pc, #48]	; (80097ec <PrivateSBGC32_EnterInit+0x44>)
 80097ba:	4a0d      	ldr	r2, [pc, #52]	; (80097f0 <PrivateSBGC32_EnterInit+0x48>)
 80097bc:	490d      	ldr	r1, [pc, #52]	; (80097f4 <PrivateSBGC32_EnterInit+0x4c>)
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f7fe fa80 	bl	8007cc4 <SerialAPI_LinkDriver>
								 DriverSBGC32_UartTransmitDebugData, DriverSBGC32_GetTimeMs);

			DriverSBGC32_Init(&gSBGC->_ll->drv, SBGC_SERIAL_PORT, SBGC_REFERENCE_TIMER);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4a0b      	ldr	r2, [pc, #44]	; (80097f8 <PrivateSBGC32_EnterInit+0x50>)
 80097ca:	490c      	ldr	r1, [pc, #48]	; (80097fc <PrivateSBGC32_EnterInit+0x54>)
 80097cc:	4618      	mov	r0, r3
 80097ce:	f7ff fb97 	bl	8008f00 <DriverSBGC32_Init>

		#endif
	#endif

	return SBGC32_SetupLibrary(gSBGC);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7fe f8a8 	bl	8007928 <SBGC32_SetupLibrary>
 80097d8:	4603      	mov	r3, r0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3708      	adds	r7, #8
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
 80097e2:	bf00      	nop
 80097e4:	08008fbf 	.word	0x08008fbf
 80097e8:	080092b1 	.word	0x080092b1
 80097ec:	0800913d 	.word	0x0800913d
 80097f0:	080091ab 	.word	0x080091ab
 80097f4:	08008ffd 	.word	0x08008ffd
 80097f8:	200003b0 	.word	0x200003b0
 80097fc:	200003fc 	.word	0x200003fc

08009800 <SBGC32_Init>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_Init (sbgcGeneral_t *gSBGC)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b082      	sub	sp, #8
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	#endif

	#if (SBGC_USES_OS_SUPPORT)
		SystemSBGC32_Init(gSBGC);
	#else
		return PrivateSBGC32_EnterInit(gSBGC);
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f7ff ffcd 	bl	80097a8 <PrivateSBGC32_EnterInit>
 800980e:	4603      	mov	r3, r0
	#endif

	return sbgcCOMMAND_OK;
}
 8009810:	4618      	mov	r0, r3
 8009812:	3708      	adds	r7, #8
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <__errno>:
 8009818:	4b01      	ldr	r3, [pc, #4]	; (8009820 <__errno+0x8>)
 800981a:	6818      	ldr	r0, [r3, #0]
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	2000000c 	.word	0x2000000c

08009824 <__libc_init_array>:
 8009824:	b570      	push	{r4, r5, r6, lr}
 8009826:	4d0d      	ldr	r5, [pc, #52]	; (800985c <__libc_init_array+0x38>)
 8009828:	4c0d      	ldr	r4, [pc, #52]	; (8009860 <__libc_init_array+0x3c>)
 800982a:	1b64      	subs	r4, r4, r5
 800982c:	10a4      	asrs	r4, r4, #2
 800982e:	2600      	movs	r6, #0
 8009830:	42a6      	cmp	r6, r4
 8009832:	d109      	bne.n	8009848 <__libc_init_array+0x24>
 8009834:	4d0b      	ldr	r5, [pc, #44]	; (8009864 <__libc_init_array+0x40>)
 8009836:	4c0c      	ldr	r4, [pc, #48]	; (8009868 <__libc_init_array+0x44>)
 8009838:	f004 fb9a 	bl	800df70 <_init>
 800983c:	1b64      	subs	r4, r4, r5
 800983e:	10a4      	asrs	r4, r4, #2
 8009840:	2600      	movs	r6, #0
 8009842:	42a6      	cmp	r6, r4
 8009844:	d105      	bne.n	8009852 <__libc_init_array+0x2e>
 8009846:	bd70      	pop	{r4, r5, r6, pc}
 8009848:	f855 3b04 	ldr.w	r3, [r5], #4
 800984c:	4798      	blx	r3
 800984e:	3601      	adds	r6, #1
 8009850:	e7ee      	b.n	8009830 <__libc_init_array+0xc>
 8009852:	f855 3b04 	ldr.w	r3, [r5], #4
 8009856:	4798      	blx	r3
 8009858:	3601      	adds	r6, #1
 800985a:	e7f2      	b.n	8009842 <__libc_init_array+0x1e>
 800985c:	080126d4 	.word	0x080126d4
 8009860:	080126d4 	.word	0x080126d4
 8009864:	080126d4 	.word	0x080126d4
 8009868:	080126d8 	.word	0x080126d8

0800986c <malloc>:
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <malloc+0xc>)
 800986e:	4601      	mov	r1, r0
 8009870:	6818      	ldr	r0, [r3, #0]
 8009872:	f000 b885 	b.w	8009980 <_malloc_r>
 8009876:	bf00      	nop
 8009878:	2000000c 	.word	0x2000000c

0800987c <memcpy>:
 800987c:	440a      	add	r2, r1
 800987e:	4291      	cmp	r1, r2
 8009880:	f100 33ff 	add.w	r3, r0, #4294967295
 8009884:	d100      	bne.n	8009888 <memcpy+0xc>
 8009886:	4770      	bx	lr
 8009888:	b510      	push	{r4, lr}
 800988a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800988e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009892:	4291      	cmp	r1, r2
 8009894:	d1f9      	bne.n	800988a <memcpy+0xe>
 8009896:	bd10      	pop	{r4, pc}

08009898 <memset>:
 8009898:	4402      	add	r2, r0
 800989a:	4603      	mov	r3, r0
 800989c:	4293      	cmp	r3, r2
 800989e:	d100      	bne.n	80098a2 <memset+0xa>
 80098a0:	4770      	bx	lr
 80098a2:	f803 1b01 	strb.w	r1, [r3], #1
 80098a6:	e7f9      	b.n	800989c <memset+0x4>

080098a8 <_free_r>:
 80098a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098aa:	2900      	cmp	r1, #0
 80098ac:	d044      	beq.n	8009938 <_free_r+0x90>
 80098ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098b2:	9001      	str	r0, [sp, #4]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	f1a1 0404 	sub.w	r4, r1, #4
 80098ba:	bfb8      	it	lt
 80098bc:	18e4      	addlt	r4, r4, r3
 80098be:	f002 ff3f 	bl	800c740 <__malloc_lock>
 80098c2:	4a1e      	ldr	r2, [pc, #120]	; (800993c <_free_r+0x94>)
 80098c4:	9801      	ldr	r0, [sp, #4]
 80098c6:	6813      	ldr	r3, [r2, #0]
 80098c8:	b933      	cbnz	r3, 80098d8 <_free_r+0x30>
 80098ca:	6063      	str	r3, [r4, #4]
 80098cc:	6014      	str	r4, [r2, #0]
 80098ce:	b003      	add	sp, #12
 80098d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098d4:	f002 bf3a 	b.w	800c74c <__malloc_unlock>
 80098d8:	42a3      	cmp	r3, r4
 80098da:	d908      	bls.n	80098ee <_free_r+0x46>
 80098dc:	6825      	ldr	r5, [r4, #0]
 80098de:	1961      	adds	r1, r4, r5
 80098e0:	428b      	cmp	r3, r1
 80098e2:	bf01      	itttt	eq
 80098e4:	6819      	ldreq	r1, [r3, #0]
 80098e6:	685b      	ldreq	r3, [r3, #4]
 80098e8:	1949      	addeq	r1, r1, r5
 80098ea:	6021      	streq	r1, [r4, #0]
 80098ec:	e7ed      	b.n	80098ca <_free_r+0x22>
 80098ee:	461a      	mov	r2, r3
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	b10b      	cbz	r3, 80098f8 <_free_r+0x50>
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	d9fa      	bls.n	80098ee <_free_r+0x46>
 80098f8:	6811      	ldr	r1, [r2, #0]
 80098fa:	1855      	adds	r5, r2, r1
 80098fc:	42a5      	cmp	r5, r4
 80098fe:	d10b      	bne.n	8009918 <_free_r+0x70>
 8009900:	6824      	ldr	r4, [r4, #0]
 8009902:	4421      	add	r1, r4
 8009904:	1854      	adds	r4, r2, r1
 8009906:	42a3      	cmp	r3, r4
 8009908:	6011      	str	r1, [r2, #0]
 800990a:	d1e0      	bne.n	80098ce <_free_r+0x26>
 800990c:	681c      	ldr	r4, [r3, #0]
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	6053      	str	r3, [r2, #4]
 8009912:	4421      	add	r1, r4
 8009914:	6011      	str	r1, [r2, #0]
 8009916:	e7da      	b.n	80098ce <_free_r+0x26>
 8009918:	d902      	bls.n	8009920 <_free_r+0x78>
 800991a:	230c      	movs	r3, #12
 800991c:	6003      	str	r3, [r0, #0]
 800991e:	e7d6      	b.n	80098ce <_free_r+0x26>
 8009920:	6825      	ldr	r5, [r4, #0]
 8009922:	1961      	adds	r1, r4, r5
 8009924:	428b      	cmp	r3, r1
 8009926:	bf04      	itt	eq
 8009928:	6819      	ldreq	r1, [r3, #0]
 800992a:	685b      	ldreq	r3, [r3, #4]
 800992c:	6063      	str	r3, [r4, #4]
 800992e:	bf04      	itt	eq
 8009930:	1949      	addeq	r1, r1, r5
 8009932:	6021      	streq	r1, [r4, #0]
 8009934:	6054      	str	r4, [r2, #4]
 8009936:	e7ca      	b.n	80098ce <_free_r+0x26>
 8009938:	b003      	add	sp, #12
 800993a:	bd30      	pop	{r4, r5, pc}
 800993c:	20000518 	.word	0x20000518

08009940 <sbrk_aligned>:
 8009940:	b570      	push	{r4, r5, r6, lr}
 8009942:	4e0e      	ldr	r6, [pc, #56]	; (800997c <sbrk_aligned+0x3c>)
 8009944:	460c      	mov	r4, r1
 8009946:	6831      	ldr	r1, [r6, #0]
 8009948:	4605      	mov	r5, r0
 800994a:	b911      	cbnz	r1, 8009952 <sbrk_aligned+0x12>
 800994c:	f000 fed4 	bl	800a6f8 <_sbrk_r>
 8009950:	6030      	str	r0, [r6, #0]
 8009952:	4621      	mov	r1, r4
 8009954:	4628      	mov	r0, r5
 8009956:	f000 fecf 	bl	800a6f8 <_sbrk_r>
 800995a:	1c43      	adds	r3, r0, #1
 800995c:	d00a      	beq.n	8009974 <sbrk_aligned+0x34>
 800995e:	1cc4      	adds	r4, r0, #3
 8009960:	f024 0403 	bic.w	r4, r4, #3
 8009964:	42a0      	cmp	r0, r4
 8009966:	d007      	beq.n	8009978 <sbrk_aligned+0x38>
 8009968:	1a21      	subs	r1, r4, r0
 800996a:	4628      	mov	r0, r5
 800996c:	f000 fec4 	bl	800a6f8 <_sbrk_r>
 8009970:	3001      	adds	r0, #1
 8009972:	d101      	bne.n	8009978 <sbrk_aligned+0x38>
 8009974:	f04f 34ff 	mov.w	r4, #4294967295
 8009978:	4620      	mov	r0, r4
 800997a:	bd70      	pop	{r4, r5, r6, pc}
 800997c:	2000051c 	.word	0x2000051c

08009980 <_malloc_r>:
 8009980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009984:	1ccd      	adds	r5, r1, #3
 8009986:	f025 0503 	bic.w	r5, r5, #3
 800998a:	3508      	adds	r5, #8
 800998c:	2d0c      	cmp	r5, #12
 800998e:	bf38      	it	cc
 8009990:	250c      	movcc	r5, #12
 8009992:	2d00      	cmp	r5, #0
 8009994:	4607      	mov	r7, r0
 8009996:	db01      	blt.n	800999c <_malloc_r+0x1c>
 8009998:	42a9      	cmp	r1, r5
 800999a:	d905      	bls.n	80099a8 <_malloc_r+0x28>
 800999c:	230c      	movs	r3, #12
 800999e:	603b      	str	r3, [r7, #0]
 80099a0:	2600      	movs	r6, #0
 80099a2:	4630      	mov	r0, r6
 80099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a8:	4e2e      	ldr	r6, [pc, #184]	; (8009a64 <_malloc_r+0xe4>)
 80099aa:	f002 fec9 	bl	800c740 <__malloc_lock>
 80099ae:	6833      	ldr	r3, [r6, #0]
 80099b0:	461c      	mov	r4, r3
 80099b2:	bb34      	cbnz	r4, 8009a02 <_malloc_r+0x82>
 80099b4:	4629      	mov	r1, r5
 80099b6:	4638      	mov	r0, r7
 80099b8:	f7ff ffc2 	bl	8009940 <sbrk_aligned>
 80099bc:	1c43      	adds	r3, r0, #1
 80099be:	4604      	mov	r4, r0
 80099c0:	d14d      	bne.n	8009a5e <_malloc_r+0xde>
 80099c2:	6834      	ldr	r4, [r6, #0]
 80099c4:	4626      	mov	r6, r4
 80099c6:	2e00      	cmp	r6, #0
 80099c8:	d140      	bne.n	8009a4c <_malloc_r+0xcc>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	4631      	mov	r1, r6
 80099ce:	4638      	mov	r0, r7
 80099d0:	eb04 0803 	add.w	r8, r4, r3
 80099d4:	f000 fe90 	bl	800a6f8 <_sbrk_r>
 80099d8:	4580      	cmp	r8, r0
 80099da:	d13a      	bne.n	8009a52 <_malloc_r+0xd2>
 80099dc:	6821      	ldr	r1, [r4, #0]
 80099de:	3503      	adds	r5, #3
 80099e0:	1a6d      	subs	r5, r5, r1
 80099e2:	f025 0503 	bic.w	r5, r5, #3
 80099e6:	3508      	adds	r5, #8
 80099e8:	2d0c      	cmp	r5, #12
 80099ea:	bf38      	it	cc
 80099ec:	250c      	movcc	r5, #12
 80099ee:	4629      	mov	r1, r5
 80099f0:	4638      	mov	r0, r7
 80099f2:	f7ff ffa5 	bl	8009940 <sbrk_aligned>
 80099f6:	3001      	adds	r0, #1
 80099f8:	d02b      	beq.n	8009a52 <_malloc_r+0xd2>
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	442b      	add	r3, r5
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	e00e      	b.n	8009a20 <_malloc_r+0xa0>
 8009a02:	6822      	ldr	r2, [r4, #0]
 8009a04:	1b52      	subs	r2, r2, r5
 8009a06:	d41e      	bmi.n	8009a46 <_malloc_r+0xc6>
 8009a08:	2a0b      	cmp	r2, #11
 8009a0a:	d916      	bls.n	8009a3a <_malloc_r+0xba>
 8009a0c:	1961      	adds	r1, r4, r5
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	6025      	str	r5, [r4, #0]
 8009a12:	bf18      	it	ne
 8009a14:	6059      	strne	r1, [r3, #4]
 8009a16:	6863      	ldr	r3, [r4, #4]
 8009a18:	bf08      	it	eq
 8009a1a:	6031      	streq	r1, [r6, #0]
 8009a1c:	5162      	str	r2, [r4, r5]
 8009a1e:	604b      	str	r3, [r1, #4]
 8009a20:	4638      	mov	r0, r7
 8009a22:	f104 060b 	add.w	r6, r4, #11
 8009a26:	f002 fe91 	bl	800c74c <__malloc_unlock>
 8009a2a:	f026 0607 	bic.w	r6, r6, #7
 8009a2e:	1d23      	adds	r3, r4, #4
 8009a30:	1af2      	subs	r2, r6, r3
 8009a32:	d0b6      	beq.n	80099a2 <_malloc_r+0x22>
 8009a34:	1b9b      	subs	r3, r3, r6
 8009a36:	50a3      	str	r3, [r4, r2]
 8009a38:	e7b3      	b.n	80099a2 <_malloc_r+0x22>
 8009a3a:	6862      	ldr	r2, [r4, #4]
 8009a3c:	42a3      	cmp	r3, r4
 8009a3e:	bf0c      	ite	eq
 8009a40:	6032      	streq	r2, [r6, #0]
 8009a42:	605a      	strne	r2, [r3, #4]
 8009a44:	e7ec      	b.n	8009a20 <_malloc_r+0xa0>
 8009a46:	4623      	mov	r3, r4
 8009a48:	6864      	ldr	r4, [r4, #4]
 8009a4a:	e7b2      	b.n	80099b2 <_malloc_r+0x32>
 8009a4c:	4634      	mov	r4, r6
 8009a4e:	6876      	ldr	r6, [r6, #4]
 8009a50:	e7b9      	b.n	80099c6 <_malloc_r+0x46>
 8009a52:	230c      	movs	r3, #12
 8009a54:	603b      	str	r3, [r7, #0]
 8009a56:	4638      	mov	r0, r7
 8009a58:	f002 fe78 	bl	800c74c <__malloc_unlock>
 8009a5c:	e7a1      	b.n	80099a2 <_malloc_r+0x22>
 8009a5e:	6025      	str	r5, [r4, #0]
 8009a60:	e7de      	b.n	8009a20 <_malloc_r+0xa0>
 8009a62:	bf00      	nop
 8009a64:	20000518 	.word	0x20000518

08009a68 <__cvt>:
 8009a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6a:	ed2d 8b02 	vpush	{d8}
 8009a6e:	eeb0 8b40 	vmov.f64	d8, d0
 8009a72:	b085      	sub	sp, #20
 8009a74:	4617      	mov	r7, r2
 8009a76:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009a78:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009a7a:	ee18 2a90 	vmov	r2, s17
 8009a7e:	f025 0520 	bic.w	r5, r5, #32
 8009a82:	2a00      	cmp	r2, #0
 8009a84:	bfb6      	itet	lt
 8009a86:	222d      	movlt	r2, #45	; 0x2d
 8009a88:	2200      	movge	r2, #0
 8009a8a:	eeb1 8b40 	vneglt.f64	d8, d0
 8009a8e:	2d46      	cmp	r5, #70	; 0x46
 8009a90:	460c      	mov	r4, r1
 8009a92:	701a      	strb	r2, [r3, #0]
 8009a94:	d004      	beq.n	8009aa0 <__cvt+0x38>
 8009a96:	2d45      	cmp	r5, #69	; 0x45
 8009a98:	d100      	bne.n	8009a9c <__cvt+0x34>
 8009a9a:	3401      	adds	r4, #1
 8009a9c:	2102      	movs	r1, #2
 8009a9e:	e000      	b.n	8009aa2 <__cvt+0x3a>
 8009aa0:	2103      	movs	r1, #3
 8009aa2:	ab03      	add	r3, sp, #12
 8009aa4:	9301      	str	r3, [sp, #4]
 8009aa6:	ab02      	add	r3, sp, #8
 8009aa8:	9300      	str	r3, [sp, #0]
 8009aaa:	4622      	mov	r2, r4
 8009aac:	4633      	mov	r3, r6
 8009aae:	eeb0 0b48 	vmov.f64	d0, d8
 8009ab2:	f001 fd51 	bl	800b558 <_dtoa_r>
 8009ab6:	2d47      	cmp	r5, #71	; 0x47
 8009ab8:	d101      	bne.n	8009abe <__cvt+0x56>
 8009aba:	07fb      	lsls	r3, r7, #31
 8009abc:	d51a      	bpl.n	8009af4 <__cvt+0x8c>
 8009abe:	2d46      	cmp	r5, #70	; 0x46
 8009ac0:	eb00 0204 	add.w	r2, r0, r4
 8009ac4:	d10c      	bne.n	8009ae0 <__cvt+0x78>
 8009ac6:	7803      	ldrb	r3, [r0, #0]
 8009ac8:	2b30      	cmp	r3, #48	; 0x30
 8009aca:	d107      	bne.n	8009adc <__cvt+0x74>
 8009acc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ad4:	bf1c      	itt	ne
 8009ad6:	f1c4 0401 	rsbne	r4, r4, #1
 8009ada:	6034      	strne	r4, [r6, #0]
 8009adc:	6833      	ldr	r3, [r6, #0]
 8009ade:	441a      	add	r2, r3
 8009ae0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae8:	bf08      	it	eq
 8009aea:	9203      	streq	r2, [sp, #12]
 8009aec:	2130      	movs	r1, #48	; 0x30
 8009aee:	9b03      	ldr	r3, [sp, #12]
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d307      	bcc.n	8009b04 <__cvt+0x9c>
 8009af4:	9b03      	ldr	r3, [sp, #12]
 8009af6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009af8:	1a1b      	subs	r3, r3, r0
 8009afa:	6013      	str	r3, [r2, #0]
 8009afc:	b005      	add	sp, #20
 8009afe:	ecbd 8b02 	vpop	{d8}
 8009b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b04:	1c5c      	adds	r4, r3, #1
 8009b06:	9403      	str	r4, [sp, #12]
 8009b08:	7019      	strb	r1, [r3, #0]
 8009b0a:	e7f0      	b.n	8009aee <__cvt+0x86>

08009b0c <__exponent>:
 8009b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009b0e:	4603      	mov	r3, r0
 8009b10:	2900      	cmp	r1, #0
 8009b12:	bfb8      	it	lt
 8009b14:	4249      	neglt	r1, r1
 8009b16:	f803 2b02 	strb.w	r2, [r3], #2
 8009b1a:	bfb4      	ite	lt
 8009b1c:	222d      	movlt	r2, #45	; 0x2d
 8009b1e:	222b      	movge	r2, #43	; 0x2b
 8009b20:	2909      	cmp	r1, #9
 8009b22:	7042      	strb	r2, [r0, #1]
 8009b24:	dd2a      	ble.n	8009b7c <__exponent+0x70>
 8009b26:	f10d 0407 	add.w	r4, sp, #7
 8009b2a:	46a4      	mov	ip, r4
 8009b2c:	270a      	movs	r7, #10
 8009b2e:	46a6      	mov	lr, r4
 8009b30:	460a      	mov	r2, r1
 8009b32:	fb91 f6f7 	sdiv	r6, r1, r7
 8009b36:	fb07 1516 	mls	r5, r7, r6, r1
 8009b3a:	3530      	adds	r5, #48	; 0x30
 8009b3c:	2a63      	cmp	r2, #99	; 0x63
 8009b3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8009b42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009b46:	4631      	mov	r1, r6
 8009b48:	dcf1      	bgt.n	8009b2e <__exponent+0x22>
 8009b4a:	3130      	adds	r1, #48	; 0x30
 8009b4c:	f1ae 0502 	sub.w	r5, lr, #2
 8009b50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009b54:	1c44      	adds	r4, r0, #1
 8009b56:	4629      	mov	r1, r5
 8009b58:	4561      	cmp	r1, ip
 8009b5a:	d30a      	bcc.n	8009b72 <__exponent+0x66>
 8009b5c:	f10d 0209 	add.w	r2, sp, #9
 8009b60:	eba2 020e 	sub.w	r2, r2, lr
 8009b64:	4565      	cmp	r5, ip
 8009b66:	bf88      	it	hi
 8009b68:	2200      	movhi	r2, #0
 8009b6a:	4413      	add	r3, r2
 8009b6c:	1a18      	subs	r0, r3, r0
 8009b6e:	b003      	add	sp, #12
 8009b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009b7a:	e7ed      	b.n	8009b58 <__exponent+0x4c>
 8009b7c:	2330      	movs	r3, #48	; 0x30
 8009b7e:	3130      	adds	r1, #48	; 0x30
 8009b80:	7083      	strb	r3, [r0, #2]
 8009b82:	70c1      	strb	r1, [r0, #3]
 8009b84:	1d03      	adds	r3, r0, #4
 8009b86:	e7f1      	b.n	8009b6c <__exponent+0x60>

08009b88 <_printf_float>:
 8009b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b8c:	b08b      	sub	sp, #44	; 0x2c
 8009b8e:	460c      	mov	r4, r1
 8009b90:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009b94:	4616      	mov	r6, r2
 8009b96:	461f      	mov	r7, r3
 8009b98:	4605      	mov	r5, r0
 8009b9a:	f002 fdbb 	bl	800c714 <_localeconv_r>
 8009b9e:	f8d0 b000 	ldr.w	fp, [r0]
 8009ba2:	4658      	mov	r0, fp
 8009ba4:	f7f6 fb4c 	bl	8000240 <strlen>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	9308      	str	r3, [sp, #32]
 8009bac:	f8d8 3000 	ldr.w	r3, [r8]
 8009bb0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009bb4:	6822      	ldr	r2, [r4, #0]
 8009bb6:	3307      	adds	r3, #7
 8009bb8:	f023 0307 	bic.w	r3, r3, #7
 8009bbc:	f103 0108 	add.w	r1, r3, #8
 8009bc0:	f8c8 1000 	str.w	r1, [r8]
 8009bc4:	4682      	mov	sl, r0
 8009bc6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8009bca:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8009bce:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8009e30 <_printf_float+0x2a8>
 8009bd2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8009bd6:	eeb0 6bc0 	vabs.f64	d6, d0
 8009bda:	eeb4 6b47 	vcmp.f64	d6, d7
 8009bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009be2:	dd24      	ble.n	8009c2e <_printf_float+0xa6>
 8009be4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bec:	d502      	bpl.n	8009bf4 <_printf_float+0x6c>
 8009bee:	232d      	movs	r3, #45	; 0x2d
 8009bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bf4:	4b90      	ldr	r3, [pc, #576]	; (8009e38 <_printf_float+0x2b0>)
 8009bf6:	4891      	ldr	r0, [pc, #580]	; (8009e3c <_printf_float+0x2b4>)
 8009bf8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009bfc:	bf94      	ite	ls
 8009bfe:	4698      	movls	r8, r3
 8009c00:	4680      	movhi	r8, r0
 8009c02:	2303      	movs	r3, #3
 8009c04:	6123      	str	r3, [r4, #16]
 8009c06:	f022 0204 	bic.w	r2, r2, #4
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	6022      	str	r2, [r4, #0]
 8009c0e:	9304      	str	r3, [sp, #16]
 8009c10:	9700      	str	r7, [sp, #0]
 8009c12:	4633      	mov	r3, r6
 8009c14:	aa09      	add	r2, sp, #36	; 0x24
 8009c16:	4621      	mov	r1, r4
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f000 f9d3 	bl	8009fc4 <_printf_common>
 8009c1e:	3001      	adds	r0, #1
 8009c20:	f040 808a 	bne.w	8009d38 <_printf_float+0x1b0>
 8009c24:	f04f 30ff 	mov.w	r0, #4294967295
 8009c28:	b00b      	add	sp, #44	; 0x2c
 8009c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c2e:	eeb4 0b40 	vcmp.f64	d0, d0
 8009c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c36:	d709      	bvc.n	8009c4c <_printf_float+0xc4>
 8009c38:	ee10 3a90 	vmov	r3, s1
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	bfbc      	itt	lt
 8009c40:	232d      	movlt	r3, #45	; 0x2d
 8009c42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009c46:	487e      	ldr	r0, [pc, #504]	; (8009e40 <_printf_float+0x2b8>)
 8009c48:	4b7e      	ldr	r3, [pc, #504]	; (8009e44 <_printf_float+0x2bc>)
 8009c4a:	e7d5      	b.n	8009bf8 <_printf_float+0x70>
 8009c4c:	6863      	ldr	r3, [r4, #4]
 8009c4e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009c52:	9104      	str	r1, [sp, #16]
 8009c54:	1c59      	adds	r1, r3, #1
 8009c56:	d13c      	bne.n	8009cd2 <_printf_float+0x14a>
 8009c58:	2306      	movs	r3, #6
 8009c5a:	6063      	str	r3, [r4, #4]
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	9303      	str	r3, [sp, #12]
 8009c60:	ab08      	add	r3, sp, #32
 8009c62:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009c66:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009c6a:	ab07      	add	r3, sp, #28
 8009c6c:	6861      	ldr	r1, [r4, #4]
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	6022      	str	r2, [r4, #0]
 8009c72:	f10d 031b 	add.w	r3, sp, #27
 8009c76:	4628      	mov	r0, r5
 8009c78:	f7ff fef6 	bl	8009a68 <__cvt>
 8009c7c:	9b04      	ldr	r3, [sp, #16]
 8009c7e:	9907      	ldr	r1, [sp, #28]
 8009c80:	2b47      	cmp	r3, #71	; 0x47
 8009c82:	4680      	mov	r8, r0
 8009c84:	d108      	bne.n	8009c98 <_printf_float+0x110>
 8009c86:	1cc8      	adds	r0, r1, #3
 8009c88:	db02      	blt.n	8009c90 <_printf_float+0x108>
 8009c8a:	6863      	ldr	r3, [r4, #4]
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	dd41      	ble.n	8009d14 <_printf_float+0x18c>
 8009c90:	f1a9 0902 	sub.w	r9, r9, #2
 8009c94:	fa5f f989 	uxtb.w	r9, r9
 8009c98:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009c9c:	d820      	bhi.n	8009ce0 <_printf_float+0x158>
 8009c9e:	3901      	subs	r1, #1
 8009ca0:	464a      	mov	r2, r9
 8009ca2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009ca6:	9107      	str	r1, [sp, #28]
 8009ca8:	f7ff ff30 	bl	8009b0c <__exponent>
 8009cac:	9a08      	ldr	r2, [sp, #32]
 8009cae:	9004      	str	r0, [sp, #16]
 8009cb0:	1813      	adds	r3, r2, r0
 8009cb2:	2a01      	cmp	r2, #1
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	dc02      	bgt.n	8009cbe <_printf_float+0x136>
 8009cb8:	6822      	ldr	r2, [r4, #0]
 8009cba:	07d2      	lsls	r2, r2, #31
 8009cbc:	d501      	bpl.n	8009cc2 <_printf_float+0x13a>
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	6123      	str	r3, [r4, #16]
 8009cc2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d0a2      	beq.n	8009c10 <_printf_float+0x88>
 8009cca:	232d      	movs	r3, #45	; 0x2d
 8009ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009cd0:	e79e      	b.n	8009c10 <_printf_float+0x88>
 8009cd2:	9904      	ldr	r1, [sp, #16]
 8009cd4:	2947      	cmp	r1, #71	; 0x47
 8009cd6:	d1c1      	bne.n	8009c5c <_printf_float+0xd4>
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1bf      	bne.n	8009c5c <_printf_float+0xd4>
 8009cdc:	2301      	movs	r3, #1
 8009cde:	e7bc      	b.n	8009c5a <_printf_float+0xd2>
 8009ce0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009ce4:	d118      	bne.n	8009d18 <_printf_float+0x190>
 8009ce6:	2900      	cmp	r1, #0
 8009ce8:	6863      	ldr	r3, [r4, #4]
 8009cea:	dd0b      	ble.n	8009d04 <_printf_float+0x17c>
 8009cec:	6121      	str	r1, [r4, #16]
 8009cee:	b913      	cbnz	r3, 8009cf6 <_printf_float+0x16e>
 8009cf0:	6822      	ldr	r2, [r4, #0]
 8009cf2:	07d0      	lsls	r0, r2, #31
 8009cf4:	d502      	bpl.n	8009cfc <_printf_float+0x174>
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	440b      	add	r3, r1
 8009cfa:	6123      	str	r3, [r4, #16]
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	65a1      	str	r1, [r4, #88]	; 0x58
 8009d00:	9304      	str	r3, [sp, #16]
 8009d02:	e7de      	b.n	8009cc2 <_printf_float+0x13a>
 8009d04:	b913      	cbnz	r3, 8009d0c <_printf_float+0x184>
 8009d06:	6822      	ldr	r2, [r4, #0]
 8009d08:	07d2      	lsls	r2, r2, #31
 8009d0a:	d501      	bpl.n	8009d10 <_printf_float+0x188>
 8009d0c:	3302      	adds	r3, #2
 8009d0e:	e7f4      	b.n	8009cfa <_printf_float+0x172>
 8009d10:	2301      	movs	r3, #1
 8009d12:	e7f2      	b.n	8009cfa <_printf_float+0x172>
 8009d14:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009d18:	9b08      	ldr	r3, [sp, #32]
 8009d1a:	4299      	cmp	r1, r3
 8009d1c:	db05      	blt.n	8009d2a <_printf_float+0x1a2>
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	6121      	str	r1, [r4, #16]
 8009d22:	07d8      	lsls	r0, r3, #31
 8009d24:	d5ea      	bpl.n	8009cfc <_printf_float+0x174>
 8009d26:	1c4b      	adds	r3, r1, #1
 8009d28:	e7e7      	b.n	8009cfa <_printf_float+0x172>
 8009d2a:	2900      	cmp	r1, #0
 8009d2c:	bfd4      	ite	le
 8009d2e:	f1c1 0202 	rsble	r2, r1, #2
 8009d32:	2201      	movgt	r2, #1
 8009d34:	4413      	add	r3, r2
 8009d36:	e7e0      	b.n	8009cfa <_printf_float+0x172>
 8009d38:	6823      	ldr	r3, [r4, #0]
 8009d3a:	055a      	lsls	r2, r3, #21
 8009d3c:	d407      	bmi.n	8009d4e <_printf_float+0x1c6>
 8009d3e:	6923      	ldr	r3, [r4, #16]
 8009d40:	4642      	mov	r2, r8
 8009d42:	4631      	mov	r1, r6
 8009d44:	4628      	mov	r0, r5
 8009d46:	47b8      	blx	r7
 8009d48:	3001      	adds	r0, #1
 8009d4a:	d12a      	bne.n	8009da2 <_printf_float+0x21a>
 8009d4c:	e76a      	b.n	8009c24 <_printf_float+0x9c>
 8009d4e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009d52:	f240 80e2 	bls.w	8009f1a <_printf_float+0x392>
 8009d56:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009d5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d62:	d133      	bne.n	8009dcc <_printf_float+0x244>
 8009d64:	4a38      	ldr	r2, [pc, #224]	; (8009e48 <_printf_float+0x2c0>)
 8009d66:	2301      	movs	r3, #1
 8009d68:	4631      	mov	r1, r6
 8009d6a:	4628      	mov	r0, r5
 8009d6c:	47b8      	blx	r7
 8009d6e:	3001      	adds	r0, #1
 8009d70:	f43f af58 	beq.w	8009c24 <_printf_float+0x9c>
 8009d74:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	db02      	blt.n	8009d82 <_printf_float+0x1fa>
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	07d8      	lsls	r0, r3, #31
 8009d80:	d50f      	bpl.n	8009da2 <_printf_float+0x21a>
 8009d82:	4653      	mov	r3, sl
 8009d84:	465a      	mov	r2, fp
 8009d86:	4631      	mov	r1, r6
 8009d88:	4628      	mov	r0, r5
 8009d8a:	47b8      	blx	r7
 8009d8c:	3001      	adds	r0, #1
 8009d8e:	f43f af49 	beq.w	8009c24 <_printf_float+0x9c>
 8009d92:	f04f 0800 	mov.w	r8, #0
 8009d96:	f104 091a 	add.w	r9, r4, #26
 8009d9a:	9b08      	ldr	r3, [sp, #32]
 8009d9c:	3b01      	subs	r3, #1
 8009d9e:	4543      	cmp	r3, r8
 8009da0:	dc09      	bgt.n	8009db6 <_printf_float+0x22e>
 8009da2:	6823      	ldr	r3, [r4, #0]
 8009da4:	079b      	lsls	r3, r3, #30
 8009da6:	f100 8108 	bmi.w	8009fba <_printf_float+0x432>
 8009daa:	68e0      	ldr	r0, [r4, #12]
 8009dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dae:	4298      	cmp	r0, r3
 8009db0:	bfb8      	it	lt
 8009db2:	4618      	movlt	r0, r3
 8009db4:	e738      	b.n	8009c28 <_printf_float+0xa0>
 8009db6:	2301      	movs	r3, #1
 8009db8:	464a      	mov	r2, r9
 8009dba:	4631      	mov	r1, r6
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	47b8      	blx	r7
 8009dc0:	3001      	adds	r0, #1
 8009dc2:	f43f af2f 	beq.w	8009c24 <_printf_float+0x9c>
 8009dc6:	f108 0801 	add.w	r8, r8, #1
 8009dca:	e7e6      	b.n	8009d9a <_printf_float+0x212>
 8009dcc:	9b07      	ldr	r3, [sp, #28]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	dc3c      	bgt.n	8009e4c <_printf_float+0x2c4>
 8009dd2:	4a1d      	ldr	r2, [pc, #116]	; (8009e48 <_printf_float+0x2c0>)
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4628      	mov	r0, r5
 8009dda:	47b8      	blx	r7
 8009ddc:	3001      	adds	r0, #1
 8009dde:	f43f af21 	beq.w	8009c24 <_printf_float+0x9c>
 8009de2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	d102      	bne.n	8009df0 <_printf_float+0x268>
 8009dea:	6823      	ldr	r3, [r4, #0]
 8009dec:	07d9      	lsls	r1, r3, #31
 8009dee:	d5d8      	bpl.n	8009da2 <_printf_float+0x21a>
 8009df0:	4653      	mov	r3, sl
 8009df2:	465a      	mov	r2, fp
 8009df4:	4631      	mov	r1, r6
 8009df6:	4628      	mov	r0, r5
 8009df8:	47b8      	blx	r7
 8009dfa:	3001      	adds	r0, #1
 8009dfc:	f43f af12 	beq.w	8009c24 <_printf_float+0x9c>
 8009e00:	f04f 0900 	mov.w	r9, #0
 8009e04:	f104 0a1a 	add.w	sl, r4, #26
 8009e08:	9b07      	ldr	r3, [sp, #28]
 8009e0a:	425b      	negs	r3, r3
 8009e0c:	454b      	cmp	r3, r9
 8009e0e:	dc01      	bgt.n	8009e14 <_printf_float+0x28c>
 8009e10:	9b08      	ldr	r3, [sp, #32]
 8009e12:	e795      	b.n	8009d40 <_printf_float+0x1b8>
 8009e14:	2301      	movs	r3, #1
 8009e16:	4652      	mov	r2, sl
 8009e18:	4631      	mov	r1, r6
 8009e1a:	4628      	mov	r0, r5
 8009e1c:	47b8      	blx	r7
 8009e1e:	3001      	adds	r0, #1
 8009e20:	f43f af00 	beq.w	8009c24 <_printf_float+0x9c>
 8009e24:	f109 0901 	add.w	r9, r9, #1
 8009e28:	e7ee      	b.n	8009e08 <_printf_float+0x280>
 8009e2a:	bf00      	nop
 8009e2c:	f3af 8000 	nop.w
 8009e30:	ffffffff 	.word	0xffffffff
 8009e34:	7fefffff 	.word	0x7fefffff
 8009e38:	08012228 	.word	0x08012228
 8009e3c:	0801222c 	.word	0x0801222c
 8009e40:	08012234 	.word	0x08012234
 8009e44:	08012230 	.word	0x08012230
 8009e48:	08012238 	.word	0x08012238
 8009e4c:	9a08      	ldr	r2, [sp, #32]
 8009e4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e50:	429a      	cmp	r2, r3
 8009e52:	bfa8      	it	ge
 8009e54:	461a      	movge	r2, r3
 8009e56:	2a00      	cmp	r2, #0
 8009e58:	4691      	mov	r9, r2
 8009e5a:	dc38      	bgt.n	8009ece <_printf_float+0x346>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	9305      	str	r3, [sp, #20]
 8009e60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e64:	f104 021a 	add.w	r2, r4, #26
 8009e68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009e6a:	9905      	ldr	r1, [sp, #20]
 8009e6c:	9304      	str	r3, [sp, #16]
 8009e6e:	eba3 0309 	sub.w	r3, r3, r9
 8009e72:	428b      	cmp	r3, r1
 8009e74:	dc33      	bgt.n	8009ede <_printf_float+0x356>
 8009e76:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	db3c      	blt.n	8009ef8 <_printf_float+0x370>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	07da      	lsls	r2, r3, #31
 8009e82:	d439      	bmi.n	8009ef8 <_printf_float+0x370>
 8009e84:	9b08      	ldr	r3, [sp, #32]
 8009e86:	9a04      	ldr	r2, [sp, #16]
 8009e88:	9907      	ldr	r1, [sp, #28]
 8009e8a:	1a9a      	subs	r2, r3, r2
 8009e8c:	eba3 0901 	sub.w	r9, r3, r1
 8009e90:	4591      	cmp	r9, r2
 8009e92:	bfa8      	it	ge
 8009e94:	4691      	movge	r9, r2
 8009e96:	f1b9 0f00 	cmp.w	r9, #0
 8009e9a:	dc35      	bgt.n	8009f08 <_printf_float+0x380>
 8009e9c:	f04f 0800 	mov.w	r8, #0
 8009ea0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ea4:	f104 0a1a 	add.w	sl, r4, #26
 8009ea8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009eac:	1a9b      	subs	r3, r3, r2
 8009eae:	eba3 0309 	sub.w	r3, r3, r9
 8009eb2:	4543      	cmp	r3, r8
 8009eb4:	f77f af75 	ble.w	8009da2 <_printf_float+0x21a>
 8009eb8:	2301      	movs	r3, #1
 8009eba:	4652      	mov	r2, sl
 8009ebc:	4631      	mov	r1, r6
 8009ebe:	4628      	mov	r0, r5
 8009ec0:	47b8      	blx	r7
 8009ec2:	3001      	adds	r0, #1
 8009ec4:	f43f aeae 	beq.w	8009c24 <_printf_float+0x9c>
 8009ec8:	f108 0801 	add.w	r8, r8, #1
 8009ecc:	e7ec      	b.n	8009ea8 <_printf_float+0x320>
 8009ece:	4613      	mov	r3, r2
 8009ed0:	4631      	mov	r1, r6
 8009ed2:	4642      	mov	r2, r8
 8009ed4:	4628      	mov	r0, r5
 8009ed6:	47b8      	blx	r7
 8009ed8:	3001      	adds	r0, #1
 8009eda:	d1bf      	bne.n	8009e5c <_printf_float+0x2d4>
 8009edc:	e6a2      	b.n	8009c24 <_printf_float+0x9c>
 8009ede:	2301      	movs	r3, #1
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4628      	mov	r0, r5
 8009ee4:	9204      	str	r2, [sp, #16]
 8009ee6:	47b8      	blx	r7
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f43f ae9b 	beq.w	8009c24 <_printf_float+0x9c>
 8009eee:	9b05      	ldr	r3, [sp, #20]
 8009ef0:	9a04      	ldr	r2, [sp, #16]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	9305      	str	r3, [sp, #20]
 8009ef6:	e7b7      	b.n	8009e68 <_printf_float+0x2e0>
 8009ef8:	4653      	mov	r3, sl
 8009efa:	465a      	mov	r2, fp
 8009efc:	4631      	mov	r1, r6
 8009efe:	4628      	mov	r0, r5
 8009f00:	47b8      	blx	r7
 8009f02:	3001      	adds	r0, #1
 8009f04:	d1be      	bne.n	8009e84 <_printf_float+0x2fc>
 8009f06:	e68d      	b.n	8009c24 <_printf_float+0x9c>
 8009f08:	9a04      	ldr	r2, [sp, #16]
 8009f0a:	464b      	mov	r3, r9
 8009f0c:	4442      	add	r2, r8
 8009f0e:	4631      	mov	r1, r6
 8009f10:	4628      	mov	r0, r5
 8009f12:	47b8      	blx	r7
 8009f14:	3001      	adds	r0, #1
 8009f16:	d1c1      	bne.n	8009e9c <_printf_float+0x314>
 8009f18:	e684      	b.n	8009c24 <_printf_float+0x9c>
 8009f1a:	9a08      	ldr	r2, [sp, #32]
 8009f1c:	2a01      	cmp	r2, #1
 8009f1e:	dc01      	bgt.n	8009f24 <_printf_float+0x39c>
 8009f20:	07db      	lsls	r3, r3, #31
 8009f22:	d537      	bpl.n	8009f94 <_printf_float+0x40c>
 8009f24:	2301      	movs	r3, #1
 8009f26:	4642      	mov	r2, r8
 8009f28:	4631      	mov	r1, r6
 8009f2a:	4628      	mov	r0, r5
 8009f2c:	47b8      	blx	r7
 8009f2e:	3001      	adds	r0, #1
 8009f30:	f43f ae78 	beq.w	8009c24 <_printf_float+0x9c>
 8009f34:	4653      	mov	r3, sl
 8009f36:	465a      	mov	r2, fp
 8009f38:	4631      	mov	r1, r6
 8009f3a:	4628      	mov	r0, r5
 8009f3c:	47b8      	blx	r7
 8009f3e:	3001      	adds	r0, #1
 8009f40:	f43f ae70 	beq.w	8009c24 <_printf_float+0x9c>
 8009f44:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009f48:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f50:	d01b      	beq.n	8009f8a <_printf_float+0x402>
 8009f52:	9b08      	ldr	r3, [sp, #32]
 8009f54:	f108 0201 	add.w	r2, r8, #1
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	4631      	mov	r1, r6
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	47b8      	blx	r7
 8009f60:	3001      	adds	r0, #1
 8009f62:	d10e      	bne.n	8009f82 <_printf_float+0x3fa>
 8009f64:	e65e      	b.n	8009c24 <_printf_float+0x9c>
 8009f66:	2301      	movs	r3, #1
 8009f68:	464a      	mov	r2, r9
 8009f6a:	4631      	mov	r1, r6
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	47b8      	blx	r7
 8009f70:	3001      	adds	r0, #1
 8009f72:	f43f ae57 	beq.w	8009c24 <_printf_float+0x9c>
 8009f76:	f108 0801 	add.w	r8, r8, #1
 8009f7a:	9b08      	ldr	r3, [sp, #32]
 8009f7c:	3b01      	subs	r3, #1
 8009f7e:	4543      	cmp	r3, r8
 8009f80:	dcf1      	bgt.n	8009f66 <_printf_float+0x3de>
 8009f82:	9b04      	ldr	r3, [sp, #16]
 8009f84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009f88:	e6db      	b.n	8009d42 <_printf_float+0x1ba>
 8009f8a:	f04f 0800 	mov.w	r8, #0
 8009f8e:	f104 091a 	add.w	r9, r4, #26
 8009f92:	e7f2      	b.n	8009f7a <_printf_float+0x3f2>
 8009f94:	2301      	movs	r3, #1
 8009f96:	4642      	mov	r2, r8
 8009f98:	e7df      	b.n	8009f5a <_printf_float+0x3d2>
 8009f9a:	2301      	movs	r3, #1
 8009f9c:	464a      	mov	r2, r9
 8009f9e:	4631      	mov	r1, r6
 8009fa0:	4628      	mov	r0, r5
 8009fa2:	47b8      	blx	r7
 8009fa4:	3001      	adds	r0, #1
 8009fa6:	f43f ae3d 	beq.w	8009c24 <_printf_float+0x9c>
 8009faa:	f108 0801 	add.w	r8, r8, #1
 8009fae:	68e3      	ldr	r3, [r4, #12]
 8009fb0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009fb2:	1a5b      	subs	r3, r3, r1
 8009fb4:	4543      	cmp	r3, r8
 8009fb6:	dcf0      	bgt.n	8009f9a <_printf_float+0x412>
 8009fb8:	e6f7      	b.n	8009daa <_printf_float+0x222>
 8009fba:	f04f 0800 	mov.w	r8, #0
 8009fbe:	f104 0919 	add.w	r9, r4, #25
 8009fc2:	e7f4      	b.n	8009fae <_printf_float+0x426>

08009fc4 <_printf_common>:
 8009fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc8:	4616      	mov	r6, r2
 8009fca:	4699      	mov	r9, r3
 8009fcc:	688a      	ldr	r2, [r1, #8]
 8009fce:	690b      	ldr	r3, [r1, #16]
 8009fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fd4:	4293      	cmp	r3, r2
 8009fd6:	bfb8      	it	lt
 8009fd8:	4613      	movlt	r3, r2
 8009fda:	6033      	str	r3, [r6, #0]
 8009fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fe0:	4607      	mov	r7, r0
 8009fe2:	460c      	mov	r4, r1
 8009fe4:	b10a      	cbz	r2, 8009fea <_printf_common+0x26>
 8009fe6:	3301      	adds	r3, #1
 8009fe8:	6033      	str	r3, [r6, #0]
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	0699      	lsls	r1, r3, #26
 8009fee:	bf42      	ittt	mi
 8009ff0:	6833      	ldrmi	r3, [r6, #0]
 8009ff2:	3302      	addmi	r3, #2
 8009ff4:	6033      	strmi	r3, [r6, #0]
 8009ff6:	6825      	ldr	r5, [r4, #0]
 8009ff8:	f015 0506 	ands.w	r5, r5, #6
 8009ffc:	d106      	bne.n	800a00c <_printf_common+0x48>
 8009ffe:	f104 0a19 	add.w	sl, r4, #25
 800a002:	68e3      	ldr	r3, [r4, #12]
 800a004:	6832      	ldr	r2, [r6, #0]
 800a006:	1a9b      	subs	r3, r3, r2
 800a008:	42ab      	cmp	r3, r5
 800a00a:	dc26      	bgt.n	800a05a <_printf_common+0x96>
 800a00c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a010:	1e13      	subs	r3, r2, #0
 800a012:	6822      	ldr	r2, [r4, #0]
 800a014:	bf18      	it	ne
 800a016:	2301      	movne	r3, #1
 800a018:	0692      	lsls	r2, r2, #26
 800a01a:	d42b      	bmi.n	800a074 <_printf_common+0xb0>
 800a01c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a020:	4649      	mov	r1, r9
 800a022:	4638      	mov	r0, r7
 800a024:	47c0      	blx	r8
 800a026:	3001      	adds	r0, #1
 800a028:	d01e      	beq.n	800a068 <_printf_common+0xa4>
 800a02a:	6823      	ldr	r3, [r4, #0]
 800a02c:	68e5      	ldr	r5, [r4, #12]
 800a02e:	6832      	ldr	r2, [r6, #0]
 800a030:	f003 0306 	and.w	r3, r3, #6
 800a034:	2b04      	cmp	r3, #4
 800a036:	bf08      	it	eq
 800a038:	1aad      	subeq	r5, r5, r2
 800a03a:	68a3      	ldr	r3, [r4, #8]
 800a03c:	6922      	ldr	r2, [r4, #16]
 800a03e:	bf0c      	ite	eq
 800a040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a044:	2500      	movne	r5, #0
 800a046:	4293      	cmp	r3, r2
 800a048:	bfc4      	itt	gt
 800a04a:	1a9b      	subgt	r3, r3, r2
 800a04c:	18ed      	addgt	r5, r5, r3
 800a04e:	2600      	movs	r6, #0
 800a050:	341a      	adds	r4, #26
 800a052:	42b5      	cmp	r5, r6
 800a054:	d11a      	bne.n	800a08c <_printf_common+0xc8>
 800a056:	2000      	movs	r0, #0
 800a058:	e008      	b.n	800a06c <_printf_common+0xa8>
 800a05a:	2301      	movs	r3, #1
 800a05c:	4652      	mov	r2, sl
 800a05e:	4649      	mov	r1, r9
 800a060:	4638      	mov	r0, r7
 800a062:	47c0      	blx	r8
 800a064:	3001      	adds	r0, #1
 800a066:	d103      	bne.n	800a070 <_printf_common+0xac>
 800a068:	f04f 30ff 	mov.w	r0, #4294967295
 800a06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a070:	3501      	adds	r5, #1
 800a072:	e7c6      	b.n	800a002 <_printf_common+0x3e>
 800a074:	18e1      	adds	r1, r4, r3
 800a076:	1c5a      	adds	r2, r3, #1
 800a078:	2030      	movs	r0, #48	; 0x30
 800a07a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a07e:	4422      	add	r2, r4
 800a080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a088:	3302      	adds	r3, #2
 800a08a:	e7c7      	b.n	800a01c <_printf_common+0x58>
 800a08c:	2301      	movs	r3, #1
 800a08e:	4622      	mov	r2, r4
 800a090:	4649      	mov	r1, r9
 800a092:	4638      	mov	r0, r7
 800a094:	47c0      	blx	r8
 800a096:	3001      	adds	r0, #1
 800a098:	d0e6      	beq.n	800a068 <_printf_common+0xa4>
 800a09a:	3601      	adds	r6, #1
 800a09c:	e7d9      	b.n	800a052 <_printf_common+0x8e>
	...

0800a0a0 <_printf_i>:
 800a0a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a4:	7e0f      	ldrb	r7, [r1, #24]
 800a0a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0a8:	2f78      	cmp	r7, #120	; 0x78
 800a0aa:	4691      	mov	r9, r2
 800a0ac:	4680      	mov	r8, r0
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	469a      	mov	sl, r3
 800a0b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0b6:	d807      	bhi.n	800a0c8 <_printf_i+0x28>
 800a0b8:	2f62      	cmp	r7, #98	; 0x62
 800a0ba:	d80a      	bhi.n	800a0d2 <_printf_i+0x32>
 800a0bc:	2f00      	cmp	r7, #0
 800a0be:	f000 80d8 	beq.w	800a272 <_printf_i+0x1d2>
 800a0c2:	2f58      	cmp	r7, #88	; 0x58
 800a0c4:	f000 80a3 	beq.w	800a20e <_printf_i+0x16e>
 800a0c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0d0:	e03a      	b.n	800a148 <_printf_i+0xa8>
 800a0d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0d6:	2b15      	cmp	r3, #21
 800a0d8:	d8f6      	bhi.n	800a0c8 <_printf_i+0x28>
 800a0da:	a101      	add	r1, pc, #4	; (adr r1, 800a0e0 <_printf_i+0x40>)
 800a0dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0e0:	0800a139 	.word	0x0800a139
 800a0e4:	0800a14d 	.word	0x0800a14d
 800a0e8:	0800a0c9 	.word	0x0800a0c9
 800a0ec:	0800a0c9 	.word	0x0800a0c9
 800a0f0:	0800a0c9 	.word	0x0800a0c9
 800a0f4:	0800a0c9 	.word	0x0800a0c9
 800a0f8:	0800a14d 	.word	0x0800a14d
 800a0fc:	0800a0c9 	.word	0x0800a0c9
 800a100:	0800a0c9 	.word	0x0800a0c9
 800a104:	0800a0c9 	.word	0x0800a0c9
 800a108:	0800a0c9 	.word	0x0800a0c9
 800a10c:	0800a259 	.word	0x0800a259
 800a110:	0800a17d 	.word	0x0800a17d
 800a114:	0800a23b 	.word	0x0800a23b
 800a118:	0800a0c9 	.word	0x0800a0c9
 800a11c:	0800a0c9 	.word	0x0800a0c9
 800a120:	0800a27b 	.word	0x0800a27b
 800a124:	0800a0c9 	.word	0x0800a0c9
 800a128:	0800a17d 	.word	0x0800a17d
 800a12c:	0800a0c9 	.word	0x0800a0c9
 800a130:	0800a0c9 	.word	0x0800a0c9
 800a134:	0800a243 	.word	0x0800a243
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	1d1a      	adds	r2, r3, #4
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	602a      	str	r2, [r5, #0]
 800a140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a148:	2301      	movs	r3, #1
 800a14a:	e0a3      	b.n	800a294 <_printf_i+0x1f4>
 800a14c:	6820      	ldr	r0, [r4, #0]
 800a14e:	6829      	ldr	r1, [r5, #0]
 800a150:	0606      	lsls	r6, r0, #24
 800a152:	f101 0304 	add.w	r3, r1, #4
 800a156:	d50a      	bpl.n	800a16e <_printf_i+0xce>
 800a158:	680e      	ldr	r6, [r1, #0]
 800a15a:	602b      	str	r3, [r5, #0]
 800a15c:	2e00      	cmp	r6, #0
 800a15e:	da03      	bge.n	800a168 <_printf_i+0xc8>
 800a160:	232d      	movs	r3, #45	; 0x2d
 800a162:	4276      	negs	r6, r6
 800a164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a168:	485e      	ldr	r0, [pc, #376]	; (800a2e4 <_printf_i+0x244>)
 800a16a:	230a      	movs	r3, #10
 800a16c:	e019      	b.n	800a1a2 <_printf_i+0x102>
 800a16e:	680e      	ldr	r6, [r1, #0]
 800a170:	602b      	str	r3, [r5, #0]
 800a172:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a176:	bf18      	it	ne
 800a178:	b236      	sxthne	r6, r6
 800a17a:	e7ef      	b.n	800a15c <_printf_i+0xbc>
 800a17c:	682b      	ldr	r3, [r5, #0]
 800a17e:	6820      	ldr	r0, [r4, #0]
 800a180:	1d19      	adds	r1, r3, #4
 800a182:	6029      	str	r1, [r5, #0]
 800a184:	0601      	lsls	r1, r0, #24
 800a186:	d501      	bpl.n	800a18c <_printf_i+0xec>
 800a188:	681e      	ldr	r6, [r3, #0]
 800a18a:	e002      	b.n	800a192 <_printf_i+0xf2>
 800a18c:	0646      	lsls	r6, r0, #25
 800a18e:	d5fb      	bpl.n	800a188 <_printf_i+0xe8>
 800a190:	881e      	ldrh	r6, [r3, #0]
 800a192:	4854      	ldr	r0, [pc, #336]	; (800a2e4 <_printf_i+0x244>)
 800a194:	2f6f      	cmp	r7, #111	; 0x6f
 800a196:	bf0c      	ite	eq
 800a198:	2308      	moveq	r3, #8
 800a19a:	230a      	movne	r3, #10
 800a19c:	2100      	movs	r1, #0
 800a19e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1a2:	6865      	ldr	r5, [r4, #4]
 800a1a4:	60a5      	str	r5, [r4, #8]
 800a1a6:	2d00      	cmp	r5, #0
 800a1a8:	bfa2      	ittt	ge
 800a1aa:	6821      	ldrge	r1, [r4, #0]
 800a1ac:	f021 0104 	bicge.w	r1, r1, #4
 800a1b0:	6021      	strge	r1, [r4, #0]
 800a1b2:	b90e      	cbnz	r6, 800a1b8 <_printf_i+0x118>
 800a1b4:	2d00      	cmp	r5, #0
 800a1b6:	d04d      	beq.n	800a254 <_printf_i+0x1b4>
 800a1b8:	4615      	mov	r5, r2
 800a1ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1be:	fb03 6711 	mls	r7, r3, r1, r6
 800a1c2:	5dc7      	ldrb	r7, [r0, r7]
 800a1c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1c8:	4637      	mov	r7, r6
 800a1ca:	42bb      	cmp	r3, r7
 800a1cc:	460e      	mov	r6, r1
 800a1ce:	d9f4      	bls.n	800a1ba <_printf_i+0x11a>
 800a1d0:	2b08      	cmp	r3, #8
 800a1d2:	d10b      	bne.n	800a1ec <_printf_i+0x14c>
 800a1d4:	6823      	ldr	r3, [r4, #0]
 800a1d6:	07de      	lsls	r6, r3, #31
 800a1d8:	d508      	bpl.n	800a1ec <_printf_i+0x14c>
 800a1da:	6923      	ldr	r3, [r4, #16]
 800a1dc:	6861      	ldr	r1, [r4, #4]
 800a1de:	4299      	cmp	r1, r3
 800a1e0:	bfde      	ittt	le
 800a1e2:	2330      	movle	r3, #48	; 0x30
 800a1e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1e8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1ec:	1b52      	subs	r2, r2, r5
 800a1ee:	6122      	str	r2, [r4, #16]
 800a1f0:	f8cd a000 	str.w	sl, [sp]
 800a1f4:	464b      	mov	r3, r9
 800a1f6:	aa03      	add	r2, sp, #12
 800a1f8:	4621      	mov	r1, r4
 800a1fa:	4640      	mov	r0, r8
 800a1fc:	f7ff fee2 	bl	8009fc4 <_printf_common>
 800a200:	3001      	adds	r0, #1
 800a202:	d14c      	bne.n	800a29e <_printf_i+0x1fe>
 800a204:	f04f 30ff 	mov.w	r0, #4294967295
 800a208:	b004      	add	sp, #16
 800a20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a20e:	4835      	ldr	r0, [pc, #212]	; (800a2e4 <_printf_i+0x244>)
 800a210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a214:	6829      	ldr	r1, [r5, #0]
 800a216:	6823      	ldr	r3, [r4, #0]
 800a218:	f851 6b04 	ldr.w	r6, [r1], #4
 800a21c:	6029      	str	r1, [r5, #0]
 800a21e:	061d      	lsls	r5, r3, #24
 800a220:	d514      	bpl.n	800a24c <_printf_i+0x1ac>
 800a222:	07df      	lsls	r7, r3, #31
 800a224:	bf44      	itt	mi
 800a226:	f043 0320 	orrmi.w	r3, r3, #32
 800a22a:	6023      	strmi	r3, [r4, #0]
 800a22c:	b91e      	cbnz	r6, 800a236 <_printf_i+0x196>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	f023 0320 	bic.w	r3, r3, #32
 800a234:	6023      	str	r3, [r4, #0]
 800a236:	2310      	movs	r3, #16
 800a238:	e7b0      	b.n	800a19c <_printf_i+0xfc>
 800a23a:	6823      	ldr	r3, [r4, #0]
 800a23c:	f043 0320 	orr.w	r3, r3, #32
 800a240:	6023      	str	r3, [r4, #0]
 800a242:	2378      	movs	r3, #120	; 0x78
 800a244:	4828      	ldr	r0, [pc, #160]	; (800a2e8 <_printf_i+0x248>)
 800a246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a24a:	e7e3      	b.n	800a214 <_printf_i+0x174>
 800a24c:	0659      	lsls	r1, r3, #25
 800a24e:	bf48      	it	mi
 800a250:	b2b6      	uxthmi	r6, r6
 800a252:	e7e6      	b.n	800a222 <_printf_i+0x182>
 800a254:	4615      	mov	r5, r2
 800a256:	e7bb      	b.n	800a1d0 <_printf_i+0x130>
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	6826      	ldr	r6, [r4, #0]
 800a25c:	6961      	ldr	r1, [r4, #20]
 800a25e:	1d18      	adds	r0, r3, #4
 800a260:	6028      	str	r0, [r5, #0]
 800a262:	0635      	lsls	r5, r6, #24
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	d501      	bpl.n	800a26c <_printf_i+0x1cc>
 800a268:	6019      	str	r1, [r3, #0]
 800a26a:	e002      	b.n	800a272 <_printf_i+0x1d2>
 800a26c:	0670      	lsls	r0, r6, #25
 800a26e:	d5fb      	bpl.n	800a268 <_printf_i+0x1c8>
 800a270:	8019      	strh	r1, [r3, #0]
 800a272:	2300      	movs	r3, #0
 800a274:	6123      	str	r3, [r4, #16]
 800a276:	4615      	mov	r5, r2
 800a278:	e7ba      	b.n	800a1f0 <_printf_i+0x150>
 800a27a:	682b      	ldr	r3, [r5, #0]
 800a27c:	1d1a      	adds	r2, r3, #4
 800a27e:	602a      	str	r2, [r5, #0]
 800a280:	681d      	ldr	r5, [r3, #0]
 800a282:	6862      	ldr	r2, [r4, #4]
 800a284:	2100      	movs	r1, #0
 800a286:	4628      	mov	r0, r5
 800a288:	f7f5 ffe2 	bl	8000250 <memchr>
 800a28c:	b108      	cbz	r0, 800a292 <_printf_i+0x1f2>
 800a28e:	1b40      	subs	r0, r0, r5
 800a290:	6060      	str	r0, [r4, #4]
 800a292:	6863      	ldr	r3, [r4, #4]
 800a294:	6123      	str	r3, [r4, #16]
 800a296:	2300      	movs	r3, #0
 800a298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a29c:	e7a8      	b.n	800a1f0 <_printf_i+0x150>
 800a29e:	6923      	ldr	r3, [r4, #16]
 800a2a0:	462a      	mov	r2, r5
 800a2a2:	4649      	mov	r1, r9
 800a2a4:	4640      	mov	r0, r8
 800a2a6:	47d0      	blx	sl
 800a2a8:	3001      	adds	r0, #1
 800a2aa:	d0ab      	beq.n	800a204 <_printf_i+0x164>
 800a2ac:	6823      	ldr	r3, [r4, #0]
 800a2ae:	079b      	lsls	r3, r3, #30
 800a2b0:	d413      	bmi.n	800a2da <_printf_i+0x23a>
 800a2b2:	68e0      	ldr	r0, [r4, #12]
 800a2b4:	9b03      	ldr	r3, [sp, #12]
 800a2b6:	4298      	cmp	r0, r3
 800a2b8:	bfb8      	it	lt
 800a2ba:	4618      	movlt	r0, r3
 800a2bc:	e7a4      	b.n	800a208 <_printf_i+0x168>
 800a2be:	2301      	movs	r3, #1
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	4649      	mov	r1, r9
 800a2c4:	4640      	mov	r0, r8
 800a2c6:	47d0      	blx	sl
 800a2c8:	3001      	adds	r0, #1
 800a2ca:	d09b      	beq.n	800a204 <_printf_i+0x164>
 800a2cc:	3501      	adds	r5, #1
 800a2ce:	68e3      	ldr	r3, [r4, #12]
 800a2d0:	9903      	ldr	r1, [sp, #12]
 800a2d2:	1a5b      	subs	r3, r3, r1
 800a2d4:	42ab      	cmp	r3, r5
 800a2d6:	dcf2      	bgt.n	800a2be <_printf_i+0x21e>
 800a2d8:	e7eb      	b.n	800a2b2 <_printf_i+0x212>
 800a2da:	2500      	movs	r5, #0
 800a2dc:	f104 0619 	add.w	r6, r4, #25
 800a2e0:	e7f5      	b.n	800a2ce <_printf_i+0x22e>
 800a2e2:	bf00      	nop
 800a2e4:	0801223a 	.word	0x0801223a
 800a2e8:	0801224b 	.word	0x0801224b

0800a2ec <_scanf_float>:
 800a2ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f0:	b087      	sub	sp, #28
 800a2f2:	4617      	mov	r7, r2
 800a2f4:	9303      	str	r3, [sp, #12]
 800a2f6:	688b      	ldr	r3, [r1, #8]
 800a2f8:	1e5a      	subs	r2, r3, #1
 800a2fa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a2fe:	bf83      	ittte	hi
 800a300:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a304:	195b      	addhi	r3, r3, r5
 800a306:	9302      	strhi	r3, [sp, #8]
 800a308:	2300      	movls	r3, #0
 800a30a:	bf86      	itte	hi
 800a30c:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a310:	608b      	strhi	r3, [r1, #8]
 800a312:	9302      	strls	r3, [sp, #8]
 800a314:	680b      	ldr	r3, [r1, #0]
 800a316:	468b      	mov	fp, r1
 800a318:	2500      	movs	r5, #0
 800a31a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a31e:	f84b 3b1c 	str.w	r3, [fp], #28
 800a322:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a326:	4680      	mov	r8, r0
 800a328:	460c      	mov	r4, r1
 800a32a:	465e      	mov	r6, fp
 800a32c:	46aa      	mov	sl, r5
 800a32e:	46a9      	mov	r9, r5
 800a330:	9501      	str	r5, [sp, #4]
 800a332:	68a2      	ldr	r2, [r4, #8]
 800a334:	b152      	cbz	r2, 800a34c <_scanf_float+0x60>
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b4e      	cmp	r3, #78	; 0x4e
 800a33c:	d864      	bhi.n	800a408 <_scanf_float+0x11c>
 800a33e:	2b40      	cmp	r3, #64	; 0x40
 800a340:	d83c      	bhi.n	800a3bc <_scanf_float+0xd0>
 800a342:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a346:	b2c8      	uxtb	r0, r1
 800a348:	280e      	cmp	r0, #14
 800a34a:	d93a      	bls.n	800a3c2 <_scanf_float+0xd6>
 800a34c:	f1b9 0f00 	cmp.w	r9, #0
 800a350:	d003      	beq.n	800a35a <_scanf_float+0x6e>
 800a352:	6823      	ldr	r3, [r4, #0]
 800a354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a358:	6023      	str	r3, [r4, #0]
 800a35a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a35e:	f1ba 0f01 	cmp.w	sl, #1
 800a362:	f200 8113 	bhi.w	800a58c <_scanf_float+0x2a0>
 800a366:	455e      	cmp	r6, fp
 800a368:	f200 8105 	bhi.w	800a576 <_scanf_float+0x28a>
 800a36c:	2501      	movs	r5, #1
 800a36e:	4628      	mov	r0, r5
 800a370:	b007      	add	sp, #28
 800a372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a376:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a37a:	2a0d      	cmp	r2, #13
 800a37c:	d8e6      	bhi.n	800a34c <_scanf_float+0x60>
 800a37e:	a101      	add	r1, pc, #4	; (adr r1, 800a384 <_scanf_float+0x98>)
 800a380:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a384:	0800a4c3 	.word	0x0800a4c3
 800a388:	0800a34d 	.word	0x0800a34d
 800a38c:	0800a34d 	.word	0x0800a34d
 800a390:	0800a34d 	.word	0x0800a34d
 800a394:	0800a523 	.word	0x0800a523
 800a398:	0800a4fb 	.word	0x0800a4fb
 800a39c:	0800a34d 	.word	0x0800a34d
 800a3a0:	0800a34d 	.word	0x0800a34d
 800a3a4:	0800a4d1 	.word	0x0800a4d1
 800a3a8:	0800a34d 	.word	0x0800a34d
 800a3ac:	0800a34d 	.word	0x0800a34d
 800a3b0:	0800a34d 	.word	0x0800a34d
 800a3b4:	0800a34d 	.word	0x0800a34d
 800a3b8:	0800a489 	.word	0x0800a489
 800a3bc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a3c0:	e7db      	b.n	800a37a <_scanf_float+0x8e>
 800a3c2:	290e      	cmp	r1, #14
 800a3c4:	d8c2      	bhi.n	800a34c <_scanf_float+0x60>
 800a3c6:	a001      	add	r0, pc, #4	; (adr r0, 800a3cc <_scanf_float+0xe0>)
 800a3c8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a3cc:	0800a47b 	.word	0x0800a47b
 800a3d0:	0800a34d 	.word	0x0800a34d
 800a3d4:	0800a47b 	.word	0x0800a47b
 800a3d8:	0800a50f 	.word	0x0800a50f
 800a3dc:	0800a34d 	.word	0x0800a34d
 800a3e0:	0800a429 	.word	0x0800a429
 800a3e4:	0800a465 	.word	0x0800a465
 800a3e8:	0800a465 	.word	0x0800a465
 800a3ec:	0800a465 	.word	0x0800a465
 800a3f0:	0800a465 	.word	0x0800a465
 800a3f4:	0800a465 	.word	0x0800a465
 800a3f8:	0800a465 	.word	0x0800a465
 800a3fc:	0800a465 	.word	0x0800a465
 800a400:	0800a465 	.word	0x0800a465
 800a404:	0800a465 	.word	0x0800a465
 800a408:	2b6e      	cmp	r3, #110	; 0x6e
 800a40a:	d809      	bhi.n	800a420 <_scanf_float+0x134>
 800a40c:	2b60      	cmp	r3, #96	; 0x60
 800a40e:	d8b2      	bhi.n	800a376 <_scanf_float+0x8a>
 800a410:	2b54      	cmp	r3, #84	; 0x54
 800a412:	d077      	beq.n	800a504 <_scanf_float+0x218>
 800a414:	2b59      	cmp	r3, #89	; 0x59
 800a416:	d199      	bne.n	800a34c <_scanf_float+0x60>
 800a418:	2d07      	cmp	r5, #7
 800a41a:	d197      	bne.n	800a34c <_scanf_float+0x60>
 800a41c:	2508      	movs	r5, #8
 800a41e:	e029      	b.n	800a474 <_scanf_float+0x188>
 800a420:	2b74      	cmp	r3, #116	; 0x74
 800a422:	d06f      	beq.n	800a504 <_scanf_float+0x218>
 800a424:	2b79      	cmp	r3, #121	; 0x79
 800a426:	e7f6      	b.n	800a416 <_scanf_float+0x12a>
 800a428:	6821      	ldr	r1, [r4, #0]
 800a42a:	05c8      	lsls	r0, r1, #23
 800a42c:	d51a      	bpl.n	800a464 <_scanf_float+0x178>
 800a42e:	9b02      	ldr	r3, [sp, #8]
 800a430:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a434:	6021      	str	r1, [r4, #0]
 800a436:	f109 0901 	add.w	r9, r9, #1
 800a43a:	b11b      	cbz	r3, 800a444 <_scanf_float+0x158>
 800a43c:	3b01      	subs	r3, #1
 800a43e:	3201      	adds	r2, #1
 800a440:	9302      	str	r3, [sp, #8]
 800a442:	60a2      	str	r2, [r4, #8]
 800a444:	68a3      	ldr	r3, [r4, #8]
 800a446:	3b01      	subs	r3, #1
 800a448:	60a3      	str	r3, [r4, #8]
 800a44a:	6923      	ldr	r3, [r4, #16]
 800a44c:	3301      	adds	r3, #1
 800a44e:	6123      	str	r3, [r4, #16]
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	3b01      	subs	r3, #1
 800a454:	2b00      	cmp	r3, #0
 800a456:	607b      	str	r3, [r7, #4]
 800a458:	f340 8084 	ble.w	800a564 <_scanf_float+0x278>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	3301      	adds	r3, #1
 800a460:	603b      	str	r3, [r7, #0]
 800a462:	e766      	b.n	800a332 <_scanf_float+0x46>
 800a464:	eb1a 0f05 	cmn.w	sl, r5
 800a468:	f47f af70 	bne.w	800a34c <_scanf_float+0x60>
 800a46c:	6822      	ldr	r2, [r4, #0]
 800a46e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a472:	6022      	str	r2, [r4, #0]
 800a474:	f806 3b01 	strb.w	r3, [r6], #1
 800a478:	e7e4      	b.n	800a444 <_scanf_float+0x158>
 800a47a:	6822      	ldr	r2, [r4, #0]
 800a47c:	0610      	lsls	r0, r2, #24
 800a47e:	f57f af65 	bpl.w	800a34c <_scanf_float+0x60>
 800a482:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a486:	e7f4      	b.n	800a472 <_scanf_float+0x186>
 800a488:	f1ba 0f00 	cmp.w	sl, #0
 800a48c:	d10e      	bne.n	800a4ac <_scanf_float+0x1c0>
 800a48e:	f1b9 0f00 	cmp.w	r9, #0
 800a492:	d10e      	bne.n	800a4b2 <_scanf_float+0x1c6>
 800a494:	6822      	ldr	r2, [r4, #0]
 800a496:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a49a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a49e:	d108      	bne.n	800a4b2 <_scanf_float+0x1c6>
 800a4a0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a4a4:	6022      	str	r2, [r4, #0]
 800a4a6:	f04f 0a01 	mov.w	sl, #1
 800a4aa:	e7e3      	b.n	800a474 <_scanf_float+0x188>
 800a4ac:	f1ba 0f02 	cmp.w	sl, #2
 800a4b0:	d055      	beq.n	800a55e <_scanf_float+0x272>
 800a4b2:	2d01      	cmp	r5, #1
 800a4b4:	d002      	beq.n	800a4bc <_scanf_float+0x1d0>
 800a4b6:	2d04      	cmp	r5, #4
 800a4b8:	f47f af48 	bne.w	800a34c <_scanf_float+0x60>
 800a4bc:	3501      	adds	r5, #1
 800a4be:	b2ed      	uxtb	r5, r5
 800a4c0:	e7d8      	b.n	800a474 <_scanf_float+0x188>
 800a4c2:	f1ba 0f01 	cmp.w	sl, #1
 800a4c6:	f47f af41 	bne.w	800a34c <_scanf_float+0x60>
 800a4ca:	f04f 0a02 	mov.w	sl, #2
 800a4ce:	e7d1      	b.n	800a474 <_scanf_float+0x188>
 800a4d0:	b97d      	cbnz	r5, 800a4f2 <_scanf_float+0x206>
 800a4d2:	f1b9 0f00 	cmp.w	r9, #0
 800a4d6:	f47f af3c 	bne.w	800a352 <_scanf_float+0x66>
 800a4da:	6822      	ldr	r2, [r4, #0]
 800a4dc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a4e0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a4e4:	f47f af39 	bne.w	800a35a <_scanf_float+0x6e>
 800a4e8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a4ec:	6022      	str	r2, [r4, #0]
 800a4ee:	2501      	movs	r5, #1
 800a4f0:	e7c0      	b.n	800a474 <_scanf_float+0x188>
 800a4f2:	2d03      	cmp	r5, #3
 800a4f4:	d0e2      	beq.n	800a4bc <_scanf_float+0x1d0>
 800a4f6:	2d05      	cmp	r5, #5
 800a4f8:	e7de      	b.n	800a4b8 <_scanf_float+0x1cc>
 800a4fa:	2d02      	cmp	r5, #2
 800a4fc:	f47f af26 	bne.w	800a34c <_scanf_float+0x60>
 800a500:	2503      	movs	r5, #3
 800a502:	e7b7      	b.n	800a474 <_scanf_float+0x188>
 800a504:	2d06      	cmp	r5, #6
 800a506:	f47f af21 	bne.w	800a34c <_scanf_float+0x60>
 800a50a:	2507      	movs	r5, #7
 800a50c:	e7b2      	b.n	800a474 <_scanf_float+0x188>
 800a50e:	6822      	ldr	r2, [r4, #0]
 800a510:	0591      	lsls	r1, r2, #22
 800a512:	f57f af1b 	bpl.w	800a34c <_scanf_float+0x60>
 800a516:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a51a:	6022      	str	r2, [r4, #0]
 800a51c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a520:	e7a8      	b.n	800a474 <_scanf_float+0x188>
 800a522:	6822      	ldr	r2, [r4, #0]
 800a524:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a528:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a52c:	d006      	beq.n	800a53c <_scanf_float+0x250>
 800a52e:	0550      	lsls	r0, r2, #21
 800a530:	f57f af0c 	bpl.w	800a34c <_scanf_float+0x60>
 800a534:	f1b9 0f00 	cmp.w	r9, #0
 800a538:	f43f af0f 	beq.w	800a35a <_scanf_float+0x6e>
 800a53c:	0591      	lsls	r1, r2, #22
 800a53e:	bf58      	it	pl
 800a540:	9901      	ldrpl	r1, [sp, #4]
 800a542:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a546:	bf58      	it	pl
 800a548:	eba9 0101 	subpl.w	r1, r9, r1
 800a54c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a550:	bf58      	it	pl
 800a552:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a556:	6022      	str	r2, [r4, #0]
 800a558:	f04f 0900 	mov.w	r9, #0
 800a55c:	e78a      	b.n	800a474 <_scanf_float+0x188>
 800a55e:	f04f 0a03 	mov.w	sl, #3
 800a562:	e787      	b.n	800a474 <_scanf_float+0x188>
 800a564:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a568:	4639      	mov	r1, r7
 800a56a:	4640      	mov	r0, r8
 800a56c:	4798      	blx	r3
 800a56e:	2800      	cmp	r0, #0
 800a570:	f43f aedf 	beq.w	800a332 <_scanf_float+0x46>
 800a574:	e6ea      	b.n	800a34c <_scanf_float+0x60>
 800a576:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a57a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a57e:	463a      	mov	r2, r7
 800a580:	4640      	mov	r0, r8
 800a582:	4798      	blx	r3
 800a584:	6923      	ldr	r3, [r4, #16]
 800a586:	3b01      	subs	r3, #1
 800a588:	6123      	str	r3, [r4, #16]
 800a58a:	e6ec      	b.n	800a366 <_scanf_float+0x7a>
 800a58c:	1e6b      	subs	r3, r5, #1
 800a58e:	2b06      	cmp	r3, #6
 800a590:	d825      	bhi.n	800a5de <_scanf_float+0x2f2>
 800a592:	2d02      	cmp	r5, #2
 800a594:	d836      	bhi.n	800a604 <_scanf_float+0x318>
 800a596:	455e      	cmp	r6, fp
 800a598:	f67f aee8 	bls.w	800a36c <_scanf_float+0x80>
 800a59c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5a0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5a4:	463a      	mov	r2, r7
 800a5a6:	4640      	mov	r0, r8
 800a5a8:	4798      	blx	r3
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	6123      	str	r3, [r4, #16]
 800a5b0:	e7f1      	b.n	800a596 <_scanf_float+0x2aa>
 800a5b2:	9802      	ldr	r0, [sp, #8]
 800a5b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5b8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a5bc:	9002      	str	r0, [sp, #8]
 800a5be:	463a      	mov	r2, r7
 800a5c0:	4640      	mov	r0, r8
 800a5c2:	4798      	blx	r3
 800a5c4:	6923      	ldr	r3, [r4, #16]
 800a5c6:	3b01      	subs	r3, #1
 800a5c8:	6123      	str	r3, [r4, #16]
 800a5ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a5ce:	fa5f fa8a 	uxtb.w	sl, sl
 800a5d2:	f1ba 0f02 	cmp.w	sl, #2
 800a5d6:	d1ec      	bne.n	800a5b2 <_scanf_float+0x2c6>
 800a5d8:	3d03      	subs	r5, #3
 800a5da:	b2ed      	uxtb	r5, r5
 800a5dc:	1b76      	subs	r6, r6, r5
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	05da      	lsls	r2, r3, #23
 800a5e2:	d52f      	bpl.n	800a644 <_scanf_float+0x358>
 800a5e4:	055b      	lsls	r3, r3, #21
 800a5e6:	d510      	bpl.n	800a60a <_scanf_float+0x31e>
 800a5e8:	455e      	cmp	r6, fp
 800a5ea:	f67f aebf 	bls.w	800a36c <_scanf_float+0x80>
 800a5ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a5f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a5f6:	463a      	mov	r2, r7
 800a5f8:	4640      	mov	r0, r8
 800a5fa:	4798      	blx	r3
 800a5fc:	6923      	ldr	r3, [r4, #16]
 800a5fe:	3b01      	subs	r3, #1
 800a600:	6123      	str	r3, [r4, #16]
 800a602:	e7f1      	b.n	800a5e8 <_scanf_float+0x2fc>
 800a604:	46aa      	mov	sl, r5
 800a606:	9602      	str	r6, [sp, #8]
 800a608:	e7df      	b.n	800a5ca <_scanf_float+0x2de>
 800a60a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a60e:	6923      	ldr	r3, [r4, #16]
 800a610:	2965      	cmp	r1, #101	; 0x65
 800a612:	f103 33ff 	add.w	r3, r3, #4294967295
 800a616:	f106 35ff 	add.w	r5, r6, #4294967295
 800a61a:	6123      	str	r3, [r4, #16]
 800a61c:	d00c      	beq.n	800a638 <_scanf_float+0x34c>
 800a61e:	2945      	cmp	r1, #69	; 0x45
 800a620:	d00a      	beq.n	800a638 <_scanf_float+0x34c>
 800a622:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a626:	463a      	mov	r2, r7
 800a628:	4640      	mov	r0, r8
 800a62a:	4798      	blx	r3
 800a62c:	6923      	ldr	r3, [r4, #16]
 800a62e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a632:	3b01      	subs	r3, #1
 800a634:	1eb5      	subs	r5, r6, #2
 800a636:	6123      	str	r3, [r4, #16]
 800a638:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a63c:	463a      	mov	r2, r7
 800a63e:	4640      	mov	r0, r8
 800a640:	4798      	blx	r3
 800a642:	462e      	mov	r6, r5
 800a644:	6825      	ldr	r5, [r4, #0]
 800a646:	f015 0510 	ands.w	r5, r5, #16
 800a64a:	d14e      	bne.n	800a6ea <_scanf_float+0x3fe>
 800a64c:	7035      	strb	r5, [r6, #0]
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a654:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a658:	d119      	bne.n	800a68e <_scanf_float+0x3a2>
 800a65a:	9b01      	ldr	r3, [sp, #4]
 800a65c:	454b      	cmp	r3, r9
 800a65e:	eba3 0209 	sub.w	r2, r3, r9
 800a662:	d121      	bne.n	800a6a8 <_scanf_float+0x3bc>
 800a664:	2200      	movs	r2, #0
 800a666:	4659      	mov	r1, fp
 800a668:	4640      	mov	r0, r8
 800a66a:	f000 fe5f 	bl	800b32c <_strtod_r>
 800a66e:	6822      	ldr	r2, [r4, #0]
 800a670:	9b03      	ldr	r3, [sp, #12]
 800a672:	f012 0f02 	tst.w	r2, #2
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	d021      	beq.n	800a6be <_scanf_float+0x3d2>
 800a67a:	9903      	ldr	r1, [sp, #12]
 800a67c:	1d1a      	adds	r2, r3, #4
 800a67e:	600a      	str	r2, [r1, #0]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	ed83 0b00 	vstr	d0, [r3]
 800a686:	68e3      	ldr	r3, [r4, #12]
 800a688:	3301      	adds	r3, #1
 800a68a:	60e3      	str	r3, [r4, #12]
 800a68c:	e66f      	b.n	800a36e <_scanf_float+0x82>
 800a68e:	9b04      	ldr	r3, [sp, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d0e7      	beq.n	800a664 <_scanf_float+0x378>
 800a694:	9905      	ldr	r1, [sp, #20]
 800a696:	230a      	movs	r3, #10
 800a698:	462a      	mov	r2, r5
 800a69a:	3101      	adds	r1, #1
 800a69c:	4640      	mov	r0, r8
 800a69e:	f000 fecd 	bl	800b43c <_strtol_r>
 800a6a2:	9b04      	ldr	r3, [sp, #16]
 800a6a4:	9e05      	ldr	r6, [sp, #20]
 800a6a6:	1ac2      	subs	r2, r0, r3
 800a6a8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a6ac:	429e      	cmp	r6, r3
 800a6ae:	bf28      	it	cs
 800a6b0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a6b4:	490e      	ldr	r1, [pc, #56]	; (800a6f0 <_scanf_float+0x404>)
 800a6b6:	4630      	mov	r0, r6
 800a6b8:	f000 f834 	bl	800a724 <siprintf>
 800a6bc:	e7d2      	b.n	800a664 <_scanf_float+0x378>
 800a6be:	9903      	ldr	r1, [sp, #12]
 800a6c0:	f012 0f04 	tst.w	r2, #4
 800a6c4:	f103 0204 	add.w	r2, r3, #4
 800a6c8:	600a      	str	r2, [r1, #0]
 800a6ca:	d1d9      	bne.n	800a680 <_scanf_float+0x394>
 800a6cc:	eeb4 0b40 	vcmp.f64	d0, d0
 800a6d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d4:	681e      	ldr	r6, [r3, #0]
 800a6d6:	d705      	bvc.n	800a6e4 <_scanf_float+0x3f8>
 800a6d8:	4806      	ldr	r0, [pc, #24]	; (800a6f4 <_scanf_float+0x408>)
 800a6da:	f000 f81d 	bl	800a718 <nanf>
 800a6de:	ed86 0a00 	vstr	s0, [r6]
 800a6e2:	e7d0      	b.n	800a686 <_scanf_float+0x39a>
 800a6e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800a6e8:	e7f9      	b.n	800a6de <_scanf_float+0x3f2>
 800a6ea:	2500      	movs	r5, #0
 800a6ec:	e63f      	b.n	800a36e <_scanf_float+0x82>
 800a6ee:	bf00      	nop
 800a6f0:	0801225c 	.word	0x0801225c
 800a6f4:	08012668 	.word	0x08012668

0800a6f8 <_sbrk_r>:
 800a6f8:	b538      	push	{r3, r4, r5, lr}
 800a6fa:	4d06      	ldr	r5, [pc, #24]	; (800a714 <_sbrk_r+0x1c>)
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4604      	mov	r4, r0
 800a700:	4608      	mov	r0, r1
 800a702:	602b      	str	r3, [r5, #0]
 800a704:	f7f6 fcfa 	bl	80010fc <_sbrk>
 800a708:	1c43      	adds	r3, r0, #1
 800a70a:	d102      	bne.n	800a712 <_sbrk_r+0x1a>
 800a70c:	682b      	ldr	r3, [r5, #0]
 800a70e:	b103      	cbz	r3, 800a712 <_sbrk_r+0x1a>
 800a710:	6023      	str	r3, [r4, #0]
 800a712:	bd38      	pop	{r3, r4, r5, pc}
 800a714:	20000520 	.word	0x20000520

0800a718 <nanf>:
 800a718:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a720 <nanf+0x8>
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	7fc00000 	.word	0x7fc00000

0800a724 <siprintf>:
 800a724:	b40e      	push	{r1, r2, r3}
 800a726:	b500      	push	{lr}
 800a728:	b09c      	sub	sp, #112	; 0x70
 800a72a:	ab1d      	add	r3, sp, #116	; 0x74
 800a72c:	9002      	str	r0, [sp, #8]
 800a72e:	9006      	str	r0, [sp, #24]
 800a730:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a734:	4809      	ldr	r0, [pc, #36]	; (800a75c <siprintf+0x38>)
 800a736:	9107      	str	r1, [sp, #28]
 800a738:	9104      	str	r1, [sp, #16]
 800a73a:	4909      	ldr	r1, [pc, #36]	; (800a760 <siprintf+0x3c>)
 800a73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a740:	9105      	str	r1, [sp, #20]
 800a742:	6800      	ldr	r0, [r0, #0]
 800a744:	9301      	str	r3, [sp, #4]
 800a746:	a902      	add	r1, sp, #8
 800a748:	f002 fd36 	bl	800d1b8 <_svfiprintf_r>
 800a74c:	9b02      	ldr	r3, [sp, #8]
 800a74e:	2200      	movs	r2, #0
 800a750:	701a      	strb	r2, [r3, #0]
 800a752:	b01c      	add	sp, #112	; 0x70
 800a754:	f85d eb04 	ldr.w	lr, [sp], #4
 800a758:	b003      	add	sp, #12
 800a75a:	4770      	bx	lr
 800a75c:	2000000c 	.word	0x2000000c
 800a760:	ffff0208 	.word	0xffff0208

0800a764 <strncat>:
 800a764:	b530      	push	{r4, r5, lr}
 800a766:	4604      	mov	r4, r0
 800a768:	7825      	ldrb	r5, [r4, #0]
 800a76a:	4623      	mov	r3, r4
 800a76c:	3401      	adds	r4, #1
 800a76e:	2d00      	cmp	r5, #0
 800a770:	d1fa      	bne.n	800a768 <strncat+0x4>
 800a772:	3a01      	subs	r2, #1
 800a774:	d304      	bcc.n	800a780 <strncat+0x1c>
 800a776:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a77a:	f803 4b01 	strb.w	r4, [r3], #1
 800a77e:	b904      	cbnz	r4, 800a782 <strncat+0x1e>
 800a780:	bd30      	pop	{r4, r5, pc}
 800a782:	2a00      	cmp	r2, #0
 800a784:	d1f5      	bne.n	800a772 <strncat+0xe>
 800a786:	701a      	strb	r2, [r3, #0]
 800a788:	e7f3      	b.n	800a772 <strncat+0xe>

0800a78a <sulp>:
 800a78a:	b570      	push	{r4, r5, r6, lr}
 800a78c:	4604      	mov	r4, r0
 800a78e:	460d      	mov	r5, r1
 800a790:	4616      	mov	r6, r2
 800a792:	ec45 4b10 	vmov	d0, r4, r5
 800a796:	f002 fb51 	bl	800ce3c <__ulp>
 800a79a:	b17e      	cbz	r6, 800a7bc <sulp+0x32>
 800a79c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a7a0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dd09      	ble.n	800a7bc <sulp+0x32>
 800a7a8:	051b      	lsls	r3, r3, #20
 800a7aa:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800a7ae:	2000      	movs	r0, #0
 800a7b0:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800a7b4:	ec41 0b17 	vmov	d7, r0, r1
 800a7b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 800a7bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a7c0 <_strtod_l>:
 800a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	ed2d 8b0e 	vpush	{d8-d14}
 800a7c8:	b097      	sub	sp, #92	; 0x5c
 800a7ca:	461f      	mov	r7, r3
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	9312      	str	r3, [sp, #72]	; 0x48
 800a7d0:	4ba1      	ldr	r3, [pc, #644]	; (800aa58 <_strtod_l+0x298>)
 800a7d2:	920d      	str	r2, [sp, #52]	; 0x34
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	9307      	str	r3, [sp, #28]
 800a7d8:	4604      	mov	r4, r0
 800a7da:	4618      	mov	r0, r3
 800a7dc:	468b      	mov	fp, r1
 800a7de:	f7f5 fd2f 	bl	8000240 <strlen>
 800a7e2:	f04f 0800 	mov.w	r8, #0
 800a7e6:	4605      	mov	r5, r0
 800a7e8:	f04f 0900 	mov.w	r9, #0
 800a7ec:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a7f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a7f2:	7813      	ldrb	r3, [r2, #0]
 800a7f4:	2b2b      	cmp	r3, #43	; 0x2b
 800a7f6:	d04d      	beq.n	800a894 <_strtod_l+0xd4>
 800a7f8:	d83a      	bhi.n	800a870 <_strtod_l+0xb0>
 800a7fa:	2b0d      	cmp	r3, #13
 800a7fc:	d833      	bhi.n	800a866 <_strtod_l+0xa6>
 800a7fe:	2b08      	cmp	r3, #8
 800a800:	d833      	bhi.n	800a86a <_strtod_l+0xaa>
 800a802:	2b00      	cmp	r3, #0
 800a804:	d03d      	beq.n	800a882 <_strtod_l+0xc2>
 800a806:	2300      	movs	r3, #0
 800a808:	9308      	str	r3, [sp, #32]
 800a80a:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800a80c:	7833      	ldrb	r3, [r6, #0]
 800a80e:	2b30      	cmp	r3, #48	; 0x30
 800a810:	f040 80b0 	bne.w	800a974 <_strtod_l+0x1b4>
 800a814:	7873      	ldrb	r3, [r6, #1]
 800a816:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a81a:	2b58      	cmp	r3, #88	; 0x58
 800a81c:	d167      	bne.n	800a8ee <_strtod_l+0x12e>
 800a81e:	9b08      	ldr	r3, [sp, #32]
 800a820:	9301      	str	r3, [sp, #4]
 800a822:	ab12      	add	r3, sp, #72	; 0x48
 800a824:	9702      	str	r7, [sp, #8]
 800a826:	9300      	str	r3, [sp, #0]
 800a828:	4a8c      	ldr	r2, [pc, #560]	; (800aa5c <_strtod_l+0x29c>)
 800a82a:	ab13      	add	r3, sp, #76	; 0x4c
 800a82c:	a911      	add	r1, sp, #68	; 0x44
 800a82e:	4620      	mov	r0, r4
 800a830:	f001 fc68 	bl	800c104 <__gethex>
 800a834:	f010 0507 	ands.w	r5, r0, #7
 800a838:	4607      	mov	r7, r0
 800a83a:	d005      	beq.n	800a848 <_strtod_l+0x88>
 800a83c:	2d06      	cmp	r5, #6
 800a83e:	d12b      	bne.n	800a898 <_strtod_l+0xd8>
 800a840:	3601      	adds	r6, #1
 800a842:	2300      	movs	r3, #0
 800a844:	9611      	str	r6, [sp, #68]	; 0x44
 800a846:	9308      	str	r3, [sp, #32]
 800a848:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	f040 854e 	bne.w	800b2ec <_strtod_l+0xb2c>
 800a850:	9b08      	ldr	r3, [sp, #32]
 800a852:	b1e3      	cbz	r3, 800a88e <_strtod_l+0xce>
 800a854:	ec49 8b17 	vmov	d7, r8, r9
 800a858:	eeb1 0b47 	vneg.f64	d0, d7
 800a85c:	b017      	add	sp, #92	; 0x5c
 800a85e:	ecbd 8b0e 	vpop	{d8-d14}
 800a862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a866:	2b20      	cmp	r3, #32
 800a868:	d1cd      	bne.n	800a806 <_strtod_l+0x46>
 800a86a:	3201      	adds	r2, #1
 800a86c:	9211      	str	r2, [sp, #68]	; 0x44
 800a86e:	e7bf      	b.n	800a7f0 <_strtod_l+0x30>
 800a870:	2b2d      	cmp	r3, #45	; 0x2d
 800a872:	d1c8      	bne.n	800a806 <_strtod_l+0x46>
 800a874:	2301      	movs	r3, #1
 800a876:	9308      	str	r3, [sp, #32]
 800a878:	1c53      	adds	r3, r2, #1
 800a87a:	9311      	str	r3, [sp, #68]	; 0x44
 800a87c:	7853      	ldrb	r3, [r2, #1]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d1c3      	bne.n	800a80a <_strtod_l+0x4a>
 800a882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a884:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a888:	2b00      	cmp	r3, #0
 800a88a:	f040 852d 	bne.w	800b2e8 <_strtod_l+0xb28>
 800a88e:	ec49 8b10 	vmov	d0, r8, r9
 800a892:	e7e3      	b.n	800a85c <_strtod_l+0x9c>
 800a894:	2300      	movs	r3, #0
 800a896:	e7ee      	b.n	800a876 <_strtod_l+0xb6>
 800a898:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a89a:	b13a      	cbz	r2, 800a8ac <_strtod_l+0xec>
 800a89c:	2135      	movs	r1, #53	; 0x35
 800a89e:	a814      	add	r0, sp, #80	; 0x50
 800a8a0:	f002 fbd4 	bl	800d04c <__copybits>
 800a8a4:	9912      	ldr	r1, [sp, #72]	; 0x48
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f001 ff96 	bl	800c7d8 <_Bfree>
 800a8ac:	3d01      	subs	r5, #1
 800a8ae:	2d04      	cmp	r5, #4
 800a8b0:	d806      	bhi.n	800a8c0 <_strtod_l+0x100>
 800a8b2:	e8df f005 	tbb	[pc, r5]
 800a8b6:	030a      	.short	0x030a
 800a8b8:	1714      	.short	0x1714
 800a8ba:	0a          	.byte	0x0a
 800a8bb:	00          	.byte	0x00
 800a8bc:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800a8c0:	073f      	lsls	r7, r7, #28
 800a8c2:	d5c1      	bpl.n	800a848 <_strtod_l+0x88>
 800a8c4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a8c8:	e7be      	b.n	800a848 <_strtod_l+0x88>
 800a8ca:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800a8ce:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a8d0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a8d4:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a8d8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a8dc:	e7f0      	b.n	800a8c0 <_strtod_l+0x100>
 800a8de:	f8df 9180 	ldr.w	r9, [pc, #384]	; 800aa60 <_strtod_l+0x2a0>
 800a8e2:	e7ed      	b.n	800a8c0 <_strtod_l+0x100>
 800a8e4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a8e8:	f04f 38ff 	mov.w	r8, #4294967295
 800a8ec:	e7e8      	b.n	800a8c0 <_strtod_l+0x100>
 800a8ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a8f0:	1c5a      	adds	r2, r3, #1
 800a8f2:	9211      	str	r2, [sp, #68]	; 0x44
 800a8f4:	785b      	ldrb	r3, [r3, #1]
 800a8f6:	2b30      	cmp	r3, #48	; 0x30
 800a8f8:	d0f9      	beq.n	800a8ee <_strtod_l+0x12e>
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d0a4      	beq.n	800a848 <_strtod_l+0x88>
 800a8fe:	2301      	movs	r3, #1
 800a900:	f04f 0a00 	mov.w	sl, #0
 800a904:	9304      	str	r3, [sp, #16]
 800a906:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a908:	930a      	str	r3, [sp, #40]	; 0x28
 800a90a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a90e:	f8cd a018 	str.w	sl, [sp, #24]
 800a912:	220a      	movs	r2, #10
 800a914:	9811      	ldr	r0, [sp, #68]	; 0x44
 800a916:	7807      	ldrb	r7, [r0, #0]
 800a918:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a91c:	b2d9      	uxtb	r1, r3
 800a91e:	2909      	cmp	r1, #9
 800a920:	d92a      	bls.n	800a978 <_strtod_l+0x1b8>
 800a922:	9907      	ldr	r1, [sp, #28]
 800a924:	462a      	mov	r2, r5
 800a926:	f002 fd4f 	bl	800d3c8 <strncmp>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d033      	beq.n	800a996 <_strtod_l+0x1d6>
 800a92e:	2000      	movs	r0, #0
 800a930:	9b06      	ldr	r3, [sp, #24]
 800a932:	463a      	mov	r2, r7
 800a934:	4601      	mov	r1, r0
 800a936:	4607      	mov	r7, r0
 800a938:	2a65      	cmp	r2, #101	; 0x65
 800a93a:	d001      	beq.n	800a940 <_strtod_l+0x180>
 800a93c:	2a45      	cmp	r2, #69	; 0x45
 800a93e:	d117      	bne.n	800a970 <_strtod_l+0x1b0>
 800a940:	b91b      	cbnz	r3, 800a94a <_strtod_l+0x18a>
 800a942:	9b04      	ldr	r3, [sp, #16]
 800a944:	4303      	orrs	r3, r0
 800a946:	d09c      	beq.n	800a882 <_strtod_l+0xc2>
 800a948:	2300      	movs	r3, #0
 800a94a:	f8dd b044 	ldr.w	fp, [sp, #68]	; 0x44
 800a94e:	f10b 0201 	add.w	r2, fp, #1
 800a952:	9211      	str	r2, [sp, #68]	; 0x44
 800a954:	f89b 2001 	ldrb.w	r2, [fp, #1]
 800a958:	2a2b      	cmp	r2, #43	; 0x2b
 800a95a:	d071      	beq.n	800aa40 <_strtod_l+0x280>
 800a95c:	2a2d      	cmp	r2, #45	; 0x2d
 800a95e:	d077      	beq.n	800aa50 <_strtod_l+0x290>
 800a960:	f04f 0e00 	mov.w	lr, #0
 800a964:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a968:	2d09      	cmp	r5, #9
 800a96a:	d97f      	bls.n	800aa6c <_strtod_l+0x2ac>
 800a96c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
 800a970:	2500      	movs	r5, #0
 800a972:	e09b      	b.n	800aaac <_strtod_l+0x2ec>
 800a974:	2300      	movs	r3, #0
 800a976:	e7c3      	b.n	800a900 <_strtod_l+0x140>
 800a978:	9906      	ldr	r1, [sp, #24]
 800a97a:	2908      	cmp	r1, #8
 800a97c:	bfdd      	ittte	le
 800a97e:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a980:	fb02 3301 	mlale	r3, r2, r1, r3
 800a984:	9309      	strle	r3, [sp, #36]	; 0x24
 800a986:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a98a:	9b06      	ldr	r3, [sp, #24]
 800a98c:	3001      	adds	r0, #1
 800a98e:	3301      	adds	r3, #1
 800a990:	9306      	str	r3, [sp, #24]
 800a992:	9011      	str	r0, [sp, #68]	; 0x44
 800a994:	e7be      	b.n	800a914 <_strtod_l+0x154>
 800a996:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a998:	195a      	adds	r2, r3, r5
 800a99a:	9211      	str	r2, [sp, #68]	; 0x44
 800a99c:	5d5a      	ldrb	r2, [r3, r5]
 800a99e:	9b06      	ldr	r3, [sp, #24]
 800a9a0:	b3a3      	cbz	r3, 800aa0c <_strtod_l+0x24c>
 800a9a2:	4607      	mov	r7, r0
 800a9a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a9a8:	2909      	cmp	r1, #9
 800a9aa:	d912      	bls.n	800a9d2 <_strtod_l+0x212>
 800a9ac:	2101      	movs	r1, #1
 800a9ae:	e7c3      	b.n	800a938 <_strtod_l+0x178>
 800a9b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	9211      	str	r2, [sp, #68]	; 0x44
 800a9b6:	785a      	ldrb	r2, [r3, #1]
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	2a30      	cmp	r2, #48	; 0x30
 800a9bc:	d0f8      	beq.n	800a9b0 <_strtod_l+0x1f0>
 800a9be:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a9c2:	2b08      	cmp	r3, #8
 800a9c4:	f200 8497 	bhi.w	800b2f6 <_strtod_l+0xb36>
 800a9c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a9ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a9cc:	4607      	mov	r7, r0
 800a9ce:	2000      	movs	r0, #0
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	3a30      	subs	r2, #48	; 0x30
 800a9d4:	f100 0101 	add.w	r1, r0, #1
 800a9d8:	d012      	beq.n	800aa00 <_strtod_l+0x240>
 800a9da:	440f      	add	r7, r1
 800a9dc:	eb00 0c03 	add.w	ip, r0, r3
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	250a      	movs	r5, #10
 800a9e4:	4561      	cmp	r1, ip
 800a9e6:	d113      	bne.n	800aa10 <_strtod_l+0x250>
 800a9e8:	1819      	adds	r1, r3, r0
 800a9ea:	2908      	cmp	r1, #8
 800a9ec:	f103 0301 	add.w	r3, r3, #1
 800a9f0:	4403      	add	r3, r0
 800a9f2:	dc1c      	bgt.n	800aa2e <_strtod_l+0x26e>
 800a9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9f6:	210a      	movs	r1, #10
 800a9f8:	fb01 2200 	mla	r2, r1, r0, r2
 800a9fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a9fe:	2100      	movs	r1, #0
 800aa00:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa02:	1c50      	adds	r0, r2, #1
 800aa04:	9011      	str	r0, [sp, #68]	; 0x44
 800aa06:	7852      	ldrb	r2, [r2, #1]
 800aa08:	4608      	mov	r0, r1
 800aa0a:	e7cb      	b.n	800a9a4 <_strtod_l+0x1e4>
 800aa0c:	9806      	ldr	r0, [sp, #24]
 800aa0e:	e7d4      	b.n	800a9ba <_strtod_l+0x1fa>
 800aa10:	2908      	cmp	r1, #8
 800aa12:	dc04      	bgt.n	800aa1e <_strtod_l+0x25e>
 800aa14:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800aa16:	436e      	muls	r6, r5
 800aa18:	9609      	str	r6, [sp, #36]	; 0x24
 800aa1a:	3101      	adds	r1, #1
 800aa1c:	e7e2      	b.n	800a9e4 <_strtod_l+0x224>
 800aa1e:	f101 0e01 	add.w	lr, r1, #1
 800aa22:	f1be 0f10 	cmp.w	lr, #16
 800aa26:	bfd8      	it	le
 800aa28:	fb05 fa0a 	mulle.w	sl, r5, sl
 800aa2c:	e7f5      	b.n	800aa1a <_strtod_l+0x25a>
 800aa2e:	2b10      	cmp	r3, #16
 800aa30:	bfdc      	itt	le
 800aa32:	210a      	movle	r1, #10
 800aa34:	fb01 2a0a 	mlale	sl, r1, sl, r2
 800aa38:	e7e1      	b.n	800a9fe <_strtod_l+0x23e>
 800aa3a:	2700      	movs	r7, #0
 800aa3c:	2101      	movs	r1, #1
 800aa3e:	e780      	b.n	800a942 <_strtod_l+0x182>
 800aa40:	f04f 0e00 	mov.w	lr, #0
 800aa44:	f10b 0202 	add.w	r2, fp, #2
 800aa48:	9211      	str	r2, [sp, #68]	; 0x44
 800aa4a:	f89b 2002 	ldrb.w	r2, [fp, #2]
 800aa4e:	e789      	b.n	800a964 <_strtod_l+0x1a4>
 800aa50:	f04f 0e01 	mov.w	lr, #1
 800aa54:	e7f6      	b.n	800aa44 <_strtod_l+0x284>
 800aa56:	bf00      	nop
 800aa58:	080124b0 	.word	0x080124b0
 800aa5c:	08012264 	.word	0x08012264
 800aa60:	7ff00000 	.word	0x7ff00000
 800aa64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa66:	1c55      	adds	r5, r2, #1
 800aa68:	9511      	str	r5, [sp, #68]	; 0x44
 800aa6a:	7852      	ldrb	r2, [r2, #1]
 800aa6c:	2a30      	cmp	r2, #48	; 0x30
 800aa6e:	d0f9      	beq.n	800aa64 <_strtod_l+0x2a4>
 800aa70:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800aa74:	2d08      	cmp	r5, #8
 800aa76:	f63f af7b 	bhi.w	800a970 <_strtod_l+0x1b0>
 800aa7a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800aa7e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa80:	9207      	str	r2, [sp, #28]
 800aa82:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aa84:	1c55      	adds	r5, r2, #1
 800aa86:	9511      	str	r5, [sp, #68]	; 0x44
 800aa88:	7852      	ldrb	r2, [r2, #1]
 800aa8a:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800aa8e:	2e09      	cmp	r6, #9
 800aa90:	d937      	bls.n	800ab02 <_strtod_l+0x342>
 800aa92:	9e07      	ldr	r6, [sp, #28]
 800aa94:	1bad      	subs	r5, r5, r6
 800aa96:	2d08      	cmp	r5, #8
 800aa98:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800aa9c:	dc02      	bgt.n	800aaa4 <_strtod_l+0x2e4>
 800aa9e:	4565      	cmp	r5, ip
 800aaa0:	bfa8      	it	ge
 800aaa2:	4665      	movge	r5, ip
 800aaa4:	f1be 0f00 	cmp.w	lr, #0
 800aaa8:	d000      	beq.n	800aaac <_strtod_l+0x2ec>
 800aaaa:	426d      	negs	r5, r5
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d14d      	bne.n	800ab4c <_strtod_l+0x38c>
 800aab0:	9b04      	ldr	r3, [sp, #16]
 800aab2:	4303      	orrs	r3, r0
 800aab4:	f47f aec8 	bne.w	800a848 <_strtod_l+0x88>
 800aab8:	2900      	cmp	r1, #0
 800aaba:	f47f aee2 	bne.w	800a882 <_strtod_l+0xc2>
 800aabe:	2a69      	cmp	r2, #105	; 0x69
 800aac0:	d027      	beq.n	800ab12 <_strtod_l+0x352>
 800aac2:	dc24      	bgt.n	800ab0e <_strtod_l+0x34e>
 800aac4:	2a49      	cmp	r2, #73	; 0x49
 800aac6:	d024      	beq.n	800ab12 <_strtod_l+0x352>
 800aac8:	2a4e      	cmp	r2, #78	; 0x4e
 800aaca:	f47f aeda 	bne.w	800a882 <_strtod_l+0xc2>
 800aace:	4996      	ldr	r1, [pc, #600]	; (800ad28 <_strtod_l+0x568>)
 800aad0:	a811      	add	r0, sp, #68	; 0x44
 800aad2:	f001 fd6f 	bl	800c5b4 <__match>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	f43f aed3 	beq.w	800a882 <_strtod_l+0xc2>
 800aadc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aade:	781b      	ldrb	r3, [r3, #0]
 800aae0:	2b28      	cmp	r3, #40	; 0x28
 800aae2:	d12d      	bne.n	800ab40 <_strtod_l+0x380>
 800aae4:	4991      	ldr	r1, [pc, #580]	; (800ad2c <_strtod_l+0x56c>)
 800aae6:	aa14      	add	r2, sp, #80	; 0x50
 800aae8:	a811      	add	r0, sp, #68	; 0x44
 800aaea:	f001 fd77 	bl	800c5dc <__hexnan>
 800aaee:	2805      	cmp	r0, #5
 800aaf0:	d126      	bne.n	800ab40 <_strtod_l+0x380>
 800aaf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aaf4:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800aaf8:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800aafc:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ab00:	e6a2      	b.n	800a848 <_strtod_l+0x88>
 800ab02:	250a      	movs	r5, #10
 800ab04:	fb05 250c 	mla	r5, r5, ip, r2
 800ab08:	f1a5 0c30 	sub.w	ip, r5, #48	; 0x30
 800ab0c:	e7b9      	b.n	800aa82 <_strtod_l+0x2c2>
 800ab0e:	2a6e      	cmp	r2, #110	; 0x6e
 800ab10:	e7db      	b.n	800aaca <_strtod_l+0x30a>
 800ab12:	4987      	ldr	r1, [pc, #540]	; (800ad30 <_strtod_l+0x570>)
 800ab14:	a811      	add	r0, sp, #68	; 0x44
 800ab16:	f001 fd4d 	bl	800c5b4 <__match>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f43f aeb1 	beq.w	800a882 <_strtod_l+0xc2>
 800ab20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab22:	4984      	ldr	r1, [pc, #528]	; (800ad34 <_strtod_l+0x574>)
 800ab24:	3b01      	subs	r3, #1
 800ab26:	a811      	add	r0, sp, #68	; 0x44
 800ab28:	9311      	str	r3, [sp, #68]	; 0x44
 800ab2a:	f001 fd43 	bl	800c5b4 <__match>
 800ab2e:	b910      	cbnz	r0, 800ab36 <_strtod_l+0x376>
 800ab30:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab32:	3301      	adds	r3, #1
 800ab34:	9311      	str	r3, [sp, #68]	; 0x44
 800ab36:	f8df 9210 	ldr.w	r9, [pc, #528]	; 800ad48 <_strtod_l+0x588>
 800ab3a:	f04f 0800 	mov.w	r8, #0
 800ab3e:	e683      	b.n	800a848 <_strtod_l+0x88>
 800ab40:	487d      	ldr	r0, [pc, #500]	; (800ad38 <_strtod_l+0x578>)
 800ab42:	f002 fc39 	bl	800d3b8 <nan>
 800ab46:	ec59 8b10 	vmov	r8, r9, d0
 800ab4a:	e67d      	b.n	800a848 <_strtod_l+0x88>
 800ab4c:	1bea      	subs	r2, r5, r7
 800ab4e:	eddd 7a09 	vldr	s15, [sp, #36]	; 0x24
 800ab52:	9207      	str	r2, [sp, #28]
 800ab54:	9a06      	ldr	r2, [sp, #24]
 800ab56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800ab5a:	2a00      	cmp	r2, #0
 800ab5c:	bf08      	it	eq
 800ab5e:	461a      	moveq	r2, r3
 800ab60:	2b10      	cmp	r3, #16
 800ab62:	9206      	str	r2, [sp, #24]
 800ab64:	461a      	mov	r2, r3
 800ab66:	bfa8      	it	ge
 800ab68:	2210      	movge	r2, #16
 800ab6a:	2b09      	cmp	r3, #9
 800ab6c:	ec59 8b17 	vmov	r8, r9, d7
 800ab70:	dd0c      	ble.n	800ab8c <_strtod_l+0x3cc>
 800ab72:	4972      	ldr	r1, [pc, #456]	; (800ad3c <_strtod_l+0x57c>)
 800ab74:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ab78:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800ab7c:	ee06 aa90 	vmov	s13, sl
 800ab80:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800ab84:	eea7 6b05 	vfma.f64	d6, d7, d5
 800ab88:	ec59 8b16 	vmov	r8, r9, d6
 800ab8c:	2b0f      	cmp	r3, #15
 800ab8e:	dc36      	bgt.n	800abfe <_strtod_l+0x43e>
 800ab90:	9907      	ldr	r1, [sp, #28]
 800ab92:	2900      	cmp	r1, #0
 800ab94:	f43f ae58 	beq.w	800a848 <_strtod_l+0x88>
 800ab98:	dd23      	ble.n	800abe2 <_strtod_l+0x422>
 800ab9a:	2916      	cmp	r1, #22
 800ab9c:	dc0b      	bgt.n	800abb6 <_strtod_l+0x3f6>
 800ab9e:	4b67      	ldr	r3, [pc, #412]	; (800ad3c <_strtod_l+0x57c>)
 800aba0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800aba4:	ed93 7b00 	vldr	d7, [r3]
 800aba8:	ec49 8b16 	vmov	d6, r8, r9
 800abac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abb0:	ec59 8b17 	vmov	r8, r9, d7
 800abb4:	e648      	b.n	800a848 <_strtod_l+0x88>
 800abb6:	9807      	ldr	r0, [sp, #28]
 800abb8:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800abbc:	4281      	cmp	r1, r0
 800abbe:	db1e      	blt.n	800abfe <_strtod_l+0x43e>
 800abc0:	4a5e      	ldr	r2, [pc, #376]	; (800ad3c <_strtod_l+0x57c>)
 800abc2:	f1c3 030f 	rsb	r3, r3, #15
 800abc6:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800abca:	ed91 7b00 	vldr	d7, [r1]
 800abce:	ec49 8b16 	vmov	d6, r8, r9
 800abd2:	1ac3      	subs	r3, r0, r3
 800abd4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800abd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800abdc:	ed92 6b00 	vldr	d6, [r2]
 800abe0:	e7e4      	b.n	800abac <_strtod_l+0x3ec>
 800abe2:	9907      	ldr	r1, [sp, #28]
 800abe4:	3116      	adds	r1, #22
 800abe6:	db0a      	blt.n	800abfe <_strtod_l+0x43e>
 800abe8:	4b54      	ldr	r3, [pc, #336]	; (800ad3c <_strtod_l+0x57c>)
 800abea:	1b7d      	subs	r5, r7, r5
 800abec:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800abf0:	ed95 7b00 	vldr	d7, [r5]
 800abf4:	ec49 8b16 	vmov	d6, r8, r9
 800abf8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800abfc:	e7d8      	b.n	800abb0 <_strtod_l+0x3f0>
 800abfe:	9907      	ldr	r1, [sp, #28]
 800ac00:	1a9a      	subs	r2, r3, r2
 800ac02:	440a      	add	r2, r1
 800ac04:	2a00      	cmp	r2, #0
 800ac06:	dd6f      	ble.n	800ace8 <_strtod_l+0x528>
 800ac08:	f012 000f 	ands.w	r0, r2, #15
 800ac0c:	d00a      	beq.n	800ac24 <_strtod_l+0x464>
 800ac0e:	494b      	ldr	r1, [pc, #300]	; (800ad3c <_strtod_l+0x57c>)
 800ac10:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ac14:	ed91 7b00 	vldr	d7, [r1]
 800ac18:	ec49 8b16 	vmov	d6, r8, r9
 800ac1c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac20:	ec59 8b17 	vmov	r8, r9, d7
 800ac24:	f032 020f 	bics.w	r2, r2, #15
 800ac28:	d04f      	beq.n	800acca <_strtod_l+0x50a>
 800ac2a:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800ac2e:	dd22      	ble.n	800ac76 <_strtod_l+0x4b6>
 800ac30:	2500      	movs	r5, #0
 800ac32:	462e      	mov	r6, r5
 800ac34:	9506      	str	r5, [sp, #24]
 800ac36:	462f      	mov	r7, r5
 800ac38:	2322      	movs	r3, #34	; 0x22
 800ac3a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 800ad48 <_strtod_l+0x588>
 800ac3e:	6023      	str	r3, [r4, #0]
 800ac40:	f04f 0800 	mov.w	r8, #0
 800ac44:	9b06      	ldr	r3, [sp, #24]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	f43f adfe 	beq.w	800a848 <_strtod_l+0x88>
 800ac4c:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ac4e:	4620      	mov	r0, r4
 800ac50:	f001 fdc2 	bl	800c7d8 <_Bfree>
 800ac54:	4639      	mov	r1, r7
 800ac56:	4620      	mov	r0, r4
 800ac58:	f001 fdbe 	bl	800c7d8 <_Bfree>
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f001 fdba 	bl	800c7d8 <_Bfree>
 800ac64:	9906      	ldr	r1, [sp, #24]
 800ac66:	4620      	mov	r0, r4
 800ac68:	f001 fdb6 	bl	800c7d8 <_Bfree>
 800ac6c:	4629      	mov	r1, r5
 800ac6e:	4620      	mov	r0, r4
 800ac70:	f001 fdb2 	bl	800c7d8 <_Bfree>
 800ac74:	e5e8      	b.n	800a848 <_strtod_l+0x88>
 800ac76:	2000      	movs	r0, #0
 800ac78:	ec49 8b17 	vmov	d7, r8, r9
 800ac7c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800ad40 <_strtod_l+0x580>
 800ac80:	1112      	asrs	r2, r2, #4
 800ac82:	4601      	mov	r1, r0
 800ac84:	2a01      	cmp	r2, #1
 800ac86:	dc23      	bgt.n	800acd0 <_strtod_l+0x510>
 800ac88:	b108      	cbz	r0, 800ac8e <_strtod_l+0x4ce>
 800ac8a:	ec59 8b17 	vmov	r8, r9, d7
 800ac8e:	4a2c      	ldr	r2, [pc, #176]	; (800ad40 <_strtod_l+0x580>)
 800ac90:	482c      	ldr	r0, [pc, #176]	; (800ad44 <_strtod_l+0x584>)
 800ac92:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800ac96:	ed92 7b00 	vldr	d7, [r2]
 800ac9a:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800ac9e:	ec49 8b16 	vmov	d6, r8, r9
 800aca2:	4a29      	ldr	r2, [pc, #164]	; (800ad48 <_strtod_l+0x588>)
 800aca4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aca8:	ee17 1a90 	vmov	r1, s15
 800acac:	400a      	ands	r2, r1
 800acae:	4282      	cmp	r2, r0
 800acb0:	ec59 8b17 	vmov	r8, r9, d7
 800acb4:	d8bc      	bhi.n	800ac30 <_strtod_l+0x470>
 800acb6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800acba:	4282      	cmp	r2, r0
 800acbc:	bf86      	itte	hi
 800acbe:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 800ad4c <_strtod_l+0x58c>
 800acc2:	f04f 38ff 	movhi.w	r8, #4294967295
 800acc6:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800acca:	2200      	movs	r2, #0
 800accc:	9204      	str	r2, [sp, #16]
 800acce:	e078      	b.n	800adc2 <_strtod_l+0x602>
 800acd0:	07d6      	lsls	r6, r2, #31
 800acd2:	d504      	bpl.n	800acde <_strtod_l+0x51e>
 800acd4:	ed9c 6b00 	vldr	d6, [ip]
 800acd8:	2001      	movs	r0, #1
 800acda:	ee27 7b06 	vmul.f64	d7, d7, d6
 800acde:	3101      	adds	r1, #1
 800ace0:	1052      	asrs	r2, r2, #1
 800ace2:	f10c 0c08 	add.w	ip, ip, #8
 800ace6:	e7cd      	b.n	800ac84 <_strtod_l+0x4c4>
 800ace8:	d0ef      	beq.n	800acca <_strtod_l+0x50a>
 800acea:	4252      	negs	r2, r2
 800acec:	f012 000f 	ands.w	r0, r2, #15
 800acf0:	d00a      	beq.n	800ad08 <_strtod_l+0x548>
 800acf2:	4912      	ldr	r1, [pc, #72]	; (800ad3c <_strtod_l+0x57c>)
 800acf4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800acf8:	ed91 7b00 	vldr	d7, [r1]
 800acfc:	ec49 8b16 	vmov	d6, r8, r9
 800ad00:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ad04:	ec59 8b17 	vmov	r8, r9, d7
 800ad08:	1112      	asrs	r2, r2, #4
 800ad0a:	d0de      	beq.n	800acca <_strtod_l+0x50a>
 800ad0c:	2a1f      	cmp	r2, #31
 800ad0e:	dd1f      	ble.n	800ad50 <_strtod_l+0x590>
 800ad10:	2500      	movs	r5, #0
 800ad12:	462e      	mov	r6, r5
 800ad14:	9506      	str	r5, [sp, #24]
 800ad16:	462f      	mov	r7, r5
 800ad18:	2322      	movs	r3, #34	; 0x22
 800ad1a:	f04f 0800 	mov.w	r8, #0
 800ad1e:	f04f 0900 	mov.w	r9, #0
 800ad22:	6023      	str	r3, [r4, #0]
 800ad24:	e78e      	b.n	800ac44 <_strtod_l+0x484>
 800ad26:	bf00      	nop
 800ad28:	08012235 	.word	0x08012235
 800ad2c:	08012278 	.word	0x08012278
 800ad30:	0801222d 	.word	0x0801222d
 800ad34:	080123bc 	.word	0x080123bc
 800ad38:	08012668 	.word	0x08012668
 800ad3c:	08012548 	.word	0x08012548
 800ad40:	08012520 	.word	0x08012520
 800ad44:	7ca00000 	.word	0x7ca00000
 800ad48:	7ff00000 	.word	0x7ff00000
 800ad4c:	7fefffff 	.word	0x7fefffff
 800ad50:	f012 0110 	ands.w	r1, r2, #16
 800ad54:	bf18      	it	ne
 800ad56:	216a      	movne	r1, #106	; 0x6a
 800ad58:	9104      	str	r1, [sp, #16]
 800ad5a:	ec49 8b17 	vmov	d7, r8, r9
 800ad5e:	49be      	ldr	r1, [pc, #760]	; (800b058 <_strtod_l+0x898>)
 800ad60:	2000      	movs	r0, #0
 800ad62:	07d6      	lsls	r6, r2, #31
 800ad64:	d504      	bpl.n	800ad70 <_strtod_l+0x5b0>
 800ad66:	ed91 6b00 	vldr	d6, [r1]
 800ad6a:	2001      	movs	r0, #1
 800ad6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ad70:	1052      	asrs	r2, r2, #1
 800ad72:	f101 0108 	add.w	r1, r1, #8
 800ad76:	d1f4      	bne.n	800ad62 <_strtod_l+0x5a2>
 800ad78:	b108      	cbz	r0, 800ad7e <_strtod_l+0x5be>
 800ad7a:	ec59 8b17 	vmov	r8, r9, d7
 800ad7e:	9a04      	ldr	r2, [sp, #16]
 800ad80:	b1c2      	cbz	r2, 800adb4 <_strtod_l+0x5f4>
 800ad82:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800ad86:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800ad8a:	2a00      	cmp	r2, #0
 800ad8c:	4648      	mov	r0, r9
 800ad8e:	dd11      	ble.n	800adb4 <_strtod_l+0x5f4>
 800ad90:	2a1f      	cmp	r2, #31
 800ad92:	f340 812e 	ble.w	800aff2 <_strtod_l+0x832>
 800ad96:	2a34      	cmp	r2, #52	; 0x34
 800ad98:	bfde      	ittt	le
 800ad9a:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800ad9e:	f04f 32ff 	movle.w	r2, #4294967295
 800ada2:	fa02 f101 	lslle.w	r1, r2, r1
 800ada6:	f04f 0800 	mov.w	r8, #0
 800adaa:	bfcc      	ite	gt
 800adac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800adb0:	ea01 0900 	andle.w	r9, r1, r0
 800adb4:	ec49 8b17 	vmov	d7, r8, r9
 800adb8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800adbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adc0:	d0a6      	beq.n	800ad10 <_strtod_l+0x550>
 800adc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adc4:	9200      	str	r2, [sp, #0]
 800adc6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800adc8:	9a06      	ldr	r2, [sp, #24]
 800adca:	4620      	mov	r0, r4
 800adcc:	f001 fd6c 	bl	800c8a8 <__s2b>
 800add0:	9006      	str	r0, [sp, #24]
 800add2:	2800      	cmp	r0, #0
 800add4:	f43f af2c 	beq.w	800ac30 <_strtod_l+0x470>
 800add8:	9b07      	ldr	r3, [sp, #28]
 800adda:	1b7d      	subs	r5, r7, r5
 800addc:	2b00      	cmp	r3, #0
 800adde:	bfb4      	ite	lt
 800ade0:	462b      	movlt	r3, r5
 800ade2:	2300      	movge	r3, #0
 800ade4:	9309      	str	r3, [sp, #36]	; 0x24
 800ade6:	9b07      	ldr	r3, [sp, #28]
 800ade8:	ed9f 9b93 	vldr	d9, [pc, #588]	; 800b038 <_strtod_l+0x878>
 800adec:	ed9f ab94 	vldr	d10, [pc, #592]	; 800b040 <_strtod_l+0x880>
 800adf0:	ed9f bb95 	vldr	d11, [pc, #596]	; 800b048 <_strtod_l+0x888>
 800adf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800adf8:	2500      	movs	r5, #0
 800adfa:	930c      	str	r3, [sp, #48]	; 0x30
 800adfc:	462e      	mov	r6, r5
 800adfe:	9b06      	ldr	r3, [sp, #24]
 800ae00:	4620      	mov	r0, r4
 800ae02:	6859      	ldr	r1, [r3, #4]
 800ae04:	f001 fca8 	bl	800c758 <_Balloc>
 800ae08:	4607      	mov	r7, r0
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	f43f af14 	beq.w	800ac38 <_strtod_l+0x478>
 800ae10:	9b06      	ldr	r3, [sp, #24]
 800ae12:	691a      	ldr	r2, [r3, #16]
 800ae14:	3202      	adds	r2, #2
 800ae16:	f103 010c 	add.w	r1, r3, #12
 800ae1a:	0092      	lsls	r2, r2, #2
 800ae1c:	300c      	adds	r0, #12
 800ae1e:	f7fe fd2d 	bl	800987c <memcpy>
 800ae22:	ec49 8b10 	vmov	d0, r8, r9
 800ae26:	aa14      	add	r2, sp, #80	; 0x50
 800ae28:	a913      	add	r1, sp, #76	; 0x4c
 800ae2a:	4620      	mov	r0, r4
 800ae2c:	f002 f882 	bl	800cf34 <__d2b>
 800ae30:	ec49 8b18 	vmov	d8, r8, r9
 800ae34:	9012      	str	r0, [sp, #72]	; 0x48
 800ae36:	2800      	cmp	r0, #0
 800ae38:	f43f aefe 	beq.w	800ac38 <_strtod_l+0x478>
 800ae3c:	2101      	movs	r1, #1
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f001 fdcc 	bl	800c9dc <__i2b>
 800ae44:	4606      	mov	r6, r0
 800ae46:	2800      	cmp	r0, #0
 800ae48:	f43f aef6 	beq.w	800ac38 <_strtod_l+0x478>
 800ae4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae4e:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	bfab      	itete	ge
 800ae54:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ae56:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ae58:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ae5c:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ae60:	bfac      	ite	ge
 800ae62:	eb03 0b02 	addge.w	fp, r3, r2
 800ae66:	eba2 0a03 	sublt.w	sl, r2, r3
 800ae6a:	9a04      	ldr	r2, [sp, #16]
 800ae6c:	1a9b      	subs	r3, r3, r2
 800ae6e:	440b      	add	r3, r1
 800ae70:	4a7a      	ldr	r2, [pc, #488]	; (800b05c <_strtod_l+0x89c>)
 800ae72:	3b01      	subs	r3, #1
 800ae74:	4293      	cmp	r3, r2
 800ae76:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ae7a:	f280 80cd 	bge.w	800b018 <_strtod_l+0x858>
 800ae7e:	1ad2      	subs	r2, r2, r3
 800ae80:	2a1f      	cmp	r2, #31
 800ae82:	eba1 0102 	sub.w	r1, r1, r2
 800ae86:	f04f 0001 	mov.w	r0, #1
 800ae8a:	f300 80b9 	bgt.w	800b000 <_strtod_l+0x840>
 800ae8e:	fa00 f302 	lsl.w	r3, r0, r2
 800ae92:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae94:	2300      	movs	r3, #0
 800ae96:	930a      	str	r3, [sp, #40]	; 0x28
 800ae98:	eb0b 0301 	add.w	r3, fp, r1
 800ae9c:	9a04      	ldr	r2, [sp, #16]
 800ae9e:	459b      	cmp	fp, r3
 800aea0:	448a      	add	sl, r1
 800aea2:	4492      	add	sl, r2
 800aea4:	465a      	mov	r2, fp
 800aea6:	bfa8      	it	ge
 800aea8:	461a      	movge	r2, r3
 800aeaa:	4552      	cmp	r2, sl
 800aeac:	bfa8      	it	ge
 800aeae:	4652      	movge	r2, sl
 800aeb0:	2a00      	cmp	r2, #0
 800aeb2:	bfc2      	ittt	gt
 800aeb4:	1a9b      	subgt	r3, r3, r2
 800aeb6:	ebaa 0a02 	subgt.w	sl, sl, r2
 800aeba:	ebab 0b02 	subgt.w	fp, fp, r2
 800aebe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aec0:	2a00      	cmp	r2, #0
 800aec2:	dd18      	ble.n	800aef6 <_strtod_l+0x736>
 800aec4:	4631      	mov	r1, r6
 800aec6:	4620      	mov	r0, r4
 800aec8:	930f      	str	r3, [sp, #60]	; 0x3c
 800aeca:	f001 fe47 	bl	800cb5c <__pow5mult>
 800aece:	4606      	mov	r6, r0
 800aed0:	2800      	cmp	r0, #0
 800aed2:	f43f aeb1 	beq.w	800ac38 <_strtod_l+0x478>
 800aed6:	4601      	mov	r1, r0
 800aed8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800aeda:	4620      	mov	r0, r4
 800aedc:	f001 fd94 	bl	800ca08 <__multiply>
 800aee0:	900e      	str	r0, [sp, #56]	; 0x38
 800aee2:	2800      	cmp	r0, #0
 800aee4:	f43f aea8 	beq.w	800ac38 <_strtod_l+0x478>
 800aee8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800aeea:	4620      	mov	r0, r4
 800aeec:	f001 fc74 	bl	800c7d8 <_Bfree>
 800aef0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aef2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aef4:	9212      	str	r2, [sp, #72]	; 0x48
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	f300 8093 	bgt.w	800b022 <_strtod_l+0x862>
 800aefc:	9b07      	ldr	r3, [sp, #28]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	dd08      	ble.n	800af14 <_strtod_l+0x754>
 800af02:	4639      	mov	r1, r7
 800af04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af06:	4620      	mov	r0, r4
 800af08:	f001 fe28 	bl	800cb5c <__pow5mult>
 800af0c:	4607      	mov	r7, r0
 800af0e:	2800      	cmp	r0, #0
 800af10:	f43f ae92 	beq.w	800ac38 <_strtod_l+0x478>
 800af14:	f1ba 0f00 	cmp.w	sl, #0
 800af18:	dd08      	ble.n	800af2c <_strtod_l+0x76c>
 800af1a:	4639      	mov	r1, r7
 800af1c:	4652      	mov	r2, sl
 800af1e:	4620      	mov	r0, r4
 800af20:	f001 fe76 	bl	800cc10 <__lshift>
 800af24:	4607      	mov	r7, r0
 800af26:	2800      	cmp	r0, #0
 800af28:	f43f ae86 	beq.w	800ac38 <_strtod_l+0x478>
 800af2c:	f1bb 0f00 	cmp.w	fp, #0
 800af30:	dd08      	ble.n	800af44 <_strtod_l+0x784>
 800af32:	4631      	mov	r1, r6
 800af34:	465a      	mov	r2, fp
 800af36:	4620      	mov	r0, r4
 800af38:	f001 fe6a 	bl	800cc10 <__lshift>
 800af3c:	4606      	mov	r6, r0
 800af3e:	2800      	cmp	r0, #0
 800af40:	f43f ae7a 	beq.w	800ac38 <_strtod_l+0x478>
 800af44:	9912      	ldr	r1, [sp, #72]	; 0x48
 800af46:	463a      	mov	r2, r7
 800af48:	4620      	mov	r0, r4
 800af4a:	f001 feed 	bl	800cd28 <__mdiff>
 800af4e:	4605      	mov	r5, r0
 800af50:	2800      	cmp	r0, #0
 800af52:	f43f ae71 	beq.w	800ac38 <_strtod_l+0x478>
 800af56:	2300      	movs	r3, #0
 800af58:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800af5c:	60c3      	str	r3, [r0, #12]
 800af5e:	4631      	mov	r1, r6
 800af60:	f001 fec6 	bl	800ccf0 <__mcmp>
 800af64:	2800      	cmp	r0, #0
 800af66:	da7d      	bge.n	800b064 <_strtod_l+0x8a4>
 800af68:	ea5a 0308 	orrs.w	r3, sl, r8
 800af6c:	f040 80a3 	bne.w	800b0b6 <_strtod_l+0x8f6>
 800af70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af74:	2b00      	cmp	r3, #0
 800af76:	f040 809e 	bne.w	800b0b6 <_strtod_l+0x8f6>
 800af7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800af7e:	0d1b      	lsrs	r3, r3, #20
 800af80:	051b      	lsls	r3, r3, #20
 800af82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800af86:	f240 8096 	bls.w	800b0b6 <_strtod_l+0x8f6>
 800af8a:	696b      	ldr	r3, [r5, #20]
 800af8c:	b91b      	cbnz	r3, 800af96 <_strtod_l+0x7d6>
 800af8e:	692b      	ldr	r3, [r5, #16]
 800af90:	2b01      	cmp	r3, #1
 800af92:	f340 8090 	ble.w	800b0b6 <_strtod_l+0x8f6>
 800af96:	4629      	mov	r1, r5
 800af98:	2201      	movs	r2, #1
 800af9a:	4620      	mov	r0, r4
 800af9c:	f001 fe38 	bl	800cc10 <__lshift>
 800afa0:	4631      	mov	r1, r6
 800afa2:	4605      	mov	r5, r0
 800afa4:	f001 fea4 	bl	800ccf0 <__mcmp>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	f340 8084 	ble.w	800b0b6 <_strtod_l+0x8f6>
 800afae:	9904      	ldr	r1, [sp, #16]
 800afb0:	4a2b      	ldr	r2, [pc, #172]	; (800b060 <_strtod_l+0x8a0>)
 800afb2:	464b      	mov	r3, r9
 800afb4:	2900      	cmp	r1, #0
 800afb6:	f000 809d 	beq.w	800b0f4 <_strtod_l+0x934>
 800afba:	ea02 0109 	and.w	r1, r2, r9
 800afbe:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800afc2:	f300 8097 	bgt.w	800b0f4 <_strtod_l+0x934>
 800afc6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800afca:	f77f aea5 	ble.w	800ad18 <_strtod_l+0x558>
 800afce:	ed9f 7b20 	vldr	d7, [pc, #128]	; 800b050 <_strtod_l+0x890>
 800afd2:	ec49 8b16 	vmov	d6, r8, r9
 800afd6:	ee26 7b07 	vmul.f64	d7, d6, d7
 800afda:	ed8d 7b04 	vstr	d7, [sp, #16]
 800afde:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	bf08      	it	eq
 800afe6:	2322      	moveq	r3, #34	; 0x22
 800afe8:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800afec:	bf08      	it	eq
 800afee:	6023      	streq	r3, [r4, #0]
 800aff0:	e62c      	b.n	800ac4c <_strtod_l+0x48c>
 800aff2:	f04f 31ff 	mov.w	r1, #4294967295
 800aff6:	fa01 f202 	lsl.w	r2, r1, r2
 800affa:	ea02 0808 	and.w	r8, r2, r8
 800affe:	e6d9      	b.n	800adb4 <_strtod_l+0x5f4>
 800b000:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800b004:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800b008:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800b00c:	33e2      	adds	r3, #226	; 0xe2
 800b00e:	fa00 f303 	lsl.w	r3, r0, r3
 800b012:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800b016:	e73f      	b.n	800ae98 <_strtod_l+0x6d8>
 800b018:	2200      	movs	r2, #0
 800b01a:	2301      	movs	r3, #1
 800b01c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b020:	e73a      	b.n	800ae98 <_strtod_l+0x6d8>
 800b022:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b024:	461a      	mov	r2, r3
 800b026:	4620      	mov	r0, r4
 800b028:	f001 fdf2 	bl	800cc10 <__lshift>
 800b02c:	9012      	str	r0, [sp, #72]	; 0x48
 800b02e:	2800      	cmp	r0, #0
 800b030:	f47f af64 	bne.w	800aefc <_strtod_l+0x73c>
 800b034:	e600      	b.n	800ac38 <_strtod_l+0x478>
 800b036:	bf00      	nop
 800b038:	94a03595 	.word	0x94a03595
 800b03c:	3fcfffff 	.word	0x3fcfffff
 800b040:	94a03595 	.word	0x94a03595
 800b044:	3fdfffff 	.word	0x3fdfffff
 800b048:	35afe535 	.word	0x35afe535
 800b04c:	3fe00000 	.word	0x3fe00000
 800b050:	00000000 	.word	0x00000000
 800b054:	39500000 	.word	0x39500000
 800b058:	08012290 	.word	0x08012290
 800b05c:	fffffc02 	.word	0xfffffc02
 800b060:	7ff00000 	.word	0x7ff00000
 800b064:	46cb      	mov	fp, r9
 800b066:	d15f      	bne.n	800b128 <_strtod_l+0x968>
 800b068:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b06c:	f1ba 0f00 	cmp.w	sl, #0
 800b070:	d02a      	beq.n	800b0c8 <_strtod_l+0x908>
 800b072:	4aa7      	ldr	r2, [pc, #668]	; (800b310 <_strtod_l+0xb50>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d12b      	bne.n	800b0d0 <_strtod_l+0x910>
 800b078:	9b04      	ldr	r3, [sp, #16]
 800b07a:	4642      	mov	r2, r8
 800b07c:	b1fb      	cbz	r3, 800b0be <_strtod_l+0x8fe>
 800b07e:	4ba5      	ldr	r3, [pc, #660]	; (800b314 <_strtod_l+0xb54>)
 800b080:	ea09 0303 	and.w	r3, r9, r3
 800b084:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b088:	f04f 31ff 	mov.w	r1, #4294967295
 800b08c:	d81a      	bhi.n	800b0c4 <_strtod_l+0x904>
 800b08e:	0d1b      	lsrs	r3, r3, #20
 800b090:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b094:	fa01 f303 	lsl.w	r3, r1, r3
 800b098:	429a      	cmp	r2, r3
 800b09a:	d119      	bne.n	800b0d0 <_strtod_l+0x910>
 800b09c:	4b9e      	ldr	r3, [pc, #632]	; (800b318 <_strtod_l+0xb58>)
 800b09e:	459b      	cmp	fp, r3
 800b0a0:	d102      	bne.n	800b0a8 <_strtod_l+0x8e8>
 800b0a2:	3201      	adds	r2, #1
 800b0a4:	f43f adc8 	beq.w	800ac38 <_strtod_l+0x478>
 800b0a8:	4b9a      	ldr	r3, [pc, #616]	; (800b314 <_strtod_l+0xb54>)
 800b0aa:	ea0b 0303 	and.w	r3, fp, r3
 800b0ae:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b0b2:	f04f 0800 	mov.w	r8, #0
 800b0b6:	9b04      	ldr	r3, [sp, #16]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d188      	bne.n	800afce <_strtod_l+0x80e>
 800b0bc:	e5c6      	b.n	800ac4c <_strtod_l+0x48c>
 800b0be:	f04f 33ff 	mov.w	r3, #4294967295
 800b0c2:	e7e9      	b.n	800b098 <_strtod_l+0x8d8>
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	e7e7      	b.n	800b098 <_strtod_l+0x8d8>
 800b0c8:	ea53 0308 	orrs.w	r3, r3, r8
 800b0cc:	f43f af6f 	beq.w	800afae <_strtod_l+0x7ee>
 800b0d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0d2:	b1cb      	cbz	r3, 800b108 <_strtod_l+0x948>
 800b0d4:	ea13 0f0b 	tst.w	r3, fp
 800b0d8:	d0ed      	beq.n	800b0b6 <_strtod_l+0x8f6>
 800b0da:	9a04      	ldr	r2, [sp, #16]
 800b0dc:	4640      	mov	r0, r8
 800b0de:	4649      	mov	r1, r9
 800b0e0:	f1ba 0f00 	cmp.w	sl, #0
 800b0e4:	d014      	beq.n	800b110 <_strtod_l+0x950>
 800b0e6:	f7ff fb50 	bl	800a78a <sulp>
 800b0ea:	ee38 7b00 	vadd.f64	d7, d8, d0
 800b0ee:	ec59 8b17 	vmov	r8, r9, d7
 800b0f2:	e7e0      	b.n	800b0b6 <_strtod_l+0x8f6>
 800b0f4:	4013      	ands	r3, r2
 800b0f6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b0fa:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b0fe:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b102:	f04f 38ff 	mov.w	r8, #4294967295
 800b106:	e7d6      	b.n	800b0b6 <_strtod_l+0x8f6>
 800b108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b10a:	ea13 0f08 	tst.w	r3, r8
 800b10e:	e7e3      	b.n	800b0d8 <_strtod_l+0x918>
 800b110:	f7ff fb3b 	bl	800a78a <sulp>
 800b114:	ee38 0b40 	vsub.f64	d0, d8, d0
 800b118:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800b11c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b120:	ec59 8b10 	vmov	r8, r9, d0
 800b124:	d1c7      	bne.n	800b0b6 <_strtod_l+0x8f6>
 800b126:	e5f7      	b.n	800ad18 <_strtod_l+0x558>
 800b128:	4631      	mov	r1, r6
 800b12a:	4628      	mov	r0, r5
 800b12c:	f001 ff5e 	bl	800cfec <__ratio>
 800b130:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800b134:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b13c:	d865      	bhi.n	800b20a <_strtod_l+0xa4a>
 800b13e:	f1ba 0f00 	cmp.w	sl, #0
 800b142:	d042      	beq.n	800b1ca <_strtod_l+0xa0a>
 800b144:	4b75      	ldr	r3, [pc, #468]	; (800b31c <_strtod_l+0xb5c>)
 800b146:	2200      	movs	r2, #0
 800b148:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800b14c:	4871      	ldr	r0, [pc, #452]	; (800b314 <_strtod_l+0xb54>)
 800b14e:	f8df c1d8 	ldr.w	ip, [pc, #472]	; 800b328 <_strtod_l+0xb68>
 800b152:	ea0b 0100 	and.w	r1, fp, r0
 800b156:	4561      	cmp	r1, ip
 800b158:	f040 808e 	bne.w	800b278 <_strtod_l+0xab8>
 800b15c:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800b160:	ec49 8b10 	vmov	d0, r8, r9
 800b164:	ec43 2b1c 	vmov	d12, r2, r3
 800b168:	910a      	str	r1, [sp, #40]	; 0x28
 800b16a:	f001 fe67 	bl	800ce3c <__ulp>
 800b16e:	ec49 8b1e 	vmov	d14, r8, r9
 800b172:	4868      	ldr	r0, [pc, #416]	; (800b314 <_strtod_l+0xb54>)
 800b174:	eeac eb00 	vfma.f64	d14, d12, d0
 800b178:	ee1e 3a90 	vmov	r3, s29
 800b17c:	4a68      	ldr	r2, [pc, #416]	; (800b320 <_strtod_l+0xb60>)
 800b17e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b180:	4018      	ands	r0, r3
 800b182:	4290      	cmp	r0, r2
 800b184:	ec59 8b1e 	vmov	r8, r9, d14
 800b188:	d94e      	bls.n	800b228 <_strtod_l+0xa68>
 800b18a:	ee18 3a90 	vmov	r3, s17
 800b18e:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b192:	4293      	cmp	r3, r2
 800b194:	d104      	bne.n	800b1a0 <_strtod_l+0x9e0>
 800b196:	ee18 3a10 	vmov	r3, s16
 800b19a:	3301      	adds	r3, #1
 800b19c:	f43f ad4c 	beq.w	800ac38 <_strtod_l+0x478>
 800b1a0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b318 <_strtod_l+0xb58>
 800b1a4:	f04f 38ff 	mov.w	r8, #4294967295
 800b1a8:	9912      	ldr	r1, [sp, #72]	; 0x48
 800b1aa:	4620      	mov	r0, r4
 800b1ac:	f001 fb14 	bl	800c7d8 <_Bfree>
 800b1b0:	4639      	mov	r1, r7
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f001 fb10 	bl	800c7d8 <_Bfree>
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4620      	mov	r0, r4
 800b1bc:	f001 fb0c 	bl	800c7d8 <_Bfree>
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4620      	mov	r0, r4
 800b1c4:	f001 fb08 	bl	800c7d8 <_Bfree>
 800b1c8:	e619      	b.n	800adfe <_strtod_l+0x63e>
 800b1ca:	f1b8 0f00 	cmp.w	r8, #0
 800b1ce:	d112      	bne.n	800b1f6 <_strtod_l+0xa36>
 800b1d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b1d4:	b9b3      	cbnz	r3, 800b204 <_strtod_l+0xa44>
 800b1d6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b1da:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800b1de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e2:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b1e6:	bf58      	it	pl
 800b1e8:	ee20 db0d 	vmulpl.f64	d13, d0, d13
 800b1ec:	eeb1 7b4d 	vneg.f64	d7, d13
 800b1f0:	ec53 2b17 	vmov	r2, r3, d7
 800b1f4:	e7aa      	b.n	800b14c <_strtod_l+0x98c>
 800b1f6:	f1b8 0f01 	cmp.w	r8, #1
 800b1fa:	d103      	bne.n	800b204 <_strtod_l+0xa44>
 800b1fc:	f1b9 0f00 	cmp.w	r9, #0
 800b200:	f43f ad8a 	beq.w	800ad18 <_strtod_l+0x558>
 800b204:	4b47      	ldr	r3, [pc, #284]	; (800b324 <_strtod_l+0xb64>)
 800b206:	2200      	movs	r2, #0
 800b208:	e79e      	b.n	800b148 <_strtod_l+0x988>
 800b20a:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800b20e:	ee20 db0d 	vmul.f64	d13, d0, d13
 800b212:	f1ba 0f00 	cmp.w	sl, #0
 800b216:	d104      	bne.n	800b222 <_strtod_l+0xa62>
 800b218:	eeb1 7b4d 	vneg.f64	d7, d13
 800b21c:	ec53 2b17 	vmov	r2, r3, d7
 800b220:	e794      	b.n	800b14c <_strtod_l+0x98c>
 800b222:	eeb0 7b4d 	vmov.f64	d7, d13
 800b226:	e7f9      	b.n	800b21c <_strtod_l+0xa5c>
 800b228:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b22c:	9b04      	ldr	r3, [sp, #16]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d1ba      	bne.n	800b1a8 <_strtod_l+0x9e8>
 800b232:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b236:	0d1b      	lsrs	r3, r3, #20
 800b238:	051b      	lsls	r3, r3, #20
 800b23a:	4299      	cmp	r1, r3
 800b23c:	d1b4      	bne.n	800b1a8 <_strtod_l+0x9e8>
 800b23e:	ec51 0b1d 	vmov	r0, r1, d13
 800b242:	f7f5 fa29 	bl	8000698 <__aeabi_d2lz>
 800b246:	f7f5 f9e1 	bl	800060c <__aeabi_l2d>
 800b24a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b24e:	ec41 0b17 	vmov	d7, r0, r1
 800b252:	ea43 0308 	orr.w	r3, r3, r8
 800b256:	ea53 030a 	orrs.w	r3, r3, sl
 800b25a:	ee3d db47 	vsub.f64	d13, d13, d7
 800b25e:	d03c      	beq.n	800b2da <_strtod_l+0xb1a>
 800b260:	eeb4 dbca 	vcmpe.f64	d13, d10
 800b264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b268:	f53f acf0 	bmi.w	800ac4c <_strtod_l+0x48c>
 800b26c:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800b270:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b274:	dd98      	ble.n	800b1a8 <_strtod_l+0x9e8>
 800b276:	e4e9      	b.n	800ac4c <_strtod_l+0x48c>
 800b278:	9804      	ldr	r0, [sp, #16]
 800b27a:	b1f0      	cbz	r0, 800b2ba <_strtod_l+0xafa>
 800b27c:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800b280:	d81b      	bhi.n	800b2ba <_strtod_l+0xafa>
 800b282:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b308 <_strtod_l+0xb48>
 800b286:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800b28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28e:	d811      	bhi.n	800b2b4 <_strtod_l+0xaf4>
 800b290:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800b294:	ee1d 3a10 	vmov	r3, s26
 800b298:	2b01      	cmp	r3, #1
 800b29a:	bf38      	it	cc
 800b29c:	2301      	movcc	r3, #1
 800b29e:	ee0d 3a10 	vmov	s26, r3
 800b2a2:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800b2a6:	f1ba 0f00 	cmp.w	sl, #0
 800b2aa:	d113      	bne.n	800b2d4 <_strtod_l+0xb14>
 800b2ac:	eeb1 7b4d 	vneg.f64	d7, d13
 800b2b0:	ec53 2b17 	vmov	r2, r3, d7
 800b2b4:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800b2b8:	1a43      	subs	r3, r0, r1
 800b2ba:	eeb0 0b48 	vmov.f64	d0, d8
 800b2be:	ec43 2b1c 	vmov	d12, r2, r3
 800b2c2:	910a      	str	r1, [sp, #40]	; 0x28
 800b2c4:	f001 fdba 	bl	800ce3c <__ulp>
 800b2c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b2ca:	eeac 8b00 	vfma.f64	d8, d12, d0
 800b2ce:	ec59 8b18 	vmov	r8, r9, d8
 800b2d2:	e7ab      	b.n	800b22c <_strtod_l+0xa6c>
 800b2d4:	eeb0 7b4d 	vmov.f64	d7, d13
 800b2d8:	e7ea      	b.n	800b2b0 <_strtod_l+0xaf0>
 800b2da:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800b2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e2:	f57f af61 	bpl.w	800b1a8 <_strtod_l+0x9e8>
 800b2e6:	e4b1      	b.n	800ac4c <_strtod_l+0x48c>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	9308      	str	r3, [sp, #32]
 800b2ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b2ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b2f0:	6013      	str	r3, [r2, #0]
 800b2f2:	f7ff baad 	b.w	800a850 <_strtod_l+0x90>
 800b2f6:	2a65      	cmp	r2, #101	; 0x65
 800b2f8:	f43f ab9f 	beq.w	800aa3a <_strtod_l+0x27a>
 800b2fc:	2a45      	cmp	r2, #69	; 0x45
 800b2fe:	f43f ab9c 	beq.w	800aa3a <_strtod_l+0x27a>
 800b302:	2101      	movs	r1, #1
 800b304:	f7ff bbd4 	b.w	800aab0 <_strtod_l+0x2f0>
 800b308:	ffc00000 	.word	0xffc00000
 800b30c:	41dfffff 	.word	0x41dfffff
 800b310:	000fffff 	.word	0x000fffff
 800b314:	7ff00000 	.word	0x7ff00000
 800b318:	7fefffff 	.word	0x7fefffff
 800b31c:	3ff00000 	.word	0x3ff00000
 800b320:	7c9fffff 	.word	0x7c9fffff
 800b324:	bff00000 	.word	0xbff00000
 800b328:	7fe00000 	.word	0x7fe00000

0800b32c <_strtod_r>:
 800b32c:	4b01      	ldr	r3, [pc, #4]	; (800b334 <_strtod_r+0x8>)
 800b32e:	f7ff ba47 	b.w	800a7c0 <_strtod_l>
 800b332:	bf00      	nop
 800b334:	20000074 	.word	0x20000074

0800b338 <_strtol_l.constprop.0>:
 800b338:	2b01      	cmp	r3, #1
 800b33a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b33e:	d001      	beq.n	800b344 <_strtol_l.constprop.0+0xc>
 800b340:	2b24      	cmp	r3, #36	; 0x24
 800b342:	d906      	bls.n	800b352 <_strtol_l.constprop.0+0x1a>
 800b344:	f7fe fa68 	bl	8009818 <__errno>
 800b348:	2316      	movs	r3, #22
 800b34a:	6003      	str	r3, [r0, #0]
 800b34c:	2000      	movs	r0, #0
 800b34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b352:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b438 <_strtol_l.constprop.0+0x100>
 800b356:	460d      	mov	r5, r1
 800b358:	462e      	mov	r6, r5
 800b35a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b35e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b362:	f017 0708 	ands.w	r7, r7, #8
 800b366:	d1f7      	bne.n	800b358 <_strtol_l.constprop.0+0x20>
 800b368:	2c2d      	cmp	r4, #45	; 0x2d
 800b36a:	d132      	bne.n	800b3d2 <_strtol_l.constprop.0+0x9a>
 800b36c:	782c      	ldrb	r4, [r5, #0]
 800b36e:	2701      	movs	r7, #1
 800b370:	1cb5      	adds	r5, r6, #2
 800b372:	2b00      	cmp	r3, #0
 800b374:	d05b      	beq.n	800b42e <_strtol_l.constprop.0+0xf6>
 800b376:	2b10      	cmp	r3, #16
 800b378:	d109      	bne.n	800b38e <_strtol_l.constprop.0+0x56>
 800b37a:	2c30      	cmp	r4, #48	; 0x30
 800b37c:	d107      	bne.n	800b38e <_strtol_l.constprop.0+0x56>
 800b37e:	782c      	ldrb	r4, [r5, #0]
 800b380:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b384:	2c58      	cmp	r4, #88	; 0x58
 800b386:	d14d      	bne.n	800b424 <_strtol_l.constprop.0+0xec>
 800b388:	786c      	ldrb	r4, [r5, #1]
 800b38a:	2310      	movs	r3, #16
 800b38c:	3502      	adds	r5, #2
 800b38e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b392:	f108 38ff 	add.w	r8, r8, #4294967295
 800b396:	f04f 0c00 	mov.w	ip, #0
 800b39a:	fbb8 f9f3 	udiv	r9, r8, r3
 800b39e:	4666      	mov	r6, ip
 800b3a0:	fb03 8a19 	mls	sl, r3, r9, r8
 800b3a4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b3a8:	f1be 0f09 	cmp.w	lr, #9
 800b3ac:	d816      	bhi.n	800b3dc <_strtol_l.constprop.0+0xa4>
 800b3ae:	4674      	mov	r4, lr
 800b3b0:	42a3      	cmp	r3, r4
 800b3b2:	dd24      	ble.n	800b3fe <_strtol_l.constprop.0+0xc6>
 800b3b4:	f1bc 0f00 	cmp.w	ip, #0
 800b3b8:	db1e      	blt.n	800b3f8 <_strtol_l.constprop.0+0xc0>
 800b3ba:	45b1      	cmp	r9, r6
 800b3bc:	d31c      	bcc.n	800b3f8 <_strtol_l.constprop.0+0xc0>
 800b3be:	d101      	bne.n	800b3c4 <_strtol_l.constprop.0+0x8c>
 800b3c0:	45a2      	cmp	sl, r4
 800b3c2:	db19      	blt.n	800b3f8 <_strtol_l.constprop.0+0xc0>
 800b3c4:	fb06 4603 	mla	r6, r6, r3, r4
 800b3c8:	f04f 0c01 	mov.w	ip, #1
 800b3cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b3d0:	e7e8      	b.n	800b3a4 <_strtol_l.constprop.0+0x6c>
 800b3d2:	2c2b      	cmp	r4, #43	; 0x2b
 800b3d4:	bf04      	itt	eq
 800b3d6:	782c      	ldrbeq	r4, [r5, #0]
 800b3d8:	1cb5      	addeq	r5, r6, #2
 800b3da:	e7ca      	b.n	800b372 <_strtol_l.constprop.0+0x3a>
 800b3dc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b3e0:	f1be 0f19 	cmp.w	lr, #25
 800b3e4:	d801      	bhi.n	800b3ea <_strtol_l.constprop.0+0xb2>
 800b3e6:	3c37      	subs	r4, #55	; 0x37
 800b3e8:	e7e2      	b.n	800b3b0 <_strtol_l.constprop.0+0x78>
 800b3ea:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b3ee:	f1be 0f19 	cmp.w	lr, #25
 800b3f2:	d804      	bhi.n	800b3fe <_strtol_l.constprop.0+0xc6>
 800b3f4:	3c57      	subs	r4, #87	; 0x57
 800b3f6:	e7db      	b.n	800b3b0 <_strtol_l.constprop.0+0x78>
 800b3f8:	f04f 3cff 	mov.w	ip, #4294967295
 800b3fc:	e7e6      	b.n	800b3cc <_strtol_l.constprop.0+0x94>
 800b3fe:	f1bc 0f00 	cmp.w	ip, #0
 800b402:	da05      	bge.n	800b410 <_strtol_l.constprop.0+0xd8>
 800b404:	2322      	movs	r3, #34	; 0x22
 800b406:	6003      	str	r3, [r0, #0]
 800b408:	4646      	mov	r6, r8
 800b40a:	b942      	cbnz	r2, 800b41e <_strtol_l.constprop.0+0xe6>
 800b40c:	4630      	mov	r0, r6
 800b40e:	e79e      	b.n	800b34e <_strtol_l.constprop.0+0x16>
 800b410:	b107      	cbz	r7, 800b414 <_strtol_l.constprop.0+0xdc>
 800b412:	4276      	negs	r6, r6
 800b414:	2a00      	cmp	r2, #0
 800b416:	d0f9      	beq.n	800b40c <_strtol_l.constprop.0+0xd4>
 800b418:	f1bc 0f00 	cmp.w	ip, #0
 800b41c:	d000      	beq.n	800b420 <_strtol_l.constprop.0+0xe8>
 800b41e:	1e69      	subs	r1, r5, #1
 800b420:	6011      	str	r1, [r2, #0]
 800b422:	e7f3      	b.n	800b40c <_strtol_l.constprop.0+0xd4>
 800b424:	2430      	movs	r4, #48	; 0x30
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1b1      	bne.n	800b38e <_strtol_l.constprop.0+0x56>
 800b42a:	2308      	movs	r3, #8
 800b42c:	e7af      	b.n	800b38e <_strtol_l.constprop.0+0x56>
 800b42e:	2c30      	cmp	r4, #48	; 0x30
 800b430:	d0a5      	beq.n	800b37e <_strtol_l.constprop.0+0x46>
 800b432:	230a      	movs	r3, #10
 800b434:	e7ab      	b.n	800b38e <_strtol_l.constprop.0+0x56>
 800b436:	bf00      	nop
 800b438:	080122b9 	.word	0x080122b9

0800b43c <_strtol_r>:
 800b43c:	f7ff bf7c 	b.w	800b338 <_strtol_l.constprop.0>

0800b440 <quorem>:
 800b440:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b444:	6903      	ldr	r3, [r0, #16]
 800b446:	690c      	ldr	r4, [r1, #16]
 800b448:	42a3      	cmp	r3, r4
 800b44a:	4607      	mov	r7, r0
 800b44c:	f2c0 8081 	blt.w	800b552 <quorem+0x112>
 800b450:	3c01      	subs	r4, #1
 800b452:	f101 0814 	add.w	r8, r1, #20
 800b456:	f100 0514 	add.w	r5, r0, #20
 800b45a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b45e:	9301      	str	r3, [sp, #4]
 800b460:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b464:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b468:	3301      	adds	r3, #1
 800b46a:	429a      	cmp	r2, r3
 800b46c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b470:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b474:	fbb2 f6f3 	udiv	r6, r2, r3
 800b478:	d331      	bcc.n	800b4de <quorem+0x9e>
 800b47a:	f04f 0e00 	mov.w	lr, #0
 800b47e:	4640      	mov	r0, r8
 800b480:	46ac      	mov	ip, r5
 800b482:	46f2      	mov	sl, lr
 800b484:	f850 2b04 	ldr.w	r2, [r0], #4
 800b488:	b293      	uxth	r3, r2
 800b48a:	fb06 e303 	mla	r3, r6, r3, lr
 800b48e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b492:	b29b      	uxth	r3, r3
 800b494:	ebaa 0303 	sub.w	r3, sl, r3
 800b498:	f8dc a000 	ldr.w	sl, [ip]
 800b49c:	0c12      	lsrs	r2, r2, #16
 800b49e:	fa13 f38a 	uxtah	r3, r3, sl
 800b4a2:	fb06 e202 	mla	r2, r6, r2, lr
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	9b00      	ldr	r3, [sp, #0]
 800b4aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b4ae:	b292      	uxth	r2, r2
 800b4b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b4b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b4b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800b4bc:	4581      	cmp	r9, r0
 800b4be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4c2:	f84c 3b04 	str.w	r3, [ip], #4
 800b4c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b4ca:	d2db      	bcs.n	800b484 <quorem+0x44>
 800b4cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800b4d0:	b92b      	cbnz	r3, 800b4de <quorem+0x9e>
 800b4d2:	9b01      	ldr	r3, [sp, #4]
 800b4d4:	3b04      	subs	r3, #4
 800b4d6:	429d      	cmp	r5, r3
 800b4d8:	461a      	mov	r2, r3
 800b4da:	d32e      	bcc.n	800b53a <quorem+0xfa>
 800b4dc:	613c      	str	r4, [r7, #16]
 800b4de:	4638      	mov	r0, r7
 800b4e0:	f001 fc06 	bl	800ccf0 <__mcmp>
 800b4e4:	2800      	cmp	r0, #0
 800b4e6:	db24      	blt.n	800b532 <quorem+0xf2>
 800b4e8:	3601      	adds	r6, #1
 800b4ea:	4628      	mov	r0, r5
 800b4ec:	f04f 0c00 	mov.w	ip, #0
 800b4f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800b4f4:	f8d0 e000 	ldr.w	lr, [r0]
 800b4f8:	b293      	uxth	r3, r2
 800b4fa:	ebac 0303 	sub.w	r3, ip, r3
 800b4fe:	0c12      	lsrs	r2, r2, #16
 800b500:	fa13 f38e 	uxtah	r3, r3, lr
 800b504:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b508:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b512:	45c1      	cmp	r9, r8
 800b514:	f840 3b04 	str.w	r3, [r0], #4
 800b518:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b51c:	d2e8      	bcs.n	800b4f0 <quorem+0xb0>
 800b51e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b522:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b526:	b922      	cbnz	r2, 800b532 <quorem+0xf2>
 800b528:	3b04      	subs	r3, #4
 800b52a:	429d      	cmp	r5, r3
 800b52c:	461a      	mov	r2, r3
 800b52e:	d30a      	bcc.n	800b546 <quorem+0x106>
 800b530:	613c      	str	r4, [r7, #16]
 800b532:	4630      	mov	r0, r6
 800b534:	b003      	add	sp, #12
 800b536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53a:	6812      	ldr	r2, [r2, #0]
 800b53c:	3b04      	subs	r3, #4
 800b53e:	2a00      	cmp	r2, #0
 800b540:	d1cc      	bne.n	800b4dc <quorem+0x9c>
 800b542:	3c01      	subs	r4, #1
 800b544:	e7c7      	b.n	800b4d6 <quorem+0x96>
 800b546:	6812      	ldr	r2, [r2, #0]
 800b548:	3b04      	subs	r3, #4
 800b54a:	2a00      	cmp	r2, #0
 800b54c:	d1f0      	bne.n	800b530 <quorem+0xf0>
 800b54e:	3c01      	subs	r4, #1
 800b550:	e7eb      	b.n	800b52a <quorem+0xea>
 800b552:	2000      	movs	r0, #0
 800b554:	e7ee      	b.n	800b534 <quorem+0xf4>
	...

0800b558 <_dtoa_r>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	ed2d 8b02 	vpush	{d8}
 800b560:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b562:	b091      	sub	sp, #68	; 0x44
 800b564:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b568:	ec59 8b10 	vmov	r8, r9, d0
 800b56c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800b56e:	9106      	str	r1, [sp, #24]
 800b570:	4606      	mov	r6, r0
 800b572:	9208      	str	r2, [sp, #32]
 800b574:	930c      	str	r3, [sp, #48]	; 0x30
 800b576:	b975      	cbnz	r5, 800b596 <_dtoa_r+0x3e>
 800b578:	2010      	movs	r0, #16
 800b57a:	f7fe f977 	bl	800986c <malloc>
 800b57e:	4602      	mov	r2, r0
 800b580:	6270      	str	r0, [r6, #36]	; 0x24
 800b582:	b920      	cbnz	r0, 800b58e <_dtoa_r+0x36>
 800b584:	4baa      	ldr	r3, [pc, #680]	; (800b830 <_dtoa_r+0x2d8>)
 800b586:	21ea      	movs	r1, #234	; 0xea
 800b588:	48aa      	ldr	r0, [pc, #680]	; (800b834 <_dtoa_r+0x2dc>)
 800b58a:	f001 ff3f 	bl	800d40c <__assert_func>
 800b58e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b592:	6005      	str	r5, [r0, #0]
 800b594:	60c5      	str	r5, [r0, #12]
 800b596:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b598:	6819      	ldr	r1, [r3, #0]
 800b59a:	b151      	cbz	r1, 800b5b2 <_dtoa_r+0x5a>
 800b59c:	685a      	ldr	r2, [r3, #4]
 800b59e:	604a      	str	r2, [r1, #4]
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	4093      	lsls	r3, r2
 800b5a4:	608b      	str	r3, [r1, #8]
 800b5a6:	4630      	mov	r0, r6
 800b5a8:	f001 f916 	bl	800c7d8 <_Bfree>
 800b5ac:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	601a      	str	r2, [r3, #0]
 800b5b2:	f1b9 0300 	subs.w	r3, r9, #0
 800b5b6:	bfbb      	ittet	lt
 800b5b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b5bc:	9303      	strlt	r3, [sp, #12]
 800b5be:	2300      	movge	r3, #0
 800b5c0:	2201      	movlt	r2, #1
 800b5c2:	bfac      	ite	ge
 800b5c4:	6023      	strge	r3, [r4, #0]
 800b5c6:	6022      	strlt	r2, [r4, #0]
 800b5c8:	4b9b      	ldr	r3, [pc, #620]	; (800b838 <_dtoa_r+0x2e0>)
 800b5ca:	9c03      	ldr	r4, [sp, #12]
 800b5cc:	43a3      	bics	r3, r4
 800b5ce:	d11c      	bne.n	800b60a <_dtoa_r+0xb2>
 800b5d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b5dc:	ea53 0308 	orrs.w	r3, r3, r8
 800b5e0:	f000 84fd 	beq.w	800bfde <_dtoa_r+0xa86>
 800b5e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b5e6:	b963      	cbnz	r3, 800b602 <_dtoa_r+0xaa>
 800b5e8:	4b94      	ldr	r3, [pc, #592]	; (800b83c <_dtoa_r+0x2e4>)
 800b5ea:	e01f      	b.n	800b62c <_dtoa_r+0xd4>
 800b5ec:	4b94      	ldr	r3, [pc, #592]	; (800b840 <_dtoa_r+0x2e8>)
 800b5ee:	9301      	str	r3, [sp, #4]
 800b5f0:	3308      	adds	r3, #8
 800b5f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800b5f4:	6013      	str	r3, [r2, #0]
 800b5f6:	9801      	ldr	r0, [sp, #4]
 800b5f8:	b011      	add	sp, #68	; 0x44
 800b5fa:	ecbd 8b02 	vpop	{d8}
 800b5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b602:	4b8e      	ldr	r3, [pc, #568]	; (800b83c <_dtoa_r+0x2e4>)
 800b604:	9301      	str	r3, [sp, #4]
 800b606:	3303      	adds	r3, #3
 800b608:	e7f3      	b.n	800b5f2 <_dtoa_r+0x9a>
 800b60a:	ed9d 8b02 	vldr	d8, [sp, #8]
 800b60e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b616:	d10b      	bne.n	800b630 <_dtoa_r+0xd8>
 800b618:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b61a:	2301      	movs	r3, #1
 800b61c:	6013      	str	r3, [r2, #0]
 800b61e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b620:	2b00      	cmp	r3, #0
 800b622:	f000 84d9 	beq.w	800bfd8 <_dtoa_r+0xa80>
 800b626:	4887      	ldr	r0, [pc, #540]	; (800b844 <_dtoa_r+0x2ec>)
 800b628:	6018      	str	r0, [r3, #0]
 800b62a:	1e43      	subs	r3, r0, #1
 800b62c:	9301      	str	r3, [sp, #4]
 800b62e:	e7e2      	b.n	800b5f6 <_dtoa_r+0x9e>
 800b630:	a90f      	add	r1, sp, #60	; 0x3c
 800b632:	aa0e      	add	r2, sp, #56	; 0x38
 800b634:	4630      	mov	r0, r6
 800b636:	eeb0 0b48 	vmov.f64	d0, d8
 800b63a:	f001 fc7b 	bl	800cf34 <__d2b>
 800b63e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800b642:	4605      	mov	r5, r0
 800b644:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b646:	2900      	cmp	r1, #0
 800b648:	d046      	beq.n	800b6d8 <_dtoa_r+0x180>
 800b64a:	ee18 4a90 	vmov	r4, s17
 800b64e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b652:	ec53 2b18 	vmov	r2, r3, d8
 800b656:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800b65a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b65e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800b662:	2400      	movs	r4, #0
 800b664:	ec43 2b16 	vmov	d6, r2, r3
 800b668:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800b66c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b818 <_dtoa_r+0x2c0>
 800b670:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b674:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 800b820 <_dtoa_r+0x2c8>
 800b678:	eea7 6b05 	vfma.f64	d6, d7, d5
 800b67c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800b828 <_dtoa_r+0x2d0>
 800b680:	ee07 1a90 	vmov	s15, r1
 800b684:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b688:	eeb0 7b46 	vmov.f64	d7, d6
 800b68c:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b690:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b694:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b69c:	ee16 ba90 	vmov	fp, s13
 800b6a0:	940a      	str	r4, [sp, #40]	; 0x28
 800b6a2:	d508      	bpl.n	800b6b6 <_dtoa_r+0x15e>
 800b6a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b6a8:	eeb4 6b47 	vcmp.f64	d6, d7
 800b6ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b0:	bf18      	it	ne
 800b6b2:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b6b6:	f1bb 0f16 	cmp.w	fp, #22
 800b6ba:	d82f      	bhi.n	800b71c <_dtoa_r+0x1c4>
 800b6bc:	4b62      	ldr	r3, [pc, #392]	; (800b848 <_dtoa_r+0x2f0>)
 800b6be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b6c2:	ed93 7b00 	vldr	d7, [r3]
 800b6c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b6ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ce:	d501      	bpl.n	800b6d4 <_dtoa_r+0x17c>
 800b6d0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	e022      	b.n	800b71e <_dtoa_r+0x1c6>
 800b6d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b6da:	4401      	add	r1, r0
 800b6dc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800b6e0:	2b20      	cmp	r3, #32
 800b6e2:	bfc1      	itttt	gt
 800b6e4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b6e8:	fa04 f303 	lslgt.w	r3, r4, r3
 800b6ec:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800b6f0:	fa28 f804 	lsrgt.w	r8, r8, r4
 800b6f4:	bfd6      	itet	le
 800b6f6:	f1c3 0320 	rsble	r3, r3, #32
 800b6fa:	ea43 0808 	orrgt.w	r8, r3, r8
 800b6fe:	fa08 f803 	lslle.w	r8, r8, r3
 800b702:	ee07 8a90 	vmov	s15, r8
 800b706:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b70a:	3901      	subs	r1, #1
 800b70c:	ee17 4a90 	vmov	r4, s15
 800b710:	ec53 2b17 	vmov	r2, r3, d7
 800b714:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800b718:	2401      	movs	r4, #1
 800b71a:	e7a3      	b.n	800b664 <_dtoa_r+0x10c>
 800b71c:	2301      	movs	r3, #1
 800b71e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b720:	1a43      	subs	r3, r0, r1
 800b722:	1e5a      	subs	r2, r3, #1
 800b724:	bf45      	ittet	mi
 800b726:	f1c3 0301 	rsbmi	r3, r3, #1
 800b72a:	9304      	strmi	r3, [sp, #16]
 800b72c:	2300      	movpl	r3, #0
 800b72e:	2300      	movmi	r3, #0
 800b730:	9205      	str	r2, [sp, #20]
 800b732:	bf54      	ite	pl
 800b734:	9304      	strpl	r3, [sp, #16]
 800b736:	9305      	strmi	r3, [sp, #20]
 800b738:	f1bb 0f00 	cmp.w	fp, #0
 800b73c:	db18      	blt.n	800b770 <_dtoa_r+0x218>
 800b73e:	9b05      	ldr	r3, [sp, #20]
 800b740:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 800b744:	445b      	add	r3, fp
 800b746:	9305      	str	r3, [sp, #20]
 800b748:	2300      	movs	r3, #0
 800b74a:	9a06      	ldr	r2, [sp, #24]
 800b74c:	2a09      	cmp	r2, #9
 800b74e:	d849      	bhi.n	800b7e4 <_dtoa_r+0x28c>
 800b750:	2a05      	cmp	r2, #5
 800b752:	bfc4      	itt	gt
 800b754:	3a04      	subgt	r2, #4
 800b756:	9206      	strgt	r2, [sp, #24]
 800b758:	9a06      	ldr	r2, [sp, #24]
 800b75a:	f1a2 0202 	sub.w	r2, r2, #2
 800b75e:	bfcc      	ite	gt
 800b760:	2400      	movgt	r4, #0
 800b762:	2401      	movle	r4, #1
 800b764:	2a03      	cmp	r2, #3
 800b766:	d848      	bhi.n	800b7fa <_dtoa_r+0x2a2>
 800b768:	e8df f002 	tbb	[pc, r2]
 800b76c:	3a2c2e0b 	.word	0x3a2c2e0b
 800b770:	9b04      	ldr	r3, [sp, #16]
 800b772:	2200      	movs	r2, #0
 800b774:	eba3 030b 	sub.w	r3, r3, fp
 800b778:	9304      	str	r3, [sp, #16]
 800b77a:	9209      	str	r2, [sp, #36]	; 0x24
 800b77c:	f1cb 0300 	rsb	r3, fp, #0
 800b780:	e7e3      	b.n	800b74a <_dtoa_r+0x1f2>
 800b782:	2200      	movs	r2, #0
 800b784:	9207      	str	r2, [sp, #28]
 800b786:	9a08      	ldr	r2, [sp, #32]
 800b788:	2a00      	cmp	r2, #0
 800b78a:	dc39      	bgt.n	800b800 <_dtoa_r+0x2a8>
 800b78c:	f04f 0a01 	mov.w	sl, #1
 800b790:	46d1      	mov	r9, sl
 800b792:	4652      	mov	r2, sl
 800b794:	f8cd a020 	str.w	sl, [sp, #32]
 800b798:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800b79a:	2100      	movs	r1, #0
 800b79c:	6079      	str	r1, [r7, #4]
 800b79e:	2004      	movs	r0, #4
 800b7a0:	f100 0c14 	add.w	ip, r0, #20
 800b7a4:	4594      	cmp	ip, r2
 800b7a6:	6879      	ldr	r1, [r7, #4]
 800b7a8:	d92f      	bls.n	800b80a <_dtoa_r+0x2b2>
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	930d      	str	r3, [sp, #52]	; 0x34
 800b7ae:	f000 ffd3 	bl	800c758 <_Balloc>
 800b7b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7b4:	9001      	str	r0, [sp, #4]
 800b7b6:	4602      	mov	r2, r0
 800b7b8:	2800      	cmp	r0, #0
 800b7ba:	d149      	bne.n	800b850 <_dtoa_r+0x2f8>
 800b7bc:	4b23      	ldr	r3, [pc, #140]	; (800b84c <_dtoa_r+0x2f4>)
 800b7be:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b7c2:	e6e1      	b.n	800b588 <_dtoa_r+0x30>
 800b7c4:	2201      	movs	r2, #1
 800b7c6:	e7dd      	b.n	800b784 <_dtoa_r+0x22c>
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	9207      	str	r2, [sp, #28]
 800b7cc:	9a08      	ldr	r2, [sp, #32]
 800b7ce:	eb0b 0a02 	add.w	sl, fp, r2
 800b7d2:	f10a 0901 	add.w	r9, sl, #1
 800b7d6:	464a      	mov	r2, r9
 800b7d8:	2a01      	cmp	r2, #1
 800b7da:	bfb8      	it	lt
 800b7dc:	2201      	movlt	r2, #1
 800b7de:	e7db      	b.n	800b798 <_dtoa_r+0x240>
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	e7f2      	b.n	800b7ca <_dtoa_r+0x272>
 800b7e4:	2401      	movs	r4, #1
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b7ec:	f04f 3aff 	mov.w	sl, #4294967295
 800b7f0:	2100      	movs	r1, #0
 800b7f2:	46d1      	mov	r9, sl
 800b7f4:	2212      	movs	r2, #18
 800b7f6:	9108      	str	r1, [sp, #32]
 800b7f8:	e7ce      	b.n	800b798 <_dtoa_r+0x240>
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	9207      	str	r2, [sp, #28]
 800b7fe:	e7f5      	b.n	800b7ec <_dtoa_r+0x294>
 800b800:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b804:	46d1      	mov	r9, sl
 800b806:	4652      	mov	r2, sl
 800b808:	e7c6      	b.n	800b798 <_dtoa_r+0x240>
 800b80a:	3101      	adds	r1, #1
 800b80c:	6079      	str	r1, [r7, #4]
 800b80e:	0040      	lsls	r0, r0, #1
 800b810:	e7c6      	b.n	800b7a0 <_dtoa_r+0x248>
 800b812:	bf00      	nop
 800b814:	f3af 8000 	nop.w
 800b818:	636f4361 	.word	0x636f4361
 800b81c:	3fd287a7 	.word	0x3fd287a7
 800b820:	8b60c8b3 	.word	0x8b60c8b3
 800b824:	3fc68a28 	.word	0x3fc68a28
 800b828:	509f79fb 	.word	0x509f79fb
 800b82c:	3fd34413 	.word	0x3fd34413
 800b830:	080123c6 	.word	0x080123c6
 800b834:	080123dd 	.word	0x080123dd
 800b838:	7ff00000 	.word	0x7ff00000
 800b83c:	080123c2 	.word	0x080123c2
 800b840:	080123b9 	.word	0x080123b9
 800b844:	08012239 	.word	0x08012239
 800b848:	08012548 	.word	0x08012548
 800b84c:	08012438 	.word	0x08012438
 800b850:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800b852:	9901      	ldr	r1, [sp, #4]
 800b854:	6011      	str	r1, [r2, #0]
 800b856:	f1b9 0f0e 	cmp.w	r9, #14
 800b85a:	d86c      	bhi.n	800b936 <_dtoa_r+0x3de>
 800b85c:	2c00      	cmp	r4, #0
 800b85e:	d06a      	beq.n	800b936 <_dtoa_r+0x3de>
 800b860:	f1bb 0f00 	cmp.w	fp, #0
 800b864:	f340 80a0 	ble.w	800b9a8 <_dtoa_r+0x450>
 800b868:	49c1      	ldr	r1, [pc, #772]	; (800bb70 <_dtoa_r+0x618>)
 800b86a:	f00b 020f 	and.w	r2, fp, #15
 800b86e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b872:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b876:	ed92 7b00 	vldr	d7, [r2]
 800b87a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800b87e:	f000 8087 	beq.w	800b990 <_dtoa_r+0x438>
 800b882:	4abc      	ldr	r2, [pc, #752]	; (800bb74 <_dtoa_r+0x61c>)
 800b884:	ed92 6b08 	vldr	d6, [r2, #32]
 800b888:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b88c:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b890:	f001 010f 	and.w	r1, r1, #15
 800b894:	2203      	movs	r2, #3
 800b896:	48b7      	ldr	r0, [pc, #732]	; (800bb74 <_dtoa_r+0x61c>)
 800b898:	2900      	cmp	r1, #0
 800b89a:	d17b      	bne.n	800b994 <_dtoa_r+0x43c>
 800b89c:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b8a0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b8a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8aa:	2900      	cmp	r1, #0
 800b8ac:	f000 80a2 	beq.w	800b9f4 <_dtoa_r+0x49c>
 800b8b0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b8b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b8b8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8c0:	f140 8098 	bpl.w	800b9f4 <_dtoa_r+0x49c>
 800b8c4:	f1b9 0f00 	cmp.w	r9, #0
 800b8c8:	f000 8094 	beq.w	800b9f4 <_dtoa_r+0x49c>
 800b8cc:	f1ba 0f00 	cmp.w	sl, #0
 800b8d0:	dd2f      	ble.n	800b932 <_dtoa_r+0x3da>
 800b8d2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b8d6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b8da:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b8de:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b8e2:	3201      	adds	r2, #1
 800b8e4:	4650      	mov	r0, sl
 800b8e6:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b8ea:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b8ee:	ee07 2a90 	vmov	s15, r2
 800b8f2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b8f6:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b8fa:	ee15 4a90 	vmov	r4, s11
 800b8fe:	ec52 1b15 	vmov	r1, r2, d5
 800b902:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800b906:	2800      	cmp	r0, #0
 800b908:	d177      	bne.n	800b9fa <_dtoa_r+0x4a2>
 800b90a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b90e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b912:	ec42 1b17 	vmov	d7, r1, r2
 800b916:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b91e:	f300 8263 	bgt.w	800bde8 <_dtoa_r+0x890>
 800b922:	eeb1 7b47 	vneg.f64	d7, d7
 800b926:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b92a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b92e:	f100 8258 	bmi.w	800bde2 <_dtoa_r+0x88a>
 800b932:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b936:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b938:	2a00      	cmp	r2, #0
 800b93a:	f2c0 811d 	blt.w	800bb78 <_dtoa_r+0x620>
 800b93e:	f1bb 0f0e 	cmp.w	fp, #14
 800b942:	f300 8119 	bgt.w	800bb78 <_dtoa_r+0x620>
 800b946:	4b8a      	ldr	r3, [pc, #552]	; (800bb70 <_dtoa_r+0x618>)
 800b948:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b94c:	ed93 6b00 	vldr	d6, [r3]
 800b950:	9b08      	ldr	r3, [sp, #32]
 800b952:	2b00      	cmp	r3, #0
 800b954:	f280 80b7 	bge.w	800bac6 <_dtoa_r+0x56e>
 800b958:	f1b9 0f00 	cmp.w	r9, #0
 800b95c:	f300 80b3 	bgt.w	800bac6 <_dtoa_r+0x56e>
 800b960:	f040 823f 	bne.w	800bde2 <_dtoa_r+0x88a>
 800b964:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b968:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b96c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b970:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b978:	464c      	mov	r4, r9
 800b97a:	464f      	mov	r7, r9
 800b97c:	f280 8215 	bge.w	800bdaa <_dtoa_r+0x852>
 800b980:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b984:	2331      	movs	r3, #49	; 0x31
 800b986:	f808 3b01 	strb.w	r3, [r8], #1
 800b98a:	f10b 0b01 	add.w	fp, fp, #1
 800b98e:	e211      	b.n	800bdb4 <_dtoa_r+0x85c>
 800b990:	2202      	movs	r2, #2
 800b992:	e780      	b.n	800b896 <_dtoa_r+0x33e>
 800b994:	07cc      	lsls	r4, r1, #31
 800b996:	d504      	bpl.n	800b9a2 <_dtoa_r+0x44a>
 800b998:	ed90 6b00 	vldr	d6, [r0]
 800b99c:	3201      	adds	r2, #1
 800b99e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9a2:	1049      	asrs	r1, r1, #1
 800b9a4:	3008      	adds	r0, #8
 800b9a6:	e777      	b.n	800b898 <_dtoa_r+0x340>
 800b9a8:	d022      	beq.n	800b9f0 <_dtoa_r+0x498>
 800b9aa:	f1cb 0100 	rsb	r1, fp, #0
 800b9ae:	4a70      	ldr	r2, [pc, #448]	; (800bb70 <_dtoa_r+0x618>)
 800b9b0:	f001 000f 	and.w	r0, r1, #15
 800b9b4:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800b9b8:	ed92 7b00 	vldr	d7, [r2]
 800b9bc:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b9c0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9c4:	486b      	ldr	r0, [pc, #428]	; (800bb74 <_dtoa_r+0x61c>)
 800b9c6:	1109      	asrs	r1, r1, #4
 800b9c8:	2400      	movs	r4, #0
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	b929      	cbnz	r1, 800b9da <_dtoa_r+0x482>
 800b9ce:	2c00      	cmp	r4, #0
 800b9d0:	f43f af6a 	beq.w	800b8a8 <_dtoa_r+0x350>
 800b9d4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9d8:	e766      	b.n	800b8a8 <_dtoa_r+0x350>
 800b9da:	07cf      	lsls	r7, r1, #31
 800b9dc:	d505      	bpl.n	800b9ea <_dtoa_r+0x492>
 800b9de:	ed90 6b00 	vldr	d6, [r0]
 800b9e2:	3201      	adds	r2, #1
 800b9e4:	2401      	movs	r4, #1
 800b9e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b9ea:	1049      	asrs	r1, r1, #1
 800b9ec:	3008      	adds	r0, #8
 800b9ee:	e7ed      	b.n	800b9cc <_dtoa_r+0x474>
 800b9f0:	2202      	movs	r2, #2
 800b9f2:	e759      	b.n	800b8a8 <_dtoa_r+0x350>
 800b9f4:	465f      	mov	r7, fp
 800b9f6:	4648      	mov	r0, r9
 800b9f8:	e775      	b.n	800b8e6 <_dtoa_r+0x38e>
 800b9fa:	ec42 1b17 	vmov	d7, r1, r2
 800b9fe:	4a5c      	ldr	r2, [pc, #368]	; (800bb70 <_dtoa_r+0x618>)
 800ba00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ba04:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ba08:	9a01      	ldr	r2, [sp, #4]
 800ba0a:	1814      	adds	r4, r2, r0
 800ba0c:	9a07      	ldr	r2, [sp, #28]
 800ba0e:	b352      	cbz	r2, 800ba66 <_dtoa_r+0x50e>
 800ba10:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ba14:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ba18:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ba1c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ba20:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ba24:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ba28:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ba2c:	ee14 2a90 	vmov	r2, s9
 800ba30:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ba34:	3230      	adds	r2, #48	; 0x30
 800ba36:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ba3a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ba3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba42:	f808 2b01 	strb.w	r2, [r8], #1
 800ba46:	d439      	bmi.n	800babc <_dtoa_r+0x564>
 800ba48:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ba4c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ba50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba54:	d472      	bmi.n	800bb3c <_dtoa_r+0x5e4>
 800ba56:	45a0      	cmp	r8, r4
 800ba58:	f43f af6b 	beq.w	800b932 <_dtoa_r+0x3da>
 800ba5c:	ee27 7b03 	vmul.f64	d7, d7, d3
 800ba60:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ba64:	e7e0      	b.n	800ba28 <_dtoa_r+0x4d0>
 800ba66:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ba6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ba6e:	4621      	mov	r1, r4
 800ba70:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ba74:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ba78:	ee14 2a90 	vmov	r2, s9
 800ba7c:	3230      	adds	r2, #48	; 0x30
 800ba7e:	f808 2b01 	strb.w	r2, [r8], #1
 800ba82:	45a0      	cmp	r8, r4
 800ba84:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ba88:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ba8c:	d118      	bne.n	800bac0 <_dtoa_r+0x568>
 800ba8e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ba92:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ba96:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ba9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba9e:	dc4d      	bgt.n	800bb3c <_dtoa_r+0x5e4>
 800baa0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800baa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800baa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baac:	f57f af41 	bpl.w	800b932 <_dtoa_r+0x3da>
 800bab0:	4688      	mov	r8, r1
 800bab2:	3901      	subs	r1, #1
 800bab4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800bab8:	2b30      	cmp	r3, #48	; 0x30
 800baba:	d0f9      	beq.n	800bab0 <_dtoa_r+0x558>
 800babc:	46bb      	mov	fp, r7
 800babe:	e02a      	b.n	800bb16 <_dtoa_r+0x5be>
 800bac0:	ee26 6b03 	vmul.f64	d6, d6, d3
 800bac4:	e7d6      	b.n	800ba74 <_dtoa_r+0x51c>
 800bac6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800baca:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800bace:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bad2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800bad6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800bada:	ee15 3a10 	vmov	r3, s10
 800bade:	3330      	adds	r3, #48	; 0x30
 800bae0:	f808 3b01 	strb.w	r3, [r8], #1
 800bae4:	9b01      	ldr	r3, [sp, #4]
 800bae6:	eba8 0303 	sub.w	r3, r8, r3
 800baea:	4599      	cmp	r9, r3
 800baec:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800baf0:	eea3 7b46 	vfms.f64	d7, d3, d6
 800baf4:	d133      	bne.n	800bb5e <_dtoa_r+0x606>
 800baf6:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bafa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800bafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb02:	dc1a      	bgt.n	800bb3a <_dtoa_r+0x5e2>
 800bb04:	eeb4 7b46 	vcmp.f64	d7, d6
 800bb08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb0c:	d103      	bne.n	800bb16 <_dtoa_r+0x5be>
 800bb0e:	ee15 3a10 	vmov	r3, s10
 800bb12:	07d9      	lsls	r1, r3, #31
 800bb14:	d411      	bmi.n	800bb3a <_dtoa_r+0x5e2>
 800bb16:	4629      	mov	r1, r5
 800bb18:	4630      	mov	r0, r6
 800bb1a:	f000 fe5d 	bl	800c7d8 <_Bfree>
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb22:	f888 3000 	strb.w	r3, [r8]
 800bb26:	f10b 0301 	add.w	r3, fp, #1
 800bb2a:	6013      	str	r3, [r2, #0]
 800bb2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	f43f ad61 	beq.w	800b5f6 <_dtoa_r+0x9e>
 800bb34:	f8c3 8000 	str.w	r8, [r3]
 800bb38:	e55d      	b.n	800b5f6 <_dtoa_r+0x9e>
 800bb3a:	465f      	mov	r7, fp
 800bb3c:	4643      	mov	r3, r8
 800bb3e:	4698      	mov	r8, r3
 800bb40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb44:	2a39      	cmp	r2, #57	; 0x39
 800bb46:	d106      	bne.n	800bb56 <_dtoa_r+0x5fe>
 800bb48:	9a01      	ldr	r2, [sp, #4]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d1f7      	bne.n	800bb3e <_dtoa_r+0x5e6>
 800bb4e:	9901      	ldr	r1, [sp, #4]
 800bb50:	2230      	movs	r2, #48	; 0x30
 800bb52:	3701      	adds	r7, #1
 800bb54:	700a      	strb	r2, [r1, #0]
 800bb56:	781a      	ldrb	r2, [r3, #0]
 800bb58:	3201      	adds	r2, #1
 800bb5a:	701a      	strb	r2, [r3, #0]
 800bb5c:	e7ae      	b.n	800babc <_dtoa_r+0x564>
 800bb5e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bb62:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6a:	d1b2      	bne.n	800bad2 <_dtoa_r+0x57a>
 800bb6c:	e7d3      	b.n	800bb16 <_dtoa_r+0x5be>
 800bb6e:	bf00      	nop
 800bb70:	08012548 	.word	0x08012548
 800bb74:	08012520 	.word	0x08012520
 800bb78:	9907      	ldr	r1, [sp, #28]
 800bb7a:	2900      	cmp	r1, #0
 800bb7c:	f000 80d0 	beq.w	800bd20 <_dtoa_r+0x7c8>
 800bb80:	9906      	ldr	r1, [sp, #24]
 800bb82:	2901      	cmp	r1, #1
 800bb84:	f300 80b4 	bgt.w	800bcf0 <_dtoa_r+0x798>
 800bb88:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	f000 80ac 	beq.w	800bce8 <_dtoa_r+0x790>
 800bb90:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb94:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bb98:	461c      	mov	r4, r3
 800bb9a:	930a      	str	r3, [sp, #40]	; 0x28
 800bb9c:	9b04      	ldr	r3, [sp, #16]
 800bb9e:	4413      	add	r3, r2
 800bba0:	9304      	str	r3, [sp, #16]
 800bba2:	9b05      	ldr	r3, [sp, #20]
 800bba4:	2101      	movs	r1, #1
 800bba6:	4413      	add	r3, r2
 800bba8:	4630      	mov	r0, r6
 800bbaa:	9305      	str	r3, [sp, #20]
 800bbac:	f000 ff16 	bl	800c9dc <__i2b>
 800bbb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbb2:	4607      	mov	r7, r0
 800bbb4:	f1b8 0f00 	cmp.w	r8, #0
 800bbb8:	dd0d      	ble.n	800bbd6 <_dtoa_r+0x67e>
 800bbba:	9a05      	ldr	r2, [sp, #20]
 800bbbc:	2a00      	cmp	r2, #0
 800bbbe:	dd0a      	ble.n	800bbd6 <_dtoa_r+0x67e>
 800bbc0:	4542      	cmp	r2, r8
 800bbc2:	9904      	ldr	r1, [sp, #16]
 800bbc4:	bfa8      	it	ge
 800bbc6:	4642      	movge	r2, r8
 800bbc8:	1a89      	subs	r1, r1, r2
 800bbca:	9104      	str	r1, [sp, #16]
 800bbcc:	9905      	ldr	r1, [sp, #20]
 800bbce:	eba8 0802 	sub.w	r8, r8, r2
 800bbd2:	1a8a      	subs	r2, r1, r2
 800bbd4:	9205      	str	r2, [sp, #20]
 800bbd6:	b303      	cbz	r3, 800bc1a <_dtoa_r+0x6c2>
 800bbd8:	9a07      	ldr	r2, [sp, #28]
 800bbda:	2a00      	cmp	r2, #0
 800bbdc:	f000 80a5 	beq.w	800bd2a <_dtoa_r+0x7d2>
 800bbe0:	2c00      	cmp	r4, #0
 800bbe2:	dd13      	ble.n	800bc0c <_dtoa_r+0x6b4>
 800bbe4:	4639      	mov	r1, r7
 800bbe6:	4622      	mov	r2, r4
 800bbe8:	4630      	mov	r0, r6
 800bbea:	930d      	str	r3, [sp, #52]	; 0x34
 800bbec:	f000 ffb6 	bl	800cb5c <__pow5mult>
 800bbf0:	462a      	mov	r2, r5
 800bbf2:	4601      	mov	r1, r0
 800bbf4:	4607      	mov	r7, r0
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f000 ff06 	bl	800ca08 <__multiply>
 800bbfc:	4629      	mov	r1, r5
 800bbfe:	900a      	str	r0, [sp, #40]	; 0x28
 800bc00:	4630      	mov	r0, r6
 800bc02:	f000 fde9 	bl	800c7d8 <_Bfree>
 800bc06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc0a:	4615      	mov	r5, r2
 800bc0c:	1b1a      	subs	r2, r3, r4
 800bc0e:	d004      	beq.n	800bc1a <_dtoa_r+0x6c2>
 800bc10:	4629      	mov	r1, r5
 800bc12:	4630      	mov	r0, r6
 800bc14:	f000 ffa2 	bl	800cb5c <__pow5mult>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	2101      	movs	r1, #1
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f000 fedd 	bl	800c9dc <__i2b>
 800bc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	f340 8081 	ble.w	800bd2e <_dtoa_r+0x7d6>
 800bc2c:	461a      	mov	r2, r3
 800bc2e:	4601      	mov	r1, r0
 800bc30:	4630      	mov	r0, r6
 800bc32:	f000 ff93 	bl	800cb5c <__pow5mult>
 800bc36:	9b06      	ldr	r3, [sp, #24]
 800bc38:	2b01      	cmp	r3, #1
 800bc3a:	4604      	mov	r4, r0
 800bc3c:	dd7a      	ble.n	800bd34 <_dtoa_r+0x7dc>
 800bc3e:	2300      	movs	r3, #0
 800bc40:	930a      	str	r3, [sp, #40]	; 0x28
 800bc42:	6922      	ldr	r2, [r4, #16]
 800bc44:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800bc48:	6910      	ldr	r0, [r2, #16]
 800bc4a:	f000 fe77 	bl	800c93c <__hi0bits>
 800bc4e:	f1c0 0020 	rsb	r0, r0, #32
 800bc52:	9b05      	ldr	r3, [sp, #20]
 800bc54:	4418      	add	r0, r3
 800bc56:	f010 001f 	ands.w	r0, r0, #31
 800bc5a:	f000 808c 	beq.w	800bd76 <_dtoa_r+0x81e>
 800bc5e:	f1c0 0220 	rsb	r2, r0, #32
 800bc62:	2a04      	cmp	r2, #4
 800bc64:	f340 8085 	ble.w	800bd72 <_dtoa_r+0x81a>
 800bc68:	f1c0 001c 	rsb	r0, r0, #28
 800bc6c:	9b04      	ldr	r3, [sp, #16]
 800bc6e:	4403      	add	r3, r0
 800bc70:	9304      	str	r3, [sp, #16]
 800bc72:	9b05      	ldr	r3, [sp, #20]
 800bc74:	4403      	add	r3, r0
 800bc76:	4480      	add	r8, r0
 800bc78:	9305      	str	r3, [sp, #20]
 800bc7a:	9b04      	ldr	r3, [sp, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	dd05      	ble.n	800bc8c <_dtoa_r+0x734>
 800bc80:	4629      	mov	r1, r5
 800bc82:	461a      	mov	r2, r3
 800bc84:	4630      	mov	r0, r6
 800bc86:	f000 ffc3 	bl	800cc10 <__lshift>
 800bc8a:	4605      	mov	r5, r0
 800bc8c:	9b05      	ldr	r3, [sp, #20]
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	dd05      	ble.n	800bc9e <_dtoa_r+0x746>
 800bc92:	4621      	mov	r1, r4
 800bc94:	461a      	mov	r2, r3
 800bc96:	4630      	mov	r0, r6
 800bc98:	f000 ffba 	bl	800cc10 <__lshift>
 800bc9c:	4604      	mov	r4, r0
 800bc9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d06a      	beq.n	800bd7a <_dtoa_r+0x822>
 800bca4:	4621      	mov	r1, r4
 800bca6:	4628      	mov	r0, r5
 800bca8:	f001 f822 	bl	800ccf0 <__mcmp>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	da64      	bge.n	800bd7a <_dtoa_r+0x822>
 800bcb0:	2300      	movs	r3, #0
 800bcb2:	4629      	mov	r1, r5
 800bcb4:	220a      	movs	r2, #10
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f000 fdb0 	bl	800c81c <__multadd>
 800bcbc:	9b07      	ldr	r3, [sp, #28]
 800bcbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bcc2:	4605      	mov	r5, r0
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	f000 8191 	beq.w	800bfec <_dtoa_r+0xa94>
 800bcca:	4639      	mov	r1, r7
 800bccc:	2300      	movs	r3, #0
 800bcce:	220a      	movs	r2, #10
 800bcd0:	4630      	mov	r0, r6
 800bcd2:	f000 fda3 	bl	800c81c <__multadd>
 800bcd6:	f1ba 0f00 	cmp.w	sl, #0
 800bcda:	4607      	mov	r7, r0
 800bcdc:	f300 808d 	bgt.w	800bdfa <_dtoa_r+0x8a2>
 800bce0:	9b06      	ldr	r3, [sp, #24]
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	dc50      	bgt.n	800bd88 <_dtoa_r+0x830>
 800bce6:	e088      	b.n	800bdfa <_dtoa_r+0x8a2>
 800bce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bcea:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bcee:	e751      	b.n	800bb94 <_dtoa_r+0x63c>
 800bcf0:	f109 34ff 	add.w	r4, r9, #4294967295
 800bcf4:	42a3      	cmp	r3, r4
 800bcf6:	bfbf      	itttt	lt
 800bcf8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 800bcfa:	1ae3      	sublt	r3, r4, r3
 800bcfc:	18d2      	addlt	r2, r2, r3
 800bcfe:	9209      	strlt	r2, [sp, #36]	; 0x24
 800bd00:	bfb6      	itet	lt
 800bd02:	4623      	movlt	r3, r4
 800bd04:	1b1c      	subge	r4, r3, r4
 800bd06:	2400      	movlt	r4, #0
 800bd08:	f1b9 0f00 	cmp.w	r9, #0
 800bd0c:	bfb5      	itete	lt
 800bd0e:	9a04      	ldrlt	r2, [sp, #16]
 800bd10:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800bd14:	eba2 0809 	sublt.w	r8, r2, r9
 800bd18:	464a      	movge	r2, r9
 800bd1a:	bfb8      	it	lt
 800bd1c:	2200      	movlt	r2, #0
 800bd1e:	e73c      	b.n	800bb9a <_dtoa_r+0x642>
 800bd20:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800bd24:	9f07      	ldr	r7, [sp, #28]
 800bd26:	461c      	mov	r4, r3
 800bd28:	e744      	b.n	800bbb4 <_dtoa_r+0x65c>
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	e770      	b.n	800bc10 <_dtoa_r+0x6b8>
 800bd2e:	9b06      	ldr	r3, [sp, #24]
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	dc18      	bgt.n	800bd66 <_dtoa_r+0x80e>
 800bd34:	9b02      	ldr	r3, [sp, #8]
 800bd36:	b9b3      	cbnz	r3, 800bd66 <_dtoa_r+0x80e>
 800bd38:	9b03      	ldr	r3, [sp, #12]
 800bd3a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800bd3e:	b9a2      	cbnz	r2, 800bd6a <_dtoa_r+0x812>
 800bd40:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bd44:	0d12      	lsrs	r2, r2, #20
 800bd46:	0512      	lsls	r2, r2, #20
 800bd48:	b18a      	cbz	r2, 800bd6e <_dtoa_r+0x816>
 800bd4a:	9b04      	ldr	r3, [sp, #16]
 800bd4c:	3301      	adds	r3, #1
 800bd4e:	9304      	str	r3, [sp, #16]
 800bd50:	9b05      	ldr	r3, [sp, #20]
 800bd52:	3301      	adds	r3, #1
 800bd54:	9305      	str	r3, [sp, #20]
 800bd56:	2301      	movs	r3, #1
 800bd58:	930a      	str	r3, [sp, #40]	; 0x28
 800bd5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	f47f af70 	bne.w	800bc42 <_dtoa_r+0x6ea>
 800bd62:	2001      	movs	r0, #1
 800bd64:	e775      	b.n	800bc52 <_dtoa_r+0x6fa>
 800bd66:	2300      	movs	r3, #0
 800bd68:	e7f6      	b.n	800bd58 <_dtoa_r+0x800>
 800bd6a:	9b02      	ldr	r3, [sp, #8]
 800bd6c:	e7f4      	b.n	800bd58 <_dtoa_r+0x800>
 800bd6e:	920a      	str	r2, [sp, #40]	; 0x28
 800bd70:	e7f3      	b.n	800bd5a <_dtoa_r+0x802>
 800bd72:	d082      	beq.n	800bc7a <_dtoa_r+0x722>
 800bd74:	4610      	mov	r0, r2
 800bd76:	301c      	adds	r0, #28
 800bd78:	e778      	b.n	800bc6c <_dtoa_r+0x714>
 800bd7a:	f1b9 0f00 	cmp.w	r9, #0
 800bd7e:	dc37      	bgt.n	800bdf0 <_dtoa_r+0x898>
 800bd80:	9b06      	ldr	r3, [sp, #24]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	dd34      	ble.n	800bdf0 <_dtoa_r+0x898>
 800bd86:	46ca      	mov	sl, r9
 800bd88:	f1ba 0f00 	cmp.w	sl, #0
 800bd8c:	d10d      	bne.n	800bdaa <_dtoa_r+0x852>
 800bd8e:	4621      	mov	r1, r4
 800bd90:	4653      	mov	r3, sl
 800bd92:	2205      	movs	r2, #5
 800bd94:	4630      	mov	r0, r6
 800bd96:	f000 fd41 	bl	800c81c <__multadd>
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	4604      	mov	r4, r0
 800bd9e:	4628      	mov	r0, r5
 800bda0:	f000 ffa6 	bl	800ccf0 <__mcmp>
 800bda4:	2800      	cmp	r0, #0
 800bda6:	f73f adeb 	bgt.w	800b980 <_dtoa_r+0x428>
 800bdaa:	9b08      	ldr	r3, [sp, #32]
 800bdac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bdb0:	ea6f 0b03 	mvn.w	fp, r3
 800bdb4:	f04f 0900 	mov.w	r9, #0
 800bdb8:	4621      	mov	r1, r4
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f000 fd0c 	bl	800c7d8 <_Bfree>
 800bdc0:	2f00      	cmp	r7, #0
 800bdc2:	f43f aea8 	beq.w	800bb16 <_dtoa_r+0x5be>
 800bdc6:	f1b9 0f00 	cmp.w	r9, #0
 800bdca:	d005      	beq.n	800bdd8 <_dtoa_r+0x880>
 800bdcc:	45b9      	cmp	r9, r7
 800bdce:	d003      	beq.n	800bdd8 <_dtoa_r+0x880>
 800bdd0:	4649      	mov	r1, r9
 800bdd2:	4630      	mov	r0, r6
 800bdd4:	f000 fd00 	bl	800c7d8 <_Bfree>
 800bdd8:	4639      	mov	r1, r7
 800bdda:	4630      	mov	r0, r6
 800bddc:	f000 fcfc 	bl	800c7d8 <_Bfree>
 800bde0:	e699      	b.n	800bb16 <_dtoa_r+0x5be>
 800bde2:	2400      	movs	r4, #0
 800bde4:	4627      	mov	r7, r4
 800bde6:	e7e0      	b.n	800bdaa <_dtoa_r+0x852>
 800bde8:	46bb      	mov	fp, r7
 800bdea:	4604      	mov	r4, r0
 800bdec:	4607      	mov	r7, r0
 800bdee:	e5c7      	b.n	800b980 <_dtoa_r+0x428>
 800bdf0:	9b07      	ldr	r3, [sp, #28]
 800bdf2:	46ca      	mov	sl, r9
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 8100 	beq.w	800bffa <_dtoa_r+0xaa2>
 800bdfa:	f1b8 0f00 	cmp.w	r8, #0
 800bdfe:	dd05      	ble.n	800be0c <_dtoa_r+0x8b4>
 800be00:	4639      	mov	r1, r7
 800be02:	4642      	mov	r2, r8
 800be04:	4630      	mov	r0, r6
 800be06:	f000 ff03 	bl	800cc10 <__lshift>
 800be0a:	4607      	mov	r7, r0
 800be0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d05d      	beq.n	800bece <_dtoa_r+0x976>
 800be12:	6879      	ldr	r1, [r7, #4]
 800be14:	4630      	mov	r0, r6
 800be16:	f000 fc9f 	bl	800c758 <_Balloc>
 800be1a:	4680      	mov	r8, r0
 800be1c:	b928      	cbnz	r0, 800be2a <_dtoa_r+0x8d2>
 800be1e:	4b82      	ldr	r3, [pc, #520]	; (800c028 <_dtoa_r+0xad0>)
 800be20:	4602      	mov	r2, r0
 800be22:	f240 21ea 	movw	r1, #746	; 0x2ea
 800be26:	f7ff bbaf 	b.w	800b588 <_dtoa_r+0x30>
 800be2a:	693a      	ldr	r2, [r7, #16]
 800be2c:	3202      	adds	r2, #2
 800be2e:	0092      	lsls	r2, r2, #2
 800be30:	f107 010c 	add.w	r1, r7, #12
 800be34:	300c      	adds	r0, #12
 800be36:	f7fd fd21 	bl	800987c <memcpy>
 800be3a:	2201      	movs	r2, #1
 800be3c:	4641      	mov	r1, r8
 800be3e:	4630      	mov	r0, r6
 800be40:	f000 fee6 	bl	800cc10 <__lshift>
 800be44:	9b01      	ldr	r3, [sp, #4]
 800be46:	3301      	adds	r3, #1
 800be48:	9304      	str	r3, [sp, #16]
 800be4a:	9b01      	ldr	r3, [sp, #4]
 800be4c:	4453      	add	r3, sl
 800be4e:	9308      	str	r3, [sp, #32]
 800be50:	9b02      	ldr	r3, [sp, #8]
 800be52:	f003 0301 	and.w	r3, r3, #1
 800be56:	46b9      	mov	r9, r7
 800be58:	9307      	str	r3, [sp, #28]
 800be5a:	4607      	mov	r7, r0
 800be5c:	9b04      	ldr	r3, [sp, #16]
 800be5e:	4621      	mov	r1, r4
 800be60:	3b01      	subs	r3, #1
 800be62:	4628      	mov	r0, r5
 800be64:	9302      	str	r3, [sp, #8]
 800be66:	f7ff faeb 	bl	800b440 <quorem>
 800be6a:	4603      	mov	r3, r0
 800be6c:	3330      	adds	r3, #48	; 0x30
 800be6e:	9005      	str	r0, [sp, #20]
 800be70:	4649      	mov	r1, r9
 800be72:	4628      	mov	r0, r5
 800be74:	9309      	str	r3, [sp, #36]	; 0x24
 800be76:	f000 ff3b 	bl	800ccf0 <__mcmp>
 800be7a:	463a      	mov	r2, r7
 800be7c:	4682      	mov	sl, r0
 800be7e:	4621      	mov	r1, r4
 800be80:	4630      	mov	r0, r6
 800be82:	f000 ff51 	bl	800cd28 <__mdiff>
 800be86:	68c2      	ldr	r2, [r0, #12]
 800be88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be8a:	4680      	mov	r8, r0
 800be8c:	bb0a      	cbnz	r2, 800bed2 <_dtoa_r+0x97a>
 800be8e:	4601      	mov	r1, r0
 800be90:	4628      	mov	r0, r5
 800be92:	f000 ff2d 	bl	800ccf0 <__mcmp>
 800be96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be98:	4602      	mov	r2, r0
 800be9a:	4641      	mov	r1, r8
 800be9c:	4630      	mov	r0, r6
 800be9e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800bea2:	f000 fc99 	bl	800c7d8 <_Bfree>
 800bea6:	9b06      	ldr	r3, [sp, #24]
 800bea8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800beaa:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800beae:	ea43 0102 	orr.w	r1, r3, r2
 800beb2:	9b07      	ldr	r3, [sp, #28]
 800beb4:	430b      	orrs	r3, r1
 800beb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beb8:	d10d      	bne.n	800bed6 <_dtoa_r+0x97e>
 800beba:	2b39      	cmp	r3, #57	; 0x39
 800bebc:	d029      	beq.n	800bf12 <_dtoa_r+0x9ba>
 800bebe:	f1ba 0f00 	cmp.w	sl, #0
 800bec2:	dd01      	ble.n	800bec8 <_dtoa_r+0x970>
 800bec4:	9b05      	ldr	r3, [sp, #20]
 800bec6:	3331      	adds	r3, #49	; 0x31
 800bec8:	9a02      	ldr	r2, [sp, #8]
 800beca:	7013      	strb	r3, [r2, #0]
 800becc:	e774      	b.n	800bdb8 <_dtoa_r+0x860>
 800bece:	4638      	mov	r0, r7
 800bed0:	e7b8      	b.n	800be44 <_dtoa_r+0x8ec>
 800bed2:	2201      	movs	r2, #1
 800bed4:	e7e1      	b.n	800be9a <_dtoa_r+0x942>
 800bed6:	f1ba 0f00 	cmp.w	sl, #0
 800beda:	db06      	blt.n	800beea <_dtoa_r+0x992>
 800bedc:	9906      	ldr	r1, [sp, #24]
 800bede:	ea41 0a0a 	orr.w	sl, r1, sl
 800bee2:	9907      	ldr	r1, [sp, #28]
 800bee4:	ea5a 0101 	orrs.w	r1, sl, r1
 800bee8:	d120      	bne.n	800bf2c <_dtoa_r+0x9d4>
 800beea:	2a00      	cmp	r2, #0
 800beec:	ddec      	ble.n	800bec8 <_dtoa_r+0x970>
 800beee:	4629      	mov	r1, r5
 800bef0:	2201      	movs	r2, #1
 800bef2:	4630      	mov	r0, r6
 800bef4:	9304      	str	r3, [sp, #16]
 800bef6:	f000 fe8b 	bl	800cc10 <__lshift>
 800befa:	4621      	mov	r1, r4
 800befc:	4605      	mov	r5, r0
 800befe:	f000 fef7 	bl	800ccf0 <__mcmp>
 800bf02:	2800      	cmp	r0, #0
 800bf04:	9b04      	ldr	r3, [sp, #16]
 800bf06:	dc02      	bgt.n	800bf0e <_dtoa_r+0x9b6>
 800bf08:	d1de      	bne.n	800bec8 <_dtoa_r+0x970>
 800bf0a:	07da      	lsls	r2, r3, #31
 800bf0c:	d5dc      	bpl.n	800bec8 <_dtoa_r+0x970>
 800bf0e:	2b39      	cmp	r3, #57	; 0x39
 800bf10:	d1d8      	bne.n	800bec4 <_dtoa_r+0x96c>
 800bf12:	9a02      	ldr	r2, [sp, #8]
 800bf14:	2339      	movs	r3, #57	; 0x39
 800bf16:	7013      	strb	r3, [r2, #0]
 800bf18:	4643      	mov	r3, r8
 800bf1a:	4698      	mov	r8, r3
 800bf1c:	3b01      	subs	r3, #1
 800bf1e:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800bf22:	2a39      	cmp	r2, #57	; 0x39
 800bf24:	d051      	beq.n	800bfca <_dtoa_r+0xa72>
 800bf26:	3201      	adds	r2, #1
 800bf28:	701a      	strb	r2, [r3, #0]
 800bf2a:	e745      	b.n	800bdb8 <_dtoa_r+0x860>
 800bf2c:	2a00      	cmp	r2, #0
 800bf2e:	dd03      	ble.n	800bf38 <_dtoa_r+0x9e0>
 800bf30:	2b39      	cmp	r3, #57	; 0x39
 800bf32:	d0ee      	beq.n	800bf12 <_dtoa_r+0x9ba>
 800bf34:	3301      	adds	r3, #1
 800bf36:	e7c7      	b.n	800bec8 <_dtoa_r+0x970>
 800bf38:	9a04      	ldr	r2, [sp, #16]
 800bf3a:	9908      	ldr	r1, [sp, #32]
 800bf3c:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bf40:	428a      	cmp	r2, r1
 800bf42:	d02b      	beq.n	800bf9c <_dtoa_r+0xa44>
 800bf44:	4629      	mov	r1, r5
 800bf46:	2300      	movs	r3, #0
 800bf48:	220a      	movs	r2, #10
 800bf4a:	4630      	mov	r0, r6
 800bf4c:	f000 fc66 	bl	800c81c <__multadd>
 800bf50:	45b9      	cmp	r9, r7
 800bf52:	4605      	mov	r5, r0
 800bf54:	f04f 0300 	mov.w	r3, #0
 800bf58:	f04f 020a 	mov.w	r2, #10
 800bf5c:	4649      	mov	r1, r9
 800bf5e:	4630      	mov	r0, r6
 800bf60:	d107      	bne.n	800bf72 <_dtoa_r+0xa1a>
 800bf62:	f000 fc5b 	bl	800c81c <__multadd>
 800bf66:	4681      	mov	r9, r0
 800bf68:	4607      	mov	r7, r0
 800bf6a:	9b04      	ldr	r3, [sp, #16]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	9304      	str	r3, [sp, #16]
 800bf70:	e774      	b.n	800be5c <_dtoa_r+0x904>
 800bf72:	f000 fc53 	bl	800c81c <__multadd>
 800bf76:	4639      	mov	r1, r7
 800bf78:	4681      	mov	r9, r0
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	220a      	movs	r2, #10
 800bf7e:	4630      	mov	r0, r6
 800bf80:	f000 fc4c 	bl	800c81c <__multadd>
 800bf84:	4607      	mov	r7, r0
 800bf86:	e7f0      	b.n	800bf6a <_dtoa_r+0xa12>
 800bf88:	f1ba 0f00 	cmp.w	sl, #0
 800bf8c:	9a01      	ldr	r2, [sp, #4]
 800bf8e:	bfcc      	ite	gt
 800bf90:	46d0      	movgt	r8, sl
 800bf92:	f04f 0801 	movle.w	r8, #1
 800bf96:	4490      	add	r8, r2
 800bf98:	f04f 0900 	mov.w	r9, #0
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	2201      	movs	r2, #1
 800bfa0:	4630      	mov	r0, r6
 800bfa2:	9302      	str	r3, [sp, #8]
 800bfa4:	f000 fe34 	bl	800cc10 <__lshift>
 800bfa8:	4621      	mov	r1, r4
 800bfaa:	4605      	mov	r5, r0
 800bfac:	f000 fea0 	bl	800ccf0 <__mcmp>
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	dcb1      	bgt.n	800bf18 <_dtoa_r+0x9c0>
 800bfb4:	d102      	bne.n	800bfbc <_dtoa_r+0xa64>
 800bfb6:	9b02      	ldr	r3, [sp, #8]
 800bfb8:	07db      	lsls	r3, r3, #31
 800bfba:	d4ad      	bmi.n	800bf18 <_dtoa_r+0x9c0>
 800bfbc:	4643      	mov	r3, r8
 800bfbe:	4698      	mov	r8, r3
 800bfc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bfc4:	2a30      	cmp	r2, #48	; 0x30
 800bfc6:	d0fa      	beq.n	800bfbe <_dtoa_r+0xa66>
 800bfc8:	e6f6      	b.n	800bdb8 <_dtoa_r+0x860>
 800bfca:	9a01      	ldr	r2, [sp, #4]
 800bfcc:	429a      	cmp	r2, r3
 800bfce:	d1a4      	bne.n	800bf1a <_dtoa_r+0x9c2>
 800bfd0:	f10b 0b01 	add.w	fp, fp, #1
 800bfd4:	2331      	movs	r3, #49	; 0x31
 800bfd6:	e778      	b.n	800beca <_dtoa_r+0x972>
 800bfd8:	4b14      	ldr	r3, [pc, #80]	; (800c02c <_dtoa_r+0xad4>)
 800bfda:	f7ff bb27 	b.w	800b62c <_dtoa_r+0xd4>
 800bfde:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	f47f ab03 	bne.w	800b5ec <_dtoa_r+0x94>
 800bfe6:	4b12      	ldr	r3, [pc, #72]	; (800c030 <_dtoa_r+0xad8>)
 800bfe8:	f7ff bb20 	b.w	800b62c <_dtoa_r+0xd4>
 800bfec:	f1ba 0f00 	cmp.w	sl, #0
 800bff0:	dc03      	bgt.n	800bffa <_dtoa_r+0xaa2>
 800bff2:	9b06      	ldr	r3, [sp, #24]
 800bff4:	2b02      	cmp	r3, #2
 800bff6:	f73f aec7 	bgt.w	800bd88 <_dtoa_r+0x830>
 800bffa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bffe:	4621      	mov	r1, r4
 800c000:	4628      	mov	r0, r5
 800c002:	f7ff fa1d 	bl	800b440 <quorem>
 800c006:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c00a:	f808 3b01 	strb.w	r3, [r8], #1
 800c00e:	9a01      	ldr	r2, [sp, #4]
 800c010:	eba8 0202 	sub.w	r2, r8, r2
 800c014:	4592      	cmp	sl, r2
 800c016:	ddb7      	ble.n	800bf88 <_dtoa_r+0xa30>
 800c018:	4629      	mov	r1, r5
 800c01a:	2300      	movs	r3, #0
 800c01c:	220a      	movs	r2, #10
 800c01e:	4630      	mov	r0, r6
 800c020:	f000 fbfc 	bl	800c81c <__multadd>
 800c024:	4605      	mov	r5, r0
 800c026:	e7ea      	b.n	800bffe <_dtoa_r+0xaa6>
 800c028:	08012438 	.word	0x08012438
 800c02c:	08012238 	.word	0x08012238
 800c030:	080123b9 	.word	0x080123b9

0800c034 <rshift>:
 800c034:	6903      	ldr	r3, [r0, #16]
 800c036:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c03a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c03e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c042:	f100 0414 	add.w	r4, r0, #20
 800c046:	dd45      	ble.n	800c0d4 <rshift+0xa0>
 800c048:	f011 011f 	ands.w	r1, r1, #31
 800c04c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c050:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c054:	d10c      	bne.n	800c070 <rshift+0x3c>
 800c056:	f100 0710 	add.w	r7, r0, #16
 800c05a:	4629      	mov	r1, r5
 800c05c:	42b1      	cmp	r1, r6
 800c05e:	d334      	bcc.n	800c0ca <rshift+0x96>
 800c060:	1a9b      	subs	r3, r3, r2
 800c062:	009b      	lsls	r3, r3, #2
 800c064:	1eea      	subs	r2, r5, #3
 800c066:	4296      	cmp	r6, r2
 800c068:	bf38      	it	cc
 800c06a:	2300      	movcc	r3, #0
 800c06c:	4423      	add	r3, r4
 800c06e:	e015      	b.n	800c09c <rshift+0x68>
 800c070:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c074:	f1c1 0820 	rsb	r8, r1, #32
 800c078:	40cf      	lsrs	r7, r1
 800c07a:	f105 0e04 	add.w	lr, r5, #4
 800c07e:	46a1      	mov	r9, r4
 800c080:	4576      	cmp	r6, lr
 800c082:	46f4      	mov	ip, lr
 800c084:	d815      	bhi.n	800c0b2 <rshift+0x7e>
 800c086:	1a9a      	subs	r2, r3, r2
 800c088:	0092      	lsls	r2, r2, #2
 800c08a:	3a04      	subs	r2, #4
 800c08c:	3501      	adds	r5, #1
 800c08e:	42ae      	cmp	r6, r5
 800c090:	bf38      	it	cc
 800c092:	2200      	movcc	r2, #0
 800c094:	18a3      	adds	r3, r4, r2
 800c096:	50a7      	str	r7, [r4, r2]
 800c098:	b107      	cbz	r7, 800c09c <rshift+0x68>
 800c09a:	3304      	adds	r3, #4
 800c09c:	1b1a      	subs	r2, r3, r4
 800c09e:	42a3      	cmp	r3, r4
 800c0a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c0a4:	bf08      	it	eq
 800c0a6:	2300      	moveq	r3, #0
 800c0a8:	6102      	str	r2, [r0, #16]
 800c0aa:	bf08      	it	eq
 800c0ac:	6143      	streq	r3, [r0, #20]
 800c0ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c0b2:	f8dc c000 	ldr.w	ip, [ip]
 800c0b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c0ba:	ea4c 0707 	orr.w	r7, ip, r7
 800c0be:	f849 7b04 	str.w	r7, [r9], #4
 800c0c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c0c6:	40cf      	lsrs	r7, r1
 800c0c8:	e7da      	b.n	800c080 <rshift+0x4c>
 800c0ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800c0ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800c0d2:	e7c3      	b.n	800c05c <rshift+0x28>
 800c0d4:	4623      	mov	r3, r4
 800c0d6:	e7e1      	b.n	800c09c <rshift+0x68>

0800c0d8 <__hexdig_fun>:
 800c0d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c0dc:	2b09      	cmp	r3, #9
 800c0de:	d802      	bhi.n	800c0e6 <__hexdig_fun+0xe>
 800c0e0:	3820      	subs	r0, #32
 800c0e2:	b2c0      	uxtb	r0, r0
 800c0e4:	4770      	bx	lr
 800c0e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c0ea:	2b05      	cmp	r3, #5
 800c0ec:	d801      	bhi.n	800c0f2 <__hexdig_fun+0x1a>
 800c0ee:	3847      	subs	r0, #71	; 0x47
 800c0f0:	e7f7      	b.n	800c0e2 <__hexdig_fun+0xa>
 800c0f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c0f6:	2b05      	cmp	r3, #5
 800c0f8:	d801      	bhi.n	800c0fe <__hexdig_fun+0x26>
 800c0fa:	3827      	subs	r0, #39	; 0x27
 800c0fc:	e7f1      	b.n	800c0e2 <__hexdig_fun+0xa>
 800c0fe:	2000      	movs	r0, #0
 800c100:	4770      	bx	lr
	...

0800c104 <__gethex>:
 800c104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c108:	ed2d 8b02 	vpush	{d8}
 800c10c:	b089      	sub	sp, #36	; 0x24
 800c10e:	ee08 0a10 	vmov	s16, r0
 800c112:	9304      	str	r3, [sp, #16]
 800c114:	4bb4      	ldr	r3, [pc, #720]	; (800c3e8 <__gethex+0x2e4>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	9301      	str	r3, [sp, #4]
 800c11a:	4618      	mov	r0, r3
 800c11c:	468b      	mov	fp, r1
 800c11e:	4690      	mov	r8, r2
 800c120:	f7f4 f88e 	bl	8000240 <strlen>
 800c124:	9b01      	ldr	r3, [sp, #4]
 800c126:	f8db 2000 	ldr.w	r2, [fp]
 800c12a:	4403      	add	r3, r0
 800c12c:	4682      	mov	sl, r0
 800c12e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c132:	9305      	str	r3, [sp, #20]
 800c134:	1c93      	adds	r3, r2, #2
 800c136:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c13a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c13e:	32fe      	adds	r2, #254	; 0xfe
 800c140:	18d1      	adds	r1, r2, r3
 800c142:	461f      	mov	r7, r3
 800c144:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c148:	9100      	str	r1, [sp, #0]
 800c14a:	2830      	cmp	r0, #48	; 0x30
 800c14c:	d0f8      	beq.n	800c140 <__gethex+0x3c>
 800c14e:	f7ff ffc3 	bl	800c0d8 <__hexdig_fun>
 800c152:	4604      	mov	r4, r0
 800c154:	2800      	cmp	r0, #0
 800c156:	d13a      	bne.n	800c1ce <__gethex+0xca>
 800c158:	9901      	ldr	r1, [sp, #4]
 800c15a:	4652      	mov	r2, sl
 800c15c:	4638      	mov	r0, r7
 800c15e:	f001 f933 	bl	800d3c8 <strncmp>
 800c162:	4605      	mov	r5, r0
 800c164:	2800      	cmp	r0, #0
 800c166:	d168      	bne.n	800c23a <__gethex+0x136>
 800c168:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c16c:	eb07 060a 	add.w	r6, r7, sl
 800c170:	f7ff ffb2 	bl	800c0d8 <__hexdig_fun>
 800c174:	2800      	cmp	r0, #0
 800c176:	d062      	beq.n	800c23e <__gethex+0x13a>
 800c178:	4633      	mov	r3, r6
 800c17a:	7818      	ldrb	r0, [r3, #0]
 800c17c:	2830      	cmp	r0, #48	; 0x30
 800c17e:	461f      	mov	r7, r3
 800c180:	f103 0301 	add.w	r3, r3, #1
 800c184:	d0f9      	beq.n	800c17a <__gethex+0x76>
 800c186:	f7ff ffa7 	bl	800c0d8 <__hexdig_fun>
 800c18a:	2301      	movs	r3, #1
 800c18c:	fab0 f480 	clz	r4, r0
 800c190:	0964      	lsrs	r4, r4, #5
 800c192:	4635      	mov	r5, r6
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	463a      	mov	r2, r7
 800c198:	4616      	mov	r6, r2
 800c19a:	3201      	adds	r2, #1
 800c19c:	7830      	ldrb	r0, [r6, #0]
 800c19e:	f7ff ff9b 	bl	800c0d8 <__hexdig_fun>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d1f8      	bne.n	800c198 <__gethex+0x94>
 800c1a6:	9901      	ldr	r1, [sp, #4]
 800c1a8:	4652      	mov	r2, sl
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	f001 f90c 	bl	800d3c8 <strncmp>
 800c1b0:	b980      	cbnz	r0, 800c1d4 <__gethex+0xd0>
 800c1b2:	b94d      	cbnz	r5, 800c1c8 <__gethex+0xc4>
 800c1b4:	eb06 050a 	add.w	r5, r6, sl
 800c1b8:	462a      	mov	r2, r5
 800c1ba:	4616      	mov	r6, r2
 800c1bc:	3201      	adds	r2, #1
 800c1be:	7830      	ldrb	r0, [r6, #0]
 800c1c0:	f7ff ff8a 	bl	800c0d8 <__hexdig_fun>
 800c1c4:	2800      	cmp	r0, #0
 800c1c6:	d1f8      	bne.n	800c1ba <__gethex+0xb6>
 800c1c8:	1bad      	subs	r5, r5, r6
 800c1ca:	00ad      	lsls	r5, r5, #2
 800c1cc:	e004      	b.n	800c1d8 <__gethex+0xd4>
 800c1ce:	2400      	movs	r4, #0
 800c1d0:	4625      	mov	r5, r4
 800c1d2:	e7e0      	b.n	800c196 <__gethex+0x92>
 800c1d4:	2d00      	cmp	r5, #0
 800c1d6:	d1f7      	bne.n	800c1c8 <__gethex+0xc4>
 800c1d8:	7833      	ldrb	r3, [r6, #0]
 800c1da:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c1de:	2b50      	cmp	r3, #80	; 0x50
 800c1e0:	d13b      	bne.n	800c25a <__gethex+0x156>
 800c1e2:	7873      	ldrb	r3, [r6, #1]
 800c1e4:	2b2b      	cmp	r3, #43	; 0x2b
 800c1e6:	d02c      	beq.n	800c242 <__gethex+0x13e>
 800c1e8:	2b2d      	cmp	r3, #45	; 0x2d
 800c1ea:	d02e      	beq.n	800c24a <__gethex+0x146>
 800c1ec:	1c71      	adds	r1, r6, #1
 800c1ee:	f04f 0900 	mov.w	r9, #0
 800c1f2:	7808      	ldrb	r0, [r1, #0]
 800c1f4:	f7ff ff70 	bl	800c0d8 <__hexdig_fun>
 800c1f8:	1e43      	subs	r3, r0, #1
 800c1fa:	b2db      	uxtb	r3, r3
 800c1fc:	2b18      	cmp	r3, #24
 800c1fe:	d82c      	bhi.n	800c25a <__gethex+0x156>
 800c200:	f1a0 0210 	sub.w	r2, r0, #16
 800c204:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c208:	f7ff ff66 	bl	800c0d8 <__hexdig_fun>
 800c20c:	1e43      	subs	r3, r0, #1
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	2b18      	cmp	r3, #24
 800c212:	d91d      	bls.n	800c250 <__gethex+0x14c>
 800c214:	f1b9 0f00 	cmp.w	r9, #0
 800c218:	d000      	beq.n	800c21c <__gethex+0x118>
 800c21a:	4252      	negs	r2, r2
 800c21c:	4415      	add	r5, r2
 800c21e:	f8cb 1000 	str.w	r1, [fp]
 800c222:	b1e4      	cbz	r4, 800c25e <__gethex+0x15a>
 800c224:	9b00      	ldr	r3, [sp, #0]
 800c226:	2b00      	cmp	r3, #0
 800c228:	bf14      	ite	ne
 800c22a:	2700      	movne	r7, #0
 800c22c:	2706      	moveq	r7, #6
 800c22e:	4638      	mov	r0, r7
 800c230:	b009      	add	sp, #36	; 0x24
 800c232:	ecbd 8b02 	vpop	{d8}
 800c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c23a:	463e      	mov	r6, r7
 800c23c:	4625      	mov	r5, r4
 800c23e:	2401      	movs	r4, #1
 800c240:	e7ca      	b.n	800c1d8 <__gethex+0xd4>
 800c242:	f04f 0900 	mov.w	r9, #0
 800c246:	1cb1      	adds	r1, r6, #2
 800c248:	e7d3      	b.n	800c1f2 <__gethex+0xee>
 800c24a:	f04f 0901 	mov.w	r9, #1
 800c24e:	e7fa      	b.n	800c246 <__gethex+0x142>
 800c250:	230a      	movs	r3, #10
 800c252:	fb03 0202 	mla	r2, r3, r2, r0
 800c256:	3a10      	subs	r2, #16
 800c258:	e7d4      	b.n	800c204 <__gethex+0x100>
 800c25a:	4631      	mov	r1, r6
 800c25c:	e7df      	b.n	800c21e <__gethex+0x11a>
 800c25e:	1bf3      	subs	r3, r6, r7
 800c260:	3b01      	subs	r3, #1
 800c262:	4621      	mov	r1, r4
 800c264:	2b07      	cmp	r3, #7
 800c266:	dc0b      	bgt.n	800c280 <__gethex+0x17c>
 800c268:	ee18 0a10 	vmov	r0, s16
 800c26c:	f000 fa74 	bl	800c758 <_Balloc>
 800c270:	4604      	mov	r4, r0
 800c272:	b940      	cbnz	r0, 800c286 <__gethex+0x182>
 800c274:	4b5d      	ldr	r3, [pc, #372]	; (800c3ec <__gethex+0x2e8>)
 800c276:	4602      	mov	r2, r0
 800c278:	21de      	movs	r1, #222	; 0xde
 800c27a:	485d      	ldr	r0, [pc, #372]	; (800c3f0 <__gethex+0x2ec>)
 800c27c:	f001 f8c6 	bl	800d40c <__assert_func>
 800c280:	3101      	adds	r1, #1
 800c282:	105b      	asrs	r3, r3, #1
 800c284:	e7ee      	b.n	800c264 <__gethex+0x160>
 800c286:	f100 0914 	add.w	r9, r0, #20
 800c28a:	f04f 0b00 	mov.w	fp, #0
 800c28e:	f1ca 0301 	rsb	r3, sl, #1
 800c292:	f8cd 9008 	str.w	r9, [sp, #8]
 800c296:	f8cd b000 	str.w	fp, [sp]
 800c29a:	9306      	str	r3, [sp, #24]
 800c29c:	42b7      	cmp	r7, r6
 800c29e:	d340      	bcc.n	800c322 <__gethex+0x21e>
 800c2a0:	9802      	ldr	r0, [sp, #8]
 800c2a2:	9b00      	ldr	r3, [sp, #0]
 800c2a4:	f840 3b04 	str.w	r3, [r0], #4
 800c2a8:	eba0 0009 	sub.w	r0, r0, r9
 800c2ac:	1080      	asrs	r0, r0, #2
 800c2ae:	0146      	lsls	r6, r0, #5
 800c2b0:	6120      	str	r0, [r4, #16]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 fb42 	bl	800c93c <__hi0bits>
 800c2b8:	1a30      	subs	r0, r6, r0
 800c2ba:	f8d8 6000 	ldr.w	r6, [r8]
 800c2be:	42b0      	cmp	r0, r6
 800c2c0:	dd63      	ble.n	800c38a <__gethex+0x286>
 800c2c2:	1b87      	subs	r7, r0, r6
 800c2c4:	4639      	mov	r1, r7
 800c2c6:	4620      	mov	r0, r4
 800c2c8:	f000 fee3 	bl	800d092 <__any_on>
 800c2cc:	4682      	mov	sl, r0
 800c2ce:	b1a8      	cbz	r0, 800c2fc <__gethex+0x1f8>
 800c2d0:	1e7b      	subs	r3, r7, #1
 800c2d2:	1159      	asrs	r1, r3, #5
 800c2d4:	f003 021f 	and.w	r2, r3, #31
 800c2d8:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c2dc:	f04f 0a01 	mov.w	sl, #1
 800c2e0:	fa0a f202 	lsl.w	r2, sl, r2
 800c2e4:	420a      	tst	r2, r1
 800c2e6:	d009      	beq.n	800c2fc <__gethex+0x1f8>
 800c2e8:	4553      	cmp	r3, sl
 800c2ea:	dd05      	ble.n	800c2f8 <__gethex+0x1f4>
 800c2ec:	1eb9      	subs	r1, r7, #2
 800c2ee:	4620      	mov	r0, r4
 800c2f0:	f000 fecf 	bl	800d092 <__any_on>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	d145      	bne.n	800c384 <__gethex+0x280>
 800c2f8:	f04f 0a02 	mov.w	sl, #2
 800c2fc:	4639      	mov	r1, r7
 800c2fe:	4620      	mov	r0, r4
 800c300:	f7ff fe98 	bl	800c034 <rshift>
 800c304:	443d      	add	r5, r7
 800c306:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c30a:	42ab      	cmp	r3, r5
 800c30c:	da4c      	bge.n	800c3a8 <__gethex+0x2a4>
 800c30e:	ee18 0a10 	vmov	r0, s16
 800c312:	4621      	mov	r1, r4
 800c314:	f000 fa60 	bl	800c7d8 <_Bfree>
 800c318:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c31a:	2300      	movs	r3, #0
 800c31c:	6013      	str	r3, [r2, #0]
 800c31e:	27a3      	movs	r7, #163	; 0xa3
 800c320:	e785      	b.n	800c22e <__gethex+0x12a>
 800c322:	1e73      	subs	r3, r6, #1
 800c324:	9a05      	ldr	r2, [sp, #20]
 800c326:	9303      	str	r3, [sp, #12]
 800c328:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c32c:	4293      	cmp	r3, r2
 800c32e:	d019      	beq.n	800c364 <__gethex+0x260>
 800c330:	f1bb 0f20 	cmp.w	fp, #32
 800c334:	d107      	bne.n	800c346 <__gethex+0x242>
 800c336:	9b02      	ldr	r3, [sp, #8]
 800c338:	9a00      	ldr	r2, [sp, #0]
 800c33a:	f843 2b04 	str.w	r2, [r3], #4
 800c33e:	9302      	str	r3, [sp, #8]
 800c340:	2300      	movs	r3, #0
 800c342:	9300      	str	r3, [sp, #0]
 800c344:	469b      	mov	fp, r3
 800c346:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c34a:	f7ff fec5 	bl	800c0d8 <__hexdig_fun>
 800c34e:	9b00      	ldr	r3, [sp, #0]
 800c350:	f000 000f 	and.w	r0, r0, #15
 800c354:	fa00 f00b 	lsl.w	r0, r0, fp
 800c358:	4303      	orrs	r3, r0
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	f10b 0b04 	add.w	fp, fp, #4
 800c360:	9b03      	ldr	r3, [sp, #12]
 800c362:	e00d      	b.n	800c380 <__gethex+0x27c>
 800c364:	9b03      	ldr	r3, [sp, #12]
 800c366:	9a06      	ldr	r2, [sp, #24]
 800c368:	4413      	add	r3, r2
 800c36a:	42bb      	cmp	r3, r7
 800c36c:	d3e0      	bcc.n	800c330 <__gethex+0x22c>
 800c36e:	4618      	mov	r0, r3
 800c370:	9901      	ldr	r1, [sp, #4]
 800c372:	9307      	str	r3, [sp, #28]
 800c374:	4652      	mov	r2, sl
 800c376:	f001 f827 	bl	800d3c8 <strncmp>
 800c37a:	9b07      	ldr	r3, [sp, #28]
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d1d7      	bne.n	800c330 <__gethex+0x22c>
 800c380:	461e      	mov	r6, r3
 800c382:	e78b      	b.n	800c29c <__gethex+0x198>
 800c384:	f04f 0a03 	mov.w	sl, #3
 800c388:	e7b8      	b.n	800c2fc <__gethex+0x1f8>
 800c38a:	da0a      	bge.n	800c3a2 <__gethex+0x29e>
 800c38c:	1a37      	subs	r7, r6, r0
 800c38e:	4621      	mov	r1, r4
 800c390:	ee18 0a10 	vmov	r0, s16
 800c394:	463a      	mov	r2, r7
 800c396:	f000 fc3b 	bl	800cc10 <__lshift>
 800c39a:	1bed      	subs	r5, r5, r7
 800c39c:	4604      	mov	r4, r0
 800c39e:	f100 0914 	add.w	r9, r0, #20
 800c3a2:	f04f 0a00 	mov.w	sl, #0
 800c3a6:	e7ae      	b.n	800c306 <__gethex+0x202>
 800c3a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c3ac:	42a8      	cmp	r0, r5
 800c3ae:	dd72      	ble.n	800c496 <__gethex+0x392>
 800c3b0:	1b45      	subs	r5, r0, r5
 800c3b2:	42ae      	cmp	r6, r5
 800c3b4:	dc36      	bgt.n	800c424 <__gethex+0x320>
 800c3b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c3ba:	2b02      	cmp	r3, #2
 800c3bc:	d02a      	beq.n	800c414 <__gethex+0x310>
 800c3be:	2b03      	cmp	r3, #3
 800c3c0:	d02c      	beq.n	800c41c <__gethex+0x318>
 800c3c2:	2b01      	cmp	r3, #1
 800c3c4:	d11c      	bne.n	800c400 <__gethex+0x2fc>
 800c3c6:	42ae      	cmp	r6, r5
 800c3c8:	d11a      	bne.n	800c400 <__gethex+0x2fc>
 800c3ca:	2e01      	cmp	r6, #1
 800c3cc:	d112      	bne.n	800c3f4 <__gethex+0x2f0>
 800c3ce:	9a04      	ldr	r2, [sp, #16]
 800c3d0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c3d4:	6013      	str	r3, [r2, #0]
 800c3d6:	2301      	movs	r3, #1
 800c3d8:	6123      	str	r3, [r4, #16]
 800c3da:	f8c9 3000 	str.w	r3, [r9]
 800c3de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c3e0:	2762      	movs	r7, #98	; 0x62
 800c3e2:	601c      	str	r4, [r3, #0]
 800c3e4:	e723      	b.n	800c22e <__gethex+0x12a>
 800c3e6:	bf00      	nop
 800c3e8:	080124b0 	.word	0x080124b0
 800c3ec:	08012438 	.word	0x08012438
 800c3f0:	08012449 	.word	0x08012449
 800c3f4:	1e71      	subs	r1, r6, #1
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 fe4b 	bl	800d092 <__any_on>
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	d1e6      	bne.n	800c3ce <__gethex+0x2ca>
 800c400:	ee18 0a10 	vmov	r0, s16
 800c404:	4621      	mov	r1, r4
 800c406:	f000 f9e7 	bl	800c7d8 <_Bfree>
 800c40a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c40c:	2300      	movs	r3, #0
 800c40e:	6013      	str	r3, [r2, #0]
 800c410:	2750      	movs	r7, #80	; 0x50
 800c412:	e70c      	b.n	800c22e <__gethex+0x12a>
 800c414:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c416:	2b00      	cmp	r3, #0
 800c418:	d1f2      	bne.n	800c400 <__gethex+0x2fc>
 800c41a:	e7d8      	b.n	800c3ce <__gethex+0x2ca>
 800c41c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1d5      	bne.n	800c3ce <__gethex+0x2ca>
 800c422:	e7ed      	b.n	800c400 <__gethex+0x2fc>
 800c424:	1e6f      	subs	r7, r5, #1
 800c426:	f1ba 0f00 	cmp.w	sl, #0
 800c42a:	d131      	bne.n	800c490 <__gethex+0x38c>
 800c42c:	b127      	cbz	r7, 800c438 <__gethex+0x334>
 800c42e:	4639      	mov	r1, r7
 800c430:	4620      	mov	r0, r4
 800c432:	f000 fe2e 	bl	800d092 <__any_on>
 800c436:	4682      	mov	sl, r0
 800c438:	117b      	asrs	r3, r7, #5
 800c43a:	2101      	movs	r1, #1
 800c43c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c440:	f007 071f 	and.w	r7, r7, #31
 800c444:	fa01 f707 	lsl.w	r7, r1, r7
 800c448:	421f      	tst	r7, r3
 800c44a:	4629      	mov	r1, r5
 800c44c:	4620      	mov	r0, r4
 800c44e:	bf18      	it	ne
 800c450:	f04a 0a02 	orrne.w	sl, sl, #2
 800c454:	1b76      	subs	r6, r6, r5
 800c456:	f7ff fded 	bl	800c034 <rshift>
 800c45a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c45e:	2702      	movs	r7, #2
 800c460:	f1ba 0f00 	cmp.w	sl, #0
 800c464:	d048      	beq.n	800c4f8 <__gethex+0x3f4>
 800c466:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c46a:	2b02      	cmp	r3, #2
 800c46c:	d015      	beq.n	800c49a <__gethex+0x396>
 800c46e:	2b03      	cmp	r3, #3
 800c470:	d017      	beq.n	800c4a2 <__gethex+0x39e>
 800c472:	2b01      	cmp	r3, #1
 800c474:	d109      	bne.n	800c48a <__gethex+0x386>
 800c476:	f01a 0f02 	tst.w	sl, #2
 800c47a:	d006      	beq.n	800c48a <__gethex+0x386>
 800c47c:	f8d9 0000 	ldr.w	r0, [r9]
 800c480:	ea4a 0a00 	orr.w	sl, sl, r0
 800c484:	f01a 0f01 	tst.w	sl, #1
 800c488:	d10e      	bne.n	800c4a8 <__gethex+0x3a4>
 800c48a:	f047 0710 	orr.w	r7, r7, #16
 800c48e:	e033      	b.n	800c4f8 <__gethex+0x3f4>
 800c490:	f04f 0a01 	mov.w	sl, #1
 800c494:	e7d0      	b.n	800c438 <__gethex+0x334>
 800c496:	2701      	movs	r7, #1
 800c498:	e7e2      	b.n	800c460 <__gethex+0x35c>
 800c49a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c49c:	f1c3 0301 	rsb	r3, r3, #1
 800c4a0:	9315      	str	r3, [sp, #84]	; 0x54
 800c4a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d0f0      	beq.n	800c48a <__gethex+0x386>
 800c4a8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c4ac:	f104 0314 	add.w	r3, r4, #20
 800c4b0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c4b4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c4b8:	f04f 0c00 	mov.w	ip, #0
 800c4bc:	4618      	mov	r0, r3
 800c4be:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4c2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c4c6:	d01c      	beq.n	800c502 <__gethex+0x3fe>
 800c4c8:	3201      	adds	r2, #1
 800c4ca:	6002      	str	r2, [r0, #0]
 800c4cc:	2f02      	cmp	r7, #2
 800c4ce:	f104 0314 	add.w	r3, r4, #20
 800c4d2:	d13f      	bne.n	800c554 <__gethex+0x450>
 800c4d4:	f8d8 2000 	ldr.w	r2, [r8]
 800c4d8:	3a01      	subs	r2, #1
 800c4da:	42b2      	cmp	r2, r6
 800c4dc:	d10a      	bne.n	800c4f4 <__gethex+0x3f0>
 800c4de:	1171      	asrs	r1, r6, #5
 800c4e0:	2201      	movs	r2, #1
 800c4e2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c4e6:	f006 061f 	and.w	r6, r6, #31
 800c4ea:	fa02 f606 	lsl.w	r6, r2, r6
 800c4ee:	421e      	tst	r6, r3
 800c4f0:	bf18      	it	ne
 800c4f2:	4617      	movne	r7, r2
 800c4f4:	f047 0720 	orr.w	r7, r7, #32
 800c4f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4fa:	601c      	str	r4, [r3, #0]
 800c4fc:	9b04      	ldr	r3, [sp, #16]
 800c4fe:	601d      	str	r5, [r3, #0]
 800c500:	e695      	b.n	800c22e <__gethex+0x12a>
 800c502:	4299      	cmp	r1, r3
 800c504:	f843 cc04 	str.w	ip, [r3, #-4]
 800c508:	d8d8      	bhi.n	800c4bc <__gethex+0x3b8>
 800c50a:	68a3      	ldr	r3, [r4, #8]
 800c50c:	459b      	cmp	fp, r3
 800c50e:	db19      	blt.n	800c544 <__gethex+0x440>
 800c510:	6861      	ldr	r1, [r4, #4]
 800c512:	ee18 0a10 	vmov	r0, s16
 800c516:	3101      	adds	r1, #1
 800c518:	f000 f91e 	bl	800c758 <_Balloc>
 800c51c:	4681      	mov	r9, r0
 800c51e:	b918      	cbnz	r0, 800c528 <__gethex+0x424>
 800c520:	4b1a      	ldr	r3, [pc, #104]	; (800c58c <__gethex+0x488>)
 800c522:	4602      	mov	r2, r0
 800c524:	2184      	movs	r1, #132	; 0x84
 800c526:	e6a8      	b.n	800c27a <__gethex+0x176>
 800c528:	6922      	ldr	r2, [r4, #16]
 800c52a:	3202      	adds	r2, #2
 800c52c:	f104 010c 	add.w	r1, r4, #12
 800c530:	0092      	lsls	r2, r2, #2
 800c532:	300c      	adds	r0, #12
 800c534:	f7fd f9a2 	bl	800987c <memcpy>
 800c538:	4621      	mov	r1, r4
 800c53a:	ee18 0a10 	vmov	r0, s16
 800c53e:	f000 f94b 	bl	800c7d8 <_Bfree>
 800c542:	464c      	mov	r4, r9
 800c544:	6923      	ldr	r3, [r4, #16]
 800c546:	1c5a      	adds	r2, r3, #1
 800c548:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c54c:	6122      	str	r2, [r4, #16]
 800c54e:	2201      	movs	r2, #1
 800c550:	615a      	str	r2, [r3, #20]
 800c552:	e7bb      	b.n	800c4cc <__gethex+0x3c8>
 800c554:	6922      	ldr	r2, [r4, #16]
 800c556:	455a      	cmp	r2, fp
 800c558:	dd0b      	ble.n	800c572 <__gethex+0x46e>
 800c55a:	2101      	movs	r1, #1
 800c55c:	4620      	mov	r0, r4
 800c55e:	f7ff fd69 	bl	800c034 <rshift>
 800c562:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c566:	3501      	adds	r5, #1
 800c568:	42ab      	cmp	r3, r5
 800c56a:	f6ff aed0 	blt.w	800c30e <__gethex+0x20a>
 800c56e:	2701      	movs	r7, #1
 800c570:	e7c0      	b.n	800c4f4 <__gethex+0x3f0>
 800c572:	f016 061f 	ands.w	r6, r6, #31
 800c576:	d0fa      	beq.n	800c56e <__gethex+0x46a>
 800c578:	4453      	add	r3, sl
 800c57a:	f1c6 0620 	rsb	r6, r6, #32
 800c57e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c582:	f000 f9db 	bl	800c93c <__hi0bits>
 800c586:	42b0      	cmp	r0, r6
 800c588:	dbe7      	blt.n	800c55a <__gethex+0x456>
 800c58a:	e7f0      	b.n	800c56e <__gethex+0x46a>
 800c58c:	08012438 	.word	0x08012438

0800c590 <L_shift>:
 800c590:	f1c2 0208 	rsb	r2, r2, #8
 800c594:	0092      	lsls	r2, r2, #2
 800c596:	b570      	push	{r4, r5, r6, lr}
 800c598:	f1c2 0620 	rsb	r6, r2, #32
 800c59c:	6843      	ldr	r3, [r0, #4]
 800c59e:	6804      	ldr	r4, [r0, #0]
 800c5a0:	fa03 f506 	lsl.w	r5, r3, r6
 800c5a4:	432c      	orrs	r4, r5
 800c5a6:	40d3      	lsrs	r3, r2
 800c5a8:	6004      	str	r4, [r0, #0]
 800c5aa:	f840 3f04 	str.w	r3, [r0, #4]!
 800c5ae:	4288      	cmp	r0, r1
 800c5b0:	d3f4      	bcc.n	800c59c <L_shift+0xc>
 800c5b2:	bd70      	pop	{r4, r5, r6, pc}

0800c5b4 <__match>:
 800c5b4:	b530      	push	{r4, r5, lr}
 800c5b6:	6803      	ldr	r3, [r0, #0]
 800c5b8:	3301      	adds	r3, #1
 800c5ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5be:	b914      	cbnz	r4, 800c5c6 <__match+0x12>
 800c5c0:	6003      	str	r3, [r0, #0]
 800c5c2:	2001      	movs	r0, #1
 800c5c4:	bd30      	pop	{r4, r5, pc}
 800c5c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ca:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c5ce:	2d19      	cmp	r5, #25
 800c5d0:	bf98      	it	ls
 800c5d2:	3220      	addls	r2, #32
 800c5d4:	42a2      	cmp	r2, r4
 800c5d6:	d0f0      	beq.n	800c5ba <__match+0x6>
 800c5d8:	2000      	movs	r0, #0
 800c5da:	e7f3      	b.n	800c5c4 <__match+0x10>

0800c5dc <__hexnan>:
 800c5dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e0:	680b      	ldr	r3, [r1, #0]
 800c5e2:	115e      	asrs	r6, r3, #5
 800c5e4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c5e8:	f013 031f 	ands.w	r3, r3, #31
 800c5ec:	b087      	sub	sp, #28
 800c5ee:	bf18      	it	ne
 800c5f0:	3604      	addne	r6, #4
 800c5f2:	2500      	movs	r5, #0
 800c5f4:	1f37      	subs	r7, r6, #4
 800c5f6:	4690      	mov	r8, r2
 800c5f8:	6802      	ldr	r2, [r0, #0]
 800c5fa:	9301      	str	r3, [sp, #4]
 800c5fc:	4682      	mov	sl, r0
 800c5fe:	f846 5c04 	str.w	r5, [r6, #-4]
 800c602:	46b9      	mov	r9, r7
 800c604:	463c      	mov	r4, r7
 800c606:	9502      	str	r5, [sp, #8]
 800c608:	46ab      	mov	fp, r5
 800c60a:	7851      	ldrb	r1, [r2, #1]
 800c60c:	1c53      	adds	r3, r2, #1
 800c60e:	9303      	str	r3, [sp, #12]
 800c610:	b341      	cbz	r1, 800c664 <__hexnan+0x88>
 800c612:	4608      	mov	r0, r1
 800c614:	9205      	str	r2, [sp, #20]
 800c616:	9104      	str	r1, [sp, #16]
 800c618:	f7ff fd5e 	bl	800c0d8 <__hexdig_fun>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d14f      	bne.n	800c6c0 <__hexnan+0xe4>
 800c620:	9904      	ldr	r1, [sp, #16]
 800c622:	9a05      	ldr	r2, [sp, #20]
 800c624:	2920      	cmp	r1, #32
 800c626:	d818      	bhi.n	800c65a <__hexnan+0x7e>
 800c628:	9b02      	ldr	r3, [sp, #8]
 800c62a:	459b      	cmp	fp, r3
 800c62c:	dd13      	ble.n	800c656 <__hexnan+0x7a>
 800c62e:	454c      	cmp	r4, r9
 800c630:	d206      	bcs.n	800c640 <__hexnan+0x64>
 800c632:	2d07      	cmp	r5, #7
 800c634:	dc04      	bgt.n	800c640 <__hexnan+0x64>
 800c636:	462a      	mov	r2, r5
 800c638:	4649      	mov	r1, r9
 800c63a:	4620      	mov	r0, r4
 800c63c:	f7ff ffa8 	bl	800c590 <L_shift>
 800c640:	4544      	cmp	r4, r8
 800c642:	d950      	bls.n	800c6e6 <__hexnan+0x10a>
 800c644:	2300      	movs	r3, #0
 800c646:	f1a4 0904 	sub.w	r9, r4, #4
 800c64a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c64e:	f8cd b008 	str.w	fp, [sp, #8]
 800c652:	464c      	mov	r4, r9
 800c654:	461d      	mov	r5, r3
 800c656:	9a03      	ldr	r2, [sp, #12]
 800c658:	e7d7      	b.n	800c60a <__hexnan+0x2e>
 800c65a:	2929      	cmp	r1, #41	; 0x29
 800c65c:	d156      	bne.n	800c70c <__hexnan+0x130>
 800c65e:	3202      	adds	r2, #2
 800c660:	f8ca 2000 	str.w	r2, [sl]
 800c664:	f1bb 0f00 	cmp.w	fp, #0
 800c668:	d050      	beq.n	800c70c <__hexnan+0x130>
 800c66a:	454c      	cmp	r4, r9
 800c66c:	d206      	bcs.n	800c67c <__hexnan+0xa0>
 800c66e:	2d07      	cmp	r5, #7
 800c670:	dc04      	bgt.n	800c67c <__hexnan+0xa0>
 800c672:	462a      	mov	r2, r5
 800c674:	4649      	mov	r1, r9
 800c676:	4620      	mov	r0, r4
 800c678:	f7ff ff8a 	bl	800c590 <L_shift>
 800c67c:	4544      	cmp	r4, r8
 800c67e:	d934      	bls.n	800c6ea <__hexnan+0x10e>
 800c680:	f1a8 0204 	sub.w	r2, r8, #4
 800c684:	4623      	mov	r3, r4
 800c686:	f853 1b04 	ldr.w	r1, [r3], #4
 800c68a:	f842 1f04 	str.w	r1, [r2, #4]!
 800c68e:	429f      	cmp	r7, r3
 800c690:	d2f9      	bcs.n	800c686 <__hexnan+0xaa>
 800c692:	1b3b      	subs	r3, r7, r4
 800c694:	f023 0303 	bic.w	r3, r3, #3
 800c698:	3304      	adds	r3, #4
 800c69a:	3401      	adds	r4, #1
 800c69c:	3e03      	subs	r6, #3
 800c69e:	42b4      	cmp	r4, r6
 800c6a0:	bf88      	it	hi
 800c6a2:	2304      	movhi	r3, #4
 800c6a4:	4443      	add	r3, r8
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f843 2b04 	str.w	r2, [r3], #4
 800c6ac:	429f      	cmp	r7, r3
 800c6ae:	d2fb      	bcs.n	800c6a8 <__hexnan+0xcc>
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	b91b      	cbnz	r3, 800c6bc <__hexnan+0xe0>
 800c6b4:	4547      	cmp	r7, r8
 800c6b6:	d127      	bne.n	800c708 <__hexnan+0x12c>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	603b      	str	r3, [r7, #0]
 800c6bc:	2005      	movs	r0, #5
 800c6be:	e026      	b.n	800c70e <__hexnan+0x132>
 800c6c0:	3501      	adds	r5, #1
 800c6c2:	2d08      	cmp	r5, #8
 800c6c4:	f10b 0b01 	add.w	fp, fp, #1
 800c6c8:	dd06      	ble.n	800c6d8 <__hexnan+0xfc>
 800c6ca:	4544      	cmp	r4, r8
 800c6cc:	d9c3      	bls.n	800c656 <__hexnan+0x7a>
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	f844 3c04 	str.w	r3, [r4, #-4]
 800c6d4:	2501      	movs	r5, #1
 800c6d6:	3c04      	subs	r4, #4
 800c6d8:	6822      	ldr	r2, [r4, #0]
 800c6da:	f000 000f 	and.w	r0, r0, #15
 800c6de:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c6e2:	6022      	str	r2, [r4, #0]
 800c6e4:	e7b7      	b.n	800c656 <__hexnan+0x7a>
 800c6e6:	2508      	movs	r5, #8
 800c6e8:	e7b5      	b.n	800c656 <__hexnan+0x7a>
 800c6ea:	9b01      	ldr	r3, [sp, #4]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d0df      	beq.n	800c6b0 <__hexnan+0xd4>
 800c6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800c6f4:	f1c3 0320 	rsb	r3, r3, #32
 800c6f8:	fa22 f303 	lsr.w	r3, r2, r3
 800c6fc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c700:	401a      	ands	r2, r3
 800c702:	f846 2c04 	str.w	r2, [r6, #-4]
 800c706:	e7d3      	b.n	800c6b0 <__hexnan+0xd4>
 800c708:	3f04      	subs	r7, #4
 800c70a:	e7d1      	b.n	800c6b0 <__hexnan+0xd4>
 800c70c:	2004      	movs	r0, #4
 800c70e:	b007      	add	sp, #28
 800c710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c714 <_localeconv_r>:
 800c714:	4800      	ldr	r0, [pc, #0]	; (800c718 <_localeconv_r+0x4>)
 800c716:	4770      	bx	lr
 800c718:	20000164 	.word	0x20000164

0800c71c <__ascii_mbtowc>:
 800c71c:	b082      	sub	sp, #8
 800c71e:	b901      	cbnz	r1, 800c722 <__ascii_mbtowc+0x6>
 800c720:	a901      	add	r1, sp, #4
 800c722:	b142      	cbz	r2, 800c736 <__ascii_mbtowc+0x1a>
 800c724:	b14b      	cbz	r3, 800c73a <__ascii_mbtowc+0x1e>
 800c726:	7813      	ldrb	r3, [r2, #0]
 800c728:	600b      	str	r3, [r1, #0]
 800c72a:	7812      	ldrb	r2, [r2, #0]
 800c72c:	1e10      	subs	r0, r2, #0
 800c72e:	bf18      	it	ne
 800c730:	2001      	movne	r0, #1
 800c732:	b002      	add	sp, #8
 800c734:	4770      	bx	lr
 800c736:	4610      	mov	r0, r2
 800c738:	e7fb      	b.n	800c732 <__ascii_mbtowc+0x16>
 800c73a:	f06f 0001 	mvn.w	r0, #1
 800c73e:	e7f8      	b.n	800c732 <__ascii_mbtowc+0x16>

0800c740 <__malloc_lock>:
 800c740:	4801      	ldr	r0, [pc, #4]	; (800c748 <__malloc_lock+0x8>)
 800c742:	f000 be94 	b.w	800d46e <__retarget_lock_acquire_recursive>
 800c746:	bf00      	nop
 800c748:	20000524 	.word	0x20000524

0800c74c <__malloc_unlock>:
 800c74c:	4801      	ldr	r0, [pc, #4]	; (800c754 <__malloc_unlock+0x8>)
 800c74e:	f000 be8f 	b.w	800d470 <__retarget_lock_release_recursive>
 800c752:	bf00      	nop
 800c754:	20000524 	.word	0x20000524

0800c758 <_Balloc>:
 800c758:	b570      	push	{r4, r5, r6, lr}
 800c75a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c75c:	4604      	mov	r4, r0
 800c75e:	460d      	mov	r5, r1
 800c760:	b976      	cbnz	r6, 800c780 <_Balloc+0x28>
 800c762:	2010      	movs	r0, #16
 800c764:	f7fd f882 	bl	800986c <malloc>
 800c768:	4602      	mov	r2, r0
 800c76a:	6260      	str	r0, [r4, #36]	; 0x24
 800c76c:	b920      	cbnz	r0, 800c778 <_Balloc+0x20>
 800c76e:	4b18      	ldr	r3, [pc, #96]	; (800c7d0 <_Balloc+0x78>)
 800c770:	4818      	ldr	r0, [pc, #96]	; (800c7d4 <_Balloc+0x7c>)
 800c772:	2166      	movs	r1, #102	; 0x66
 800c774:	f000 fe4a 	bl	800d40c <__assert_func>
 800c778:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c77c:	6006      	str	r6, [r0, #0]
 800c77e:	60c6      	str	r6, [r0, #12]
 800c780:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c782:	68f3      	ldr	r3, [r6, #12]
 800c784:	b183      	cbz	r3, 800c7a8 <_Balloc+0x50>
 800c786:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c788:	68db      	ldr	r3, [r3, #12]
 800c78a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c78e:	b9b8      	cbnz	r0, 800c7c0 <_Balloc+0x68>
 800c790:	2101      	movs	r1, #1
 800c792:	fa01 f605 	lsl.w	r6, r1, r5
 800c796:	1d72      	adds	r2, r6, #5
 800c798:	0092      	lsls	r2, r2, #2
 800c79a:	4620      	mov	r0, r4
 800c79c:	f000 fc9a 	bl	800d0d4 <_calloc_r>
 800c7a0:	b160      	cbz	r0, 800c7bc <_Balloc+0x64>
 800c7a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c7a6:	e00e      	b.n	800c7c6 <_Balloc+0x6e>
 800c7a8:	2221      	movs	r2, #33	; 0x21
 800c7aa:	2104      	movs	r1, #4
 800c7ac:	4620      	mov	r0, r4
 800c7ae:	f000 fc91 	bl	800d0d4 <_calloc_r>
 800c7b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7b4:	60f0      	str	r0, [r6, #12]
 800c7b6:	68db      	ldr	r3, [r3, #12]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d1e4      	bne.n	800c786 <_Balloc+0x2e>
 800c7bc:	2000      	movs	r0, #0
 800c7be:	bd70      	pop	{r4, r5, r6, pc}
 800c7c0:	6802      	ldr	r2, [r0, #0]
 800c7c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7cc:	e7f7      	b.n	800c7be <_Balloc+0x66>
 800c7ce:	bf00      	nop
 800c7d0:	080123c6 	.word	0x080123c6
 800c7d4:	080124c4 	.word	0x080124c4

0800c7d8 <_Bfree>:
 800c7d8:	b570      	push	{r4, r5, r6, lr}
 800c7da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c7dc:	4605      	mov	r5, r0
 800c7de:	460c      	mov	r4, r1
 800c7e0:	b976      	cbnz	r6, 800c800 <_Bfree+0x28>
 800c7e2:	2010      	movs	r0, #16
 800c7e4:	f7fd f842 	bl	800986c <malloc>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	6268      	str	r0, [r5, #36]	; 0x24
 800c7ec:	b920      	cbnz	r0, 800c7f8 <_Bfree+0x20>
 800c7ee:	4b09      	ldr	r3, [pc, #36]	; (800c814 <_Bfree+0x3c>)
 800c7f0:	4809      	ldr	r0, [pc, #36]	; (800c818 <_Bfree+0x40>)
 800c7f2:	218a      	movs	r1, #138	; 0x8a
 800c7f4:	f000 fe0a 	bl	800d40c <__assert_func>
 800c7f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7fc:	6006      	str	r6, [r0, #0]
 800c7fe:	60c6      	str	r6, [r0, #12]
 800c800:	b13c      	cbz	r4, 800c812 <_Bfree+0x3a>
 800c802:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c804:	6862      	ldr	r2, [r4, #4]
 800c806:	68db      	ldr	r3, [r3, #12]
 800c808:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c80c:	6021      	str	r1, [r4, #0]
 800c80e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c812:	bd70      	pop	{r4, r5, r6, pc}
 800c814:	080123c6 	.word	0x080123c6
 800c818:	080124c4 	.word	0x080124c4

0800c81c <__multadd>:
 800c81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c820:	690d      	ldr	r5, [r1, #16]
 800c822:	4607      	mov	r7, r0
 800c824:	460c      	mov	r4, r1
 800c826:	461e      	mov	r6, r3
 800c828:	f101 0c14 	add.w	ip, r1, #20
 800c82c:	2000      	movs	r0, #0
 800c82e:	f8dc 3000 	ldr.w	r3, [ip]
 800c832:	b299      	uxth	r1, r3
 800c834:	fb02 6101 	mla	r1, r2, r1, r6
 800c838:	0c1e      	lsrs	r6, r3, #16
 800c83a:	0c0b      	lsrs	r3, r1, #16
 800c83c:	fb02 3306 	mla	r3, r2, r6, r3
 800c840:	b289      	uxth	r1, r1
 800c842:	3001      	adds	r0, #1
 800c844:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c848:	4285      	cmp	r5, r0
 800c84a:	f84c 1b04 	str.w	r1, [ip], #4
 800c84e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c852:	dcec      	bgt.n	800c82e <__multadd+0x12>
 800c854:	b30e      	cbz	r6, 800c89a <__multadd+0x7e>
 800c856:	68a3      	ldr	r3, [r4, #8]
 800c858:	42ab      	cmp	r3, r5
 800c85a:	dc19      	bgt.n	800c890 <__multadd+0x74>
 800c85c:	6861      	ldr	r1, [r4, #4]
 800c85e:	4638      	mov	r0, r7
 800c860:	3101      	adds	r1, #1
 800c862:	f7ff ff79 	bl	800c758 <_Balloc>
 800c866:	4680      	mov	r8, r0
 800c868:	b928      	cbnz	r0, 800c876 <__multadd+0x5a>
 800c86a:	4602      	mov	r2, r0
 800c86c:	4b0c      	ldr	r3, [pc, #48]	; (800c8a0 <__multadd+0x84>)
 800c86e:	480d      	ldr	r0, [pc, #52]	; (800c8a4 <__multadd+0x88>)
 800c870:	21b5      	movs	r1, #181	; 0xb5
 800c872:	f000 fdcb 	bl	800d40c <__assert_func>
 800c876:	6922      	ldr	r2, [r4, #16]
 800c878:	3202      	adds	r2, #2
 800c87a:	f104 010c 	add.w	r1, r4, #12
 800c87e:	0092      	lsls	r2, r2, #2
 800c880:	300c      	adds	r0, #12
 800c882:	f7fc fffb 	bl	800987c <memcpy>
 800c886:	4621      	mov	r1, r4
 800c888:	4638      	mov	r0, r7
 800c88a:	f7ff ffa5 	bl	800c7d8 <_Bfree>
 800c88e:	4644      	mov	r4, r8
 800c890:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c894:	3501      	adds	r5, #1
 800c896:	615e      	str	r6, [r3, #20]
 800c898:	6125      	str	r5, [r4, #16]
 800c89a:	4620      	mov	r0, r4
 800c89c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8a0:	08012438 	.word	0x08012438
 800c8a4:	080124c4 	.word	0x080124c4

0800c8a8 <__s2b>:
 800c8a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c8ac:	460c      	mov	r4, r1
 800c8ae:	4615      	mov	r5, r2
 800c8b0:	461f      	mov	r7, r3
 800c8b2:	2209      	movs	r2, #9
 800c8b4:	3308      	adds	r3, #8
 800c8b6:	4606      	mov	r6, r0
 800c8b8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c8bc:	2100      	movs	r1, #0
 800c8be:	2201      	movs	r2, #1
 800c8c0:	429a      	cmp	r2, r3
 800c8c2:	db09      	blt.n	800c8d8 <__s2b+0x30>
 800c8c4:	4630      	mov	r0, r6
 800c8c6:	f7ff ff47 	bl	800c758 <_Balloc>
 800c8ca:	b940      	cbnz	r0, 800c8de <__s2b+0x36>
 800c8cc:	4602      	mov	r2, r0
 800c8ce:	4b19      	ldr	r3, [pc, #100]	; (800c934 <__s2b+0x8c>)
 800c8d0:	4819      	ldr	r0, [pc, #100]	; (800c938 <__s2b+0x90>)
 800c8d2:	21ce      	movs	r1, #206	; 0xce
 800c8d4:	f000 fd9a 	bl	800d40c <__assert_func>
 800c8d8:	0052      	lsls	r2, r2, #1
 800c8da:	3101      	adds	r1, #1
 800c8dc:	e7f0      	b.n	800c8c0 <__s2b+0x18>
 800c8de:	9b08      	ldr	r3, [sp, #32]
 800c8e0:	6143      	str	r3, [r0, #20]
 800c8e2:	2d09      	cmp	r5, #9
 800c8e4:	f04f 0301 	mov.w	r3, #1
 800c8e8:	6103      	str	r3, [r0, #16]
 800c8ea:	dd16      	ble.n	800c91a <__s2b+0x72>
 800c8ec:	f104 0909 	add.w	r9, r4, #9
 800c8f0:	46c8      	mov	r8, r9
 800c8f2:	442c      	add	r4, r5
 800c8f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c8f8:	4601      	mov	r1, r0
 800c8fa:	3b30      	subs	r3, #48	; 0x30
 800c8fc:	220a      	movs	r2, #10
 800c8fe:	4630      	mov	r0, r6
 800c900:	f7ff ff8c 	bl	800c81c <__multadd>
 800c904:	45a0      	cmp	r8, r4
 800c906:	d1f5      	bne.n	800c8f4 <__s2b+0x4c>
 800c908:	f1a5 0408 	sub.w	r4, r5, #8
 800c90c:	444c      	add	r4, r9
 800c90e:	1b2d      	subs	r5, r5, r4
 800c910:	1963      	adds	r3, r4, r5
 800c912:	42bb      	cmp	r3, r7
 800c914:	db04      	blt.n	800c920 <__s2b+0x78>
 800c916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c91a:	340a      	adds	r4, #10
 800c91c:	2509      	movs	r5, #9
 800c91e:	e7f6      	b.n	800c90e <__s2b+0x66>
 800c920:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c924:	4601      	mov	r1, r0
 800c926:	3b30      	subs	r3, #48	; 0x30
 800c928:	220a      	movs	r2, #10
 800c92a:	4630      	mov	r0, r6
 800c92c:	f7ff ff76 	bl	800c81c <__multadd>
 800c930:	e7ee      	b.n	800c910 <__s2b+0x68>
 800c932:	bf00      	nop
 800c934:	08012438 	.word	0x08012438
 800c938:	080124c4 	.word	0x080124c4

0800c93c <__hi0bits>:
 800c93c:	0c03      	lsrs	r3, r0, #16
 800c93e:	041b      	lsls	r3, r3, #16
 800c940:	b9d3      	cbnz	r3, 800c978 <__hi0bits+0x3c>
 800c942:	0400      	lsls	r0, r0, #16
 800c944:	2310      	movs	r3, #16
 800c946:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c94a:	bf04      	itt	eq
 800c94c:	0200      	lsleq	r0, r0, #8
 800c94e:	3308      	addeq	r3, #8
 800c950:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c954:	bf04      	itt	eq
 800c956:	0100      	lsleq	r0, r0, #4
 800c958:	3304      	addeq	r3, #4
 800c95a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c95e:	bf04      	itt	eq
 800c960:	0080      	lsleq	r0, r0, #2
 800c962:	3302      	addeq	r3, #2
 800c964:	2800      	cmp	r0, #0
 800c966:	db05      	blt.n	800c974 <__hi0bits+0x38>
 800c968:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c96c:	f103 0301 	add.w	r3, r3, #1
 800c970:	bf08      	it	eq
 800c972:	2320      	moveq	r3, #32
 800c974:	4618      	mov	r0, r3
 800c976:	4770      	bx	lr
 800c978:	2300      	movs	r3, #0
 800c97a:	e7e4      	b.n	800c946 <__hi0bits+0xa>

0800c97c <__lo0bits>:
 800c97c:	6803      	ldr	r3, [r0, #0]
 800c97e:	f013 0207 	ands.w	r2, r3, #7
 800c982:	4601      	mov	r1, r0
 800c984:	d00b      	beq.n	800c99e <__lo0bits+0x22>
 800c986:	07da      	lsls	r2, r3, #31
 800c988:	d423      	bmi.n	800c9d2 <__lo0bits+0x56>
 800c98a:	0798      	lsls	r0, r3, #30
 800c98c:	bf49      	itett	mi
 800c98e:	085b      	lsrmi	r3, r3, #1
 800c990:	089b      	lsrpl	r3, r3, #2
 800c992:	2001      	movmi	r0, #1
 800c994:	600b      	strmi	r3, [r1, #0]
 800c996:	bf5c      	itt	pl
 800c998:	600b      	strpl	r3, [r1, #0]
 800c99a:	2002      	movpl	r0, #2
 800c99c:	4770      	bx	lr
 800c99e:	b298      	uxth	r0, r3
 800c9a0:	b9a8      	cbnz	r0, 800c9ce <__lo0bits+0x52>
 800c9a2:	0c1b      	lsrs	r3, r3, #16
 800c9a4:	2010      	movs	r0, #16
 800c9a6:	b2da      	uxtb	r2, r3
 800c9a8:	b90a      	cbnz	r2, 800c9ae <__lo0bits+0x32>
 800c9aa:	3008      	adds	r0, #8
 800c9ac:	0a1b      	lsrs	r3, r3, #8
 800c9ae:	071a      	lsls	r2, r3, #28
 800c9b0:	bf04      	itt	eq
 800c9b2:	091b      	lsreq	r3, r3, #4
 800c9b4:	3004      	addeq	r0, #4
 800c9b6:	079a      	lsls	r2, r3, #30
 800c9b8:	bf04      	itt	eq
 800c9ba:	089b      	lsreq	r3, r3, #2
 800c9bc:	3002      	addeq	r0, #2
 800c9be:	07da      	lsls	r2, r3, #31
 800c9c0:	d403      	bmi.n	800c9ca <__lo0bits+0x4e>
 800c9c2:	085b      	lsrs	r3, r3, #1
 800c9c4:	f100 0001 	add.w	r0, r0, #1
 800c9c8:	d005      	beq.n	800c9d6 <__lo0bits+0x5a>
 800c9ca:	600b      	str	r3, [r1, #0]
 800c9cc:	4770      	bx	lr
 800c9ce:	4610      	mov	r0, r2
 800c9d0:	e7e9      	b.n	800c9a6 <__lo0bits+0x2a>
 800c9d2:	2000      	movs	r0, #0
 800c9d4:	4770      	bx	lr
 800c9d6:	2020      	movs	r0, #32
 800c9d8:	4770      	bx	lr
	...

0800c9dc <__i2b>:
 800c9dc:	b510      	push	{r4, lr}
 800c9de:	460c      	mov	r4, r1
 800c9e0:	2101      	movs	r1, #1
 800c9e2:	f7ff feb9 	bl	800c758 <_Balloc>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	b928      	cbnz	r0, 800c9f6 <__i2b+0x1a>
 800c9ea:	4b05      	ldr	r3, [pc, #20]	; (800ca00 <__i2b+0x24>)
 800c9ec:	4805      	ldr	r0, [pc, #20]	; (800ca04 <__i2b+0x28>)
 800c9ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c9f2:	f000 fd0b 	bl	800d40c <__assert_func>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	6144      	str	r4, [r0, #20]
 800c9fa:	6103      	str	r3, [r0, #16]
 800c9fc:	bd10      	pop	{r4, pc}
 800c9fe:	bf00      	nop
 800ca00:	08012438 	.word	0x08012438
 800ca04:	080124c4 	.word	0x080124c4

0800ca08 <__multiply>:
 800ca08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca0c:	4691      	mov	r9, r2
 800ca0e:	690a      	ldr	r2, [r1, #16]
 800ca10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	bfb8      	it	lt
 800ca18:	460b      	movlt	r3, r1
 800ca1a:	460c      	mov	r4, r1
 800ca1c:	bfbc      	itt	lt
 800ca1e:	464c      	movlt	r4, r9
 800ca20:	4699      	movlt	r9, r3
 800ca22:	6927      	ldr	r7, [r4, #16]
 800ca24:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ca28:	68a3      	ldr	r3, [r4, #8]
 800ca2a:	6861      	ldr	r1, [r4, #4]
 800ca2c:	eb07 060a 	add.w	r6, r7, sl
 800ca30:	42b3      	cmp	r3, r6
 800ca32:	b085      	sub	sp, #20
 800ca34:	bfb8      	it	lt
 800ca36:	3101      	addlt	r1, #1
 800ca38:	f7ff fe8e 	bl	800c758 <_Balloc>
 800ca3c:	b930      	cbnz	r0, 800ca4c <__multiply+0x44>
 800ca3e:	4602      	mov	r2, r0
 800ca40:	4b44      	ldr	r3, [pc, #272]	; (800cb54 <__multiply+0x14c>)
 800ca42:	4845      	ldr	r0, [pc, #276]	; (800cb58 <__multiply+0x150>)
 800ca44:	f240 115d 	movw	r1, #349	; 0x15d
 800ca48:	f000 fce0 	bl	800d40c <__assert_func>
 800ca4c:	f100 0514 	add.w	r5, r0, #20
 800ca50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ca54:	462b      	mov	r3, r5
 800ca56:	2200      	movs	r2, #0
 800ca58:	4543      	cmp	r3, r8
 800ca5a:	d321      	bcc.n	800caa0 <__multiply+0x98>
 800ca5c:	f104 0314 	add.w	r3, r4, #20
 800ca60:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ca64:	f109 0314 	add.w	r3, r9, #20
 800ca68:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ca6c:	9202      	str	r2, [sp, #8]
 800ca6e:	1b3a      	subs	r2, r7, r4
 800ca70:	3a15      	subs	r2, #21
 800ca72:	f022 0203 	bic.w	r2, r2, #3
 800ca76:	3204      	adds	r2, #4
 800ca78:	f104 0115 	add.w	r1, r4, #21
 800ca7c:	428f      	cmp	r7, r1
 800ca7e:	bf38      	it	cc
 800ca80:	2204      	movcc	r2, #4
 800ca82:	9201      	str	r2, [sp, #4]
 800ca84:	9a02      	ldr	r2, [sp, #8]
 800ca86:	9303      	str	r3, [sp, #12]
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d80c      	bhi.n	800caa6 <__multiply+0x9e>
 800ca8c:	2e00      	cmp	r6, #0
 800ca8e:	dd03      	ble.n	800ca98 <__multiply+0x90>
 800ca90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d05a      	beq.n	800cb4e <__multiply+0x146>
 800ca98:	6106      	str	r6, [r0, #16]
 800ca9a:	b005      	add	sp, #20
 800ca9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800caa0:	f843 2b04 	str.w	r2, [r3], #4
 800caa4:	e7d8      	b.n	800ca58 <__multiply+0x50>
 800caa6:	f8b3 a000 	ldrh.w	sl, [r3]
 800caaa:	f1ba 0f00 	cmp.w	sl, #0
 800caae:	d024      	beq.n	800cafa <__multiply+0xf2>
 800cab0:	f104 0e14 	add.w	lr, r4, #20
 800cab4:	46a9      	mov	r9, r5
 800cab6:	f04f 0c00 	mov.w	ip, #0
 800caba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cabe:	f8d9 1000 	ldr.w	r1, [r9]
 800cac2:	fa1f fb82 	uxth.w	fp, r2
 800cac6:	b289      	uxth	r1, r1
 800cac8:	fb0a 110b 	mla	r1, sl, fp, r1
 800cacc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cad0:	f8d9 2000 	ldr.w	r2, [r9]
 800cad4:	4461      	add	r1, ip
 800cad6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cada:	fb0a c20b 	mla	r2, sl, fp, ip
 800cade:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cae2:	b289      	uxth	r1, r1
 800cae4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cae8:	4577      	cmp	r7, lr
 800caea:	f849 1b04 	str.w	r1, [r9], #4
 800caee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800caf2:	d8e2      	bhi.n	800caba <__multiply+0xb2>
 800caf4:	9a01      	ldr	r2, [sp, #4]
 800caf6:	f845 c002 	str.w	ip, [r5, r2]
 800cafa:	9a03      	ldr	r2, [sp, #12]
 800cafc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cb00:	3304      	adds	r3, #4
 800cb02:	f1b9 0f00 	cmp.w	r9, #0
 800cb06:	d020      	beq.n	800cb4a <__multiply+0x142>
 800cb08:	6829      	ldr	r1, [r5, #0]
 800cb0a:	f104 0c14 	add.w	ip, r4, #20
 800cb0e:	46ae      	mov	lr, r5
 800cb10:	f04f 0a00 	mov.w	sl, #0
 800cb14:	f8bc b000 	ldrh.w	fp, [ip]
 800cb18:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cb1c:	fb09 220b 	mla	r2, r9, fp, r2
 800cb20:	4492      	add	sl, r2
 800cb22:	b289      	uxth	r1, r1
 800cb24:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cb28:	f84e 1b04 	str.w	r1, [lr], #4
 800cb2c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cb30:	f8be 1000 	ldrh.w	r1, [lr]
 800cb34:	0c12      	lsrs	r2, r2, #16
 800cb36:	fb09 1102 	mla	r1, r9, r2, r1
 800cb3a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cb3e:	4567      	cmp	r7, ip
 800cb40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cb44:	d8e6      	bhi.n	800cb14 <__multiply+0x10c>
 800cb46:	9a01      	ldr	r2, [sp, #4]
 800cb48:	50a9      	str	r1, [r5, r2]
 800cb4a:	3504      	adds	r5, #4
 800cb4c:	e79a      	b.n	800ca84 <__multiply+0x7c>
 800cb4e:	3e01      	subs	r6, #1
 800cb50:	e79c      	b.n	800ca8c <__multiply+0x84>
 800cb52:	bf00      	nop
 800cb54:	08012438 	.word	0x08012438
 800cb58:	080124c4 	.word	0x080124c4

0800cb5c <__pow5mult>:
 800cb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb60:	4615      	mov	r5, r2
 800cb62:	f012 0203 	ands.w	r2, r2, #3
 800cb66:	4606      	mov	r6, r0
 800cb68:	460f      	mov	r7, r1
 800cb6a:	d007      	beq.n	800cb7c <__pow5mult+0x20>
 800cb6c:	4c25      	ldr	r4, [pc, #148]	; (800cc04 <__pow5mult+0xa8>)
 800cb6e:	3a01      	subs	r2, #1
 800cb70:	2300      	movs	r3, #0
 800cb72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cb76:	f7ff fe51 	bl	800c81c <__multadd>
 800cb7a:	4607      	mov	r7, r0
 800cb7c:	10ad      	asrs	r5, r5, #2
 800cb7e:	d03d      	beq.n	800cbfc <__pow5mult+0xa0>
 800cb80:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cb82:	b97c      	cbnz	r4, 800cba4 <__pow5mult+0x48>
 800cb84:	2010      	movs	r0, #16
 800cb86:	f7fc fe71 	bl	800986c <malloc>
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	6270      	str	r0, [r6, #36]	; 0x24
 800cb8e:	b928      	cbnz	r0, 800cb9c <__pow5mult+0x40>
 800cb90:	4b1d      	ldr	r3, [pc, #116]	; (800cc08 <__pow5mult+0xac>)
 800cb92:	481e      	ldr	r0, [pc, #120]	; (800cc0c <__pow5mult+0xb0>)
 800cb94:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800cb98:	f000 fc38 	bl	800d40c <__assert_func>
 800cb9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cba0:	6004      	str	r4, [r0, #0]
 800cba2:	60c4      	str	r4, [r0, #12]
 800cba4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cba8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cbac:	b94c      	cbnz	r4, 800cbc2 <__pow5mult+0x66>
 800cbae:	f240 2171 	movw	r1, #625	; 0x271
 800cbb2:	4630      	mov	r0, r6
 800cbb4:	f7ff ff12 	bl	800c9dc <__i2b>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	f8c8 0008 	str.w	r0, [r8, #8]
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	6003      	str	r3, [r0, #0]
 800cbc2:	f04f 0900 	mov.w	r9, #0
 800cbc6:	07eb      	lsls	r3, r5, #31
 800cbc8:	d50a      	bpl.n	800cbe0 <__pow5mult+0x84>
 800cbca:	4639      	mov	r1, r7
 800cbcc:	4622      	mov	r2, r4
 800cbce:	4630      	mov	r0, r6
 800cbd0:	f7ff ff1a 	bl	800ca08 <__multiply>
 800cbd4:	4639      	mov	r1, r7
 800cbd6:	4680      	mov	r8, r0
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f7ff fdfd 	bl	800c7d8 <_Bfree>
 800cbde:	4647      	mov	r7, r8
 800cbe0:	106d      	asrs	r5, r5, #1
 800cbe2:	d00b      	beq.n	800cbfc <__pow5mult+0xa0>
 800cbe4:	6820      	ldr	r0, [r4, #0]
 800cbe6:	b938      	cbnz	r0, 800cbf8 <__pow5mult+0x9c>
 800cbe8:	4622      	mov	r2, r4
 800cbea:	4621      	mov	r1, r4
 800cbec:	4630      	mov	r0, r6
 800cbee:	f7ff ff0b 	bl	800ca08 <__multiply>
 800cbf2:	6020      	str	r0, [r4, #0]
 800cbf4:	f8c0 9000 	str.w	r9, [r0]
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	e7e4      	b.n	800cbc6 <__pow5mult+0x6a>
 800cbfc:	4638      	mov	r0, r7
 800cbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc02:	bf00      	nop
 800cc04:	08012610 	.word	0x08012610
 800cc08:	080123c6 	.word	0x080123c6
 800cc0c:	080124c4 	.word	0x080124c4

0800cc10 <__lshift>:
 800cc10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cc14:	460c      	mov	r4, r1
 800cc16:	6849      	ldr	r1, [r1, #4]
 800cc18:	6923      	ldr	r3, [r4, #16]
 800cc1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cc1e:	68a3      	ldr	r3, [r4, #8]
 800cc20:	4607      	mov	r7, r0
 800cc22:	4691      	mov	r9, r2
 800cc24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cc28:	f108 0601 	add.w	r6, r8, #1
 800cc2c:	42b3      	cmp	r3, r6
 800cc2e:	db0b      	blt.n	800cc48 <__lshift+0x38>
 800cc30:	4638      	mov	r0, r7
 800cc32:	f7ff fd91 	bl	800c758 <_Balloc>
 800cc36:	4605      	mov	r5, r0
 800cc38:	b948      	cbnz	r0, 800cc4e <__lshift+0x3e>
 800cc3a:	4602      	mov	r2, r0
 800cc3c:	4b2a      	ldr	r3, [pc, #168]	; (800cce8 <__lshift+0xd8>)
 800cc3e:	482b      	ldr	r0, [pc, #172]	; (800ccec <__lshift+0xdc>)
 800cc40:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cc44:	f000 fbe2 	bl	800d40c <__assert_func>
 800cc48:	3101      	adds	r1, #1
 800cc4a:	005b      	lsls	r3, r3, #1
 800cc4c:	e7ee      	b.n	800cc2c <__lshift+0x1c>
 800cc4e:	2300      	movs	r3, #0
 800cc50:	f100 0114 	add.w	r1, r0, #20
 800cc54:	f100 0210 	add.w	r2, r0, #16
 800cc58:	4618      	mov	r0, r3
 800cc5a:	4553      	cmp	r3, sl
 800cc5c:	db37      	blt.n	800ccce <__lshift+0xbe>
 800cc5e:	6920      	ldr	r0, [r4, #16]
 800cc60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cc64:	f104 0314 	add.w	r3, r4, #20
 800cc68:	f019 091f 	ands.w	r9, r9, #31
 800cc6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cc70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cc74:	d02f      	beq.n	800ccd6 <__lshift+0xc6>
 800cc76:	f1c9 0e20 	rsb	lr, r9, #32
 800cc7a:	468a      	mov	sl, r1
 800cc7c:	f04f 0c00 	mov.w	ip, #0
 800cc80:	681a      	ldr	r2, [r3, #0]
 800cc82:	fa02 f209 	lsl.w	r2, r2, r9
 800cc86:	ea42 020c 	orr.w	r2, r2, ip
 800cc8a:	f84a 2b04 	str.w	r2, [sl], #4
 800cc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc92:	4298      	cmp	r0, r3
 800cc94:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cc98:	d8f2      	bhi.n	800cc80 <__lshift+0x70>
 800cc9a:	1b03      	subs	r3, r0, r4
 800cc9c:	3b15      	subs	r3, #21
 800cc9e:	f023 0303 	bic.w	r3, r3, #3
 800cca2:	3304      	adds	r3, #4
 800cca4:	f104 0215 	add.w	r2, r4, #21
 800cca8:	4290      	cmp	r0, r2
 800ccaa:	bf38      	it	cc
 800ccac:	2304      	movcc	r3, #4
 800ccae:	f841 c003 	str.w	ip, [r1, r3]
 800ccb2:	f1bc 0f00 	cmp.w	ip, #0
 800ccb6:	d001      	beq.n	800ccbc <__lshift+0xac>
 800ccb8:	f108 0602 	add.w	r6, r8, #2
 800ccbc:	3e01      	subs	r6, #1
 800ccbe:	4638      	mov	r0, r7
 800ccc0:	612e      	str	r6, [r5, #16]
 800ccc2:	4621      	mov	r1, r4
 800ccc4:	f7ff fd88 	bl	800c7d8 <_Bfree>
 800ccc8:	4628      	mov	r0, r5
 800ccca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccce:	f842 0f04 	str.w	r0, [r2, #4]!
 800ccd2:	3301      	adds	r3, #1
 800ccd4:	e7c1      	b.n	800cc5a <__lshift+0x4a>
 800ccd6:	3904      	subs	r1, #4
 800ccd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccdc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cce0:	4298      	cmp	r0, r3
 800cce2:	d8f9      	bhi.n	800ccd8 <__lshift+0xc8>
 800cce4:	e7ea      	b.n	800ccbc <__lshift+0xac>
 800cce6:	bf00      	nop
 800cce8:	08012438 	.word	0x08012438
 800ccec:	080124c4 	.word	0x080124c4

0800ccf0 <__mcmp>:
 800ccf0:	b530      	push	{r4, r5, lr}
 800ccf2:	6902      	ldr	r2, [r0, #16]
 800ccf4:	690c      	ldr	r4, [r1, #16]
 800ccf6:	1b12      	subs	r2, r2, r4
 800ccf8:	d10e      	bne.n	800cd18 <__mcmp+0x28>
 800ccfa:	f100 0314 	add.w	r3, r0, #20
 800ccfe:	3114      	adds	r1, #20
 800cd00:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cd04:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cd08:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cd0c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cd10:	42a5      	cmp	r5, r4
 800cd12:	d003      	beq.n	800cd1c <__mcmp+0x2c>
 800cd14:	d305      	bcc.n	800cd22 <__mcmp+0x32>
 800cd16:	2201      	movs	r2, #1
 800cd18:	4610      	mov	r0, r2
 800cd1a:	bd30      	pop	{r4, r5, pc}
 800cd1c:	4283      	cmp	r3, r0
 800cd1e:	d3f3      	bcc.n	800cd08 <__mcmp+0x18>
 800cd20:	e7fa      	b.n	800cd18 <__mcmp+0x28>
 800cd22:	f04f 32ff 	mov.w	r2, #4294967295
 800cd26:	e7f7      	b.n	800cd18 <__mcmp+0x28>

0800cd28 <__mdiff>:
 800cd28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd2c:	460c      	mov	r4, r1
 800cd2e:	4606      	mov	r6, r0
 800cd30:	4611      	mov	r1, r2
 800cd32:	4620      	mov	r0, r4
 800cd34:	4690      	mov	r8, r2
 800cd36:	f7ff ffdb 	bl	800ccf0 <__mcmp>
 800cd3a:	1e05      	subs	r5, r0, #0
 800cd3c:	d110      	bne.n	800cd60 <__mdiff+0x38>
 800cd3e:	4629      	mov	r1, r5
 800cd40:	4630      	mov	r0, r6
 800cd42:	f7ff fd09 	bl	800c758 <_Balloc>
 800cd46:	b930      	cbnz	r0, 800cd56 <__mdiff+0x2e>
 800cd48:	4b3a      	ldr	r3, [pc, #232]	; (800ce34 <__mdiff+0x10c>)
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	f240 2132 	movw	r1, #562	; 0x232
 800cd50:	4839      	ldr	r0, [pc, #228]	; (800ce38 <__mdiff+0x110>)
 800cd52:	f000 fb5b 	bl	800d40c <__assert_func>
 800cd56:	2301      	movs	r3, #1
 800cd58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cd5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd60:	bfa4      	itt	ge
 800cd62:	4643      	movge	r3, r8
 800cd64:	46a0      	movge	r8, r4
 800cd66:	4630      	mov	r0, r6
 800cd68:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800cd6c:	bfa6      	itte	ge
 800cd6e:	461c      	movge	r4, r3
 800cd70:	2500      	movge	r5, #0
 800cd72:	2501      	movlt	r5, #1
 800cd74:	f7ff fcf0 	bl	800c758 <_Balloc>
 800cd78:	b920      	cbnz	r0, 800cd84 <__mdiff+0x5c>
 800cd7a:	4b2e      	ldr	r3, [pc, #184]	; (800ce34 <__mdiff+0x10c>)
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cd82:	e7e5      	b.n	800cd50 <__mdiff+0x28>
 800cd84:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800cd88:	6926      	ldr	r6, [r4, #16]
 800cd8a:	60c5      	str	r5, [r0, #12]
 800cd8c:	f104 0914 	add.w	r9, r4, #20
 800cd90:	f108 0514 	add.w	r5, r8, #20
 800cd94:	f100 0e14 	add.w	lr, r0, #20
 800cd98:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800cd9c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cda0:	f108 0210 	add.w	r2, r8, #16
 800cda4:	46f2      	mov	sl, lr
 800cda6:	2100      	movs	r1, #0
 800cda8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cdac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cdb0:	fa1f f883 	uxth.w	r8, r3
 800cdb4:	fa11 f18b 	uxtah	r1, r1, fp
 800cdb8:	0c1b      	lsrs	r3, r3, #16
 800cdba:	eba1 0808 	sub.w	r8, r1, r8
 800cdbe:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cdc2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cdc6:	fa1f f888 	uxth.w	r8, r8
 800cdca:	1419      	asrs	r1, r3, #16
 800cdcc:	454e      	cmp	r6, r9
 800cdce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cdd2:	f84a 3b04 	str.w	r3, [sl], #4
 800cdd6:	d8e7      	bhi.n	800cda8 <__mdiff+0x80>
 800cdd8:	1b33      	subs	r3, r6, r4
 800cdda:	3b15      	subs	r3, #21
 800cddc:	f023 0303 	bic.w	r3, r3, #3
 800cde0:	3304      	adds	r3, #4
 800cde2:	3415      	adds	r4, #21
 800cde4:	42a6      	cmp	r6, r4
 800cde6:	bf38      	it	cc
 800cde8:	2304      	movcc	r3, #4
 800cdea:	441d      	add	r5, r3
 800cdec:	4473      	add	r3, lr
 800cdee:	469e      	mov	lr, r3
 800cdf0:	462e      	mov	r6, r5
 800cdf2:	4566      	cmp	r6, ip
 800cdf4:	d30e      	bcc.n	800ce14 <__mdiff+0xec>
 800cdf6:	f10c 0203 	add.w	r2, ip, #3
 800cdfa:	1b52      	subs	r2, r2, r5
 800cdfc:	f022 0203 	bic.w	r2, r2, #3
 800ce00:	3d03      	subs	r5, #3
 800ce02:	45ac      	cmp	ip, r5
 800ce04:	bf38      	it	cc
 800ce06:	2200      	movcc	r2, #0
 800ce08:	441a      	add	r2, r3
 800ce0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ce0e:	b17b      	cbz	r3, 800ce30 <__mdiff+0x108>
 800ce10:	6107      	str	r7, [r0, #16]
 800ce12:	e7a3      	b.n	800cd5c <__mdiff+0x34>
 800ce14:	f856 8b04 	ldr.w	r8, [r6], #4
 800ce18:	fa11 f288 	uxtah	r2, r1, r8
 800ce1c:	1414      	asrs	r4, r2, #16
 800ce1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ce22:	b292      	uxth	r2, r2
 800ce24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ce28:	f84e 2b04 	str.w	r2, [lr], #4
 800ce2c:	1421      	asrs	r1, r4, #16
 800ce2e:	e7e0      	b.n	800cdf2 <__mdiff+0xca>
 800ce30:	3f01      	subs	r7, #1
 800ce32:	e7ea      	b.n	800ce0a <__mdiff+0xe2>
 800ce34:	08012438 	.word	0x08012438
 800ce38:	080124c4 	.word	0x080124c4

0800ce3c <__ulp>:
 800ce3c:	b082      	sub	sp, #8
 800ce3e:	ed8d 0b00 	vstr	d0, [sp]
 800ce42:	9b01      	ldr	r3, [sp, #4]
 800ce44:	4912      	ldr	r1, [pc, #72]	; (800ce90 <__ulp+0x54>)
 800ce46:	4019      	ands	r1, r3
 800ce48:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ce4c:	2900      	cmp	r1, #0
 800ce4e:	dd05      	ble.n	800ce5c <__ulp+0x20>
 800ce50:	2200      	movs	r2, #0
 800ce52:	460b      	mov	r3, r1
 800ce54:	ec43 2b10 	vmov	d0, r2, r3
 800ce58:	b002      	add	sp, #8
 800ce5a:	4770      	bx	lr
 800ce5c:	4249      	negs	r1, r1
 800ce5e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ce62:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ce66:	f04f 0200 	mov.w	r2, #0
 800ce6a:	f04f 0300 	mov.w	r3, #0
 800ce6e:	da04      	bge.n	800ce7a <__ulp+0x3e>
 800ce70:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ce74:	fa41 f300 	asr.w	r3, r1, r0
 800ce78:	e7ec      	b.n	800ce54 <__ulp+0x18>
 800ce7a:	f1a0 0114 	sub.w	r1, r0, #20
 800ce7e:	291e      	cmp	r1, #30
 800ce80:	bfda      	itte	le
 800ce82:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ce86:	fa20 f101 	lsrle.w	r1, r0, r1
 800ce8a:	2101      	movgt	r1, #1
 800ce8c:	460a      	mov	r2, r1
 800ce8e:	e7e1      	b.n	800ce54 <__ulp+0x18>
 800ce90:	7ff00000 	.word	0x7ff00000

0800ce94 <__b2d>:
 800ce94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce96:	6905      	ldr	r5, [r0, #16]
 800ce98:	f100 0714 	add.w	r7, r0, #20
 800ce9c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800cea0:	1f2e      	subs	r6, r5, #4
 800cea2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7ff fd48 	bl	800c93c <__hi0bits>
 800ceac:	f1c0 0320 	rsb	r3, r0, #32
 800ceb0:	280a      	cmp	r0, #10
 800ceb2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cf30 <__b2d+0x9c>
 800ceb6:	600b      	str	r3, [r1, #0]
 800ceb8:	dc14      	bgt.n	800cee4 <__b2d+0x50>
 800ceba:	f1c0 0e0b 	rsb	lr, r0, #11
 800cebe:	fa24 f10e 	lsr.w	r1, r4, lr
 800cec2:	42b7      	cmp	r7, r6
 800cec4:	ea41 030c 	orr.w	r3, r1, ip
 800cec8:	bf34      	ite	cc
 800ceca:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800cece:	2100      	movcs	r1, #0
 800ced0:	3015      	adds	r0, #21
 800ced2:	fa04 f000 	lsl.w	r0, r4, r0
 800ced6:	fa21 f10e 	lsr.w	r1, r1, lr
 800ceda:	ea40 0201 	orr.w	r2, r0, r1
 800cede:	ec43 2b10 	vmov	d0, r2, r3
 800cee2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee4:	42b7      	cmp	r7, r6
 800cee6:	bf3a      	itte	cc
 800cee8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ceec:	f1a5 0608 	subcc.w	r6, r5, #8
 800cef0:	2100      	movcs	r1, #0
 800cef2:	380b      	subs	r0, #11
 800cef4:	d017      	beq.n	800cf26 <__b2d+0x92>
 800cef6:	f1c0 0c20 	rsb	ip, r0, #32
 800cefa:	fa04 f500 	lsl.w	r5, r4, r0
 800cefe:	42be      	cmp	r6, r7
 800cf00:	fa21 f40c 	lsr.w	r4, r1, ip
 800cf04:	ea45 0504 	orr.w	r5, r5, r4
 800cf08:	bf8c      	ite	hi
 800cf0a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cf0e:	2400      	movls	r4, #0
 800cf10:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cf14:	fa01 f000 	lsl.w	r0, r1, r0
 800cf18:	fa24 f40c 	lsr.w	r4, r4, ip
 800cf1c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cf20:	ea40 0204 	orr.w	r2, r0, r4
 800cf24:	e7db      	b.n	800cede <__b2d+0x4a>
 800cf26:	ea44 030c 	orr.w	r3, r4, ip
 800cf2a:	460a      	mov	r2, r1
 800cf2c:	e7d7      	b.n	800cede <__b2d+0x4a>
 800cf2e:	bf00      	nop
 800cf30:	3ff00000 	.word	0x3ff00000

0800cf34 <__d2b>:
 800cf34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cf38:	4689      	mov	r9, r1
 800cf3a:	2101      	movs	r1, #1
 800cf3c:	ec57 6b10 	vmov	r6, r7, d0
 800cf40:	4690      	mov	r8, r2
 800cf42:	f7ff fc09 	bl	800c758 <_Balloc>
 800cf46:	4604      	mov	r4, r0
 800cf48:	b930      	cbnz	r0, 800cf58 <__d2b+0x24>
 800cf4a:	4602      	mov	r2, r0
 800cf4c:	4b25      	ldr	r3, [pc, #148]	; (800cfe4 <__d2b+0xb0>)
 800cf4e:	4826      	ldr	r0, [pc, #152]	; (800cfe8 <__d2b+0xb4>)
 800cf50:	f240 310a 	movw	r1, #778	; 0x30a
 800cf54:	f000 fa5a 	bl	800d40c <__assert_func>
 800cf58:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cf5c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cf60:	bb35      	cbnz	r5, 800cfb0 <__d2b+0x7c>
 800cf62:	2e00      	cmp	r6, #0
 800cf64:	9301      	str	r3, [sp, #4]
 800cf66:	d028      	beq.n	800cfba <__d2b+0x86>
 800cf68:	4668      	mov	r0, sp
 800cf6a:	9600      	str	r6, [sp, #0]
 800cf6c:	f7ff fd06 	bl	800c97c <__lo0bits>
 800cf70:	9900      	ldr	r1, [sp, #0]
 800cf72:	b300      	cbz	r0, 800cfb6 <__d2b+0x82>
 800cf74:	9a01      	ldr	r2, [sp, #4]
 800cf76:	f1c0 0320 	rsb	r3, r0, #32
 800cf7a:	fa02 f303 	lsl.w	r3, r2, r3
 800cf7e:	430b      	orrs	r3, r1
 800cf80:	40c2      	lsrs	r2, r0
 800cf82:	6163      	str	r3, [r4, #20]
 800cf84:	9201      	str	r2, [sp, #4]
 800cf86:	9b01      	ldr	r3, [sp, #4]
 800cf88:	61a3      	str	r3, [r4, #24]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	bf14      	ite	ne
 800cf8e:	2202      	movne	r2, #2
 800cf90:	2201      	moveq	r2, #1
 800cf92:	6122      	str	r2, [r4, #16]
 800cf94:	b1d5      	cbz	r5, 800cfcc <__d2b+0x98>
 800cf96:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cf9a:	4405      	add	r5, r0
 800cf9c:	f8c9 5000 	str.w	r5, [r9]
 800cfa0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cfa4:	f8c8 0000 	str.w	r0, [r8]
 800cfa8:	4620      	mov	r0, r4
 800cfaa:	b003      	add	sp, #12
 800cfac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cfb0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfb4:	e7d5      	b.n	800cf62 <__d2b+0x2e>
 800cfb6:	6161      	str	r1, [r4, #20]
 800cfb8:	e7e5      	b.n	800cf86 <__d2b+0x52>
 800cfba:	a801      	add	r0, sp, #4
 800cfbc:	f7ff fcde 	bl	800c97c <__lo0bits>
 800cfc0:	9b01      	ldr	r3, [sp, #4]
 800cfc2:	6163      	str	r3, [r4, #20]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	6122      	str	r2, [r4, #16]
 800cfc8:	3020      	adds	r0, #32
 800cfca:	e7e3      	b.n	800cf94 <__d2b+0x60>
 800cfcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cfd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cfd4:	f8c9 0000 	str.w	r0, [r9]
 800cfd8:	6918      	ldr	r0, [r3, #16]
 800cfda:	f7ff fcaf 	bl	800c93c <__hi0bits>
 800cfde:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cfe2:	e7df      	b.n	800cfa4 <__d2b+0x70>
 800cfe4:	08012438 	.word	0x08012438
 800cfe8:	080124c4 	.word	0x080124c4

0800cfec <__ratio>:
 800cfec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cff0:	4688      	mov	r8, r1
 800cff2:	4669      	mov	r1, sp
 800cff4:	4681      	mov	r9, r0
 800cff6:	f7ff ff4d 	bl	800ce94 <__b2d>
 800cffa:	a901      	add	r1, sp, #4
 800cffc:	4640      	mov	r0, r8
 800cffe:	ec55 4b10 	vmov	r4, r5, d0
 800d002:	ee10 aa10 	vmov	sl, s0
 800d006:	f7ff ff45 	bl	800ce94 <__b2d>
 800d00a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d00e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800d012:	1a59      	subs	r1, r3, r1
 800d014:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d018:	1ad3      	subs	r3, r2, r3
 800d01a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800d01e:	ec57 6b10 	vmov	r6, r7, d0
 800d022:	2b00      	cmp	r3, #0
 800d024:	bfd6      	itet	le
 800d026:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d02a:	462a      	movgt	r2, r5
 800d02c:	463a      	movle	r2, r7
 800d02e:	46ab      	mov	fp, r5
 800d030:	bfd6      	itet	le
 800d032:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800d036:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800d03a:	ee00 3a90 	vmovle	s1, r3
 800d03e:	ec4b ab17 	vmov	d7, sl, fp
 800d042:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800d046:	b003      	add	sp, #12
 800d048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d04c <__copybits>:
 800d04c:	3901      	subs	r1, #1
 800d04e:	b570      	push	{r4, r5, r6, lr}
 800d050:	1149      	asrs	r1, r1, #5
 800d052:	6914      	ldr	r4, [r2, #16]
 800d054:	3101      	adds	r1, #1
 800d056:	f102 0314 	add.w	r3, r2, #20
 800d05a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d05e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d062:	1f05      	subs	r5, r0, #4
 800d064:	42a3      	cmp	r3, r4
 800d066:	d30c      	bcc.n	800d082 <__copybits+0x36>
 800d068:	1aa3      	subs	r3, r4, r2
 800d06a:	3b11      	subs	r3, #17
 800d06c:	f023 0303 	bic.w	r3, r3, #3
 800d070:	3211      	adds	r2, #17
 800d072:	42a2      	cmp	r2, r4
 800d074:	bf88      	it	hi
 800d076:	2300      	movhi	r3, #0
 800d078:	4418      	add	r0, r3
 800d07a:	2300      	movs	r3, #0
 800d07c:	4288      	cmp	r0, r1
 800d07e:	d305      	bcc.n	800d08c <__copybits+0x40>
 800d080:	bd70      	pop	{r4, r5, r6, pc}
 800d082:	f853 6b04 	ldr.w	r6, [r3], #4
 800d086:	f845 6f04 	str.w	r6, [r5, #4]!
 800d08a:	e7eb      	b.n	800d064 <__copybits+0x18>
 800d08c:	f840 3b04 	str.w	r3, [r0], #4
 800d090:	e7f4      	b.n	800d07c <__copybits+0x30>

0800d092 <__any_on>:
 800d092:	f100 0214 	add.w	r2, r0, #20
 800d096:	6900      	ldr	r0, [r0, #16]
 800d098:	114b      	asrs	r3, r1, #5
 800d09a:	4298      	cmp	r0, r3
 800d09c:	b510      	push	{r4, lr}
 800d09e:	db11      	blt.n	800d0c4 <__any_on+0x32>
 800d0a0:	dd0a      	ble.n	800d0b8 <__any_on+0x26>
 800d0a2:	f011 011f 	ands.w	r1, r1, #31
 800d0a6:	d007      	beq.n	800d0b8 <__any_on+0x26>
 800d0a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d0ac:	fa24 f001 	lsr.w	r0, r4, r1
 800d0b0:	fa00 f101 	lsl.w	r1, r0, r1
 800d0b4:	428c      	cmp	r4, r1
 800d0b6:	d10b      	bne.n	800d0d0 <__any_on+0x3e>
 800d0b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d0bc:	4293      	cmp	r3, r2
 800d0be:	d803      	bhi.n	800d0c8 <__any_on+0x36>
 800d0c0:	2000      	movs	r0, #0
 800d0c2:	bd10      	pop	{r4, pc}
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	e7f7      	b.n	800d0b8 <__any_on+0x26>
 800d0c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d0cc:	2900      	cmp	r1, #0
 800d0ce:	d0f5      	beq.n	800d0bc <__any_on+0x2a>
 800d0d0:	2001      	movs	r0, #1
 800d0d2:	e7f6      	b.n	800d0c2 <__any_on+0x30>

0800d0d4 <_calloc_r>:
 800d0d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d0d6:	fba1 2402 	umull	r2, r4, r1, r2
 800d0da:	b94c      	cbnz	r4, 800d0f0 <_calloc_r+0x1c>
 800d0dc:	4611      	mov	r1, r2
 800d0de:	9201      	str	r2, [sp, #4]
 800d0e0:	f7fc fc4e 	bl	8009980 <_malloc_r>
 800d0e4:	9a01      	ldr	r2, [sp, #4]
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	b930      	cbnz	r0, 800d0f8 <_calloc_r+0x24>
 800d0ea:	4628      	mov	r0, r5
 800d0ec:	b003      	add	sp, #12
 800d0ee:	bd30      	pop	{r4, r5, pc}
 800d0f0:	220c      	movs	r2, #12
 800d0f2:	6002      	str	r2, [r0, #0]
 800d0f4:	2500      	movs	r5, #0
 800d0f6:	e7f8      	b.n	800d0ea <_calloc_r+0x16>
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	f7fc fbcd 	bl	8009898 <memset>
 800d0fe:	e7f4      	b.n	800d0ea <_calloc_r+0x16>

0800d100 <__ssputs_r>:
 800d100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d104:	688e      	ldr	r6, [r1, #8]
 800d106:	429e      	cmp	r6, r3
 800d108:	4682      	mov	sl, r0
 800d10a:	460c      	mov	r4, r1
 800d10c:	4690      	mov	r8, r2
 800d10e:	461f      	mov	r7, r3
 800d110:	d838      	bhi.n	800d184 <__ssputs_r+0x84>
 800d112:	898a      	ldrh	r2, [r1, #12]
 800d114:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d118:	d032      	beq.n	800d180 <__ssputs_r+0x80>
 800d11a:	6825      	ldr	r5, [r4, #0]
 800d11c:	6909      	ldr	r1, [r1, #16]
 800d11e:	eba5 0901 	sub.w	r9, r5, r1
 800d122:	6965      	ldr	r5, [r4, #20]
 800d124:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d128:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d12c:	3301      	adds	r3, #1
 800d12e:	444b      	add	r3, r9
 800d130:	106d      	asrs	r5, r5, #1
 800d132:	429d      	cmp	r5, r3
 800d134:	bf38      	it	cc
 800d136:	461d      	movcc	r5, r3
 800d138:	0553      	lsls	r3, r2, #21
 800d13a:	d531      	bpl.n	800d1a0 <__ssputs_r+0xa0>
 800d13c:	4629      	mov	r1, r5
 800d13e:	f7fc fc1f 	bl	8009980 <_malloc_r>
 800d142:	4606      	mov	r6, r0
 800d144:	b950      	cbnz	r0, 800d15c <__ssputs_r+0x5c>
 800d146:	230c      	movs	r3, #12
 800d148:	f8ca 3000 	str.w	r3, [sl]
 800d14c:	89a3      	ldrh	r3, [r4, #12]
 800d14e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d152:	81a3      	strh	r3, [r4, #12]
 800d154:	f04f 30ff 	mov.w	r0, #4294967295
 800d158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d15c:	6921      	ldr	r1, [r4, #16]
 800d15e:	464a      	mov	r2, r9
 800d160:	f7fc fb8c 	bl	800987c <memcpy>
 800d164:	89a3      	ldrh	r3, [r4, #12]
 800d166:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d16a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d16e:	81a3      	strh	r3, [r4, #12]
 800d170:	6126      	str	r6, [r4, #16]
 800d172:	6165      	str	r5, [r4, #20]
 800d174:	444e      	add	r6, r9
 800d176:	eba5 0509 	sub.w	r5, r5, r9
 800d17a:	6026      	str	r6, [r4, #0]
 800d17c:	60a5      	str	r5, [r4, #8]
 800d17e:	463e      	mov	r6, r7
 800d180:	42be      	cmp	r6, r7
 800d182:	d900      	bls.n	800d186 <__ssputs_r+0x86>
 800d184:	463e      	mov	r6, r7
 800d186:	6820      	ldr	r0, [r4, #0]
 800d188:	4632      	mov	r2, r6
 800d18a:	4641      	mov	r1, r8
 800d18c:	f000 f971 	bl	800d472 <memmove>
 800d190:	68a3      	ldr	r3, [r4, #8]
 800d192:	1b9b      	subs	r3, r3, r6
 800d194:	60a3      	str	r3, [r4, #8]
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	4433      	add	r3, r6
 800d19a:	6023      	str	r3, [r4, #0]
 800d19c:	2000      	movs	r0, #0
 800d19e:	e7db      	b.n	800d158 <__ssputs_r+0x58>
 800d1a0:	462a      	mov	r2, r5
 800d1a2:	f000 f980 	bl	800d4a6 <_realloc_r>
 800d1a6:	4606      	mov	r6, r0
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	d1e1      	bne.n	800d170 <__ssputs_r+0x70>
 800d1ac:	6921      	ldr	r1, [r4, #16]
 800d1ae:	4650      	mov	r0, sl
 800d1b0:	f7fc fb7a 	bl	80098a8 <_free_r>
 800d1b4:	e7c7      	b.n	800d146 <__ssputs_r+0x46>
	...

0800d1b8 <_svfiprintf_r>:
 800d1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1bc:	4698      	mov	r8, r3
 800d1be:	898b      	ldrh	r3, [r1, #12]
 800d1c0:	061b      	lsls	r3, r3, #24
 800d1c2:	b09d      	sub	sp, #116	; 0x74
 800d1c4:	4607      	mov	r7, r0
 800d1c6:	460d      	mov	r5, r1
 800d1c8:	4614      	mov	r4, r2
 800d1ca:	d50e      	bpl.n	800d1ea <_svfiprintf_r+0x32>
 800d1cc:	690b      	ldr	r3, [r1, #16]
 800d1ce:	b963      	cbnz	r3, 800d1ea <_svfiprintf_r+0x32>
 800d1d0:	2140      	movs	r1, #64	; 0x40
 800d1d2:	f7fc fbd5 	bl	8009980 <_malloc_r>
 800d1d6:	6028      	str	r0, [r5, #0]
 800d1d8:	6128      	str	r0, [r5, #16]
 800d1da:	b920      	cbnz	r0, 800d1e6 <_svfiprintf_r+0x2e>
 800d1dc:	230c      	movs	r3, #12
 800d1de:	603b      	str	r3, [r7, #0]
 800d1e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e4:	e0d1      	b.n	800d38a <_svfiprintf_r+0x1d2>
 800d1e6:	2340      	movs	r3, #64	; 0x40
 800d1e8:	616b      	str	r3, [r5, #20]
 800d1ea:	2300      	movs	r3, #0
 800d1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800d1ee:	2320      	movs	r3, #32
 800d1f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1f8:	2330      	movs	r3, #48	; 0x30
 800d1fa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d3a4 <_svfiprintf_r+0x1ec>
 800d1fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d202:	f04f 0901 	mov.w	r9, #1
 800d206:	4623      	mov	r3, r4
 800d208:	469a      	mov	sl, r3
 800d20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d20e:	b10a      	cbz	r2, 800d214 <_svfiprintf_r+0x5c>
 800d210:	2a25      	cmp	r2, #37	; 0x25
 800d212:	d1f9      	bne.n	800d208 <_svfiprintf_r+0x50>
 800d214:	ebba 0b04 	subs.w	fp, sl, r4
 800d218:	d00b      	beq.n	800d232 <_svfiprintf_r+0x7a>
 800d21a:	465b      	mov	r3, fp
 800d21c:	4622      	mov	r2, r4
 800d21e:	4629      	mov	r1, r5
 800d220:	4638      	mov	r0, r7
 800d222:	f7ff ff6d 	bl	800d100 <__ssputs_r>
 800d226:	3001      	adds	r0, #1
 800d228:	f000 80aa 	beq.w	800d380 <_svfiprintf_r+0x1c8>
 800d22c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d22e:	445a      	add	r2, fp
 800d230:	9209      	str	r2, [sp, #36]	; 0x24
 800d232:	f89a 3000 	ldrb.w	r3, [sl]
 800d236:	2b00      	cmp	r3, #0
 800d238:	f000 80a2 	beq.w	800d380 <_svfiprintf_r+0x1c8>
 800d23c:	2300      	movs	r3, #0
 800d23e:	f04f 32ff 	mov.w	r2, #4294967295
 800d242:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d246:	f10a 0a01 	add.w	sl, sl, #1
 800d24a:	9304      	str	r3, [sp, #16]
 800d24c:	9307      	str	r3, [sp, #28]
 800d24e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d252:	931a      	str	r3, [sp, #104]	; 0x68
 800d254:	4654      	mov	r4, sl
 800d256:	2205      	movs	r2, #5
 800d258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d25c:	4851      	ldr	r0, [pc, #324]	; (800d3a4 <_svfiprintf_r+0x1ec>)
 800d25e:	f7f2 fff7 	bl	8000250 <memchr>
 800d262:	9a04      	ldr	r2, [sp, #16]
 800d264:	b9d8      	cbnz	r0, 800d29e <_svfiprintf_r+0xe6>
 800d266:	06d0      	lsls	r0, r2, #27
 800d268:	bf44      	itt	mi
 800d26a:	2320      	movmi	r3, #32
 800d26c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d270:	0711      	lsls	r1, r2, #28
 800d272:	bf44      	itt	mi
 800d274:	232b      	movmi	r3, #43	; 0x2b
 800d276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d27a:	f89a 3000 	ldrb.w	r3, [sl]
 800d27e:	2b2a      	cmp	r3, #42	; 0x2a
 800d280:	d015      	beq.n	800d2ae <_svfiprintf_r+0xf6>
 800d282:	9a07      	ldr	r2, [sp, #28]
 800d284:	4654      	mov	r4, sl
 800d286:	2000      	movs	r0, #0
 800d288:	f04f 0c0a 	mov.w	ip, #10
 800d28c:	4621      	mov	r1, r4
 800d28e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d292:	3b30      	subs	r3, #48	; 0x30
 800d294:	2b09      	cmp	r3, #9
 800d296:	d94e      	bls.n	800d336 <_svfiprintf_r+0x17e>
 800d298:	b1b0      	cbz	r0, 800d2c8 <_svfiprintf_r+0x110>
 800d29a:	9207      	str	r2, [sp, #28]
 800d29c:	e014      	b.n	800d2c8 <_svfiprintf_r+0x110>
 800d29e:	eba0 0308 	sub.w	r3, r0, r8
 800d2a2:	fa09 f303 	lsl.w	r3, r9, r3
 800d2a6:	4313      	orrs	r3, r2
 800d2a8:	9304      	str	r3, [sp, #16]
 800d2aa:	46a2      	mov	sl, r4
 800d2ac:	e7d2      	b.n	800d254 <_svfiprintf_r+0x9c>
 800d2ae:	9b03      	ldr	r3, [sp, #12]
 800d2b0:	1d19      	adds	r1, r3, #4
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	9103      	str	r1, [sp, #12]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bfbb      	ittet	lt
 800d2ba:	425b      	neglt	r3, r3
 800d2bc:	f042 0202 	orrlt.w	r2, r2, #2
 800d2c0:	9307      	strge	r3, [sp, #28]
 800d2c2:	9307      	strlt	r3, [sp, #28]
 800d2c4:	bfb8      	it	lt
 800d2c6:	9204      	strlt	r2, [sp, #16]
 800d2c8:	7823      	ldrb	r3, [r4, #0]
 800d2ca:	2b2e      	cmp	r3, #46	; 0x2e
 800d2cc:	d10c      	bne.n	800d2e8 <_svfiprintf_r+0x130>
 800d2ce:	7863      	ldrb	r3, [r4, #1]
 800d2d0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2d2:	d135      	bne.n	800d340 <_svfiprintf_r+0x188>
 800d2d4:	9b03      	ldr	r3, [sp, #12]
 800d2d6:	1d1a      	adds	r2, r3, #4
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	9203      	str	r2, [sp, #12]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	bfb8      	it	lt
 800d2e0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2e4:	3402      	adds	r4, #2
 800d2e6:	9305      	str	r3, [sp, #20]
 800d2e8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d3b4 <_svfiprintf_r+0x1fc>
 800d2ec:	7821      	ldrb	r1, [r4, #0]
 800d2ee:	2203      	movs	r2, #3
 800d2f0:	4650      	mov	r0, sl
 800d2f2:	f7f2 ffad 	bl	8000250 <memchr>
 800d2f6:	b140      	cbz	r0, 800d30a <_svfiprintf_r+0x152>
 800d2f8:	2340      	movs	r3, #64	; 0x40
 800d2fa:	eba0 000a 	sub.w	r0, r0, sl
 800d2fe:	fa03 f000 	lsl.w	r0, r3, r0
 800d302:	9b04      	ldr	r3, [sp, #16]
 800d304:	4303      	orrs	r3, r0
 800d306:	3401      	adds	r4, #1
 800d308:	9304      	str	r3, [sp, #16]
 800d30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d30e:	4826      	ldr	r0, [pc, #152]	; (800d3a8 <_svfiprintf_r+0x1f0>)
 800d310:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d314:	2206      	movs	r2, #6
 800d316:	f7f2 ff9b 	bl	8000250 <memchr>
 800d31a:	2800      	cmp	r0, #0
 800d31c:	d038      	beq.n	800d390 <_svfiprintf_r+0x1d8>
 800d31e:	4b23      	ldr	r3, [pc, #140]	; (800d3ac <_svfiprintf_r+0x1f4>)
 800d320:	bb1b      	cbnz	r3, 800d36a <_svfiprintf_r+0x1b2>
 800d322:	9b03      	ldr	r3, [sp, #12]
 800d324:	3307      	adds	r3, #7
 800d326:	f023 0307 	bic.w	r3, r3, #7
 800d32a:	3308      	adds	r3, #8
 800d32c:	9303      	str	r3, [sp, #12]
 800d32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d330:	4433      	add	r3, r6
 800d332:	9309      	str	r3, [sp, #36]	; 0x24
 800d334:	e767      	b.n	800d206 <_svfiprintf_r+0x4e>
 800d336:	fb0c 3202 	mla	r2, ip, r2, r3
 800d33a:	460c      	mov	r4, r1
 800d33c:	2001      	movs	r0, #1
 800d33e:	e7a5      	b.n	800d28c <_svfiprintf_r+0xd4>
 800d340:	2300      	movs	r3, #0
 800d342:	3401      	adds	r4, #1
 800d344:	9305      	str	r3, [sp, #20]
 800d346:	4619      	mov	r1, r3
 800d348:	f04f 0c0a 	mov.w	ip, #10
 800d34c:	4620      	mov	r0, r4
 800d34e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d352:	3a30      	subs	r2, #48	; 0x30
 800d354:	2a09      	cmp	r2, #9
 800d356:	d903      	bls.n	800d360 <_svfiprintf_r+0x1a8>
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d0c5      	beq.n	800d2e8 <_svfiprintf_r+0x130>
 800d35c:	9105      	str	r1, [sp, #20]
 800d35e:	e7c3      	b.n	800d2e8 <_svfiprintf_r+0x130>
 800d360:	fb0c 2101 	mla	r1, ip, r1, r2
 800d364:	4604      	mov	r4, r0
 800d366:	2301      	movs	r3, #1
 800d368:	e7f0      	b.n	800d34c <_svfiprintf_r+0x194>
 800d36a:	ab03      	add	r3, sp, #12
 800d36c:	9300      	str	r3, [sp, #0]
 800d36e:	462a      	mov	r2, r5
 800d370:	4b0f      	ldr	r3, [pc, #60]	; (800d3b0 <_svfiprintf_r+0x1f8>)
 800d372:	a904      	add	r1, sp, #16
 800d374:	4638      	mov	r0, r7
 800d376:	f7fc fc07 	bl	8009b88 <_printf_float>
 800d37a:	1c42      	adds	r2, r0, #1
 800d37c:	4606      	mov	r6, r0
 800d37e:	d1d6      	bne.n	800d32e <_svfiprintf_r+0x176>
 800d380:	89ab      	ldrh	r3, [r5, #12]
 800d382:	065b      	lsls	r3, r3, #25
 800d384:	f53f af2c 	bmi.w	800d1e0 <_svfiprintf_r+0x28>
 800d388:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d38a:	b01d      	add	sp, #116	; 0x74
 800d38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d390:	ab03      	add	r3, sp, #12
 800d392:	9300      	str	r3, [sp, #0]
 800d394:	462a      	mov	r2, r5
 800d396:	4b06      	ldr	r3, [pc, #24]	; (800d3b0 <_svfiprintf_r+0x1f8>)
 800d398:	a904      	add	r1, sp, #16
 800d39a:	4638      	mov	r0, r7
 800d39c:	f7fc fe80 	bl	800a0a0 <_printf_i>
 800d3a0:	e7eb      	b.n	800d37a <_svfiprintf_r+0x1c2>
 800d3a2:	bf00      	nop
 800d3a4:	0801261c 	.word	0x0801261c
 800d3a8:	08012626 	.word	0x08012626
 800d3ac:	08009b89 	.word	0x08009b89
 800d3b0:	0800d101 	.word	0x0800d101
 800d3b4:	08012622 	.word	0x08012622

0800d3b8 <nan>:
 800d3b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d3c0 <nan+0x8>
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	00000000 	.word	0x00000000
 800d3c4:	7ff80000 	.word	0x7ff80000

0800d3c8 <strncmp>:
 800d3c8:	b510      	push	{r4, lr}
 800d3ca:	b17a      	cbz	r2, 800d3ec <strncmp+0x24>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	3901      	subs	r1, #1
 800d3d0:	1884      	adds	r4, r0, r2
 800d3d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d3d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d3da:	4290      	cmp	r0, r2
 800d3dc:	d101      	bne.n	800d3e2 <strncmp+0x1a>
 800d3de:	42a3      	cmp	r3, r4
 800d3e0:	d101      	bne.n	800d3e6 <strncmp+0x1e>
 800d3e2:	1a80      	subs	r0, r0, r2
 800d3e4:	bd10      	pop	{r4, pc}
 800d3e6:	2800      	cmp	r0, #0
 800d3e8:	d1f3      	bne.n	800d3d2 <strncmp+0xa>
 800d3ea:	e7fa      	b.n	800d3e2 <strncmp+0x1a>
 800d3ec:	4610      	mov	r0, r2
 800d3ee:	e7f9      	b.n	800d3e4 <strncmp+0x1c>

0800d3f0 <__ascii_wctomb>:
 800d3f0:	b149      	cbz	r1, 800d406 <__ascii_wctomb+0x16>
 800d3f2:	2aff      	cmp	r2, #255	; 0xff
 800d3f4:	bf85      	ittet	hi
 800d3f6:	238a      	movhi	r3, #138	; 0x8a
 800d3f8:	6003      	strhi	r3, [r0, #0]
 800d3fa:	700a      	strbls	r2, [r1, #0]
 800d3fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800d400:	bf98      	it	ls
 800d402:	2001      	movls	r0, #1
 800d404:	4770      	bx	lr
 800d406:	4608      	mov	r0, r1
 800d408:	4770      	bx	lr
	...

0800d40c <__assert_func>:
 800d40c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d40e:	4614      	mov	r4, r2
 800d410:	461a      	mov	r2, r3
 800d412:	4b09      	ldr	r3, [pc, #36]	; (800d438 <__assert_func+0x2c>)
 800d414:	681b      	ldr	r3, [r3, #0]
 800d416:	4605      	mov	r5, r0
 800d418:	68d8      	ldr	r0, [r3, #12]
 800d41a:	b14c      	cbz	r4, 800d430 <__assert_func+0x24>
 800d41c:	4b07      	ldr	r3, [pc, #28]	; (800d43c <__assert_func+0x30>)
 800d41e:	9100      	str	r1, [sp, #0]
 800d420:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d424:	4906      	ldr	r1, [pc, #24]	; (800d440 <__assert_func+0x34>)
 800d426:	462b      	mov	r3, r5
 800d428:	f000 f80e 	bl	800d448 <fiprintf>
 800d42c:	f000 fa84 	bl	800d938 <abort>
 800d430:	4b04      	ldr	r3, [pc, #16]	; (800d444 <__assert_func+0x38>)
 800d432:	461c      	mov	r4, r3
 800d434:	e7f3      	b.n	800d41e <__assert_func+0x12>
 800d436:	bf00      	nop
 800d438:	2000000c 	.word	0x2000000c
 800d43c:	0801262d 	.word	0x0801262d
 800d440:	0801263a 	.word	0x0801263a
 800d444:	08012668 	.word	0x08012668

0800d448 <fiprintf>:
 800d448:	b40e      	push	{r1, r2, r3}
 800d44a:	b503      	push	{r0, r1, lr}
 800d44c:	4601      	mov	r1, r0
 800d44e:	ab03      	add	r3, sp, #12
 800d450:	4805      	ldr	r0, [pc, #20]	; (800d468 <fiprintf+0x20>)
 800d452:	f853 2b04 	ldr.w	r2, [r3], #4
 800d456:	6800      	ldr	r0, [r0, #0]
 800d458:	9301      	str	r3, [sp, #4]
 800d45a:	f000 f87d 	bl	800d558 <_vfiprintf_r>
 800d45e:	b002      	add	sp, #8
 800d460:	f85d eb04 	ldr.w	lr, [sp], #4
 800d464:	b003      	add	sp, #12
 800d466:	4770      	bx	lr
 800d468:	2000000c 	.word	0x2000000c

0800d46c <__retarget_lock_init_recursive>:
 800d46c:	4770      	bx	lr

0800d46e <__retarget_lock_acquire_recursive>:
 800d46e:	4770      	bx	lr

0800d470 <__retarget_lock_release_recursive>:
 800d470:	4770      	bx	lr

0800d472 <memmove>:
 800d472:	4288      	cmp	r0, r1
 800d474:	b510      	push	{r4, lr}
 800d476:	eb01 0402 	add.w	r4, r1, r2
 800d47a:	d902      	bls.n	800d482 <memmove+0x10>
 800d47c:	4284      	cmp	r4, r0
 800d47e:	4623      	mov	r3, r4
 800d480:	d807      	bhi.n	800d492 <memmove+0x20>
 800d482:	1e43      	subs	r3, r0, #1
 800d484:	42a1      	cmp	r1, r4
 800d486:	d008      	beq.n	800d49a <memmove+0x28>
 800d488:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d48c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d490:	e7f8      	b.n	800d484 <memmove+0x12>
 800d492:	4402      	add	r2, r0
 800d494:	4601      	mov	r1, r0
 800d496:	428a      	cmp	r2, r1
 800d498:	d100      	bne.n	800d49c <memmove+0x2a>
 800d49a:	bd10      	pop	{r4, pc}
 800d49c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d4a0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d4a4:	e7f7      	b.n	800d496 <memmove+0x24>

0800d4a6 <_realloc_r>:
 800d4a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4aa:	4680      	mov	r8, r0
 800d4ac:	4614      	mov	r4, r2
 800d4ae:	460e      	mov	r6, r1
 800d4b0:	b921      	cbnz	r1, 800d4bc <_realloc_r+0x16>
 800d4b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4b6:	4611      	mov	r1, r2
 800d4b8:	f7fc ba62 	b.w	8009980 <_malloc_r>
 800d4bc:	b92a      	cbnz	r2, 800d4ca <_realloc_r+0x24>
 800d4be:	f7fc f9f3 	bl	80098a8 <_free_r>
 800d4c2:	4625      	mov	r5, r4
 800d4c4:	4628      	mov	r0, r5
 800d4c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4ca:	f000 fc59 	bl	800dd80 <_malloc_usable_size_r>
 800d4ce:	4284      	cmp	r4, r0
 800d4d0:	4607      	mov	r7, r0
 800d4d2:	d802      	bhi.n	800d4da <_realloc_r+0x34>
 800d4d4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4d8:	d812      	bhi.n	800d500 <_realloc_r+0x5a>
 800d4da:	4621      	mov	r1, r4
 800d4dc:	4640      	mov	r0, r8
 800d4de:	f7fc fa4f 	bl	8009980 <_malloc_r>
 800d4e2:	4605      	mov	r5, r0
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d0ed      	beq.n	800d4c4 <_realloc_r+0x1e>
 800d4e8:	42bc      	cmp	r4, r7
 800d4ea:	4622      	mov	r2, r4
 800d4ec:	4631      	mov	r1, r6
 800d4ee:	bf28      	it	cs
 800d4f0:	463a      	movcs	r2, r7
 800d4f2:	f7fc f9c3 	bl	800987c <memcpy>
 800d4f6:	4631      	mov	r1, r6
 800d4f8:	4640      	mov	r0, r8
 800d4fa:	f7fc f9d5 	bl	80098a8 <_free_r>
 800d4fe:	e7e1      	b.n	800d4c4 <_realloc_r+0x1e>
 800d500:	4635      	mov	r5, r6
 800d502:	e7df      	b.n	800d4c4 <_realloc_r+0x1e>

0800d504 <__sfputc_r>:
 800d504:	6893      	ldr	r3, [r2, #8]
 800d506:	3b01      	subs	r3, #1
 800d508:	2b00      	cmp	r3, #0
 800d50a:	b410      	push	{r4}
 800d50c:	6093      	str	r3, [r2, #8]
 800d50e:	da08      	bge.n	800d522 <__sfputc_r+0x1e>
 800d510:	6994      	ldr	r4, [r2, #24]
 800d512:	42a3      	cmp	r3, r4
 800d514:	db01      	blt.n	800d51a <__sfputc_r+0x16>
 800d516:	290a      	cmp	r1, #10
 800d518:	d103      	bne.n	800d522 <__sfputc_r+0x1e>
 800d51a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d51e:	f000 b94b 	b.w	800d7b8 <__swbuf_r>
 800d522:	6813      	ldr	r3, [r2, #0]
 800d524:	1c58      	adds	r0, r3, #1
 800d526:	6010      	str	r0, [r2, #0]
 800d528:	7019      	strb	r1, [r3, #0]
 800d52a:	4608      	mov	r0, r1
 800d52c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d530:	4770      	bx	lr

0800d532 <__sfputs_r>:
 800d532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d534:	4606      	mov	r6, r0
 800d536:	460f      	mov	r7, r1
 800d538:	4614      	mov	r4, r2
 800d53a:	18d5      	adds	r5, r2, r3
 800d53c:	42ac      	cmp	r4, r5
 800d53e:	d101      	bne.n	800d544 <__sfputs_r+0x12>
 800d540:	2000      	movs	r0, #0
 800d542:	e007      	b.n	800d554 <__sfputs_r+0x22>
 800d544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d548:	463a      	mov	r2, r7
 800d54a:	4630      	mov	r0, r6
 800d54c:	f7ff ffda 	bl	800d504 <__sfputc_r>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d1f3      	bne.n	800d53c <__sfputs_r+0xa>
 800d554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d558 <_vfiprintf_r>:
 800d558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d55c:	460d      	mov	r5, r1
 800d55e:	b09d      	sub	sp, #116	; 0x74
 800d560:	4614      	mov	r4, r2
 800d562:	4698      	mov	r8, r3
 800d564:	4606      	mov	r6, r0
 800d566:	b118      	cbz	r0, 800d570 <_vfiprintf_r+0x18>
 800d568:	6983      	ldr	r3, [r0, #24]
 800d56a:	b90b      	cbnz	r3, 800d570 <_vfiprintf_r+0x18>
 800d56c:	f000 fb06 	bl	800db7c <__sinit>
 800d570:	4b89      	ldr	r3, [pc, #548]	; (800d798 <_vfiprintf_r+0x240>)
 800d572:	429d      	cmp	r5, r3
 800d574:	d11b      	bne.n	800d5ae <_vfiprintf_r+0x56>
 800d576:	6875      	ldr	r5, [r6, #4]
 800d578:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d57a:	07d9      	lsls	r1, r3, #31
 800d57c:	d405      	bmi.n	800d58a <_vfiprintf_r+0x32>
 800d57e:	89ab      	ldrh	r3, [r5, #12]
 800d580:	059a      	lsls	r2, r3, #22
 800d582:	d402      	bmi.n	800d58a <_vfiprintf_r+0x32>
 800d584:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d586:	f7ff ff72 	bl	800d46e <__retarget_lock_acquire_recursive>
 800d58a:	89ab      	ldrh	r3, [r5, #12]
 800d58c:	071b      	lsls	r3, r3, #28
 800d58e:	d501      	bpl.n	800d594 <_vfiprintf_r+0x3c>
 800d590:	692b      	ldr	r3, [r5, #16]
 800d592:	b9eb      	cbnz	r3, 800d5d0 <_vfiprintf_r+0x78>
 800d594:	4629      	mov	r1, r5
 800d596:	4630      	mov	r0, r6
 800d598:	f000 f960 	bl	800d85c <__swsetup_r>
 800d59c:	b1c0      	cbz	r0, 800d5d0 <_vfiprintf_r+0x78>
 800d59e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5a0:	07dc      	lsls	r4, r3, #31
 800d5a2:	d50e      	bpl.n	800d5c2 <_vfiprintf_r+0x6a>
 800d5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d5a8:	b01d      	add	sp, #116	; 0x74
 800d5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5ae:	4b7b      	ldr	r3, [pc, #492]	; (800d79c <_vfiprintf_r+0x244>)
 800d5b0:	429d      	cmp	r5, r3
 800d5b2:	d101      	bne.n	800d5b8 <_vfiprintf_r+0x60>
 800d5b4:	68b5      	ldr	r5, [r6, #8]
 800d5b6:	e7df      	b.n	800d578 <_vfiprintf_r+0x20>
 800d5b8:	4b79      	ldr	r3, [pc, #484]	; (800d7a0 <_vfiprintf_r+0x248>)
 800d5ba:	429d      	cmp	r5, r3
 800d5bc:	bf08      	it	eq
 800d5be:	68f5      	ldreq	r5, [r6, #12]
 800d5c0:	e7da      	b.n	800d578 <_vfiprintf_r+0x20>
 800d5c2:	89ab      	ldrh	r3, [r5, #12]
 800d5c4:	0598      	lsls	r0, r3, #22
 800d5c6:	d4ed      	bmi.n	800d5a4 <_vfiprintf_r+0x4c>
 800d5c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5ca:	f7ff ff51 	bl	800d470 <__retarget_lock_release_recursive>
 800d5ce:	e7e9      	b.n	800d5a4 <_vfiprintf_r+0x4c>
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800d5d4:	2320      	movs	r3, #32
 800d5d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d5da:	f8cd 800c 	str.w	r8, [sp, #12]
 800d5de:	2330      	movs	r3, #48	; 0x30
 800d5e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d7a4 <_vfiprintf_r+0x24c>
 800d5e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d5e8:	f04f 0901 	mov.w	r9, #1
 800d5ec:	4623      	mov	r3, r4
 800d5ee:	469a      	mov	sl, r3
 800d5f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5f4:	b10a      	cbz	r2, 800d5fa <_vfiprintf_r+0xa2>
 800d5f6:	2a25      	cmp	r2, #37	; 0x25
 800d5f8:	d1f9      	bne.n	800d5ee <_vfiprintf_r+0x96>
 800d5fa:	ebba 0b04 	subs.w	fp, sl, r4
 800d5fe:	d00b      	beq.n	800d618 <_vfiprintf_r+0xc0>
 800d600:	465b      	mov	r3, fp
 800d602:	4622      	mov	r2, r4
 800d604:	4629      	mov	r1, r5
 800d606:	4630      	mov	r0, r6
 800d608:	f7ff ff93 	bl	800d532 <__sfputs_r>
 800d60c:	3001      	adds	r0, #1
 800d60e:	f000 80aa 	beq.w	800d766 <_vfiprintf_r+0x20e>
 800d612:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d614:	445a      	add	r2, fp
 800d616:	9209      	str	r2, [sp, #36]	; 0x24
 800d618:	f89a 3000 	ldrb.w	r3, [sl]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f000 80a2 	beq.w	800d766 <_vfiprintf_r+0x20e>
 800d622:	2300      	movs	r3, #0
 800d624:	f04f 32ff 	mov.w	r2, #4294967295
 800d628:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d62c:	f10a 0a01 	add.w	sl, sl, #1
 800d630:	9304      	str	r3, [sp, #16]
 800d632:	9307      	str	r3, [sp, #28]
 800d634:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d638:	931a      	str	r3, [sp, #104]	; 0x68
 800d63a:	4654      	mov	r4, sl
 800d63c:	2205      	movs	r2, #5
 800d63e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d642:	4858      	ldr	r0, [pc, #352]	; (800d7a4 <_vfiprintf_r+0x24c>)
 800d644:	f7f2 fe04 	bl	8000250 <memchr>
 800d648:	9a04      	ldr	r2, [sp, #16]
 800d64a:	b9d8      	cbnz	r0, 800d684 <_vfiprintf_r+0x12c>
 800d64c:	06d1      	lsls	r1, r2, #27
 800d64e:	bf44      	itt	mi
 800d650:	2320      	movmi	r3, #32
 800d652:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d656:	0713      	lsls	r3, r2, #28
 800d658:	bf44      	itt	mi
 800d65a:	232b      	movmi	r3, #43	; 0x2b
 800d65c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d660:	f89a 3000 	ldrb.w	r3, [sl]
 800d664:	2b2a      	cmp	r3, #42	; 0x2a
 800d666:	d015      	beq.n	800d694 <_vfiprintf_r+0x13c>
 800d668:	9a07      	ldr	r2, [sp, #28]
 800d66a:	4654      	mov	r4, sl
 800d66c:	2000      	movs	r0, #0
 800d66e:	f04f 0c0a 	mov.w	ip, #10
 800d672:	4621      	mov	r1, r4
 800d674:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d678:	3b30      	subs	r3, #48	; 0x30
 800d67a:	2b09      	cmp	r3, #9
 800d67c:	d94e      	bls.n	800d71c <_vfiprintf_r+0x1c4>
 800d67e:	b1b0      	cbz	r0, 800d6ae <_vfiprintf_r+0x156>
 800d680:	9207      	str	r2, [sp, #28]
 800d682:	e014      	b.n	800d6ae <_vfiprintf_r+0x156>
 800d684:	eba0 0308 	sub.w	r3, r0, r8
 800d688:	fa09 f303 	lsl.w	r3, r9, r3
 800d68c:	4313      	orrs	r3, r2
 800d68e:	9304      	str	r3, [sp, #16]
 800d690:	46a2      	mov	sl, r4
 800d692:	e7d2      	b.n	800d63a <_vfiprintf_r+0xe2>
 800d694:	9b03      	ldr	r3, [sp, #12]
 800d696:	1d19      	adds	r1, r3, #4
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	9103      	str	r1, [sp, #12]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	bfbb      	ittet	lt
 800d6a0:	425b      	neglt	r3, r3
 800d6a2:	f042 0202 	orrlt.w	r2, r2, #2
 800d6a6:	9307      	strge	r3, [sp, #28]
 800d6a8:	9307      	strlt	r3, [sp, #28]
 800d6aa:	bfb8      	it	lt
 800d6ac:	9204      	strlt	r2, [sp, #16]
 800d6ae:	7823      	ldrb	r3, [r4, #0]
 800d6b0:	2b2e      	cmp	r3, #46	; 0x2e
 800d6b2:	d10c      	bne.n	800d6ce <_vfiprintf_r+0x176>
 800d6b4:	7863      	ldrb	r3, [r4, #1]
 800d6b6:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b8:	d135      	bne.n	800d726 <_vfiprintf_r+0x1ce>
 800d6ba:	9b03      	ldr	r3, [sp, #12]
 800d6bc:	1d1a      	adds	r2, r3, #4
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	9203      	str	r2, [sp, #12]
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	bfb8      	it	lt
 800d6c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800d6ca:	3402      	adds	r4, #2
 800d6cc:	9305      	str	r3, [sp, #20]
 800d6ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d7b4 <_vfiprintf_r+0x25c>
 800d6d2:	7821      	ldrb	r1, [r4, #0]
 800d6d4:	2203      	movs	r2, #3
 800d6d6:	4650      	mov	r0, sl
 800d6d8:	f7f2 fdba 	bl	8000250 <memchr>
 800d6dc:	b140      	cbz	r0, 800d6f0 <_vfiprintf_r+0x198>
 800d6de:	2340      	movs	r3, #64	; 0x40
 800d6e0:	eba0 000a 	sub.w	r0, r0, sl
 800d6e4:	fa03 f000 	lsl.w	r0, r3, r0
 800d6e8:	9b04      	ldr	r3, [sp, #16]
 800d6ea:	4303      	orrs	r3, r0
 800d6ec:	3401      	adds	r4, #1
 800d6ee:	9304      	str	r3, [sp, #16]
 800d6f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f4:	482c      	ldr	r0, [pc, #176]	; (800d7a8 <_vfiprintf_r+0x250>)
 800d6f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d6fa:	2206      	movs	r2, #6
 800d6fc:	f7f2 fda8 	bl	8000250 <memchr>
 800d700:	2800      	cmp	r0, #0
 800d702:	d03f      	beq.n	800d784 <_vfiprintf_r+0x22c>
 800d704:	4b29      	ldr	r3, [pc, #164]	; (800d7ac <_vfiprintf_r+0x254>)
 800d706:	bb1b      	cbnz	r3, 800d750 <_vfiprintf_r+0x1f8>
 800d708:	9b03      	ldr	r3, [sp, #12]
 800d70a:	3307      	adds	r3, #7
 800d70c:	f023 0307 	bic.w	r3, r3, #7
 800d710:	3308      	adds	r3, #8
 800d712:	9303      	str	r3, [sp, #12]
 800d714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d716:	443b      	add	r3, r7
 800d718:	9309      	str	r3, [sp, #36]	; 0x24
 800d71a:	e767      	b.n	800d5ec <_vfiprintf_r+0x94>
 800d71c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d720:	460c      	mov	r4, r1
 800d722:	2001      	movs	r0, #1
 800d724:	e7a5      	b.n	800d672 <_vfiprintf_r+0x11a>
 800d726:	2300      	movs	r3, #0
 800d728:	3401      	adds	r4, #1
 800d72a:	9305      	str	r3, [sp, #20]
 800d72c:	4619      	mov	r1, r3
 800d72e:	f04f 0c0a 	mov.w	ip, #10
 800d732:	4620      	mov	r0, r4
 800d734:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d738:	3a30      	subs	r2, #48	; 0x30
 800d73a:	2a09      	cmp	r2, #9
 800d73c:	d903      	bls.n	800d746 <_vfiprintf_r+0x1ee>
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d0c5      	beq.n	800d6ce <_vfiprintf_r+0x176>
 800d742:	9105      	str	r1, [sp, #20]
 800d744:	e7c3      	b.n	800d6ce <_vfiprintf_r+0x176>
 800d746:	fb0c 2101 	mla	r1, ip, r1, r2
 800d74a:	4604      	mov	r4, r0
 800d74c:	2301      	movs	r3, #1
 800d74e:	e7f0      	b.n	800d732 <_vfiprintf_r+0x1da>
 800d750:	ab03      	add	r3, sp, #12
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	462a      	mov	r2, r5
 800d756:	4b16      	ldr	r3, [pc, #88]	; (800d7b0 <_vfiprintf_r+0x258>)
 800d758:	a904      	add	r1, sp, #16
 800d75a:	4630      	mov	r0, r6
 800d75c:	f7fc fa14 	bl	8009b88 <_printf_float>
 800d760:	4607      	mov	r7, r0
 800d762:	1c78      	adds	r0, r7, #1
 800d764:	d1d6      	bne.n	800d714 <_vfiprintf_r+0x1bc>
 800d766:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d768:	07d9      	lsls	r1, r3, #31
 800d76a:	d405      	bmi.n	800d778 <_vfiprintf_r+0x220>
 800d76c:	89ab      	ldrh	r3, [r5, #12]
 800d76e:	059a      	lsls	r2, r3, #22
 800d770:	d402      	bmi.n	800d778 <_vfiprintf_r+0x220>
 800d772:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d774:	f7ff fe7c 	bl	800d470 <__retarget_lock_release_recursive>
 800d778:	89ab      	ldrh	r3, [r5, #12]
 800d77a:	065b      	lsls	r3, r3, #25
 800d77c:	f53f af12 	bmi.w	800d5a4 <_vfiprintf_r+0x4c>
 800d780:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d782:	e711      	b.n	800d5a8 <_vfiprintf_r+0x50>
 800d784:	ab03      	add	r3, sp, #12
 800d786:	9300      	str	r3, [sp, #0]
 800d788:	462a      	mov	r2, r5
 800d78a:	4b09      	ldr	r3, [pc, #36]	; (800d7b0 <_vfiprintf_r+0x258>)
 800d78c:	a904      	add	r1, sp, #16
 800d78e:	4630      	mov	r0, r6
 800d790:	f7fc fc86 	bl	800a0a0 <_printf_i>
 800d794:	e7e4      	b.n	800d760 <_vfiprintf_r+0x208>
 800d796:	bf00      	nop
 800d798:	0801268c 	.word	0x0801268c
 800d79c:	080126ac 	.word	0x080126ac
 800d7a0:	0801266c 	.word	0x0801266c
 800d7a4:	0801261c 	.word	0x0801261c
 800d7a8:	08012626 	.word	0x08012626
 800d7ac:	08009b89 	.word	0x08009b89
 800d7b0:	0800d533 	.word	0x0800d533
 800d7b4:	08012622 	.word	0x08012622

0800d7b8 <__swbuf_r>:
 800d7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ba:	460e      	mov	r6, r1
 800d7bc:	4614      	mov	r4, r2
 800d7be:	4605      	mov	r5, r0
 800d7c0:	b118      	cbz	r0, 800d7ca <__swbuf_r+0x12>
 800d7c2:	6983      	ldr	r3, [r0, #24]
 800d7c4:	b90b      	cbnz	r3, 800d7ca <__swbuf_r+0x12>
 800d7c6:	f000 f9d9 	bl	800db7c <__sinit>
 800d7ca:	4b21      	ldr	r3, [pc, #132]	; (800d850 <__swbuf_r+0x98>)
 800d7cc:	429c      	cmp	r4, r3
 800d7ce:	d12b      	bne.n	800d828 <__swbuf_r+0x70>
 800d7d0:	686c      	ldr	r4, [r5, #4]
 800d7d2:	69a3      	ldr	r3, [r4, #24]
 800d7d4:	60a3      	str	r3, [r4, #8]
 800d7d6:	89a3      	ldrh	r3, [r4, #12]
 800d7d8:	071a      	lsls	r2, r3, #28
 800d7da:	d52f      	bpl.n	800d83c <__swbuf_r+0x84>
 800d7dc:	6923      	ldr	r3, [r4, #16]
 800d7de:	b36b      	cbz	r3, 800d83c <__swbuf_r+0x84>
 800d7e0:	6923      	ldr	r3, [r4, #16]
 800d7e2:	6820      	ldr	r0, [r4, #0]
 800d7e4:	1ac0      	subs	r0, r0, r3
 800d7e6:	6963      	ldr	r3, [r4, #20]
 800d7e8:	b2f6      	uxtb	r6, r6
 800d7ea:	4283      	cmp	r3, r0
 800d7ec:	4637      	mov	r7, r6
 800d7ee:	dc04      	bgt.n	800d7fa <__swbuf_r+0x42>
 800d7f0:	4621      	mov	r1, r4
 800d7f2:	4628      	mov	r0, r5
 800d7f4:	f000 f92e 	bl	800da54 <_fflush_r>
 800d7f8:	bb30      	cbnz	r0, 800d848 <__swbuf_r+0x90>
 800d7fa:	68a3      	ldr	r3, [r4, #8]
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	60a3      	str	r3, [r4, #8]
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	1c5a      	adds	r2, r3, #1
 800d804:	6022      	str	r2, [r4, #0]
 800d806:	701e      	strb	r6, [r3, #0]
 800d808:	6963      	ldr	r3, [r4, #20]
 800d80a:	3001      	adds	r0, #1
 800d80c:	4283      	cmp	r3, r0
 800d80e:	d004      	beq.n	800d81a <__swbuf_r+0x62>
 800d810:	89a3      	ldrh	r3, [r4, #12]
 800d812:	07db      	lsls	r3, r3, #31
 800d814:	d506      	bpl.n	800d824 <__swbuf_r+0x6c>
 800d816:	2e0a      	cmp	r6, #10
 800d818:	d104      	bne.n	800d824 <__swbuf_r+0x6c>
 800d81a:	4621      	mov	r1, r4
 800d81c:	4628      	mov	r0, r5
 800d81e:	f000 f919 	bl	800da54 <_fflush_r>
 800d822:	b988      	cbnz	r0, 800d848 <__swbuf_r+0x90>
 800d824:	4638      	mov	r0, r7
 800d826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d828:	4b0a      	ldr	r3, [pc, #40]	; (800d854 <__swbuf_r+0x9c>)
 800d82a:	429c      	cmp	r4, r3
 800d82c:	d101      	bne.n	800d832 <__swbuf_r+0x7a>
 800d82e:	68ac      	ldr	r4, [r5, #8]
 800d830:	e7cf      	b.n	800d7d2 <__swbuf_r+0x1a>
 800d832:	4b09      	ldr	r3, [pc, #36]	; (800d858 <__swbuf_r+0xa0>)
 800d834:	429c      	cmp	r4, r3
 800d836:	bf08      	it	eq
 800d838:	68ec      	ldreq	r4, [r5, #12]
 800d83a:	e7ca      	b.n	800d7d2 <__swbuf_r+0x1a>
 800d83c:	4621      	mov	r1, r4
 800d83e:	4628      	mov	r0, r5
 800d840:	f000 f80c 	bl	800d85c <__swsetup_r>
 800d844:	2800      	cmp	r0, #0
 800d846:	d0cb      	beq.n	800d7e0 <__swbuf_r+0x28>
 800d848:	f04f 37ff 	mov.w	r7, #4294967295
 800d84c:	e7ea      	b.n	800d824 <__swbuf_r+0x6c>
 800d84e:	bf00      	nop
 800d850:	0801268c 	.word	0x0801268c
 800d854:	080126ac 	.word	0x080126ac
 800d858:	0801266c 	.word	0x0801266c

0800d85c <__swsetup_r>:
 800d85c:	4b32      	ldr	r3, [pc, #200]	; (800d928 <__swsetup_r+0xcc>)
 800d85e:	b570      	push	{r4, r5, r6, lr}
 800d860:	681d      	ldr	r5, [r3, #0]
 800d862:	4606      	mov	r6, r0
 800d864:	460c      	mov	r4, r1
 800d866:	b125      	cbz	r5, 800d872 <__swsetup_r+0x16>
 800d868:	69ab      	ldr	r3, [r5, #24]
 800d86a:	b913      	cbnz	r3, 800d872 <__swsetup_r+0x16>
 800d86c:	4628      	mov	r0, r5
 800d86e:	f000 f985 	bl	800db7c <__sinit>
 800d872:	4b2e      	ldr	r3, [pc, #184]	; (800d92c <__swsetup_r+0xd0>)
 800d874:	429c      	cmp	r4, r3
 800d876:	d10f      	bne.n	800d898 <__swsetup_r+0x3c>
 800d878:	686c      	ldr	r4, [r5, #4]
 800d87a:	89a3      	ldrh	r3, [r4, #12]
 800d87c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d880:	0719      	lsls	r1, r3, #28
 800d882:	d42c      	bmi.n	800d8de <__swsetup_r+0x82>
 800d884:	06dd      	lsls	r5, r3, #27
 800d886:	d411      	bmi.n	800d8ac <__swsetup_r+0x50>
 800d888:	2309      	movs	r3, #9
 800d88a:	6033      	str	r3, [r6, #0]
 800d88c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d890:	81a3      	strh	r3, [r4, #12]
 800d892:	f04f 30ff 	mov.w	r0, #4294967295
 800d896:	e03e      	b.n	800d916 <__swsetup_r+0xba>
 800d898:	4b25      	ldr	r3, [pc, #148]	; (800d930 <__swsetup_r+0xd4>)
 800d89a:	429c      	cmp	r4, r3
 800d89c:	d101      	bne.n	800d8a2 <__swsetup_r+0x46>
 800d89e:	68ac      	ldr	r4, [r5, #8]
 800d8a0:	e7eb      	b.n	800d87a <__swsetup_r+0x1e>
 800d8a2:	4b24      	ldr	r3, [pc, #144]	; (800d934 <__swsetup_r+0xd8>)
 800d8a4:	429c      	cmp	r4, r3
 800d8a6:	bf08      	it	eq
 800d8a8:	68ec      	ldreq	r4, [r5, #12]
 800d8aa:	e7e6      	b.n	800d87a <__swsetup_r+0x1e>
 800d8ac:	0758      	lsls	r0, r3, #29
 800d8ae:	d512      	bpl.n	800d8d6 <__swsetup_r+0x7a>
 800d8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8b2:	b141      	cbz	r1, 800d8c6 <__swsetup_r+0x6a>
 800d8b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d8b8:	4299      	cmp	r1, r3
 800d8ba:	d002      	beq.n	800d8c2 <__swsetup_r+0x66>
 800d8bc:	4630      	mov	r0, r6
 800d8be:	f7fb fff3 	bl	80098a8 <_free_r>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	6363      	str	r3, [r4, #52]	; 0x34
 800d8c6:	89a3      	ldrh	r3, [r4, #12]
 800d8c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d8cc:	81a3      	strh	r3, [r4, #12]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	6063      	str	r3, [r4, #4]
 800d8d2:	6923      	ldr	r3, [r4, #16]
 800d8d4:	6023      	str	r3, [r4, #0]
 800d8d6:	89a3      	ldrh	r3, [r4, #12]
 800d8d8:	f043 0308 	orr.w	r3, r3, #8
 800d8dc:	81a3      	strh	r3, [r4, #12]
 800d8de:	6923      	ldr	r3, [r4, #16]
 800d8e0:	b94b      	cbnz	r3, 800d8f6 <__swsetup_r+0x9a>
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d8e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d8ec:	d003      	beq.n	800d8f6 <__swsetup_r+0x9a>
 800d8ee:	4621      	mov	r1, r4
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	f000 fa05 	bl	800dd00 <__smakebuf_r>
 800d8f6:	89a0      	ldrh	r0, [r4, #12]
 800d8f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d8fc:	f010 0301 	ands.w	r3, r0, #1
 800d900:	d00a      	beq.n	800d918 <__swsetup_r+0xbc>
 800d902:	2300      	movs	r3, #0
 800d904:	60a3      	str	r3, [r4, #8]
 800d906:	6963      	ldr	r3, [r4, #20]
 800d908:	425b      	negs	r3, r3
 800d90a:	61a3      	str	r3, [r4, #24]
 800d90c:	6923      	ldr	r3, [r4, #16]
 800d90e:	b943      	cbnz	r3, 800d922 <__swsetup_r+0xc6>
 800d910:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d914:	d1ba      	bne.n	800d88c <__swsetup_r+0x30>
 800d916:	bd70      	pop	{r4, r5, r6, pc}
 800d918:	0781      	lsls	r1, r0, #30
 800d91a:	bf58      	it	pl
 800d91c:	6963      	ldrpl	r3, [r4, #20]
 800d91e:	60a3      	str	r3, [r4, #8]
 800d920:	e7f4      	b.n	800d90c <__swsetup_r+0xb0>
 800d922:	2000      	movs	r0, #0
 800d924:	e7f7      	b.n	800d916 <__swsetup_r+0xba>
 800d926:	bf00      	nop
 800d928:	2000000c 	.word	0x2000000c
 800d92c:	0801268c 	.word	0x0801268c
 800d930:	080126ac 	.word	0x080126ac
 800d934:	0801266c 	.word	0x0801266c

0800d938 <abort>:
 800d938:	b508      	push	{r3, lr}
 800d93a:	2006      	movs	r0, #6
 800d93c:	f000 fa50 	bl	800dde0 <raise>
 800d940:	2001      	movs	r0, #1
 800d942:	f7f3 fb63 	bl	800100c <_exit>
	...

0800d948 <__sflush_r>:
 800d948:	898a      	ldrh	r2, [r1, #12]
 800d94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d94e:	4605      	mov	r5, r0
 800d950:	0710      	lsls	r0, r2, #28
 800d952:	460c      	mov	r4, r1
 800d954:	d458      	bmi.n	800da08 <__sflush_r+0xc0>
 800d956:	684b      	ldr	r3, [r1, #4]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	dc05      	bgt.n	800d968 <__sflush_r+0x20>
 800d95c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d95e:	2b00      	cmp	r3, #0
 800d960:	dc02      	bgt.n	800d968 <__sflush_r+0x20>
 800d962:	2000      	movs	r0, #0
 800d964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d968:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d96a:	2e00      	cmp	r6, #0
 800d96c:	d0f9      	beq.n	800d962 <__sflush_r+0x1a>
 800d96e:	2300      	movs	r3, #0
 800d970:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d974:	682f      	ldr	r7, [r5, #0]
 800d976:	602b      	str	r3, [r5, #0]
 800d978:	d032      	beq.n	800d9e0 <__sflush_r+0x98>
 800d97a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d97c:	89a3      	ldrh	r3, [r4, #12]
 800d97e:	075a      	lsls	r2, r3, #29
 800d980:	d505      	bpl.n	800d98e <__sflush_r+0x46>
 800d982:	6863      	ldr	r3, [r4, #4]
 800d984:	1ac0      	subs	r0, r0, r3
 800d986:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d988:	b10b      	cbz	r3, 800d98e <__sflush_r+0x46>
 800d98a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d98c:	1ac0      	subs	r0, r0, r3
 800d98e:	2300      	movs	r3, #0
 800d990:	4602      	mov	r2, r0
 800d992:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d994:	6a21      	ldr	r1, [r4, #32]
 800d996:	4628      	mov	r0, r5
 800d998:	47b0      	blx	r6
 800d99a:	1c43      	adds	r3, r0, #1
 800d99c:	89a3      	ldrh	r3, [r4, #12]
 800d99e:	d106      	bne.n	800d9ae <__sflush_r+0x66>
 800d9a0:	6829      	ldr	r1, [r5, #0]
 800d9a2:	291d      	cmp	r1, #29
 800d9a4:	d82c      	bhi.n	800da00 <__sflush_r+0xb8>
 800d9a6:	4a2a      	ldr	r2, [pc, #168]	; (800da50 <__sflush_r+0x108>)
 800d9a8:	40ca      	lsrs	r2, r1
 800d9aa:	07d6      	lsls	r6, r2, #31
 800d9ac:	d528      	bpl.n	800da00 <__sflush_r+0xb8>
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	6062      	str	r2, [r4, #4]
 800d9b2:	04d9      	lsls	r1, r3, #19
 800d9b4:	6922      	ldr	r2, [r4, #16]
 800d9b6:	6022      	str	r2, [r4, #0]
 800d9b8:	d504      	bpl.n	800d9c4 <__sflush_r+0x7c>
 800d9ba:	1c42      	adds	r2, r0, #1
 800d9bc:	d101      	bne.n	800d9c2 <__sflush_r+0x7a>
 800d9be:	682b      	ldr	r3, [r5, #0]
 800d9c0:	b903      	cbnz	r3, 800d9c4 <__sflush_r+0x7c>
 800d9c2:	6560      	str	r0, [r4, #84]	; 0x54
 800d9c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d9c6:	602f      	str	r7, [r5, #0]
 800d9c8:	2900      	cmp	r1, #0
 800d9ca:	d0ca      	beq.n	800d962 <__sflush_r+0x1a>
 800d9cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d9d0:	4299      	cmp	r1, r3
 800d9d2:	d002      	beq.n	800d9da <__sflush_r+0x92>
 800d9d4:	4628      	mov	r0, r5
 800d9d6:	f7fb ff67 	bl	80098a8 <_free_r>
 800d9da:	2000      	movs	r0, #0
 800d9dc:	6360      	str	r0, [r4, #52]	; 0x34
 800d9de:	e7c1      	b.n	800d964 <__sflush_r+0x1c>
 800d9e0:	6a21      	ldr	r1, [r4, #32]
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	4628      	mov	r0, r5
 800d9e6:	47b0      	blx	r6
 800d9e8:	1c41      	adds	r1, r0, #1
 800d9ea:	d1c7      	bne.n	800d97c <__sflush_r+0x34>
 800d9ec:	682b      	ldr	r3, [r5, #0]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d0c4      	beq.n	800d97c <__sflush_r+0x34>
 800d9f2:	2b1d      	cmp	r3, #29
 800d9f4:	d001      	beq.n	800d9fa <__sflush_r+0xb2>
 800d9f6:	2b16      	cmp	r3, #22
 800d9f8:	d101      	bne.n	800d9fe <__sflush_r+0xb6>
 800d9fa:	602f      	str	r7, [r5, #0]
 800d9fc:	e7b1      	b.n	800d962 <__sflush_r+0x1a>
 800d9fe:	89a3      	ldrh	r3, [r4, #12]
 800da00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da04:	81a3      	strh	r3, [r4, #12]
 800da06:	e7ad      	b.n	800d964 <__sflush_r+0x1c>
 800da08:	690f      	ldr	r7, [r1, #16]
 800da0a:	2f00      	cmp	r7, #0
 800da0c:	d0a9      	beq.n	800d962 <__sflush_r+0x1a>
 800da0e:	0793      	lsls	r3, r2, #30
 800da10:	680e      	ldr	r6, [r1, #0]
 800da12:	bf08      	it	eq
 800da14:	694b      	ldreq	r3, [r1, #20]
 800da16:	600f      	str	r7, [r1, #0]
 800da18:	bf18      	it	ne
 800da1a:	2300      	movne	r3, #0
 800da1c:	eba6 0807 	sub.w	r8, r6, r7
 800da20:	608b      	str	r3, [r1, #8]
 800da22:	f1b8 0f00 	cmp.w	r8, #0
 800da26:	dd9c      	ble.n	800d962 <__sflush_r+0x1a>
 800da28:	6a21      	ldr	r1, [r4, #32]
 800da2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800da2c:	4643      	mov	r3, r8
 800da2e:	463a      	mov	r2, r7
 800da30:	4628      	mov	r0, r5
 800da32:	47b0      	blx	r6
 800da34:	2800      	cmp	r0, #0
 800da36:	dc06      	bgt.n	800da46 <__sflush_r+0xfe>
 800da38:	89a3      	ldrh	r3, [r4, #12]
 800da3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da3e:	81a3      	strh	r3, [r4, #12]
 800da40:	f04f 30ff 	mov.w	r0, #4294967295
 800da44:	e78e      	b.n	800d964 <__sflush_r+0x1c>
 800da46:	4407      	add	r7, r0
 800da48:	eba8 0800 	sub.w	r8, r8, r0
 800da4c:	e7e9      	b.n	800da22 <__sflush_r+0xda>
 800da4e:	bf00      	nop
 800da50:	20400001 	.word	0x20400001

0800da54 <_fflush_r>:
 800da54:	b538      	push	{r3, r4, r5, lr}
 800da56:	690b      	ldr	r3, [r1, #16]
 800da58:	4605      	mov	r5, r0
 800da5a:	460c      	mov	r4, r1
 800da5c:	b913      	cbnz	r3, 800da64 <_fflush_r+0x10>
 800da5e:	2500      	movs	r5, #0
 800da60:	4628      	mov	r0, r5
 800da62:	bd38      	pop	{r3, r4, r5, pc}
 800da64:	b118      	cbz	r0, 800da6e <_fflush_r+0x1a>
 800da66:	6983      	ldr	r3, [r0, #24]
 800da68:	b90b      	cbnz	r3, 800da6e <_fflush_r+0x1a>
 800da6a:	f000 f887 	bl	800db7c <__sinit>
 800da6e:	4b14      	ldr	r3, [pc, #80]	; (800dac0 <_fflush_r+0x6c>)
 800da70:	429c      	cmp	r4, r3
 800da72:	d11b      	bne.n	800daac <_fflush_r+0x58>
 800da74:	686c      	ldr	r4, [r5, #4]
 800da76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d0ef      	beq.n	800da5e <_fflush_r+0xa>
 800da7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da80:	07d0      	lsls	r0, r2, #31
 800da82:	d404      	bmi.n	800da8e <_fflush_r+0x3a>
 800da84:	0599      	lsls	r1, r3, #22
 800da86:	d402      	bmi.n	800da8e <_fflush_r+0x3a>
 800da88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da8a:	f7ff fcf0 	bl	800d46e <__retarget_lock_acquire_recursive>
 800da8e:	4628      	mov	r0, r5
 800da90:	4621      	mov	r1, r4
 800da92:	f7ff ff59 	bl	800d948 <__sflush_r>
 800da96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da98:	07da      	lsls	r2, r3, #31
 800da9a:	4605      	mov	r5, r0
 800da9c:	d4e0      	bmi.n	800da60 <_fflush_r+0xc>
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	059b      	lsls	r3, r3, #22
 800daa2:	d4dd      	bmi.n	800da60 <_fflush_r+0xc>
 800daa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800daa6:	f7ff fce3 	bl	800d470 <__retarget_lock_release_recursive>
 800daaa:	e7d9      	b.n	800da60 <_fflush_r+0xc>
 800daac:	4b05      	ldr	r3, [pc, #20]	; (800dac4 <_fflush_r+0x70>)
 800daae:	429c      	cmp	r4, r3
 800dab0:	d101      	bne.n	800dab6 <_fflush_r+0x62>
 800dab2:	68ac      	ldr	r4, [r5, #8]
 800dab4:	e7df      	b.n	800da76 <_fflush_r+0x22>
 800dab6:	4b04      	ldr	r3, [pc, #16]	; (800dac8 <_fflush_r+0x74>)
 800dab8:	429c      	cmp	r4, r3
 800daba:	bf08      	it	eq
 800dabc:	68ec      	ldreq	r4, [r5, #12]
 800dabe:	e7da      	b.n	800da76 <_fflush_r+0x22>
 800dac0:	0801268c 	.word	0x0801268c
 800dac4:	080126ac 	.word	0x080126ac
 800dac8:	0801266c 	.word	0x0801266c

0800dacc <std>:
 800dacc:	2300      	movs	r3, #0
 800dace:	b510      	push	{r4, lr}
 800dad0:	4604      	mov	r4, r0
 800dad2:	e9c0 3300 	strd	r3, r3, [r0]
 800dad6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dada:	6083      	str	r3, [r0, #8]
 800dadc:	8181      	strh	r1, [r0, #12]
 800dade:	6643      	str	r3, [r0, #100]	; 0x64
 800dae0:	81c2      	strh	r2, [r0, #14]
 800dae2:	6183      	str	r3, [r0, #24]
 800dae4:	4619      	mov	r1, r3
 800dae6:	2208      	movs	r2, #8
 800dae8:	305c      	adds	r0, #92	; 0x5c
 800daea:	f7fb fed5 	bl	8009898 <memset>
 800daee:	4b05      	ldr	r3, [pc, #20]	; (800db04 <std+0x38>)
 800daf0:	6263      	str	r3, [r4, #36]	; 0x24
 800daf2:	4b05      	ldr	r3, [pc, #20]	; (800db08 <std+0x3c>)
 800daf4:	62a3      	str	r3, [r4, #40]	; 0x28
 800daf6:	4b05      	ldr	r3, [pc, #20]	; (800db0c <std+0x40>)
 800daf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dafa:	4b05      	ldr	r3, [pc, #20]	; (800db10 <std+0x44>)
 800dafc:	6224      	str	r4, [r4, #32]
 800dafe:	6323      	str	r3, [r4, #48]	; 0x30
 800db00:	bd10      	pop	{r4, pc}
 800db02:	bf00      	nop
 800db04:	0800de19 	.word	0x0800de19
 800db08:	0800de3b 	.word	0x0800de3b
 800db0c:	0800de73 	.word	0x0800de73
 800db10:	0800de97 	.word	0x0800de97

0800db14 <_cleanup_r>:
 800db14:	4901      	ldr	r1, [pc, #4]	; (800db1c <_cleanup_r+0x8>)
 800db16:	f000 b8af 	b.w	800dc78 <_fwalk_reent>
 800db1a:	bf00      	nop
 800db1c:	0800da55 	.word	0x0800da55

0800db20 <__sfmoreglue>:
 800db20:	b570      	push	{r4, r5, r6, lr}
 800db22:	2268      	movs	r2, #104	; 0x68
 800db24:	1e4d      	subs	r5, r1, #1
 800db26:	4355      	muls	r5, r2
 800db28:	460e      	mov	r6, r1
 800db2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800db2e:	f7fb ff27 	bl	8009980 <_malloc_r>
 800db32:	4604      	mov	r4, r0
 800db34:	b140      	cbz	r0, 800db48 <__sfmoreglue+0x28>
 800db36:	2100      	movs	r1, #0
 800db38:	e9c0 1600 	strd	r1, r6, [r0]
 800db3c:	300c      	adds	r0, #12
 800db3e:	60a0      	str	r0, [r4, #8]
 800db40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800db44:	f7fb fea8 	bl	8009898 <memset>
 800db48:	4620      	mov	r0, r4
 800db4a:	bd70      	pop	{r4, r5, r6, pc}

0800db4c <__sfp_lock_acquire>:
 800db4c:	4801      	ldr	r0, [pc, #4]	; (800db54 <__sfp_lock_acquire+0x8>)
 800db4e:	f7ff bc8e 	b.w	800d46e <__retarget_lock_acquire_recursive>
 800db52:	bf00      	nop
 800db54:	20000525 	.word	0x20000525

0800db58 <__sfp_lock_release>:
 800db58:	4801      	ldr	r0, [pc, #4]	; (800db60 <__sfp_lock_release+0x8>)
 800db5a:	f7ff bc89 	b.w	800d470 <__retarget_lock_release_recursive>
 800db5e:	bf00      	nop
 800db60:	20000525 	.word	0x20000525

0800db64 <__sinit_lock_acquire>:
 800db64:	4801      	ldr	r0, [pc, #4]	; (800db6c <__sinit_lock_acquire+0x8>)
 800db66:	f7ff bc82 	b.w	800d46e <__retarget_lock_acquire_recursive>
 800db6a:	bf00      	nop
 800db6c:	20000526 	.word	0x20000526

0800db70 <__sinit_lock_release>:
 800db70:	4801      	ldr	r0, [pc, #4]	; (800db78 <__sinit_lock_release+0x8>)
 800db72:	f7ff bc7d 	b.w	800d470 <__retarget_lock_release_recursive>
 800db76:	bf00      	nop
 800db78:	20000526 	.word	0x20000526

0800db7c <__sinit>:
 800db7c:	b510      	push	{r4, lr}
 800db7e:	4604      	mov	r4, r0
 800db80:	f7ff fff0 	bl	800db64 <__sinit_lock_acquire>
 800db84:	69a3      	ldr	r3, [r4, #24]
 800db86:	b11b      	cbz	r3, 800db90 <__sinit+0x14>
 800db88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800db8c:	f7ff bff0 	b.w	800db70 <__sinit_lock_release>
 800db90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800db94:	6523      	str	r3, [r4, #80]	; 0x50
 800db96:	4b13      	ldr	r3, [pc, #76]	; (800dbe4 <__sinit+0x68>)
 800db98:	4a13      	ldr	r2, [pc, #76]	; (800dbe8 <__sinit+0x6c>)
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	62a2      	str	r2, [r4, #40]	; 0x28
 800db9e:	42a3      	cmp	r3, r4
 800dba0:	bf04      	itt	eq
 800dba2:	2301      	moveq	r3, #1
 800dba4:	61a3      	streq	r3, [r4, #24]
 800dba6:	4620      	mov	r0, r4
 800dba8:	f000 f820 	bl	800dbec <__sfp>
 800dbac:	6060      	str	r0, [r4, #4]
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f000 f81c 	bl	800dbec <__sfp>
 800dbb4:	60a0      	str	r0, [r4, #8]
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f000 f818 	bl	800dbec <__sfp>
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	60e0      	str	r0, [r4, #12]
 800dbc0:	2104      	movs	r1, #4
 800dbc2:	6860      	ldr	r0, [r4, #4]
 800dbc4:	f7ff ff82 	bl	800dacc <std>
 800dbc8:	68a0      	ldr	r0, [r4, #8]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	2109      	movs	r1, #9
 800dbce:	f7ff ff7d 	bl	800dacc <std>
 800dbd2:	68e0      	ldr	r0, [r4, #12]
 800dbd4:	2202      	movs	r2, #2
 800dbd6:	2112      	movs	r1, #18
 800dbd8:	f7ff ff78 	bl	800dacc <std>
 800dbdc:	2301      	movs	r3, #1
 800dbde:	61a3      	str	r3, [r4, #24]
 800dbe0:	e7d2      	b.n	800db88 <__sinit+0xc>
 800dbe2:	bf00      	nop
 800dbe4:	08012224 	.word	0x08012224
 800dbe8:	0800db15 	.word	0x0800db15

0800dbec <__sfp>:
 800dbec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbee:	4607      	mov	r7, r0
 800dbf0:	f7ff ffac 	bl	800db4c <__sfp_lock_acquire>
 800dbf4:	4b1e      	ldr	r3, [pc, #120]	; (800dc70 <__sfp+0x84>)
 800dbf6:	681e      	ldr	r6, [r3, #0]
 800dbf8:	69b3      	ldr	r3, [r6, #24]
 800dbfa:	b913      	cbnz	r3, 800dc02 <__sfp+0x16>
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	f7ff ffbd 	bl	800db7c <__sinit>
 800dc02:	3648      	adds	r6, #72	; 0x48
 800dc04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dc08:	3b01      	subs	r3, #1
 800dc0a:	d503      	bpl.n	800dc14 <__sfp+0x28>
 800dc0c:	6833      	ldr	r3, [r6, #0]
 800dc0e:	b30b      	cbz	r3, 800dc54 <__sfp+0x68>
 800dc10:	6836      	ldr	r6, [r6, #0]
 800dc12:	e7f7      	b.n	800dc04 <__sfp+0x18>
 800dc14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dc18:	b9d5      	cbnz	r5, 800dc50 <__sfp+0x64>
 800dc1a:	4b16      	ldr	r3, [pc, #88]	; (800dc74 <__sfp+0x88>)
 800dc1c:	60e3      	str	r3, [r4, #12]
 800dc1e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800dc22:	6665      	str	r5, [r4, #100]	; 0x64
 800dc24:	f7ff fc22 	bl	800d46c <__retarget_lock_init_recursive>
 800dc28:	f7ff ff96 	bl	800db58 <__sfp_lock_release>
 800dc2c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800dc30:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800dc34:	6025      	str	r5, [r4, #0]
 800dc36:	61a5      	str	r5, [r4, #24]
 800dc38:	2208      	movs	r2, #8
 800dc3a:	4629      	mov	r1, r5
 800dc3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800dc40:	f7fb fe2a 	bl	8009898 <memset>
 800dc44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800dc48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800dc4c:	4620      	mov	r0, r4
 800dc4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc50:	3468      	adds	r4, #104	; 0x68
 800dc52:	e7d9      	b.n	800dc08 <__sfp+0x1c>
 800dc54:	2104      	movs	r1, #4
 800dc56:	4638      	mov	r0, r7
 800dc58:	f7ff ff62 	bl	800db20 <__sfmoreglue>
 800dc5c:	4604      	mov	r4, r0
 800dc5e:	6030      	str	r0, [r6, #0]
 800dc60:	2800      	cmp	r0, #0
 800dc62:	d1d5      	bne.n	800dc10 <__sfp+0x24>
 800dc64:	f7ff ff78 	bl	800db58 <__sfp_lock_release>
 800dc68:	230c      	movs	r3, #12
 800dc6a:	603b      	str	r3, [r7, #0]
 800dc6c:	e7ee      	b.n	800dc4c <__sfp+0x60>
 800dc6e:	bf00      	nop
 800dc70:	08012224 	.word	0x08012224
 800dc74:	ffff0001 	.word	0xffff0001

0800dc78 <_fwalk_reent>:
 800dc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	4688      	mov	r8, r1
 800dc80:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800dc84:	2700      	movs	r7, #0
 800dc86:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dc8a:	f1b9 0901 	subs.w	r9, r9, #1
 800dc8e:	d505      	bpl.n	800dc9c <_fwalk_reent+0x24>
 800dc90:	6824      	ldr	r4, [r4, #0]
 800dc92:	2c00      	cmp	r4, #0
 800dc94:	d1f7      	bne.n	800dc86 <_fwalk_reent+0xe>
 800dc96:	4638      	mov	r0, r7
 800dc98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc9c:	89ab      	ldrh	r3, [r5, #12]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d907      	bls.n	800dcb2 <_fwalk_reent+0x3a>
 800dca2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800dca6:	3301      	adds	r3, #1
 800dca8:	d003      	beq.n	800dcb2 <_fwalk_reent+0x3a>
 800dcaa:	4629      	mov	r1, r5
 800dcac:	4630      	mov	r0, r6
 800dcae:	47c0      	blx	r8
 800dcb0:	4307      	orrs	r7, r0
 800dcb2:	3568      	adds	r5, #104	; 0x68
 800dcb4:	e7e9      	b.n	800dc8a <_fwalk_reent+0x12>

0800dcb6 <__swhatbuf_r>:
 800dcb6:	b570      	push	{r4, r5, r6, lr}
 800dcb8:	460e      	mov	r6, r1
 800dcba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dcbe:	2900      	cmp	r1, #0
 800dcc0:	b096      	sub	sp, #88	; 0x58
 800dcc2:	4614      	mov	r4, r2
 800dcc4:	461d      	mov	r5, r3
 800dcc6:	da08      	bge.n	800dcda <__swhatbuf_r+0x24>
 800dcc8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800dccc:	2200      	movs	r2, #0
 800dcce:	602a      	str	r2, [r5, #0]
 800dcd0:	061a      	lsls	r2, r3, #24
 800dcd2:	d410      	bmi.n	800dcf6 <__swhatbuf_r+0x40>
 800dcd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dcd8:	e00e      	b.n	800dcf8 <__swhatbuf_r+0x42>
 800dcda:	466a      	mov	r2, sp
 800dcdc:	f000 f902 	bl	800dee4 <_fstat_r>
 800dce0:	2800      	cmp	r0, #0
 800dce2:	dbf1      	blt.n	800dcc8 <__swhatbuf_r+0x12>
 800dce4:	9a01      	ldr	r2, [sp, #4]
 800dce6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dcea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dcee:	425a      	negs	r2, r3
 800dcf0:	415a      	adcs	r2, r3
 800dcf2:	602a      	str	r2, [r5, #0]
 800dcf4:	e7ee      	b.n	800dcd4 <__swhatbuf_r+0x1e>
 800dcf6:	2340      	movs	r3, #64	; 0x40
 800dcf8:	2000      	movs	r0, #0
 800dcfa:	6023      	str	r3, [r4, #0]
 800dcfc:	b016      	add	sp, #88	; 0x58
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}

0800dd00 <__smakebuf_r>:
 800dd00:	898b      	ldrh	r3, [r1, #12]
 800dd02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dd04:	079d      	lsls	r5, r3, #30
 800dd06:	4606      	mov	r6, r0
 800dd08:	460c      	mov	r4, r1
 800dd0a:	d507      	bpl.n	800dd1c <__smakebuf_r+0x1c>
 800dd0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	6123      	str	r3, [r4, #16]
 800dd14:	2301      	movs	r3, #1
 800dd16:	6163      	str	r3, [r4, #20]
 800dd18:	b002      	add	sp, #8
 800dd1a:	bd70      	pop	{r4, r5, r6, pc}
 800dd1c:	ab01      	add	r3, sp, #4
 800dd1e:	466a      	mov	r2, sp
 800dd20:	f7ff ffc9 	bl	800dcb6 <__swhatbuf_r>
 800dd24:	9900      	ldr	r1, [sp, #0]
 800dd26:	4605      	mov	r5, r0
 800dd28:	4630      	mov	r0, r6
 800dd2a:	f7fb fe29 	bl	8009980 <_malloc_r>
 800dd2e:	b948      	cbnz	r0, 800dd44 <__smakebuf_r+0x44>
 800dd30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd34:	059a      	lsls	r2, r3, #22
 800dd36:	d4ef      	bmi.n	800dd18 <__smakebuf_r+0x18>
 800dd38:	f023 0303 	bic.w	r3, r3, #3
 800dd3c:	f043 0302 	orr.w	r3, r3, #2
 800dd40:	81a3      	strh	r3, [r4, #12]
 800dd42:	e7e3      	b.n	800dd0c <__smakebuf_r+0xc>
 800dd44:	4b0d      	ldr	r3, [pc, #52]	; (800dd7c <__smakebuf_r+0x7c>)
 800dd46:	62b3      	str	r3, [r6, #40]	; 0x28
 800dd48:	89a3      	ldrh	r3, [r4, #12]
 800dd4a:	6020      	str	r0, [r4, #0]
 800dd4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dd50:	81a3      	strh	r3, [r4, #12]
 800dd52:	9b00      	ldr	r3, [sp, #0]
 800dd54:	6163      	str	r3, [r4, #20]
 800dd56:	9b01      	ldr	r3, [sp, #4]
 800dd58:	6120      	str	r0, [r4, #16]
 800dd5a:	b15b      	cbz	r3, 800dd74 <__smakebuf_r+0x74>
 800dd5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dd60:	4630      	mov	r0, r6
 800dd62:	f000 f8d1 	bl	800df08 <_isatty_r>
 800dd66:	b128      	cbz	r0, 800dd74 <__smakebuf_r+0x74>
 800dd68:	89a3      	ldrh	r3, [r4, #12]
 800dd6a:	f023 0303 	bic.w	r3, r3, #3
 800dd6e:	f043 0301 	orr.w	r3, r3, #1
 800dd72:	81a3      	strh	r3, [r4, #12]
 800dd74:	89a0      	ldrh	r0, [r4, #12]
 800dd76:	4305      	orrs	r5, r0
 800dd78:	81a5      	strh	r5, [r4, #12]
 800dd7a:	e7cd      	b.n	800dd18 <__smakebuf_r+0x18>
 800dd7c:	0800db15 	.word	0x0800db15

0800dd80 <_malloc_usable_size_r>:
 800dd80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd84:	1f18      	subs	r0, r3, #4
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	bfbc      	itt	lt
 800dd8a:	580b      	ldrlt	r3, [r1, r0]
 800dd8c:	18c0      	addlt	r0, r0, r3
 800dd8e:	4770      	bx	lr

0800dd90 <_raise_r>:
 800dd90:	291f      	cmp	r1, #31
 800dd92:	b538      	push	{r3, r4, r5, lr}
 800dd94:	4604      	mov	r4, r0
 800dd96:	460d      	mov	r5, r1
 800dd98:	d904      	bls.n	800dda4 <_raise_r+0x14>
 800dd9a:	2316      	movs	r3, #22
 800dd9c:	6003      	str	r3, [r0, #0]
 800dd9e:	f04f 30ff 	mov.w	r0, #4294967295
 800dda2:	bd38      	pop	{r3, r4, r5, pc}
 800dda4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dda6:	b112      	cbz	r2, 800ddae <_raise_r+0x1e>
 800dda8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddac:	b94b      	cbnz	r3, 800ddc2 <_raise_r+0x32>
 800ddae:	4620      	mov	r0, r4
 800ddb0:	f000 f830 	bl	800de14 <_getpid_r>
 800ddb4:	462a      	mov	r2, r5
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	4620      	mov	r0, r4
 800ddba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddbe:	f000 b817 	b.w	800ddf0 <_kill_r>
 800ddc2:	2b01      	cmp	r3, #1
 800ddc4:	d00a      	beq.n	800dddc <_raise_r+0x4c>
 800ddc6:	1c59      	adds	r1, r3, #1
 800ddc8:	d103      	bne.n	800ddd2 <_raise_r+0x42>
 800ddca:	2316      	movs	r3, #22
 800ddcc:	6003      	str	r3, [r0, #0]
 800ddce:	2001      	movs	r0, #1
 800ddd0:	e7e7      	b.n	800dda2 <_raise_r+0x12>
 800ddd2:	2400      	movs	r4, #0
 800ddd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ddd8:	4628      	mov	r0, r5
 800ddda:	4798      	blx	r3
 800dddc:	2000      	movs	r0, #0
 800ddde:	e7e0      	b.n	800dda2 <_raise_r+0x12>

0800dde0 <raise>:
 800dde0:	4b02      	ldr	r3, [pc, #8]	; (800ddec <raise+0xc>)
 800dde2:	4601      	mov	r1, r0
 800dde4:	6818      	ldr	r0, [r3, #0]
 800dde6:	f7ff bfd3 	b.w	800dd90 <_raise_r>
 800ddea:	bf00      	nop
 800ddec:	2000000c 	.word	0x2000000c

0800ddf0 <_kill_r>:
 800ddf0:	b538      	push	{r3, r4, r5, lr}
 800ddf2:	4d07      	ldr	r5, [pc, #28]	; (800de10 <_kill_r+0x20>)
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	4604      	mov	r4, r0
 800ddf8:	4608      	mov	r0, r1
 800ddfa:	4611      	mov	r1, r2
 800ddfc:	602b      	str	r3, [r5, #0]
 800ddfe:	f7f3 f8f5 	bl	8000fec <_kill>
 800de02:	1c43      	adds	r3, r0, #1
 800de04:	d102      	bne.n	800de0c <_kill_r+0x1c>
 800de06:	682b      	ldr	r3, [r5, #0]
 800de08:	b103      	cbz	r3, 800de0c <_kill_r+0x1c>
 800de0a:	6023      	str	r3, [r4, #0]
 800de0c:	bd38      	pop	{r3, r4, r5, pc}
 800de0e:	bf00      	nop
 800de10:	20000520 	.word	0x20000520

0800de14 <_getpid_r>:
 800de14:	f7f3 b8e2 	b.w	8000fdc <_getpid>

0800de18 <__sread>:
 800de18:	b510      	push	{r4, lr}
 800de1a:	460c      	mov	r4, r1
 800de1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de20:	f000 f894 	bl	800df4c <_read_r>
 800de24:	2800      	cmp	r0, #0
 800de26:	bfab      	itete	ge
 800de28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800de2a:	89a3      	ldrhlt	r3, [r4, #12]
 800de2c:	181b      	addge	r3, r3, r0
 800de2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800de32:	bfac      	ite	ge
 800de34:	6563      	strge	r3, [r4, #84]	; 0x54
 800de36:	81a3      	strhlt	r3, [r4, #12]
 800de38:	bd10      	pop	{r4, pc}

0800de3a <__swrite>:
 800de3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de3e:	461f      	mov	r7, r3
 800de40:	898b      	ldrh	r3, [r1, #12]
 800de42:	05db      	lsls	r3, r3, #23
 800de44:	4605      	mov	r5, r0
 800de46:	460c      	mov	r4, r1
 800de48:	4616      	mov	r6, r2
 800de4a:	d505      	bpl.n	800de58 <__swrite+0x1e>
 800de4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de50:	2302      	movs	r3, #2
 800de52:	2200      	movs	r2, #0
 800de54:	f000 f868 	bl	800df28 <_lseek_r>
 800de58:	89a3      	ldrh	r3, [r4, #12]
 800de5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800de5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800de62:	81a3      	strh	r3, [r4, #12]
 800de64:	4632      	mov	r2, r6
 800de66:	463b      	mov	r3, r7
 800de68:	4628      	mov	r0, r5
 800de6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de6e:	f000 b817 	b.w	800dea0 <_write_r>

0800de72 <__sseek>:
 800de72:	b510      	push	{r4, lr}
 800de74:	460c      	mov	r4, r1
 800de76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de7a:	f000 f855 	bl	800df28 <_lseek_r>
 800de7e:	1c43      	adds	r3, r0, #1
 800de80:	89a3      	ldrh	r3, [r4, #12]
 800de82:	bf15      	itete	ne
 800de84:	6560      	strne	r0, [r4, #84]	; 0x54
 800de86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800de8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800de8e:	81a3      	strheq	r3, [r4, #12]
 800de90:	bf18      	it	ne
 800de92:	81a3      	strhne	r3, [r4, #12]
 800de94:	bd10      	pop	{r4, pc}

0800de96 <__sclose>:
 800de96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de9a:	f000 b813 	b.w	800dec4 <_close_r>
	...

0800dea0 <_write_r>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	4d07      	ldr	r5, [pc, #28]	; (800dec0 <_write_r+0x20>)
 800dea4:	4604      	mov	r4, r0
 800dea6:	4608      	mov	r0, r1
 800dea8:	4611      	mov	r1, r2
 800deaa:	2200      	movs	r2, #0
 800deac:	602a      	str	r2, [r5, #0]
 800deae:	461a      	mov	r2, r3
 800deb0:	f7f3 f8d3 	bl	800105a <_write>
 800deb4:	1c43      	adds	r3, r0, #1
 800deb6:	d102      	bne.n	800debe <_write_r+0x1e>
 800deb8:	682b      	ldr	r3, [r5, #0]
 800deba:	b103      	cbz	r3, 800debe <_write_r+0x1e>
 800debc:	6023      	str	r3, [r4, #0]
 800debe:	bd38      	pop	{r3, r4, r5, pc}
 800dec0:	20000520 	.word	0x20000520

0800dec4 <_close_r>:
 800dec4:	b538      	push	{r3, r4, r5, lr}
 800dec6:	4d06      	ldr	r5, [pc, #24]	; (800dee0 <_close_r+0x1c>)
 800dec8:	2300      	movs	r3, #0
 800deca:	4604      	mov	r4, r0
 800decc:	4608      	mov	r0, r1
 800dece:	602b      	str	r3, [r5, #0]
 800ded0:	f7f3 f8df 	bl	8001092 <_close>
 800ded4:	1c43      	adds	r3, r0, #1
 800ded6:	d102      	bne.n	800dede <_close_r+0x1a>
 800ded8:	682b      	ldr	r3, [r5, #0]
 800deda:	b103      	cbz	r3, 800dede <_close_r+0x1a>
 800dedc:	6023      	str	r3, [r4, #0]
 800dede:	bd38      	pop	{r3, r4, r5, pc}
 800dee0:	20000520 	.word	0x20000520

0800dee4 <_fstat_r>:
 800dee4:	b538      	push	{r3, r4, r5, lr}
 800dee6:	4d07      	ldr	r5, [pc, #28]	; (800df04 <_fstat_r+0x20>)
 800dee8:	2300      	movs	r3, #0
 800deea:	4604      	mov	r4, r0
 800deec:	4608      	mov	r0, r1
 800deee:	4611      	mov	r1, r2
 800def0:	602b      	str	r3, [r5, #0]
 800def2:	f7f3 f8da 	bl	80010aa <_fstat>
 800def6:	1c43      	adds	r3, r0, #1
 800def8:	d102      	bne.n	800df00 <_fstat_r+0x1c>
 800defa:	682b      	ldr	r3, [r5, #0]
 800defc:	b103      	cbz	r3, 800df00 <_fstat_r+0x1c>
 800defe:	6023      	str	r3, [r4, #0]
 800df00:	bd38      	pop	{r3, r4, r5, pc}
 800df02:	bf00      	nop
 800df04:	20000520 	.word	0x20000520

0800df08 <_isatty_r>:
 800df08:	b538      	push	{r3, r4, r5, lr}
 800df0a:	4d06      	ldr	r5, [pc, #24]	; (800df24 <_isatty_r+0x1c>)
 800df0c:	2300      	movs	r3, #0
 800df0e:	4604      	mov	r4, r0
 800df10:	4608      	mov	r0, r1
 800df12:	602b      	str	r3, [r5, #0]
 800df14:	f7f3 f8d9 	bl	80010ca <_isatty>
 800df18:	1c43      	adds	r3, r0, #1
 800df1a:	d102      	bne.n	800df22 <_isatty_r+0x1a>
 800df1c:	682b      	ldr	r3, [r5, #0]
 800df1e:	b103      	cbz	r3, 800df22 <_isatty_r+0x1a>
 800df20:	6023      	str	r3, [r4, #0]
 800df22:	bd38      	pop	{r3, r4, r5, pc}
 800df24:	20000520 	.word	0x20000520

0800df28 <_lseek_r>:
 800df28:	b538      	push	{r3, r4, r5, lr}
 800df2a:	4d07      	ldr	r5, [pc, #28]	; (800df48 <_lseek_r+0x20>)
 800df2c:	4604      	mov	r4, r0
 800df2e:	4608      	mov	r0, r1
 800df30:	4611      	mov	r1, r2
 800df32:	2200      	movs	r2, #0
 800df34:	602a      	str	r2, [r5, #0]
 800df36:	461a      	mov	r2, r3
 800df38:	f7f3 f8d2 	bl	80010e0 <_lseek>
 800df3c:	1c43      	adds	r3, r0, #1
 800df3e:	d102      	bne.n	800df46 <_lseek_r+0x1e>
 800df40:	682b      	ldr	r3, [r5, #0]
 800df42:	b103      	cbz	r3, 800df46 <_lseek_r+0x1e>
 800df44:	6023      	str	r3, [r4, #0]
 800df46:	bd38      	pop	{r3, r4, r5, pc}
 800df48:	20000520 	.word	0x20000520

0800df4c <_read_r>:
 800df4c:	b538      	push	{r3, r4, r5, lr}
 800df4e:	4d07      	ldr	r5, [pc, #28]	; (800df6c <_read_r+0x20>)
 800df50:	4604      	mov	r4, r0
 800df52:	4608      	mov	r0, r1
 800df54:	4611      	mov	r1, r2
 800df56:	2200      	movs	r2, #0
 800df58:	602a      	str	r2, [r5, #0]
 800df5a:	461a      	mov	r2, r3
 800df5c:	f7f3 f860 	bl	8001020 <_read>
 800df60:	1c43      	adds	r3, r0, #1
 800df62:	d102      	bne.n	800df6a <_read_r+0x1e>
 800df64:	682b      	ldr	r3, [r5, #0]
 800df66:	b103      	cbz	r3, 800df6a <_read_r+0x1e>
 800df68:	6023      	str	r3, [r4, #0]
 800df6a:	bd38      	pop	{r3, r4, r5, pc}
 800df6c:	20000520 	.word	0x20000520

0800df70 <_init>:
 800df70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df72:	bf00      	nop
 800df74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df76:	bc08      	pop	{r3}
 800df78:	469e      	mov	lr, r3
 800df7a:	4770      	bx	lr

0800df7c <_fini>:
 800df7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df7e:	bf00      	nop
 800df80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df82:	bc08      	pop	{r3}
 800df84:	469e      	mov	lr, r3
 800df86:	4770      	bx	lr
