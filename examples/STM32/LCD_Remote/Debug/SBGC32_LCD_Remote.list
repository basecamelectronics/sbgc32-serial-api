
SBGC32_LCD_Remote.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e008  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800e208  0800e208  0001e208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e808  0800e808  00020274  2**0
                  CONTENTS
  4 .ARM          00000008  0800e808  0800e808  0001e808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e810  0800e810  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e810  0800e810  0001e810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e814  0800e814  0001e814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  0800e818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e4  20000274  0800ea8c  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000758  0800ea8c  00020758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b548  00000000  00000000  000202e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052d5  00000000  00000000  0004b82d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab8  00000000  00000000  00050b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014b4  00000000  00000000  000525c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002edbf  00000000  00000000  00053a74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bc72  00000000  00000000  00082833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ddcb  00000000  00000000  000ae4a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081c0  00000000  00000000  001bc270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001c4430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000274 	.word	0x20000274
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e1f0 	.word	0x0800e1f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000278 	.word	0x20000278
 800023c:	0800e1f0 	.word	0x0800e1f0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b9a8 	b.w	80009d0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f83e 	bl	8000708 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2lz>:
 8000698:	b508      	push	{r3, lr}
 800069a:	4602      	mov	r2, r0
 800069c:	460b      	mov	r3, r1
 800069e:	ec43 2b17 	vmov	d7, r2, r3
 80006a2:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80006a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006aa:	d403      	bmi.n	80006b4 <__aeabi_d2lz+0x1c>
 80006ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80006b0:	f000 b80a 	b.w	80006c8 <__aeabi_d2ulz>
 80006b4:	eeb1 7b47 	vneg.f64	d7, d7
 80006b8:	ec51 0b17 	vmov	r0, r1, d7
 80006bc:	f000 f804 	bl	80006c8 <__aeabi_d2ulz>
 80006c0:	4240      	negs	r0, r0
 80006c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c6:	bd08      	pop	{r3, pc}

080006c8 <__aeabi_d2ulz>:
 80006c8:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006f8 <__aeabi_d2ulz+0x30>
 80006cc:	ec41 0b17 	vmov	d7, r0, r1
 80006d0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000700 <__aeabi_d2ulz+0x38>
 80006d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006d8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006dc:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006e0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006e8:	ee16 1a10 	vmov	r1, s12
 80006ec:	ee17 0a90 	vmov	r0, s15
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	f3af 8000 	nop.w
 80006f8:	00000000 	.word	0x00000000
 80006fc:	3df00000 	.word	0x3df00000
 8000700:	00000000 	.word	0x00000000
 8000704:	41f00000 	.word	0x41f00000

08000708 <__udivmoddi4>:
 8000708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800070c:	9e08      	ldr	r6, [sp, #32]
 800070e:	460d      	mov	r5, r1
 8000710:	4604      	mov	r4, r0
 8000712:	460f      	mov	r7, r1
 8000714:	2b00      	cmp	r3, #0
 8000716:	d14a      	bne.n	80007ae <__udivmoddi4+0xa6>
 8000718:	428a      	cmp	r2, r1
 800071a:	4694      	mov	ip, r2
 800071c:	d965      	bls.n	80007ea <__udivmoddi4+0xe2>
 800071e:	fab2 f382 	clz	r3, r2
 8000722:	b143      	cbz	r3, 8000736 <__udivmoddi4+0x2e>
 8000724:	fa02 fc03 	lsl.w	ip, r2, r3
 8000728:	f1c3 0220 	rsb	r2, r3, #32
 800072c:	409f      	lsls	r7, r3
 800072e:	fa20 f202 	lsr.w	r2, r0, r2
 8000732:	4317      	orrs	r7, r2
 8000734:	409c      	lsls	r4, r3
 8000736:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800073a:	fa1f f58c 	uxth.w	r5, ip
 800073e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000742:	0c22      	lsrs	r2, r4, #16
 8000744:	fb0e 7711 	mls	r7, lr, r1, r7
 8000748:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800074c:	fb01 f005 	mul.w	r0, r1, r5
 8000750:	4290      	cmp	r0, r2
 8000752:	d90a      	bls.n	800076a <__udivmoddi4+0x62>
 8000754:	eb1c 0202 	adds.w	r2, ip, r2
 8000758:	f101 37ff 	add.w	r7, r1, #4294967295
 800075c:	f080 811c 	bcs.w	8000998 <__udivmoddi4+0x290>
 8000760:	4290      	cmp	r0, r2
 8000762:	f240 8119 	bls.w	8000998 <__udivmoddi4+0x290>
 8000766:	3902      	subs	r1, #2
 8000768:	4462      	add	r2, ip
 800076a:	1a12      	subs	r2, r2, r0
 800076c:	b2a4      	uxth	r4, r4
 800076e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000772:	fb0e 2210 	mls	r2, lr, r0, r2
 8000776:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800077a:	fb00 f505 	mul.w	r5, r0, r5
 800077e:	42a5      	cmp	r5, r4
 8000780:	d90a      	bls.n	8000798 <__udivmoddi4+0x90>
 8000782:	eb1c 0404 	adds.w	r4, ip, r4
 8000786:	f100 32ff 	add.w	r2, r0, #4294967295
 800078a:	f080 8107 	bcs.w	800099c <__udivmoddi4+0x294>
 800078e:	42a5      	cmp	r5, r4
 8000790:	f240 8104 	bls.w	800099c <__udivmoddi4+0x294>
 8000794:	4464      	add	r4, ip
 8000796:	3802      	subs	r0, #2
 8000798:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800079c:	1b64      	subs	r4, r4, r5
 800079e:	2100      	movs	r1, #0
 80007a0:	b11e      	cbz	r6, 80007aa <__udivmoddi4+0xa2>
 80007a2:	40dc      	lsrs	r4, r3
 80007a4:	2300      	movs	r3, #0
 80007a6:	e9c6 4300 	strd	r4, r3, [r6]
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0xbc>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	f000 80ed 	beq.w	8000992 <__udivmoddi4+0x28a>
 80007b8:	2100      	movs	r1, #0
 80007ba:	e9c6 0500 	strd	r0, r5, [r6]
 80007be:	4608      	mov	r0, r1
 80007c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007c4:	fab3 f183 	clz	r1, r3
 80007c8:	2900      	cmp	r1, #0
 80007ca:	d149      	bne.n	8000860 <__udivmoddi4+0x158>
 80007cc:	42ab      	cmp	r3, r5
 80007ce:	d302      	bcc.n	80007d6 <__udivmoddi4+0xce>
 80007d0:	4282      	cmp	r2, r0
 80007d2:	f200 80f8 	bhi.w	80009c6 <__udivmoddi4+0x2be>
 80007d6:	1a84      	subs	r4, r0, r2
 80007d8:	eb65 0203 	sbc.w	r2, r5, r3
 80007dc:	2001      	movs	r0, #1
 80007de:	4617      	mov	r7, r2
 80007e0:	2e00      	cmp	r6, #0
 80007e2:	d0e2      	beq.n	80007aa <__udivmoddi4+0xa2>
 80007e4:	e9c6 4700 	strd	r4, r7, [r6]
 80007e8:	e7df      	b.n	80007aa <__udivmoddi4+0xa2>
 80007ea:	b902      	cbnz	r2, 80007ee <__udivmoddi4+0xe6>
 80007ec:	deff      	udf	#255	; 0xff
 80007ee:	fab2 f382 	clz	r3, r2
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	f040 8090 	bne.w	8000918 <__udivmoddi4+0x210>
 80007f8:	1a8a      	subs	r2, r1, r2
 80007fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007fe:	fa1f fe8c 	uxth.w	lr, ip
 8000802:	2101      	movs	r1, #1
 8000804:	fbb2 f5f7 	udiv	r5, r2, r7
 8000808:	fb07 2015 	mls	r0, r7, r5, r2
 800080c:	0c22      	lsrs	r2, r4, #16
 800080e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000812:	fb0e f005 	mul.w	r0, lr, r5
 8000816:	4290      	cmp	r0, r2
 8000818:	d908      	bls.n	800082c <__udivmoddi4+0x124>
 800081a:	eb1c 0202 	adds.w	r2, ip, r2
 800081e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000822:	d202      	bcs.n	800082a <__udivmoddi4+0x122>
 8000824:	4290      	cmp	r0, r2
 8000826:	f200 80cb 	bhi.w	80009c0 <__udivmoddi4+0x2b8>
 800082a:	4645      	mov	r5, r8
 800082c:	1a12      	subs	r2, r2, r0
 800082e:	b2a4      	uxth	r4, r4
 8000830:	fbb2 f0f7 	udiv	r0, r2, r7
 8000834:	fb07 2210 	mls	r2, r7, r0, r2
 8000838:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800083c:	fb0e fe00 	mul.w	lr, lr, r0
 8000840:	45a6      	cmp	lr, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x14e>
 8000844:	eb1c 0404 	adds.w	r4, ip, r4
 8000848:	f100 32ff 	add.w	r2, r0, #4294967295
 800084c:	d202      	bcs.n	8000854 <__udivmoddi4+0x14c>
 800084e:	45a6      	cmp	lr, r4
 8000850:	f200 80bb 	bhi.w	80009ca <__udivmoddi4+0x2c2>
 8000854:	4610      	mov	r0, r2
 8000856:	eba4 040e 	sub.w	r4, r4, lr
 800085a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800085e:	e79f      	b.n	80007a0 <__udivmoddi4+0x98>
 8000860:	f1c1 0720 	rsb	r7, r1, #32
 8000864:	408b      	lsls	r3, r1
 8000866:	fa22 fc07 	lsr.w	ip, r2, r7
 800086a:	ea4c 0c03 	orr.w	ip, ip, r3
 800086e:	fa05 f401 	lsl.w	r4, r5, r1
 8000872:	fa20 f307 	lsr.w	r3, r0, r7
 8000876:	40fd      	lsrs	r5, r7
 8000878:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800087c:	4323      	orrs	r3, r4
 800087e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000882:	fa1f fe8c 	uxth.w	lr, ip
 8000886:	fb09 5518 	mls	r5, r9, r8, r5
 800088a:	0c1c      	lsrs	r4, r3, #16
 800088c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000890:	fb08 f50e 	mul.w	r5, r8, lr
 8000894:	42a5      	cmp	r5, r4
 8000896:	fa02 f201 	lsl.w	r2, r2, r1
 800089a:	fa00 f001 	lsl.w	r0, r0, r1
 800089e:	d90b      	bls.n	80008b8 <__udivmoddi4+0x1b0>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80008a8:	f080 8088 	bcs.w	80009bc <__udivmoddi4+0x2b4>
 80008ac:	42a5      	cmp	r5, r4
 80008ae:	f240 8085 	bls.w	80009bc <__udivmoddi4+0x2b4>
 80008b2:	f1a8 0802 	sub.w	r8, r8, #2
 80008b6:	4464      	add	r4, ip
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	b29d      	uxth	r5, r3
 80008bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80008c0:	fb09 4413 	mls	r4, r9, r3, r4
 80008c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80008c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80008cc:	45a6      	cmp	lr, r4
 80008ce:	d908      	bls.n	80008e2 <__udivmoddi4+0x1da>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008d8:	d26c      	bcs.n	80009b4 <__udivmoddi4+0x2ac>
 80008da:	45a6      	cmp	lr, r4
 80008dc:	d96a      	bls.n	80009b4 <__udivmoddi4+0x2ac>
 80008de:	3b02      	subs	r3, #2
 80008e0:	4464      	add	r4, ip
 80008e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008e6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ea:	eba4 040e 	sub.w	r4, r4, lr
 80008ee:	42ac      	cmp	r4, r5
 80008f0:	46c8      	mov	r8, r9
 80008f2:	46ae      	mov	lr, r5
 80008f4:	d356      	bcc.n	80009a4 <__udivmoddi4+0x29c>
 80008f6:	d053      	beq.n	80009a0 <__udivmoddi4+0x298>
 80008f8:	b156      	cbz	r6, 8000910 <__udivmoddi4+0x208>
 80008fa:	ebb0 0208 	subs.w	r2, r0, r8
 80008fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000902:	fa04 f707 	lsl.w	r7, r4, r7
 8000906:	40ca      	lsrs	r2, r1
 8000908:	40cc      	lsrs	r4, r1
 800090a:	4317      	orrs	r7, r2
 800090c:	e9c6 7400 	strd	r7, r4, [r6]
 8000910:	4618      	mov	r0, r3
 8000912:	2100      	movs	r1, #0
 8000914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000918:	f1c3 0120 	rsb	r1, r3, #32
 800091c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000920:	fa20 f201 	lsr.w	r2, r0, r1
 8000924:	fa25 f101 	lsr.w	r1, r5, r1
 8000928:	409d      	lsls	r5, r3
 800092a:	432a      	orrs	r2, r5
 800092c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000930:	fa1f fe8c 	uxth.w	lr, ip
 8000934:	fbb1 f0f7 	udiv	r0, r1, r7
 8000938:	fb07 1510 	mls	r5, r7, r0, r1
 800093c:	0c11      	lsrs	r1, r2, #16
 800093e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000942:	fb00 f50e 	mul.w	r5, r0, lr
 8000946:	428d      	cmp	r5, r1
 8000948:	fa04 f403 	lsl.w	r4, r4, r3
 800094c:	d908      	bls.n	8000960 <__udivmoddi4+0x258>
 800094e:	eb1c 0101 	adds.w	r1, ip, r1
 8000952:	f100 38ff 	add.w	r8, r0, #4294967295
 8000956:	d22f      	bcs.n	80009b8 <__udivmoddi4+0x2b0>
 8000958:	428d      	cmp	r5, r1
 800095a:	d92d      	bls.n	80009b8 <__udivmoddi4+0x2b0>
 800095c:	3802      	subs	r0, #2
 800095e:	4461      	add	r1, ip
 8000960:	1b49      	subs	r1, r1, r5
 8000962:	b292      	uxth	r2, r2
 8000964:	fbb1 f5f7 	udiv	r5, r1, r7
 8000968:	fb07 1115 	mls	r1, r7, r5, r1
 800096c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000970:	fb05 f10e 	mul.w	r1, r5, lr
 8000974:	4291      	cmp	r1, r2
 8000976:	d908      	bls.n	800098a <__udivmoddi4+0x282>
 8000978:	eb1c 0202 	adds.w	r2, ip, r2
 800097c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000980:	d216      	bcs.n	80009b0 <__udivmoddi4+0x2a8>
 8000982:	4291      	cmp	r1, r2
 8000984:	d914      	bls.n	80009b0 <__udivmoddi4+0x2a8>
 8000986:	3d02      	subs	r5, #2
 8000988:	4462      	add	r2, ip
 800098a:	1a52      	subs	r2, r2, r1
 800098c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000990:	e738      	b.n	8000804 <__udivmoddi4+0xfc>
 8000992:	4631      	mov	r1, r6
 8000994:	4630      	mov	r0, r6
 8000996:	e708      	b.n	80007aa <__udivmoddi4+0xa2>
 8000998:	4639      	mov	r1, r7
 800099a:	e6e6      	b.n	800076a <__udivmoddi4+0x62>
 800099c:	4610      	mov	r0, r2
 800099e:	e6fb      	b.n	8000798 <__udivmoddi4+0x90>
 80009a0:	4548      	cmp	r0, r9
 80009a2:	d2a9      	bcs.n	80008f8 <__udivmoddi4+0x1f0>
 80009a4:	ebb9 0802 	subs.w	r8, r9, r2
 80009a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80009ac:	3b01      	subs	r3, #1
 80009ae:	e7a3      	b.n	80008f8 <__udivmoddi4+0x1f0>
 80009b0:	4645      	mov	r5, r8
 80009b2:	e7ea      	b.n	800098a <__udivmoddi4+0x282>
 80009b4:	462b      	mov	r3, r5
 80009b6:	e794      	b.n	80008e2 <__udivmoddi4+0x1da>
 80009b8:	4640      	mov	r0, r8
 80009ba:	e7d1      	b.n	8000960 <__udivmoddi4+0x258>
 80009bc:	46d0      	mov	r8, sl
 80009be:	e77b      	b.n	80008b8 <__udivmoddi4+0x1b0>
 80009c0:	3d02      	subs	r5, #2
 80009c2:	4462      	add	r2, ip
 80009c4:	e732      	b.n	800082c <__udivmoddi4+0x124>
 80009c6:	4608      	mov	r0, r1
 80009c8:	e70a      	b.n	80007e0 <__udivmoddi4+0xd8>
 80009ca:	4464      	add	r4, ip
 80009cc:	3802      	subs	r0, #2
 80009ce:	e742      	b.n	8000856 <__udivmoddi4+0x14e>

080009d0 <__aeabi_idiv0>:
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <begin>:
    _displayfunction = LCD_8BITMODE | LCD_1LINE | LCD_5x8DOTS;

  begin(16, 2);
}

void begin(uint8_t cols, uint8_t lines) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	4603      	mov	r3, r0
 80009dc:	460a      	mov	r2, r1
 80009de:	71fb      	strb	r3, [r7, #7]
 80009e0:	4613      	mov	r3, r2
 80009e2:	71bb      	strb	r3, [r7, #6]
  /* Get CPU frequency */
  SystemCoreClockUpdate();
 80009e4:	f001 fc42 	bl	800226c <SystemCoreClockUpdate>
  _fcpu_mp = SystemCoreClock / 1000000;
 80009e8:	4b46      	ldr	r3, [pc, #280]	; (8000b04 <begin+0x130>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a46      	ldr	r2, [pc, #280]	; (8000b08 <begin+0x134>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	0c9b      	lsrs	r3, r3, #18
 80009f4:	4a45      	ldr	r2, [pc, #276]	; (8000b0c <begin+0x138>)
 80009f6:	6013      	str	r3, [r2, #0]

  if (lines > 1) {
 80009f8:	79bb      	ldrb	r3, [r7, #6]
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d906      	bls.n	8000a0c <begin+0x38>
    _displayfunction |= LCD_2LINE;
 80009fe:	4b44      	ldr	r3, [pc, #272]	; (8000b10 <begin+0x13c>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	f043 0308 	orr.w	r3, r3, #8
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b41      	ldr	r3, [pc, #260]	; (8000b10 <begin+0x13c>)
 8000a0a:	701a      	strb	r2, [r3, #0]
  }
  _numlines = lines;
 8000a0c:	4a41      	ldr	r2, [pc, #260]	; (8000b14 <begin+0x140>)
 8000a0e:	79bb      	ldrb	r3, [r7, #6]
 8000a10:	7013      	strb	r3, [r2, #0]

  setRowOffsets(0x00, 0x40, 0x00 + cols, 0x40 + cols);
 8000a12:	79fa      	ldrb	r2, [r7, #7]
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	3340      	adds	r3, #64	; 0x40
 8000a18:	2140      	movs	r1, #64	; 0x40
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f000 f886 	bl	8000b2c <setRowOffsets>

  // for some 1 line displays you can select a 10 pixel high font
  if ((dotsize != LCD_5x8DOTS) && (lines == 1)) {
 8000a20:	4b3d      	ldr	r3, [pc, #244]	; (8000b18 <begin+0x144>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d009      	beq.n	8000a3c <begin+0x68>
 8000a28:	79bb      	ldrb	r3, [r7, #6]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d106      	bne.n	8000a3c <begin+0x68>
    _displayfunction |= LCD_5x10DOTS;
 8000a2e:	4b38      	ldr	r3, [pc, #224]	; (8000b10 <begin+0x13c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	f043 0304 	orr.w	r3, r3, #4
 8000a36:	b2da      	uxtb	r2, r3
 8000a38:	4b35      	ldr	r3, [pc, #212]	; (8000b10 <begin+0x13c>)
 8000a3a:	701a      	strb	r2, [r3, #0]
//
//  if (_rw_pin != 255) {
//    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
//  }
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
  LCD_SET_RS(0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a42:	4836      	ldr	r0, [pc, #216]	; (8000b1c <begin+0x148>)
 8000a44:	f002 ff1a 	bl	800387c <HAL_GPIO_WritePin>
  LCD_SET_EN(0);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a4e:	4834      	ldr	r0, [pc, #208]	; (8000b20 <begin+0x14c>)
 8000a50:	f002 ff14 	bl	800387c <HAL_GPIO_WritePin>
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

  //put the LCD into 4 bit or 8 bit mode
  if (! (_displayfunction & LCD_8BITMODE)) {
 8000a54:	4b2e      	ldr	r3, [pc, #184]	; (8000b10 <begin+0x13c>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	f003 0310 	and.w	r3, r3, #16
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d115      	bne.n	8000a8c <begin+0xb8>
    // this is according to the hitachi HD44780 datasheet
    // figure 24, pg 46

    // we start in 8bit mode, try to set 4 bit mode
    write4bits(0x03);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f999 	bl	8000d98 <write4bits>
    DELAY_MS(5); // wait min 4.1ms
 8000a66:	2005      	movs	r0, #5
 8000a68:	f001 fe9a 	bl	80027a0 <HAL_Delay>

    // second try
    write4bits(0x03);
 8000a6c:	2003      	movs	r0, #3
 8000a6e:	f000 f993 	bl	8000d98 <write4bits>
    DELAY_MS(5); // wait min 4.1ms
 8000a72:	2005      	movs	r0, #5
 8000a74:	f001 fe94 	bl	80027a0 <HAL_Delay>

    // third go!
    write4bits(0x03);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f98d 	bl	8000d98 <write4bits>
    DELAY_MS(1);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f001 fe8e 	bl	80027a0 <HAL_Delay>

    // finally, set to 4-bit interface
    write4bits(0x02);
 8000a84:	2002      	movs	r0, #2
 8000a86:	f000 f987 	bl	8000d98 <write4bits>
 8000a8a:	e01d      	b.n	8000ac8 <begin+0xf4>
  } else {
    // this is according to the hitachi HD44780 datasheet
    // page 45 figure 23

    // Send function set command sequence
    command(LCD_FUNCTIONSET | _displayfunction);
 8000a8c:	4b20      	ldr	r3, [pc, #128]	; (8000b10 <begin+0x13c>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	f043 0320 	orr.w	r3, r3, #32
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f8f3 	bl	8000c82 <command>
    DELAY_MS(5);  // wait more than 4.1ms
 8000a9c:	2005      	movs	r0, #5
 8000a9e:	f001 fe7f 	bl	80027a0 <HAL_Delay>

    // second try
    command(LCD_FUNCTIONSET | _displayfunction);
 8000aa2:	4b1b      	ldr	r3, [pc, #108]	; (8000b10 <begin+0x13c>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	f043 0320 	orr.w	r3, r3, #32
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	4618      	mov	r0, r3
 8000aae:	f000 f8e8 	bl	8000c82 <command>
    DELAY_MS(1);
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f001 fe74 	bl	80027a0 <HAL_Delay>

    // third go
    command(LCD_FUNCTIONSET | _displayfunction);
 8000ab8:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <begin+0x13c>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	f043 0320 	orr.w	r3, r3, #32
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 f8dd 	bl	8000c82 <command>
  }

  // finally, set # lines, font size, etc.
  command(LCD_FUNCTIONSET | _displayfunction);
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <begin+0x13c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	f043 0320 	orr.w	r3, r3, #32
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f8d5 	bl	8000c82 <command>

  // turn the display on with no cursor or blinking default
  _displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000ad8:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <begin+0x150>)
 8000ada:	2204      	movs	r2, #4
 8000adc:	701a      	strb	r2, [r3, #0]
  display();
 8000ade:	f000 f881 	bl	8000be4 <display>

  // clear it off
  clear();
 8000ae2:	f000 f843 	bl	8000b6c <clear>

  // Initialize to default text direction (for romance languages)
  _displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <begin+0x154>)
 8000ae8:	2202      	movs	r2, #2
 8000aea:	701a      	strb	r2, [r3, #0]
  // set the entry mode
  command(LCD_ENTRYMODESET | _displaymode);
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <begin+0x154>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	f043 0304 	orr.w	r3, r3, #4
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f8c3 	bl	8000c82 <command>
}
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	200000a0 	.word	0x200000a0
 8000b08:	431bde83 	.word	0x431bde83
 8000b0c:	2000029c 	.word	0x2000029c
 8000b10:	20000291 	.word	0x20000291
 8000b14:	20000294 	.word	0x20000294
 8000b18:	20000290 	.word	0x20000290
 8000b1c:	40021400 	.word	0x40021400
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	20000292 	.word	0x20000292
 8000b28:	20000293 	.word	0x20000293

08000b2c <setRowOffsets>:
//
//  // if you have a port that is not listed add it below the other else ifs
//}

void setRowOffsets(int row0, int row1, int row2, int row3)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
 8000b38:	603b      	str	r3, [r7, #0]
  _row_offsets[0] = row0;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <setRowOffsets+0x3c>)
 8000b40:	701a      	strb	r2, [r3, #0]
  _row_offsets[1] = row1;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <setRowOffsets+0x3c>)
 8000b48:	705a      	strb	r2, [r3, #1]
  _row_offsets[2] = row2;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <setRowOffsets+0x3c>)
 8000b50:	709a      	strb	r2, [r3, #2]
  _row_offsets[3] = row3;
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <setRowOffsets+0x3c>)
 8000b58:	70da      	strb	r2, [r3, #3]
}
 8000b5a:	bf00      	nop
 8000b5c:	3714      	adds	r7, #20
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	20000298 	.word	0x20000298

08000b6c <clear>:

/********** high level commands, for the user! */
void clear(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  command(LCD_CLEARDISPLAY);  // clear display, set cursor position to zero
 8000b70:	2001      	movs	r0, #1
 8000b72:	f000 f886 	bl	8000c82 <command>
  DELAY_MS(2);  // this command takes a long time!
 8000b76:	2002      	movs	r0, #2
 8000b78:	f001 fe12 	bl	80027a0 <HAL_Delay>
}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <setCursor>:
  command(LCD_RETURNHOME);  // set cursor position to zero
  DELAY_MS(2);  // this command takes a long time!
}

void setCursor(uint8_t col, uint8_t row)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	460a      	mov	r2, r1
 8000b8a:	71fb      	strb	r3, [r7, #7]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	71bb      	strb	r3, [r7, #6]
  const size_t max_lines = sizeof(_row_offsets) / sizeof(*_row_offsets);
 8000b90:	2304      	movs	r3, #4
 8000b92:	60fb      	str	r3, [r7, #12]
  if ( row >= max_lines ) {
 8000b94:	79bb      	ldrb	r3, [r7, #6]
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d803      	bhi.n	8000ba4 <setCursor+0x24>
    row = max_lines - 1;    // we count rows starting w/0
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	71bb      	strb	r3, [r7, #6]
  }
  if ( row >= _numlines ) {
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	; (8000bdc <setCursor+0x5c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	79ba      	ldrb	r2, [r7, #6]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d303      	bcc.n	8000bb6 <setCursor+0x36>
    row = _numlines - 1;    // we count rows starting w/0
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <setCursor+0x5c>)
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	3b01      	subs	r3, #1
 8000bb4:	71bb      	strb	r3, [r7, #6]
  }

  command(LCD_SETDDRAMADDR | (col + _row_offsets[row]));
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	4a09      	ldr	r2, [pc, #36]	; (8000be0 <setCursor+0x60>)
 8000bba:	5cd2      	ldrb	r2, [r2, r3]
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bc8:	b25b      	sxtb	r3, r3
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f858 	bl	8000c82 <command>
}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000294 	.word	0x20000294
 8000be0:	20000298 	.word	0x20000298

08000be4 <display>:
// Turn the display on/off (quickly)
void noDisplay(void) {
  _displaycontrol &= ~LCD_DISPLAYON;
  command(LCD_DISPLAYCONTROL | _displaycontrol);
}
void display(void) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  _displaycontrol |= LCD_DISPLAYON;
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <display+0x28>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	b2da      	uxtb	r2, r3
 8000bf2:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <display+0x28>)
 8000bf4:	701a      	strb	r2, [r3, #0]
  command(LCD_DISPLAYCONTROL | _displaycontrol);
 8000bf6:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <display+0x28>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	f043 0308 	orr.w	r3, r3, #8
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	4618      	mov	r0, r3
 8000c02:	f000 f83e 	bl	8000c82 <command>
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000292 	.word	0x20000292

08000c10 <print_str>:
  _displaymode &= ~LCD_ENTRYSHIFTINCREMENT;
  command(LCD_ENTRYMODESET | _displaymode);
}

// This will print character string to the LCD
uint32_t print_str(const char str[]) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  if (str == NULL) return 0;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d101      	bne.n	8000c22 <print_str+0x12>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e01d      	b.n	8000c5e <print_str+0x4e>

  const uint8_t *buffer = (const uint8_t *)str;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	617b      	str	r3, [r7, #20]
  size_t size = strlen(str);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fb5a 	bl	80002e0 <strlen>
 8000c2c:	6138      	str	r0, [r7, #16]
  size_t n = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]

  while (size--) {
 8000c32:	e00c      	b.n	8000c4e <print_str+0x3e>
    if (write(*buffer++)) n++;
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	1c5a      	adds	r2, r3, #1
 8000c38:	617a      	str	r2, [r7, #20]
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f000 f82e 	bl	8000c9e <write>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d008      	beq.n	8000c5a <print_str+0x4a>
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
  while (size--) {
 8000c4e:	693b      	ldr	r3, [r7, #16]
 8000c50:	1e5a      	subs	r2, r3, #1
 8000c52:	613a      	str	r2, [r7, #16]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d1ed      	bne.n	8000c34 <print_str+0x24>
 8000c58:	e000      	b.n	8000c5c <print_str+0x4c>
    else break;
 8000c5a:	bf00      	nop
  }
  return n;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3718      	adds	r7, #24
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <print_char>:

uint32_t print_char(const char simb) {
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b082      	sub	sp, #8
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	71fb      	strb	r3, [r7, #7]
  write(simb);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 f813 	bl	8000c9e <write>
  return 1;
 8000c78:	2301      	movs	r3, #1
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <command>:
  }
}

/*********** mid level commands, for sending data/cmds */

inline void command(uint8_t value) {
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  send(value, 0);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	2100      	movs	r1, #0
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f813 	bl	8000cbc <send>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <write>:

inline uint32_t write(uint8_t value) {
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  send(value, 1);
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2101      	movs	r1, #1
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 f805 	bl	8000cbc <send>
  return 1; // assume success
 8000cb2:	2301      	movs	r3, #1
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <send>:

/************ low level data pushing commands **********/

// write either command or data, with automatic 4/8-bit selection
void send(uint8_t value, uint8_t mode) {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	460a      	mov	r2, r1
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	4613      	mov	r3, r2
 8000cca:	71bb      	strb	r3, [r7, #6]
//  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, _rs_pin, mode);
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
  LCD_SET_RS(mode);
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd4:	480d      	ldr	r0, [pc, #52]	; (8000d0c <send+0x50>)
 8000cd6:	f002 fdd1 	bl	800387c <HAL_GPIO_WritePin>
  // if there is a RW pin indicated, set it low to Write
//  if (_rw_pin != 255) {
//    HAL_GPIO_WritePin(_port, _rw_pin, GPIO_PIN_RESET);
//  }

  if (_displayfunction & LCD_8BITMODE) {
 8000cda:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <send+0x54>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d004      	beq.n	8000cf0 <send+0x34>
    write8bits(value);
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f000 f893 	bl	8000e14 <write8bits>
  } else {
    write4bits(value>>4);
    write4bits(value);
  }
}
 8000cee:	e009      	b.n	8000d04 <send+0x48>
    write4bits(value>>4);
 8000cf0:	79fb      	ldrb	r3, [r7, #7]
 8000cf2:	091b      	lsrs	r3, r3, #4
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 f84e 	bl	8000d98 <write4bits>
    write4bits(value);
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	4618      	mov	r0, r3
 8000d00:	f000 f84a 	bl	8000d98 <write4bits>
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40021400 	.word	0x40021400
 8000d10:	20000291 	.word	0x20000291

08000d14 <pulseEnable>:

void pulseEnable(void) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
//  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, _enable_pin, GPIO_PIN_SET);
//  HAL_Delay(1);    // enable pulse must be >450ns
//  HAL_GPIO_WritePin(LCD_EN_GPIO_Port, _enable_pin, GPIO_PIN_RESET);
//  HAL_Delay(1);   // commands need > 37us to settle
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
  LCD_SET_EN(0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d20:	481b      	ldr	r0, [pc, #108]	; (8000d90 <pulseEnable+0x7c>)
 8000d22:	f002 fdab 	bl	800387c <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < _fcpu_mp; i++) __NOP();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	e003      	b.n	8000d34 <pulseEnable+0x20>
 8000d2c:	bf00      	nop
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	3301      	adds	r3, #1
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <pulseEnable+0x80>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	68fa      	ldr	r2, [r7, #12]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d3f6      	bcc.n	8000d2c <pulseEnable+0x18>
  LCD_SET_EN(1);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <pulseEnable+0x7c>)
 8000d46:	f002 fd99 	bl	800387c <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < _fcpu_mp; i++) __NOP();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60bb      	str	r3, [r7, #8]
 8000d4e:	e003      	b.n	8000d58 <pulseEnable+0x44>
 8000d50:	bf00      	nop
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	3301      	adds	r3, #1
 8000d56:	60bb      	str	r3, [r7, #8]
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <pulseEnable+0x80>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	68ba      	ldr	r2, [r7, #8]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d3f6      	bcc.n	8000d50 <pulseEnable+0x3c>
  LCD_SET_EN(0);
 8000d62:	2200      	movs	r2, #0
 8000d64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d68:	4809      	ldr	r0, [pc, #36]	; (8000d90 <pulseEnable+0x7c>)
 8000d6a:	f002 fd87 	bl	800387c <HAL_GPIO_WritePin>
  for (uint32_t i = 0; i < _fcpu_mp; i++) __NOP();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	607b      	str	r3, [r7, #4]
 8000d72:	e003      	b.n	8000d7c <pulseEnable+0x68>
 8000d74:	bf00      	nop
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <pulseEnable+0x80>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	687a      	ldr	r2, [r7, #4]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d3f6      	bcc.n	8000d74 <pulseEnable+0x60>
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
}
 8000d86:	bf00      	nop
 8000d88:	bf00      	nop
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	2000029c 	.word	0x2000029c

08000d98 <write4bits>:

void write4bits(uint8_t value) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
//  for (int i = 0; i < 4; i++) {
//    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
//  }
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
	LCD_SET_D4(((value >> 0) & 1) ? 1 : 0);
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db0:	4816      	ldr	r0, [pc, #88]	; (8000e0c <write4bits+0x74>)
 8000db2:	f002 fd63 	bl	800387c <HAL_GPIO_WritePin>
	LCD_SET_D5(((value >> 1) & 1) ? 1 : 0);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	085b      	lsrs	r3, r3, #1
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc8:	4811      	ldr	r0, [pc, #68]	; (8000e10 <write4bits+0x78>)
 8000dca:	f002 fd57 	bl	800387c <HAL_GPIO_WritePin>
	LCD_SET_D6(((value >> 2) & 1) ? 1 : 0);
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	089b      	lsrs	r3, r3, #2
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	461a      	mov	r2, r3
 8000ddc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000de0:	480b      	ldr	r0, [pc, #44]	; (8000e10 <write4bits+0x78>)
 8000de2:	f002 fd4b 	bl	800387c <HAL_GPIO_WritePin>
	LCD_SET_D7(((value >> 3) & 1) ? 1 : 0);
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	08db      	lsrs	r3, r3, #3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	461a      	mov	r2, r3
 8000df4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000df8:	4804      	ldr	r0, [pc, #16]	; (8000e0c <write4bits+0x74>)
 8000dfa:	f002 fd3f 	bl	800387c <HAL_GPIO_WritePin>
  /*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

  pulseEnable();
 8000dfe:	f7ff ff89 	bl	8000d14 <pulseEnable>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021400 	.word	0x40021400
 8000e10:	40021000 	.word	0x40021000

08000e14 <write8bits>:

void write8bits(uint8_t value) {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
//  for (int i = 0; i < 8; i++) {
//    HAL_GPIO_WritePin(_port, _data_pins[i], ((value >> i) & 0x01)?GPIO_PIN_SET:GPIO_PIN_RESET);
//  }
//
//  pulseEnable();
}
 8000e1e:	bf00      	nop
 8000e20:	370c      	adds	r7, #12
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
	...

08000e2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e3e:	4b2f      	ldr	r3, [pc, #188]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e40:	4a2f      	ldr	r2, [pc, #188]	; (8000f00 <MX_ADC1_Init+0xd4>)
 8000e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e44:	4b2d      	ldr	r3, [pc, #180]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4c:	4b2b      	ldr	r3, [pc, #172]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e52:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e58:	4b28      	ldr	r3, [pc, #160]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5e:	4b27      	ldr	r3, [pc, #156]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e66:	4b25      	ldr	r3, [pc, #148]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6c:	4b23      	ldr	r3, [pc, #140]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e6e:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <MX_ADC1_Init+0xd8>)
 8000e70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e72:	4b22      	ldr	r3, [pc, #136]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000e78:	4b20      	ldr	r3, [pc, #128]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7e:	4b1f      	ldr	r3, [pc, #124]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e86:	4b1d      	ldr	r3, [pc, #116]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8c:	481b      	ldr	r0, [pc, #108]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000e8e:	f001 fcab 	bl	80027e8 <HAL_ADC_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e98:	f001 f809 	bl	8001eae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000ea4:	2307      	movs	r3, #7
 8000ea6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea8:	463b      	mov	r3, r7
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4813      	ldr	r0, [pc, #76]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000eae:	f001 ff23 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000eb8:	f000 fff9 	bl	8001eae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ebc:	2305      	movs	r3, #5
 8000ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ec4:	463b      	mov	r3, r7
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	480c      	ldr	r0, [pc, #48]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000eca:	f001 ff15 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000ed4:	f000 ffeb 	bl	8001eae <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000edc:	2303      	movs	r3, #3
 8000ede:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee0:	463b      	mov	r3, r7
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_ADC1_Init+0xd0>)
 8000ee6:	f001 ff07 	bl	8002cf8 <HAL_ADC_ConfigChannel>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000ef0:	f000 ffdd 	bl	8001eae <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200002a0 	.word	0x200002a0
 8000f00:	40012000 	.word	0x40012000
 8000f04:	0f000001 	.word	0x0f000001

08000f08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a19      	ldr	r2, [pc, #100]	; (8000f8c <HAL_ADC_MspInit+0x84>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12b      	bne.n	8000f82 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f2a:	4b19      	ldr	r3, [pc, #100]	; (8000f90 <HAL_ADC_MspInit+0x88>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a18      	ldr	r2, [pc, #96]	; (8000f90 <HAL_ADC_MspInit+0x88>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <HAL_ADC_MspInit+0x88>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3e:	613b      	str	r3, [r7, #16]
 8000f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f42:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_ADC_MspInit+0x88>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <HAL_ADC_MspInit+0x88>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_ADC_MspInit+0x88>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_6;
 8000f5a:	2368      	movs	r3, #104	; 0x68
 8000f5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4809      	ldr	r0, [pc, #36]	; (8000f94 <HAL_ADC_MspInit+0x8c>)
 8000f6e:	f002 fac1 	bl	80034f4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 7, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2107      	movs	r1, #7
 8000f76:	2012      	movs	r0, #18
 8000f78:	f002 f9f3 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000f7c:	2012      	movs	r0, #18
 8000f7e:	f002 fa0c 	bl	800339a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f82:	bf00      	nop
 8000f84:	3728      	adds	r7, #40	; 0x28
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40012000 	.word	0x40012000
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020000 	.word	0x40020000

08000f98 <SerialAPI_GetStatus>:
 *	@param	gSBGC - pointer to serial connection descriptor
 *
 *	@return	sbgcGeneral_t._lastCommandStatus
 */
static inline sbgcCommandStatus_t SerialAPI_GetStatus (sbgcGeneral_t *gSBGC)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	return gSBGC->_lastCommandStatus;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	7a5b      	ldrb	r3, [r3, #9]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <SerialAPI_GetRxErrorsNumber>:
 *	@param	gSBGC - pointer to serial connection descriptor
 *
 *	@return	serialAPI_General_t.rxErrorsCount
 */
static inline ui16 SerialAPI_GetRxErrorsNumber (sbgcGeneral_t *gSBGC)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	return gSBGC->_api->rxErrorsCount;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	8a9b      	ldrh	r3, [r3, #20]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <AverageValue>:
	averageValue->avgRes = 0;
}


static inline void AverageValue (AverageValue_t *averageValue, i16 value)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
	averageValue->avgBuff += (i32)value - (i32)averageValue->avgRes;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fde:	6879      	ldr	r1, [r7, #4]
 8000fe0:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8000fe4:	1a5b      	subs	r3, r3, r1
 8000fe6:	441a      	add	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = (i16)(averageValue->avgBuff >> averageValue->_factor);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	7992      	ldrb	r2, [r2, #6]
 8000ff4:	4113      	asrs	r3, r2
 8000ff6:	b21a      	sxth	r2, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	809a      	strh	r2, [r3, #4]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr

08001008 <LCD_PrintProgress>:


static inline void LCD_PrintProgress (LCD_RemoteGeneral_t *LCD_RemoteGeneral, ui8 cursor_pos)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	460b      	mov	r3, r1
 8001012:	70fb      	strb	r3, [r7, #3]
	for (ui8 i = 0; i < 3; i++)
 8001014:	2300      	movs	r3, #0
 8001016:	73fb      	strb	r3, [r7, #15]
 8001018:	e01a      	b.n	8001050 <LCD_PrintProgress+0x48>
		cursor_pos += print_char(((ui8)(LCD_RemoteGeneral->currentTimeMs / 1000)) % 4 > i ? '.' : ' ');
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	4a10      	ldr	r2, [pc, #64]	; (8001060 <LCD_PrintProgress+0x58>)
 8001020:	fba2 2303 	umull	r2, r3, r2, r3
 8001024:	099b      	lsrs	r3, r3, #6
 8001026:	b2db      	uxtb	r3, r3
 8001028:	f003 0303 	and.w	r3, r3, #3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	429a      	cmp	r2, r3
 8001032:	d201      	bcs.n	8001038 <LCD_PrintProgress+0x30>
 8001034:	232e      	movs	r3, #46	; 0x2e
 8001036:	e000      	b.n	800103a <LCD_PrintProgress+0x32>
 8001038:	2320      	movs	r3, #32
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fe13 	bl	8000c66 <print_char>
 8001040:	4603      	mov	r3, r0
 8001042:	b2da      	uxtb	r2, r3
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	4413      	add	r3, r2
 8001048:	70fb      	strb	r3, [r7, #3]
	for (ui8 i = 0; i < 3; i++)
 800104a:	7bfb      	ldrb	r3, [r7, #15]
 800104c:	3301      	adds	r3, #1
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	7bfb      	ldrb	r3, [r7, #15]
 8001052:	2b02      	cmp	r3, #2
 8001054:	d9e1      	bls.n	800101a <LCD_PrintProgress+0x12>
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	10624dd3 	.word	0x10624dd3

08001064 <LCD_FillSpace>:


static inline void LCD_FillSpace (ui8 *cursor_pos, ui8 to_pos)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	70fb      	strb	r3, [r7, #3]
	while (*cursor_pos < to_pos)
 8001070:	e008      	b.n	8001084 <LCD_FillSpace+0x20>
	{
		print_char(' ');
 8001072:	2020      	movs	r0, #32
 8001074:	f7ff fdf7 	bl	8000c66 <print_char>
		(*cursor_pos)++;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	701a      	strb	r2, [r3, #0]
	while (*cursor_pos < to_pos)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	78fa      	ldrb	r2, [r7, #3]
 800108a:	429a      	cmp	r2, r3
 800108c:	d8f1      	bhi.n	8001072 <LCD_FillSpace+0xe>
	}
}
 800108e:	bf00      	nop
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <ProcessHandler>:
 */
/* Process incoming commands. Call it as frequently as possible,
   to prevent overrun of serial input buffer */
void ProcessHandler (sbgcGeneral_t *sbgcGeneral, LCD_RemoteGeneral_t *LCD_RemoteGeneral,
					 sbgcRealTimeData_t *realTimeData, sbgcAdjVarGeneral_t *adjVarGeneral)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
 80010a4:	603b      	str	r3, [r7, #0]
	if (SerialAPI_GetStatus(sbgcGeneral) == sbgcCOMMAND_OK)
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff ff76 	bl	8000f98 <SerialAPI_GetStatus>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d14e      	bne.n	8001150 <ProcessHandler+0xb8>
	{
		if (LCD_RemoteGeneral->connectFlag == 0)
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d10a      	bne.n	80010d2 <ProcessHandler+0x3a>
		{
			LCD_RemoteGeneral->connectFlag = 1;
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2201      	movs	r2, #1
 80010c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			SBGC32_GetAdjVarValues(sbgcGeneral, adjVarGeneral, LCD_RemoteGeneral->adjVarQuan);
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	7f5b      	ldrb	r3, [r3, #29]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6839      	ldr	r1, [r7, #0]
 80010cc:	68f8      	ldr	r0, [r7, #12]
 80010ce:	f008 fb7f 	bl	80097d0 <SBGC32_GetAdjVarValues>
		}

		ui32 err = (ui32)(abs(realTimeData->IMU_Angle[ROLL] - realTimeData->targetAngle[ROLL])
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80010d8:	b21b      	sxth	r3, r3
 80010da:	461a      	mov	r2, r3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80010ea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
				 + abs(realTimeData->IMU_Angle[PITCH] - realTimeData->targetAngle[PITCH])
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4619      	mov	r1, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 80010fe:	b21b      	sxth	r3, r3
 8001100:	1acb      	subs	r3, r1, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	bfb8      	it	lt
 8001106:	425b      	neglt	r3, r3
 8001108:	441a      	add	r2, r3
				 + abs(realTimeData->IMU_Angle[YAW] - realTimeData->targetAngle[YAW])) * (ui32)((1 / SBGC_ANGLE_SCALE) * 1000);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001110:	b21b      	sxth	r3, r3
 8001112:	4619      	mov	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800111a:	b21b      	sxth	r3, r3
 800111c:	1acb      	subs	r3, r1, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	bfb8      	it	lt
 8001122:	425b      	neglt	r3, r3
 8001124:	4413      	add	r3, r2
		ui32 err = (ui32)(abs(realTimeData->IMU_Angle[ROLL] - realTimeData->targetAngle[ROLL])
 8001126:	461a      	mov	r2, r3
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	00da      	lsls	r2, r3, #3
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	617b      	str	r3, [r7, #20]

		 AverageValue(&LCD_RemoteGeneral->TargetErrorAverage, constrain_(err, 0, 999));
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f103 0210 	add.w	r2, r3, #16
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001140:	428b      	cmp	r3, r1
 8001142:	bf28      	it	cs
 8001144:	460b      	movcs	r3, r1
 8001146:	b21b      	sxth	r3, r3
 8001148:	4619      	mov	r1, r3
 800114a:	4610      	mov	r0, r2
 800114c:	f7ff ff3d 	bl	8000fca <AverageValue>
	}

	/* If no commands for a long time, set connected state to false */
	if (LCD_RemoteGeneral->connectFlag && (LCD_RemoteGeneral->currentTimeMs - LCD_RemoteGeneral->rtReqCmdTimeMs) > MAX_WAIT_TIME_MS)
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001156:	2b00      	cmp	r3, #0
 8001158:	d00b      	beq.n	8001172 <ProcessHandler+0xda>
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	6a1a      	ldr	r2, [r3, #32]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001168:	d903      	bls.n	8001172 <ProcessHandler+0xda>
		LCD_RemoteGeneral->connectFlag = 0;  // last_bt_connect_ms = currentTimeMs;
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
}
 8001172:	bf00      	nop
 8001174:	3718      	adds	r7, #24
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <DebounceNavigationButton>:

/* De-bounce button: it should keep its state for a given period
   of time, specified in the BTN_BOUNCE_THRESHOLD_MS returns 1
   if LCD_RemoteGeneral->....triggerState is changed. */
ui8 DebounceNavigationButton (LCD_RemoteGeneral_t *LCD_RemoteGeneral, ButtonDirection_t newState)
{
 800117a:	b480      	push	{r7}
 800117c:	b083      	sub	sp, #12
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
 8001182:	460b      	mov	r3, r1
 8001184:	70fb      	strb	r3, [r7, #3]
	if (newState != LCD_RemoteGeneral->NavButton.state)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7e9b      	ldrb	r3, [r3, #26]
 800118a:	78fa      	ldrb	r2, [r7, #3]
 800118c:	429a      	cmp	r2, r3
 800118e:	d008      	beq.n	80011a2 <DebounceNavigationButton+0x28>
	{
		LCD_RemoteGeneral->NavButton.state = newState;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	78fa      	ldrb	r2, [r7, #3]
 8001194:	769a      	strb	r2, [r3, #26]
		LCD_RemoteGeneral->NavButton.lastTimeMs = LCD_RemoteGeneral->currentTimeMs;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6a1b      	ldr	r3, [r3, #32]
 800119a:	b29a      	uxth	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	831a      	strh	r2, [r3, #24]
 80011a0:	e014      	b.n	80011cc <DebounceNavigationButton+0x52>
	}

	else if (LCD_RemoteGeneral->NavButton.triggerState != LCD_RemoteGeneral->NavButton.state &&
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	7eda      	ldrb	r2, [r3, #27]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7e9b      	ldrb	r3, [r3, #26]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	d00e      	beq.n	80011cc <DebounceNavigationButton+0x52>
			 (ui16)(LCD_RemoteGeneral->currentTimeMs - LCD_RemoteGeneral->NavButton.lastTimeMs) > SOFTWARE_ANTI_BOUNCE)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6a1b      	ldr	r3, [r3, #32]
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	8b1b      	ldrh	r3, [r3, #24]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	b29b      	uxth	r3, r3
	else if (LCD_RemoteGeneral->NavButton.triggerState != LCD_RemoteGeneral->NavButton.state &&
 80011bc:	2b64      	cmp	r3, #100	; 0x64
 80011be:	d905      	bls.n	80011cc <DebounceNavigationButton+0x52>
	{
		LCD_RemoteGeneral->NavButton.triggerState = LCD_RemoteGeneral->NavButton.state;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7e9a      	ldrb	r2, [r3, #26]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	76da      	strb	r2, [r3, #27]
		return 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <DebounceNavigationButton+0x54>
	}

	return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <ReadNavigationButtonState>:


/* Reads the state of buttons */
ButtonDirection_t ReadNavigationButtonState (InputsInfo_t *inputsInfo)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b084      	sub	sp, #16
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
	ReadADC_Inputs(inputsInfo);  // start next conversions
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f000 f93d 	bl	8001462 <ReadADC_Inputs>

	ui16 navBtnLevel = inputsInfo->ADC_INx[ADC_NAV];
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	81fb      	strh	r3, [r7, #14]

	if (navBtnLevel >= 3600)
 80011ee:	89fb      	ldrh	r3, [r7, #14]
 80011f0:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80011f4:	d301      	bcc.n	80011fa <ReadNavigationButtonState+0x20>
		return NAV_BTN_RELEASED;
 80011f6:	2300      	movs	r3, #0
 80011f8:	e025      	b.n	8001246 <ReadNavigationButtonState+0x6c>

	if (navBtnLevel < 150)
 80011fa:	89fb      	ldrh	r3, [r7, #14]
 80011fc:	2b95      	cmp	r3, #149	; 0x95
 80011fe:	d801      	bhi.n	8001204 <ReadNavigationButtonState+0x2a>
		return NAV_BTN_LEFT;
 8001200:	2304      	movs	r3, #4
 8001202:	e020      	b.n	8001246 <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 600)
 8001204:	89fb      	ldrh	r3, [r7, #14]
 8001206:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800120a:	d201      	bcs.n	8001210 <ReadNavigationButtonState+0x36>
		return NAV_BTN_UP;
 800120c:	2302      	movs	r3, #2
 800120e:	e01a      	b.n	8001246 <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 1300)
 8001210:	89fb      	ldrh	r3, [r7, #14]
 8001212:	f240 5213 	movw	r2, #1299	; 0x513
 8001216:	4293      	cmp	r3, r2
 8001218:	d801      	bhi.n	800121e <ReadNavigationButtonState+0x44>
		return NAV_BTN_RIGHT;
 800121a:	2301      	movs	r3, #1
 800121c:	e013      	b.n	8001246 <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 2000)
 800121e:	89fb      	ldrh	r3, [r7, #14]
 8001220:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001224:	d201      	bcs.n	800122a <ReadNavigationButtonState+0x50>
		return NAV_BTN_SELECT;
 8001226:	2305      	movs	r3, #5
 8001228:	e00d      	b.n	8001246 <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 2900)
 800122a:	89fb      	ldrh	r3, [r7, #14]
 800122c:	f640 3253 	movw	r2, #2899	; 0xb53
 8001230:	4293      	cmp	r3, r2
 8001232:	d801      	bhi.n	8001238 <ReadNavigationButtonState+0x5e>
		return NAV_BTN_DOWN;
 8001234:	2303      	movs	r3, #3
 8001236:	e006      	b.n	8001246 <ReadNavigationButtonState+0x6c>
	if (navBtnLevel < 3600)
 8001238:	89fb      	ldrh	r3, [r7, #14]
 800123a:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 800123e:	d201      	bcs.n	8001244 <ReadNavigationButtonState+0x6a>
		return NAV_BTN_ENCODER_SELECT;
 8001240:	2306      	movs	r3, #6
 8001242:	e000      	b.n	8001246 <ReadNavigationButtonState+0x6c>

	return NAV_BTN_RELEASED;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <UpdateDisplay>:


/* Re-paint display */
void UpdateDisplay (sbgcGeneral_t *sbgcGeneral, LCD_RemoteGeneral_t *LCD_RemoteGeneral,
					sbgcRealTimeData_t *realTimeData, sbgcAdjVarGeneral_t *adjVarGeneral)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b08d      	sub	sp, #52	; 0x34
 8001254:	af02      	add	r7, sp, #8
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	603b      	str	r3, [r7, #0]
	/* First raw */
	setCursor(0, 0);
 800125e:	2100      	movs	r1, #0
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fc8d 	bl	8000b80 <setCursor>

	char buf [17];

	ui8 pos = 0;
 8001266:	2300      	movs	r3, #0
 8001268:	74fb      	strb	r3, [r7, #19]

	LCD_RemoteGeneral->currentPage = (LCD_RemoteGeneral->currentPage + 50) % 5;  // Should be in the range of available pages
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001270:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001274:	4b64      	ldr	r3, [pc, #400]	; (8001408 <UpdateDisplay+0x1b8>)
 8001276:	fb83 1302 	smull	r1, r3, r3, r2
 800127a:	1059      	asrs	r1, r3, #1
 800127c:	17d3      	asrs	r3, r2, #31
 800127e:	1ac9      	subs	r1, r1, r3
 8001280:	460b      	mov	r3, r1
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	440b      	add	r3, r1
 8001286:	1ad1      	subs	r1, r2, r3
 8001288:	b24a      	sxtb	r2, r1
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	switch (LCD_RemoteGeneral->currentPage)
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001296:	2b04      	cmp	r3, #4
 8001298:	d875      	bhi.n	8001386 <UpdateDisplay+0x136>
 800129a:	a201      	add	r2, pc, #4	; (adr r2, 80012a0 <UpdateDisplay+0x50>)
 800129c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a0:	080012b5 	.word	0x080012b5
 80012a4:	08001325 	.word	0x08001325
 80012a8:	0800133d 	.word	0x0800133d
 80012ac:	08001357 	.word	0x08001357
 80012b0:	08001371 	.word	0x08001371
	{
		case 0 : /* PAGE 0 */
			if (LCD_RemoteGeneral->connectFlag)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d028      	beq.n	8001310 <UpdateDisplay+0xc0>
				sprintf(buf, "%2d.%02dV P:%d E:%03d", realTimeData->batLevel / 100, realTimeData->batLevel % 100,
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f8b3 3037 	ldrh.w	r3, [r3, #55]	; 0x37
 80012c4:	b29b      	uxth	r3, r3
 80012c6:	4a51      	ldr	r2, [pc, #324]	; (800140c <UpdateDisplay+0x1bc>)
 80012c8:	fba2 2303 	umull	r2, r3, r2, r3
 80012cc:	095b      	lsrs	r3, r3, #5
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	461c      	mov	r4, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8b3 3037 	ldrh.w	r3, [r3, #55]	; 0x37
 80012d8:	b29b      	uxth	r3, r3
 80012da:	4a4c      	ldr	r2, [pc, #304]	; (800140c <UpdateDisplay+0x1bc>)
 80012dc:	fba2 1203 	umull	r1, r2, r2, r3
 80012e0:	0952      	lsrs	r2, r2, #5
 80012e2:	2164      	movs	r1, #100	; 0x64
 80012e4:	fb01 f202 	mul.w	r2, r1, r2
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	4619      	mov	r1, r3
						realTimeData->curProfile + 1, LCD_RemoteGeneral->TargetErrorAverage.avgRes);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
				sprintf(buf, "%2d.%02dV P:%d E:%03d", realTimeData->batLevel / 100, realTimeData->batLevel % 100,
 80012f4:	3301      	adds	r3, #1
						realTimeData->curProfile + 1, LCD_RemoteGeneral->TargetErrorAverage.avgRes);
 80012f6:	68ba      	ldr	r2, [r7, #8]
 80012f8:	f9b2 2014 	ldrsh.w	r2, [r2, #20]
				sprintf(buf, "%2d.%02dV P:%d E:%03d", realTimeData->batLevel / 100, realTimeData->batLevel % 100,
 80012fc:	f107 0014 	add.w	r0, r7, #20
 8001300:	9201      	str	r2, [sp, #4]
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	460b      	mov	r3, r1
 8001306:	4622      	mov	r2, r4
 8001308:	4941      	ldr	r1, [pc, #260]	; (8001410 <UpdateDisplay+0x1c0>)
 800130a:	f009 fc51 	bl	800abb0 <siprintf>

			else
				LCD_PrintProgress(LCD_RemoteGeneral, print_str("CONNECTING"));

			break;
 800130e:	e03a      	b.n	8001386 <UpdateDisplay+0x136>
				LCD_PrintProgress(LCD_RemoteGeneral, print_str("CONNECTING"));
 8001310:	4840      	ldr	r0, [pc, #256]	; (8001414 <UpdateDisplay+0x1c4>)
 8001312:	f7ff fc7d 	bl	8000c10 <print_str>
 8001316:	4603      	mov	r3, r0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	4619      	mov	r1, r3
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f7ff fe73 	bl	8001008 <LCD_PrintProgress>
			break;
 8001322:	e030      	b.n	8001386 <UpdateDisplay+0x136>

		case 1 :  /* PAGE 1 */
			sprintf(buf, "SE: %03d FM:", SerialAPI_GetRxErrorsNumber(sbgcGeneral));
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f7ff fe43 	bl	8000fb0 <SerialAPI_GetRxErrorsNumber>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	f107 0314 	add.w	r3, r7, #20
 8001332:	4939      	ldr	r1, [pc, #228]	; (8001418 <UpdateDisplay+0x1c8>)
 8001334:	4618      	mov	r0, r3
 8001336:	f009 fc3b 	bl	800abb0 <siprintf>
			break;
 800133a:	e024      	b.n	8001386 <UpdateDisplay+0x136>

		case 2 :  /* PAGE 2 */
			sprintf(buf, " D1:%3d  D2:%3d", LCD_RemoteGeneral->debug1, LCD_RemoteGeneral->debug2);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001342:	461a      	mov	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800134a:	f107 0014 	add.w	r0, r7, #20
 800134e:	4933      	ldr	r1, [pc, #204]	; (800141c <UpdateDisplay+0x1cc>)
 8001350:	f009 fc2e 	bl	800abb0 <siprintf>
			break;
 8001354:	e017      	b.n	8001386 <UpdateDisplay+0x136>

		case 3 :  /* PAGE 3 */
			sprintf(buf, " D3:%3d  D4:%3d", LCD_RemoteGeneral->debug3, LCD_RemoteGeneral->debug4);
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 800135c:	461a      	mov	r2, r3
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001364:	f107 0014 	add.w	r0, r7, #20
 8001368:	492d      	ldr	r1, [pc, #180]	; (8001420 <UpdateDisplay+0x1d0>)
 800136a:	f009 fc21 	bl	800abb0 <siprintf>
			break;
 800136e:	e00a      	b.n	8001386 <UpdateDisplay+0x136>

		case 4 :  /* PAGE 4 */
			sprintf(buf, "I2C_ERRORS: %03d", realTimeData->I2C_ErrorCount);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001374:	b29b      	uxth	r3, r3
 8001376:	461a      	mov	r2, r3
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4929      	ldr	r1, [pc, #164]	; (8001424 <UpdateDisplay+0x1d4>)
 800137e:	4618      	mov	r0, r3
 8001380:	f009 fc16 	bl	800abb0 <siprintf>
			break;
 8001384:	bf00      	nop
	}

	pos = print_str(buf);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fc40 	bl	8000c10 <print_str>
 8001390:	4603      	mov	r3, r0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	74fb      	strb	r3, [r7, #19]

	LCD_FillSpace(&pos, LCD_COLS);
 8001396:	f107 0313 	add.w	r3, r7, #19
 800139a:	2110      	movs	r1, #16
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fe61 	bl	8001064 <LCD_FillSpace>

	/* Second raw */
	setCursor(0, 1);
 80013a2:	2101      	movs	r1, #1
 80013a4:	2000      	movs	r0, #0
 80013a6:	f7ff fbeb 	bl	8000b80 <setCursor>
			sprintf(&buf[pos], "%c", adjVarGeneral[LCD_RemoteGeneral->currentAdjVarIndex].name[pos + 8]);  // offset due to ADJ_VAR_ (+ 8)
		}

	#endif

	sprintf(&buf[pos], ":%li", adjVarGeneral[LCD_RemoteGeneral->currentAdjVarIndex].value);
 80013aa:	7cfb      	ldrb	r3, [r7, #19]
 80013ac:	461a      	mov	r2, r3
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	1898      	adds	r0, r3, r2
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	7f1b      	ldrb	r3, [r3, #28]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	461a      	mov	r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	68db      	ldr	r3, [r3, #12]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4916      	ldr	r1, [pc, #88]	; (8001428 <UpdateDisplay+0x1d8>)
 80013ce:	f009 fbef 	bl	800abb0 <siprintf>
	pos = print_str(buf);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fc1a 	bl	8000c10 <print_str>
 80013dc:	4603      	mov	r3, r0
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	74fb      	strb	r3, [r7, #19]

	LCD_FillSpace(&pos, LCD_COLS);
 80013e2:	f107 0313 	add.w	r3, r7, #19
 80013e6:	2110      	movs	r1, #16
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fe3b 	bl	8001064 <LCD_FillSpace>

	LCD_RemoteGeneral->lowRateTimeMs = LCD_RemoteGeneral->currentTimeMs;
 80013ee:	68bb      	ldr	r3, [r7, #8]
 80013f0:	6a1a      	ldr	r2, [r3, #32]
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	625a      	str	r2, [r3, #36]	; 0x24
	LCD_RemoteGeneral->updateDisplayFlag = DISPLAY_UPDATED;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
}
 80013fe:	bf00      	nop
 8001400:	372c      	adds	r7, #44	; 0x2c
 8001402:	46bd      	mov	sp, r7
 8001404:	bd90      	pop	{r4, r7, pc}
 8001406:	bf00      	nop
 8001408:	66666667 	.word	0x66666667
 800140c:	51eb851f 	.word	0x51eb851f
 8001410:	0800e208 	.word	0x0800e208
 8001414:	0800e220 	.word	0x0800e220
 8001418:	0800e22c 	.word	0x0800e22c
 800141c:	0800e23c 	.word	0x0800e23c
 8001420:	0800e24c 	.word	0x0800e24c
 8001424:	0800e25c 	.word	0x0800e25c
 8001428:	0800e270 	.word	0x0800e270

0800142c <InitADC>:

/* ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 *													 Low-Layer Functions
 */
void InitADC (InputsInfo_t *inputsInfo, __ADC_STRUCT)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
	inputsInfo->adc = adc;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	683a      	ldr	r2, [r7, #0]
 800143a:	605a      	str	r2, [r3, #4]
	DISABLE_ADC_CR1_EOCIE(inputsInfo->adc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0220 	bic.w	r2, r2, #32
 800144e:	605a      	str	r2, [r3, #4]

	inputsInfo->_curChannel = 0;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	709a      	strb	r2, [r3, #2]
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <ReadADC_Inputs>:


void ReadADC_Inputs (InputsInfo_t *inputsInfo)
{
 8001462:	b580      	push	{r7, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]
	START_ADC(inputsInfo->adc);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	4618      	mov	r0, r3
 8001470:	f001 f9fe 	bl	8002870 <HAL_ADC_Start_IT>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <ADC_DRV_EndConvCallBack>:


void ADC_DRV_EndConvCallBack (InputsInfo_t *inputsInfo)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	inputsInfo->ADC_INx[inputsInfo->_curChannel++] = GET_ADC_CONV_DATA(inputsInfo->adc);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	789b      	ldrb	r3, [r3, #2]
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	b2d0      	uxtb	r0, r2
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	7090      	strb	r0, [r2, #2]
 8001498:	461a      	mov	r2, r3
 800149a:	b289      	uxth	r1, r1
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	if (inputsInfo->_curChannel >= ADC_CHANNELS_QUAN)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	789b      	ldrb	r3, [r3, #2]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d007      	beq.n	80014ba <ADC_DRV_EndConvCallBack+0x3e>
	{
		inputsInfo->_curChannel = 0;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2200      	movs	r2, #0
 80014ae:	709a      	strb	r2, [r3, #2]
		STOP_ADC(inputsInfo->adc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fab3 	bl	8002a20 <HAL_ADC_Stop_IT>
	}
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <ReadButtonState>:


ui8 ReadButtonState (__GPIO_STRUCT, ui16 pin)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	460b      	mov	r3, r1
 80014cc:	807b      	strh	r3, [r7, #2]
	return READ_PIN(gpio, pin);
 80014ce:	887b      	ldrh	r3, [r7, #2]
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f002 f9ba 	bl	800384c <HAL_GPIO_ReadPin>
 80014d8:	4603      	mov	r3, r0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <EXTI_DRV_FallingCallBack>:


void EXTI_DRV_FallingCallBack (InputsInfo_t *inputsInfo, ui16 pin)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	460b      	mov	r3, r1
 80014ec:	807b      	strh	r3, [r7, #2]
	if (pin == ENC_A_Pin)
 80014ee:	887b      	ldrh	r3, [r7, #2]
 80014f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014f4:	d109      	bne.n	800150a <EXTI_DRV_FallingCallBack+0x28>
		inputsInfo->KE_CurrentValue++;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	f993 3014 	ldrsb.w	r3, [r3, #20]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	3301      	adds	r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	b25a      	sxtb	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	751a      	strb	r2, [r3, #20]

	else
		inputsInfo->KE_CurrentValue--;
}
 8001508:	e008      	b.n	800151c <EXTI_DRV_FallingCallBack+0x3a>
		inputsInfo->KE_CurrentValue--;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	3b01      	subs	r3, #1
 8001514:	b2db      	uxtb	r3, r3
 8001516:	b25a      	sxtb	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	751a      	strb	r2, [r3, #20]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <InitI2C>:


void InitI2C (InputsInfo_t *inputsInfo, __I2C_STRUCT)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	inputsInfo->i2c = i2c;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	611a      	str	r2, [r3, #16]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <WriteI2C_Data>:


void WriteI2C_Data (__I2C_STRUCT, ui8 slaveAddr, ui8 *data, ui8 size)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af02      	add	r7, sp, #8
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	461a      	mov	r2, r3
 8001550:	460b      	mov	r3, r1
 8001552:	72fb      	strb	r3, [r7, #11]
 8001554:	4613      	mov	r3, r2
 8001556:	72bb      	strb	r3, [r7, #10]
	#ifdef HAL_I2C_MODULE_ENABLED

		HAL_I2C_Master_Transmit(i2c, slaveAddr, data, size, 10);
 8001558:	7afb      	ldrb	r3, [r7, #11]
 800155a:	b299      	uxth	r1, r3
 800155c:	7abb      	ldrb	r3, [r7, #10]
 800155e:	b29b      	uxth	r3, r3
 8001560:	220a      	movs	r2, #10
 8001562:	9200      	str	r2, [sp, #0]
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f002 fa56 	bl	8003a18 <HAL_I2C_Master_Transmit>
		LL_I2C_ClearFlag_STOP(i2c);

		I2C_CLEAR_CR2(i2c);

	#endif
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}

08001574 <RequestI2C_Data>:


void RequestI2C_Data (__I2C_STRUCT, ui8 slaveAddr, ui8 *data, ui8 size)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af02      	add	r7, sp, #8
 800157a:	60f8      	str	r0, [r7, #12]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	461a      	mov	r2, r3
 8001580:	460b      	mov	r3, r1
 8001582:	72fb      	strb	r3, [r7, #11]
 8001584:	4613      	mov	r3, r2
 8001586:	72bb      	strb	r3, [r7, #10]
	#ifdef HAL_I2C_MODULE_ENABLED

		HAL_I2C_Master_Receive(i2c, slaveAddr, data, size, 10);
 8001588:	7afb      	ldrb	r3, [r7, #11]
 800158a:	b299      	uxth	r1, r3
 800158c:	7abb      	ldrb	r3, [r7, #10]
 800158e:	b29b      	uxth	r3, r3
 8001590:	220a      	movs	r2, #10
 8001592:	9200      	str	r2, [sp, #0]
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f002 fb32 	bl	8003c00 <HAL_I2C_Master_Receive>
		LL_I2C_ClearFlag_STOP(i2c);

		I2C_CLEAR_CR2(i2c);

	#endif
}
 800159c:	bf00      	nop
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <GetEncoderAngles>:


void GetEncoderAngles (InputsInfo_t *inputsInfo)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	ui8 regAddr [2] = {ENCODER_ANGLE_REG_MB, ENCODER_ANGLE_REG_LB};
 80015ac:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80015b0:	81bb      	strh	r3, [r7, #12]

	WriteI2C_Data(inputsInfo->i2c, ENCODER_I2C_ADDRES, regAddr, 2);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6918      	ldr	r0, [r3, #16]
 80015b6:	f107 020c 	add.w	r2, r7, #12
 80015ba:	2302      	movs	r3, #2
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	f7ff ffc1 	bl	8001544 <WriteI2C_Data>
	RequestI2C_Data(inputsInfo->i2c, ENCODER_I2C_ADDRES, inputsInfo->I2C_Buff, 2);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6918      	ldr	r0, [r3, #16]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	f103 0208 	add.w	r2, r3, #8
 80015cc:	2302      	movs	r3, #2
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	f7ff ffd0 	bl	8001574 <RequestI2C_Data>

	inputsInfo->FE_CurrentAngle = (((ui16)inputsInfo->I2C_Buff[0] << 6) & 0x3FC0) | ((ui16)inputsInfo->I2C_Buff[1] & 0x00C0);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	7a1b      	ldrb	r3, [r3, #8]
 80015d8:	019b      	lsls	r3, r3, #6
 80015da:	b21b      	sxth	r3, r3
 80015dc:	f403 537f 	and.w	r3, r3, #16320	; 0x3fc0
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7a5b      	ldrb	r3, [r3, #9]
 80015e6:	b21b      	sxth	r3, r3
 80015e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	b29a      	uxth	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	815a      	strh	r2, [r3, #10]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 031c 	add.w	r3, r7, #28
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	4b68      	ldr	r3, [pc, #416]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	4a67      	ldr	r2, [pc, #412]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6313      	str	r3, [r2, #48]	; 0x30
 8001622:	4b65      	ldr	r3, [pc, #404]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	61bb      	str	r3, [r7, #24]
 800162c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	4b62      	ldr	r3, [pc, #392]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	4a61      	ldr	r2, [pc, #388]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	6313      	str	r3, [r2, #48]	; 0x30
 800163a:	4b5f      	ldr	r3, [pc, #380]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001646:	4b5c      	ldr	r3, [pc, #368]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a5b      	ldr	r2, [pc, #364]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b59      	ldr	r3, [pc, #356]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800165e:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	4a55      	ldr	r2, [pc, #340]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001664:	f043 0320 	orr.w	r3, r3, #32
 8001668:	6313      	str	r3, [r2, #48]	; 0x30
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	f003 0320 	and.w	r3, r3, #32
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001676:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	4a4f      	ldr	r2, [pc, #316]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 800167c:	f043 0310 	orr.w	r3, r3, #16
 8001680:	6313      	str	r3, [r2, #48]	; 0x30
 8001682:	4b4d      	ldr	r3, [pc, #308]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800168e:	4b4a      	ldr	r3, [pc, #296]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	4a49      	ldr	r2, [pc, #292]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6313      	str	r3, [r2, #48]	; 0x30
 800169a:	4b47      	ldr	r3, [pc, #284]	; (80017b8 <MX_GPIO_Init+0x1b8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|BT_EN_Pin, GPIO_PIN_RESET);
 80016a6:	2200      	movs	r2, #0
 80016a8:	f242 0101 	movw	r1, #8193	; 0x2001
 80016ac:	4843      	ldr	r0, [pc, #268]	; (80017bc <MX_GPIO_Init+0x1bc>)
 80016ae:	f002 f8e5 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RS_Pin|LCD_D7_Pin|LCD_D4_Pin, GPIO_PIN_RESET);
 80016b2:	2200      	movs	r2, #0
 80016b4:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 80016b8:	4841      	ldr	r0, [pc, #260]	; (80017c0 <MX_GPIO_Init+0x1c0>)
 80016ba:	f002 f8df 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_D6_Pin|LCD_D5_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80016c4:	483f      	ldr	r0, [pc, #252]	; (80017c4 <MX_GPIO_Init+0x1c4>)
 80016c6:	f002 f8d9 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|LCD_EN_Pin, GPIO_PIN_RESET);
 80016ca:	2200      	movs	r2, #0
 80016cc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80016d0:	483d      	ldr	r0, [pc, #244]	; (80017c8 <MX_GPIO_Init+0x1c8>)
 80016d2:	f002 f8d3 	bl	800387c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MENU_BTN_Pin|JOY_BTN_Pin;
 80016d6:	f242 0302 	movw	r3, #8194	; 0x2002
 80016da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016e0:	2302      	movs	r3, #2
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4838      	ldr	r0, [pc, #224]	; (80017cc <MX_GPIO_Init+0x1cc>)
 80016ec:	f001 ff02 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Pin|BT_EN_Pin;
 80016f0:	f242 0301 	movw	r3, #8193	; 0x2001
 80016f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f6:	2301      	movs	r3, #1
 80016f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fa:	2300      	movs	r3, #0
 80016fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	2300      	movs	r3, #0
 8001700:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001702:	f107 031c 	add.w	r3, r7, #28
 8001706:	4619      	mov	r1, r3
 8001708:	482c      	ldr	r0, [pc, #176]	; (80017bc <MX_GPIO_Init+0x1bc>)
 800170a:	f001 fef3 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_D7_Pin|LCD_D4_Pin;
 800170e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001712:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001718:	2302      	movs	r3, #2
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171c:	2302      	movs	r3, #2
 800171e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001720:	f107 031c 	add.w	r3, r7, #28
 8001724:	4619      	mov	r1, r3
 8001726:	4826      	ldr	r0, [pc, #152]	; (80017c0 <MX_GPIO_Init+0x1c0>)
 8001728:	f001 fee4 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_B_Pin;
 800172c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001732:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001738:	2301      	movs	r3, #1
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	481f      	ldr	r0, [pc, #124]	; (80017c0 <MX_GPIO_Init+0x1c0>)
 8001744:	f001 fed6 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LCD_D6_Pin|LCD_D5_Pin;
 8001748:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800174c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800174e:	2301      	movs	r3, #1
 8001750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001752:	2302      	movs	r3, #2
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001756:	2302      	movs	r3, #2
 8001758:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800175a:	f107 031c 	add.w	r3, r7, #28
 800175e:	4619      	mov	r1, r3
 8001760:	4818      	ldr	r0, [pc, #96]	; (80017c4 <MX_GPIO_Init+0x1c4>)
 8001762:	f001 fec7 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_A_Pin;
 8001766:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800176c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001770:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001772:	2301      	movs	r3, #1
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8001776:	f107 031c 	add.w	r3, r7, #28
 800177a:	4619      	mov	r1, r3
 800177c:	4811      	ldr	r0, [pc, #68]	; (80017c4 <MX_GPIO_Init+0x1c4>)
 800177e:	f001 feb9 	bl	80034f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_EN_Pin;
 8001782:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800178c:	2302      	movs	r3, #2
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001790:	2302      	movs	r3, #2
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	480b      	ldr	r0, [pc, #44]	; (80017c8 <MX_GPIO_Init+0x1c8>)
 800179c:	f001 feaa 	bl	80034f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2105      	movs	r1, #5
 80017a4:	2028      	movs	r0, #40	; 0x28
 80017a6:	f001 fddc 	bl	8003362 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017aa:	2028      	movs	r0, #40	; 0x28
 80017ac:	f001 fdf5 	bl	800339a <HAL_NVIC_EnableIRQ>

}
 80017b0:	bf00      	nop
 80017b2:	3730      	adds	r7, #48	; 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40021400 	.word	0x40021400
 80017c4:	40021000 	.word	0x40021000
 80017c8:	40020c00 	.word	0x40020c00
 80017cc:	40020800 	.word	0x40020800

080017d0 <MX_I2C4_Init>:

I2C_HandleTypeDef hi2c4;

/* I2C4 init function */
void MX_I2C4_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <MX_I2C4_Init+0x74>)
 80017d6:	4a1c      	ldr	r2, [pc, #112]	; (8001848 <MX_I2C4_Init+0x78>)
 80017d8:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x00A01B56;
 80017da:	4b1a      	ldr	r3, [pc, #104]	; (8001844 <MX_I2C4_Init+0x74>)
 80017dc:	4a1b      	ldr	r2, [pc, #108]	; (800184c <MX_I2C4_Init+0x7c>)
 80017de:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_I2C4_Init+0x74>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_I2C4_Init+0x74>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_I2C4_Init+0x74>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_I2C4_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_I2C4_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_I2C4_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_I2C4_Init+0x74>)
 8001806:	2200      	movs	r2, #0
 8001808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 800180a:	480e      	ldr	r0, [pc, #56]	; (8001844 <MX_I2C4_Init+0x74>)
 800180c:	f002 f874 	bl	80038f8 <HAL_I2C_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8001816:	f000 fb4a 	bl	8001eae <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800181a:	2100      	movs	r1, #0
 800181c:	4809      	ldr	r0, [pc, #36]	; (8001844 <MX_I2C4_Init+0x74>)
 800181e:	f002 fd51 	bl	80042c4 <HAL_I2CEx_ConfigAnalogFilter>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8001828:	f000 fb41 	bl	8001eae <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_I2C4_Init+0x74>)
 8001830:	f002 fd93 	bl	800435a <HAL_I2CEx_ConfigDigitalFilter>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 800183a:	f000 fb38 	bl	8001eae <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	200002e8 	.word	0x200002e8
 8001848:	40006000 	.word	0x40006000
 800184c:	00a01b56 	.word	0x00a01b56

08001850 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b0ae      	sub	sp, #184	; 0xb8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2290      	movs	r2, #144	; 0x90
 800186e:	2100      	movs	r1, #0
 8001870:	4618      	mov	r0, r3
 8001872:	f009 fa00 	bl	800ac76 <memset>
  if(i2cHandle->Instance==I2C4)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a22      	ldr	r2, [pc, #136]	; (8001904 <HAL_I2C_MspInit+0xb4>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d13d      	bne.n	80018fc <HAL_I2C_MspInit+0xac>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001880:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001884:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001886:	2300      	movs	r3, #0
 8001888:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fa93 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800189c:	f000 fb07 	bl	8001eae <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_I2C_MspInit+0xb8>)
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	4a18      	ldr	r2, [pc, #96]	; (8001908 <HAL_I2C_MspInit+0xb8>)
 80018a6:	f043 0308 	orr.w	r3, r3, #8
 80018aa:	6313      	str	r3, [r2, #48]	; 0x30
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_I2C_MspInit+0xb8>)
 80018ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b0:	f003 0308 	and.w	r3, r3, #8
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80018bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018c0:	2312      	movs	r3, #18
 80018c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018cc:	2303      	movs	r3, #3
 80018ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80018d2:	2304      	movs	r3, #4
 80018d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018dc:	4619      	mov	r1, r3
 80018de:	480b      	ldr	r0, [pc, #44]	; (800190c <HAL_I2C_MspInit+0xbc>)
 80018e0:	f001 fe08 	bl	80034f4 <HAL_GPIO_Init>

    /* I2C4 clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <HAL_I2C_MspInit+0xb8>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e8:	4a07      	ldr	r2, [pc, #28]	; (8001908 <HAL_I2C_MspInit+0xb8>)
 80018ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ee:	6413      	str	r3, [r2, #64]	; 0x40
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <HAL_I2C_MspInit+0xb8>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 80018fc:	bf00      	nop
 80018fe:	37b8      	adds	r7, #184	; 0xb8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40006000 	.word	0x40006000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020c00 	.word	0x40020c00

08001910 <SerialAPI_GetConfirmStatus>:
	{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
		return confirm->status;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	79db      	ldrb	r3, [r3, #7]
	}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <AverageInit>:
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
	averageValue->_factor = factor;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	719a      	strb	r2, [r3, #6]
	averageValue->avgBuff = 0;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
	averageValue->avgRes = 0;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	809a      	strh	r2, [r3, #4]
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	0000      	movs	r0, r0
 8001954:	0000      	movs	r0, r0
	...

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800195c:	f000 fec3 	bl	80026e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001960:	f000 fa32 	bl	8001dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001964:	f7ff fe4c 	bl	8001600 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001968:	f7ff fa60 	bl	8000e2c <MX_ADC1_Init>
  MX_TIM2_Init();
 800196c:	f000 fcfe 	bl	800236c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001970:	f000 fd6e 	bl	8002450 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001974:	f000 fd9c 	bl	80024b0 <MX_USART2_UART_Init>
  MX_I2C4_Init();
 8001978:	f7ff ff2a 	bl	80017d0 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

	begin(16, 2);  // LCD Init
 800197c:	2102      	movs	r1, #2
 800197e:	2010      	movs	r0, #16
 8001980:	f7ff f828 	bl	80009d4 <begin>
	WRITE_PIN(LCD_BL_GPIO_Port, LCD_BL_Pin, 1);  // LCD Backlight ON
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800198a:	48a9      	ldr	r0, [pc, #676]	; (8001c30 <main+0x2d8>)
 800198c:	f001 ff76 	bl	800387c <HAL_GPIO_WritePin>

	InitADC(&InputsInfo, JOYSTICK_ADC);
 8001990:	49a8      	ldr	r1, [pc, #672]	; (8001c34 <main+0x2dc>)
 8001992:	48a9      	ldr	r0, [pc, #676]	; (8001c38 <main+0x2e0>)
 8001994:	f7ff fd4a 	bl	800142c <InitADC>
	InitI2C(&InputsInfo, ENCODER_I2C);
 8001998:	49a8      	ldr	r1, [pc, #672]	; (8001c3c <main+0x2e4>)
 800199a:	48a7      	ldr	r0, [pc, #668]	; (8001c38 <main+0x2e0>)
 800199c:	f7ff fdc4 	bl	8001528 <InitI2C>

	/* SimpleBGC32 Init */
	SBGC32_Init(&SBGC32_Device);
 80019a0:	48a7      	ldr	r0, [pc, #668]	; (8001c40 <main+0x2e8>)
 80019a2:	f008 f945 	bl	8009c30 <SBGC32_Init>
		sbgcDelay(BLUETOOTH_CONNECT_WAITING * 1000);

	#endif

	/* Control Configurations */
	Control.mode[PITCH] = CtrlMODE_ANGLE;
 80019a6:	4ba7      	ldr	r3, [pc, #668]	; (8001c44 <main+0x2ec>)
 80019a8:	2202      	movs	r2, #2
 80019aa:	705a      	strb	r2, [r3, #1]
	Control.mode[YAW] = CtrlMODE_ANGLE;
 80019ac:	4ba5      	ldr	r3, [pc, #660]	; (8001c44 <main+0x2ec>)
 80019ae:	2202      	movs	r2, #2
 80019b0:	709a      	strb	r2, [r3, #2]

	Control.AxisC[ROLL].angle = 0;
 80019b2:	4ba4      	ldr	r3, [pc, #656]	; (8001c44 <main+0x2ec>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	715a      	strb	r2, [r3, #5]
 80019b8:	2200      	movs	r2, #0
 80019ba:	719a      	strb	r2, [r3, #6]
	Control.AxisC[PITCH].angle = 0;
 80019bc:	4ba1      	ldr	r3, [pc, #644]	; (8001c44 <main+0x2ec>)
 80019be:	2200      	movs	r2, #0
 80019c0:	725a      	strb	r2, [r3, #9]
 80019c2:	2200      	movs	r2, #0
 80019c4:	729a      	strb	r2, [r3, #10]

	Control.AxisC[PITCH].speed = 0;
 80019c6:	4b9f      	ldr	r3, [pc, #636]	; (8001c44 <main+0x2ec>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	71da      	strb	r2, [r3, #7]
 80019cc:	2200      	movs	r2, #0
 80019ce:	721a      	strb	r2, [r3, #8]
	Control.AxisC[YAW].speed = 0;
 80019d0:	4b9c      	ldr	r3, [pc, #624]	; (8001c44 <main+0x2ec>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	72da      	strb	r2, [r3, #11]
 80019d6:	2200      	movs	r2, #0
 80019d8:	731a      	strb	r2, [r3, #12]

	#ifdef FLYWHEEL_CONTROL

		GetEncoderAngles(&InputsInfo);
 80019da:	4897      	ldr	r0, [pc, #604]	; (8001c38 <main+0x2e0>)
 80019dc:	f7ff fde2 	bl	80015a4 <GetEncoderAngles>
		InputsInfo.FE_OldAngle = InputsInfo.FE_CurrentAngle;
 80019e0:	4b95      	ldr	r3, [pc, #596]	; (8001c38 <main+0x2e0>)
 80019e2:	895a      	ldrh	r2, [r3, #10]
 80019e4:	4b94      	ldr	r3, [pc, #592]	; (8001c38 <main+0x2e0>)
 80019e6:	819a      	strh	r2, [r3, #12]

	#endif

	ControlConfig.flags = CtrlCONFIG_FLAG_NO_CONFIRM;
 80019e8:	4b97      	ldr	r3, [pc, #604]	; (8001c48 <main+0x2f0>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	f042 0201 	orr.w	r2, r2, #1
 80019f0:	775a      	strb	r2, [r3, #29]
 80019f2:	2200      	movs	r2, #0
 80019f4:	779a      	strb	r2, [r3, #30]

	AverageInit(&LCD_RemoteGeneral.TargetErrorAverage, TARGET_LOW_PASS_FACTOR);
 80019f6:	2106      	movs	r1, #6
 80019f8:	4894      	ldr	r0, [pc, #592]	; (8001c4c <main+0x2f4>)
 80019fa:	f7ff ff95 	bl	8001928 <AverageInit>
	AverageInit(&LCD_RemoteGeneral.JoystickAverage[0], JOY_LOW_PASS_FACTOR);
 80019fe:	210b      	movs	r1, #11
 8001a00:	4893      	ldr	r0, [pc, #588]	; (8001c50 <main+0x2f8>)
 8001a02:	f7ff ff91 	bl	8001928 <AverageInit>
	AverageInit(&LCD_RemoteGeneral.JoystickAverage[1], JOY_LOW_PASS_FACTOR);
 8001a06:	210b      	movs	r1, #11
 8001a08:	4892      	ldr	r0, [pc, #584]	; (8001c54 <main+0x2fc>)
 8001a0a:	f7ff ff8d 	bl	8001928 <AverageInit>

	LCD_RemoteGeneral.adjVarQuan = countof_(AdjVarGeneral);
 8001a0e:	4b90      	ldr	r3, [pc, #576]	; (8001c50 <main+0x2f8>)
 8001a10:	2208      	movs	r2, #8
 8001a12:	775a      	strb	r2, [r3, #29]
	LCD_RemoteGeneral.currentAdjVarIndex = 0;
 8001a14:	4b8e      	ldr	r3, [pc, #568]	; (8001c50 <main+0x2f8>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	771a      	strb	r2, [r3, #28]

	LCD_RemoteGeneral.currentTimeMs = 0;
 8001a1a:	4b8d      	ldr	r3, [pc, #564]	; (8001c50 <main+0x2f8>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	621a      	str	r2, [r3, #32]
	LCD_RemoteGeneral.rtReqCmdTimeMs = 0;
 8001a20:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <main+0x2f8>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	629a      	str	r2, [r3, #40]	; 0x28

	LCD_RemoteGeneral.connectFlag = 0;
 8001a26:	4b8a      	ldr	r3, [pc, #552]	; (8001c50 <main+0x2f8>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LCD_RemoteGeneral.currentPage = 0;
 8001a2e:	4b88      	ldr	r3, [pc, #544]	; (8001c50 <main+0x2f8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	LCD_RemoteGeneral.updateDisplayFlagEnable = DISPLAY_UPDATE_ENABLED;
 8001a36:	4b86      	ldr	r3, [pc, #536]	; (8001c50 <main+0x2f8>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

	LCD_RemoteGeneral.motorsCurrentState = MOTORS_ON;
 8001a3e:	4b84      	ldr	r3, [pc, #528]	; (8001c50 <main+0x2f8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40


	SBGC32_ControlConfig(&SBGC32_Device, &ControlConfig, SBGC_NO_CONFIRM);
 8001a46:	2200      	movs	r2, #0
 8001a48:	497f      	ldr	r1, [pc, #508]	; (8001c48 <main+0x2f0>)
 8001a4a:	487d      	ldr	r0, [pc, #500]	; (8001c40 <main+0x2e8>)
 8001a4c:	f007 fff4 	bl	8009a38 <SBGC32_ControlConfig>

	SBGC32_GetAnglesExt(&SBGC32_Device, &GetAnglesExt);
 8001a50:	4981      	ldr	r1, [pc, #516]	; (8001c58 <main+0x300>)
 8001a52:	487b      	ldr	r0, [pc, #492]	; (8001c40 <main+0x2e8>)
 8001a54:	f008 f857 	bl	8009b06 <SBGC32_GetAnglesExt>
	Control.AxisC[YAW].angle = (i16)GetAnglesExt.AxisGAE[YAW].frameCamAngle;
 8001a58:	4b7f      	ldr	r3, [pc, #508]	; (8001c58 <main+0x300>)
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b79      	ldr	r3, [pc, #484]	; (8001c44 <main+0x2ec>)
 8001a60:	f8a3 200d 	strh.w	r2, [r3, #13]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		/* Getting current time */
		LCD_RemoteGeneral.currentTimeMs = sbgcGetTick();
 8001a64:	f000 fe90 	bl	8002788 <HAL_GetTick>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	4a79      	ldr	r2, [pc, #484]	; (8001c50 <main+0x2f8>)
 8001a6c:	6213      	str	r3, [r2, #32]

		/*  - - - - - - - - - Controllers Handler - - - - - - - - - - */

		if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.controlPause > MOTORS_ON_CONTROL_PAUSE) &&
 8001a6e:	4b78      	ldr	r3, [pc, #480]	; (8001c50 <main+0x2f8>)
 8001a70:	6a1a      	ldr	r2, [r3, #32]
 8001a72:	4b77      	ldr	r3, [pc, #476]	; (8001c50 <main+0x2f8>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d948      	bls.n	8001b12 <main+0x1ba>
			(LCD_RemoteGeneral.motorsCurrentState == MOTORS_ON))
 8001a80:	4b73      	ldr	r3, [pc, #460]	; (8001c50 <main+0x2f8>)
 8001a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
		if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.controlPause > MOTORS_ON_CONTROL_PAUSE) &&
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d143      	bne.n	8001b12 <main+0x1ba>
		{
			#ifdef FLYWHEEL_CONTROL

				GetEncoderAngles(&InputsInfo);
 8001a8a:	486b      	ldr	r0, [pc, #428]	; (8001c38 <main+0x2e0>)
 8001a8c:	f7ff fd8a 	bl	80015a4 <GetEncoderAngles>

				InputsInfo.deltaFW = InputsInfo.FE_CurrentAngle - InputsInfo.FE_OldAngle;
 8001a90:	4b69      	ldr	r3, [pc, #420]	; (8001c38 <main+0x2e0>)
 8001a92:	895a      	ldrh	r2, [r3, #10]
 8001a94:	4b68      	ldr	r3, [pc, #416]	; (8001c38 <main+0x2e0>)
 8001a96:	899b      	ldrh	r3, [r3, #12]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	b21a      	sxth	r2, r3
 8001a9e:	4b66      	ldr	r3, [pc, #408]	; (8001c38 <main+0x2e0>)
 8001aa0:	81da      	strh	r2, [r3, #14]

				if (abs(InputsInfo.deltaFW) > FLYWHEEL_ERROR)
 8001aa2:	4b65      	ldr	r3, [pc, #404]	; (8001c38 <main+0x2e0>)
 8001aa4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bfb8      	it	lt
 8001aac:	425b      	neglt	r3, r3
 8001aae:	b29b      	uxth	r3, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d92e      	bls.n	8001b12 <main+0x1ba>
				{
					if (abs(InputsInfo.deltaFW) < 2048)
 8001ab4:	4b60      	ldr	r3, [pc, #384]	; (8001c38 <main+0x2e0>)
 8001ab6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bfb8      	it	lt
 8001abe:	425b      	neglt	r3, r3
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ac6:	d21c      	bcs.n	8001b02 <main+0x1aa>
						Control.AxisC[YAW].angle += InputsInfo.deltaFW * FLYWHEEL_SENSITIVITY;
 8001ac8:	4b5e      	ldr	r3, [pc, #376]	; (8001c44 <main+0x2ec>)
 8001aca:	f9b3 300d 	ldrsh.w	r3, [r3, #13]
 8001ace:	b21b      	sxth	r3, r3
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001ad8:	4b57      	ldr	r3, [pc, #348]	; (8001c38 <main+0x2e0>)
 8001ada:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ade:	ee07 3a90 	vmov	s15, r3
 8001ae2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001ae6:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8001c28 <main+0x2d0>
 8001aea:	ee27 7b05 	vmul.f64	d7, d7, d5
 8001aee:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001af2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001af6:	ee17 3a90 	vmov	r3, s15
 8001afa:	b21a      	sxth	r2, r3
 8001afc:	4b51      	ldr	r3, [pc, #324]	; (8001c44 <main+0x2ec>)
 8001afe:	f8a3 200d 	strh.w	r2, [r3, #13]

					InputsInfo.FE_OldAngle = InputsInfo.FE_CurrentAngle;
 8001b02:	4b4d      	ldr	r3, [pc, #308]	; (8001c38 <main+0x2e0>)
 8001b04:	895a      	ldrh	r2, [r3, #10]
 8001b06:	4b4c      	ldr	r3, [pc, #304]	; (8001c38 <main+0x2e0>)
 8001b08:	819a      	strh	r2, [r3, #12]
					SBGC32_Control(&SBGC32_Device, &Control);
 8001b0a:	494e      	ldr	r1, [pc, #312]	; (8001c44 <main+0x2ec>)
 8001b0c:	484c      	ldr	r0, [pc, #304]	; (8001c40 <main+0x2e8>)
 8001b0e:	f007 ff71 	bl	80099f4 <SBGC32_Control>
			#endif
		}

		/* - - - - - - - - - - Knob Encoder Handler - - - - - - - - - */

		if (InputsInfo.KE_CurrentValue != 0)
 8001b12:	4b49      	ldr	r3, [pc, #292]	; (8001c38 <main+0x2e0>)
 8001b14:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d02e      	beq.n	8001b7a <main+0x222>
		{
			SerialAPI_EditAdjVarValue(&AdjVarGeneral[LCD_RemoteGeneral.currentAdjVarIndex],
 8001b1c:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <main+0x2f8>)
 8001b1e:	7f1b      	ldrb	r3, [r3, #28]
 8001b20:	461a      	mov	r2, r3
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4a4c      	ldr	r2, [pc, #304]	; (8001c5c <main+0x304>)
 8001b2c:	441a      	add	r2, r3
					(AdjVarGeneral[LCD_RemoteGeneral.currentAdjVarIndex].value + (InputsInfo.KE_CurrentValue * ADJ_VAR_STEP)));
 8001b2e:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <main+0x2f8>)
 8001b30:	7f1b      	ldrb	r3, [r3, #28]
 8001b32:	4618      	mov	r0, r3
 8001b34:	4949      	ldr	r1, [pc, #292]	; (8001c5c <main+0x304>)
 8001b36:	4603      	mov	r3, r0
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	4403      	add	r3, r0
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	330c      	adds	r3, #12
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	ee07 3a90 	vmov	s15, r3
 8001b48:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001b4c:	4b3a      	ldr	r3, [pc, #232]	; (8001c38 <main+0x2e0>)
 8001b4e:	f993 3014 	ldrsb.w	r3, [r3, #20]
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8001b5a:	ee36 7b07 	vadd.f64	d7, d6, d7
			SerialAPI_EditAdjVarValue(&AdjVarGeneral[LCD_RemoteGeneral.currentAdjVarIndex],
 8001b5e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8001b62:	ee17 1a90 	vmov	r1, s15
 8001b66:	4610      	mov	r0, r2
 8001b68:	f007 fd00 	bl	800956c <SerialAPI_EditAdjVarValue>

			InputsInfo.KE_CurrentValue = 0;
 8001b6c:	4b32      	ldr	r3, [pc, #200]	; (8001c38 <main+0x2e0>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	751a      	strb	r2, [r3, #20]

			LCD_RemoteGeneral.updateDisplayFlag = DISPLAY_NOT_UPDATED;
 8001b72:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <main+0x2f8>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f


		/* - - - - - - - - - - - Menu Handler - - - - - - - - - - - - */

		/* Process navigation */
		if (DebounceNavigationButton(&LCD_RemoteGeneral, ReadNavigationButtonState(&InputsInfo)))
 8001b7a:	482f      	ldr	r0, [pc, #188]	; (8001c38 <main+0x2e0>)
 8001b7c:	f7ff fb2d 	bl	80011da <ReadNavigationButtonState>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4619      	mov	r1, r3
 8001b84:	4832      	ldr	r0, [pc, #200]	; (8001c50 <main+0x2f8>)
 8001b86:	f7ff faf8 	bl	800117a <DebounceNavigationButton>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 8097 	beq.w	8001cc0 <main+0x368>
		{
			switch (LCD_RemoteGeneral.NavButton.triggerState)
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <main+0x2f8>)
 8001b94:	7edb      	ldrb	r3, [r3, #27]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	2b05      	cmp	r3, #5
 8001b9a:	f200 808a 	bhi.w	8001cb2 <main+0x35a>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <main+0x24c>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bbd 	.word	0x08001bbd
 8001ba8:	08001bfd 	.word	0x08001bfd
 8001bac:	08001c13 	.word	0x08001c13
 8001bb0:	08001bd9 	.word	0x08001bd9
 8001bb4:	08001c61 	.word	0x08001c61
 8001bb8:	08001ca3 	.word	0x08001ca3
			{
				case NAV_BTN_RIGHT :
					LCD_RemoteGeneral.currentAdjVarIndex =
							(LCD_RemoteGeneral.currentAdjVarIndex + 1) % LCD_RemoteGeneral.adjVarQuan;
 8001bbc:	4b24      	ldr	r3, [pc, #144]	; (8001c50 <main+0x2f8>)
 8001bbe:	7f1b      	ldrb	r3, [r3, #28]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a23      	ldr	r2, [pc, #140]	; (8001c50 <main+0x2f8>)
 8001bc4:	7f52      	ldrb	r2, [r2, #29]
 8001bc6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bca:	fb01 f202 	mul.w	r2, r1, r2
 8001bce:	1a9b      	subs	r3, r3, r2
					LCD_RemoteGeneral.currentAdjVarIndex =
 8001bd0:	b2da      	uxtb	r2, r3
 8001bd2:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <main+0x2f8>)
 8001bd4:	771a      	strb	r2, [r3, #28]
					break;
 8001bd6:	e06f      	b.n	8001cb8 <main+0x360>

				case NAV_BTN_LEFT :  /* Select prev adj. var */
					LCD_RemoteGeneral.currentAdjVarIndex =
							(LCD_RemoteGeneral.currentAdjVarIndex + (LCD_RemoteGeneral.adjVarQuan - 1)) % LCD_RemoteGeneral.adjVarQuan;
 8001bd8:	4b1d      	ldr	r3, [pc, #116]	; (8001c50 <main+0x2f8>)
 8001bda:	7f1b      	ldrb	r3, [r3, #28]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <main+0x2f8>)
 8001be0:	7f5b      	ldrb	r3, [r3, #29]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	4a1a      	ldr	r2, [pc, #104]	; (8001c50 <main+0x2f8>)
 8001be8:	7f52      	ldrb	r2, [r2, #29]
 8001bea:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bee:	fb01 f202 	mul.w	r2, r1, r2
 8001bf2:	1a9b      	subs	r3, r3, r2
					LCD_RemoteGeneral.currentAdjVarIndex =
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b16      	ldr	r3, [pc, #88]	; (8001c50 <main+0x2f8>)
 8001bf8:	771a      	strb	r2, [r3, #28]
					break;
 8001bfa:	e05d      	b.n	8001cb8 <main+0x360>

				case NAV_BTN_UP :  /* Select next page */
					LCD_RemoteGeneral.currentPage++;
 8001bfc:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <main+0x2f8>)
 8001bfe:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3301      	adds	r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	b25a      	sxtb	r2, r3
 8001c0a:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <main+0x2f8>)
 8001c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					break;
 8001c10:	e052      	b.n	8001cb8 <main+0x360>

				case NAV_BTN_DOWN :  /* Select prev page */
					LCD_RemoteGeneral.currentPage--;
 8001c12:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <main+0x2f8>)
 8001c14:	f993 3035 	ldrsb.w	r3, [r3, #53]	; 0x35
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	b25a      	sxtb	r2, r3
 8001c20:	4b0b      	ldr	r3, [pc, #44]	; (8001c50 <main+0x2f8>)
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
					break;
 8001c26:	e047      	b.n	8001cb8 <main+0x360>
 8001c28:	9999999a 	.word	0x9999999a
 8001c2c:	3fa99999 	.word	0x3fa99999
 8001c30:	40020c00 	.word	0x40020c00
 8001c34:	200002a0 	.word	0x200002a0
 8001c38:	20000488 	.word	0x20000488
 8001c3c:	200002e8 	.word	0x200002e8
 8001c40:	2000033c 	.word	0x2000033c
 8001c44:	20000348 	.word	0x20000348
 8001c48:	20000358 	.word	0x20000358
 8001c4c:	20000450 	.word	0x20000450
 8001c50:	20000440 	.word	0x20000440
 8001c54:	20000448 	.word	0x20000448
 8001c58:	20000400 	.word	0x20000400
 8001c5c:	20000000 	.word	0x20000000

				case NAV_BTN_SELECT:  /* Turn motors ON/OFF */
					SBGC32_ExecuteMenu(&SBGC32_Device, MENU_CMD_MOTOR_TOGGLE, &Confirm);
 8001c60:	4a52      	ldr	r2, [pc, #328]	; (8001dac <main+0x454>)
 8001c62:	210a      	movs	r1, #10
 8001c64:	4852      	ldr	r0, [pc, #328]	; (8001db0 <main+0x458>)
 8001c66:	f007 ff84 	bl	8009b72 <SBGC32_ExecuteMenu>

					if (SerialAPI_GetConfirmStatus(&Confirm) == sbgcCONFIRM_RECEIVED)
 8001c6a:	4850      	ldr	r0, [pc, #320]	; (8001dac <main+0x454>)
 8001c6c:	f7ff fe50 	bl	8001910 <SerialAPI_GetConfirmStatus>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d11f      	bne.n	8001cb6 <main+0x35e>
					{
						LCD_RemoteGeneral.motorsCurrentState = (LCD_RemoteGeneral.motorsCurrentState == MOTORS_ON) ? MOTORS_OFF : MOTORS_ON;
 8001c76:	4b4f      	ldr	r3, [pc, #316]	; (8001db4 <main+0x45c>)
 8001c78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf0c      	ite	eq
 8001c80:	2301      	moveq	r3, #1
 8001c82:	2300      	movne	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b4a      	ldr	r3, [pc, #296]	; (8001db4 <main+0x45c>)
 8001c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
						if (LCD_RemoteGeneral.motorsCurrentState == MOTORS_ON)
 8001c8e:	4b49      	ldr	r3, [pc, #292]	; (8001db4 <main+0x45c>)
 8001c90:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10e      	bne.n	8001cb6 <main+0x35e>
							LCD_RemoteGeneral.controlPause = LCD_RemoteGeneral.currentTimeMs;
 8001c98:	4b46      	ldr	r3, [pc, #280]	; (8001db4 <main+0x45c>)
 8001c9a:	6a1b      	ldr	r3, [r3, #32]
 8001c9c:	4a45      	ldr	r2, [pc, #276]	; (8001db4 <main+0x45c>)
 8001c9e:	6453      	str	r3, [r2, #68]	; 0x44
					}
					break;
 8001ca0:	e009      	b.n	8001cb6 <main+0x35e>

				case NAV_BTN_ENCODER_SELECT:
					SBGC32_SaveAdjVarsToEEPROM(&SBGC32_Device, AdjVarGeneral, LCD_RemoteGeneral.adjVarQuan, SBGC_NO_CONFIRM);
 8001ca2:	4b44      	ldr	r3, [pc, #272]	; (8001db4 <main+0x45c>)
 8001ca4:	7f5a      	ldrb	r2, [r3, #29]
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	4943      	ldr	r1, [pc, #268]	; (8001db8 <main+0x460>)
 8001caa:	4841      	ldr	r0, [pc, #260]	; (8001db0 <main+0x458>)
 8001cac:	f007 fe3e 	bl	800992c <SBGC32_SaveAdjVarsToEEPROM>
					break;
 8001cb0:	e002      	b.n	8001cb8 <main+0x360>

				default:
					break;
 8001cb2:	bf00      	nop
 8001cb4:	e000      	b.n	8001cb8 <main+0x360>
					break;
 8001cb6:	bf00      	nop
			}

			/* Update display immediately to reduce lag */
			LCD_RemoteGeneral.updateDisplayFlag = DISPLAY_NOT_UPDATED;
 8001cb8:	4b3e      	ldr	r3, [pc, #248]	; (8001db4 <main+0x45c>)
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
		}

		/*  - - - - - - - - - - Buttons Handling - - - - - - - - - - */
		/* Menu Button */
		if (ReadButtonState(MENU_BTN_PORT, MENU_BTN_PIN))
 8001cc0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cc4:	483d      	ldr	r0, [pc, #244]	; (8001dbc <main+0x464>)
 8001cc6:	f7ff fbfc 	bl	80014c2 <ReadButtonState>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d024      	beq.n	8001d1a <main+0x3c2>
		{
			if (InputsInfo.menuBtn == BTN_RELEASED)
 8001cd0:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <main+0x468>)
 8001cd2:	7d5b      	ldrb	r3, [r3, #21]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d106      	bne.n	8001ce6 <main+0x38e>
			{
				LCD_RemoteGeneral.btnTimeMs = LCD_RemoteGeneral.currentTimeMs;
 8001cd8:	4b36      	ldr	r3, [pc, #216]	; (8001db4 <main+0x45c>)
 8001cda:	6a1b      	ldr	r3, [r3, #32]
 8001cdc:	4a35      	ldr	r2, [pc, #212]	; (8001db4 <main+0x45c>)
 8001cde:	6313      	str	r3, [r2, #48]	; 0x30
				InputsInfo.menuBtn = BTN_PRESSED;
 8001ce0:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <main+0x468>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	755a      	strb	r2, [r3, #21]
			}

			if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001ce6:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <main+0x45c>)
 8001ce8:	6a1a      	ldr	r2, [r3, #32]
 8001cea:	4b32      	ldr	r3, [pc, #200]	; (8001db4 <main+0x45c>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b64      	cmp	r3, #100	; 0x64
 8001cf2:	d920      	bls.n	8001d36 <main+0x3de>
				(InputsInfo.menuBtn != BTN_POST_PRESSED))
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <main+0x468>)
 8001cf6:	7d5b      	ldrb	r3, [r3, #21]
			if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d01c      	beq.n	8001d36 <main+0x3de>
			{
				SBGC32_ExecuteMenu(&SBGC32_Device, MENU_CMD_BUTTON_PRESS, &Confirm);
 8001cfc:	4a2b      	ldr	r2, [pc, #172]	; (8001dac <main+0x454>)
 8001cfe:	2116      	movs	r1, #22
 8001d00:	482b      	ldr	r0, [pc, #172]	; (8001db0 <main+0x458>)
 8001d02:	f007 ff36 	bl	8009b72 <SBGC32_ExecuteMenu>

				if (SerialAPI_GetConfirmStatus(&Confirm) == sbgcCONFIRM_RECEIVED)
 8001d06:	4829      	ldr	r0, [pc, #164]	; (8001dac <main+0x454>)
 8001d08:	f7ff fe02 	bl	8001910 <SerialAPI_GetConfirmStatus>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d111      	bne.n	8001d36 <main+0x3de>
					InputsInfo.menuBtn = BTN_POST_PRESSED;
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <main+0x468>)
 8001d14:	2202      	movs	r2, #2
 8001d16:	755a      	strb	r2, [r3, #21]
 8001d18:	e00d      	b.n	8001d36 <main+0x3de>
			}
		}

		else if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d1a:	4b26      	ldr	r3, [pc, #152]	; (8001db4 <main+0x45c>)
 8001d1c:	6a1a      	ldr	r2, [r3, #32]
 8001d1e:	4b25      	ldr	r3, [pc, #148]	; (8001db4 <main+0x45c>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	; 0x64
 8001d26:	d906      	bls.n	8001d36 <main+0x3de>
				 (InputsInfo.menuBtn != BTN_RELEASED))
 8001d28:	4b25      	ldr	r3, [pc, #148]	; (8001dc0 <main+0x468>)
 8001d2a:	7d5b      	ldrb	r3, [r3, #21]
		else if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.btnTimeMs > SOFTWARE_ANTI_BOUNCE) &&
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <main+0x3de>
			InputsInfo.menuBtn = BTN_RELEASED;
 8001d30:	4b23      	ldr	r3, [pc, #140]	; (8001dc0 <main+0x468>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	755a      	strb	r2, [r3, #21]


		/* - - - - - - - - - AdjVarGeneral Handler - - - - - - - - - */

		/* Send the value of updated adjvars to the board */
		SBGC32_SetAdjVarValues(&SBGC32_Device, AdjVarGeneral, LCD_RemoteGeneral.adjVarQuan, SBGC_NO_CONFIRM);
 8001d36:	4b1f      	ldr	r3, [pc, #124]	; (8001db4 <main+0x45c>)
 8001d38:	7f5a      	ldrb	r2, [r3, #29]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	491e      	ldr	r1, [pc, #120]	; (8001db8 <main+0x460>)
 8001d3e:	481c      	ldr	r0, [pc, #112]	; (8001db0 <main+0x458>)
 8001d40:	f007 fc66 	bl	8009610 <SBGC32_SetAdjVarValues>


		/* - - - - - - - - - - - SBGC Handler - - - - - - - - - - - - */

		ProcessHandler(&SBGC32_Device, &LCD_RemoteGeneral, &RealTimeData, AdjVarGeneral);
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <main+0x460>)
 8001d46:	4a1f      	ldr	r2, [pc, #124]	; (8001dc4 <main+0x46c>)
 8001d48:	491a      	ldr	r1, [pc, #104]	; (8001db4 <main+0x45c>)
 8001d4a:	4819      	ldr	r0, [pc, #100]	; (8001db0 <main+0x458>)
 8001d4c:	f7ff f9a4 	bl	8001098 <ProcessHandler>

		/* Request realtime data with the fixed rate */
		if ((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.rtReqCmdTimeMs) > REALTIME_DATA_REQUEST_INTERAL_MS)
 8001d50:	4b18      	ldr	r3, [pc, #96]	; (8001db4 <main+0x45c>)
 8001d52:	6a1a      	ldr	r2, [r3, #32]
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <main+0x45c>)
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d5e:	d90a      	bls.n	8001d76 <main+0x41e>
		{
			if (SBGC32_ReadRealTimeData4(&SBGC32_Device, &RealTimeData) == sbgcCOMMAND_OK)
 8001d60:	4918      	ldr	r1, [pc, #96]	; (8001dc4 <main+0x46c>)
 8001d62:	4813      	ldr	r0, [pc, #76]	; (8001db0 <main+0x458>)
 8001d64:	f007 fe99 	bl	8009a9a <SBGC32_ReadRealTimeData4>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <main+0x41e>
				LCD_RemoteGeneral.rtReqCmdTimeMs = LCD_RemoteGeneral.currentTimeMs;
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <main+0x45c>)
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4a10      	ldr	r2, [pc, #64]	; (8001db4 <main+0x45c>)
 8001d74:	6293      	str	r3, [r2, #40]	; 0x28


		/* - - - - - - - - - - Display Updating - - - - - - - - - - - */

		/* Low-rate tasks */
		if (((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.lowRateTimeMs) > LOW_RATE_TASK_INTERVAL ||
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <main+0x45c>)
 8001d78:	6a1a      	ldr	r2, [r3, #32]
 8001d7a:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <main+0x45c>)
 8001d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d84:	d805      	bhi.n	8001d92 <main+0x43a>
			  LCD_RemoteGeneral.updateDisplayFlag) && !LCD_RemoteGeneral.updateDisplayFlagEnable)
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <main+0x45c>)
 8001d88:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
		if (((LCD_RemoteGeneral.currentTimeMs - LCD_RemoteGeneral.lowRateTimeMs) > LOW_RATE_TASK_INTERVAL ||
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f43f ae69 	beq.w	8001a64 <main+0x10c>
			  LCD_RemoteGeneral.updateDisplayFlag) && !LCD_RemoteGeneral.updateDisplayFlagEnable)
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <main+0x45c>)
 8001d94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f47f ae63 	bne.w	8001a64 <main+0x10c>
			UpdateDisplay(&SBGC32_Device, &LCD_RemoteGeneral, &RealTimeData, AdjVarGeneral);  // Update LCD to display animation and state
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <main+0x460>)
 8001da0:	4a08      	ldr	r2, [pc, #32]	; (8001dc4 <main+0x46c>)
 8001da2:	4904      	ldr	r1, [pc, #16]	; (8001db4 <main+0x45c>)
 8001da4:	4802      	ldr	r0, [pc, #8]	; (8001db0 <main+0x458>)
 8001da6:	f7ff fa53 	bl	8001250 <UpdateDisplay>
		LCD_RemoteGeneral.currentTimeMs = sbgcGetTick();
 8001daa:	e65b      	b.n	8001a64 <main+0x10c>
 8001dac:	20000438 	.word	0x20000438
 8001db0:	2000033c 	.word	0x2000033c
 8001db4:	20000440 	.word	0x20000440
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	20000488 	.word	0x20000488
 8001dc4:	20000384 	.word	0x20000384

08001dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	; 0x50
 8001dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	2234      	movs	r2, #52	; 0x34
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f008 ff4d 	bl	800ac76 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ddc:	f107 0308 	add.w	r3, r7, #8
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dec:	4b2b      	ldr	r3, [pc, #172]	; (8001e9c <SystemClock_Config+0xd4>)
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	4a2a      	ldr	r2, [pc, #168]	; (8001e9c <SystemClock_Config+0xd4>)
 8001df2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df6:	6413      	str	r3, [r2, #64]	; 0x40
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <SystemClock_Config+0xd4>)
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e00:	607b      	str	r3, [r7, #4]
 8001e02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e04:	4b26      	ldr	r3, [pc, #152]	; (8001ea0 <SystemClock_Config+0xd8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a25      	ldr	r2, [pc, #148]	; (8001ea0 <SystemClock_Config+0xd8>)
 8001e0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	4b23      	ldr	r3, [pc, #140]	; (8001ea0 <SystemClock_Config+0xd8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e18:	603b      	str	r3, [r7, #0]
 8001e1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e20:	2301      	movs	r3, #1
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e24:	2310      	movs	r3, #16
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e30:	2308      	movs	r3, #8
 8001e32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001e34:	23d8      	movs	r3, #216	; 0xd8
 8001e36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e40:	2302      	movs	r3, #2
 8001e42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 fb23 	bl	8004494 <HAL_RCC_OscConfig>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001e54:	f000 f82b 	bl	8001eae <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001e58:	f002 facc 	bl	80043f4 <HAL_PWREx_EnableOverDrive>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001e62:	f000 f824 	bl	8001eae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e66:	230f      	movs	r3, #15
 8001e68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e72:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001e76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001e7e:	f107 0308 	add.w	r3, r7, #8
 8001e82:	2107      	movs	r1, #7
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 fdb3 	bl	80049f0 <HAL_RCC_ClockConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001e90:	f000 f80d 	bl	8001eae <Error_Handler>
  }
}
 8001e94:	bf00      	nop
 8001e96:	3750      	adds	r7, #80	; 0x50
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40023800 	.word	0x40023800
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <SerialAPI_FatalErrorHandler>:

/* USER CODE BEGIN 4 */

void SerialAPI_FatalErrorHandler (void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
	/* User common error handler */
	__disable_irq();

	while (1);
 8001eac:	e7fe      	b.n	8001eac <SerialAPI_FatalErrorHandler+0x8>

08001eae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb2:	b672      	cpsid	i
}
 8001eb4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eb6:	e7fe      	b.n	8001eb6 <Error_Handler+0x8>

08001eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_MspInit+0x44>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a0e      	ldr	r2, [pc, #56]	; (8001efc <HAL_MspInit+0x44>)
 8001ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b0c      	ldr	r3, [pc, #48]	; (8001efc <HAL_MspInit+0x44>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed6:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_MspInit+0x44>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a08      	ldr	r2, [pc, #32]	; (8001efc <HAL_MspInit+0x44>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b06      	ldr	r3, [pc, #24]	; (8001efc <HAL_MspInit+0x44>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f04:	e7fe      	b.n	8001f04 <NMI_Handler+0x4>

08001f06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f06:	b480      	push	{r7}
 8001f08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <HardFault_Handler+0x4>

08001f0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f10:	e7fe      	b.n	8001f10 <MemManage_Handler+0x4>

08001f12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f12:	b480      	push	{r7}
 8001f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f16:	e7fe      	b.n	8001f16 <BusFault_Handler+0x4>

08001f18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f1c:	e7fe      	b.n	8001f1c <UsageFault_Handler+0x4>

08001f1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr

08001f3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f4c:	f000 fc08 	bl	8002760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

	/* - - - - - ADC1 Interrupt Flags Check - - - - - */

	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001f58:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <ADC_IRQHandler+0x30>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d109      	bne.n	8001f7a <ADC_IRQHandler+0x26>
		GET_FLAG_ADC_CR1_EOCIE(JOYSTICK_ADC))
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <ADC_IRQHandler+0x30>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
	if (GET_FLAG_ADC_SR_EOC(JOYSTICK_ADC) &&
 8001f70:	2b20      	cmp	r3, #32
 8001f72:	d102      	bne.n	8001f7a <ADC_IRQHandler+0x26>
		ADC_DRV_EndConvCallBack(&InputsInfo);
 8001f74:	4804      	ldr	r0, [pc, #16]	; (8001f88 <ADC_IRQHandler+0x34>)
 8001f76:	f7ff fa81 	bl	800147c <ADC_DRV_EndConvCallBack>

	/*  - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f7a:	4802      	ldr	r0, [pc, #8]	; (8001f84 <ADC_IRQHandler+0x30>)
 8001f7c:	f000 fd8e 	bl	8002a9c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	200002a0 	.word	0x200002a0
 8001f88:	20000488 	.word	0x20000488

08001f8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

	/* - - - - - TIM2 Interrupt Flags Check - - - - - */

	sbgcTimerIRQ_Handler(&SBGC32_Device)
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <TIM2_IRQHandler+0x38>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f003 0301 	and.w	r3, r3, #1
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d10c      	bne.n	8001fb8 <TIM2_IRQHandler+0x2c>
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <TIM2_IRQHandler+0x38>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d105      	bne.n	8001fb8 <TIM2_IRQHandler+0x2c>
 8001fac:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <TIM2_IRQHandler+0x3c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f007 f963 	bl	800927e <DriverSBGC32_TimerCallBack>

	/*  - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fb8:	4802      	ldr	r0, [pc, #8]	; (8001fc4 <TIM2_IRQHandler+0x38>)
 8001fba:	f003 fbf7 	bl	80057ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	200004a4 	.word	0x200004a4
 8001fc8:	2000033c 	.word	0x2000033c

08001fcc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	/*  - - - - UART1 Interrupt Flags Check - - - - - */

	sbgcUART_IRQ_Handler(&SBGC32_Device)
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <USART1_IRQHandler+0x74>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fda:	2b40      	cmp	r3, #64	; 0x40
 8001fdc:	d10c      	bne.n	8001ff8 <USART1_IRQHandler+0x2c>
 8001fde:	4b18      	ldr	r3, [pc, #96]	; (8002040 <USART1_IRQHandler+0x74>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <USART1_IRQHandler+0x2c>
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <USART1_IRQHandler+0x78>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f007 f9b2 	bl	800935c <DriverSBGC32_UART_TxCallBack>
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <USART1_IRQHandler+0x74>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	69db      	ldr	r3, [r3, #28]
 8001ffe:	f003 0320 	and.w	r3, r3, #32
 8002002:	2b20      	cmp	r3, #32
 8002004:	d10c      	bne.n	8002020 <USART1_IRQHandler+0x54>
 8002006:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <USART1_IRQHandler+0x74>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b00      	cmp	r3, #0
 8002012:	d005      	beq.n	8002020 <USART1_IRQHandler+0x54>
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <USART1_IRQHandler+0x78>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4618      	mov	r0, r3
 800201c:	f007 fa40 	bl	80094a0 <DriverSBGC32_UART_RxCallBack>
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <USART1_IRQHandler+0x74>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b08      	cmp	r3, #8
 800202c:	d103      	bne.n	8002036 <USART1_IRQHandler+0x6a>
 800202e:	4b04      	ldr	r3, [pc, #16]	; (8002040 <USART1_IRQHandler+0x74>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2208      	movs	r2, #8
 8002034:	621a      	str	r2, [r3, #32]

	/*  - - - - - - - - - - - - - - - - - - - - - - - */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002036:	4802      	ldr	r0, [pc, #8]	; (8002040 <USART1_IRQHandler+0x74>)
 8002038:	f004 f85e 	bl	80060f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	200004f0 	.word	0x200004f0
 8002044:	2000033c 	.word	0x2000033c

08002048 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if (GET_FLAG_EXTI_ENC(ENC_A_Pin) &&
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <EXTI15_10_IRQHandler+0x64>)
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00c      	beq.n	8002072 <EXTI15_10_IRQHandler+0x2a>
		READ_PIN(ENC_B_GPIO_Port, ENC_B_Pin))
 8002058:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205c:	4814      	ldr	r0, [pc, #80]	; (80020b0 <EXTI15_10_IRQHandler+0x68>)
 800205e:	f001 fbf5 	bl	800384c <HAL_GPIO_ReadPin>
 8002062:	4603      	mov	r3, r0
	if (GET_FLAG_EXTI_ENC(ENC_A_Pin) &&
 8002064:	2b00      	cmp	r3, #0
 8002066:	d004      	beq.n	8002072 <EXTI15_10_IRQHandler+0x2a>
		EXTI_DRV_FallingCallBack(&InputsInfo, ENC_A_Pin);
 8002068:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800206c:	4811      	ldr	r0, [pc, #68]	; (80020b4 <EXTI15_10_IRQHandler+0x6c>)
 800206e:	f7ff fa38 	bl	80014e2 <EXTI_DRV_FallingCallBack>

	if (GET_FLAG_EXTI_ENC(ENC_B_Pin) &&
 8002072:	4b0e      	ldr	r3, [pc, #56]	; (80020ac <EXTI15_10_IRQHandler+0x64>)
 8002074:	695b      	ldr	r3, [r3, #20]
 8002076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00c      	beq.n	8002098 <EXTI15_10_IRQHandler+0x50>
		READ_PIN(ENC_A_GPIO_Port, ENC_A_Pin))
 800207e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002082:	480d      	ldr	r0, [pc, #52]	; (80020b8 <EXTI15_10_IRQHandler+0x70>)
 8002084:	f001 fbe2 	bl	800384c <HAL_GPIO_ReadPin>
 8002088:	4603      	mov	r3, r0
	if (GET_FLAG_EXTI_ENC(ENC_B_Pin) &&
 800208a:	2b00      	cmp	r3, #0
 800208c:	d004      	beq.n	8002098 <EXTI15_10_IRQHandler+0x50>
		EXTI_DRV_FallingCallBack(&InputsInfo, ENC_B_Pin);
 800208e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002092:	4808      	ldr	r0, [pc, #32]	; (80020b4 <EXTI15_10_IRQHandler+0x6c>)
 8002094:	f7ff fa25 	bl	80014e2 <EXTI_DRV_FallingCallBack>

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_A_Pin);
 8002098:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800209c:	f001 fc08 	bl	80038b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_B_Pin);
 80020a0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80020a4:	f001 fc04 	bl	80038b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40013c00 	.word	0x40013c00
 80020b0:	40021400 	.word	0x40021400
 80020b4:	20000488 	.word	0x20000488
 80020b8:	40021000 	.word	0x40021000

080020bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
	return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_kill>:

int _kill(int pid, int sig)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80020d6:	f008 fe31 	bl	800ad3c <__errno>
 80020da:	4603      	mov	r3, r0
 80020dc:	2216      	movs	r2, #22
 80020de:	601a      	str	r2, [r3, #0]
	return -1;
 80020e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_exit>:

void _exit (int status)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80020f4:	f04f 31ff 	mov.w	r1, #4294967295
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff ffe7 	bl	80020cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80020fe:	e7fe      	b.n	80020fe <_exit+0x12>

08002100 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	e00a      	b.n	8002128 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002112:	f3af 8000 	nop.w
 8002116:	4601      	mov	r1, r0
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	1c5a      	adds	r2, r3, #1
 800211c:	60ba      	str	r2, [r7, #8]
 800211e:	b2ca      	uxtb	r2, r1
 8002120:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbf0      	blt.n	8002112 <_read+0x12>
	}

return len;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	b086      	sub	sp, #24
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	e009      	b.n	8002160 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	1c5a      	adds	r2, r3, #1
 8002150:	60ba      	str	r2, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3301      	adds	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	697a      	ldr	r2, [r7, #20]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	dbf1      	blt.n	800214c <_write+0x12>
	}
	return len;
 8002168:	687b      	ldr	r3, [r7, #4]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_close>:

int _close(int file)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
	return -1;
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800217e:	4618      	mov	r0, r3
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800219a:	605a      	str	r2, [r3, #4]
	return 0;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <_isatty>:

int _isatty(int file)
{
 80021aa:	b480      	push	{r7}
 80021ac:	b083      	sub	sp, #12
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
	return 1;
 80021b2:	2301      	movs	r3, #1
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
	return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
	...

080021dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021e4:	4a14      	ldr	r2, [pc, #80]	; (8002238 <_sbrk+0x5c>)
 80021e6:	4b15      	ldr	r3, [pc, #84]	; (800223c <_sbrk+0x60>)
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021f8:	4b11      	ldr	r3, [pc, #68]	; (8002240 <_sbrk+0x64>)
 80021fa:	4a12      	ldr	r2, [pc, #72]	; (8002244 <_sbrk+0x68>)
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	429a      	cmp	r2, r3
 800220a:	d207      	bcs.n	800221c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800220c:	f008 fd96 	bl	800ad3c <__errno>
 8002210:	4603      	mov	r3, r0
 8002212:	220c      	movs	r2, #12
 8002214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002216:	f04f 33ff 	mov.w	r3, #4294967295
 800221a:	e009      	b.n	8002230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800221c:	4b08      	ldr	r3, [pc, #32]	; (8002240 <_sbrk+0x64>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <_sbrk+0x64>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4413      	add	r3, r2
 800222a:	4a05      	ldr	r2, [pc, #20]	; (8002240 <_sbrk+0x64>)
 800222c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800222e:	68fb      	ldr	r3, [r7, #12]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20080000 	.word	0x20080000
 800223c:	00000400 	.word	0x00000400
 8002240:	200004a0 	.word	0x200004a0
 8002244:	20000758 	.word	0x20000758

08002248 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800224c:	4b06      	ldr	r3, [pc, #24]	; (8002268 <SystemInit+0x20>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	4a05      	ldr	r2, [pc, #20]	; (8002268 <SystemInit+0x20>)
 8002254:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002258:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800225c:	bf00      	nop
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002272:	2300      	movs	r3, #0
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	2300      	movs	r3, #0
 8002278:	617b      	str	r3, [r7, #20]
 800227a:	2302      	movs	r3, #2
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	2302      	movs	r3, #2
 8002284:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002286:	4b34      	ldr	r3, [pc, #208]	; (8002358 <SystemCoreClockUpdate+0xec>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 030c 	and.w	r3, r3, #12
 800228e:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d011      	beq.n	80022ba <SystemCoreClockUpdate+0x4e>
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	2b08      	cmp	r3, #8
 800229a:	d844      	bhi.n	8002326 <SystemCoreClockUpdate+0xba>
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <SystemCoreClockUpdate+0x3e>
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d004      	beq.n	80022b2 <SystemCoreClockUpdate+0x46>
 80022a8:	e03d      	b.n	8002326 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80022aa:	4b2c      	ldr	r3, [pc, #176]	; (800235c <SystemCoreClockUpdate+0xf0>)
 80022ac:	4a2c      	ldr	r2, [pc, #176]	; (8002360 <SystemCoreClockUpdate+0xf4>)
 80022ae:	601a      	str	r2, [r3, #0]
      break;
 80022b0:	e03d      	b.n	800232e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80022b2:	4b2a      	ldr	r3, [pc, #168]	; (800235c <SystemCoreClockUpdate+0xf0>)
 80022b4:	4a2b      	ldr	r2, [pc, #172]	; (8002364 <SystemCoreClockUpdate+0xf8>)
 80022b6:	601a      	str	r2, [r3, #0]
      break;
 80022b8:	e039      	b.n	800232e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <SystemCoreClockUpdate+0xec>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0d9b      	lsrs	r3, r3, #22
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <SystemCoreClockUpdate+0xec>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ce:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d00c      	beq.n	80022f0 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80022d6:	4a23      	ldr	r2, [pc, #140]	; (8002364 <SystemCoreClockUpdate+0xf8>)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4a1e      	ldr	r2, [pc, #120]	; (8002358 <SystemCoreClockUpdate+0xec>)
 80022e0:	6852      	ldr	r2, [r2, #4]
 80022e2:	0992      	lsrs	r2, r2, #6
 80022e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	617b      	str	r3, [r7, #20]
 80022ee:	e00b      	b.n	8002308 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80022f0:	4a1b      	ldr	r2, [pc, #108]	; (8002360 <SystemCoreClockUpdate+0xf4>)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f8:	4a17      	ldr	r2, [pc, #92]	; (8002358 <SystemCoreClockUpdate+0xec>)
 80022fa:	6852      	ldr	r2, [r2, #4]
 80022fc:	0992      	lsrs	r2, r2, #6
 80022fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002302:	fb02 f303 	mul.w	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <SystemCoreClockUpdate+0xec>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	0c1b      	lsrs	r3, r3, #16
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	3301      	adds	r3, #1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002318:	697a      	ldr	r2, [r7, #20]
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <SystemCoreClockUpdate+0xf0>)
 8002322:	6013      	str	r3, [r2, #0]
      break;
 8002324:	e003      	b.n	800232e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002326:	4b0d      	ldr	r3, [pc, #52]	; (800235c <SystemCoreClockUpdate+0xf0>)
 8002328:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <SystemCoreClockUpdate+0xf4>)
 800232a:	601a      	str	r2, [r3, #0]
      break;
 800232c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <SystemCoreClockUpdate+0xec>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	091b      	lsrs	r3, r3, #4
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	4a0b      	ldr	r2, [pc, #44]	; (8002368 <SystemCoreClockUpdate+0xfc>)
 800233a:	5cd3      	ldrb	r3, [r2, r3]
 800233c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <SystemCoreClockUpdate+0xf0>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	fa22 f303 	lsr.w	r3, r2, r3
 8002348:	4a04      	ldr	r2, [pc, #16]	; (800235c <SystemCoreClockUpdate+0xf0>)
 800234a:	6013      	str	r3, [r2, #0]
}
 800234c:	bf00      	nop
 800234e:	371c      	adds	r7, #28
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40023800 	.word	0x40023800
 800235c:	200000a0 	.word	0x200000a0
 8002360:	00f42400 	.word	0x00f42400
 8002364:	017d7840 	.word	0x017d7840
 8002368:	0800e3c4 	.word	0x0800e3c4

0800236c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b088      	sub	sp, #32
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <MX_TIM2_Init+0x98>)
 800238c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002390:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <MX_TIM2_Init+0x98>)
 8002394:	226b      	movs	r2, #107	; 0x6b
 8002396:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <MX_TIM2_Init+0x98>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <MX_TIM2_Init+0x98>)
 80023a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80023a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a6:	4b17      	ldr	r3, [pc, #92]	; (8002404 <MX_TIM2_Init+0x98>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ac:	4b15      	ldr	r3, [pc, #84]	; (8002404 <MX_TIM2_Init+0x98>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023b2:	4814      	ldr	r0, [pc, #80]	; (8002404 <MX_TIM2_Init+0x98>)
 80023b4:	f003 f92a 	bl	800560c <HAL_TIM_Base_Init>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80023be:	f7ff fd76 	bl	8001eae <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4619      	mov	r1, r3
 80023ce:	480d      	ldr	r0, [pc, #52]	; (8002404 <MX_TIM2_Init+0x98>)
 80023d0:	f003 fb0c 	bl	80059ec <HAL_TIM_ConfigClockSource>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80023da:	f7ff fd68 	bl	8001eae <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80023de:	2320      	movs	r3, #32
 80023e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023e6:	1d3b      	adds	r3, r7, #4
 80023e8:	4619      	mov	r1, r3
 80023ea:	4806      	ldr	r0, [pc, #24]	; (8002404 <MX_TIM2_Init+0x98>)
 80023ec:	f003 fd34 	bl	8005e58 <HAL_TIMEx_MasterConfigSynchronization>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80023f6:	f7ff fd5a 	bl	8001eae <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	200004a4 	.word	0x200004a4

08002408 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002418:	d113      	bne.n	8002442 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_TIM_Base_MspInit+0x44>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <HAL_TIM_Base_MspInit+0x44>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_TIM_Base_MspInit+0x44>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8002432:	2200      	movs	r2, #0
 8002434:	2103      	movs	r1, #3
 8002436:	201c      	movs	r0, #28
 8002438:	f000 ff93 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800243c:	201c      	movs	r0, #28
 800243e:	f000 ffac 	bl	800339a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023800 	.word	0x40023800

08002450 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002454:	4b14      	ldr	r3, [pc, #80]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 8002456:	4a15      	ldr	r2, [pc, #84]	; (80024ac <MX_USART1_UART_Init+0x5c>)
 8002458:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 800245c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002460:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002462:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 8002464:	2200      	movs	r2, #0
 8002466:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002468:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 800246a:	2200      	movs	r2, #0
 800246c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 8002476:	220c      	movs	r2, #12
 8002478:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 8002482:	2200      	movs	r2, #0
 8002484:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 800248e:	2200      	movs	r2, #0
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_USART1_UART_Init+0x58>)
 8002494:	f003 fd8c 	bl	8005fb0 <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800249e:	f7ff fd06 	bl	8001eae <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	200004f0 	.word	0x200004f0
 80024ac:	40011000 	.word	0x40011000

080024b0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024b4:	4b14      	ldr	r3, [pc, #80]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024b6:	4a15      	ldr	r2, [pc, #84]	; (800250c <MX_USART2_UART_Init+0x5c>)
 80024b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80024ba:	4b13      	ldr	r3, [pc, #76]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024c2:	4b11      	ldr	r3, [pc, #68]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024c8:	4b0f      	ldr	r3, [pc, #60]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80024ce:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b0c      	ldr	r3, [pc, #48]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80024e6:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80024f4:	4804      	ldr	r0, [pc, #16]	; (8002508 <MX_USART2_UART_Init+0x58>)
 80024f6:	f003 fda9 	bl	800604c <HAL_HalfDuplex_Init>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
 8002500:	f7ff fcd5 	bl	8001eae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20000578 	.word	0x20000578
 800250c:	40004400 	.word	0x40004400

08002510 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b0b0      	sub	sp, #192	; 0xc0
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002518:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800251c:	2200      	movs	r2, #0
 800251e:	601a      	str	r2, [r3, #0]
 8002520:	605a      	str	r2, [r3, #4]
 8002522:	609a      	str	r2, [r3, #8]
 8002524:	60da      	str	r2, [r3, #12]
 8002526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002528:	f107 031c 	add.w	r3, r7, #28
 800252c:	2290      	movs	r2, #144	; 0x90
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f008 fba0 	bl	800ac76 <memset>
  if(uartHandle->Instance==USART1)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a51      	ldr	r2, [pc, #324]	; (8002680 <HAL_UART_MspInit+0x170>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d15a      	bne.n	80025f6 <HAL_UART_MspInit+0xe6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002540:	2340      	movs	r3, #64	; 0x40
 8002542:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002544:	2300      	movs	r3, #0
 8002546:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4618      	mov	r0, r3
 800254e:	f002 fc35 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002558:	f7ff fca9 	bl	8001eae <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800255c:	4b49      	ldr	r3, [pc, #292]	; (8002684 <HAL_UART_MspInit+0x174>)
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	4a48      	ldr	r2, [pc, #288]	; (8002684 <HAL_UART_MspInit+0x174>)
 8002562:	f043 0310 	orr.w	r3, r3, #16
 8002566:	6453      	str	r3, [r2, #68]	; 0x44
 8002568:	4b46      	ldr	r3, [pc, #280]	; (8002684 <HAL_UART_MspInit+0x174>)
 800256a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256c:	f003 0310 	and.w	r3, r3, #16
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002574:	4b43      	ldr	r3, [pc, #268]	; (8002684 <HAL_UART_MspInit+0x174>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	4a42      	ldr	r2, [pc, #264]	; (8002684 <HAL_UART_MspInit+0x174>)
 800257a:	f043 0302 	orr.w	r3, r3, #2
 800257e:	6313      	str	r3, [r2, #48]	; 0x30
 8002580:	4b40      	ldr	r3, [pc, #256]	; (8002684 <HAL_UART_MspInit+0x174>)
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB14     ------> USART1_TX
    PB15     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800258c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002594:	2302      	movs	r3, #2
 8002596:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259a:	2300      	movs	r3, #0
 800259c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a0:	2303      	movs	r3, #3
 80025a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025a6:	2304      	movs	r3, #4
 80025a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025b0:	4619      	mov	r1, r3
 80025b2:	4835      	ldr	r0, [pc, #212]	; (8002688 <HAL_UART_MspInit+0x178>)
 80025b4:	f000 ff9e 	bl	80034f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025c6:	2301      	movs	r3, #1
 80025c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 80025d2:	2304      	movs	r3, #4
 80025d4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025d8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80025dc:	4619      	mov	r1, r3
 80025de:	482a      	ldr	r0, [pc, #168]	; (8002688 <HAL_UART_MspInit+0x178>)
 80025e0:	f000 ff88 	bl	80034f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	2101      	movs	r1, #1
 80025e8:	2025      	movs	r0, #37	; 0x25
 80025ea:	f000 feba 	bl	8003362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80025ee:	2025      	movs	r0, #37	; 0x25
 80025f0:	f000 fed3 	bl	800339a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80025f4:	e03f      	b.n	8002676 <HAL_UART_MspInit+0x166>
  else if(uartHandle->Instance==USART2)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a24      	ldr	r2, [pc, #144]	; (800268c <HAL_UART_MspInit+0x17c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d13a      	bne.n	8002676 <HAL_UART_MspInit+0x166>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002604:	2300      	movs	r3, #0
 8002606:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002608:	f107 031c 	add.w	r3, r7, #28
 800260c:	4618      	mov	r0, r3
 800260e:	f002 fbd5 	bl	8004dbc <HAL_RCCEx_PeriphCLKConfig>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_UART_MspInit+0x10c>
      Error_Handler();
 8002618:	f7ff fc49 	bl	8001eae <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800261c:	4b19      	ldr	r3, [pc, #100]	; (8002684 <HAL_UART_MspInit+0x174>)
 800261e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002620:	4a18      	ldr	r2, [pc, #96]	; (8002684 <HAL_UART_MspInit+0x174>)
 8002622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002626:	6413      	str	r3, [r2, #64]	; 0x40
 8002628:	4b16      	ldr	r3, [pc, #88]	; (8002684 <HAL_UART_MspInit+0x174>)
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002634:	4b13      	ldr	r3, [pc, #76]	; (8002684 <HAL_UART_MspInit+0x174>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002638:	4a12      	ldr	r2, [pc, #72]	; (8002684 <HAL_UART_MspInit+0x174>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6313      	str	r3, [r2, #48]	; 0x30
 8002640:	4b10      	ldr	r3, [pc, #64]	; (8002684 <HAL_UART_MspInit+0x174>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800264c:	2304      	movs	r3, #4
 800264e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002652:	2312      	movs	r3, #18
 8002654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265e:	2303      	movs	r3, #3
 8002660:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002664:	2307      	movs	r3, #7
 8002666:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800266e:	4619      	mov	r1, r3
 8002670:	4807      	ldr	r0, [pc, #28]	; (8002690 <HAL_UART_MspInit+0x180>)
 8002672:	f000 ff3f 	bl	80034f4 <HAL_GPIO_Init>
}
 8002676:	bf00      	nop
 8002678:	37c0      	adds	r7, #192	; 0xc0
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40011000 	.word	0x40011000
 8002684:	40023800 	.word	0x40023800
 8002688:	40020400 	.word	0x40020400
 800268c:	40004400 	.word	0x40004400
 8002690:	40020000 	.word	0x40020000

08002694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002694:	f8df d034 	ldr.w	sp, [pc, #52]	; 80026cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002698:	480d      	ldr	r0, [pc, #52]	; (80026d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800269a:	490e      	ldr	r1, [pc, #56]	; (80026d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800269c:	4a0e      	ldr	r2, [pc, #56]	; (80026d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800269e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026a0:	e002      	b.n	80026a8 <LoopCopyDataInit>

080026a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026a6:	3304      	adds	r3, #4

080026a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ac:	d3f9      	bcc.n	80026a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ae:	4a0b      	ldr	r2, [pc, #44]	; (80026dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026b0:	4c0b      	ldr	r4, [pc, #44]	; (80026e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026b4:	e001      	b.n	80026ba <LoopFillZerobss>

080026b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026b8:	3204      	adds	r2, #4

080026ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026bc:	d3fb      	bcc.n	80026b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80026be:	f7ff fdc3 	bl	8002248 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026c2:	f008 fb41 	bl	800ad48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026c6:	f7ff f947 	bl	8001958 <main>
  bx  lr    
 80026ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80026cc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80026d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026d4:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 80026d8:	0800e818 	.word	0x0800e818
  ldr r2, =_sbss
 80026dc:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 80026e0:	20000758 	.word	0x20000758

080026e4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80026e4:	e7fe      	b.n	80026e4 <CAN1_RX0_IRQHandler>

080026e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026ea:	2003      	movs	r0, #3
 80026ec:	f000 fe2e 	bl	800334c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026f0:	200f      	movs	r0, #15
 80026f2:	f000 f805 	bl	8002700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026f6:	f7ff fbdf 	bl	8001eb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}

08002700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002708:	4b12      	ldr	r3, [pc, #72]	; (8002754 <HAL_InitTick+0x54>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_InitTick+0x58>)
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	4619      	mov	r1, r3
 8002712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002716:	fbb3 f3f1 	udiv	r3, r3, r1
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fe49 	bl	80033b6 <HAL_SYSTICK_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e00e      	b.n	800274c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b0f      	cmp	r3, #15
 8002732:	d80a      	bhi.n	800274a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002734:	2200      	movs	r2, #0
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	f04f 30ff 	mov.w	r0, #4294967295
 800273c:	f000 fe11 	bl	8003362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002740:	4a06      	ldr	r2, [pc, #24]	; (800275c <HAL_InitTick+0x5c>)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
 8002748:	e000      	b.n	800274c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	200000a0 	.word	0x200000a0
 8002758:	200000a8 	.word	0x200000a8
 800275c:	200000a4 	.word	0x200000a4

08002760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002764:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_IncTick+0x20>)
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b06      	ldr	r3, [pc, #24]	; (8002784 <HAL_IncTick+0x24>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4413      	add	r3, r2
 8002770:	4a04      	ldr	r2, [pc, #16]	; (8002784 <HAL_IncTick+0x24>)
 8002772:	6013      	str	r3, [r2, #0]
}
 8002774:	bf00      	nop
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200000a8 	.word	0x200000a8
 8002784:	20000600 	.word	0x20000600

08002788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  return uwTick;
 800278c:	4b03      	ldr	r3, [pc, #12]	; (800279c <HAL_GetTick+0x14>)
 800278e:	681b      	ldr	r3, [r3, #0]
}
 8002790:	4618      	mov	r0, r3
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	20000600 	.word	0x20000600

080027a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027a8:	f7ff ffee 	bl	8002788 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b8:	d005      	beq.n	80027c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027ba:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <HAL_Delay+0x44>)
 80027bc:	781b      	ldrb	r3, [r3, #0]
 80027be:	461a      	mov	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4413      	add	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80027c6:	bf00      	nop
 80027c8:	f7ff ffde 	bl	8002788 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d8f7      	bhi.n	80027c8 <HAL_Delay+0x28>
  {
  }
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3710      	adds	r7, #16
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	200000a8 	.word	0x200000a8

080027e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027f0:	2300      	movs	r3, #0
 80027f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e031      	b.n	8002862 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	2b00      	cmp	r3, #0
 8002804:	d109      	bne.n	800281a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fb7e 	bl	8000f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_ADC_Init+0x84>)
 800282c:	4013      	ands	r3, r2
 800282e:	f043 0202 	orr.w	r2, r3, #2
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 fbb4 	bl	8002fa4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	f043 0201 	orr.w	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	641a      	str	r2, [r3, #64]	; 0x40
 8002852:	e001      	b.n	8002858 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002860:	7bfb      	ldrb	r3, [r7, #15]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	ffffeefd 	.word	0xffffeefd

08002870 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002870:	b480      	push	{r7}
 8002872:	b085      	sub	sp, #20
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <HAL_ADC_Start_IT+0x1a>
 8002886:	2302      	movs	r3, #2
 8002888:	e0b5      	b.n	80029f6 <HAL_ADC_Start_IT+0x186>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b01      	cmp	r3, #1
 800289e:	d018      	beq.n	80028d2 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80028b0:	4b54      	ldr	r3, [pc, #336]	; (8002a04 <HAL_ADC_Start_IT+0x194>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <HAL_ADC_Start_IT+0x198>)
 80028b6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ba:	0c9a      	lsrs	r2, r3, #18
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80028c4:	e002      	b.n	80028cc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3b01      	subs	r3, #1
 80028ca:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f9      	bne.n	80028c6 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d17d      	bne.n	80029dc <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028e4:	4b49      	ldr	r3, [pc, #292]	; (8002a0c <HAL_ADC_Start_IT+0x19c>)
 80028e6:	4013      	ands	r3, r2
 80028e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002906:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291a:	d106      	bne.n	800292a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002920:	f023 0206 	bic.w	r2, r3, #6
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	645a      	str	r2, [r3, #68]	; 0x44
 8002928:	e002      	b.n	8002930 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002940:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <HAL_ADC_Start_IT+0x1a0>)
 800294e:	430b      	orrs	r3, r1
 8002950:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002952:	4b30      	ldr	r3, [pc, #192]	; (8002a14 <HAL_ADC_Start_IT+0x1a4>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 031f 	and.w	r3, r3, #31
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10f      	bne.n	800297e <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d143      	bne.n	80029f4 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800297a:	609a      	str	r2, [r3, #8]
 800297c:	e03a      	b.n	80029f4 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a25      	ldr	r2, [pc, #148]	; (8002a18 <HAL_ADC_Start_IT+0x1a8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d10e      	bne.n	80029a6 <HAL_ADC_Start_IT+0x136>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d107      	bne.n	80029a6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029a4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80029a6:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_ADC_Start_IT+0x1a4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 0310 	and.w	r3, r3, #16
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d120      	bne.n	80029f4 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a19      	ldr	r2, [pc, #100]	; (8002a1c <HAL_ADC_Start_IT+0x1ac>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d11b      	bne.n	80029f4 <HAL_ADC_Start_IT+0x184>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d114      	bne.n	80029f4 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	e00b      	b.n	80029f4 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	f043 0210 	orr.w	r2, r3, #16
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ec:	f043 0201 	orr.w	r2, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	200000a0 	.word	0x200000a0
 8002a08:	431bde83 	.word	0x431bde83
 8002a0c:	fffff8fe 	.word	0xfffff8fe
 8002a10:	04000020 	.word	0x04000020
 8002a14:	40012300 	.word	0x40012300
 8002a18:	40012000 	.word	0x40012000
 8002a1c:	40012200 	.word	0x40012200

08002a20 <HAL_ADC_Stop_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_ADC_Stop_IT+0x16>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e027      	b.n	8002a86 <HAL_ADC_Stop_IT+0x66>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0201 	bic.w	r2, r2, #1
 8002a4c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10f      	bne.n	8002a7c <HAL_ADC_Stop_IT+0x5c>
  {
  	/* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6859      	ldr	r1, [r3, #4]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_ADC_Stop_IT+0x74>)
 8002a68:	400b      	ands	r3, r1
 8002a6a:	6053      	str	r3, [r2, #4]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a70:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_ADC_Stop_IT+0x78>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	f043 0201 	orr.w	r2, r3, #1
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	fbffffdf 	.word	0xfbffffdf
 8002a98:	ffffeefe 	.word	0xffffeefe

08002a9c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d049      	beq.n	8002b66 <HAL_ADC_IRQHandler+0xca>
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d046      	beq.n	8002b66 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002adc:	f003 0310 	and.w	r3, r3, #16
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d12b      	bne.n	8002b56 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d127      	bne.n	8002b56 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d006      	beq.n	8002b22 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d119      	bne.n	8002b56 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0220 	bic.w	r2, r2, #32
 8002b30:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f043 0201 	orr.w	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f8b0 	bl	8002cbc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f06f 0212 	mvn.w	r2, #18
 8002b64:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b74:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d057      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x190>
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d054      	beq.n	8002c2c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 0310 	and.w	r3, r3, #16
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d105      	bne.n	8002b9a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d139      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bae:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d006      	beq.n	8002bc4 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d12b      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d124      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d11d      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d119      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bf6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fabb 	bl	8003198 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f06f 020c 	mvn.w	r2, #12
 8002c2a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d017      	beq.n	8002c72 <HAL_ADC_IRQHandler+0x1d6>
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d014      	beq.n	8002c72 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d10d      	bne.n	8002c72 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 f834 	bl	8002cd0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f06f 0201 	mvn.w	r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c80:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_ADC_IRQHandler+0x218>
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d012      	beq.n	8002cb4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f043 0202 	orr.w	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f06f 0220 	mvn.w	r2, #32
 8002ca2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f81d 	bl	8002ce4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0220 	mvn.w	r2, #32
 8002cb2:	601a      	str	r2, [r3, #0]
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d101      	bne.n	8002d14 <HAL_ADC_ConfigChannel+0x1c>
 8002d10:	2302      	movs	r3, #2
 8002d12:	e136      	b.n	8002f82 <HAL_ADC_ConfigChannel+0x28a>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	d93a      	bls.n	8002d9a <HAL_ADC_ConfigChannel+0xa2>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d2c:	d035      	beq.n	8002d9a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	68d9      	ldr	r1, [r3, #12]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	4413      	add	r3, r2
 8002d42:	3b1e      	subs	r3, #30
 8002d44:	2207      	movs	r2, #7
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	400a      	ands	r2, r1
 8002d52:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a8d      	ldr	r2, [pc, #564]	; (8002f90 <HAL_ADC_ConfigChannel+0x298>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10a      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68d9      	ldr	r1, [r3, #12]
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	061a      	lsls	r2, r3, #24
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d72:	e035      	b.n	8002de0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68d9      	ldr	r1, [r3, #12]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	4618      	mov	r0, r3
 8002d86:	4603      	mov	r3, r0
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	4403      	add	r3, r0
 8002d8c:	3b1e      	subs	r3, #30
 8002d8e:	409a      	lsls	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d98:	e022      	b.n	8002de0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	6919      	ldr	r1, [r3, #16]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	4613      	mov	r3, r2
 8002daa:	005b      	lsls	r3, r3, #1
 8002dac:	4413      	add	r3, r2
 8002dae:	2207      	movs	r2, #7
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43da      	mvns	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6919      	ldr	r1, [r3, #16]
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	4618      	mov	r0, r3
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4403      	add	r3, r0
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b06      	cmp	r3, #6
 8002de6:	d824      	bhi.n	8002e32 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	3b05      	subs	r3, #5
 8002dfa:	221f      	movs	r2, #31
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43da      	mvns	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	400a      	ands	r2, r1
 8002e08:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	4618      	mov	r0, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	3b05      	subs	r3, #5
 8002e24:	fa00 f203 	lsl.w	r2, r0, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	635a      	str	r2, [r3, #52]	; 0x34
 8002e30:	e04c      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b0c      	cmp	r3, #12
 8002e38:	d824      	bhi.n	8002e84 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	3b23      	subs	r3, #35	; 0x23
 8002e4c:	221f      	movs	r2, #31
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43da      	mvns	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	400a      	ands	r2, r1
 8002e5a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	4618      	mov	r0, r3
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685a      	ldr	r2, [r3, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	3b23      	subs	r3, #35	; 0x23
 8002e76:	fa00 f203 	lsl.w	r2, r0, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
 8002e82:	e023      	b.n	8002ecc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	3b41      	subs	r3, #65	; 0x41
 8002e96:	221f      	movs	r2, #31
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	400a      	ands	r2, r1
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3b41      	subs	r3, #65	; 0x41
 8002ec0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a30      	ldr	r2, [pc, #192]	; (8002f94 <HAL_ADC_ConfigChannel+0x29c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d10a      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1f4>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ede:	d105      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4a2c      	ldr	r2, [pc, #176]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002ee6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002eea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a28      	ldr	r2, [pc, #160]	; (8002f94 <HAL_ADC_ConfigChannel+0x29c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10f      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x21e>
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b12      	cmp	r3, #18
 8002efc:	d10b      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002efe:	4b26      	ldr	r3, [pc, #152]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	4a25      	ldr	r2, [pc, #148]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f04:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f08:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f14:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1e      	ldr	r2, [pc, #120]	; (8002f94 <HAL_ADC_ConfigChannel+0x29c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d12b      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x280>
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_ADC_ConfigChannel+0x298>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d003      	beq.n	8002f32 <HAL_ADC_ConfigChannel+0x23a>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2b11      	cmp	r3, #17
 8002f30:	d122      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002f32:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002f3c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002f3e:	4b16      	ldr	r3, [pc, #88]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_ADC_ConfigChannel+0x2a0>)
 8002f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f48:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a10      	ldr	r2, [pc, #64]	; (8002f90 <HAL_ADC_ConfigChannel+0x298>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d111      	bne.n	8002f78 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_ADC_ConfigChannel+0x2a4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a11      	ldr	r2, [pc, #68]	; (8002fa0 <HAL_ADC_ConfigChannel+0x2a8>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0c9a      	lsrs	r2, r3, #18
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f6a:	e002      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1f9      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	4618      	mov	r0, r3
 8002f84:	3714      	adds	r7, #20
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	10000012 	.word	0x10000012
 8002f94:	40012000 	.word	0x40012000
 8002f98:	40012300 	.word	0x40012300
 8002f9c:	200000a0 	.word	0x200000a0
 8002fa0:	431bde83 	.word	0x431bde83

08002fa4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002fac:	4b78      	ldr	r3, [pc, #480]	; (8003190 <ADC_Init+0x1ec>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a77      	ldr	r2, [pc, #476]	; (8003190 <ADC_Init+0x1ec>)
 8002fb2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002fb6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002fb8:	4b75      	ldr	r3, [pc, #468]	; (8003190 <ADC_Init+0x1ec>)
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	4973      	ldr	r1, [pc, #460]	; (8003190 <ADC_Init+0x1ec>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fd4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6859      	ldr	r1, [r3, #4]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	021a      	lsls	r2, r3, #8
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685a      	ldr	r2, [r3, #4]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ff8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689a      	ldr	r2, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800301a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6899      	ldr	r1, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003032:	4a58      	ldr	r2, [pc, #352]	; (8003194 <ADC_Init+0x1f0>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d022      	beq.n	800307e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003046:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	6899      	ldr	r1, [r3, #8]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003068:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	e00f      	b.n	800309e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800308c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800309c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 0202 	bic.w	r2, r2, #2
 80030ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	005a      	lsls	r2, r3, #1
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d01b      	beq.n	8003104 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685a      	ldr	r2, [r3, #4]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80030ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	3b01      	subs	r3, #1
 80030f8:	035a      	lsls	r2, r3, #13
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	e007      	b.n	8003114 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003112:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003122:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	69db      	ldr	r3, [r3, #28]
 800312e:	3b01      	subs	r3, #1
 8003130:	051a      	lsls	r2, r3, #20
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003148:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6899      	ldr	r1, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003156:	025a      	lsls	r2, r3, #9
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	430a      	orrs	r2, r1
 800315e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800316e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6899      	ldr	r1, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	029a      	lsls	r2, r3, #10
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	609a      	str	r2, [r3, #8]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	40012300 	.word	0x40012300
 8003194:	0f000001 	.word	0x0f000001

08003198 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b085      	sub	sp, #20
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031bc:	4b0b      	ldr	r3, [pc, #44]	; (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031c8:	4013      	ands	r3, r2
 80031ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80031d4:	4b06      	ldr	r3, [pc, #24]	; (80031f0 <__NVIC_SetPriorityGrouping+0x44>)
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	; (80031ec <__NVIC_SetPriorityGrouping+0x40>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00
 80031f0:	05fa0000 	.word	0x05fa0000

080031f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f8:	4b04      	ldr	r3, [pc, #16]	; (800320c <__NVIC_GetPriorityGrouping+0x18>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	0a1b      	lsrs	r3, r3, #8
 80031fe:	f003 0307 	and.w	r3, r3, #7
}
 8003202:	4618      	mov	r0, r3
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003210:	b480      	push	{r7}
 8003212:	b083      	sub	sp, #12
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800321a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321e:	2b00      	cmp	r3, #0
 8003220:	db0b      	blt.n	800323a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4907      	ldr	r1, [pc, #28]	; (8003248 <__NVIC_EnableIRQ+0x38>)
 800322a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322e:	095b      	lsrs	r3, r3, #5
 8003230:	2001      	movs	r0, #1
 8003232:	fa00 f202 	lsl.w	r2, r0, r2
 8003236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	e000e100 	.word	0xe000e100

0800324c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	4603      	mov	r3, r0
 8003254:	6039      	str	r1, [r7, #0]
 8003256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325c:	2b00      	cmp	r3, #0
 800325e:	db0a      	blt.n	8003276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	b2da      	uxtb	r2, r3
 8003264:	490c      	ldr	r1, [pc, #48]	; (8003298 <__NVIC_SetPriority+0x4c>)
 8003266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	b2d2      	uxtb	r2, r2
 800326e:	440b      	add	r3, r1
 8003270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003274:	e00a      	b.n	800328c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	4908      	ldr	r1, [pc, #32]	; (800329c <__NVIC_SetPriority+0x50>)
 800327c:	79fb      	ldrb	r3, [r7, #7]
 800327e:	f003 030f 	and.w	r3, r3, #15
 8003282:	3b04      	subs	r3, #4
 8003284:	0112      	lsls	r2, r2, #4
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	440b      	add	r3, r1
 800328a:	761a      	strb	r2, [r3, #24]
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr
 8003298:	e000e100 	.word	0xe000e100
 800329c:	e000ed00 	.word	0xe000ed00

080032a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b089      	sub	sp, #36	; 0x24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0307 	and.w	r3, r3, #7
 80032b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f1c3 0307 	rsb	r3, r3, #7
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	bf28      	it	cs
 80032be:	2304      	movcs	r3, #4
 80032c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3304      	adds	r3, #4
 80032c6:	2b06      	cmp	r3, #6
 80032c8:	d902      	bls.n	80032d0 <NVIC_EncodePriority+0x30>
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3b03      	subs	r3, #3
 80032ce:	e000      	b.n	80032d2 <NVIC_EncodePriority+0x32>
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	f04f 32ff 	mov.w	r2, #4294967295
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43da      	mvns	r2, r3
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	401a      	ands	r2, r3
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e8:	f04f 31ff 	mov.w	r1, #4294967295
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	fa01 f303 	lsl.w	r3, r1, r3
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f8:	4313      	orrs	r3, r2
         );
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3724      	adds	r7, #36	; 0x24
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
	...

08003308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003318:	d301      	bcc.n	800331e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800331a:	2301      	movs	r3, #1
 800331c:	e00f      	b.n	800333e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331e:	4a0a      	ldr	r2, [pc, #40]	; (8003348 <SysTick_Config+0x40>)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3b01      	subs	r3, #1
 8003324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003326:	210f      	movs	r1, #15
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f7ff ff8e 	bl	800324c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <SysTick_Config+0x40>)
 8003332:	2200      	movs	r2, #0
 8003334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003336:	4b04      	ldr	r3, [pc, #16]	; (8003348 <SysTick_Config+0x40>)
 8003338:	2207      	movs	r2, #7
 800333a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	3708      	adds	r7, #8
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	e000e010 	.word	0xe000e010

0800334c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f7ff ff29 	bl	80031ac <__NVIC_SetPriorityGrouping>
}
 800335a:	bf00      	nop
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}

08003362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	4603      	mov	r3, r0
 800336a:	60b9      	str	r1, [r7, #8]
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003374:	f7ff ff3e 	bl	80031f4 <__NVIC_GetPriorityGrouping>
 8003378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	68b9      	ldr	r1, [r7, #8]
 800337e:	6978      	ldr	r0, [r7, #20]
 8003380:	f7ff ff8e 	bl	80032a0 <NVIC_EncodePriority>
 8003384:	4602      	mov	r2, r0
 8003386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800338a:	4611      	mov	r1, r2
 800338c:	4618      	mov	r0, r3
 800338e:	f7ff ff5d 	bl	800324c <__NVIC_SetPriority>
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b082      	sub	sp, #8
 800339e:	af00      	add	r7, sp, #0
 80033a0:	4603      	mov	r3, r0
 80033a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff31 	bl	8003210 <__NVIC_EnableIRQ>
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff ffa2 	bl	8003308 <SysTick_Config>
 80033c4:	4603      	mov	r3, r0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3708      	adds	r7, #8
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033dc:	f7ff f9d4 	bl	8002788 <HAL_GetTick>
 80033e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d008      	beq.n	8003400 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2280      	movs	r2, #128	; 0x80
 80033f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e052      	b.n	80034a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0216 	bic.w	r2, r2, #22
 800340e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	695a      	ldr	r2, [r3, #20]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800341e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	d103      	bne.n	8003430 <HAL_DMA_Abort+0x62>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0208 	bic.w	r2, r2, #8
 800343e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003450:	e013      	b.n	800347a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003452:	f7ff f999 	bl	8002788 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	2b05      	cmp	r3, #5
 800345e:	d90c      	bls.n	800347a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2203      	movs	r2, #3
 800346a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e015      	b.n	80034a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e4      	bne.n	8003452 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800348c:	223f      	movs	r2, #63	; 0x3f
 800348e:	409a      	lsls	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d004      	beq.n	80034cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2280      	movs	r2, #128	; 0x80
 80034c6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e00c      	b.n	80034e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2205      	movs	r2, #5
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b089      	sub	sp, #36	; 0x24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80034fe:	2300      	movs	r3, #0
 8003500:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003506:	2300      	movs	r3, #0
 8003508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800350a:	2300      	movs	r3, #0
 800350c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
 8003512:	e175      	b.n	8003800 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003514:	2201      	movs	r2, #1
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4013      	ands	r3, r2
 8003526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	429a      	cmp	r2, r3
 800352e:	f040 8164 	bne.w	80037fa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 0303 	and.w	r3, r3, #3
 800353a:	2b01      	cmp	r3, #1
 800353c:	d005      	beq.n	800354a <HAL_GPIO_Init+0x56>
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d130      	bne.n	80035ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	2203      	movs	r2, #3
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4013      	ands	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	69ba      	ldr	r2, [r7, #24]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003580:	2201      	movs	r2, #1
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	43db      	mvns	r3, r3
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4013      	ands	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	091b      	lsrs	r3, r3, #4
 8003596:	f003 0201 	and.w	r2, r3, #1
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d017      	beq.n	80035e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 0303 	and.w	r3, r3, #3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d123      	bne.n	800363c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	08da      	lsrs	r2, r3, #3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3208      	adds	r2, #8
 80035fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003600:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	220f      	movs	r2, #15
 800360c:	fa02 f303 	lsl.w	r3, r2, r3
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	fa02 f303 	lsl.w	r3, r2, r3
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	08da      	lsrs	r2, r3, #3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	3208      	adds	r2, #8
 8003636:	69b9      	ldr	r1, [r7, #24]
 8003638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	2203      	movs	r2, #3
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f003 0203 	and.w	r2, r3, #3
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	fa02 f303 	lsl.w	r3, r2, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80be 	beq.w	80037fa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800367e:	4b66      	ldr	r3, [pc, #408]	; (8003818 <HAL_GPIO_Init+0x324>)
 8003680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003682:	4a65      	ldr	r2, [pc, #404]	; (8003818 <HAL_GPIO_Init+0x324>)
 8003684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003688:	6453      	str	r3, [r2, #68]	; 0x44
 800368a:	4b63      	ldr	r3, [pc, #396]	; (8003818 <HAL_GPIO_Init+0x324>)
 800368c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003692:	60fb      	str	r3, [r7, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003696:	4a61      	ldr	r2, [pc, #388]	; (800381c <HAL_GPIO_Init+0x328>)
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	089b      	lsrs	r3, r3, #2
 800369c:	3302      	adds	r3, #2
 800369e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	220f      	movs	r2, #15
 80036ae:	fa02 f303 	lsl.w	r3, r2, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	69ba      	ldr	r2, [r7, #24]
 80036b6:	4013      	ands	r3, r2
 80036b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a58      	ldr	r2, [pc, #352]	; (8003820 <HAL_GPIO_Init+0x32c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d037      	beq.n	8003732 <HAL_GPIO_Init+0x23e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a57      	ldr	r2, [pc, #348]	; (8003824 <HAL_GPIO_Init+0x330>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d031      	beq.n	800372e <HAL_GPIO_Init+0x23a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a56      	ldr	r2, [pc, #344]	; (8003828 <HAL_GPIO_Init+0x334>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d02b      	beq.n	800372a <HAL_GPIO_Init+0x236>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a55      	ldr	r2, [pc, #340]	; (800382c <HAL_GPIO_Init+0x338>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d025      	beq.n	8003726 <HAL_GPIO_Init+0x232>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a54      	ldr	r2, [pc, #336]	; (8003830 <HAL_GPIO_Init+0x33c>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d01f      	beq.n	8003722 <HAL_GPIO_Init+0x22e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a53      	ldr	r2, [pc, #332]	; (8003834 <HAL_GPIO_Init+0x340>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d019      	beq.n	800371e <HAL_GPIO_Init+0x22a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_GPIO_Init+0x344>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d013      	beq.n	800371a <HAL_GPIO_Init+0x226>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a51      	ldr	r2, [pc, #324]	; (800383c <HAL_GPIO_Init+0x348>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d00d      	beq.n	8003716 <HAL_GPIO_Init+0x222>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a50      	ldr	r2, [pc, #320]	; (8003840 <HAL_GPIO_Init+0x34c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d007      	beq.n	8003712 <HAL_GPIO_Init+0x21e>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4f      	ldr	r2, [pc, #316]	; (8003844 <HAL_GPIO_Init+0x350>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_GPIO_Init+0x21a>
 800370a:	2309      	movs	r3, #9
 800370c:	e012      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800370e:	230a      	movs	r3, #10
 8003710:	e010      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003712:	2308      	movs	r3, #8
 8003714:	e00e      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003716:	2307      	movs	r3, #7
 8003718:	e00c      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800371a:	2306      	movs	r3, #6
 800371c:	e00a      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800371e:	2305      	movs	r3, #5
 8003720:	e008      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003722:	2304      	movs	r3, #4
 8003724:	e006      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003726:	2303      	movs	r3, #3
 8003728:	e004      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800372a:	2302      	movs	r3, #2
 800372c:	e002      	b.n	8003734 <HAL_GPIO_Init+0x240>
 800372e:	2301      	movs	r3, #1
 8003730:	e000      	b.n	8003734 <HAL_GPIO_Init+0x240>
 8003732:	2300      	movs	r3, #0
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	f002 0203 	and.w	r2, r2, #3
 800373a:	0092      	lsls	r2, r2, #2
 800373c:	4093      	lsls	r3, r2
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003744:	4935      	ldr	r1, [pc, #212]	; (800381c <HAL_GPIO_Init+0x328>)
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	3302      	adds	r3, #2
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003752:	4b3d      	ldr	r3, [pc, #244]	; (8003848 <HAL_GPIO_Init+0x354>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	43db      	mvns	r3, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4013      	ands	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800376e:	69ba      	ldr	r2, [r7, #24]
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003776:	4a34      	ldr	r2, [pc, #208]	; (8003848 <HAL_GPIO_Init+0x354>)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800377c:	4b32      	ldr	r3, [pc, #200]	; (8003848 <HAL_GPIO_Init+0x354>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	43db      	mvns	r3, r3
 8003786:	69ba      	ldr	r2, [r7, #24]
 8003788:	4013      	ands	r3, r2
 800378a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037a0:	4a29      	ldr	r2, [pc, #164]	; (8003848 <HAL_GPIO_Init+0x354>)
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80037a6:	4b28      	ldr	r3, [pc, #160]	; (8003848 <HAL_GPIO_Init+0x354>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80037ca:	4a1f      	ldr	r2, [pc, #124]	; (8003848 <HAL_GPIO_Init+0x354>)
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_GPIO_Init+0x354>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	43db      	mvns	r3, r3
 80037da:	69ba      	ldr	r2, [r7, #24]
 80037dc:	4013      	ands	r3, r2
 80037de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d003      	beq.n	80037f4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037f4:	4a14      	ldr	r2, [pc, #80]	; (8003848 <HAL_GPIO_Init+0x354>)
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3301      	adds	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	f67f ae86 	bls.w	8003514 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	3724      	adds	r7, #36	; 0x24
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40023800 	.word	0x40023800
 800381c:	40013800 	.word	0x40013800
 8003820:	40020000 	.word	0x40020000
 8003824:	40020400 	.word	0x40020400
 8003828:	40020800 	.word	0x40020800
 800382c:	40020c00 	.word	0x40020c00
 8003830:	40021000 	.word	0x40021000
 8003834:	40021400 	.word	0x40021400
 8003838:	40021800 	.word	0x40021800
 800383c:	40021c00 	.word	0x40021c00
 8003840:	40022000 	.word	0x40022000
 8003844:	40022400 	.word	0x40022400
 8003848:	40013c00 	.word	0x40013c00

0800384c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	460b      	mov	r3, r1
 8003856:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	887b      	ldrh	r3, [r7, #2]
 800385e:	4013      	ands	r3, r2
 8003860:	2b00      	cmp	r3, #0
 8003862:	d002      	beq.n	800386a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003864:	2301      	movs	r3, #1
 8003866:	73fb      	strb	r3, [r7, #15]
 8003868:	e001      	b.n	800386e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800386a:	2300      	movs	r3, #0
 800386c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800386e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003870:	4618      	mov	r0, r3
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	807b      	strh	r3, [r7, #2]
 8003888:	4613      	mov	r3, r2
 800388a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800388c:	787b      	ldrb	r3, [r7, #1]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d003      	beq.n	800389a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003898:	e003      	b.n	80038a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800389a:	887b      	ldrh	r3, [r7, #2]
 800389c:	041a      	lsls	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	619a      	str	r2, [r3, #24]
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
	...

080038b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	4603      	mov	r3, r0
 80038b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038ba:	4b08      	ldr	r3, [pc, #32]	; (80038dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038bc:	695a      	ldr	r2, [r3, #20]
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d006      	beq.n	80038d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038c6:	4a05      	ldr	r2, [pc, #20]	; (80038dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c8:	88fb      	ldrh	r3, [r7, #6]
 80038ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f806 	bl	80038e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40013c00 	.word	0x40013c00

080038e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	4603      	mov	r3, r0
 80038e8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80038ea:	bf00      	nop
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
	...

080038f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07f      	b.n	8003a0a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b00      	cmp	r3, #0
 8003914:	d106      	bne.n	8003924 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	f7fd ff96 	bl	8001850 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2224      	movs	r2, #36	; 0x24
 8003928:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0201 	bic.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685a      	ldr	r2, [r3, #4]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003948:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003958:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d107      	bne.n	8003972 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	e006      	b.n	8003980 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689a      	ldr	r2, [r3, #8]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800397e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d104      	bne.n	8003992 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003990:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6859      	ldr	r1, [r3, #4]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	4b1d      	ldr	r3, [pc, #116]	; (8003a14 <HAL_I2C_Init+0x11c>)
 800399e:	430b      	orrs	r3, r1
 80039a0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68da      	ldr	r2, [r3, #12]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	430a      	orrs	r2, r1
 80039ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69d9      	ldr	r1, [r3, #28]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f042 0201 	orr.w	r2, r2, #1
 80039ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	02008000 	.word	0x02008000

08003a18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	461a      	mov	r2, r3
 8003a24:	460b      	mov	r3, r1
 8003a26:	817b      	strh	r3, [r7, #10]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	2b20      	cmp	r3, #32
 8003a36:	f040 80da 	bne.w	8003bee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_I2C_Master_Transmit+0x30>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e0d3      	b.n	8003bf0 <HAL_I2C_Master_Transmit+0x1d8>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a50:	f7fe fe9a 	bl	8002788 <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	2319      	movs	r3, #25
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a62:	68f8      	ldr	r0, [r7, #12]
 8003a64:	f000 f9e6 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e0be      	b.n	8003bf0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2221      	movs	r2, #33	; 0x21
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2210      	movs	r2, #16
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	893a      	ldrh	r2, [r7, #8]
 8003a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2bff      	cmp	r3, #255	; 0xff
 8003aa2:	d90e      	bls.n	8003ac2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	22ff      	movs	r2, #255	; 0xff
 8003aa8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aae:	b2da      	uxtb	r2, r3
 8003ab0:	8979      	ldrh	r1, [r7, #10]
 8003ab2:	4b51      	ldr	r3, [pc, #324]	; (8003bf8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 fbd0 	bl	8004260 <I2C_TransferConfig>
 8003ac0:	e06c      	b.n	8003b9c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	8979      	ldrh	r1, [r7, #10]
 8003ad4:	4b48      	ldr	r3, [pc, #288]	; (8003bf8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fbbf 	bl	8004260 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003ae2:	e05b      	b.n	8003b9c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	6a39      	ldr	r1, [r7, #32]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 f9e3 	bl	8003eb4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e07b      	b.n	8003bf0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	781a      	ldrb	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	1c5a      	adds	r2, r3, #1
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b20:	3b01      	subs	r3, #1
 8003b22:	b29a      	uxth	r2, r3
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2c:	b29b      	uxth	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d034      	beq.n	8003b9c <HAL_I2C_Master_Transmit+0x184>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d130      	bne.n	8003b9c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]
 8003b40:	2200      	movs	r2, #0
 8003b42:	2180      	movs	r1, #128	; 0x80
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	f000 f975 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d001      	beq.n	8003b54 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e04d      	b.n	8003bf0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2bff      	cmp	r3, #255	; 0xff
 8003b5c:	d90e      	bls.n	8003b7c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	22ff      	movs	r2, #255	; 0xff
 8003b62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	8979      	ldrh	r1, [r7, #10]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	9300      	str	r3, [sp, #0]
 8003b70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fb73 	bl	8004260 <I2C_TransferConfig>
 8003b7a:	e00f      	b.n	8003b9c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b80:	b29a      	uxth	r2, r3
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	8979      	ldrh	r1, [r7, #10]
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fb62 	bl	8004260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d19e      	bne.n	8003ae4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	6a39      	ldr	r1, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 f9c2 	bl	8003f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e01a      	b.n	8003bf0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6859      	ldr	r1, [r3, #4]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_I2C_Master_Transmit+0x1e4>)
 8003bce:	400b      	ands	r3, r1
 8003bd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003bea:	2300      	movs	r3, #0
 8003bec:	e000      	b.n	8003bf0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003bee:	2302      	movs	r3, #2
  }
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3718      	adds	r7, #24
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	80002000 	.word	0x80002000
 8003bfc:	fe00e800 	.word	0xfe00e800

08003c00 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	817b      	strh	r3, [r7, #10]
 8003c10:	4613      	mov	r3, r2
 8003c12:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b20      	cmp	r3, #32
 8003c1e:	f040 80db 	bne.w	8003dd8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <HAL_I2C_Master_Receive+0x30>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0d4      	b.n	8003dda <HAL_I2C_Master_Receive+0x1da>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c38:	f7fe fda6 	bl	8002788 <HAL_GetTick>
 8003c3c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	2319      	movs	r3, #25
 8003c44:	2201      	movs	r2, #1
 8003c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f000 f8f2 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e0bf      	b.n	8003dda <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2222      	movs	r2, #34	; 0x22
 8003c5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2210      	movs	r2, #16
 8003c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	893a      	ldrh	r2, [r7, #8]
 8003c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	2bff      	cmp	r3, #255	; 0xff
 8003c8a:	d90e      	bls.n	8003caa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	22ff      	movs	r2, #255	; 0xff
 8003c90:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	8979      	ldrh	r1, [r7, #10]
 8003c9a:	4b52      	ldr	r3, [pc, #328]	; (8003de4 <HAL_I2C_Master_Receive+0x1e4>)
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ca2:	68f8      	ldr	r0, [r7, #12]
 8003ca4:	f000 fadc 	bl	8004260 <I2C_TransferConfig>
 8003ca8:	e06d      	b.n	8003d86 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	8979      	ldrh	r1, [r7, #10]
 8003cbc:	4b49      	ldr	r3, [pc, #292]	; (8003de4 <HAL_I2C_Master_Receive+0x1e4>)
 8003cbe:	9300      	str	r3, [sp, #0]
 8003cc0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cc4:	68f8      	ldr	r0, [r7, #12]
 8003cc6:	f000 facb 	bl	8004260 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003cca:	e05c      	b.n	8003d86 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	6a39      	ldr	r1, [r7, #32]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 f96b 	bl	8003fac <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e07c      	b.n	8003dda <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	b2d2      	uxtb	r2, r2
 8003cec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d034      	beq.n	8003d86 <HAL_I2C_Master_Receive+0x186>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d130      	bne.n	8003d86 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	9300      	str	r3, [sp, #0]
 8003d28:	6a3b      	ldr	r3, [r7, #32]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	2180      	movs	r1, #128	; 0x80
 8003d2e:	68f8      	ldr	r0, [r7, #12]
 8003d30:	f000 f880 	bl	8003e34 <I2C_WaitOnFlagUntilTimeout>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d001      	beq.n	8003d3e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e04d      	b.n	8003dda <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	2bff      	cmp	r3, #255	; 0xff
 8003d46:	d90e      	bls.n	8003d66 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	22ff      	movs	r2, #255	; 0xff
 8003d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	8979      	ldrh	r1, [r7, #10]
 8003d56:	2300      	movs	r3, #0
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 fa7e 	bl	8004260 <I2C_TransferConfig>
 8003d64:	e00f      	b.n	8003d86 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	8979      	ldrh	r1, [r7, #10]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	9300      	str	r3, [sp, #0]
 8003d7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fa6d 	bl	8004260 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d19d      	bne.n	8003ccc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d90:	697a      	ldr	r2, [r7, #20]
 8003d92:	6a39      	ldr	r1, [r7, #32]
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 f8cd 	bl	8003f34 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d001      	beq.n	8003da4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e01a      	b.n	8003dda <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2220      	movs	r2, #32
 8003daa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <HAL_I2C_Master_Receive+0x1e8>)
 8003db8:	400b      	ands	r3, r1
 8003dba:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	e000      	b.n	8003dda <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003dd8:	2302      	movs	r3, #2
  }
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	80002400 	.word	0x80002400
 8003de8:	fe00e800 	.word	0xfe00e800

08003dec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d103      	bne.n	8003e0a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2200      	movs	r2, #0
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d007      	beq.n	8003e28 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699a      	ldr	r2, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	619a      	str	r2, [r3, #24]
  }
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	4613      	mov	r3, r2
 8003e42:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e44:	e022      	b.n	8003e8c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d01e      	beq.n	8003e8c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fe fc9b 	bl	8002788 <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	69bb      	ldr	r3, [r7, #24]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d113      	bne.n	8003e8c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e00f      	b.n	8003eac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d0cd      	beq.n	8003e46 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ec0:	e02c      	b.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68b9      	ldr	r1, [r7, #8]
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f000 f8ea 	bl	80040a0 <I2C_IsErrorOccurred>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e02a      	b.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003edc:	d01e      	beq.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ede:	f7fe fc53 	bl	8002788 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	68ba      	ldr	r2, [r7, #8]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d302      	bcc.n	8003ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d113      	bne.n	8003f1c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ef8:	f043 0220 	orr.w	r2, r3, #32
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e007      	b.n	8003f2c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d1cb      	bne.n	8003ec2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3710      	adds	r7, #16
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f40:	e028      	b.n	8003f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	68b9      	ldr	r1, [r7, #8]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f8aa 	bl	80040a0 <I2C_IsErrorOccurred>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e026      	b.n	8003fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f56:	f7fe fc17 	bl	8002788 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	68ba      	ldr	r2, [r7, #8]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d302      	bcc.n	8003f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d113      	bne.n	8003f94 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	f043 0220 	orr.w	r2, r3, #32
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e007      	b.n	8003fa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	699b      	ldr	r3, [r3, #24]
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b20      	cmp	r3, #32
 8003fa0:	d1cf      	bne.n	8003f42 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fa2:	2300      	movs	r3, #0
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}

08003fac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b084      	sub	sp, #16
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fb8:	e064      	b.n	8004084 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	68b9      	ldr	r1, [r7, #8]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f86e 	bl	80040a0 <I2C_IsErrorOccurred>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e062      	b.n	8004094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d138      	bne.n	800404e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	699b      	ldr	r3, [r3, #24]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	d105      	bne.n	8003ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e04e      	b.n	8004094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	699b      	ldr	r3, [r3, #24]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b10      	cmp	r3, #16
 8004002:	d107      	bne.n	8004014 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2210      	movs	r2, #16
 800400a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2204      	movs	r2, #4
 8004010:	645a      	str	r2, [r3, #68]	; 0x44
 8004012:	e002      	b.n	800401a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2220      	movs	r2, #32
 8004020:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800402e:	400b      	ands	r3, r1
 8004030:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2220      	movs	r2, #32
 8004036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e022      	b.n	8004094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800404e:	f7fe fb9b 	bl	8002788 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	68ba      	ldr	r2, [r7, #8]
 800405a:	429a      	cmp	r2, r3
 800405c:	d302      	bcc.n	8004064 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10f      	bne.n	8004084 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f043 0220 	orr.w	r2, r3, #32
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	e007      	b.n	8004094 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b04      	cmp	r3, #4
 8004090:	d193      	bne.n	8003fba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	fe00e800 	.word	0xfe00e800

080040a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	f003 0310 	and.w	r3, r3, #16
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d068      	beq.n	800419e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2210      	movs	r2, #16
 80040d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80040d4:	e049      	b.n	800416a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040dc:	d045      	beq.n	800416a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040de:	f7fe fb53 	bl	8002788 <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d302      	bcc.n	80040f4 <I2C_IsErrorOccurred+0x54>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d13a      	bne.n	800416a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004106:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004112:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004116:	d121      	bne.n	800415c <I2C_IsErrorOccurred+0xbc>
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800411e:	d01d      	beq.n	800415c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004120:	7cfb      	ldrb	r3, [r7, #19]
 8004122:	2b20      	cmp	r3, #32
 8004124:	d01a      	beq.n	800415c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685a      	ldr	r2, [r3, #4]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004134:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004136:	f7fe fb27 	bl	8002788 <HAL_GetTick>
 800413a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800413c:	e00e      	b.n	800415c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800413e:	f7fe fb23 	bl	8002788 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b19      	cmp	r3, #25
 800414a:	d907      	bls.n	800415c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800414c:	6a3b      	ldr	r3, [r7, #32]
 800414e:	f043 0320 	orr.w	r3, r3, #32
 8004152:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800415a:	e006      	b.n	800416a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 0320 	and.w	r3, r3, #32
 8004166:	2b20      	cmp	r3, #32
 8004168:	d1e9      	bne.n	800413e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	699b      	ldr	r3, [r3, #24]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b20      	cmp	r3, #32
 8004176:	d003      	beq.n	8004180 <I2C_IsErrorOccurred+0xe0>
 8004178:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800417c:	2b00      	cmp	r3, #0
 800417e:	d0aa      	beq.n	80040d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004184:	2b00      	cmp	r3, #0
 8004186:	d103      	bne.n	8004190 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2220      	movs	r2, #32
 800418e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	f043 0304 	orr.w	r3, r3, #4
 8004196:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00b      	beq.n	80041c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	f043 0301 	orr.w	r3, r3, #1
 80041b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00b      	beq.n	80041ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	f043 0308 	orr.w	r3, r3, #8
 80041d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	f043 0302 	orr.w	r3, r3, #2
 80041fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004204:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800420c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004210:	2b00      	cmp	r3, #0
 8004212:	d01c      	beq.n	800424e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	f7ff fde9 	bl	8003dec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6859      	ldr	r1, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b0d      	ldr	r3, [pc, #52]	; (800425c <I2C_IsErrorOccurred+0x1bc>)
 8004226:	400b      	ands	r3, r1
 8004228:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422e:	6a3b      	ldr	r3, [r7, #32]
 8004230:	431a      	orrs	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800424e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004252:	4618      	mov	r0, r3
 8004254:	3728      	adds	r7, #40	; 0x28
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	fe00e800 	.word	0xfe00e800

08004260 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	607b      	str	r3, [r7, #4]
 800426a:	460b      	mov	r3, r1
 800426c:	817b      	strh	r3, [r7, #10]
 800426e:	4613      	mov	r3, r2
 8004270:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004272:	897b      	ldrh	r3, [r7, #10]
 8004274:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004278:	7a7b      	ldrb	r3, [r7, #9]
 800427a:	041b      	lsls	r3, r3, #16
 800427c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004280:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	4313      	orrs	r3, r2
 800428a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800428e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	0d5b      	lsrs	r3, r3, #21
 800429a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800429e:	4b08      	ldr	r3, [pc, #32]	; (80042c0 <I2C_TransferConfig+0x60>)
 80042a0:	430b      	orrs	r3, r1
 80042a2:	43db      	mvns	r3, r3
 80042a4:	ea02 0103 	and.w	r1, r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80042b2:	bf00      	nop
 80042b4:	371c      	adds	r7, #28
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	03ff63ff 	.word	0x03ff63ff

080042c4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	d138      	bne.n	800434c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e032      	b.n	800434e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2224      	movs	r2, #36	; 0x24
 80042f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 0201 	bic.w	r2, r2, #1
 8004306:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004316:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6819      	ldr	r1, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004348:	2300      	movs	r3, #0
 800434a:	e000      	b.n	800434e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800434c:	2302      	movs	r3, #2
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800435a:	b480      	push	{r7}
 800435c:	b085      	sub	sp, #20
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
 8004362:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800436a:	b2db      	uxtb	r3, r3
 800436c:	2b20      	cmp	r3, #32
 800436e:	d139      	bne.n	80043e4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800437a:	2302      	movs	r3, #2
 800437c:	e033      	b.n	80043e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2224      	movs	r2, #36	; 0x24
 800438a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0201 	bic.w	r2, r2, #1
 800439c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	021b      	lsls	r3, r3, #8
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f042 0201 	orr.w	r2, r2, #1
 80043ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80043fe:	4b23      	ldr	r3, [pc, #140]	; (800448c <HAL_PWREx_EnableOverDrive+0x98>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004402:	4a22      	ldr	r2, [pc, #136]	; (800448c <HAL_PWREx_EnableOverDrive+0x98>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	; 0x40
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_PWREx_EnableOverDrive+0x98>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004412:	603b      	str	r3, [r7, #0]
 8004414:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004416:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800441c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004420:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004422:	f7fe f9b1 	bl	8002788 <HAL_GetTick>
 8004426:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004428:	e009      	b.n	800443e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800442a:	f7fe f9ad 	bl	8002788 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004438:	d901      	bls.n	800443e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e022      	b.n	8004484 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800443e:	4b14      	ldr	r3, [pc, #80]	; (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800444a:	d1ee      	bne.n	800442a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800444c:	4b10      	ldr	r3, [pc, #64]	; (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a0f      	ldr	r2, [pc, #60]	; (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004456:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004458:	f7fe f996 	bl	8002788 <HAL_GetTick>
 800445c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800445e:	e009      	b.n	8004474 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004460:	f7fe f992 	bl	8002788 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800446e:	d901      	bls.n	8004474 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	e007      	b.n	8004484 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004474:	4b06      	ldr	r3, [pc, #24]	; (8004490 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004480:	d1ee      	bne.n	8004460 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}
 800448c:	40023800 	.word	0x40023800
 8004490:	40007000 	.word	0x40007000

08004494 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800449c:	2300      	movs	r3, #0
 800449e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e29b      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f000 8087 	beq.w	80045c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044b8:	4b96      	ldr	r3, [pc, #600]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d00c      	beq.n	80044de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044c4:	4b93      	ldr	r3, [pc, #588]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f003 030c 	and.w	r3, r3, #12
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d112      	bne.n	80044f6 <HAL_RCC_OscConfig+0x62>
 80044d0:	4b90      	ldr	r3, [pc, #576]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044dc:	d10b      	bne.n	80044f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044de:	4b8d      	ldr	r3, [pc, #564]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d06c      	beq.n	80045c4 <HAL_RCC_OscConfig+0x130>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d168      	bne.n	80045c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e275      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044fe:	d106      	bne.n	800450e <HAL_RCC_OscConfig+0x7a>
 8004500:	4b84      	ldr	r3, [pc, #528]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a83      	ldr	r2, [pc, #524]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004506:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800450a:	6013      	str	r3, [r2, #0]
 800450c:	e02e      	b.n	800456c <HAL_RCC_OscConfig+0xd8>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10c      	bne.n	8004530 <HAL_RCC_OscConfig+0x9c>
 8004516:	4b7f      	ldr	r3, [pc, #508]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a7e      	ldr	r2, [pc, #504]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 800451c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	4b7c      	ldr	r3, [pc, #496]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a7b      	ldr	r2, [pc, #492]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004528:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800452c:	6013      	str	r3, [r2, #0]
 800452e:	e01d      	b.n	800456c <HAL_RCC_OscConfig+0xd8>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004538:	d10c      	bne.n	8004554 <HAL_RCC_OscConfig+0xc0>
 800453a:	4b76      	ldr	r3, [pc, #472]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a75      	ldr	r2, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b73      	ldr	r3, [pc, #460]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a72      	ldr	r2, [pc, #456]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 800454c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004550:	6013      	str	r3, [r2, #0]
 8004552:	e00b      	b.n	800456c <HAL_RCC_OscConfig+0xd8>
 8004554:	4b6f      	ldr	r3, [pc, #444]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6e      	ldr	r2, [pc, #440]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 800455a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455e:	6013      	str	r3, [r2, #0]
 8004560:	4b6c      	ldr	r3, [pc, #432]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a6b      	ldr	r2, [pc, #428]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004566:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800456a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d013      	beq.n	800459c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004574:	f7fe f908 	bl	8002788 <HAL_GetTick>
 8004578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800457c:	f7fe f904 	bl	8002788 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b64      	cmp	r3, #100	; 0x64
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e229      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800458e:	4b61      	ldr	r3, [pc, #388]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0f0      	beq.n	800457c <HAL_RCC_OscConfig+0xe8>
 800459a:	e014      	b.n	80045c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fe f8f4 	bl	8002788 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a4:	f7fe f8f0 	bl	8002788 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b64      	cmp	r3, #100	; 0x64
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e215      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045b6:	4b57      	ldr	r3, [pc, #348]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d1f0      	bne.n	80045a4 <HAL_RCC_OscConfig+0x110>
 80045c2:	e000      	b.n	80045c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0302 	and.w	r3, r3, #2
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d069      	beq.n	80046a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80045d2:	4b50      	ldr	r3, [pc, #320]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00b      	beq.n	80045f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045de:	4b4d      	ldr	r3, [pc, #308]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 030c 	and.w	r3, r3, #12
 80045e6:	2b08      	cmp	r3, #8
 80045e8:	d11c      	bne.n	8004624 <HAL_RCC_OscConfig+0x190>
 80045ea:	4b4a      	ldr	r3, [pc, #296]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d116      	bne.n	8004624 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045f6:	4b47      	ldr	r3, [pc, #284]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d005      	beq.n	800460e <HAL_RCC_OscConfig+0x17a>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	2b01      	cmp	r3, #1
 8004608:	d001      	beq.n	800460e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e1e9      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800460e:	4b41      	ldr	r3, [pc, #260]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	493d      	ldr	r1, [pc, #244]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 800461e:	4313      	orrs	r3, r2
 8004620:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004622:	e040      	b.n	80046a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d023      	beq.n	8004674 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800462c:	4b39      	ldr	r3, [pc, #228]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a38      	ldr	r2, [pc, #224]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004638:	f7fe f8a6 	bl	8002788 <HAL_GetTick>
 800463c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	e008      	b.n	8004652 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004640:	f7fe f8a2 	bl	8002788 <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	2b02      	cmp	r3, #2
 800464c:	d901      	bls.n	8004652 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e1c7      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004652:	4b30      	ldr	r3, [pc, #192]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d0f0      	beq.n	8004640 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800465e:	4b2d      	ldr	r3, [pc, #180]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	4929      	ldr	r1, [pc, #164]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
 8004672:	e018      	b.n	80046a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004674:	4b27      	ldr	r3, [pc, #156]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a26      	ldr	r2, [pc, #152]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fe f882 	bl	8002788 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004688:	f7fe f87e 	bl	8002788 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e1a3      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800469a:	4b1e      	ldr	r3, [pc, #120]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0308 	and.w	r3, r3, #8
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d038      	beq.n	8004724 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d019      	beq.n	80046ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046ba:	4b16      	ldr	r3, [pc, #88]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80046bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046be:	4a15      	ldr	r2, [pc, #84]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c6:	f7fe f85f 	bl	8002788 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ce:	f7fe f85b 	bl	8002788 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e180      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e0:	4b0c      	ldr	r3, [pc, #48]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80046e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x23a>
 80046ec:	e01a      	b.n	8004724 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046ee:	4b09      	ldr	r3, [pc, #36]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80046f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f2:	4a08      	ldr	r2, [pc, #32]	; (8004714 <HAL_RCC_OscConfig+0x280>)
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fa:	f7fe f845 	bl	8002788 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	e00a      	b.n	8004718 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004702:	f7fe f841 	bl	8002788 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d903      	bls.n	8004718 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e166      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
 8004714:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004718:	4b92      	ldr	r3, [pc, #584]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 800471a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d1ee      	bne.n	8004702 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80a4 	beq.w	800487a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004732:	4b8c      	ldr	r3, [pc, #560]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10d      	bne.n	800475a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	4b89      	ldr	r3, [pc, #548]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	4a88      	ldr	r2, [pc, #544]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004748:	6413      	str	r3, [r2, #64]	; 0x40
 800474a:	4b86      	ldr	r3, [pc, #536]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	60bb      	str	r3, [r7, #8]
 8004754:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004756:	2301      	movs	r3, #1
 8004758:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800475a:	4b83      	ldr	r3, [pc, #524]	; (8004968 <HAL_RCC_OscConfig+0x4d4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004762:	2b00      	cmp	r3, #0
 8004764:	d118      	bne.n	8004798 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004766:	4b80      	ldr	r3, [pc, #512]	; (8004968 <HAL_RCC_OscConfig+0x4d4>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a7f      	ldr	r2, [pc, #508]	; (8004968 <HAL_RCC_OscConfig+0x4d4>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004772:	f7fe f809 	bl	8002788 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800477a:	f7fe f805 	bl	8002788 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b64      	cmp	r3, #100	; 0x64
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e12a      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800478c:	4b76      	ldr	r3, [pc, #472]	; (8004968 <HAL_RCC_OscConfig+0x4d4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004794:	2b00      	cmp	r3, #0
 8004796:	d0f0      	beq.n	800477a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d106      	bne.n	80047ae <HAL_RCC_OscConfig+0x31a>
 80047a0:	4b70      	ldr	r3, [pc, #448]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a4:	4a6f      	ldr	r2, [pc, #444]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047a6:	f043 0301 	orr.w	r3, r3, #1
 80047aa:	6713      	str	r3, [r2, #112]	; 0x70
 80047ac:	e02d      	b.n	800480a <HAL_RCC_OscConfig+0x376>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10c      	bne.n	80047d0 <HAL_RCC_OscConfig+0x33c>
 80047b6:	4b6b      	ldr	r3, [pc, #428]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ba:	4a6a      	ldr	r2, [pc, #424]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047bc:	f023 0301 	bic.w	r3, r3, #1
 80047c0:	6713      	str	r3, [r2, #112]	; 0x70
 80047c2:	4b68      	ldr	r3, [pc, #416]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	4a67      	ldr	r2, [pc, #412]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047c8:	f023 0304 	bic.w	r3, r3, #4
 80047cc:	6713      	str	r3, [r2, #112]	; 0x70
 80047ce:	e01c      	b.n	800480a <HAL_RCC_OscConfig+0x376>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b05      	cmp	r3, #5
 80047d6:	d10c      	bne.n	80047f2 <HAL_RCC_OscConfig+0x35e>
 80047d8:	4b62      	ldr	r3, [pc, #392]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047dc:	4a61      	ldr	r2, [pc, #388]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	6713      	str	r3, [r2, #112]	; 0x70
 80047e4:	4b5f      	ldr	r3, [pc, #380]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047e8:	4a5e      	ldr	r2, [pc, #376]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047ea:	f043 0301 	orr.w	r3, r3, #1
 80047ee:	6713      	str	r3, [r2, #112]	; 0x70
 80047f0:	e00b      	b.n	800480a <HAL_RCC_OscConfig+0x376>
 80047f2:	4b5c      	ldr	r3, [pc, #368]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	4a5b      	ldr	r2, [pc, #364]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80047f8:	f023 0301 	bic.w	r3, r3, #1
 80047fc:	6713      	str	r3, [r2, #112]	; 0x70
 80047fe:	4b59      	ldr	r3, [pc, #356]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004802:	4a58      	ldr	r2, [pc, #352]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004804:	f023 0304 	bic.w	r3, r3, #4
 8004808:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d015      	beq.n	800483e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004812:	f7fd ffb9 	bl	8002788 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fd ffb5 	bl	8002788 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e0d8      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004830:	4b4c      	ldr	r3, [pc, #304]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ee      	beq.n	800481a <HAL_RCC_OscConfig+0x386>
 800483c:	e014      	b.n	8004868 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483e:	f7fd ffa3 	bl	8002788 <HAL_GetTick>
 8004842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004844:	e00a      	b.n	800485c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004846:	f7fd ff9f 	bl	8002788 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	f241 3288 	movw	r2, #5000	; 0x1388
 8004854:	4293      	cmp	r3, r2
 8004856:	d901      	bls.n	800485c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e0c2      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800485c:	4b41      	ldr	r3, [pc, #260]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1ee      	bne.n	8004846 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004868:	7dfb      	ldrb	r3, [r7, #23]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d105      	bne.n	800487a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	4a3c      	ldr	r2, [pc, #240]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004878:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 80ae 	beq.w	80049e0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004884:	4b37      	ldr	r3, [pc, #220]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 030c 	and.w	r3, r3, #12
 800488c:	2b08      	cmp	r3, #8
 800488e:	d06d      	beq.n	800496c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	2b02      	cmp	r3, #2
 8004896:	d14b      	bne.n	8004930 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004898:	4b32      	ldr	r3, [pc, #200]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a31      	ldr	r2, [pc, #196]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 800489e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a4:	f7fd ff70 	bl	8002788 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ac:	f7fd ff6c 	bl	8002788 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e091      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048be:	4b29      	ldr	r3, [pc, #164]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1f0      	bne.n	80048ac <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	019b      	lsls	r3, r3, #6
 80048da:	431a      	orrs	r2, r3
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	085b      	lsrs	r3, r3, #1
 80048e2:	3b01      	subs	r3, #1
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	431a      	orrs	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	061b      	lsls	r3, r3, #24
 80048ee:	431a      	orrs	r2, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	071b      	lsls	r3, r3, #28
 80048f6:	491b      	ldr	r1, [pc, #108]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80048f8:	4313      	orrs	r3, r2
 80048fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fd ff3e 	bl	8002788 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004910:	f7fd ff3a 	bl	8002788 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e05f      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004922:	4b10      	ldr	r3, [pc, #64]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x47c>
 800492e:	e057      	b.n	80049e0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a0b      	ldr	r2, [pc, #44]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800493a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493c:	f7fd ff24 	bl	8002788 <HAL_GetTick>
 8004940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004942:	e008      	b.n	8004956 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004944:	f7fd ff20 	bl	8002788 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	2b02      	cmp	r3, #2
 8004950:	d901      	bls.n	8004956 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e045      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004956:	4b03      	ldr	r3, [pc, #12]	; (8004964 <HAL_RCC_OscConfig+0x4d0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f0      	bne.n	8004944 <HAL_RCC_OscConfig+0x4b0>
 8004962:	e03d      	b.n	80049e0 <HAL_RCC_OscConfig+0x54c>
 8004964:	40023800 	.word	0x40023800
 8004968:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800496c:	4b1f      	ldr	r3, [pc, #124]	; (80049ec <HAL_RCC_OscConfig+0x558>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d030      	beq.n	80049dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d129      	bne.n	80049dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d122      	bne.n	80049dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800499c:	4013      	ands	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049a2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d119      	bne.n	80049dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	3b01      	subs	r3, #1
 80049b6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d10f      	bne.n	80049dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e000      	b.n	80049e2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800

080049f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0d0      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b6a      	ldr	r3, [pc, #424]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 030f 	and.w	r3, r3, #15
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d910      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b67      	ldr	r3, [pc, #412]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 020f 	bic.w	r2, r3, #15
 8004a1e:	4965      	ldr	r1, [pc, #404]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b63      	ldr	r3, [pc, #396]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0b8      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d020      	beq.n	8004a86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d005      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a50:	4b59      	ldr	r3, [pc, #356]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4a58      	ldr	r2, [pc, #352]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0308 	and.w	r3, r3, #8
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d005      	beq.n	8004a74 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a68:	4b53      	ldr	r3, [pc, #332]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	4a52      	ldr	r2, [pc, #328]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a74:	4b50      	ldr	r3, [pc, #320]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	494d      	ldr	r1, [pc, #308]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d040      	beq.n	8004b14 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d107      	bne.n	8004aaa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	4b47      	ldr	r3, [pc, #284]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d115      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e07f      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d107      	bne.n	8004ac2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab2:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d109      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e073      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e06b      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ad2:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f023 0203 	bic.w	r2, r3, #3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	4936      	ldr	r1, [pc, #216]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ae4:	f7fd fe50 	bl	8002788 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aea:	e00a      	b.n	8004b02 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aec:	f7fd fe4c 	bl	8002788 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e053      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b02:	4b2d      	ldr	r3, [pc, #180]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f003 020c 	and.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	429a      	cmp	r2, r3
 8004b12:	d1eb      	bne.n	8004aec <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b14:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d210      	bcs.n	8004b44 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b22:	4b24      	ldr	r3, [pc, #144]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f023 020f 	bic.w	r2, r3, #15
 8004b2a:	4922      	ldr	r1, [pc, #136]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b32:	4b20      	ldr	r3, [pc, #128]	; (8004bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	683a      	ldr	r2, [r7, #0]
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d001      	beq.n	8004b44 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e032      	b.n	8004baa <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0304 	and.w	r3, r3, #4
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b50:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	4916      	ldr	r1, [pc, #88]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0308 	and.w	r3, r3, #8
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d009      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b6e:	4b12      	ldr	r3, [pc, #72]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	490e      	ldr	r1, [pc, #56]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b82:	f000 f821 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8004b86:	4602      	mov	r2, r0
 8004b88:	4b0b      	ldr	r3, [pc, #44]	; (8004bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	091b      	lsrs	r3, r3, #4
 8004b8e:	f003 030f 	and.w	r3, r3, #15
 8004b92:	490a      	ldr	r1, [pc, #40]	; (8004bbc <HAL_RCC_ClockConfig+0x1cc>)
 8004b94:	5ccb      	ldrb	r3, [r1, r3]
 8004b96:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9a:	4a09      	ldr	r2, [pc, #36]	; (8004bc0 <HAL_RCC_ClockConfig+0x1d0>)
 8004b9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b9e:	4b09      	ldr	r3, [pc, #36]	; (8004bc4 <HAL_RCC_ClockConfig+0x1d4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7fd fdac 	bl	8002700 <HAL_InitTick>

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	40023c00 	.word	0x40023c00
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	0800e3c4 	.word	0x0800e3c4
 8004bc0:	200000a0 	.word	0x200000a0
 8004bc4:	200000a4 	.word	0x200000a4

08004bc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bcc:	b090      	sub	sp, #64	; 0x40
 8004bce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd8:	2300      	movs	r3, #0
 8004bda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004be0:	4b59      	ldr	r3, [pc, #356]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f003 030c 	and.w	r3, r3, #12
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	d00d      	beq.n	8004c08 <HAL_RCC_GetSysClockFreq+0x40>
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	f200 80a1 	bhi.w	8004d34 <HAL_RCC_GetSysClockFreq+0x16c>
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_RCC_GetSysClockFreq+0x34>
 8004bf6:	2b04      	cmp	r3, #4
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004bfa:	e09b      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bfc:	4b53      	ldr	r3, [pc, #332]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8004bfe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c00:	e09b      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c02:	4b53      	ldr	r3, [pc, #332]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c06:	e098      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c08:	4b4f      	ldr	r3, [pc, #316]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c10:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004c12:	4b4d      	ldr	r3, [pc, #308]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d028      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1e:	4b4a      	ldr	r3, [pc, #296]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	099b      	lsrs	r3, r3, #6
 8004c24:	2200      	movs	r2, #0
 8004c26:	623b      	str	r3, [r7, #32]
 8004c28:	627a      	str	r2, [r7, #36]	; 0x24
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c30:	2100      	movs	r1, #0
 8004c32:	4b47      	ldr	r3, [pc, #284]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c34:	fb03 f201 	mul.w	r2, r3, r1
 8004c38:	2300      	movs	r3, #0
 8004c3a:	fb00 f303 	mul.w	r3, r0, r3
 8004c3e:	4413      	add	r3, r2
 8004c40:	4a43      	ldr	r2, [pc, #268]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c42:	fba0 1202 	umull	r1, r2, r0, r2
 8004c46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c48:	460a      	mov	r2, r1
 8004c4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c4e:	4413      	add	r3, r2
 8004c50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	2200      	movs	r2, #0
 8004c56:	61bb      	str	r3, [r7, #24]
 8004c58:	61fa      	str	r2, [r7, #28]
 8004c5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c62:	f7fb fd01 	bl	8000668 <__aeabi_uldivmod>
 8004c66:	4602      	mov	r2, r0
 8004c68:	460b      	mov	r3, r1
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c6e:	e053      	b.n	8004d18 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c70:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	099b      	lsrs	r3, r3, #6
 8004c76:	2200      	movs	r2, #0
 8004c78:	613b      	str	r3, [r7, #16]
 8004c7a:	617a      	str	r2, [r7, #20]
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c82:	f04f 0b00 	mov.w	fp, #0
 8004c86:	4652      	mov	r2, sl
 8004c88:	465b      	mov	r3, fp
 8004c8a:	f04f 0000 	mov.w	r0, #0
 8004c8e:	f04f 0100 	mov.w	r1, #0
 8004c92:	0159      	lsls	r1, r3, #5
 8004c94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c98:	0150      	lsls	r0, r2, #5
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	ebb2 080a 	subs.w	r8, r2, sl
 8004ca2:	eb63 090b 	sbc.w	r9, r3, fp
 8004ca6:	f04f 0200 	mov.w	r2, #0
 8004caa:	f04f 0300 	mov.w	r3, #0
 8004cae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cba:	ebb2 0408 	subs.w	r4, r2, r8
 8004cbe:	eb63 0509 	sbc.w	r5, r3, r9
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	00eb      	lsls	r3, r5, #3
 8004ccc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cd0:	00e2      	lsls	r2, r4, #3
 8004cd2:	4614      	mov	r4, r2
 8004cd4:	461d      	mov	r5, r3
 8004cd6:	eb14 030a 	adds.w	r3, r4, sl
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	eb45 030b 	adc.w	r3, r5, fp
 8004ce0:	607b      	str	r3, [r7, #4]
 8004ce2:	f04f 0200 	mov.w	r2, #0
 8004ce6:	f04f 0300 	mov.w	r3, #0
 8004cea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cee:	4629      	mov	r1, r5
 8004cf0:	028b      	lsls	r3, r1, #10
 8004cf2:	4621      	mov	r1, r4
 8004cf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	028a      	lsls	r2, r1, #10
 8004cfc:	4610      	mov	r0, r2
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d02:	2200      	movs	r2, #0
 8004d04:	60bb      	str	r3, [r7, #8]
 8004d06:	60fa      	str	r2, [r7, #12]
 8004d08:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d0c:	f7fb fcac 	bl	8000668 <__aeabi_uldivmod>
 8004d10:	4602      	mov	r2, r0
 8004d12:	460b      	mov	r3, r1
 8004d14:	4613      	mov	r3, r2
 8004d16:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004d18:	4b0b      	ldr	r3, [pc, #44]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	0c1b      	lsrs	r3, r3, #16
 8004d1e:	f003 0303 	and.w	r3, r3, #3
 8004d22:	3301      	adds	r3, #1
 8004d24:	005b      	lsls	r3, r3, #1
 8004d26:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004d28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d30:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x184>)
 8004d36:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3740      	adds	r7, #64	; 0x40
 8004d40:	46bd      	mov	sp, r7
 8004d42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d46:	bf00      	nop
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	00f42400 	.word	0x00f42400
 8004d50:	017d7840 	.word	0x017d7840

08004d54 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d58:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	200000a0 	.word	0x200000a0

08004d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d70:	f7ff fff0 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004d74:	4602      	mov	r2, r0
 8004d76:	4b05      	ldr	r3, [pc, #20]	; (8004d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	0a9b      	lsrs	r3, r3, #10
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	4903      	ldr	r1, [pc, #12]	; (8004d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d82:	5ccb      	ldrb	r3, [r1, r3]
 8004d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	0800e3d4 	.word	0x0800e3d4

08004d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d98:	f7ff ffdc 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0b5b      	lsrs	r3, r3, #13
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4903      	ldr	r1, [pc, #12]	; (8004db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004daa:	5ccb      	ldrb	r3, [r1, r3]
 8004dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40023800 	.word	0x40023800
 8004db8:	0800e3d4 	.word	0x0800e3d4

08004dbc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d012      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004de4:	4b69      	ldr	r3, [pc, #420]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a68      	ldr	r2, [pc, #416]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dea:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dee:	6093      	str	r3, [r2, #8]
 8004df0:	4b66      	ldr	r3, [pc, #408]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df2:	689a      	ldr	r2, [r3, #8]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	4964      	ldr	r1, [pc, #400]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004e06:	2301      	movs	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d017      	beq.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e16:	4b5d      	ldr	r3, [pc, #372]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e24:	4959      	ldr	r1, [pc, #356]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e34:	d101      	bne.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004e36:	2301      	movs	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004e42:	2301      	movs	r3, #1
 8004e44:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d017      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004e52:	4b4e      	ldr	r3, [pc, #312]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e60:	494a      	ldr	r1, [pc, #296]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e70:	d101      	bne.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004e72:	2301      	movs	r3, #1
 8004e74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d001      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	f000 808b 	beq.w	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ea0:	4b3a      	ldr	r3, [pc, #232]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	4a39      	ldr	r2, [pc, #228]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8004eac:	4b37      	ldr	r3, [pc, #220]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004eb8:	4b35      	ldr	r3, [pc, #212]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a34      	ldr	r2, [pc, #208]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ec2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec4:	f7fd fc60 	bl	8002788 <HAL_GetTick>
 8004ec8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004eca:	e008      	b.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ecc:	f7fd fc5c 	bl	8002788 <HAL_GetTick>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	2b64      	cmp	r3, #100	; 0x64
 8004ed8:	d901      	bls.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004eda:	2303      	movs	r3, #3
 8004edc:	e38f      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004ede:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0f0      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004eea:	4b28      	ldr	r3, [pc, #160]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ef2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d035      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f02:	693a      	ldr	r2, [r7, #16]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d02e      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f08:	4b20      	ldr	r3, [pc, #128]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f10:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f12:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	4a1d      	ldr	r2, [pc, #116]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f1e:	4b1b      	ldr	r3, [pc, #108]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a1a      	ldr	r2, [pc, #104]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004f2a:	4a18      	ldr	r2, [pc, #96]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f30:	4b16      	ldr	r3, [pc, #88]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d114      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fd fc24 	bl	8002788 <HAL_GetTick>
 8004f40:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f42:	e00a      	b.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f44:	f7fd fc20 	bl	8002788 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e351      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5e:	f003 0302 	and.w	r3, r3, #2
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d0ee      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f72:	d111      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004f74:	4b05      	ldr	r3, [pc, #20]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004f82:	400b      	ands	r3, r1
 8004f84:	4901      	ldr	r1, [pc, #4]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
 8004f8a:	e00b      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004f8c:	40023800 	.word	0x40023800
 8004f90:	40007000 	.word	0x40007000
 8004f94:	0ffffcff 	.word	0x0ffffcff
 8004f98:	4bac      	ldr	r3, [pc, #688]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9a:	689b      	ldr	r3, [r3, #8]
 8004f9c:	4aab      	ldr	r2, [pc, #684]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004f9e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004fa2:	6093      	str	r3, [r2, #8]
 8004fa4:	4ba9      	ldr	r3, [pc, #676]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fa6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb0:	49a6      	ldr	r1, [pc, #664]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0310 	and.w	r3, r3, #16
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fc2:	4ba2      	ldr	r3, [pc, #648]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fc8:	4aa0      	ldr	r2, [pc, #640]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fce:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004fd2:	4b9e      	ldr	r3, [pc, #632]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fd4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	499b      	ldr	r1, [pc, #620]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00a      	beq.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ff0:	4b96      	ldr	r3, [pc, #600]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ffe:	4993      	ldr	r1, [pc, #588]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005000:	4313      	orrs	r3, r2
 8005002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005012:	4b8e      	ldr	r3, [pc, #568]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005018:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005020:	498a      	ldr	r1, [pc, #552]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005022:	4313      	orrs	r3, r2
 8005024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00a      	beq.n	800504a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005034:	4b85      	ldr	r3, [pc, #532]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005042:	4982      	ldr	r1, [pc, #520]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005044:	4313      	orrs	r3, r2
 8005046:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d00a      	beq.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005056:	4b7d      	ldr	r3, [pc, #500]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005058:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800505c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005064:	4979      	ldr	r1, [pc, #484]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005066:	4313      	orrs	r3, r2
 8005068:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00a      	beq.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005078:	4b74      	ldr	r3, [pc, #464]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800507a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507e:	f023 0203 	bic.w	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005086:	4971      	ldr	r1, [pc, #452]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005088:	4313      	orrs	r3, r2
 800508a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800509a:	4b6c      	ldr	r3, [pc, #432]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800509c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a0:	f023 020c 	bic.w	r2, r3, #12
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80050a8:	4968      	ldr	r1, [pc, #416]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050aa:	4313      	orrs	r3, r2
 80050ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00a      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050bc:	4b63      	ldr	r3, [pc, #396]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80050ca:	4960      	ldr	r1, [pc, #384]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d00a      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050de:	4b5b      	ldr	r3, [pc, #364]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050ec:	4957      	ldr	r1, [pc, #348]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00a      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005100:	4b52      	ldr	r3, [pc, #328]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005106:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	494f      	ldr	r1, [pc, #316]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005110:	4313      	orrs	r3, r2
 8005112:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00a      	beq.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005122:	4b4a      	ldr	r3, [pc, #296]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005128:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005130:	4946      	ldr	r1, [pc, #280]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005132:	4313      	orrs	r3, r2
 8005134:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00a      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005144:	4b41      	ldr	r3, [pc, #260]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800514a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005152:	493e      	ldr	r1, [pc, #248]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005154:	4313      	orrs	r3, r2
 8005156:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00a      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005166:	4b39      	ldr	r3, [pc, #228]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005174:	4935      	ldr	r1, [pc, #212]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00a      	beq.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005188:	4b30      	ldr	r3, [pc, #192]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800518a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800518e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005196:	492d      	ldr	r1, [pc, #180]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005198:	4313      	orrs	r3, r2
 800519a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d011      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80051aa:	4b28      	ldr	r3, [pc, #160]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b8:	4924      	ldr	r1, [pc, #144]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051c8:	d101      	bne.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80051ca:	2301      	movs	r3, #1
 80051cc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0308 	and.w	r3, r3, #8
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80051da:	2301      	movs	r3, #1
 80051dc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00a      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ea:	4b18      	ldr	r3, [pc, #96]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f8:	4914      	ldr	r1, [pc, #80]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00b      	beq.n	8005224 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800521c:	490b      	ldr	r1, [pc, #44]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800521e:	4313      	orrs	r3, r2
 8005220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00f      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005230:	4b06      	ldr	r3, [pc, #24]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005236:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005240:	4902      	ldr	r1, [pc, #8]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005248:	e002      	b.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d00b      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800525c:	4b8a      	ldr	r3, [pc, #552]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800525e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005262:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526c:	4986      	ldr	r1, [pc, #536]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005280:	4b81      	ldr	r3, [pc, #516]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005286:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005290:	497d      	ldr	r1, [pc, #500]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005292:	4313      	orrs	r3, r2
 8005294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d006      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 80d6 	beq.w	8005458 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052ac:	4b76      	ldr	r3, [pc, #472]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a75      	ldr	r2, [pc, #468]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052b8:	f7fd fa66 	bl	8002788 <HAL_GetTick>
 80052bc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052c0:	f7fd fa62 	bl	8002788 <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e195      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052d2:	4b6d      	ldr	r3, [pc, #436]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d1f0      	bne.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d021      	beq.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d11d      	bne.n	800532e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052f2:	4b65      	ldr	r3, [pc, #404]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052f8:	0c1b      	lsrs	r3, r3, #16
 80052fa:	f003 0303 	and.w	r3, r3, #3
 80052fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005300:	4b61      	ldr	r3, [pc, #388]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005306:	0e1b      	lsrs	r3, r3, #24
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	019a      	lsls	r2, r3, #6
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	061b      	lsls	r3, r3, #24
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	071b      	lsls	r3, r3, #28
 8005326:	4958      	ldr	r1, [pc, #352]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d004      	beq.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800533e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800534c:	2b00      	cmp	r3, #0
 800534e:	d02e      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005354:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005358:	d129      	bne.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800535a:	4b4b      	ldr	r3, [pc, #300]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800535c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005360:	0c1b      	lsrs	r3, r3, #16
 8005362:	f003 0303 	and.w	r3, r3, #3
 8005366:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005368:	4b47      	ldr	r3, [pc, #284]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800536a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536e:	0f1b      	lsrs	r3, r3, #28
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	019a      	lsls	r2, r3, #6
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	431a      	orrs	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	061b      	lsls	r3, r3, #24
 8005388:	431a      	orrs	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	071b      	lsls	r3, r3, #28
 800538e:	493e      	ldr	r1, [pc, #248]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005390:	4313      	orrs	r3, r2
 8005392:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005396:	4b3c      	ldr	r3, [pc, #240]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800539c:	f023 021f 	bic.w	r2, r3, #31
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a4:	3b01      	subs	r3, #1
 80053a6:	4938      	ldr	r1, [pc, #224]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d01d      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80053ba:	4b33      	ldr	r3, [pc, #204]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053c8:	4b2f      	ldr	r3, [pc, #188]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ce:	0f1b      	lsrs	r3, r3, #28
 80053d0:	f003 0307 	and.w	r3, r3, #7
 80053d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	019a      	lsls	r2, r3, #6
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	431a      	orrs	r2, r3
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	061b      	lsls	r3, r3, #24
 80053e8:	431a      	orrs	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	071b      	lsls	r3, r3, #28
 80053ee:	4926      	ldr	r1, [pc, #152]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d011      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	019a      	lsls	r2, r3, #6
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	691b      	ldr	r3, [r3, #16]
 800540c:	041b      	lsls	r3, r3, #16
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	431a      	orrs	r2, r3
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	071b      	lsls	r3, r3, #28
 800541e:	491a      	ldr	r1, [pc, #104]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005426:	4b18      	ldr	r3, [pc, #96]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a17      	ldr	r2, [pc, #92]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800542c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005432:	f7fd f9a9 	bl	8002788 <HAL_GetTick>
 8005436:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800543a:	f7fd f9a5 	bl	8002788 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b64      	cmp	r3, #100	; 0x64
 8005446:	d901      	bls.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e0d8      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800544c:	4b0e      	ldr	r3, [pc, #56]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005458:	69bb      	ldr	r3, [r7, #24]
 800545a:	2b01      	cmp	r3, #1
 800545c:	f040 80ce 	bne.w	80055fc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005460:	4b09      	ldr	r3, [pc, #36]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005466:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800546a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800546c:	f7fd f98c 	bl	8002788 <HAL_GetTick>
 8005470:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005472:	e00b      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005474:	f7fd f988 	bl	8002788 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b64      	cmp	r3, #100	; 0x64
 8005480:	d904      	bls.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e0bb      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800548c:	4b5e      	ldr	r3, [pc, #376]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005498:	d0ec      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d02e      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d12a      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80054c2:	4b51      	ldr	r3, [pc, #324]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	f003 0303 	and.w	r3, r3, #3
 80054ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054d0:	4b4d      	ldr	r3, [pc, #308]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d6:	0f1b      	lsrs	r3, r3, #28
 80054d8:	f003 0307 	and.w	r3, r3, #7
 80054dc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	019a      	lsls	r2, r3, #6
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	041b      	lsls	r3, r3, #16
 80054e8:	431a      	orrs	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	061b      	lsls	r3, r3, #24
 80054f0:	431a      	orrs	r2, r3
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	071b      	lsls	r3, r3, #28
 80054f6:	4944      	ldr	r1, [pc, #272]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80054fe:	4b42      	ldr	r3, [pc, #264]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005504:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	3b01      	subs	r3, #1
 800550e:	021b      	lsls	r3, r3, #8
 8005510:	493d      	ldr	r1, [pc, #244]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005512:	4313      	orrs	r3, r2
 8005514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d022      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005528:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800552c:	d11d      	bne.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800552e:	4b36      	ldr	r3, [pc, #216]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005534:	0e1b      	lsrs	r3, r3, #24
 8005536:	f003 030f 	and.w	r3, r3, #15
 800553a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800553c:	4b32      	ldr	r3, [pc, #200]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800553e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005542:	0f1b      	lsrs	r3, r3, #28
 8005544:	f003 0307 	and.w	r3, r3, #7
 8005548:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	695b      	ldr	r3, [r3, #20]
 800554e:	019a      	lsls	r2, r3, #6
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6a1b      	ldr	r3, [r3, #32]
 8005554:	041b      	lsls	r3, r3, #16
 8005556:	431a      	orrs	r2, r3
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	061b      	lsls	r3, r3, #24
 800555c:	431a      	orrs	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	071b      	lsls	r3, r3, #28
 8005562:	4929      	ldr	r1, [pc, #164]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0308 	and.w	r3, r3, #8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d028      	beq.n	80055c8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005576:	4b24      	ldr	r3, [pc, #144]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800557c:	0e1b      	lsrs	r3, r3, #24
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005584:	4b20      	ldr	r3, [pc, #128]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800558a:	0c1b      	lsrs	r3, r3, #16
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	019a      	lsls	r2, r3, #6
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	041b      	lsls	r3, r3, #16
 800559c:	431a      	orrs	r2, r3
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	061b      	lsls	r3, r3, #24
 80055a2:	431a      	orrs	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	071b      	lsls	r3, r3, #28
 80055aa:	4917      	ldr	r1, [pc, #92]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055b2:	4b15      	ldr	r3, [pc, #84]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055c0:	4911      	ldr	r1, [pc, #68]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055c2:	4313      	orrs	r3, r2
 80055c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055c8:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a0e      	ldr	r2, [pc, #56]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d4:	f7fd f8d8 	bl	8002788 <HAL_GetTick>
 80055d8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055da:	e008      	b.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055dc:	f7fd f8d4 	bl	8002788 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	2b64      	cmp	r3, #100	; 0x64
 80055e8:	d901      	bls.n	80055ee <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e007      	b.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055ee:	4b06      	ldr	r3, [pc, #24]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055fa:	d1ef      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	40023800 	.word	0x40023800

0800560c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e049      	b.n	80056b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005624:	b2db      	uxtb	r3, r3
 8005626:	2b00      	cmp	r3, #0
 8005628:	d106      	bne.n	8005638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7fc fee8 	bl	8002408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2202      	movs	r2, #2
 800563c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	3304      	adds	r3, #4
 8005648:	4619      	mov	r1, r3
 800564a:	4610      	mov	r0, r2
 800564c:	f000 faca 	bl	8005be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056b0:	2300      	movs	r3, #0
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d001      	beq.n	80056d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e054      	b.n	800577e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68da      	ldr	r2, [r3, #12]
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f042 0201 	orr.w	r2, r2, #1
 80056ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a26      	ldr	r2, [pc, #152]	; (800578c <HAL_TIM_Base_Start_IT+0xd0>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d022      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fe:	d01d      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a22      	ldr	r2, [pc, #136]	; (8005790 <HAL_TIM_Base_Start_IT+0xd4>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d018      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a21      	ldr	r2, [pc, #132]	; (8005794 <HAL_TIM_Base_Start_IT+0xd8>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d013      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a1f      	ldr	r2, [pc, #124]	; (8005798 <HAL_TIM_Base_Start_IT+0xdc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d00e      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4a1e      	ldr	r2, [pc, #120]	; (800579c <HAL_TIM_Base_Start_IT+0xe0>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d009      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1c      	ldr	r2, [pc, #112]	; (80057a0 <HAL_TIM_Base_Start_IT+0xe4>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <HAL_TIM_Base_Start_IT+0x80>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a1b      	ldr	r2, [pc, #108]	; (80057a4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d115      	bne.n	8005768 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	4b19      	ldr	r3, [pc, #100]	; (80057a8 <HAL_TIM_Base_Start_IT+0xec>)
 8005744:	4013      	ands	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	2b06      	cmp	r3, #6
 800574c:	d015      	beq.n	800577a <HAL_TIM_Base_Start_IT+0xbe>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005754:	d011      	beq.n	800577a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f042 0201 	orr.w	r2, r2, #1
 8005764:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005766:	e008      	b.n	800577a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	e000      	b.n	800577c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800577a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	40010000 	.word	0x40010000
 8005790:	40000400 	.word	0x40000400
 8005794:	40000800 	.word	0x40000800
 8005798:	40000c00 	.word	0x40000c00
 800579c:	40010400 	.word	0x40010400
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40001800 	.word	0x40001800
 80057a8:	00010007 	.word	0x00010007

080057ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d122      	bne.n	8005808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d11b      	bne.n	8005808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0202 	mvn.w	r2, #2
 80057d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f9da 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f9cc 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 f9dd 	bl	8005bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d122      	bne.n	800585c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b04      	cmp	r3, #4
 8005822:	d11b      	bne.n	800585c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0204 	mvn.w	r2, #4
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f9b0 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f9a2 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 f9b3 	bl	8005bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b08      	cmp	r3, #8
 8005868:	d122      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d11b      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0208 	mvn.w	r2, #8
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2204      	movs	r2, #4
 8005886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f986 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f978 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f989 	bl	8005bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0210 	mvn.w	r2, #16
 80058d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2208      	movs	r2, #8
 80058da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f95c 	bl	8005ba8 <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 f94e 	bl	8005b94 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f95f 	bl	8005bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10e      	bne.n	8005930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d107      	bne.n	8005930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0201 	mvn.w	r2, #1
 8005928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f928 	bl	8005b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b80      	cmp	r3, #128	; 0x80
 800593c:	d10e      	bne.n	800595c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b80      	cmp	r3, #128	; 0x80
 800594a:	d107      	bne.n	800595c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 fb16 	bl	8005f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005966:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800596a:	d10e      	bne.n	800598a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005976:	2b80      	cmp	r3, #128	; 0x80
 8005978:	d107      	bne.n	800598a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 fb09 	bl	8005f9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	691b      	ldr	r3, [r3, #16]
 8005990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005994:	2b40      	cmp	r3, #64	; 0x40
 8005996:	d10e      	bne.n	80059b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d107      	bne.n	80059b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80059ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f90d 	bl	8005bd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f003 0320 	and.w	r3, r3, #32
 80059c0:	2b20      	cmp	r3, #32
 80059c2:	d10e      	bne.n	80059e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0320 	and.w	r3, r3, #32
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d107      	bne.n	80059e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f06f 0220 	mvn.w	r2, #32
 80059da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fac9 	bl	8005f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
	...

080059ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80059f6:	2300      	movs	r3, #0
 80059f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a00:	2b01      	cmp	r3, #1
 8005a02:	d101      	bne.n	8005a08 <HAL_TIM_ConfigClockSource+0x1c>
 8005a04:	2302      	movs	r3, #2
 8005a06:	e0b4      	b.n	8005b72 <HAL_TIM_ConfigClockSource+0x186>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	4b56      	ldr	r3, [pc, #344]	; (8005b7c <HAL_TIM_ConfigClockSource+0x190>)
 8005a24:	4013      	ands	r3, r2
 8005a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a40:	d03e      	beq.n	8005ac0 <HAL_TIM_ConfigClockSource+0xd4>
 8005a42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a46:	f200 8087 	bhi.w	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a4e:	f000 8086 	beq.w	8005b5e <HAL_TIM_ConfigClockSource+0x172>
 8005a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a56:	d87f      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a58:	2b70      	cmp	r3, #112	; 0x70
 8005a5a:	d01a      	beq.n	8005a92 <HAL_TIM_ConfigClockSource+0xa6>
 8005a5c:	2b70      	cmp	r3, #112	; 0x70
 8005a5e:	d87b      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a60:	2b60      	cmp	r3, #96	; 0x60
 8005a62:	d050      	beq.n	8005b06 <HAL_TIM_ConfigClockSource+0x11a>
 8005a64:	2b60      	cmp	r3, #96	; 0x60
 8005a66:	d877      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a68:	2b50      	cmp	r3, #80	; 0x50
 8005a6a:	d03c      	beq.n	8005ae6 <HAL_TIM_ConfigClockSource+0xfa>
 8005a6c:	2b50      	cmp	r3, #80	; 0x50
 8005a6e:	d873      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a70:	2b40      	cmp	r3, #64	; 0x40
 8005a72:	d058      	beq.n	8005b26 <HAL_TIM_ConfigClockSource+0x13a>
 8005a74:	2b40      	cmp	r3, #64	; 0x40
 8005a76:	d86f      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a78:	2b30      	cmp	r3, #48	; 0x30
 8005a7a:	d064      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x15a>
 8005a7c:	2b30      	cmp	r3, #48	; 0x30
 8005a7e:	d86b      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a80:	2b20      	cmp	r3, #32
 8005a82:	d060      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x15a>
 8005a84:	2b20      	cmp	r3, #32
 8005a86:	d867      	bhi.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d05c      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x15a>
 8005a8c:	2b10      	cmp	r3, #16
 8005a8e:	d05a      	beq.n	8005b46 <HAL_TIM_ConfigClockSource+0x15a>
 8005a90:	e062      	b.n	8005b58 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005aa2:	f000 f9b9 	bl	8005e18 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005ab4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	609a      	str	r2, [r3, #8]
      break;
 8005abe:	e04f      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ad0:	f000 f9a2 	bl	8005e18 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689a      	ldr	r2, [r3, #8]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005ae2:	609a      	str	r2, [r3, #8]
      break;
 8005ae4:	e03c      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005af2:	461a      	mov	r2, r3
 8005af4:	f000 f916 	bl	8005d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	2150      	movs	r1, #80	; 0x50
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f96f 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 8005b04:	e02c      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005b12:	461a      	mov	r2, r3
 8005b14:	f000 f935 	bl	8005d82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2160      	movs	r1, #96	; 0x60
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f000 f95f 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 8005b24:	e01c      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005b32:	461a      	mov	r2, r3
 8005b34:	f000 f8f6 	bl	8005d24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2140      	movs	r1, #64	; 0x40
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f000 f94f 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 8005b44:	e00c      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	4610      	mov	r0, r2
 8005b52:	f000 f946 	bl	8005de2 <TIM_ITRx_SetConfig>
      break;
 8005b56:	e003      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5c:	e000      	b.n	8005b60 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005b5e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3710      	adds	r7, #16
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	fffeff88 	.word	0xfffeff88

08005b80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bc4:	bf00      	nop
 8005bc6:	370c      	adds	r7, #12
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr

08005bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bd8:	bf00      	nop
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	4a40      	ldr	r2, [pc, #256]	; (8005cf8 <TIM_Base_SetConfig+0x114>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d013      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c02:	d00f      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a3d      	ldr	r2, [pc, #244]	; (8005cfc <TIM_Base_SetConfig+0x118>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d00b      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4a3c      	ldr	r2, [pc, #240]	; (8005d00 <TIM_Base_SetConfig+0x11c>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d007      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a3b      	ldr	r2, [pc, #236]	; (8005d04 <TIM_Base_SetConfig+0x120>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d003      	beq.n	8005c24 <TIM_Base_SetConfig+0x40>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a3a      	ldr	r2, [pc, #232]	; (8005d08 <TIM_Base_SetConfig+0x124>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d108      	bne.n	8005c36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a2f      	ldr	r2, [pc, #188]	; (8005cf8 <TIM_Base_SetConfig+0x114>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d02b      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c44:	d027      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	4a2c      	ldr	r2, [pc, #176]	; (8005cfc <TIM_Base_SetConfig+0x118>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d023      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a2b      	ldr	r2, [pc, #172]	; (8005d00 <TIM_Base_SetConfig+0x11c>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d01f      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a2a      	ldr	r2, [pc, #168]	; (8005d04 <TIM_Base_SetConfig+0x120>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d01b      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a29      	ldr	r2, [pc, #164]	; (8005d08 <TIM_Base_SetConfig+0x124>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d017      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	4a28      	ldr	r2, [pc, #160]	; (8005d0c <TIM_Base_SetConfig+0x128>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	4a27      	ldr	r2, [pc, #156]	; (8005d10 <TIM_Base_SetConfig+0x12c>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d00f      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	4a26      	ldr	r2, [pc, #152]	; (8005d14 <TIM_Base_SetConfig+0x130>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d00b      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4a25      	ldr	r2, [pc, #148]	; (8005d18 <TIM_Base_SetConfig+0x134>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d007      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a24      	ldr	r2, [pc, #144]	; (8005d1c <TIM_Base_SetConfig+0x138>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d003      	beq.n	8005c96 <TIM_Base_SetConfig+0xb2>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a23      	ldr	r2, [pc, #140]	; (8005d20 <TIM_Base_SetConfig+0x13c>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d108      	bne.n	8005ca8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	695b      	ldr	r3, [r3, #20]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a0a      	ldr	r2, [pc, #40]	; (8005cf8 <TIM_Base_SetConfig+0x114>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_Base_SetConfig+0xf8>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a0c      	ldr	r2, [pc, #48]	; (8005d08 <TIM_Base_SetConfig+0x124>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d103      	bne.n	8005ce4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	615a      	str	r2, [r3, #20]
}
 8005cea:	bf00      	nop
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40000400 	.word	0x40000400
 8005d00:	40000800 	.word	0x40000800
 8005d04:	40000c00 	.word	0x40000c00
 8005d08:	40010400 	.word	0x40010400
 8005d0c:	40014000 	.word	0x40014000
 8005d10:	40014400 	.word	0x40014400
 8005d14:	40014800 	.word	0x40014800
 8005d18:	40001800 	.word	0x40001800
 8005d1c:	40001c00 	.word	0x40001c00
 8005d20:	40002000 	.word	0x40002000

08005d24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b087      	sub	sp, #28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a1b      	ldr	r3, [r3, #32]
 8005d34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	f023 0201 	bic.w	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	693a      	ldr	r2, [r7, #16]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	f023 030a 	bic.w	r3, r3, #10
 8005d60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	693a      	ldr	r2, [r7, #16]
 8005d6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	621a      	str	r2, [r3, #32]
}
 8005d76:	bf00      	nop
 8005d78:	371c      	adds	r7, #28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr

08005d82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b087      	sub	sp, #28
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	60f8      	str	r0, [r7, #12]
 8005d8a:	60b9      	str	r1, [r7, #8]
 8005d8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	f023 0210 	bic.w	r2, r3, #16
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	031b      	lsls	r3, r3, #12
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	697a      	ldr	r2, [r7, #20]
 8005dce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005de2:	b480      	push	{r7}
 8005de4:	b085      	sub	sp, #20
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
 8005dea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	f043 0307 	orr.w	r3, r3, #7
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	68fa      	ldr	r2, [r7, #12]
 8005e0a:	609a      	str	r2, [r3, #8]
}
 8005e0c:	bf00      	nop
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e32:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	021a      	lsls	r2, r3, #8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	431a      	orrs	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	697a      	ldr	r2, [r7, #20]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	609a      	str	r2, [r3, #8]
}
 8005e4c:	bf00      	nop
 8005e4e:	371c      	adds	r7, #28
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d101      	bne.n	8005e70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	e06d      	b.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a30      	ldr	r2, [pc, #192]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a2f      	ldr	r2, [pc, #188]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d108      	bne.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005eaa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ebc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a20      	ldr	r2, [pc, #128]	; (8005f58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d022      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee2:	d01d      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a1c      	ldr	r2, [pc, #112]	; (8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1a      	ldr	r2, [pc, #104]	; (8005f68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a15      	ldr	r2, [pc, #84]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a16      	ldr	r2, [pc, #88]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d10c      	bne.n	8005f3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	68ba      	ldr	r2, [r7, #8]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68ba      	ldr	r2, [r7, #8]
 8005f38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	40010000 	.word	0x40010000
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40000400 	.word	0x40000400
 8005f64:	40000800 	.word	0x40000800
 8005f68:	40000c00 	.word	0x40000c00
 8005f6c:	40014000 	.word	0x40014000
 8005f70:	40001800 	.word	0x40001800

08005f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f90:	bf00      	nop
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b082      	sub	sp, #8
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d101      	bne.n	8005fc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e040      	b.n	8006044 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fc fa9c 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2224      	movs	r2, #36	; 0x24
 8005fdc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0201 	bic.w	r2, r2, #1
 8005fec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fb94 	bl	800671c <UART_SetConfig>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d101      	bne.n	8005ffe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ffa:	2301      	movs	r3, #1
 8005ffc:	e022      	b.n	8006044 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fdec 	bl	8006be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800601a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	689a      	ldr	r2, [r3, #8]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800602a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 fe73 	bl	8006d28 <UART_CheckIdleState>
 8006042:	4603      	mov	r3, r0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b082      	sub	sp, #8
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d101      	bne.n	800605e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e048      	b.n	80060f0 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006062:	2b00      	cmp	r3, #0
 8006064:	d106      	bne.n	8006074 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fc fa4e 	bl	8002510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2224      	movs	r2, #36	; 0x24
 8006078:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0201 	bic.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fb46 	bl	800671c <UART_SetConfig>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d101      	bne.n	800609a <HAL_HalfDuplex_Init+0x4e>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e02a      	b.n	80060f0 <HAL_HalfDuplex_Init+0xa4>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <HAL_HalfDuplex_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fd9e 	bl	8006be4 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689a      	ldr	r2, [r3, #8]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80060c6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f042 0201 	orr.w	r2, r2, #1
 80060e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fe1d 	bl	8006d28 <UART_CheckIdleState>
 80060ee:	4603      	mov	r3, r0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b0ba      	sub	sp, #232	; 0xe8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800611e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006122:	f640 030f 	movw	r3, #2063	; 0x80f
 8006126:	4013      	ands	r3, r2
 8006128:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800612c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006130:	2b00      	cmp	r3, #0
 8006132:	d115      	bne.n	8006160 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006134:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006138:	f003 0320 	and.w	r3, r3, #32
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00f      	beq.n	8006160 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006140:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d009      	beq.n	8006160 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006150:	2b00      	cmp	r3, #0
 8006152:	f000 82ac 	beq.w	80066ae <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	4798      	blx	r3
      }
      return;
 800615e:	e2a6      	b.n	80066ae <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006160:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8117 	beq.w	8006398 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800616a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800616e:	f003 0301 	and.w	r3, r3, #1
 8006172:	2b00      	cmp	r3, #0
 8006174:	d106      	bne.n	8006184 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006176:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800617a:	4b85      	ldr	r3, [pc, #532]	; (8006390 <HAL_UART_IRQHandler+0x298>)
 800617c:	4013      	ands	r3, r2
 800617e:	2b00      	cmp	r3, #0
 8006180:	f000 810a 	beq.w	8006398 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006188:	f003 0301 	and.w	r3, r3, #1
 800618c:	2b00      	cmp	r3, #0
 800618e:	d011      	beq.n	80061b4 <HAL_UART_IRQHandler+0xbc>
 8006190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006198:	2b00      	cmp	r3, #0
 800619a:	d00b      	beq.n	80061b4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2201      	movs	r2, #1
 80061a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061aa:	f043 0201 	orr.w	r2, r3, #1
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061b8:	f003 0302 	and.w	r3, r3, #2
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d011      	beq.n	80061e4 <HAL_UART_IRQHandler+0xec>
 80061c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2202      	movs	r2, #2
 80061d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061da:	f043 0204 	orr.w	r2, r3, #4
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061e8:	f003 0304 	and.w	r3, r3, #4
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d011      	beq.n	8006214 <HAL_UART_IRQHandler+0x11c>
 80061f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00b      	beq.n	8006214 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2204      	movs	r2, #4
 8006202:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620a:	f043 0202 	orr.w	r2, r3, #2
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006214:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006218:	f003 0308 	and.w	r3, r3, #8
 800621c:	2b00      	cmp	r3, #0
 800621e:	d017      	beq.n	8006250 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b00      	cmp	r3, #0
 800622a:	d105      	bne.n	8006238 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800622c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006230:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00b      	beq.n	8006250 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2208      	movs	r2, #8
 800623e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006246:	f043 0208 	orr.w	r2, r3, #8
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006258:	2b00      	cmp	r3, #0
 800625a:	d012      	beq.n	8006282 <HAL_UART_IRQHandler+0x18a>
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006260:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d00c      	beq.n	8006282 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006270:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006278:	f043 0220 	orr.w	r2, r3, #32
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006288:	2b00      	cmp	r3, #0
 800628a:	f000 8212 	beq.w	80066b2 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800628e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800629a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800629e:	f003 0320 	and.w	r3, r3, #32
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d007      	beq.n	80062b6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d005      	beq.n	80062da <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062d2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d04f      	beq.n	800637a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fe37 	bl	8006f4e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b40      	cmp	r3, #64	; 0x40
 80062ec:	d141      	bne.n	8006372 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80062fc:	e853 3f00 	ldrex	r3, [r3]
 8006300:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006304:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800630c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3308      	adds	r3, #8
 8006316:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800631a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800631e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006326:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006332:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1d9      	bne.n	80062ee <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800633e:	2b00      	cmp	r3, #0
 8006340:	d013      	beq.n	800636a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <HAL_UART_IRQHandler+0x29c>)
 8006348:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800634e:	4618      	mov	r0, r3
 8006350:	f7fd f8ad 	bl	80034ae <HAL_DMA_Abort_IT>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d017      	beq.n	800638a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800635e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006364:	4610      	mov	r0, r2
 8006366:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006368:	e00f      	b.n	800638a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f9b6 	bl	80066dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006370:	e00b      	b.n	800638a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f9b2 	bl	80066dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006378:	e007      	b.n	800638a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f9ae 	bl	80066dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006388:	e193      	b.n	80066b2 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638a:	bf00      	nop
    return;
 800638c:	e191      	b.n	80066b2 <HAL_UART_IRQHandler+0x5ba>
 800638e:	bf00      	nop
 8006390:	04000120 	.word	0x04000120
 8006394:	08007017 	.word	0x08007017

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639c:	2b01      	cmp	r3, #1
 800639e:	f040 814c 	bne.w	800663a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a6:	f003 0310 	and.w	r3, r3, #16
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 8145 	beq.w	800663a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b4:	f003 0310 	and.w	r3, r3, #16
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 813e 	beq.w	800663a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2210      	movs	r2, #16
 80063c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b40      	cmp	r3, #64	; 0x40
 80063d2:	f040 80b6 	bne.w	8006542 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8165 	beq.w	80066b6 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80063f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80063f6:	429a      	cmp	r2, r3
 80063f8:	f080 815d 	bcs.w	80066b6 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006402:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800640a:	69db      	ldr	r3, [r3, #28]
 800640c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006410:	f000 8086 	beq.w	8006520 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006428:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800642c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006430:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800643e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006442:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006446:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800644a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800645a:	2b00      	cmp	r3, #0
 800645c:	d1da      	bne.n	8006414 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	3308      	adds	r3, #8
 8006464:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006466:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006468:	e853 3f00 	ldrex	r3, [r3]
 800646c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800646e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006470:	f023 0301 	bic.w	r3, r3, #1
 8006474:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	3308      	adds	r3, #8
 800647e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006482:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006486:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800648a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800648e:	e841 2300 	strex	r3, r2, [r1]
 8006492:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006494:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006496:	2b00      	cmp	r3, #0
 8006498:	d1e1      	bne.n	800645e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3308      	adds	r3, #8
 80064a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064a4:	e853 3f00 	ldrex	r3, [r3]
 80064a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3308      	adds	r3, #8
 80064ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e3      	bne.n	800649a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2220      	movs	r2, #32
 80064d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064e8:	e853 3f00 	ldrex	r3, [r3]
 80064ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80064ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064f0:	f023 0310 	bic.w	r3, r3, #16
 80064f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	461a      	mov	r2, r3
 80064fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006502:	65bb      	str	r3, [r7, #88]	; 0x58
 8006504:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006506:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006508:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800650a:	e841 2300 	strex	r3, r2, [r1]
 800650e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006510:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1e4      	bne.n	80064e0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800651a:	4618      	mov	r0, r3
 800651c:	f7fc ff57 	bl	80033ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006532:	b29b      	uxth	r3, r3
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	b29b      	uxth	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8d8 	bl	80066f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006540:	e0b9      	b.n	80066b6 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800654e:	b29b      	uxth	r3, r3
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800655c:	b29b      	uxth	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	f000 80ab 	beq.w	80066ba <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8006564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80a6 	beq.w	80066ba <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006576:	e853 3f00 	ldrex	r3, [r3]
 800657a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006582:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	461a      	mov	r2, r3
 800658c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006590:	647b      	str	r3, [r7, #68]	; 0x44
 8006592:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006596:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006598:	e841 2300 	strex	r3, r2, [r1]
 800659c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800659e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e4      	bne.n	800656e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	3308      	adds	r3, #8
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	e853 3f00 	ldrex	r3, [r3]
 80065b2:	623b      	str	r3, [r7, #32]
   return(result);
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	f023 0301 	bic.w	r3, r3, #1
 80065ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3308      	adds	r3, #8
 80065c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065c8:	633a      	str	r2, [r7, #48]	; 0x30
 80065ca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065d0:	e841 2300 	strex	r3, r2, [r1]
 80065d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e3      	bne.n	80065a4 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2220      	movs	r2, #32
 80065e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2200      	movs	r2, #0
 80065e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f023 0310 	bic.w	r3, r3, #16
 8006604:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	461a      	mov	r2, r3
 800660e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006612:	61fb      	str	r3, [r7, #28]
 8006614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	69b9      	ldr	r1, [r7, #24]
 8006618:	69fa      	ldr	r2, [r7, #28]
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	617b      	str	r3, [r7, #20]
   return(result);
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e4      	bne.n	80065f0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2202      	movs	r2, #2
 800662a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800662c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 f85c 	bl	80066f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006638:	e03f      	b.n	80066ba <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800663a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00e      	beq.n	8006664 <HAL_UART_IRQHandler+0x56c>
 8006646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d008      	beq.n	8006664 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800665a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f853 	bl	8006708 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006662:	e02d      	b.n	80066c0 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800666c:	2b00      	cmp	r3, #0
 800666e:	d00e      	beq.n	800668e <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006678:	2b00      	cmp	r3, #0
 800667a:	d008      	beq.n	800668e <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01c      	beq.n	80066be <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	4798      	blx	r3
    }
    return;
 800668c:	e017      	b.n	80066be <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800668e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006696:	2b00      	cmp	r3, #0
 8006698:	d012      	beq.n	80066c0 <HAL_UART_IRQHandler+0x5c8>
 800669a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800669e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d00c      	beq.n	80066c0 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fccb 	bl	8007042 <UART_EndTransmit_IT>
    return;
 80066ac:	e008      	b.n	80066c0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80066ae:	bf00      	nop
 80066b0:	e006      	b.n	80066c0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80066b2:	bf00      	nop
 80066b4:	e004      	b.n	80066c0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80066b6:	bf00      	nop
 80066b8:	e002      	b.n	80066c0 <HAL_UART_IRQHandler+0x5c8>
      return;
 80066ba:	bf00      	nop
 80066bc:	e000      	b.n	80066c0 <HAL_UART_IRQHandler+0x5c8>
    return;
 80066be:	bf00      	nop
  }

}
 80066c0:	37e8      	adds	r7, #232	; 0xe8
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop

080066c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr

080066dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066dc:	b480      	push	{r7}
 80066de:	b083      	sub	sp, #12
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	431a      	orrs	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	431a      	orrs	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	69db      	ldr	r3, [r3, #28]
 800673c:	4313      	orrs	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	681a      	ldr	r2, [r3, #0]
 8006746:	4ba6      	ldr	r3, [pc, #664]	; (80069e0 <UART_SetConfig+0x2c4>)
 8006748:	4013      	ands	r3, r2
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	6979      	ldr	r1, [r7, #20]
 8006750:	430b      	orrs	r3, r1
 8006752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68da      	ldr	r2, [r3, #12]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	430a      	orrs	r2, r1
 8006768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6a1b      	ldr	r3, [r3, #32]
 8006774:	697a      	ldr	r2, [r7, #20]
 8006776:	4313      	orrs	r3, r2
 8006778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	430a      	orrs	r2, r1
 800678c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a94      	ldr	r2, [pc, #592]	; (80069e4 <UART_SetConfig+0x2c8>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d120      	bne.n	80067da <UART_SetConfig+0xbe>
 8006798:	4b93      	ldr	r3, [pc, #588]	; (80069e8 <UART_SetConfig+0x2cc>)
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	f003 0303 	and.w	r3, r3, #3
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d816      	bhi.n	80067d4 <UART_SetConfig+0xb8>
 80067a6:	a201      	add	r2, pc, #4	; (adr r2, 80067ac <UART_SetConfig+0x90>)
 80067a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ac:	080067bd 	.word	0x080067bd
 80067b0:	080067c9 	.word	0x080067c9
 80067b4:	080067c3 	.word	0x080067c3
 80067b8:	080067cf 	.word	0x080067cf
 80067bc:	2301      	movs	r3, #1
 80067be:	77fb      	strb	r3, [r7, #31]
 80067c0:	e150      	b.n	8006a64 <UART_SetConfig+0x348>
 80067c2:	2302      	movs	r3, #2
 80067c4:	77fb      	strb	r3, [r7, #31]
 80067c6:	e14d      	b.n	8006a64 <UART_SetConfig+0x348>
 80067c8:	2304      	movs	r3, #4
 80067ca:	77fb      	strb	r3, [r7, #31]
 80067cc:	e14a      	b.n	8006a64 <UART_SetConfig+0x348>
 80067ce:	2308      	movs	r3, #8
 80067d0:	77fb      	strb	r3, [r7, #31]
 80067d2:	e147      	b.n	8006a64 <UART_SetConfig+0x348>
 80067d4:	2310      	movs	r3, #16
 80067d6:	77fb      	strb	r3, [r7, #31]
 80067d8:	e144      	b.n	8006a64 <UART_SetConfig+0x348>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a83      	ldr	r2, [pc, #524]	; (80069ec <UART_SetConfig+0x2d0>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d132      	bne.n	800684a <UART_SetConfig+0x12e>
 80067e4:	4b80      	ldr	r3, [pc, #512]	; (80069e8 <UART_SetConfig+0x2cc>)
 80067e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ea:	f003 030c 	and.w	r3, r3, #12
 80067ee:	2b0c      	cmp	r3, #12
 80067f0:	d828      	bhi.n	8006844 <UART_SetConfig+0x128>
 80067f2:	a201      	add	r2, pc, #4	; (adr r2, 80067f8 <UART_SetConfig+0xdc>)
 80067f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f8:	0800682d 	.word	0x0800682d
 80067fc:	08006845 	.word	0x08006845
 8006800:	08006845 	.word	0x08006845
 8006804:	08006845 	.word	0x08006845
 8006808:	08006839 	.word	0x08006839
 800680c:	08006845 	.word	0x08006845
 8006810:	08006845 	.word	0x08006845
 8006814:	08006845 	.word	0x08006845
 8006818:	08006833 	.word	0x08006833
 800681c:	08006845 	.word	0x08006845
 8006820:	08006845 	.word	0x08006845
 8006824:	08006845 	.word	0x08006845
 8006828:	0800683f 	.word	0x0800683f
 800682c:	2300      	movs	r3, #0
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e118      	b.n	8006a64 <UART_SetConfig+0x348>
 8006832:	2302      	movs	r3, #2
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e115      	b.n	8006a64 <UART_SetConfig+0x348>
 8006838:	2304      	movs	r3, #4
 800683a:	77fb      	strb	r3, [r7, #31]
 800683c:	e112      	b.n	8006a64 <UART_SetConfig+0x348>
 800683e:	2308      	movs	r3, #8
 8006840:	77fb      	strb	r3, [r7, #31]
 8006842:	e10f      	b.n	8006a64 <UART_SetConfig+0x348>
 8006844:	2310      	movs	r3, #16
 8006846:	77fb      	strb	r3, [r7, #31]
 8006848:	e10c      	b.n	8006a64 <UART_SetConfig+0x348>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a68      	ldr	r2, [pc, #416]	; (80069f0 <UART_SetConfig+0x2d4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d120      	bne.n	8006896 <UART_SetConfig+0x17a>
 8006854:	4b64      	ldr	r3, [pc, #400]	; (80069e8 <UART_SetConfig+0x2cc>)
 8006856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800685e:	2b30      	cmp	r3, #48	; 0x30
 8006860:	d013      	beq.n	800688a <UART_SetConfig+0x16e>
 8006862:	2b30      	cmp	r3, #48	; 0x30
 8006864:	d814      	bhi.n	8006890 <UART_SetConfig+0x174>
 8006866:	2b20      	cmp	r3, #32
 8006868:	d009      	beq.n	800687e <UART_SetConfig+0x162>
 800686a:	2b20      	cmp	r3, #32
 800686c:	d810      	bhi.n	8006890 <UART_SetConfig+0x174>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <UART_SetConfig+0x15c>
 8006872:	2b10      	cmp	r3, #16
 8006874:	d006      	beq.n	8006884 <UART_SetConfig+0x168>
 8006876:	e00b      	b.n	8006890 <UART_SetConfig+0x174>
 8006878:	2300      	movs	r3, #0
 800687a:	77fb      	strb	r3, [r7, #31]
 800687c:	e0f2      	b.n	8006a64 <UART_SetConfig+0x348>
 800687e:	2302      	movs	r3, #2
 8006880:	77fb      	strb	r3, [r7, #31]
 8006882:	e0ef      	b.n	8006a64 <UART_SetConfig+0x348>
 8006884:	2304      	movs	r3, #4
 8006886:	77fb      	strb	r3, [r7, #31]
 8006888:	e0ec      	b.n	8006a64 <UART_SetConfig+0x348>
 800688a:	2308      	movs	r3, #8
 800688c:	77fb      	strb	r3, [r7, #31]
 800688e:	e0e9      	b.n	8006a64 <UART_SetConfig+0x348>
 8006890:	2310      	movs	r3, #16
 8006892:	77fb      	strb	r3, [r7, #31]
 8006894:	e0e6      	b.n	8006a64 <UART_SetConfig+0x348>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a56      	ldr	r2, [pc, #344]	; (80069f4 <UART_SetConfig+0x2d8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d120      	bne.n	80068e2 <UART_SetConfig+0x1c6>
 80068a0:	4b51      	ldr	r3, [pc, #324]	; (80069e8 <UART_SetConfig+0x2cc>)
 80068a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068aa:	2bc0      	cmp	r3, #192	; 0xc0
 80068ac:	d013      	beq.n	80068d6 <UART_SetConfig+0x1ba>
 80068ae:	2bc0      	cmp	r3, #192	; 0xc0
 80068b0:	d814      	bhi.n	80068dc <UART_SetConfig+0x1c0>
 80068b2:	2b80      	cmp	r3, #128	; 0x80
 80068b4:	d009      	beq.n	80068ca <UART_SetConfig+0x1ae>
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d810      	bhi.n	80068dc <UART_SetConfig+0x1c0>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d002      	beq.n	80068c4 <UART_SetConfig+0x1a8>
 80068be:	2b40      	cmp	r3, #64	; 0x40
 80068c0:	d006      	beq.n	80068d0 <UART_SetConfig+0x1b4>
 80068c2:	e00b      	b.n	80068dc <UART_SetConfig+0x1c0>
 80068c4:	2300      	movs	r3, #0
 80068c6:	77fb      	strb	r3, [r7, #31]
 80068c8:	e0cc      	b.n	8006a64 <UART_SetConfig+0x348>
 80068ca:	2302      	movs	r3, #2
 80068cc:	77fb      	strb	r3, [r7, #31]
 80068ce:	e0c9      	b.n	8006a64 <UART_SetConfig+0x348>
 80068d0:	2304      	movs	r3, #4
 80068d2:	77fb      	strb	r3, [r7, #31]
 80068d4:	e0c6      	b.n	8006a64 <UART_SetConfig+0x348>
 80068d6:	2308      	movs	r3, #8
 80068d8:	77fb      	strb	r3, [r7, #31]
 80068da:	e0c3      	b.n	8006a64 <UART_SetConfig+0x348>
 80068dc:	2310      	movs	r3, #16
 80068de:	77fb      	strb	r3, [r7, #31]
 80068e0:	e0c0      	b.n	8006a64 <UART_SetConfig+0x348>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a44      	ldr	r2, [pc, #272]	; (80069f8 <UART_SetConfig+0x2dc>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d125      	bne.n	8006938 <UART_SetConfig+0x21c>
 80068ec:	4b3e      	ldr	r3, [pc, #248]	; (80069e8 <UART_SetConfig+0x2cc>)
 80068ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068fa:	d017      	beq.n	800692c <UART_SetConfig+0x210>
 80068fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006900:	d817      	bhi.n	8006932 <UART_SetConfig+0x216>
 8006902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006906:	d00b      	beq.n	8006920 <UART_SetConfig+0x204>
 8006908:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800690c:	d811      	bhi.n	8006932 <UART_SetConfig+0x216>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d003      	beq.n	800691a <UART_SetConfig+0x1fe>
 8006912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006916:	d006      	beq.n	8006926 <UART_SetConfig+0x20a>
 8006918:	e00b      	b.n	8006932 <UART_SetConfig+0x216>
 800691a:	2300      	movs	r3, #0
 800691c:	77fb      	strb	r3, [r7, #31]
 800691e:	e0a1      	b.n	8006a64 <UART_SetConfig+0x348>
 8006920:	2302      	movs	r3, #2
 8006922:	77fb      	strb	r3, [r7, #31]
 8006924:	e09e      	b.n	8006a64 <UART_SetConfig+0x348>
 8006926:	2304      	movs	r3, #4
 8006928:	77fb      	strb	r3, [r7, #31]
 800692a:	e09b      	b.n	8006a64 <UART_SetConfig+0x348>
 800692c:	2308      	movs	r3, #8
 800692e:	77fb      	strb	r3, [r7, #31]
 8006930:	e098      	b.n	8006a64 <UART_SetConfig+0x348>
 8006932:	2310      	movs	r3, #16
 8006934:	77fb      	strb	r3, [r7, #31]
 8006936:	e095      	b.n	8006a64 <UART_SetConfig+0x348>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4a2f      	ldr	r2, [pc, #188]	; (80069fc <UART_SetConfig+0x2e0>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d125      	bne.n	800698e <UART_SetConfig+0x272>
 8006942:	4b29      	ldr	r3, [pc, #164]	; (80069e8 <UART_SetConfig+0x2cc>)
 8006944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006948:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800694c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006950:	d017      	beq.n	8006982 <UART_SetConfig+0x266>
 8006952:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006956:	d817      	bhi.n	8006988 <UART_SetConfig+0x26c>
 8006958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800695c:	d00b      	beq.n	8006976 <UART_SetConfig+0x25a>
 800695e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006962:	d811      	bhi.n	8006988 <UART_SetConfig+0x26c>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <UART_SetConfig+0x254>
 8006968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800696c:	d006      	beq.n	800697c <UART_SetConfig+0x260>
 800696e:	e00b      	b.n	8006988 <UART_SetConfig+0x26c>
 8006970:	2301      	movs	r3, #1
 8006972:	77fb      	strb	r3, [r7, #31]
 8006974:	e076      	b.n	8006a64 <UART_SetConfig+0x348>
 8006976:	2302      	movs	r3, #2
 8006978:	77fb      	strb	r3, [r7, #31]
 800697a:	e073      	b.n	8006a64 <UART_SetConfig+0x348>
 800697c:	2304      	movs	r3, #4
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e070      	b.n	8006a64 <UART_SetConfig+0x348>
 8006982:	2308      	movs	r3, #8
 8006984:	77fb      	strb	r3, [r7, #31]
 8006986:	e06d      	b.n	8006a64 <UART_SetConfig+0x348>
 8006988:	2310      	movs	r3, #16
 800698a:	77fb      	strb	r3, [r7, #31]
 800698c:	e06a      	b.n	8006a64 <UART_SetConfig+0x348>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a1b      	ldr	r2, [pc, #108]	; (8006a00 <UART_SetConfig+0x2e4>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d138      	bne.n	8006a0a <UART_SetConfig+0x2ee>
 8006998:	4b13      	ldr	r3, [pc, #76]	; (80069e8 <UART_SetConfig+0x2cc>)
 800699a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800699e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069a2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069a6:	d017      	beq.n	80069d8 <UART_SetConfig+0x2bc>
 80069a8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069ac:	d82a      	bhi.n	8006a04 <UART_SetConfig+0x2e8>
 80069ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b2:	d00b      	beq.n	80069cc <UART_SetConfig+0x2b0>
 80069b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b8:	d824      	bhi.n	8006a04 <UART_SetConfig+0x2e8>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d003      	beq.n	80069c6 <UART_SetConfig+0x2aa>
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c2:	d006      	beq.n	80069d2 <UART_SetConfig+0x2b6>
 80069c4:	e01e      	b.n	8006a04 <UART_SetConfig+0x2e8>
 80069c6:	2300      	movs	r3, #0
 80069c8:	77fb      	strb	r3, [r7, #31]
 80069ca:	e04b      	b.n	8006a64 <UART_SetConfig+0x348>
 80069cc:	2302      	movs	r3, #2
 80069ce:	77fb      	strb	r3, [r7, #31]
 80069d0:	e048      	b.n	8006a64 <UART_SetConfig+0x348>
 80069d2:	2304      	movs	r3, #4
 80069d4:	77fb      	strb	r3, [r7, #31]
 80069d6:	e045      	b.n	8006a64 <UART_SetConfig+0x348>
 80069d8:	2308      	movs	r3, #8
 80069da:	77fb      	strb	r3, [r7, #31]
 80069dc:	e042      	b.n	8006a64 <UART_SetConfig+0x348>
 80069de:	bf00      	nop
 80069e0:	efff69f3 	.word	0xefff69f3
 80069e4:	40011000 	.word	0x40011000
 80069e8:	40023800 	.word	0x40023800
 80069ec:	40004400 	.word	0x40004400
 80069f0:	40004800 	.word	0x40004800
 80069f4:	40004c00 	.word	0x40004c00
 80069f8:	40005000 	.word	0x40005000
 80069fc:	40011400 	.word	0x40011400
 8006a00:	40007800 	.word	0x40007800
 8006a04:	2310      	movs	r3, #16
 8006a06:	77fb      	strb	r3, [r7, #31]
 8006a08:	e02c      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a72      	ldr	r2, [pc, #456]	; (8006bd8 <UART_SetConfig+0x4bc>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d125      	bne.n	8006a60 <UART_SetConfig+0x344>
 8006a14:	4b71      	ldr	r3, [pc, #452]	; (8006bdc <UART_SetConfig+0x4c0>)
 8006a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a1e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a22:	d017      	beq.n	8006a54 <UART_SetConfig+0x338>
 8006a24:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a28:	d817      	bhi.n	8006a5a <UART_SetConfig+0x33e>
 8006a2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a2e:	d00b      	beq.n	8006a48 <UART_SetConfig+0x32c>
 8006a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a34:	d811      	bhi.n	8006a5a <UART_SetConfig+0x33e>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <UART_SetConfig+0x326>
 8006a3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a3e:	d006      	beq.n	8006a4e <UART_SetConfig+0x332>
 8006a40:	e00b      	b.n	8006a5a <UART_SetConfig+0x33e>
 8006a42:	2300      	movs	r3, #0
 8006a44:	77fb      	strb	r3, [r7, #31]
 8006a46:	e00d      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	77fb      	strb	r3, [r7, #31]
 8006a4c:	e00a      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a4e:	2304      	movs	r3, #4
 8006a50:	77fb      	strb	r3, [r7, #31]
 8006a52:	e007      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a54:	2308      	movs	r3, #8
 8006a56:	77fb      	strb	r3, [r7, #31]
 8006a58:	e004      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a5a:	2310      	movs	r3, #16
 8006a5c:	77fb      	strb	r3, [r7, #31]
 8006a5e:	e001      	b.n	8006a64 <UART_SetConfig+0x348>
 8006a60:	2310      	movs	r3, #16
 8006a62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6c:	d15b      	bne.n	8006b26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006a6e:	7ffb      	ldrb	r3, [r7, #31]
 8006a70:	2b08      	cmp	r3, #8
 8006a72:	d828      	bhi.n	8006ac6 <UART_SetConfig+0x3aa>
 8006a74:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <UART_SetConfig+0x360>)
 8006a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7a:	bf00      	nop
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006ab7 	.word	0x08006ab7
 8006a90:	08006ac7 	.word	0x08006ac7
 8006a94:	08006ac7 	.word	0x08006ac7
 8006a98:	08006ac7 	.word	0x08006ac7
 8006a9c:	08006abf 	.word	0x08006abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fe f964 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8006aa4:	61b8      	str	r0, [r7, #24]
        break;
 8006aa6:	e013      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa8:	f7fe f974 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8006aac:	61b8      	str	r0, [r7, #24]
        break;
 8006aae:	e00f      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab0:	4b4b      	ldr	r3, [pc, #300]	; (8006be0 <UART_SetConfig+0x4c4>)
 8006ab2:	61bb      	str	r3, [r7, #24]
        break;
 8006ab4:	e00c      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ab6:	f7fe f887 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8006aba:	61b8      	str	r0, [r7, #24]
        break;
 8006abc:	e008      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	61bb      	str	r3, [r7, #24]
        break;
 8006ac4:	e004      	b.n	8006ad0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	77bb      	strb	r3, [r7, #30]
        break;
 8006ace:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d074      	beq.n	8006bc0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	005a      	lsls	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	441a      	add	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d916      	bls.n	8006b20 <UART_SetConfig+0x404>
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af8:	d212      	bcs.n	8006b20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f023 030f 	bic.w	r3, r3, #15
 8006b02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	89fb      	ldrh	r3, [r7, #14]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	89fa      	ldrh	r2, [r7, #14]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	e04f      	b.n	8006bc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	77bb      	strb	r3, [r7, #30]
 8006b24:	e04c      	b.n	8006bc0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b26:	7ffb      	ldrb	r3, [r7, #31]
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d828      	bhi.n	8006b7e <UART_SetConfig+0x462>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0x418>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b61 	.word	0x08006b61
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	08006b7f 	.word	0x08006b7f
 8006b44:	08006b6f 	.word	0x08006b6f
 8006b48:	08006b7f 	.word	0x08006b7f
 8006b4c:	08006b7f 	.word	0x08006b7f
 8006b50:	08006b7f 	.word	0x08006b7f
 8006b54:	08006b77 	.word	0x08006b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7fe f908 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8006b5c:	61b8      	str	r0, [r7, #24]
        break;
 8006b5e:	e013      	b.n	8006b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b60:	f7fe f918 	bl	8004d94 <HAL_RCC_GetPCLK2Freq>
 8006b64:	61b8      	str	r0, [r7, #24]
        break;
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <UART_SetConfig+0x4c4>)
 8006b6a:	61bb      	str	r3, [r7, #24]
        break;
 8006b6c:	e00c      	b.n	8006b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6e:	f7fe f82b 	bl	8004bc8 <HAL_RCC_GetSysClockFreq>
 8006b72:	61b8      	str	r0, [r7, #24]
        break;
 8006b74:	e008      	b.n	8006b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7a:	61bb      	str	r3, [r7, #24]
        break;
 8006b7c:	e004      	b.n	8006b88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	77bb      	strb	r3, [r7, #30]
        break;
 8006b86:	bf00      	nop
    }

    if (pclk != 0U)
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d018      	beq.n	8006bc0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	085a      	lsrs	r2, r3, #1
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	441a      	add	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b0f      	cmp	r3, #15
 8006ba6:	d909      	bls.n	8006bbc <UART_SetConfig+0x4a0>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bae:	d205      	bcs.n	8006bbc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e001      	b.n	8006bc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006bcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40007c00 	.word	0x40007c00
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	00f42400 	.word	0x00f42400

08006be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01a      	beq.n	8006cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce2:	d10a      	bne.n	8006cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d38:	f7fb fd26 	bl	8002788 <HAL_GetTick>
 8006d3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d10e      	bne.n	8006d6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f831 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e027      	b.n	8006dba <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d10e      	bne.n	8006d96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f81b 	bl	8006dc2 <UART_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e011      	b.n	8006dba <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006db8:	2300      	movs	r3, #0
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dc2:	b580      	push	{r7, lr}
 8006dc4:	b09c      	sub	sp, #112	; 0x70
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	60f8      	str	r0, [r7, #12]
 8006dca:	60b9      	str	r1, [r7, #8]
 8006dcc:	603b      	str	r3, [r7, #0]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd2:	e0a7      	b.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	f000 80a3 	beq.w	8006f24 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dde:	f7fb fcd3 	bl	8002788 <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d302      	bcc.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006dee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d13f      	bne.n	8006e74 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dfc:	e853 3f00 	ldrex	r3, [r3]
 8006e00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e08:	667b      	str	r3, [r7, #100]	; 0x64
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e1a:	e841 2300 	strex	r3, r2, [r1]
 8006e1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d1e6      	bne.n	8006df4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	3308      	adds	r3, #8
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e30:	e853 3f00 	ldrex	r3, [r3]
 8006e34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e46:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e4e:	e841 2300 	strex	r3, r2, [r1]
 8006e52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1e5      	bne.n	8006e26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2220      	movs	r2, #32
 8006e5e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2220      	movs	r2, #32
 8006e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006e70:	2303      	movs	r3, #3
 8006e72:	e068      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f003 0304 	and.w	r3, r3, #4
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d050      	beq.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	69db      	ldr	r3, [r3, #28]
 8006e88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e90:	d148      	bne.n	8006f24 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e9a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea4:	e853 3f00 	ldrex	r3, [r3]
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eba:	637b      	str	r3, [r7, #52]	; 0x34
 8006ebc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ebe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ec0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ec2:	e841 2300 	strex	r3, r2, [r1]
 8006ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d1e6      	bne.n	8006e9c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	3308      	adds	r3, #8
 8006ed4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ed6:	697b      	ldr	r3, [r7, #20]
 8006ed8:	e853 3f00 	ldrex	r3, [r3]
 8006edc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f023 0301 	bic.w	r3, r3, #1
 8006ee4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3308      	adds	r3, #8
 8006eec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006eee:	623a      	str	r2, [r7, #32]
 8006ef0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef2:	69f9      	ldr	r1, [r7, #28]
 8006ef4:	6a3a      	ldr	r2, [r7, #32]
 8006ef6:	e841 2300 	strex	r3, r2, [r1]
 8006efa:	61bb      	str	r3, [r7, #24]
   return(result);
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1e5      	bne.n	8006ece <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	2220      	movs	r2, #32
 8006f06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2220      	movs	r2, #32
 8006f0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2220      	movs	r2, #32
 8006f14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006f20:	2303      	movs	r3, #3
 8006f22:	e010      	b.n	8006f46 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69da      	ldr	r2, [r3, #28]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	f43f af48 	beq.w	8006dd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f44:	2300      	movs	r3, #0
}
 8006f46:	4618      	mov	r0, r3
 8006f48:	3770      	adds	r7, #112	; 0x70
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}

08006f4e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b095      	sub	sp, #84	; 0x54
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	461a      	mov	r2, r3
 8006f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f74:	643b      	str	r3, [r7, #64]	; 0x40
 8006f76:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e6      	bne.n	8006f56 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006faa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e5      	bne.n	8006f88 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d118      	bne.n	8006ff6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	f023 0310 	bic.w	r3, r3, #16
 8006fd8:	647b      	str	r3, [r7, #68]	; 0x44
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	461a      	mov	r2, r3
 8006fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fe2:	61bb      	str	r3, [r7, #24]
 8006fe4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	6979      	ldr	r1, [r7, #20]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	e841 2300 	strex	r3, r2, [r1]
 8006fee:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e6      	bne.n	8006fc4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	669a      	str	r2, [r3, #104]	; 0x68
}
 800700a:	bf00      	nop
 800700c:	3754      	adds	r7, #84	; 0x54
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007022:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2200      	movs	r2, #0
 8007028:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7ff fb51 	bl	80066dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800703a:	bf00      	nop
 800703c:	3710      	adds	r7, #16
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	b088      	sub	sp, #32
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	e853 3f00 	ldrex	r3, [r3]
 8007056:	60bb      	str	r3, [r7, #8]
   return(result);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800705e:	61fb      	str	r3, [r7, #28]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	461a      	mov	r2, r3
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	61bb      	str	r3, [r7, #24]
 800706a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706c:	6979      	ldr	r1, [r7, #20]
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	e841 2300 	strex	r3, r2, [r1]
 8007074:	613b      	str	r3, [r7, #16]
   return(result);
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d1e6      	bne.n	800704a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2220      	movs	r2, #32
 8007080:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f7ff fb1d 	bl	80066c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800708e:	bf00      	nop
 8007090:	3720      	adds	r7, #32
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}

08007096 <SerialAPI_WriteByte>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	byte - byte to write
 */
static void SerialAPI_WriteByte (sbgcGeneral_t *gSBGC, ui8 byte)
{
 8007096:	b480      	push	{r7}
 8007098:	b083      	sub	sp, #12
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
 800709e:	460b      	mov	r3, r1
 80070a0:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d152      	bne.n	8007152 <SerialAPI_WriteByte+0xbc>

	if (calculateFreeTx_() < sizeof(ui8))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	685b      	ldr	r3, [r3, #4]
 80070b0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070bc:	429a      	cmp	r2, r3
 80070be:	d310      	bcc.n	80070e2 <SerialAPI_WriteByte+0x4c>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070c8:	461a      	mov	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	685b      	ldr	r3, [r3, #4]
 80070ce:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80070d2:	1ad3      	subs	r3, r2, r3
 80070d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d8:	bf0c      	ite	eq
 80070da:	2301      	moveq	r3, #1
 80070dc:	2300      	movne	r3, #0
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	e00c      	b.n	80070fc <SerialAPI_WriteByte+0x66>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80070f2:	429a      	cmp	r2, r3
 80070f4:	bf0c      	ite	eq
 80070f6:	2301      	moveq	r3, #1
 80070f8:	2300      	movne	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d009      	beq.n	8007114 <SerialAPI_WriteByte+0x7e>
		serialAPI_Abort()
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	2203      	movs	r2, #3
 8007106:	701a      	strb	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710e:	2205      	movs	r2, #5
 8007110:	769a      	strb	r2, [r3, #26]
 8007112:	e01e      	b.n	8007152 <SerialAPI_WriteByte+0xbc>

	serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize] = byte;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6852      	ldr	r2, [r2, #4]
 8007120:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007122:	7f12      	ldrb	r2, [r2, #28]
 8007124:	4413      	add	r3, r2
 8007126:	78fa      	ldrb	r2, [r7, #3]
 8007128:	701a      	strb	r2, [r3, #0]
	serialAPI_CurCmd_->_payloadSize += sizeof(ui8);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	7f1a      	ldrb	r2, [r3, #28]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007138:	3201      	adds	r2, #1
 800713a:	b2d2      	uxtb	r2, r2
 800713c:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += sizeof(ui8);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	3201      	adds	r2, #1
 800714c:	b2d2      	uxtb	r2, r2
 800714e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <SerialAPI_ReadByte>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read byte
 */
static ui8 SerialAPI_ReadByte (sbgcGeneral_t *gSBGC)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	ui8 byte = (ui8)*serialAPI_CurCmd_->_payload;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800716a:	6a1b      	ldr	r3, [r3, #32]
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	73fb      	strb	r3, [r7, #15]

	if (((uintptr_t)serialAPI_CurCmd_->_payload) != calculateEndRx_())
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007176:	6a1b      	ldr	r3, [r3, #32]
 8007178:	461a      	mov	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	33ff      	adds	r3, #255	; 0xff
 8007182:	429a      	cmp	r2, r3
 8007184:	d006      	beq.n	8007194 <SerialAPI_ReadByte+0x38>
		serialAPI_CurCmd_->_payload++;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800718c:	6a1a      	ldr	r2, [r3, #32]
 800718e:	3201      	adds	r2, #1
 8007190:	621a      	str	r2, [r3, #32]
 8007192:	e006      	b.n	80071a2 <SerialAPI_ReadByte+0x46>

	else
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685a      	ldr	r2, [r3, #4]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80071a0:	621a      	str	r2, [r3, #32]

	return byte;
 80071a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <SerialAPI_WriteWord>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	word - two bytes to write
 */
static void SerialAPI_WriteWord (sbgcGeneral_t *gSBGC, ui16 word)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	807b      	strh	r3, [r7, #2]
	serialAPI_Assert()
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d159      	bne.n	800727a <SerialAPI_WriteWord+0xca>

	if (calculateFreeTx_() < sizeof(ui16))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d311      	bcc.n	80071fe <SerialAPI_WriteWord+0x4e>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80071ec:	1ad3      	subs	r3, r2, r3
 80071ee:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	bf94      	ite	ls
 80071f6:	2301      	movls	r3, #1
 80071f8:	2300      	movhi	r3, #0
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	e00e      	b.n	800721c <SerialAPI_WriteWord+0x6c>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007206:	461a      	mov	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007210:	1ad3      	subs	r3, r2, r3
 8007212:	2b01      	cmp	r3, #1
 8007214:	bf94      	ite	ls
 8007216:	2301      	movls	r3, #1
 8007218:	2300      	movhi	r3, #0
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	d009      	beq.n	8007234 <SerialAPI_WriteWord+0x84>
		serialAPI_Abort()
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	685b      	ldr	r3, [r3, #4]
 8007224:	2203      	movs	r2, #3
 8007226:	701a      	strb	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722e:	2205      	movs	r2, #5
 8007230:	769a      	strb	r2, [r3, #26]
 8007232:	e022      	b.n	800727a <SerialAPI_WriteWord+0xca>

	gSBGC->_api->toLE(&word, &serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], sizeof(ui16));
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	6852      	ldr	r2, [r2, #4]
 800723e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007240:	6a12      	ldr	r2, [r2, #32]
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	6849      	ldr	r1, [r1, #4]
 8007246:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8007248:	7f09      	ldrb	r1, [r1, #28]
 800724a:	4411      	add	r1, r2
 800724c:	1cb8      	adds	r0, r7, #2
 800724e:	2202      	movs	r2, #2
 8007250:	4798      	blx	r3
	serialAPI_CurCmd_->_payloadSize += sizeof(ui16);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	7f1a      	ldrb	r2, [r3, #28]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007260:	3202      	adds	r2, #2
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += sizeof(ui16);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	3202      	adds	r2, #2
 8007274:	b2d2      	uxtb	r2, r2
 8007276:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <SerialAPI_ReadWord>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read word
 */
static ui16 SerialAPI_ReadWord (sbgcGeneral_t *gSBGC)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
	ui16 word;

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (sizeof(ui16) - 1)))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	3301      	adds	r3, #1
 800729c:	429a      	cmp	r2, r3
 800729e:	d225      	bcs.n	80072ec <SerialAPI_ReadWord+0x6c>
	{
		ui8 wordBuff [2];

		wordBuff[0] = *serialAPI_CurCmd_->_payload;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	6a1b      	ldr	r3, [r3, #32]
 80072a8:	781b      	ldrb	r3, [r3, #0]
 80072aa:	733b      	strb	r3, [r7, #12]
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80072b8:	621a      	str	r2, [r3, #32]
		wordBuff[1] = *serialAPI_CurCmd_->_payload;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	6a1b      	ldr	r3, [r3, #32]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	737b      	strb	r3, [r7, #13]
		serialAPI_CurCmd_->_payload += sizeof(ui8);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072cc:	6a1a      	ldr	r2, [r3, #32]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d4:	3201      	adds	r2, #1
 80072d6:	621a      	str	r2, [r3, #32]
		gSBGC->_api->fromLE(&word, wordBuff, sizeof(ui16));
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072de:	f107 010c 	add.w	r1, r7, #12
 80072e2:	f107 000e 	add.w	r0, r7, #14
 80072e6:	2202      	movs	r2, #2
 80072e8:	4798      	blx	r3
 80072ea:	e013      	b.n	8007314 <SerialAPI_ReadWord+0x94>
	}

	else
	{
		gSBGC->_api->fromLE(&word, serialAPI_CurCmd_->_payload, sizeof(ui16));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	6852      	ldr	r2, [r2, #4]
 80072f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80072f8:	6a11      	ldr	r1, [r2, #32]
 80072fa:	f107 000e 	add.w	r0, r7, #14
 80072fe:	2202      	movs	r2, #2
 8007300:	4798      	blx	r3
		serialAPI_CurCmd_->_payload += sizeof(ui16);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	6a1a      	ldr	r2, [r3, #32]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	3202      	adds	r2, #2
 8007312:	621a      	str	r2, [r3, #32]
	}

	if (((uintptr_t)serialAPI_CurCmd_->_payload) > calculateEndRx_())
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	6a1b      	ldr	r3, [r3, #32]
 800731c:	461a      	mov	r2, r3
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007324:	33ff      	adds	r3, #255	; 0xff
 8007326:	429a      	cmp	r2, r3
 8007328:	d906      	bls.n	8007338 <SerialAPI_ReadWord+0xb8>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	685a      	ldr	r2, [r3, #4]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007334:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007336:	621a      	str	r2, [r3, #32]

	return word;
 8007338:	89fb      	ldrh	r3, [r7, #14]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <SerialAPI_WriteLong>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	dword - four bytes to write
 */
static void SerialAPI_WriteLong (sbgcGeneral_t *gSBGC, ui32 dword)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	6039      	str	r1, [r7, #0]
	serialAPI_Assert()
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	2b01      	cmp	r3, #1
 8007354:	d159      	bne.n	800740a <SerialAPI_WriteLong+0xc8>

	if (calculateFreeTx_() < sizeof(ui32))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	685b      	ldr	r3, [r3, #4]
 800735a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007366:	429a      	cmp	r2, r3
 8007368:	d311      	bcc.n	800738e <SerialAPI_WriteLong+0x4c>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007372:	461a      	mov	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800737c:	1ad3      	subs	r3, r2, r3
 800737e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007382:	2b03      	cmp	r3, #3
 8007384:	bf94      	ite	ls
 8007386:	2301      	movls	r3, #1
 8007388:	2300      	movhi	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	e00e      	b.n	80073ac <SerialAPI_WriteLong+0x6a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	2b03      	cmp	r3, #3
 80073a4:	bf94      	ite	ls
 80073a6:	2301      	movls	r3, #1
 80073a8:	2300      	movhi	r3, #0
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d009      	beq.n	80073c4 <SerialAPI_WriteLong+0x82>
		serialAPI_Abort()
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	2203      	movs	r2, #3
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073be:	2205      	movs	r2, #5
 80073c0:	769a      	strb	r2, [r3, #26]
 80073c2:	e022      	b.n	800740a <SerialAPI_WriteLong+0xc8>

	gSBGC->_api->toLE(&dword, &serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], 4);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	6852      	ldr	r2, [r2, #4]
 80073ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073d0:	6a12      	ldr	r2, [r2, #32]
 80073d2:	6879      	ldr	r1, [r7, #4]
 80073d4:	6849      	ldr	r1, [r1, #4]
 80073d6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80073d8:	7f09      	ldrb	r1, [r1, #28]
 80073da:	4411      	add	r1, r2
 80073dc:	4638      	mov	r0, r7
 80073de:	2204      	movs	r2, #4
 80073e0:	4798      	blx	r3
	serialAPI_CurCmd_->_payloadSize += sizeof(ui32);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e8:	7f1a      	ldrb	r2, [r3, #28]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f0:	3204      	adds	r2, #4
 80073f2:	b2d2      	uxtb	r2, r2
 80073f4:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += sizeof(ui32);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	685b      	ldr	r3, [r3, #4]
 80073fa:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	3204      	adds	r2, #4
 8007404:	b2d2      	uxtb	r2, r2
 8007406:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800740a:	3708      	adds	r7, #8
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <SerialAPI_ReadLong>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Read long
 */
static ui32 SerialAPI_ReadLong (sbgcGeneral_t *gSBGC)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
	ui32 dword;

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (sizeof(ui32) - 1)))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741e:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007428:	6a1b      	ldr	r3, [r3, #32]
 800742a:	3303      	adds	r3, #3
 800742c:	429a      	cmp	r2, r3
 800742e:	d23e      	bcs.n	80074ae <SerialAPI_ReadLong+0x9e>
	{
		ui8 longBuff [4];
		ui8 cutSize = (calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	461a      	mov	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	75fb      	strb	r3, [r7, #23]

		memcpy(longBuff, serialAPI_CurCmd_->_payload, cutSize);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744a:	6a19      	ldr	r1, [r3, #32]
 800744c:	7dfa      	ldrb	r2, [r7, #23]
 800744e:	f107 030c 	add.w	r3, r7, #12
 8007452:	4618      	mov	r0, r3
 8007454:	f003 fc9f 	bl	800ad96 <memcpy>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007462:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007464:	621a      	str	r2, [r3, #32]
		memcpy(&longBuff[cutSize], serialAPI_CurCmd_->_payload, sizeof(ui32) - cutSize);
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	f107 020c 	add.w	r2, r7, #12
 800746c:	18d0      	adds	r0, r2, r3
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	6a19      	ldr	r1, [r3, #32]
 8007476:	7dfb      	ldrb	r3, [r7, #23]
 8007478:	f1c3 0304 	rsb	r3, r3, #4
 800747c:	461a      	mov	r2, r3
 800747e:	f003 fc8a 	bl	800ad96 <memcpy>
		serialAPI_CurCmd_->_payload += sizeof(ui32) - cutSize;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007488:	6a19      	ldr	r1, [r3, #32]
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	f1c3 0204 	rsb	r2, r3, #4
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007496:	440a      	add	r2, r1
 8007498:	621a      	str	r2, [r3, #32]
		gSBGC->_api->fromLE(&dword, longBuff, sizeof(ui32));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a0:	f107 010c 	add.w	r1, r7, #12
 80074a4:	f107 0010 	add.w	r0, r7, #16
 80074a8:	2204      	movs	r2, #4
 80074aa:	4798      	blx	r3
 80074ac:	e013      	b.n	80074d6 <SerialAPI_ReadLong+0xc6>
	}

	else
	{
		gSBGC->_api->fromLE(&dword, serialAPI_CurCmd_->_payload, sizeof(ui32));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	6852      	ldr	r2, [r2, #4]
 80074b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80074ba:	6a11      	ldr	r1, [r2, #32]
 80074bc:	f107 0010 	add.w	r0, r7, #16
 80074c0:	2204      	movs	r2, #4
 80074c2:	4798      	blx	r3
		serialAPI_CurCmd_->_payload += 4;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ca:	6a1a      	ldr	r2, [r3, #32]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d2:	3204      	adds	r2, #4
 80074d4:	621a      	str	r2, [r3, #32]
	}

	if (((uintptr_t)serialAPI_CurCmd_->_payload) > calculateEndRx_())
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	461a      	mov	r2, r3
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	33ff      	adds	r3, #255	; 0xff
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d906      	bls.n	80074fa <SerialAPI_ReadLong+0xea>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80074f8:	621a      	str	r2, [r3, #32]

	return dword;
 80074fa:	693b      	ldr	r3, [r7, #16]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <SerialAPI_WriteBuff>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*buff - written data
 *	@param	size - written data size
 */
static void SerialAPI_WriteBuff (sbgcGeneral_t *gSBGC, const void *buff, ui8 size)
{
 8007504:	b590      	push	{r4, r7, lr}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	71fb      	strb	r3, [r7, #7]
	serialAPI_Assert()
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	2b01      	cmp	r3, #1
 800751a:	d15b      	bne.n	80075d4 <SerialAPI_WriteBuff+0xd0>

	if (!size) return;
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d057      	beq.n	80075d2 <SerialAPI_WriteBuff+0xce>

	if (calculateFreeTx_() < size)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007532:	429a      	cmp	r2, r3
 8007534:	d30c      	bcc.n	8007550 <SerialAPI_WriteBuff+0x4c>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800753e:	461a      	mov	r2, r3
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007548:	1ad3      	subs	r3, r2, r3
 800754a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800754e:	e009      	b.n	8007564 <SerialAPI_WriteBuff+0x60>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007558:	461a      	mov	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007562:	1ad3      	subs	r3, r2, r3
 8007564:	79fa      	ldrb	r2, [r7, #7]
 8007566:	4293      	cmp	r3, r2
 8007568:	da09      	bge.n	800757e <SerialAPI_WriteBuff+0x7a>
		serialAPI_Abort()
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2203      	movs	r2, #3
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007578:	2205      	movs	r2, #5
 800757a:	769a      	strb	r2, [r3, #26]
 800757c:	e02a      	b.n	80075d4 <SerialAPI_WriteBuff+0xd0>

	#if (SBGC_SYS_BIG_ENDIAN)
		sbgcParserMap_t parserMap = gSBGC->_api->getCmdPM(serialAPI_CurCmd_);
	#else
		sbgcParserMap_t parserMap = PM_DEFAULT_8BIT;
 800757e:	2300      	movs	r3, #0
 8007580:	75fb      	strb	r3, [r7, #23]
	#endif

	serialAPI_CurCmd_->_payloadSize +=
			gSBGC->_api->convWithPM(&serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], buff, size, parserMap);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800758e:	6a1b      	ldr	r3, [r3, #32]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	6852      	ldr	r2, [r2, #4]
 8007594:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007596:	7f12      	ldrb	r2, [r2, #28]
 8007598:	1898      	adds	r0, r3, r2
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	79fa      	ldrb	r2, [r7, #7]
 800759e:	68b9      	ldr	r1, [r7, #8]
 80075a0:	47a0      	blx	r4
 80075a2:	4603      	mov	r3, r0
 80075a4:	4619      	mov	r1, r3
	serialAPI_CurCmd_->_payloadSize +=
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	7f1a      	ldrb	r2, [r3, #28]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075b4:	440a      	add	r2, r1
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	771a      	strb	r2, [r3, #28]

	gSBGC->_api->txCommandBuffHead += size;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	79fa      	ldrb	r2, [r7, #7]
 80075c8:	440a      	add	r2, r1
 80075ca:	b2d2      	uxtb	r2, r2
 80075cc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 80075d0:	e000      	b.n	80075d4 <SerialAPI_WriteBuff+0xd0>
	if (!size) return;
 80075d2:	bf00      	nop
}
 80075d4:	371c      	adds	r7, #28
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd90      	pop	{r4, r7, pc}

080075da <SerialAPI_ReadBuff>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*buff - where data will be written
 *	@param	size - read data size
 */
static void SerialAPI_ReadBuff (sbgcGeneral_t *gSBGC, void *buff, ui8 size)
{
 80075da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80075de:	b089      	sub	sp, #36	; 0x24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	4613      	mov	r3, r2
 80075e8:	71fb      	strb	r3, [r7, #7]
	sbgcParserMap_t parserMap = gSBGC->_api->getCmdPM(serialAPI_CurCmd_);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	6852      	ldr	r2, [r2, #4]
 80075f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80075f6:	4610      	mov	r0, r2
 80075f8:	4798      	blx	r3
 80075fa:	4603      	mov	r3, r0
 80075fc:	77fb      	strb	r3, [r7, #31]

	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + (size - 1)))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007604:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760e:	6a1b      	ldr	r3, [r3, #32]
 8007610:	4619      	mov	r1, r3
 8007612:	79fb      	ldrb	r3, [r7, #7]
 8007614:	440b      	add	r3, r1
 8007616:	3b01      	subs	r3, #1
 8007618:	429a      	cmp	r2, r3
 800761a:	d266      	bcs.n	80076ea <SerialAPI_ReadBuff+0x110>
	{
 800761c:	466b      	mov	r3, sp
 800761e:	461e      	mov	r6, r3
		ui8 buffTemp [size];
 8007620:	79f9      	ldrb	r1, [r7, #7]
 8007622:	460b      	mov	r3, r1
 8007624:	3b01      	subs	r3, #1
 8007626:	61bb      	str	r3, [r7, #24]
 8007628:	b2cb      	uxtb	r3, r1
 800762a:	2200      	movs	r2, #0
 800762c:	4698      	mov	r8, r3
 800762e:	4691      	mov	r9, r2
 8007630:	f04f 0200 	mov.w	r2, #0
 8007634:	f04f 0300 	mov.w	r3, #0
 8007638:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800763c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007640:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007644:	b2cb      	uxtb	r3, r1
 8007646:	2200      	movs	r2, #0
 8007648:	461c      	mov	r4, r3
 800764a:	4615      	mov	r5, r2
 800764c:	f04f 0200 	mov.w	r2, #0
 8007650:	f04f 0300 	mov.w	r3, #0
 8007654:	00eb      	lsls	r3, r5, #3
 8007656:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800765a:	00e2      	lsls	r2, r4, #3
 800765c:	460b      	mov	r3, r1
 800765e:	3307      	adds	r3, #7
 8007660:	08db      	lsrs	r3, r3, #3
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	ebad 0d03 	sub.w	sp, sp, r3
 8007668:	466b      	mov	r3, sp
 800766a:	3300      	adds	r3, #0
 800766c:	617b      	str	r3, [r7, #20]
		ui8 cutSize = (calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007674:	461a      	mov	r2, r3
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	74fb      	strb	r3, [r7, #19]

		memcpy(buffTemp, serialAPI_CurCmd_->_payload, cutSize);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	7cfa      	ldrb	r2, [r7, #19]
 800768c:	4619      	mov	r1, r3
 800768e:	6978      	ldr	r0, [r7, #20]
 8007690:	f003 fb81 	bl	800ad96 <memcpy>
		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	685a      	ldr	r2, [r3, #4]
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80076a0:	621a      	str	r2, [r3, #32]
		memcpy(&buffTemp[cutSize], serialAPI_CurCmd_->_payload, size - cutSize);
 80076a2:	7cfb      	ldrb	r3, [r7, #19]
 80076a4:	697a      	ldr	r2, [r7, #20]
 80076a6:	18d0      	adds	r0, r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ae:	6a19      	ldr	r1, [r3, #32]
 80076b0:	79fa      	ldrb	r2, [r7, #7]
 80076b2:	7cfb      	ldrb	r3, [r7, #19]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	f003 fb6d 	bl	800ad96 <memcpy>
		serialAPI_CurCmd_->_payload += size - cutSize;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c2:	6a1a      	ldr	r2, [r3, #32]
 80076c4:	79f9      	ldrb	r1, [r7, #7]
 80076c6:	7cfb      	ldrb	r3, [r7, #19]
 80076c8:	1acb      	subs	r3, r1, r3
 80076ca:	4619      	mov	r1, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	685b      	ldr	r3, [r3, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	440a      	add	r2, r1
 80076d4:	621a      	str	r2, [r3, #32]
		gSBGC->_api->convWithPM(buff, buffTemp, size, parserMap);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80076dc:	7ffb      	ldrb	r3, [r7, #31]
 80076de:	79fa      	ldrb	r2, [r7, #7]
 80076e0:	6979      	ldr	r1, [r7, #20]
 80076e2:	68b8      	ldr	r0, [r7, #8]
 80076e4:	47a0      	blx	r4
 80076e6:	46b5      	mov	sp, r6
	}

	else
		serialAPI_CurCmd_->_payload += gSBGC->_api->convWithPM(buff, serialAPI_CurCmd_->_payload, size, parserMap);
}
 80076e8:	e015      	b.n	8007716 <SerialAPI_ReadBuff+0x13c>
		serialAPI_CurCmd_->_payload += gSBGC->_api->convWithPM(buff, serialAPI_CurCmd_->_payload, size, parserMap);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	6c9c      	ldr	r4, [r3, #72]	; 0x48
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	6a19      	ldr	r1, [r3, #32]
 80076f8:	7ffb      	ldrb	r3, [r7, #31]
 80076fa:	79fa      	ldrb	r2, [r7, #7]
 80076fc:	68b8      	ldr	r0, [r7, #8]
 80076fe:	47a0      	blx	r4
 8007700:	4603      	mov	r3, r0
 8007702:	4619      	mov	r1, r3
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	6a1a      	ldr	r2, [r3, #32]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	440a      	add	r2, r1
 8007714:	621a      	str	r2, [r3, #32]
}
 8007716:	bf00      	nop
 8007718:	3724      	adds	r7, #36	; 0x24
 800771a:	46bd      	mov	sp, r7
 800771c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007720 <SerialAPI_WriteEmptyBuff>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	size - size of filled with zeros data
 */
static void SerialAPI_WriteEmptyBuff (sbgcGeneral_t *gSBGC, ui8 size)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	460b      	mov	r3, r1
 800772a:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d151      	bne.n	80077da <SerialAPI_WriteEmptyBuff+0xba>

	if (calculateFreeTx_() < size)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	685b      	ldr	r3, [r3, #4]
 8007742:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007746:	429a      	cmp	r2, r3
 8007748:	d30c      	bcc.n	8007764 <SerialAPI_WriteEmptyBuff+0x44>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007752:	461a      	mov	r2, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	685b      	ldr	r3, [r3, #4]
 8007758:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007762:	e009      	b.n	8007778 <SerialAPI_WriteEmptyBuff+0x58>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800776c:	461a      	mov	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	78fa      	ldrb	r2, [r7, #3]
 800777a:	4293      	cmp	r3, r2
 800777c:	da09      	bge.n	8007792 <SerialAPI_WriteEmptyBuff+0x72>
		serialAPI_Abort()
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	2203      	movs	r2, #3
 8007784:	701a      	strb	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778c:	2205      	movs	r2, #5
 800778e:	769a      	strb	r2, [r3, #26]
 8007790:	e023      	b.n	80077da <SerialAPI_WriteEmptyBuff+0xba>

	memset(&serialAPI_CurCmd_->_payload[serialAPI_CurCmd_->_payloadSize], 0, size);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	685b      	ldr	r3, [r3, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	6a1b      	ldr	r3, [r3, #32]
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6852      	ldr	r2, [r2, #4]
 800779e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077a0:	7f12      	ldrb	r2, [r2, #28]
 80077a2:	4413      	add	r3, r2
 80077a4:	78fa      	ldrb	r2, [r7, #3]
 80077a6:	2100      	movs	r1, #0
 80077a8:	4618      	mov	r0, r3
 80077aa:	f003 fa64 	bl	800ac76 <memset>
	serialAPI_CurCmd_->_payloadSize += size;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	7f19      	ldrb	r1, [r3, #28]
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	78fa      	ldrb	r2, [r7, #3]
 80077be:	440a      	add	r2, r1
 80077c0:	b2d2      	uxtb	r2, r2
 80077c2:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->txCommandBuffHead += size;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	78fa      	ldrb	r2, [r7, #3]
 80077d2:	440a      	add	r2, r1
 80077d4:	b2d2      	uxtb	r2, r2
 80077d6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 80077da:	3708      	adds	r7, #8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <SerialAPI_SkipBytes>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	size - size of skipped data
 */
static void SerialAPI_SkipBytes (sbgcGeneral_t *gSBGC, ui8 size)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	460b      	mov	r3, r1
 80077ea:	70fb      	strb	r3, [r7, #3]
	if (calculateEndRx_() < (((uintptr_t)serialAPI_CurCmd_->_payload) + size))
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077f2:	f103 02ff 	add.w	r2, r3, #255	; 0xff
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	4619      	mov	r1, r3
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	440b      	add	r3, r1
 8007804:	429a      	cmp	r2, r3
 8007806:	d216      	bcs.n	8007836 <SerialAPI_SkipBytes+0x56>
	{
		ui8 restSize = size - ((calculateEndRx_() - ((uintptr_t)serialAPI_CurCmd_->_payload)) + 1);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	6a1b      	ldr	r3, [r3, #32]
 8007810:	461a      	mov	r2, r3
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	b2da      	uxtb	r2, r3
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	4413      	add	r3, r2
 8007820:	73fb      	strb	r3, [r7, #15]

		serialAPI_CurCmd_->_payload = gSBGC->_api->rxCommandBuff + restSize;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	685b      	ldr	r3, [r3, #4]
 8007826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007828:	7bfa      	ldrb	r2, [r7, #15]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007830:	440a      	add	r2, r1
 8007832:	621a      	str	r2, [r3, #32]
	}

	else
		serialAPI_CurCmd_->_payload += size;
}
 8007834:	e009      	b.n	800784a <SerialAPI_SkipBytes+0x6a>
		serialAPI_CurCmd_->_payload += size;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	6a19      	ldr	r1, [r3, #32]
 800783e:	78fa      	ldrb	r2, [r7, #3]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007846:	440a      	add	r2, r1
 8007848:	621a      	str	r2, [r3, #32]
}
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr

08007856 <SerialAPI_StartWrite>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	cmdID - SBGC32 command identifier
 */
static void SerialAPI_StartWrite (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID
								  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8007856:	b580      	push	{r7, lr}
 8007858:	b082      	sub	sp, #8
 800785a:	af00      	add	r7, sp, #0
 800785c:	6078      	str	r0, [r7, #4]
 800785e:	460b      	mov	r3, r1
 8007860:	70fb      	strb	r3, [r7, #3]
	/* Lock all SerialAPI operations to add a new command */
	serialAPI_Lock()
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d14f      	bne.n	800790c <SerialAPI_StartWrite+0xb6>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	701a      	strb	r2, [r3, #0]
				return;
			}

	#endif

	if (gSBGC->_api->commandNumber >= SBGC_MAX_COMMAND_NUM)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	7f1b      	ldrb	r3, [r3, #28]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d007      	beq.n	800788e <SerialAPI_StartWrite+0x38>
	{
		gSBGC->_lastCommandStatus = sbgcCOMMAND_BUFFER_OVERFLOW_ERROR;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2209      	movs	r2, #9
 8007882:	725a      	strb	r2, [r3, #9]
		serialAPI_Error()
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	2203      	movs	r2, #3
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	e03e      	b.n	800790c <SerialAPI_StartWrite+0xb6>
			}

	#endif

	/* Begin to registration for a new command */
	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[gSBGC->_api->commandNumber];
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	699a      	ldr	r2, [r3, #24]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	7f1b      	ldrb	r3, [r3, #28]
 800789a:	4619      	mov	r1, r3
 800789c:	460b      	mov	r3, r1
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	440b      	add	r3, r1
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4619      	mov	r1, r3
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	440a      	add	r2, r1
 80078ac:	625a      	str	r2, [r3, #36]	; 0x24
	gSBGC->_api->commandNumber++;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	7f1a      	ldrb	r2, [r3, #28]
 80078b4:	3201      	adds	r2, #1
 80078b6:	b2d2      	uxtb	r2, r2
 80078b8:	771a      	strb	r2, [r3, #28]

	clearCmd_(serialAPI_CurCmd_);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	685b      	ldr	r3, [r3, #4]
 80078be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c0:	2224      	movs	r2, #36	; 0x24
 80078c2:	2100      	movs	r1, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f003 f9d6 	bl	800ac76 <memset>

	serialAPI_CurCmd_->_payload = &gSBGC->_api->txCommandBuff[gSBGC->_api->txCommandBuffHead];
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80078d8:	4619      	mov	r1, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	440a      	add	r2, r1
 80078e2:	621a      	str	r2, [r3, #32]

	serialAPI_CurCmd_->_id = ++gSBGC->_api->commandTotalCount;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	6a1a      	ldr	r2, [r3, #32]
 80078ea:	3201      	adds	r2, #1
 80078ec:	621a      	str	r2, [r3, #32]
 80078ee:	687a      	ldr	r2, [r7, #4]
 80078f0:	6852      	ldr	r2, [r2, #4]
 80078f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80078f4:	6a1b      	ldr	r3, [r3, #32]
 80078f6:	6093      	str	r3, [r2, #8]
	serialAPI_CurCmd_->_state = SCState_FORMING;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	685b      	ldr	r3, [r3, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	2201      	movs	r2, #1
 8007900:	769a      	strb	r2, [r3, #26]
	serialAPI_CurCmd_->_commandID = cmdID;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	78fa      	ldrb	r2, [r7, #3]
 800790a:	76da      	strb	r2, [r3, #27]
		#endif

		gSBGC->_api->commandSortFlag = sbgcFALSE;

	#endif
}
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <SerialAPI_StartRead>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	cmdID - SBGC32 command identifier
 */
static void SerialAPI_StartRead (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID
								 /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b082      	sub	sp, #8
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	460b      	mov	r3, r1
 800791c:	70fb      	strb	r3, [r7, #3]
	/* The SerialAPI is always locked at here */

	serialAPI_Assert()
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	781b      	ldrb	r3, [r3, #0]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d143      	bne.n	80079b0 <SerialAPI_StartRead+0x9e>
				return;
			}

	#endif

	if (gSBGC->_api->commandNumber >= SBGC_MAX_COMMAND_NUM)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	685b      	ldr	r3, [r3, #4]
 800792c:	7f1b      	ldrb	r3, [r3, #28]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d007      	beq.n	8007942 <SerialAPI_StartRead+0x30>
	{
		gSBGC->_lastCommandStatus = sbgcCOMMAND_BUFFER_OVERFLOW_ERROR;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2209      	movs	r2, #9
 8007936:	725a      	strb	r2, [r3, #9]
		serialAPI_Error()
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	685b      	ldr	r3, [r3, #4]
 800793c:	2203      	movs	r2, #3
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e036      	b.n	80079b0 <SerialAPI_StartRead+0x9e>
			}

	#endif

	/* Begin to registration for a new command */
	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[gSBGC->_api->commandNumber];
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	7f1b      	ldrb	r3, [r3, #28]
 800794e:	4619      	mov	r1, r3
 8007950:	460b      	mov	r3, r1
 8007952:	00db      	lsls	r3, r3, #3
 8007954:	440b      	add	r3, r1
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4619      	mov	r1, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	440a      	add	r2, r1
 8007960:	625a      	str	r2, [r3, #36]	; 0x24
	gSBGC->_api->commandNumber++;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	7f1a      	ldrb	r2, [r3, #28]
 8007968:	3201      	adds	r2, #1
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	771a      	strb	r2, [r3, #28]

	clearCmd_(serialAPI_CurCmd_);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	2224      	movs	r2, #36	; 0x24
 8007976:	2100      	movs	r1, #0
 8007978:	4618      	mov	r0, r3
 800797a:	f003 f97c 	bl	800ac76 <memset>

	serialAPI_CurCmd_->_id = ++gSBGC->_api->commandTotalCount;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	6a1a      	ldr	r2, [r3, #32]
 8007984:	3201      	adds	r2, #1
 8007986:	621a      	str	r2, [r3, #32]
 8007988:	687a      	ldr	r2, [r7, #4]
 800798a:	6852      	ldr	r2, [r2, #4]
 800798c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	6093      	str	r3, [r2, #8]
	serialAPI_CurCmd_->_state = SCState_FORMING;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007998:	2201      	movs	r2, #1
 800799a:	769a      	strb	r2, [r3, #26]
	serialAPI_CurCmd_->_commandID = cmdID;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	78fa      	ldrb	r2, [r7, #3]
 80079a4:	76da      	strb	r2, [r3, #27]
	serialAPI_CurCmd_->parameters = SCParam_RX;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	2280      	movs	r2, #128	; 0x80
 80079ae:	701a      	strb	r2, [r3, #0]
		#endif

		gSBGC->_api->commandSortFlag = sbgcFALSE;

	#endif
}
 80079b0:	3708      	adds	r7, #8
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <SerialAPI_FinishWrite>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_FinishWrite (sbgcGeneral_t *gSBGC)
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b082      	sub	sp, #8
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
	serialAPI_Assert()
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d116      	bne.n	80079f6 <SerialAPI_FinishWrite+0x40>

	#if (SBGC_USES_BLOCKING_MODE)

		gSBGC->_api->process(gSBGC, 0);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80079d0:	2100      	movs	r1, #0
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7a1b      	ldrb	r3, [r3, #8]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d007      	beq.n	80079ee <SerialAPI_FinishWrite+0x38>
		{
			gSBGC->_lastCommandStatus = sbgcCOMMAND_TX_ERROR;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2203      	movs	r2, #3
 80079e2:	725a      	strb	r2, [r3, #9]

			/* Close SerialAPI to prevent superfluous RX command registration */
			serialAPI_Error()
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2203      	movs	r2, #3
 80079ea:	701a      	strb	r2, [r3, #0]
 80079ec:	e003      	b.n	80079f6 <SerialAPI_FinishWrite+0x40>
		}

		else
		{
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2200      	movs	r2, #0
 80079f2:	725a      	strb	r2, [r3, #9]
			return;
 80079f4:	bf00      	nop
	#if (SBGC_USES_TOKENS)
		gSBGC->_api->lastCommandToken = ((sbgcCommandToken_t)serialAPI_CurCmd_->_id) & 0x000000FF;
	#endif

	serialAPI_CurCmd_->_state = SCState_PREPARED;
}
 80079f6:	3708      	adds	r7, #8
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}

080079fc <SerialAPI_FinishRead>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_FinishRead (sbgcGeneral_t *gSBGC)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
	serialAPI_Assert()
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d116      	bne.n	8007a3c <SerialAPI_FinishRead+0x40>

	#if (SBGC_USES_BLOCKING_MODE)

		gSBGC->_api->process(gSBGC, 0);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a16:	2100      	movs	r1, #0
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	7a1b      	ldrb	r3, [r3, #8]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <SerialAPI_FinishRead+0x30>
			gSBGC->_lastCommandStatus = sbgcCOMMAND_RX_ERROR;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2204      	movs	r2, #4
 8007a28:	725a      	strb	r2, [r3, #9]
 8007a2a:	e002      	b.n	8007a32 <SerialAPI_FinishRead+0x36>

		else
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	725a      	strb	r2, [r3, #9]

		gSBGC->_api->serialAPI_Status = serialAPI_OK;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	701a      	strb	r2, [r3, #0]
		return;
 8007a3a:	bf00      	nop
		gSBGC->_api->lastCommandToken |= (((sbgcCommandToken_t)serialAPI_CurCmd_->_id) << 8) & 0x0000FF00;

	#endif

	serialAPI_CurCmd_->_state = SCState_PREPARED;
}
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <SerialAPI_AbortLastCmd>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_AbortLastCmd (sbgcGeneral_t *gSBGC)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
	#if (SBGC_USES_LOGS)
		gSBGC->_api->writeLog(gSBGC, &lastCommand_);
	#endif

	clearCmd_(&lastCommand_);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	699a      	ldr	r2, [r3, #24]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	7f1b      	ldrb	r3, [r3, #28]
 8007a56:	4619      	mov	r1, r3
 8007a58:	460b      	mov	r3, r1
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	440b      	add	r3, r1
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	3b24      	subs	r3, #36	; 0x24
 8007a62:	4413      	add	r3, r2
 8007a64:	2224      	movs	r2, #36	; 0x24
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f003 f904 	bl	800ac76 <memset>
	gSBGC->_api->commandNumber--;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	7f1a      	ldrb	r2, [r3, #28]
 8007a74:	3a01      	subs	r2, #1
 8007a76:	b2d2      	uxtb	r2, r2
 8007a78:	771a      	strb	r2, [r3, #28]
}
 8007a7a:	bf00      	nop
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <PostCheckConfirmation>:
	 *			See @ref SerialAPI_AddConfirmationCommand function
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 */
	static void PostCheckConfirmation (sbgcGeneral_t *gSBGC)
	{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
		sbgcConfirm_t *confirm = (sbgcConfirm_t*)serialAPI_CurCmdDest_;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	685b      	ldr	r3, [r3, #4]
 8007a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	60fb      	str	r3, [r7, #12]

		SerialAPI_SkipBytes(gSBGC, 1);  // Skip commandID
 8007a94:	2101      	movs	r1, #1
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f7ff fea2 	bl	80077e0 <SerialAPI_SkipBytes>

		if (serialAPI_CurCmd_->_commandID == CMD_CONFIRM)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	7edb      	ldrb	r3, [r3, #27]
 8007aa4:	2b43      	cmp	r3, #67	; 0x43
 8007aa6:	d120      	bne.n	8007aea <PostCheckConfirmation+0x68>
		{
			if (serialAPI_CurCmd_->_payloadSize == 2)
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	7f1b      	ldrb	r3, [r3, #28]
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d108      	bne.n	8007ac6 <PostCheckConfirmation+0x44>
				confirm->cmdData = SerialAPI_ReadByte(gSBGC);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff fb51 	bl	800715c <SerialAPI_ReadByte>
 8007aba:	4603      	mov	r3, r0
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	f8a3 2001 	strh.w	r2, [r3, #1]
 8007ac4:	e00d      	b.n	8007ae2 <PostCheckConfirmation+0x60>

			else if (serialAPI_CurCmd_->_payloadSize == 3)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007acc:	7f1b      	ldrb	r3, [r3, #28]
 8007ace:	2b03      	cmp	r3, #3
 8007ad0:	d107      	bne.n	8007ae2 <PostCheckConfirmation+0x60>
				confirm->cmdData = SerialAPI_ReadWord(gSBGC);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fbd4 	bl	8007280 <SerialAPI_ReadWord>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f8a3 2001 	strh.w	r2, [r3, #1]

			confirm->status = sbgcCONFIRM_RECEIVED;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	71da      	strb	r2, [r3, #7]
			if (serialAPI_CurCmd_->_payloadSize > 1)
				SerialAPI_ReadBuff(gSBGC, confirm->errorData, 4);

			confirm->status = sbgcCONFIRM_ERROR;
		}
	}
 8007ae8:	e01c      	b.n	8007b24 <PostCheckConfirmation+0xa2>
		else if (serialAPI_CurCmd_->_commandID == CMD_ERROR)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	7edb      	ldrb	r3, [r3, #27]
 8007af2:	2bff      	cmp	r3, #255	; 0xff
 8007af4:	d116      	bne.n	8007b24 <PostCheckConfirmation+0xa2>
			confirm->errorCode = SerialAPI_ReadByte(gSBGC);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fb30 	bl	800715c <SerialAPI_ReadByte>
 8007afc:	4603      	mov	r3, r0
 8007afe:	461a      	mov	r2, r3
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	705a      	strb	r2, [r3, #1]
			if (serialAPI_CurCmd_->_payloadSize > 1)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	7f1b      	ldrb	r3, [r3, #28]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d906      	bls.n	8007b1e <PostCheckConfirmation+0x9c>
				SerialAPI_ReadBuff(gSBGC, confirm->errorData, 4);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	3302      	adds	r3, #2
 8007b14:	2204      	movs	r2, #4
 8007b16:	4619      	mov	r1, r3
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f7ff fd5e 	bl	80075da <SerialAPI_ReadBuff>
			confirm->status = sbgcCONFIRM_ERROR;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2202      	movs	r2, #2
 8007b22:	71da      	strb	r2, [r3, #7]
	}
 8007b24:	bf00      	nop
 8007b26:	3710      	adds	r7, #16
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <SerialAPI_AssignSystemEvent>:
 *			directly to pDestination
 *	@param	*pDestination - where the data will be written or changed
 *	@param	size - destination buffer size
 */
static void SerialAPI_AssignSystemEvent (sbgcGeneral_t *gSBGC, serialAPI_Event_t serialAPI_Event, void *pDestination, ui16 size)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	60f8      	str	r0, [r7, #12]
 8007b34:	60b9      	str	r1, [r7, #8]
 8007b36:	607a      	str	r2, [r7, #4]
 8007b38:	807b      	strh	r3, [r7, #2]
	serialAPI_Assert()
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d10e      	bne.n	8007b62 <SerialAPI_AssignSystemEvent+0x36>
		if (pDestination == NULL)
			serialAPI_Abort()

	#endif

	serialAPI_CurCmd_->_serialAPI_Event = serialAPI_Event;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	68ba      	ldr	r2, [r7, #8]
 8007b4c:	611a      	str	r2, [r3, #16]
	serialAPI_CurCmd_->_pDestination = pDestination;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	615a      	str	r2, [r3, #20]
	serialAPI_CurCmd_->_destinationSize = size;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5e:	887a      	ldrh	r2, [r7, #2]
 8007b60:	831a      	strh	r2, [r3, #24]
}
 8007b62:	3714      	adds	r7, #20
 8007b64:	46bd      	mov	sp, r7
 8007b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6a:	4770      	bx	lr

08007b6c <SerialAPI_AddConfirmationCommand>:
 *	@param	cmdID - identifier of the command
 *			that needs to be confirmed
 */
static void SerialAPI_AddConfirmationCommand (sbgcGeneral_t *gSBGC, sbgcConfirm_t *confirm, serialAPI_CommandID_t cmdID
											  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	71fb      	strb	r3, [r7, #7]
	serialAPI_Assert()
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d119      	bne.n	8007bb8 <SerialAPI_AddConfirmationCommand+0x4c>

	if (confirm == SBGC_NO_CONFIRM) return;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d015      	beq.n	8007bb6 <SerialAPI_AddConfirmationCommand+0x4a>
				return;

		#endif

		/* Clear confirmation command */
		memset(confirm, 0, sizeof(sbgcConfirm_t));
 8007b8a:	2208      	movs	r2, #8
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	68b8      	ldr	r0, [r7, #8]
 8007b90:	f003 f871 	bl	800ac76 <memset>

		/* Assign command ID to confirm */
		confirm->commandID = cmdID;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	79fa      	ldrb	r2, [r7, #7]
 8007b98:	701a      	strb	r2, [r3, #0]

		/* Start read */
		SerialAPI_StartRead(gSBGC, CMD_CONFIRM SBGC_ADVANCED_ARGS__);
 8007b9a:	2143      	movs	r1, #67	; 0x43
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f7ff feb8 	bl	8007912 <SerialAPI_StartRead>
		SerialAPI_AssignSystemEvent(gSBGC, PostCheckConfirmation, confirm, sizeof(sbgcConfirm_t));
 8007ba2:	2308      	movs	r3, #8
 8007ba4:	68ba      	ldr	r2, [r7, #8]
 8007ba6:	4906      	ldr	r1, [pc, #24]	; (8007bc0 <SerialAPI_AddConfirmationCommand+0x54>)
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f7ff ffbf 	bl	8007b2c <SerialAPI_AssignSystemEvent>
		SerialAPI_FinishRead(gSBGC);
 8007bae:	68f8      	ldr	r0, [r7, #12]
 8007bb0:	f7ff ff24 	bl	80079fc <SerialAPI_FinishRead>
 8007bb4:	e000      	b.n	8007bb8 <SerialAPI_AddConfirmationCommand+0x4c>
	if (confirm == SBGC_NO_CONFIRM) return;
 8007bb6:	bf00      	nop

	#else
		unused_(gSBGC);
	#endif
}
 8007bb8:	3710      	adds	r7, #16
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd80      	pop	{r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08007a83 	.word	0x08007a83

08007bc4 <SerialAPI_DefinePayloadSize>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	payloadSize - how many bytes command waits
 */
static void SerialAPI_DefinePayloadSize (sbgcGeneral_t *gSBGC, ui8 payloadSize)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b083      	sub	sp, #12
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	460b      	mov	r3, r1
 8007bce:	70fb      	strb	r3, [r7, #3]
	serialAPI_Assert()
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	781b      	ldrb	r3, [r3, #0]
 8007bd6:	2b01      	cmp	r3, #1
 8007bd8:	d104      	bne.n	8007be4 <SerialAPI_DefinePayloadSize+0x20>

	serialAPI_CurCmd_->_payloadSize = payloadSize;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	78fa      	ldrb	r2, [r7, #3]
 8007be2:	771a      	strb	r2, [r3, #28]
}
 8007be4:	370c      	adds	r7, #12
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr

08007bee <SerialAPI_BoundCommands>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SerialAPI_BoundCommands (sbgcGeneral_t *gSBGC)
{
 8007bee:	b480      	push	{r7}
 8007bf0:	b083      	sub	sp, #12
 8007bf2:	af00      	add	r7, sp, #0
 8007bf4:	6078      	str	r0, [r7, #4]
	#if (SBGC_USES_BLOCKING_MODE)
		return;
 8007bf6:	bf00      	nop
			TxCmd->callback = NULL;
			TxCmd->callbackArg = NULL;
		}

	#endif
}
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr

08007c02 <SerialAPI_Exit>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
static sbgcCommandStatus_t SerialAPI_Exit (sbgcGeneral_t *gSBGC)
{
 8007c02:	b580      	push	{r7, lr}
 8007c04:	b082      	sub	sp, #8
 8007c06:	af00      	add	r7, sp, #0
 8007c08:	6078      	str	r0, [r7, #4]
	if (gSBGC->_api->serialAPI_Status == serialAPI_ERROR)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b03      	cmp	r3, #3
 8007c12:	d11f      	bne.n	8007c54 <SerialAPI_Exit+0x52>
	/* Check what's wrong */
	{
		while ((lastCommand_._state == SCState_ABORTED) && gSBGC->_api->commandNumber)
 8007c14:	e002      	b.n	8007c1c <SerialAPI_Exit+0x1a>
		/* Delete all corrupted commands */
			SerialAPI_AbortLastCmd(gSBGC);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff ff13 	bl	8007a42 <SerialAPI_AbortLastCmd>
		while ((lastCommand_._state == SCState_ABORTED) && gSBGC->_api->commandNumber)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	7f1b      	ldrb	r3, [r3, #28]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	440b      	add	r3, r1
 8007c30:	009b      	lsls	r3, r3, #2
 8007c32:	3b24      	subs	r3, #36	; 0x24
 8007c34:	4413      	add	r3, r2
 8007c36:	7e9b      	ldrb	r3, [r3, #26]
 8007c38:	2b05      	cmp	r3, #5
 8007c3a:	d104      	bne.n	8007c46 <SerialAPI_Exit+0x44>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	7f1b      	ldrb	r3, [r3, #28]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e7      	bne.n	8007c16 <SerialAPI_Exit+0x14>

        serialAPI_Unlock()
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	701a      	strb	r2, [r3, #0]

		/* Return error code */
		return gSBGC->_lastCommandStatus;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7a5b      	ldrb	r3, [r3, #9]
 8007c52:	e005      	b.n	8007c60 <SerialAPI_Exit+0x5e>
			gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
		#endif

	#endif

	serialAPI_Unlock()
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	701a      	strb	r2, [r3, #0]

	return gSBGC->_lastCommandStatus;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	7a5b      	ldrb	r3, [r3, #9]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3708      	adds	r7, #8
 8007c64:	46bd      	mov	sp, r7
 8007c66:	bd80      	pop	{r7, pc}

08007c68 <PrivateSerialAPI_LinkCommandBuild>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkCommandBuild (sbgcGeneral_t *gSBGC)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b083      	sub	sp, #12
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
	gSBGC->_api->writeByte	= SerialAPI_WriteByte;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4a2d      	ldr	r2, [pc, #180]	; (8007d2c <PrivateSerialAPI_LinkCommandBuild+0xc4>)
 8007c76:	64da      	str	r2, [r3, #76]	; 0x4c
	gSBGC->_api->readByte	= SerialAPI_ReadByte;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	4a2c      	ldr	r2, [pc, #176]	; (8007d30 <PrivateSerialAPI_LinkCommandBuild+0xc8>)
 8007c7e:	659a      	str	r2, [r3, #88]	; 0x58
	gSBGC->_api->writeWord	= SerialAPI_WriteWord;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	685b      	ldr	r3, [r3, #4]
 8007c84:	4a2b      	ldr	r2, [pc, #172]	; (8007d34 <PrivateSerialAPI_LinkCommandBuild+0xcc>)
 8007c86:	651a      	str	r2, [r3, #80]	; 0x50
	gSBGC->_api->readWord	= SerialAPI_ReadWord;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	4a2a      	ldr	r2, [pc, #168]	; (8007d38 <PrivateSerialAPI_LinkCommandBuild+0xd0>)
 8007c8e:	65da      	str	r2, [r3, #92]	; 0x5c
	gSBGC->_api->writeLong	= SerialAPI_WriteLong;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	4a29      	ldr	r2, [pc, #164]	; (8007d3c <PrivateSerialAPI_LinkCommandBuild+0xd4>)
 8007c96:	655a      	str	r2, [r3, #84]	; 0x54
	gSBGC->_api->readLong	= SerialAPI_ReadLong;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	4a28      	ldr	r2, [pc, #160]	; (8007d40 <PrivateSerialAPI_LinkCommandBuild+0xd8>)
 8007c9e:	661a      	str	r2, [r3, #96]	; 0x60
	gSBGC->_api->writeBuff	= SerialAPI_WriteBuff;
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	4a27      	ldr	r2, [pc, #156]	; (8007d44 <PrivateSerialAPI_LinkCommandBuild+0xdc>)
 8007ca6:	665a      	str	r2, [r3, #100]	; 0x64
	gSBGC->_api->readBuff	= SerialAPI_ReadBuff;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	685b      	ldr	r3, [r3, #4]
 8007cac:	4a26      	ldr	r2, [pc, #152]	; (8007d48 <PrivateSerialAPI_LinkCommandBuild+0xe0>)
 8007cae:	669a      	str	r2, [r3, #104]	; 0x68
	gSBGC->_api->writeEmptyBuff
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_WriteEmptyBuff;
 8007cb4:	4a25      	ldr	r2, [pc, #148]	; (8007d4c <PrivateSerialAPI_LinkCommandBuild+0xe4>)
 8007cb6:	66da      	str	r2, [r3, #108]	; 0x6c
	gSBGC->_api->skipBytes	= SerialAPI_SkipBytes;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	4a24      	ldr	r2, [pc, #144]	; (8007d50 <PrivateSerialAPI_LinkCommandBuild+0xe8>)
 8007cbe:	671a      	str	r2, [r3, #112]	; 0x70
	gSBGC->_api->startWrite	= SerialAPI_StartWrite;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	4a23      	ldr	r2, [pc, #140]	; (8007d54 <PrivateSerialAPI_LinkCommandBuild+0xec>)
 8007cc6:	675a      	str	r2, [r3, #116]	; 0x74
	gSBGC->_api->startRead	= SerialAPI_StartRead;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	4a22      	ldr	r2, [pc, #136]	; (8007d58 <PrivateSerialAPI_LinkCommandBuild+0xf0>)
 8007cce:	679a      	str	r2, [r3, #120]	; 0x78
	gSBGC->_api->finishWrite
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_FinishWrite;
 8007cd4:	4a21      	ldr	r2, [pc, #132]	; (8007d5c <PrivateSerialAPI_LinkCommandBuild+0xf4>)
 8007cd6:	67da      	str	r2, [r3, #124]	; 0x7c
	gSBGC->_api->finishRead	= SerialAPI_FinishRead;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	685b      	ldr	r3, [r3, #4]
 8007cdc:	4a20      	ldr	r2, [pc, #128]	; (8007d60 <PrivateSerialAPI_LinkCommandBuild+0xf8>)
 8007cde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	gSBGC->_api->abortLast	= SerialAPI_AbortLastCmd;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	4a1f      	ldr	r2, [pc, #124]	; (8007d64 <PrivateSerialAPI_LinkCommandBuild+0xfc>)
 8007ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	gSBGC->_api->addConfirm	= SerialAPI_AddConfirmationCommand;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	4a1d      	ldr	r2, [pc, #116]	; (8007d68 <PrivateSerialAPI_LinkCommandBuild+0x100>)
 8007cf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	gSBGC->_api->assignEvent
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_AssignSystemEvent;
 8007cfa:	4a1c      	ldr	r2, [pc, #112]	; (8007d6c <PrivateSerialAPI_LinkCommandBuild+0x104>)
 8007cfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	gSBGC->_api->definePayload
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	685b      	ldr	r3, [r3, #4]
							= SerialAPI_DefinePayloadSize;
 8007d04:	4a1a      	ldr	r2, [pc, #104]	; (8007d70 <PrivateSerialAPI_LinkCommandBuild+0x108>)
 8007d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	gSBGC->_api->bound		= SerialAPI_BoundCommands;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	4a19      	ldr	r2, [pc, #100]	; (8007d74 <PrivateSerialAPI_LinkCommandBuild+0x10c>)
 8007d10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	gSBGC->_api->exit		= SerialAPI_Exit;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4a17      	ldr	r2, [pc, #92]	; (8007d78 <PrivateSerialAPI_LinkCommandBuild+0x110>)
 8007d1a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	08007097 	.word	0x08007097
 8007d30:	0800715d 	.word	0x0800715d
 8007d34:	080071b1 	.word	0x080071b1
 8007d38:	08007281 	.word	0x08007281
 8007d3c:	08007343 	.word	0x08007343
 8007d40:	08007411 	.word	0x08007411
 8007d44:	08007505 	.word	0x08007505
 8007d48:	080075db 	.word	0x080075db
 8007d4c:	08007721 	.word	0x08007721
 8007d50:	080077e1 	.word	0x080077e1
 8007d54:	08007857 	.word	0x08007857
 8007d58:	08007913 	.word	0x08007913
 8007d5c:	080079b7 	.word	0x080079b7
 8007d60:	080079fd 	.word	0x080079fd
 8007d64:	08007a43 	.word	0x08007a43
 8007d68:	08007b6d 	.word	0x08007b6d
 8007d6c:	08007b2d 	.word	0x08007b2d
 8007d70:	08007bc5 	.word	0x08007bc5
 8007d74:	08007bef 	.word	0x08007bef
 8007d78:	08007c03 	.word	0x08007c03

08007d7c <SerialAPI_CRC16_Calculate>:
 *	@param	length - size of data buffer
 *
 *	@return	Calculated checksum
 */
static ui16 SerialAPI_CRC16_Calculate (ui8 const *data, ui16 length)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	807b      	strh	r3, [r7, #2]
	ui16 CRC_Register = 0;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	81fb      	strh	r3, [r7, #14]
	ui8 shiftRegister, dataBit, CRC_Bit;

	for (ui16 i = 0; i < length; i++)
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	817b      	strh	r3, [r7, #10]
 8007d90:	e02a      	b.n	8007de8 <SerialAPI_CRC16_Calculate+0x6c>
	{
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8007d92:	2301      	movs	r3, #1
 8007d94:	737b      	strb	r3, [r7, #13]
 8007d96:	e021      	b.n	8007ddc <SerialAPI_CRC16_Calculate+0x60>
		{
			dataBit = (data[i] & shiftRegister) ? 1 : 0;
 8007d98:	897b      	ldrh	r3, [r7, #10]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	781a      	ldrb	r2, [r3, #0]
 8007da0:	7b7b      	ldrb	r3, [r7, #13]
 8007da2:	4013      	ands	r3, r2
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	bf14      	ite	ne
 8007daa:	2301      	movne	r3, #1
 8007dac:	2300      	moveq	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	727b      	strb	r3, [r7, #9]
			CRC_Bit = CRC_Register >> 15;
 8007db2:	89fb      	ldrh	r3, [r7, #14]
 8007db4:	0bdb      	lsrs	r3, r3, #15
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	723b      	strb	r3, [r7, #8]
			CRC_Register <<= 1;
 8007dba:	89fb      	ldrh	r3, [r7, #14]
 8007dbc:	005b      	lsls	r3, r3, #1
 8007dbe:	81fb      	strh	r3, [r7, #14]

			if (dataBit != CRC_Bit)
 8007dc0:	7a7a      	ldrb	r2, [r7, #9]
 8007dc2:	7a3b      	ldrb	r3, [r7, #8]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d006      	beq.n	8007dd6 <SerialAPI_CRC16_Calculate+0x5a>
				CRC_Register ^= SBGC_CRC16_POLYNOM;
 8007dc8:	89fb      	ldrh	r3, [r7, #14]
 8007dca:	f483 43ff 	eor.w	r3, r3, #32640	; 0x7f80
 8007dce:	f083 037a 	eor.w	r3, r3, #122	; 0x7a
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	81fb      	strh	r3, [r7, #14]
		for (shiftRegister = 1; shiftRegister > 0; shiftRegister <<= 1)
 8007dd6:	7b7b      	ldrb	r3, [r7, #13]
 8007dd8:	005b      	lsls	r3, r3, #1
 8007dda:	737b      	strb	r3, [r7, #13]
 8007ddc:	7b7b      	ldrb	r3, [r7, #13]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1da      	bne.n	8007d98 <SerialAPI_CRC16_Calculate+0x1c>
	for (ui16 i = 0; i < length; i++)
 8007de2:	897b      	ldrh	r3, [r7, #10]
 8007de4:	3301      	adds	r3, #1
 8007de6:	817b      	strh	r3, [r7, #10]
 8007de8:	897a      	ldrh	r2, [r7, #10]
 8007dea:	887b      	ldrh	r3, [r7, #2]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d3d0      	bcc.n	8007d92 <SerialAPI_CRC16_Calculate+0x16>
		}
	}

	return CRC_Register;
 8007df0:	89fb      	ldrh	r3, [r7, #14]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3714      	adds	r7, #20
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <SBGC32_TX>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SBGC32_TX (sbgcGeneral_t *gSBGC)
{
 8007dfe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e02:	b089      	sub	sp, #36	; 0x24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	466b      	mov	r3, sp
 8007e0a:	461e      	mov	r6, r3
	ui8 dataBuff [gSBGC->_api->currentSerialCommand->_payloadSize + SBGC_SERVICE_BYTES_NUM];
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	7f1b      	ldrb	r3, [r3, #28]
 8007e14:	1d99      	adds	r1, r3, #6
 8007e16:	1e4b      	subs	r3, r1, #1
 8007e18:	61bb      	str	r3, [r7, #24]
 8007e1a:	460a      	mov	r2, r1
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	4690      	mov	r8, r2
 8007e20:	4699      	mov	r9, r3
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e36:	460a      	mov	r2, r1
 8007e38:	2300      	movs	r3, #0
 8007e3a:	4614      	mov	r4, r2
 8007e3c:	461d      	mov	r5, r3
 8007e3e:	f04f 0200 	mov.w	r2, #0
 8007e42:	f04f 0300 	mov.w	r3, #0
 8007e46:	00eb      	lsls	r3, r5, #3
 8007e48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e4c:	00e2      	lsls	r2, r4, #3
 8007e4e:	460b      	mov	r3, r1
 8007e50:	3307      	adds	r3, #7
 8007e52:	08db      	lsrs	r3, r3, #3
 8007e54:	00db      	lsls	r3, r3, #3
 8007e56:	ebad 0d03 	sub.w	sp, sp, r3
 8007e5a:	466b      	mov	r3, sp
 8007e5c:	3300      	adds	r3, #0
 8007e5e:	617b      	str	r3, [r7, #20]

	/* Forming the command */
	dataBuff[0] = (SBGC_PROTOCOL_VERSION - 1) ? SBGC_P2_START_CHARACTER : SBGC_P1_START_CHARACTER;
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	2224      	movs	r2, #36	; 0x24
 8007e64:	701a      	strb	r2, [r3, #0]
	dataBuff[1] = gSBGC->_api->currentSerialCommand->_commandID;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6c:	7eda      	ldrb	r2, [r3, #27]
 8007e6e:	697b      	ldr	r3, [r7, #20]
 8007e70:	705a      	strb	r2, [r3, #1]
	dataBuff[2] = gSBGC->_api->currentSerialCommand->_payloadSize;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	685b      	ldr	r3, [r3, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	7f1a      	ldrb	r2, [r3, #28]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	709a      	strb	r2, [r3, #2]
	dataBuff[3] = dataBuff[1] + dataBuff[2];  // No need Modulo256 calculation
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	785a      	ldrb	r2, [r3, #1]
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	789b      	ldrb	r3, [r3, #2]
 8007e86:	4413      	add	r3, r2
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	70da      	strb	r2, [r3, #3]

	memcpy(&dataBuff[4], gSBGC->_api->currentSerialCommand->_payload, gSBGC->_api->currentSerialCommand->_payloadSize);
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	1d18      	adds	r0, r3, #4
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	6a19      	ldr	r1, [r3, #32]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	7f1b      	ldrb	r3, [r3, #28]
 8007ea2:	461a      	mov	r2, r3
 8007ea4:	f002 ff77 	bl	800ad96 <memcpy>

	/* ui8 size = real size current gSBGC->_api->currentSerialCommand */
	ui8 size = gSBGC->_api->currentSerialCommand->_payloadSize + SBGC_SERVICE_BYTES_NUM;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eae:	7f1b      	ldrb	r3, [r3, #28]
 8007eb0:	3306      	adds	r3, #6
 8007eb2:	74fb      	strb	r3, [r7, #19]
		dataBuff[4 + gSBGC->_api->currentSerialCommand->_payloadSize] =
				SerialAPI_Modulo256_Calculate(gSBGC->_api->currentSerialCommand->_payload, gSBGC->_api->currentSerialCommand->_payloadSize);

	else  // V.2
	{
		ui16 CRC16_Res = SerialAPI_CRC16_Calculate(&dataBuff[1], (4 + gSBGC->_api->currentSerialCommand->_payloadSize) - 1);
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	1c5a      	adds	r2, r3, #1
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	7f1b      	ldrb	r3, [r3, #28]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	3303      	adds	r3, #3
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f7ff ff57 	bl	8007d7c <SerialAPI_CRC16_Calculate>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	817b      	strh	r3, [r7, #10]
		memcpy(&dataBuff[4 + gSBGC->_api->currentSerialCommand->_payloadSize], &CRC16_Res, sizeof(CRC16_Res));
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	7f1b      	ldrb	r3, [r3, #28]
 8007eda:	3304      	adds	r3, #4
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	4413      	add	r3, r2
 8007ee0:	897a      	ldrh	r2, [r7, #10]
 8007ee2:	801a      	strh	r2, [r3, #0]
	}

	#if (SBGC_USES_BLOCKING_MODE)

		/* Launch timer */
		sbgcTicks_t launchTime = serialAPI_GetTick();
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	6812      	ldr	r2, [r2, #0]
 8007eee:	6812      	ldr	r2, [r2, #0]
 8007ef0:	4610      	mov	r0, r2
 8007ef2:	4798      	blx	r3
 8007ef4:	60f8      	str	r0, [r7, #12]

	#endif

	/* Transmit now */
	ui8 txStatus = gSBGC->_ll->drvTx(gSBGC->_ll->drv, dataBuff, size);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	687a      	ldr	r2, [r7, #4]
 8007efe:	6812      	ldr	r2, [r2, #0]
 8007f00:	6810      	ldr	r0, [r2, #0]
 8007f02:	7cfa      	ldrb	r2, [r7, #19]
 8007f04:	b292      	uxth	r2, r2
 8007f06:	6979      	ldr	r1, [r7, #20]
 8007f08:	4798      	blx	r3
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	77fb      	strb	r3, [r7, #31]
		if (txStatus != SBGC_DRV_TX_OK_FLAG)
		{

	#else

		while ((serialAPI_GetTick() - launchTime) < gSBGC->_api->currentSerialCommand->timeout &&
 8007f0e:	e00b      	b.n	8007f28 <SBGC32_TX+0x12a>
			   (txStatus != SBGC_DRV_TX_OK_FLAG))
		/* Try to transmit the command while its time isn't over */
			txStatus = gSBGC->_ll->drvTx(gSBGC->_ll->drv, dataBuff, size);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689b      	ldr	r3, [r3, #8]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	6810      	ldr	r0, [r2, #0]
 8007f1c:	7cfa      	ldrb	r2, [r7, #19]
 8007f1e:	b292      	uxth	r2, r2
 8007f20:	6979      	ldr	r1, [r7, #20]
 8007f22:	4798      	blx	r3
 8007f24:	4603      	mov	r3, r0
 8007f26:	77fb      	strb	r3, [r7, #31]
		while ((serialAPI_GetTick() - launchTime) < gSBGC->_api->currentSerialCommand->timeout &&
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6812      	ldr	r2, [r2, #0]
 8007f32:	6812      	ldr	r2, [r2, #0]
 8007f34:	4610      	mov	r0, r2
 8007f36:	4798      	blx	r3
 8007f38:	4602      	mov	r2, r0
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	1ad2      	subs	r2, r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d202      	bcs.n	8007f50 <SBGC32_TX+0x152>
 8007f4a:	7ffb      	ldrb	r3, [r7, #31]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d1df      	bne.n	8007f10 <SBGC32_TX+0x112>

		if (txStatus != SBGC_DRV_TX_OK_FLAG)
 8007f50:	7ffb      	ldrb	r3, [r7, #31]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d004      	beq.n	8007f60 <SBGC32_TX+0x162>
		{

	#endif

			gSBGC->_lastSerialCommandStatus = serialAPI_TX_BUS_BUSY_ERROR;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2201      	movs	r2, #1
 8007f5a:	721a      	strb	r2, [r3, #8]
			return;
 8007f5c:	46b5      	mov	sp, r6
 8007f5e:	e003      	b.n	8007f68 <SBGC32_TX+0x16a>
		}

	/* Command was transmitted fine */
	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	721a      	strb	r2, [r3, #8]
 8007f66:	46b5      	mov	sp, r6
}
 8007f68:	3724      	adds	r7, #36	; 0x24
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08007f70 <SBGC32_RX>:
 *	@note	Private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void SBGC32_RX (sbgcGeneral_t *gSBGC)
{
 8007f70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007f74:	b089      	sub	sp, #36	; 0x24
 8007f76:	af00      	add	r7, sp, #0
 8007f78:	6078      	str	r0, [r7, #4]
	/* Parser initializing */
	static ui8 headBuff [3];  /* Header buffer:
	headBuff[0] is command ID || headBuff[1] is payload size || headBuff[2] is header checksum */

	ui8 startSymSample = (SBGC_PROTOCOL_VERSION - 1) ? SBGC_P2_START_CHARACTER : SBGC_P1_START_CHARACTER;
 8007f7a:	2324      	movs	r3, #36	; 0x24
 8007f7c:	777b      	strb	r3, [r7, #29]
		// Next - a command received OK

	}	parserState = STATE_IDLE;

	/* Start parse */
	switch (parserState)
 8007f7e:	4b94      	ldr	r3, [pc, #592]	; (80081d0 <SBGC32_RX+0x260>)
 8007f80:	781b      	ldrb	r3, [r3, #0]
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	d07b      	beq.n	800807e <SBGC32_RX+0x10e>
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	f300 811d 	bgt.w	80081c6 <SBGC32_RX+0x256>
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	dc02      	bgt.n	8007f96 <SBGC32_RX+0x26>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	da03      	bge.n	8007f9c <SBGC32_RX+0x2c>
 8007f94:	e117      	b.n	80081c6 <SBGC32_RX+0x256>
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	d02e      	beq.n	8007ff8 <SBGC32_RX+0x88>
 8007f9a:	e114      	b.n	80081c6 <SBGC32_RX+0x256>
	{
		/* Waiting start byte */
		case STATE_IDLE :
		case STATE_RESYNC :
		{
			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6812      	ldr	r2, [r2, #0]
 8007fa6:	6812      	ldr	r2, [r2, #0]
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4798      	blx	r3
 8007fac:	4603      	mov	r3, r0
 8007fae:	837b      	strh	r3, [r7, #26]

			if (availableBytes && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 8007fb0:	8b7b      	ldrh	r3, [r7, #26]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d018      	beq.n	8007fe8 <SBGC32_RX+0x78>
 8007fb6:	8b7b      	ldrh	r3, [r7, #26]
 8007fb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d013      	beq.n	8007fe8 <SBGC32_RX+0x78>
			{
				ui8 startSym = 0;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	737b      	strb	r3, [r7, #13]

				gSBGC->_ll->drvRx(gSBGC->_ll->drv, &startSym);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	6812      	ldr	r2, [r2, #0]
 8007fce:	6812      	ldr	r2, [r2, #0]
 8007fd0:	f107 010d 	add.w	r1, r7, #13
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	4798      	blx	r3

				if (startSym != startSymSample)
 8007fd8:	7b7b      	ldrb	r3, [r7, #13]
 8007fda:	7f7a      	ldrb	r2, [r7, #29]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d007      	beq.n	8007ff0 <SBGC32_RX+0x80>
				{
					gSBGC->_lastSerialCommandStatus = serialAPI_RX_EMPTY_BUFF_ERROR;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	721a      	strb	r2, [r3, #8]
 8007fe6:	e0ee      	b.n	80081c6 <SBGC32_RX+0x256>
				}
			}

			else
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_EMPTY_BUFF_ERROR;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2202      	movs	r2, #2
 8007fec:	721a      	strb	r2, [r3, #8]
				break;
 8007fee:	e0ea      	b.n	80081c6 <SBGC32_RX+0x256>
			{
 8007ff0:	bf00      	nop
			}

			parserState = STATE_CHECK_HEADER;
 8007ff2:	4b77      	ldr	r3, [pc, #476]	; (80081d0 <SBGC32_RX+0x260>)
 8007ff4:	2202      	movs	r2, #2
 8007ff6:	701a      	strb	r2, [r3, #0]
		}

		/* Waiting whole header */
		case STATE_CHECK_HEADER :
		{
			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	6812      	ldr	r2, [r2, #0]
 8008002:	6812      	ldr	r2, [r2, #0]
 8008004:	4610      	mov	r0, r2
 8008006:	4798      	blx	r3
 8008008:	4603      	mov	r3, r0
 800800a:	837b      	strh	r3, [r7, #26]

			if ((availableBytes >= 3) && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 800800c:	8b7b      	ldrh	r3, [r7, #26]
 800800e:	2b02      	cmp	r3, #2
 8008010:	d919      	bls.n	8008046 <SBGC32_RX+0xd6>
 8008012:	8b7b      	ldrh	r3, [r7, #26]
 8008014:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008018:	4293      	cmp	r3, r2
 800801a:	d014      	beq.n	8008046 <SBGC32_RX+0xd6>
				for (ui8 i = 0; i < 3; i++)
 800801c:	2300      	movs	r3, #0
 800801e:	77fb      	strb	r3, [r7, #31]
 8008020:	e00d      	b.n	800803e <SBGC32_RX+0xce>
					gSBGC->_ll->drvRx(gSBGC->_ll->drv, &headBuff[i]);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6812      	ldr	r2, [r2, #0]
 800802c:	6810      	ldr	r0, [r2, #0]
 800802e:	7ffa      	ldrb	r2, [r7, #31]
 8008030:	4968      	ldr	r1, [pc, #416]	; (80081d4 <SBGC32_RX+0x264>)
 8008032:	440a      	add	r2, r1
 8008034:	4611      	mov	r1, r2
 8008036:	4798      	blx	r3
				for (ui8 i = 0; i < 3; i++)
 8008038:	7ffb      	ldrb	r3, [r7, #31]
 800803a:	3301      	adds	r3, #1
 800803c:	77fb      	strb	r3, [r7, #31]
 800803e:	7ffb      	ldrb	r3, [r7, #31]
 8008040:	2b02      	cmp	r3, #2
 8008042:	d9ee      	bls.n	8008022 <SBGC32_RX+0xb2>
 8008044:	e003      	b.n	800804e <SBGC32_RX+0xde>

			else
			/* The parser could not read the next 3 header bytes. Try again in the next time */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_BUFFER_REALTIME_ERROR;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2203      	movs	r2, #3
 800804a:	721a      	strb	r2, [r3, #8]
				break;
 800804c:	e0bb      	b.n	80081c6 <SBGC32_RX+0x256>
			}

			if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 800804e:	4b61      	ldr	r3, [pc, #388]	; (80081d4 <SBGC32_RX+0x264>)
 8008050:	781a      	ldrb	r2, [r3, #0]
 8008052:	4b60      	ldr	r3, [pc, #384]	; (80081d4 <SBGC32_RX+0x264>)
 8008054:	785b      	ldrb	r3, [r3, #1]
 8008056:	4413      	add	r3, r2
 8008058:	b2da      	uxtb	r2, r3
 800805a:	4b5e      	ldr	r3, [pc, #376]	; (80081d4 <SBGC32_RX+0x264>)
 800805c:	789b      	ldrb	r3, [r3, #2]
 800805e:	429a      	cmp	r2, r3
 8008060:	d103      	bne.n	800806a <SBGC32_RX+0xfa>
				(headBuff[0] == 0))
 8008062:	4b5c      	ldr	r3, [pc, #368]	; (80081d4 <SBGC32_RX+0x264>)
 8008064:	781b      	ldrb	r3, [r3, #0]
			if (((headBuff[0] + headBuff[1]) % 256 != headBuff[2]) ||
 8008066:	2b00      	cmp	r3, #0
 8008068:	d106      	bne.n	8008078 <SBGC32_RX+0x108>
			/* The header checksum is wrong. Break this command and look forward for a new command */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_HEADER_CHECKSUM_ERROR;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2204      	movs	r2, #4
 800806e:	721a      	strb	r2, [r3, #8]
				parserState = STATE_RESYNC;
 8008070:	4b57      	ldr	r3, [pc, #348]	; (80081d0 <SBGC32_RX+0x260>)
 8008072:	2201      	movs	r2, #1
 8008074:	701a      	strb	r2, [r3, #0]
				break;
 8008076:	e0a6      	b.n	80081c6 <SBGC32_RX+0x256>
			}

			parserState = STATE_CHECK_PAYLOAD;
 8008078:	4b55      	ldr	r3, [pc, #340]	; (80081d0 <SBGC32_RX+0x260>)
 800807a:	2203      	movs	r2, #3
 800807c:	701a      	strb	r2, [r3, #0]
			/* Passing to the next state */
		}

		/* Waiting whole payload and checksum */
		case STATE_CHECK_PAYLOAD :
		{
 800807e:	466b      	mov	r3, sp
 8008080:	461e      	mov	r6, r3
			ui8 checksumSize = SBGC_PROTOCOL_VERSION;
 8008082:	2302      	movs	r3, #2
 8008084:	767b      	strb	r3, [r7, #25]
			ui8 complexBuff [sizeof(headBuff) + headBuff[1] + checksumSize];  // (Header + payloadSize + checksum) buffer
 8008086:	4b53      	ldr	r3, [pc, #332]	; (80081d4 <SBGC32_RX+0x264>)
 8008088:	785b      	ldrb	r3, [r3, #1]
 800808a:	461a      	mov	r2, r3
 800808c:	7e7b      	ldrb	r3, [r7, #25]
 800808e:	4413      	add	r3, r2
 8008090:	1cd9      	adds	r1, r3, #3
 8008092:	460b      	mov	r3, r1
 8008094:	3b01      	subs	r3, #1
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	2300      	movs	r3, #0
 800809a:	4688      	mov	r8, r1
 800809c:	4699      	mov	r9, r3
 800809e:	f04f 0200 	mov.w	r2, #0
 80080a2:	f04f 0300 	mov.w	r3, #0
 80080a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080b2:	2300      	movs	r3, #0
 80080b4:	460c      	mov	r4, r1
 80080b6:	461d      	mov	r5, r3
 80080b8:	f04f 0200 	mov.w	r2, #0
 80080bc:	f04f 0300 	mov.w	r3, #0
 80080c0:	00eb      	lsls	r3, r5, #3
 80080c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080c6:	00e2      	lsls	r2, r4, #3
 80080c8:	1dcb      	adds	r3, r1, #7
 80080ca:	08db      	lsrs	r3, r3, #3
 80080cc:	00db      	lsls	r3, r3, #3
 80080ce:	ebad 0d03 	sub.w	sp, sp, r3
 80080d2:	466b      	mov	r3, sp
 80080d4:	3300      	adds	r3, #0
 80080d6:	613b      	str	r3, [r7, #16]

			availableBytes = gSBGC->_ll->drvAvailableBytes(gSBGC->_ll->drv);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	691b      	ldr	r3, [r3, #16]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	6812      	ldr	r2, [r2, #0]
 80080e2:	6812      	ldr	r2, [r2, #0]
 80080e4:	4610      	mov	r0, r2
 80080e6:	4798      	blx	r3
 80080e8:	4603      	mov	r3, r0
 80080ea:	837b      	strh	r3, [r7, #26]

			if ((availableBytes >= headBuff[1] + checksumSize) && (availableBytes != SBGC_RX_BUFFER_OVERFLOW_FLAG))
 80080ec:	8b7a      	ldrh	r2, [r7, #26]
 80080ee:	4b39      	ldr	r3, [pc, #228]	; (80081d4 <SBGC32_RX+0x264>)
 80080f0:	785b      	ldrb	r3, [r3, #1]
 80080f2:	4619      	mov	r1, r3
 80080f4:	7e7b      	ldrb	r3, [r7, #25]
 80080f6:	440b      	add	r3, r1
 80080f8:	429a      	cmp	r2, r3
 80080fa:	db1f      	blt.n	800813c <SBGC32_RX+0x1cc>
 80080fc:	8b7b      	ldrh	r3, [r7, #26]
 80080fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008102:	4293      	cmp	r3, r2
 8008104:	d01a      	beq.n	800813c <SBGC32_RX+0x1cc>
				for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 8008106:	2300      	movs	r3, #0
 8008108:	77bb      	strb	r3, [r7, #30]
 800810a:	e00e      	b.n	800812a <SBGC32_RX+0x1ba>
					gSBGC->_ll->drvRx(gSBGC->_ll->drv, &complexBuff[i + 3]);  // Offset from header space
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	6812      	ldr	r2, [r2, #0]
 8008116:	6810      	ldr	r0, [r2, #0]
 8008118:	7fba      	ldrb	r2, [r7, #30]
 800811a:	3203      	adds	r2, #3
 800811c:	6939      	ldr	r1, [r7, #16]
 800811e:	440a      	add	r2, r1
 8008120:	4611      	mov	r1, r2
 8008122:	4798      	blx	r3
				for (ui8 i = 0; i < headBuff[1] + checksumSize; i++)
 8008124:	7fbb      	ldrb	r3, [r7, #30]
 8008126:	3301      	adds	r3, #1
 8008128:	77bb      	strb	r3, [r7, #30]
 800812a:	7fba      	ldrb	r2, [r7, #30]
 800812c:	4b29      	ldr	r3, [pc, #164]	; (80081d4 <SBGC32_RX+0x264>)
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	4619      	mov	r1, r3
 8008132:	7e7b      	ldrb	r3, [r7, #25]
 8008134:	440b      	add	r3, r1
 8008136:	429a      	cmp	r2, r3
 8008138:	dbe8      	blt.n	800810c <SBGC32_RX+0x19c>
 800813a:	e003      	b.n	8008144 <SBGC32_RX+0x1d4>

			else
			/* The parser could not read the next payload in the full volume. Try again in the next time */
			{
				gSBGC->_lastSerialCommandStatus = serialAPI_RX_BUFFER_REALTIME_ERROR;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2203      	movs	r2, #3
 8008140:	721a      	strb	r2, [r3, #8]
				break;
 8008142:	e03f      	b.n	80081c4 <SBGC32_RX+0x254>
				}
			}

			else  // V.2
			{
				memcpy(complexBuff, headBuff, 3);
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4a23      	ldr	r2, [pc, #140]	; (80081d4 <SBGC32_RX+0x264>)
 8008148:	8811      	ldrh	r1, [r2, #0]
 800814a:	7892      	ldrb	r2, [r2, #2]
 800814c:	8019      	strh	r1, [r3, #0]
 800814e:	709a      	strb	r2, [r3, #2]
				ui16 CRC_Res = SerialAPI_CRC16_Calculate(complexBuff, headBuff[1] + 3);
 8008150:	4b20      	ldr	r3, [pc, #128]	; (80081d4 <SBGC32_RX+0x264>)
 8008152:	785b      	ldrb	r3, [r3, #1]
 8008154:	b29b      	uxth	r3, r3
 8008156:	3303      	adds	r3, #3
 8008158:	b29b      	uxth	r3, r3
 800815a:	4619      	mov	r1, r3
 800815c:	6938      	ldr	r0, [r7, #16]
 800815e:	f7ff fe0d 	bl	8007d7c <SerialAPI_CRC16_Calculate>
 8008162:	4603      	mov	r3, r0
 8008164:	81fb      	strh	r3, [r7, #14]

				if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 8008166:	89fb      	ldrh	r3, [r7, #14]
 8008168:	b2db      	uxtb	r3, r3
 800816a:	4a1a      	ldr	r2, [pc, #104]	; (80081d4 <SBGC32_RX+0x264>)
 800816c:	7852      	ldrb	r2, [r2, #1]
 800816e:	3203      	adds	r2, #3
 8008170:	6939      	ldr	r1, [r7, #16]
 8008172:	5c8a      	ldrb	r2, [r1, r2]
 8008174:	4293      	cmp	r3, r2
 8008176:	d011      	beq.n	800819c <SBGC32_RX+0x22c>
				   (((CRC_Res >> 8) & 0x00FF) != complexBuff[3 + headBuff[1] + 1]))
 8008178:	89fb      	ldrh	r3, [r7, #14]
 800817a:	0a1b      	lsrs	r3, r3, #8
 800817c:	b29b      	uxth	r3, r3
 800817e:	b2db      	uxtb	r3, r3
 8008180:	4a14      	ldr	r2, [pc, #80]	; (80081d4 <SBGC32_RX+0x264>)
 8008182:	7852      	ldrb	r2, [r2, #1]
 8008184:	3204      	adds	r2, #4
 8008186:	6939      	ldr	r1, [r7, #16]
 8008188:	5c8a      	ldrb	r2, [r1, r2]
				if (((CRC_Res & 0x00FF) != complexBuff[3 + headBuff[1]]) &&
 800818a:	4293      	cmp	r3, r2
 800818c:	d006      	beq.n	800819c <SBGC32_RX+0x22c>
				/* The command came corrupted. Break it, look forward for a new command */
				{
					gSBGC->_lastSerialCommandStatus = serialAPI_RX_PAYLOAD_CHECKSUM_ERROR;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2205      	movs	r2, #5
 8008192:	721a      	strb	r2, [r3, #8]
					parserState = STATE_RESYNC;
 8008194:	4b0e      	ldr	r3, [pc, #56]	; (80081d0 <SBGC32_RX+0x260>)
 8008196:	2201      	movs	r2, #1
 8008198:	701a      	strb	r2, [r3, #0]
					break;
 800819a:	e013      	b.n	80081c4 <SBGC32_RX+0x254>
				}

			#endif

			/* Data passed all checks. Fill the new serialCommand struct */
			gSBGC->_api->saveCmd(gSBGC, (serialAPI_CommandID_t)headBuff[0], headBuff[1], &complexBuff[3]);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	685b      	ldr	r3, [r3, #4]
 80081a0:	f8d3 409c 	ldr.w	r4, [r3, #156]	; 0x9c
 80081a4:	4b0b      	ldr	r3, [pc, #44]	; (80081d4 <SBGC32_RX+0x264>)
 80081a6:	7819      	ldrb	r1, [r3, #0]
 80081a8:	4b0a      	ldr	r3, [pc, #40]	; (80081d4 <SBGC32_RX+0x264>)
 80081aa:	785a      	ldrb	r2, [r3, #1]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	3303      	adds	r3, #3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	47a0      	blx	r4

			/* Prepare parser for new reading */
			parserState = STATE_IDLE;
 80081b4:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <SBGC32_RX+0x260>)
 80081b6:	2200      	movs	r2, #0
 80081b8:	701a      	strb	r2, [r3, #0]

			gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	721a      	strb	r2, [r3, #8]
			return;
 80081c0:	46b5      	mov	sp, r6
 80081c2:	e000      	b.n	80081c6 <SBGC32_RX+0x256>
				break;
 80081c4:	46b5      	mov	sp, r6
		}
	}

	/* The command wasn't received. Exit */
}
 80081c6:	3724      	adds	r7, #36	; 0x24
 80081c8:	46bd      	mov	sp, r7
 80081ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081ce:	bf00      	nop
 80081d0:	20000604 	.word	0x20000604
 80081d4:	20000608 	.word	0x20000608

080081d8 <PrivateSerialAPI_LinkLowLayer>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkLowLayer (sbgcGeneral_t *gSBGC)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
	gSBGC->_ll->tx = SBGC32_TX;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	4a05      	ldr	r2, [pc, #20]	; (80081fc <PrivateSerialAPI_LinkLowLayer+0x24>)
 80081e6:	61da      	str	r2, [r3, #28]
	gSBGC->_ll->rx = SBGC32_RX;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a04      	ldr	r2, [pc, #16]	; (8008200 <PrivateSerialAPI_LinkLowLayer+0x28>)
 80081ee:	621a      	str	r2, [r3, #32]
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	08007dff 	.word	0x08007dff
 8008200:	08007f71 	.word	0x08007f71

08008204 <SerialAPI_DeleteSentCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to command
 */
static void SerialAPI_DeleteSentCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
	if (serialCommand->_payloadSize == 0)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	7f1b      	ldrb	r3, [r3, #28]
 8008212:	2b00      	cmp	r3, #0
 8008214:	f000 8085 	beq.w	8008322 <SerialAPI_DeleteSentCommand+0x11e>
		return;

	ui16 buffPointer = (ui16)(serialCommand->_payload - gSBGC->_api->txCommandBuff);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	6a1a      	ldr	r2, [r3, #32]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	81bb      	strh	r3, [r7, #12]
	ui16 shiftSize = calcFreeSpaceFIFO(gSBGC->_api->txCommandBuffHead, buffPointer, SBGC_TX_BUFF_TOTAL_SIZE);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800822e:	b29b      	uxth	r3, r3
 8008230:	89ba      	ldrh	r2, [r7, #12]
 8008232:	429a      	cmp	r2, r3
 8008234:	d30b      	bcc.n	800824e <SerialAPI_DeleteSentCommand+0x4a>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800823e:	b29a      	uxth	r2, r3
 8008240:	89bb      	ldrh	r3, [r7, #12]
 8008242:	1ad3      	subs	r3, r2, r3
 8008244:	b29b      	uxth	r3, r3
 8008246:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800824a:	b29b      	uxth	r3, r3
 800824c:	e007      	b.n	800825e <SerialAPI_DeleteSentCommand+0x5a>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008256:	b29a      	uxth	r2, r3
 8008258:	89bb      	ldrh	r3, [r7, #12]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	b29b      	uxth	r3, r3
 800825e:	817b      	strh	r3, [r7, #10]
	shiftSize = (shiftSize == SBGC_TX_BUFF_TOTAL_SIZE) ? 0 : shiftSize;
 8008260:	897b      	ldrh	r3, [r7, #10]
 8008262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008266:	d001      	beq.n	800826c <SerialAPI_DeleteSentCommand+0x68>
 8008268:	897b      	ldrh	r3, [r7, #10]
 800826a:	e000      	b.n	800826e <SerialAPI_DeleteSentCommand+0x6a>
 800826c:	2300      	movs	r3, #0
 800826e:	817b      	strh	r3, [r7, #10]

	if (buffPointer != gSBGC->_api->txCommandBuffTail)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008278:	b29b      	uxth	r3, r3
 800827a:	89ba      	ldrh	r2, [r7, #12]
 800827c:	429a      	cmp	r2, r3
 800827e:	d043      	beq.n	8008308 <SerialAPI_DeleteSentCommand+0x104>
	/* This command isn't first */
	{
		if (((buffPointer + serialCommand->_payloadSize) & SBGC_TX_BUFF_SIZE_MASK) == gSBGC->_api->txCommandBuffHead)
 8008280:	89bb      	ldrh	r3, [r7, #12]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	7f12      	ldrb	r2, [r2, #28]
 8008286:	4413      	add	r3, r2
 8008288:	b2db      	uxtb	r3, r3
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	6852      	ldr	r2, [r2, #4]
 800828e:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8008292:	4293      	cmp	r3, r2
 8008294:	d10c      	bne.n	80082b0 <SerialAPI_DeleteSentCommand+0xac>
		/* This command is latest */
		{
			gSBGC->_api->txCommandBuffHead -= serialCommand->_payloadSize;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	7f1a      	ldrb	r2, [r3, #28]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	1a8a      	subs	r2, r1, r2
 80082a8:	b2d2      	uxtb	r2, r2
 80082aa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			return;
 80082ae:	e039      	b.n	8008324 <SerialAPI_DeleteSentCommand+0x120>
		}

		/* This command is between other commands */
		for (ui16 i = 0; i < shiftSize; i++)
 80082b0:	2300      	movs	r3, #0
 80082b2:	81fb      	strh	r3, [r7, #14]
 80082b4:	e017      	b.n	80082e6 <SerialAPI_DeleteSentCommand+0xe2>
		/* Shifting */
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
					gSBGC->_api->txCommandBuff[((buffPointer + serialCommand->_payloadSize + i) & SBGC_TX_BUFF_SIZE_MASK)];
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082bc:	89bb      	ldrh	r3, [r7, #12]
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	7f09      	ldrb	r1, [r1, #28]
 80082c2:	4419      	add	r1, r3
 80082c4:	89fb      	ldrh	r3, [r7, #14]
 80082c6:	440b      	add	r3, r1
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	441a      	add	r2, r3
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80082d2:	89b8      	ldrh	r0, [r7, #12]
 80082d4:	89fb      	ldrh	r3, [r7, #14]
 80082d6:	4403      	add	r3, r0
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	440b      	add	r3, r1
					gSBGC->_api->txCommandBuff[((buffPointer + serialCommand->_payloadSize + i) & SBGC_TX_BUFF_SIZE_MASK)];
 80082dc:	7812      	ldrb	r2, [r2, #0]
			gSBGC->_api->txCommandBuff[((buffPointer + i) & SBGC_TX_BUFF_SIZE_MASK)] =
 80082de:	701a      	strb	r2, [r3, #0]
		for (ui16 i = 0; i < shiftSize; i++)
 80082e0:	89fb      	ldrh	r3, [r7, #14]
 80082e2:	3301      	adds	r3, #1
 80082e4:	81fb      	strh	r3, [r7, #14]
 80082e6:	89fa      	ldrh	r2, [r7, #14]
 80082e8:	897b      	ldrh	r3, [r7, #10]
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d3e3      	bcc.n	80082b6 <SerialAPI_DeleteSentCommand+0xb2>

		/* Shift head after buffer shifting */
		gSBGC->_api->txCommandBuffHead -= serialCommand->_payloadSize;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f893 102d 	ldrb.w	r1, [r3, #45]	; 0x2d
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	7f1a      	ldrb	r2, [r3, #28]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	1a8a      	subs	r2, r1, r2
 8008300:	b2d2      	uxtb	r2, r2
 8008302:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 8008306:	e00d      	b.n	8008324 <SerialAPI_DeleteSentCommand+0x120>
	}

	else
	/* This command is first */
		gSBGC->_api->txCommandBuffTail += serialCommand->_payloadSize;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	7f1a      	ldrb	r2, [r3, #28]
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	440a      	add	r2, r1
 800831a:	b2d2      	uxtb	r2, r2
 800831c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008320:	e000      	b.n	8008324 <SerialAPI_DeleteSentCommand+0x120>
		return;
 8008322:	bf00      	nop
}
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr

0800832e <SerialAPI_SaveReceivedCommand>:
 *	@param	cmdID - ID part of serial command
 *	@param	payloadSize - size part of serial command
 *	@param	*payload - pointer to payload part of serial command
 */
static void SerialAPI_SaveReceivedCommand (sbgcGeneral_t *gSBGC, serialAPI_CommandID_t cmdID, ui8 payloadSize, ui8 const *payload)
{
 800832e:	b490      	push	{r4, r7}
 8008330:	b086      	sub	sp, #24
 8008332:	af00      	add	r7, sp, #0
 8008334:	60f8      	str	r0, [r7, #12]
 8008336:	607b      	str	r3, [r7, #4]
 8008338:	460b      	mov	r3, r1
 800833a:	72fb      	strb	r3, [r7, #11]
 800833c:	4613      	mov	r3, r2
 800833e:	72bb      	strb	r3, [r7, #10]
	if ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)) &&
 8008340:	7abb      	ldrb	r3, [r7, #10]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008354:	4299      	cmp	r1, r3
 8008356:	d30c      	bcc.n	8008372 <SerialAPI_SaveReceivedCommand+0x44>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008360:	4619      	mov	r1, r3
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800836a:	1acb      	subs	r3, r1, r3
 800836c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008370:	e009      	b.n	8008386 <SerialAPI_SaveReceivedCommand+0x58>
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800837a:	4619      	mov	r1, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	685b      	ldr	r3, [r3, #4]
 8008380:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008384:	1acb      	subs	r3, r1, r3
 8008386:	4293      	cmp	r3, r2
 8008388:	dc4e      	bgt.n	8008428 <SerialAPI_SaveReceivedCommand+0xfa>
		(gSBGC->_api->rxCommandBuffHead != gSBGC->_api->rxCommandBuffTail))
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
	if ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)) &&
 800839a:	429a      	cmp	r2, r3
 800839c:	d044      	beq.n	8008428 <SerialAPI_SaveReceivedCommand+0xfa>
			return;

		#else

			/* It's necessary to clean the space for a new serial command */
			while ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)))
 800839e:	e016      	b.n	80083ce <SerialAPI_SaveReceivedCommand+0xa0>
				gSBGC->_api->rxCommandBuffTail += gSBGC->_api->rxCommandBuff[(gSBGC->_api->rxCommandBuffTail + 1) & SBGC_RX_BUFF_SIZE_MASK] + 2;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	685b      	ldr	r3, [r3, #4]
 80083ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083b6:	3301      	adds	r3, #1
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	440b      	add	r3, r1
 80083bc:	781b      	ldrb	r3, [r3, #0]
 80083be:	4413      	add	r3, r2
 80083c0:	b2da      	uxtb	r2, r3
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	3202      	adds	r2, #2
 80083c8:	b2d2      	uxtb	r2, r2
 80083ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
			while ((calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffTail, gSBGC->_api->rxCommandBuffHead, SBGC_RX_BUFF_TOTAL_SIZE) < (payloadSize + 2)))
 80083ce:	7abb      	ldrb	r3, [r7, #10]
 80083d0:	1c5a      	adds	r2, r3, #1
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083e2:	4299      	cmp	r1, r3
 80083e4:	d30c      	bcc.n	8008400 <SerialAPI_SaveReceivedCommand+0xd2>
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083ee:	4619      	mov	r1, r3
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083f8:	1acb      	subs	r3, r1, r3
 80083fa:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80083fe:	e009      	b.n	8008414 <SerialAPI_SaveReceivedCommand+0xe6>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008408:	4619      	mov	r1, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008412:	1acb      	subs	r3, r1, r3
 8008414:	4293      	cmp	r3, r2
 8008416:	ddc3      	ble.n	80083a0 <SerialAPI_SaveReceivedCommand+0x72>

			gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	685a      	ldr	r2, [r3, #4]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008424:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

		#endif
	}

	gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = cmdID;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008436:	1c50      	adds	r0, r2, #1
 8008438:	b2c0      	uxtb	r0, r0
 800843a:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
 800843e:	4613      	mov	r3, r2
 8008440:	440b      	add	r3, r1
 8008442:	7afa      	ldrb	r2, [r7, #11]
 8008444:	701a      	strb	r2, [r3, #0]
	gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = payloadSize;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8008454:	1c50      	adds	r0, r2, #1
 8008456:	b2c0      	uxtb	r0, r0
 8008458:	f883 0035 	strb.w	r0, [r3, #53]	; 0x35
 800845c:	4613      	mov	r3, r2
 800845e:	440b      	add	r3, r1
 8008460:	7aba      	ldrb	r2, [r7, #10]
 8008462:	701a      	strb	r2, [r3, #0]

	for (ui16 i = 0; i < payloadSize; i++)
 8008464:	2300      	movs	r3, #0
 8008466:	82fb      	strh	r3, [r7, #22]
 8008468:	e014      	b.n	8008494 <SerialAPI_SaveReceivedCommand+0x166>
		gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffHead++] = payload[i];
 800846a:	8afb      	ldrh	r3, [r7, #22]
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	18d1      	adds	r1, r2, r3
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800847e:	1c54      	adds	r4, r2, #1
 8008480:	b2e4      	uxtb	r4, r4
 8008482:	f883 4035 	strb.w	r4, [r3, #53]	; 0x35
 8008486:	4613      	mov	r3, r2
 8008488:	4403      	add	r3, r0
 800848a:	780a      	ldrb	r2, [r1, #0]
 800848c:	701a      	strb	r2, [r3, #0]
	for (ui16 i = 0; i < payloadSize; i++)
 800848e:	8afb      	ldrh	r3, [r7, #22]
 8008490:	3301      	adds	r3, #1
 8008492:	82fb      	strh	r3, [r7, #22]
 8008494:	7abb      	ldrb	r3, [r7, #10]
 8008496:	b29b      	uxth	r3, r3
 8008498:	8afa      	ldrh	r2, [r7, #22]
 800849a:	429a      	cmp	r2, r3
 800849c:	d3e5      	bcc.n	800846a <SerialAPI_SaveReceivedCommand+0x13c>
}
 800849e:	bf00      	nop
 80084a0:	bf00      	nop
 80084a2:	3718      	adds	r7, #24
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bc90      	pop	{r4, r7}
 80084a8:	4770      	bx	lr

080084aa <SerialAPI_ReadReceivedCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to command
 */
static ui8 SerialAPI_ReadReceivedCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 80084aa:	b480      	push	{r7}
 80084ac:	b085      	sub	sp, #20
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
 80084b2:	6039      	str	r1, [r7, #0]
	serialCommand->_commandID = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP++];
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80084c2:	1c50      	adds	r0, r2, #1
 80084c4:	b2c0      	uxtb	r0, r0
 80084c6:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
 80084ca:	4613      	mov	r3, r2
 80084cc:	440b      	add	r3, r1
 80084ce:	781a      	ldrb	r2, [r3, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	76da      	strb	r2, [r3, #27]

	ui8 payloadSize = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP++];
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80084e2:	1c50      	adds	r0, r2, #1
 80084e4:	b2c0      	uxtb	r0, r0
 80084e6:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
 80084ea:	4613      	mov	r3, r2
 80084ec:	440b      	add	r3, r1
 80084ee:	781b      	ldrb	r3, [r3, #0]
 80084f0:	73fb      	strb	r3, [r7, #15]

	serialCommand->_payload = &gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP];
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f8:	687a      	ldr	r2, [r7, #4]
 80084fa:	6852      	ldr	r2, [r2, #4]
 80084fc:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8008500:	441a      	add	r2, r3
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	621a      	str	r2, [r3, #32]
	gSBGC->_api->rxCommandBuffCurP += payloadSize;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	7bfa      	ldrb	r2, [r7, #15]
 8008514:	440a      	add	r2, r1
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	return payloadSize;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <SerialAPI_DeleteReceivedCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*payload - pointer to command's payload
 */
static void SerialAPI_DeleteReceivedCommand (sbgcGeneral_t *gSBGC, ui8 const *payload)
{
 800852a:	b480      	push	{r7}
 800852c:	b085      	sub	sp, #20
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]
	if (payload == NULL)
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	f000 80ab 	beq.w	8008692 <SerialAPI_DeleteReceivedCommand+0x168>
		return;

	/* Note: gSBGC->_api->rxCommandBuffCurP aren't available to read here */

	ui16 buffPointer = (((((uintptr_t)payload) - 2) & SBGC_RX_BUFF_SIZE_MASK) - (uintptr_t)gSBGC->_api->rxCommandBuff) & SBGC_RX_BUFF_SIZE_MASK;
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	6852      	ldr	r2, [r2, #4]
 8008542:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008544:	1a9b      	subs	r3, r3, r2
 8008546:	b29b      	uxth	r3, r3
 8008548:	3b02      	subs	r3, #2
 800854a:	b29b      	uxth	r3, r3
 800854c:	b2db      	uxtb	r3, r3
 800854e:	81bb      	strh	r3, [r7, #12]
	ui8 cmdSize = gSBGC->_api->rxCommandBuff[((buffPointer + 1) & SBGC_RX_BUFF_SIZE_MASK)] + 2;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	685b      	ldr	r3, [r3, #4]
 8008554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008556:	89bb      	ldrh	r3, [r7, #12]
 8008558:	3301      	adds	r3, #1
 800855a:	b2db      	uxtb	r3, r3
 800855c:	4413      	add	r3, r2
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	3302      	adds	r3, #2
 8008562:	72fb      	strb	r3, [r7, #11]
	ui16 shiftSize = calcFreeSpaceFIFO(gSBGC->_api->rxCommandBuffHead, (buffPointer + cmdSize) & SBGC_RX_BUFF_SIZE_MASK,
 8008564:	89ba      	ldrh	r2, [r7, #12]
 8008566:	7afb      	ldrb	r3, [r7, #11]
 8008568:	4413      	add	r3, r2
 800856a:	b2db      	uxtb	r3, r3
 800856c:	687a      	ldr	r2, [r7, #4]
 800856e:	6852      	ldr	r2, [r2, #4]
 8008570:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8008574:	4293      	cmp	r3, r2
 8008576:	db11      	blt.n	800859c <SerialAPI_DeleteReceivedCommand+0x72>
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008580:	b29a      	uxth	r2, r3
 8008582:	7afb      	ldrb	r3, [r7, #11]
 8008584:	b299      	uxth	r1, r3
 8008586:	89bb      	ldrh	r3, [r7, #12]
 8008588:	440b      	add	r3, r1
 800858a:	b29b      	uxth	r3, r3
 800858c:	b2db      	uxtb	r3, r3
 800858e:	b29b      	uxth	r3, r3
 8008590:	1ad3      	subs	r3, r2, r3
 8008592:	b29b      	uxth	r3, r3
 8008594:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008598:	b29b      	uxth	r3, r3
 800859a:	e00d      	b.n	80085b8 <SerialAPI_DeleteReceivedCommand+0x8e>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	7afb      	ldrb	r3, [r7, #11]
 80085a8:	b299      	uxth	r1, r3
 80085aa:	89bb      	ldrh	r3, [r7, #12]
 80085ac:	440b      	add	r3, r1
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	813b      	strh	r3, [r7, #8]
									   SBGC_RX_BUFF_TOTAL_SIZE);
	shiftSize = (shiftSize == SBGC_RX_BUFF_TOTAL_SIZE) ? 0 : shiftSize;
 80085ba:	893b      	ldrh	r3, [r7, #8]
 80085bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c0:	d001      	beq.n	80085c6 <SerialAPI_DeleteReceivedCommand+0x9c>
 80085c2:	893b      	ldrh	r3, [r7, #8]
 80085c4:	e000      	b.n	80085c8 <SerialAPI_DeleteReceivedCommand+0x9e>
 80085c6:	2300      	movs	r3, #0
 80085c8:	813b      	strh	r3, [r7, #8]

	if (buffPointer != gSBGC->_api->rxCommandBuffTail)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085d2:	b29b      	uxth	r3, r3
 80085d4:	89ba      	ldrh	r2, [r7, #12]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d047      	beq.n	800866a <SerialAPI_DeleteReceivedCommand+0x140>
	/* This command isn't first */
	{
		if (((buffPointer + cmdSize) & SBGC_RX_BUFF_SIZE_MASK) == gSBGC->_api->rxCommandBuffHead)
 80085da:	89ba      	ldrh	r2, [r7, #12]
 80085dc:	7afb      	ldrb	r3, [r7, #11]
 80085de:	4413      	add	r3, r2
 80085e0:	b2db      	uxtb	r3, r3
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	6852      	ldr	r2, [r2, #4]
 80085e6:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 80085ea:	4293      	cmp	r3, r2
 80085ec:	d113      	bne.n	8008616 <SerialAPI_DeleteReceivedCommand+0xec>
		/* This command is latest */
		{
			gSBGC->_api->rxCommandBuffHead -= cmdSize;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	7afa      	ldrb	r2, [r7, #11]
 80085fc:	1a8a      	subs	r2, r1, r2
 80085fe:	b2d2      	uxtb	r2, r2
 8008600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

			/* Prepare the parser for next reading */
			gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685a      	ldr	r2, [r3, #4]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008610:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
			return;
 8008614:	e03e      	b.n	8008694 <SerialAPI_DeleteReceivedCommand+0x16a>
		}

		/* This command is between other commands */
		for (ui16 i = 0; i < shiftSize; i++)
 8008616:	2300      	movs	r3, #0
 8008618:	81fb      	strh	r3, [r7, #14]
 800861a:	e016      	b.n	800864a <SerialAPI_DeleteReceivedCommand+0x120>
		/* Shifting */
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
					gSBGC->_api->rxCommandBuff[((buffPointer + cmdSize + i) & SBGC_RX_BUFF_SIZE_MASK)];
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008622:	89b9      	ldrh	r1, [r7, #12]
 8008624:	7afb      	ldrb	r3, [r7, #11]
 8008626:	4419      	add	r1, r3
 8008628:	89fb      	ldrh	r3, [r7, #14]
 800862a:	440b      	add	r3, r1
 800862c:	b2db      	uxtb	r3, r3
 800862e:	441a      	add	r2, r3
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008636:	89b8      	ldrh	r0, [r7, #12]
 8008638:	89fb      	ldrh	r3, [r7, #14]
 800863a:	4403      	add	r3, r0
 800863c:	b2db      	uxtb	r3, r3
 800863e:	440b      	add	r3, r1
					gSBGC->_api->rxCommandBuff[((buffPointer + cmdSize + i) & SBGC_RX_BUFF_SIZE_MASK)];
 8008640:	7812      	ldrb	r2, [r2, #0]
			gSBGC->_api->rxCommandBuff[((buffPointer + i) & SBGC_RX_BUFF_SIZE_MASK)] =
 8008642:	701a      	strb	r2, [r3, #0]
		for (ui16 i = 0; i < shiftSize; i++)
 8008644:	89fb      	ldrh	r3, [r7, #14]
 8008646:	3301      	adds	r3, #1
 8008648:	81fb      	strh	r3, [r7, #14]
 800864a:	89fa      	ldrh	r2, [r7, #14]
 800864c:	893b      	ldrh	r3, [r7, #8]
 800864e:	429a      	cmp	r2, r3
 8008650:	d3e4      	bcc.n	800861c <SerialAPI_DeleteReceivedCommand+0xf2>

		/* Shift head after buffer shifting */
		gSBGC->_api->rxCommandBuffHead -= cmdSize;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	f893 1035 	ldrb.w	r1, [r3, #53]	; 0x35
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	7afa      	ldrb	r2, [r7, #11]
 8008660:	1a8a      	subs	r2, r1, r2
 8008662:	b2d2      	uxtb	r2, r2
 8008664:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8008668:	e00a      	b.n	8008680 <SerialAPI_DeleteReceivedCommand+0x156>
	}

	else
	/* This command is first */
		gSBGC->_api->rxCommandBuffTail += cmdSize;  // Shift head pointer
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f893 1034 	ldrb.w	r1, [r3, #52]	; 0x34
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	7afa      	ldrb	r2, [r7, #11]
 8008678:	440a      	add	r2, r1
 800867a:	b2d2      	uxtb	r2, r2
 800867c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	/* Prepare the parser for next reading */
	gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685a      	ldr	r2, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800868c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8008690:	e000      	b.n	8008694 <SerialAPI_DeleteReceivedCommand+0x16a>
		return;
 8008692:	bf00      	nop
}
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <SerialAPI_DeleteCommand>:
 *
 *	@param	*gSBGC - serial connection descriptor
 *	@param	index - command sequence number
 */
static void SerialAPI_DeleteCommand (sbgcGeneral_t *gSBGC, ui8 index)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
	if ((index >= gSBGC->_api->commandNumber) || (gSBGC->_api->commandNumber == 0))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	7f1b      	ldrb	r3, [r3, #28]
 80086b0:	78fa      	ldrb	r2, [r7, #3]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d27e      	bcs.n	80087b4 <SerialAPI_DeleteCommand+0x116>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	685b      	ldr	r3, [r3, #4]
 80086ba:	7f1b      	ldrb	r3, [r3, #28]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d079      	beq.n	80087b4 <SerialAPI_DeleteCommand+0x116>
		return;

	if (gSBGC->_api->commandBuff[index]._state != SCState_FORMING)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	6999      	ldr	r1, [r3, #24]
 80086c6:	78fa      	ldrb	r2, [r7, #3]
 80086c8:	4613      	mov	r3, r2
 80086ca:	00db      	lsls	r3, r3, #3
 80086cc:	4413      	add	r3, r2
 80086ce:	009b      	lsls	r3, r3, #2
 80086d0:	440b      	add	r3, r1
 80086d2:	7e9b      	ldrb	r3, [r3, #26]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d03c      	beq.n	8008752 <SerialAPI_DeleteCommand+0xb4>
	/* A command was in runtime */
	{
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 80086d8:	2300      	movs	r3, #0
 80086da:	60fb      	str	r3, [r7, #12]
 80086dc:	e01e      	b.n	800871c <SerialAPI_DeleteCommand+0x7e>
			memcpy(&gSBGC->_api->commandBuff[index + i], &gSBGC->_api->commandBuff[index + i + 1], sizeof(serialAPI_Command_t));
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	699a      	ldr	r2, [r3, #24]
 80086e4:	78f9      	ldrb	r1, [r7, #3]
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	440b      	add	r3, r1
 80086ea:	4619      	mov	r1, r3
 80086ec:	460b      	mov	r3, r1
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	440b      	add	r3, r1
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	18d0      	adds	r0, r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
 80086fa:	6999      	ldr	r1, [r3, #24]
 80086fc:	78fa      	ldrb	r2, [r7, #3]
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	4613      	mov	r3, r2
 8008706:	00db      	lsls	r3, r3, #3
 8008708:	4413      	add	r3, r2
 800870a:	009b      	lsls	r3, r3, #2
 800870c:	440b      	add	r3, r1
 800870e:	2224      	movs	r2, #36	; 0x24
 8008710:	4619      	mov	r1, r3
 8008712:	f002 fb40 	bl	800ad96 <memcpy>
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	3301      	adds	r3, #1
 800871a:	60fb      	str	r3, [r7, #12]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	7f1b      	ldrb	r3, [r3, #28]
 8008722:	461a      	mov	r2, r3
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	1ad3      	subs	r3, r2, r3
 8008728:	3b01      	subs	r3, #1
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	429a      	cmp	r2, r3
 800872e:	dbd6      	blt.n	80086de <SerialAPI_DeleteCommand+0x40>

		gSBGC->_api->commandNumber--;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	7f1a      	ldrb	r2, [r3, #28]
 8008736:	3a01      	subs	r2, #1
 8008738:	b2d2      	uxtb	r2, r2
 800873a:	771a      	strb	r2, [r3, #28]
		gSBGC->_api->commandNumber = constrain_(gSBGC->_api->commandNumber, 0, SBGC_MAX_COMMAND_NUM);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	7f1a      	ldrb	r2, [r3, #28]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	2a01      	cmp	r2, #1
 8008748:	bf28      	it	cs
 800874a:	2201      	movcs	r2, #1
 800874c:	b2d2      	uxtb	r2, r2
 800874e:	771a      	strb	r2, [r3, #28]
 8008750:	e02b      	b.n	80087aa <SerialAPI_DeleteCommand+0x10c>
	}

	else
	/* A command cannot continue to exist cause a daughter command doesn't fit to the command buffer */
	{
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8008752:	2300      	movs	r3, #0
 8008754:	60bb      	str	r3, [r7, #8]
 8008756:	e01e      	b.n	8008796 <SerialAPI_DeleteCommand+0xf8>
			memcpy(&gSBGC->_api->commandBuff[index + i], &gSBGC->_api->commandBuff[index + i + 1], sizeof(serialAPI_Command_t));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	685b      	ldr	r3, [r3, #4]
 800875c:	699a      	ldr	r2, [r3, #24]
 800875e:	78f9      	ldrb	r1, [r7, #3]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	440b      	add	r3, r1
 8008764:	4619      	mov	r1, r3
 8008766:	460b      	mov	r3, r1
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	440b      	add	r3, r1
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	18d0      	adds	r0, r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	6999      	ldr	r1, [r3, #24]
 8008776:	78fa      	ldrb	r2, [r7, #3]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4413      	add	r3, r2
 800877c:	1c5a      	adds	r2, r3, #1
 800877e:	4613      	mov	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	4413      	add	r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	2224      	movs	r2, #36	; 0x24
 800878a:	4619      	mov	r1, r3
 800878c:	f002 fb03 	bl	800ad96 <memcpy>
		for (int i = 0; i < (gSBGC->_api->commandNumber - index - 1); i++)
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3301      	adds	r3, #1
 8008794:	60bb      	str	r3, [r7, #8]
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	7f1b      	ldrb	r3, [r3, #28]
 800879c:	461a      	mov	r2, r3
 800879e:	78fb      	ldrb	r3, [r7, #3]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	3b01      	subs	r3, #1
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	dbd6      	blt.n	8008758 <SerialAPI_DeleteCommand+0xba>
	}

	serialAPI_CurCmd_ = NULL;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	625a      	str	r2, [r3, #36]	; 0x24
 80087b2:	e000      	b.n	80087b6 <SerialAPI_DeleteCommand+0x118>
		return;
 80087b4:	bf00      	nop
}
 80087b6:	3710      	adds	r7, #16
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <SerialAPI_FindCommandByID>:
 *	@param	ID - serialAPI_Command_t.ID
 *
 *	@return Pointer to found serial command
 */
static serialAPI_Command_t *SerialAPI_FindCommandByID (sbgcGeneral_t *gSBGC, ui32 ID)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
	for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 80087c6:	2300      	movs	r3, #0
 80087c8:	73fb      	strb	r3, [r7, #15]
 80087ca:	e019      	b.n	8008800 <SerialAPI_FindCommandByID+0x44>
		if (gSBGC->_api->commandBuff[i]._id == ID)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	6999      	ldr	r1, [r3, #24]
 80087d2:	7bfa      	ldrb	r2, [r7, #15]
 80087d4:	4613      	mov	r3, r2
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	440b      	add	r3, r1
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d109      	bne.n	80087fa <SerialAPI_FindCommandByID+0x3e>
			return &gSBGC->_api->commandBuff[i];
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	6999      	ldr	r1, [r3, #24]
 80087ec:	7bfa      	ldrb	r2, [r7, #15]
 80087ee:	4613      	mov	r3, r2
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	4413      	add	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	440b      	add	r3, r1
 80087f8:	e009      	b.n	800880e <SerialAPI_FindCommandByID+0x52>
	for (ui8 i = 0; i < gSBGC->_api->commandNumber; i++)
 80087fa:	7bfb      	ldrb	r3, [r7, #15]
 80087fc:	3301      	adds	r3, #1
 80087fe:	73fb      	strb	r3, [r7, #15]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	7f1b      	ldrb	r3, [r3, #28]
 8008806:	7bfa      	ldrb	r2, [r7, #15]
 8008808:	429a      	cmp	r2, r3
 800880a:	d3df      	bcc.n	80087cc <SerialAPI_FindCommandByID+0x10>

	return NULL;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3714      	adds	r7, #20
 8008812:	46bd      	mov	sp, r7
 8008814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008818:	4770      	bx	lr

0800881a <SerialAPI_DetermineAdjVarsNumber>:
	 *	@note	Private function
	 *
	 *	@param	*gSBGC - serial connection descriptor
	 */
	static void SerialAPI_DetermineAdjVarsNumber (sbgcGeneral_t *gSBGC)
	{
 800881a:	b480      	push	{r7}
 800881c:	b083      	sub	sp, #12
 800881e:	af00      	add	r7, sp, #0
 8008820:	6078      	str	r0, [r7, #4]
		if (gSBGC->_api->baseFirmwareVersion < 2687) gSBGC->_api->adjVarsNumber = 50;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	685b      	ldr	r3, [r3, #4]
 8008826:	889b      	ldrh	r3, [r3, #4]
 8008828:	f640 227e 	movw	r2, #2686	; 0xa7e
 800882c:	4293      	cmp	r3, r2
 800882e:	d803      	bhi.n	8008838 <SerialAPI_DetermineAdjVarsNumber+0x1e>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	2232      	movs	r2, #50	; 0x32
 8008836:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2688) gSBGC->_api->adjVarsNumber = 51;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	889b      	ldrh	r3, [r3, #4]
 800883e:	f5b3 6f28 	cmp.w	r3, #2688	; 0xa80
 8008842:	d203      	bcs.n	800884c <SerialAPI_DetermineAdjVarsNumber+0x32>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	2233      	movs	r2, #51	; 0x33
 800884a:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2689) gSBGC->_api->adjVarsNumber = 57;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	685b      	ldr	r3, [r3, #4]
 8008850:	889b      	ldrh	r3, [r3, #4]
 8008852:	f5b3 6f28 	cmp.w	r3, #2688	; 0xa80
 8008856:	d803      	bhi.n	8008860 <SerialAPI_DetermineAdjVarsNumber+0x46>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	2239      	movs	r2, #57	; 0x39
 800885e:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2693) gSBGC->_api->adjVarsNumber = 61;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	889b      	ldrh	r3, [r3, #4]
 8008866:	f640 2284 	movw	r2, #2692	; 0xa84
 800886a:	4293      	cmp	r3, r2
 800886c:	d803      	bhi.n	8008876 <SerialAPI_DetermineAdjVarsNumber+0x5c>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	685b      	ldr	r3, [r3, #4]
 8008872:	223d      	movs	r2, #61	; 0x3d
 8008874:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2704) gSBGC->_api->adjVarsNumber = 65;
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	889b      	ldrh	r3, [r3, #4]
 800887c:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8008880:	d203      	bcs.n	800888a <SerialAPI_DetermineAdjVarsNumber+0x70>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	2241      	movs	r2, #65	; 0x41
 8008888:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2720) gSBGC->_api->adjVarsNumber = 66;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	889b      	ldrh	r3, [r3, #4]
 8008890:	f5b3 6f2a 	cmp.w	r3, #2720	; 0xaa0
 8008894:	d203      	bcs.n	800889e <SerialAPI_DetermineAdjVarsNumber+0x84>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2242      	movs	r2, #66	; 0x42
 800889c:	741a      	strb	r2, [r3, #16]
		if (gSBGC->_api->baseFirmwareVersion < 2730) gSBGC->_api->adjVarsNumber = 76;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	889b      	ldrh	r3, [r3, #4]
 80088a4:	f640 22a9 	movw	r2, #2729	; 0xaa9
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d803      	bhi.n	80088b4 <SerialAPI_DetermineAdjVarsNumber+0x9a>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	224c      	movs	r2, #76	; 0x4c
 80088b2:	741a      	strb	r2, [r3, #16]
	}
 80088b4:	bf00      	nop
 80088b6:	370c      	adds	r7, #12
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <SBGC32_SendCommand>:
 *	@param	*gSBGC - serial connection descriptor
 *	@param	*serialCommand - pointer to completed structure
 *			ready to be transmitted
 */
static void SBGC32_SendCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
	#if (SBGC_USES_BLOCKING_MODE)

		serialCommand->_state = SCState_PROCESSING;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	2203      	movs	r2, #3
 80088ce:	769a      	strb	r2, [r3, #26]
		serialCommand->timeout = SBGC_DEFAULT_TIMEOUT;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	2264      	movs	r2, #100	; 0x64
 80088d4:	605a      	str	r2, [r3, #4]

		/* Transmit */
		gSBGC->_ll->tx(gSBGC);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69db      	ldr	r3, [r3, #28]
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3

		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	7a1b      	ldrb	r3, [r3, #8]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d103      	bne.n	80088f0 <SBGC32_SendCommand+0x30>
			serialCommand->_state = SCState_PROCESSED;
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	22ff      	movs	r2, #255	; 0xff
 80088ec:	769a      	strb	r2, [r3, #26]
				gSBGC->_api->txErrorsCount++;
			}
		}

	#endif
}
 80088ee:	e008      	b.n	8008902 <SBGC32_SendCommand+0x42>
			serialCommand->_state = SCState_ERROR;
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	2206      	movs	r2, #6
 80088f4:	769a      	strb	r2, [r3, #26]
			gSBGC->_api->txErrorsCount++;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	8a5a      	ldrh	r2, [r3, #18]
 80088fc:	3201      	adds	r2, #1
 80088fe:	b292      	uxth	r2, r2
 8008900:	825a      	strh	r2, [r3, #18]
}
 8008902:	bf00      	nop
 8008904:	3708      	adds	r7, #8
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}

0800890a <SerialAPI_FilterSerialCommand>:
 *	@param	payloadSize - size of received command
 *
 *	@return	Whether the command will be accepted or not
 */
static sbgcBoolean_t SerialAPI_FilterSerialCommand (serialAPI_Command_t *serialCommand, ui8 payloadSize)
{
 800890a:	b480      	push	{r7}
 800890c:	b085      	sub	sp, #20
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
 8008912:	460b      	mov	r3, r1
 8008914:	70fb      	strb	r3, [r7, #3]
	/* Check the expected payload size */
	if ((serialCommand->_payloadSize != 0) && (serialCommand->_payloadSize != payloadSize))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	7f1b      	ldrb	r3, [r3, #28]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d006      	beq.n	800892c <SerialAPI_FilterSerialCommand+0x22>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	7f1b      	ldrb	r3, [r3, #28]
 8008922:	78fa      	ldrb	r2, [r7, #3]
 8008924:	429a      	cmp	r2, r3
 8008926:	d001      	beq.n	800892c <SerialAPI_FilterSerialCommand+0x22>
		return sbgcFALSE;
 8008928:	2300      	movs	r3, #0
 800892a:	e01c      	b.n	8008966 <SerialAPI_FilterSerialCommand+0x5c>

	serialCommand->_payloadSize = payloadSize;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	78fa      	ldrb	r2, [r7, #3]
 8008930:	771a      	strb	r2, [r3, #28]

	switch (serialCommand->_commandID)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	7edb      	ldrb	r3, [r3, #27]
 8008936:	2b43      	cmp	r3, #67	; 0x43
 8008938:	d001      	beq.n	800893e <SerialAPI_FilterSerialCommand+0x34>
 800893a:	2bff      	cmp	r3, #255	; 0xff
 800893c:	d10f      	bne.n	800895e <SerialAPI_FilterSerialCommand+0x54>
		case CMD_CONFIRM :
		case CMD_ERROR :
		{
			#if (SBGC_NEED_CONFIRM_CMD)

				if (serialCommand->_pDestination)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	695b      	ldr	r3, [r3, #20]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00d      	beq.n	8008962 <SerialAPI_FilterSerialCommand+0x58>
				{
					sbgcConfirm_t *confirm = (sbgcConfirm_t*)serialCommand->_pDestination;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	60fb      	str	r3, [r7, #12]

					if (confirm->commandID != serialCommand->_payload[0])
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	781a      	ldrb	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	429a      	cmp	r2, r3
 8008958:	d003      	beq.n	8008962 <SerialAPI_FilterSerialCommand+0x58>
						return sbgcFALSE;
 800895a:	2300      	movs	r3, #0
 800895c:	e003      	b.n	8008966 <SerialAPI_FilterSerialCommand+0x5c>
				break;
			#endif
		}

		default :
			break;
 800895e:	bf00      	nop
 8008960:	e000      	b.n	8008964 <SerialAPI_FilterSerialCommand+0x5a>
				break;
 8008962:	bf00      	nop
	}

	return sbgcTRUE;
 8008964:	2301      	movs	r3, #1
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <SBGC32_FindCommand>:
 *	@param	*serialCommand - pointer to a structure, into which
 *			the found serial command will be overwritten
 *	@param	cmdID - SBGC32 command identifier
 */
static void SBGC32_FindCommand (sbgcGeneral_t *gSBGC, serialAPI_Command_t *serialCommand, serialAPI_CommandID_t cmdID)
{
 8008972:	b580      	push	{r7, lr}
 8008974:	b086      	sub	sp, #24
 8008976:	af00      	add	r7, sp, #0
 8008978:	60f8      	str	r0, [r7, #12]
 800897a:	60b9      	str	r1, [r7, #8]
 800897c:	4613      	mov	r3, r2
 800897e:	71fb      	strb	r3, [r7, #7]
	serialAPI_CommandID_t cmdID_Temp;

	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	721a      	strb	r2, [r3, #8]
	/* It's always sbgcCOMMAND_OK until in the rxCommandBuff isn't empty */

	#if (SBGC_USES_BLOCKING_MODE)

		sbgcTicks_t launchTime = serialAPI_GetTick();
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	68fa      	ldr	r2, [r7, #12]
 800898e:	6812      	ldr	r2, [r2, #0]
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	4610      	mov	r0, r2
 8008994:	4798      	blx	r3
 8008996:	6178      	str	r0, [r7, #20]

		serialCommand->_state = SCState_PROCESSING;
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	2203      	movs	r2, #3
 800899c:	769a      	strb	r2, [r3, #26]
		serialCommand->timeout = SBGC_DEFAULT_TIMEOUT;
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	2264      	movs	r2, #100	; 0x64
 80089a2:	605a      	str	r2, [r3, #4]
			serialCommand->_state = SCState_PROCESSING;
		}

	#endif

	gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	685a      	ldr	r2, [r3, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80089b0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Start high-layer parsing */
	while (1)
	{
		if (gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d104      	bne.n	80089d2 <SBGC32_FindCommand+0x60>
		/* Read a new data if the Rx buffer is empty or there wasn't a needed command there */
			gSBGC->_ll->rx(gSBGC);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	4798      	blx	r3

		cmdID_Temp = gSBGC->_api->rxCommandBuff[gSBGC->_api->rxCommandBuffCurP];
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	685b      	ldr	r3, [r3, #4]
 80089d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d8:	68fa      	ldr	r2, [r7, #12]
 80089da:	6852      	ldr	r2, [r2, #4]
 80089dc:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80089e0:	4413      	add	r3, r2
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	74fb      	strb	r3, [r7, #19]

		/* Handling */
		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	7a1b      	ldrb	r3, [r3, #8]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d144      	bne.n	8008a78 <SBGC32_FindCommand+0x106>
		/* We have some serial command */
		{
			if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 80089ee:	79fb      	ldrb	r3, [r7, #7]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	d00c      	beq.n	8008a0e <SBGC32_FindCommand+0x9c>
 80089f4:	7cfa      	ldrb	r2, [r7, #19]
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d008      	beq.n	8008a0e <SBGC32_FindCommand+0x9c>
				(cmdID_Temp == cmdID) ||
 80089fc:	79fb      	ldrb	r3, [r7, #7]
 80089fe:	2b43      	cmp	r3, #67	; 0x43
 8008a00:	d002      	beq.n	8008a08 <SBGC32_FindCommand+0x96>
				(((cmdID == CMD_CONFIRM) || (cmdID == CMD_CAN_DEVICE_SCAN)) && (cmdID_Temp == CMD_ERROR)))
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	2b60      	cmp	r3, #96	; 0x60
 8008a06:	d11a      	bne.n	8008a3e <SBGC32_FindCommand+0xcc>
 8008a08:	7cfb      	ldrb	r3, [r7, #19]
 8008a0a:	2bff      	cmp	r3, #255	; 0xff
 8008a0c:	d117      	bne.n	8008a3e <SBGC32_FindCommand+0xcc>
			/* A correct command has parsed (or a CMD_ERROR have come while we wait a CMD_CONFIRM or a CMD_CAN_DEVICE_SCAN) */
			{
				ui8 payloadSize = SerialAPI_ReadReceivedCommand(gSBGC, serialCommand);
 8008a0e:	68b9      	ldr	r1, [r7, #8]
 8008a10:	68f8      	ldr	r0, [r7, #12]
 8008a12:	f7ff fd4a 	bl	80084aa <SerialAPI_ReadReceivedCommand>
 8008a16:	4603      	mov	r3, r0
 8008a18:	74bb      	strb	r3, [r7, #18]

				if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 8008a1a:	79fb      	ldrb	r3, [r7, #7]
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d007      	beq.n	8008a30 <SBGC32_FindCommand+0xbe>
					SerialAPI_FilterSerialCommand(serialCommand, payloadSize))
 8008a20:	7cbb      	ldrb	r3, [r7, #18]
 8008a22:	4619      	mov	r1, r3
 8008a24:	68b8      	ldr	r0, [r7, #8]
 8008a26:	f7ff ff70 	bl	800890a <SerialAPI_FilterSerialCommand>
 8008a2a:	4603      	mov	r3, r0
				if ((cmdID == sbgcANY_SERIAL_COMMAND) ||
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d022      	beq.n	8008a76 <SBGC32_FindCommand+0x104>
				/* Search command has required advanced searching patterns, or they aren't requested.
				   Or pass next if receiving any command */
				{
					serialCommand->_payloadSize = payloadSize;
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	7cba      	ldrb	r2, [r7, #18]
 8008a34:	771a      	strb	r2, [r3, #28]
					serialCommand->_state = SCState_PROCESSED;
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	22ff      	movs	r2, #255	; 0xff
 8008a3a:	769a      	strb	r2, [r3, #26]

					/* Command was received fine, exit */
					return;
 8008a3c:	e052      	b.n	8008ae4 <SBGC32_FindCommand+0x172>
				}

				/* Else search command doesn't correspond advanced searching patterns. Go next */
			}

			else if (cmdID_Temp != cmdID)
 8008a3e:	7cfa      	ldrb	r2, [r7, #19]
 8008a40:	79fb      	ldrb	r3, [r7, #7]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d018      	beq.n	8008a78 <SBGC32_FindCommand+0x106>
			/* Has wrong command parsed or  */
				gSBGC->_api->rxCommandBuffCurP += gSBGC->_api->rxCommandBuff[(gSBGC->_api->rxCommandBuffCurP + 1) & SBGC_RX_BUFF_SIZE_MASK] + 2;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	685b      	ldr	r3, [r3, #4]
 8008a58:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	440b      	add	r3, r1
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	4413      	add	r3, r2
 8008a66:	b2da      	uxtb	r2, r3
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	3202      	adds	r2, #2
 8008a6e:	b2d2      	uxtb	r2, r2
 8008a70:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8008a74:	e000      	b.n	8008a78 <SBGC32_FindCommand+0x106>
			{
 8008a76:	bf00      	nop
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK))
			/* There wasn't a needed command anywhere */

		#else

			if (((gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead) &&
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	685b      	ldr	r3, [r3, #4]
 8008a84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d193      	bne.n	80089b4 <SBGC32_FindCommand+0x42>
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)) &&
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	7a1b      	ldrb	r3, [r3, #8]
			if (((gSBGC->_api->rxCommandBuffCurP == gSBGC->_api->rxCommandBuffHead) &&
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d08f      	beq.n	80089b4 <SBGC32_FindCommand+0x42>
				((serialAPI_GetTick() - launchTime) >= serialCommand->timeout))
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	6812      	ldr	r2, [r2, #0]
 8008a9e:	6812      	ldr	r2, [r2, #0]
 8008aa0:	4610      	mov	r0, r2
 8008aa2:	4798      	blx	r3
 8008aa4:	4602      	mov	r2, r0
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	1ad2      	subs	r2, r2, r3
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	685b      	ldr	r3, [r3, #4]
				(gSBGC->_lastSerialCommandStatus != serialAPI_TX_RX_OK)) &&
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d380      	bcc.n	80089b4 <SBGC32_FindCommand+0x42>

		#endif

			{
				/* Return rxCommandBuffCurP to the buffer start */
				gSBGC->_api->rxCommandBuffCurP = gSBGC->_api->rxCommandBuffTail;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	685a      	ldr	r2, [r3, #4]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008abe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
							}
						}

					#else

						serialCommand->_state = SCState_ERROR;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	2206      	movs	r2, #6
 8008ac6:	769a      	strb	r2, [r3, #26]
						gSBGC->_api->rxErrorsCount++;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	8a9a      	ldrh	r2, [r3, #20]
 8008ace:	3201      	adds	r2, #1
 8008ad0:	b292      	uxth	r2, r2
 8008ad2:	829a      	strh	r2, [r3, #20]

					#endif

					if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	7a1b      	ldrb	r3, [r3, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d102      	bne.n	8008ae2 <SBGC32_FindCommand+0x170>
					/* For example a case when a stream clogs serialAPI */
						gSBGC->_lastSerialCommandStatus = serialAPI_RX_NOT_FOUND_ERROR;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2206      	movs	r2, #6
 8008ae0:	721a      	strb	r2, [r3, #8]

				#endif

				return;
 8008ae2:	bf00      	nop
			}
	}
}
 8008ae4:	3718      	adds	r7, #24
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	bd80      	pop	{r7, pc}

08008aea <SerialAPI_ProcessCommand>:
 *	@param	index - command sequence number
 *
 *	@return	True if command wasn't deleted, false otherwise
 */
static sbgcBoolean_t SerialAPI_ProcessCommand (sbgcGeneral_t *gSBGC, ui8 index)
{
 8008aea:	b580      	push	{r7, lr}
 8008aec:	b084      	sub	sp, #16
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	6078      	str	r0, [r7, #4]
 8008af2:	460b      	mov	r3, r1
 8008af4:	70fb      	strb	r3, [r7, #3]
	sbgcBoolean_t commandExist = sbgcTRUE;
 8008af6:	2301      	movs	r3, #1
 8008af8:	73fb      	strb	r3, [r7, #15]

	serialAPI_CurCmd_ = &gSBGC->_api->commandBuff[index];
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	6999      	ldr	r1, [r3, #24]
 8008b00:	78fa      	ldrb	r2, [r7, #3]
 8008b02:	4613      	mov	r3, r2
 8008b04:	00db      	lsls	r3, r3, #3
 8008b06:	4413      	add	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	440a      	add	r2, r1
 8008b12:	625a      	str	r2, [r3, #36]	; 0x24

	sbgcBoolean_t thisCommandRx = (serialAPI_CurCmd_->parameters & SCParam_RX) ? sbgcTRUE : sbgcFALSE;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	685b      	ldr	r3, [r3, #4]
 8008b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	09db      	lsrs	r3, r3, #7
 8008b1e:	73bb      	strb	r3, [r7, #14]

	if (thisCommandRx)
 8008b20:	7bbb      	ldrb	r3, [r7, #14]
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <SerialAPI_ProcessCommand+0x54>
	{
		/* Don't find command yet if the library uses OS functional */
		#if (SBGC_USES_OS_SUPPORT == sbgcOFF)
			SBGC32_FindCommand(gSBGC, serialAPI_CurCmd_, serialAPI_CurCmd_->_commandID);
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	685b      	ldr	r3, [r3, #4]
 8008b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b32:	7edb      	ldrb	r3, [r3, #27]
 8008b34:	461a      	mov	r2, r3
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff ff1b 	bl	8008972 <SBGC32_FindCommand>
 8008b3c:	e006      	b.n	8008b4c <SerialAPI_ProcessCommand+0x62>
		#endif
	}

	else
		SBGC32_SendCommand(gSBGC, serialAPI_CurCmd_);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f7ff feba 	bl	80088c0 <SBGC32_SendCommand>

	/* After physical operations... */
	switch (serialAPI_CurCmd_->_state)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	7e9b      	ldrb	r3, [r3, #26]
 8008b54:	2bff      	cmp	r3, #255	; 0xff
 8008b56:	d005      	beq.n	8008b64 <SerialAPI_ProcessCommand+0x7a>
 8008b58:	2bff      	cmp	r3, #255	; 0xff
 8008b5a:	dc75      	bgt.n	8008c48 <SerialAPI_ProcessCommand+0x15e>
 8008b5c:	2b04      	cmp	r3, #4
 8008b5e:	d06d      	beq.n	8008c3c <SerialAPI_ProcessCommand+0x152>
 8008b60:	2b06      	cmp	r3, #6
 8008b62:	d171      	bne.n	8008c48 <SerialAPI_ProcessCommand+0x15e>
				gSBGC->_api->writeLog(gSBGC, serialAPI_CurCmd_);

			#endif

			/* It's necessary to save payload pointer cause the next actions may shift it */
			void *payloadTemp = serialAPI_CurCmd_->_payload;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	60bb      	str	r3, [r7, #8]

			if ((serialAPI_CurCmd_->_state == SCState_PROCESSED) || (serialAPI_CurCmd_->parameters & SCParam_EVENT_ANYWAY))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b74:	7e9b      	ldrb	r3, [r3, #26]
 8008b76:	2bff      	cmp	r3, #255	; 0xff
 8008b78:	d007      	beq.n	8008b8a <SerialAPI_ProcessCommand+0xa0>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d035      	beq.n	8008bf6 <SerialAPI_ProcessCommand+0x10c>
			/* Execute SerialAPI event */
			{
				if (serialAPI_CurCmd_->_serialAPI_Event)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d006      	beq.n	8008ba4 <SerialAPI_ProcessCommand+0xba>
					((serialAPI_Event_t)serialAPI_CurCmd_->_serialAPI_Event)(gSBGC);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	4798      	blx	r3
 8008ba2:	e023      	b.n	8008bec <SerialAPI_ProcessCommand+0x102>

				else if (thisCommandRx && (serialAPI_CurCmd_->_pDestination != NULL))  // and it don't have an event
 8008ba4:	7bbb      	ldrb	r3, [r7, #14]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d020      	beq.n	8008bec <SerialAPI_ProcessCommand+0x102>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	695b      	ldr	r3, [r3, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d01a      	beq.n	8008bec <SerialAPI_ProcessCommand+0x102>
				{
					if (serialAPI_CurCmd_->_destinationSize < serialAPI_CurCmd_->_payloadSize)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	685b      	ldr	r3, [r3, #4]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bbc:	8b1a      	ldrh	r2, [r3, #24]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bc4:	7f1b      	ldrb	r3, [r3, #28]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d202      	bcs.n	8008bd2 <SerialAPI_ProcessCommand+0xe8>
						SerialAPI_FatalErrorHandler();
 8008bcc:	f7f9 f96a 	bl	8001ea4 <SerialAPI_FatalErrorHandler>
 8008bd0:	e00c      	b.n	8008bec <SerialAPI_ProcessCommand+0x102>

					else
						gSBGC->_api->readBuff(gSBGC, serialAPI_CurCmd_->_pDestination, serialAPI_CurCmd_->_payloadSize);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bd8:	687a      	ldr	r2, [r7, #4]
 8008bda:	6852      	ldr	r2, [r2, #4]
 8008bdc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bde:	6951      	ldr	r1, [r2, #20]
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	6852      	ldr	r2, [r2, #4]
 8008be4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008be6:	7f12      	ldrb	r2, [r2, #28]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	4798      	blx	r3
				}

				/* Return payload pointer to the start */
				serialAPI_CurCmd_->_payload = payloadTemp;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf2:	68ba      	ldr	r2, [r7, #8]
 8008bf4:	621a      	str	r2, [r3, #32]
				/* Command processed fine. Reload it */
					serialAPI_CurCmd_->_state = SCState_RELOAD;

			#endif

			if (thisCommandRx)
 8008bf6:	7bbb      	ldrb	r3, [r7, #14]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d004      	beq.n	8008c06 <SerialAPI_ProcessCommand+0x11c>
			/* Delete command ID, size and payload from Rx buffer in any case */
				SerialAPI_DeleteReceivedCommand(gSBGC, payloadTemp);
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f7ff fc93 	bl	800852a <SerialAPI_DeleteReceivedCommand>
 8008c04:	e006      	b.n	8008c14 <SerialAPI_ProcessCommand+0x12a>

			else
			/* Delete command payload from Tx buffer and command object from main command buffer */
				SerialAPI_DeleteSentCommand(gSBGC, serialAPI_CurCmd_);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	685b      	ldr	r3, [r3, #4]
 8008c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff faf8 	bl	8008204 <SerialAPI_DeleteSentCommand>
					/* Return here from another thread and finish */
				}

			#endif

			if (serialAPI_CurCmd_->_state != SCState_RELOAD)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	7e9b      	ldrb	r3, [r3, #26]
 8008c1c:	2b04      	cmp	r3, #4
 8008c1e:	d007      	beq.n	8008c30 <SerialAPI_ProcessCommand+0x146>
			{
				commandExist = sbgcFALSE;
 8008c20:	2300      	movs	r3, #0
 8008c22:	73fb      	strb	r3, [r7, #15]
				SerialAPI_DeleteCommand(gSBGC, index);
 8008c24:	78fb      	ldrb	r3, [r7, #3]
 8008c26:	4619      	mov	r1, r3
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7ff fd38 	bl	800869e <SerialAPI_DeleteCommand>

			else
			/* Reload serial command */
				serialAPI_CurCmd_->_state = SCState_PREPARED;

			break;
 8008c2e:	e00c      	b.n	8008c4a <SerialAPI_ProcessCommand+0x160>
				serialAPI_CurCmd_->_state = SCState_PREPARED;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	685b      	ldr	r3, [r3, #4]
 8008c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c36:	2202      	movs	r2, #2
 8008c38:	769a      	strb	r2, [r3, #26]
			break;
 8008c3a:	e006      	b.n	8008c4a <SerialAPI_ProcessCommand+0x160>
				gSBGC->_api->writeLog(gSBGC, serialAPI_CurCmd_);

			#endif

			/* Reload serial command */
			serialAPI_CurCmd_->_state = SCState_PREPARED;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c42:	2202      	movs	r2, #2
 8008c44:	769a      	strb	r2, [r3, #26]

			break;
 8008c46:	e000      	b.n	8008c4a <SerialAPI_ProcessCommand+0x160>

		default :
			break;
 8008c48:	bf00      	nop
	}

	return commandExist;
 8008c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3710      	adds	r7, #16
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}

08008c54 <PostSetupLibrary>:
 *			See @ref SBGC32_SetupLibrary function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostSetupLibrary (sbgcGeneral_t *gSBGC)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b084      	sub	sp, #16
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	/* Read all data manually only */

	if (serialAPI_CurCmd_->_commandID == CMD_BOARD_INFO)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	685b      	ldr	r3, [r3, #4]
 8008c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c62:	7edb      	ldrb	r3, [r3, #27]
 8008c64:	2b56      	cmp	r3, #86	; 0x56
 8008c66:	d14d      	bne.n	8008d04 <PostSetupLibrary+0xb0>
	/* Getting board information */
	{
		if (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	7a1b      	ldrb	r3, [r3, #8]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d17c      	bne.n	8008d6a <PostSetupLibrary+0x116>
		{
			ui32 boardFeatures;

			/* Don't care about _payload pointer verge cause there is a first command */
			gSBGC->_api->boardVersion = *(serialAPI_CurCmd_->_payload + BI_BOARD_VER_OFFSET);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c76:	6a1a      	ldr	r2, [r3, #32]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	7812      	ldrb	r2, [r2, #0]
 8008c7e:	705a      	strb	r2, [r3, #1]
			gSBGC->_api->fromLE(&gSBGC->_api->firmwareVersion, serialAPI_CurCmd_->_payload + BI_FRW_VER_OFFSET,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	6852      	ldr	r2, [r2, #4]
 8008c8a:	1c90      	adds	r0, r2, #2
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	6852      	ldr	r2, [r2, #4]
 8008c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c92:	6a12      	ldr	r2, [r2, #32]
 8008c94:	1c51      	adds	r1, r2, #1
 8008c96:	2202      	movs	r2, #2
 8008c98:	4798      	blx	r3
								sizeof(gSBGC->_api->firmwareVersion));

			boardFeatures = (((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_OFFSET))) & 0x0000FFFF) |
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	461a      	mov	r2, r3
					((((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_E_OFFSET))) << 16) & 0xFFFF0000);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	330b      	adds	r3, #11
 8008cb2:	881b      	ldrh	r3, [r3, #0]
 8008cb4:	041b      	lsls	r3, r3, #16
			boardFeatures = (((ui32)(*(ui16*)(serialAPI_CurCmd_->_payload + BI_BOARD_FTR_OFFSET))) & 0x0000FFFF) |
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	60fb      	str	r3, [r7, #12]

			gSBGC->_api->fromLE(&gSBGC->_api->boardFeatures, (ui8*)(&boardFeatures), sizeof(gSBGC->_api->boardFeatures));
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc0:	687a      	ldr	r2, [r7, #4]
 8008cc2:	6852      	ldr	r2, [r2, #4]
 8008cc4:	f102 0008 	add.w	r0, r2, #8
 8008cc8:	f107 010c 	add.w	r1, r7, #12
 8008ccc:	2204      	movs	r2, #4
 8008cce:	4798      	blx	r3

			gSBGC->_api->fromLE(&gSBGC->_api->baseFirmwareVersion, serialAPI_CurCmd_->_payload + BI_BASE_FRW_VER_OFFSET,
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	6852      	ldr	r2, [r2, #4]
 8008cda:	1d10      	adds	r0, r2, #4
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	6852      	ldr	r2, [r2, #4]
 8008ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008ce2:	6a12      	ldr	r2, [r2, #32]
 8008ce4:	f102 0110 	add.w	r1, r2, #16
 8008ce8:	2202      	movs	r2, #2
 8008cea:	4798      	blx	r3
								sizeof(gSBGC->_api->baseFirmwareVersion));

			if (gSBGC->_api->baseFirmwareVersion == 0)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	889b      	ldrh	r3, [r3, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d139      	bne.n	8008d6a <PostSetupLibrary+0x116>
			/* Some SBGC32 boards have no this data field */
				gSBGC->_api->baseFirmwareVersion = gSBGC->_api->firmwareVersion;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	8852      	ldrh	r2, [r2, #2]
 8008d00:	809a      	strh	r2, [r3, #4]
 8008d02:	e032      	b.n	8008d6a <PostSetupLibrary+0x116>

			return;
		}
	}

	else if (serialAPI_CurCmd_->_commandID == CMD_BOARD_INFO_3)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0a:	7edb      	ldrb	r3, [r3, #27]
 8008d0c:	2b14      	cmp	r3, #20
 8008d0e:	d12c      	bne.n	8008d6a <PostSetupLibrary+0x116>
	/* Getting total adjustable variables number */
	{
		if (gSBGC->_api->firmwareVersion && (gSBGC->_lastSerialCommandStatus == serialAPI_TX_RX_OK))
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	885b      	ldrh	r3, [r3, #2]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d027      	beq.n	8008d6a <PostSetupLibrary+0x116>
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	7a1b      	ldrb	r3, [r3, #8]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d123      	bne.n	8008d6a <PostSetupLibrary+0x116>
		{
			gSBGC->_api->fromLE(&gSBGC->_api->boardFeatures2, serialAPI_CurCmd_->_payload + BI3_BOARD_FTR_E2_OFFSET,
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	6852      	ldr	r2, [r2, #4]
 8008d2c:	f102 000c 	add.w	r0, r2, #12
 8008d30:	687a      	ldr	r2, [r7, #4]
 8008d32:	6852      	ldr	r2, [r2, #4]
 8008d34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d36:	6a12      	ldr	r2, [r2, #32]
 8008d38:	f102 0134 	add.w	r1, r2, #52	; 0x34
 8008d3c:	2204      	movs	r2, #4
 8008d3e:	4798      	blx	r3
								sizeof(gSBGC->_api->boardFeatures2));

			#if (SBGC_ADJVAR_MODULE)

				if (gSBGC->_api->baseFirmwareVersion < 2730)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	889b      	ldrh	r3, [r3, #4]
 8008d46:	f640 22a9 	movw	r2, #2729	; 0xaa9
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d803      	bhi.n	8008d56 <PostSetupLibrary+0x102>
					SerialAPI_DetermineAdjVarsNumber(gSBGC);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f7ff fd63 	bl	800881a <SerialAPI_DetermineAdjVarsNumber>
				DebugSBGC32_PrintMessage(gSBGC, firmwareVersionStr);
				DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n\n");

			#endif

			return;
 8008d54:	e008      	b.n	8008d68 <PostSetupLibrary+0x114>
					gSBGC->_api->adjVarsNumber = *(serialAPI_CurCmd_->_payload + BI3_ADJ_VAR_NUM_OFFSET);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5c:	6a1a      	ldr	r2, [r3, #32]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8008d66:	741a      	strb	r2, [r3, #16]
			return;
 8008d68:	bf00      	nop
		DebugSBGC32_PrintMessage(gSBGC, "\n********************************\n");
		DebugSBGC32_PrintMessage(gSBGC, "Communication Error!\n");
		DebugSBGC32_PrintMessage(gSBGC, "********************************\n\n");

	#endif
}
 8008d6a:	3710      	adds	r7, #16
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}

08008d70 <SBGC32_SetupLibrary>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_SetupLibrary (sbgcGeneral_t *gSBGC)
{
 8008d70:	b590      	push	{r4, r7, lr}
 8008d72:	b085      	sub	sp, #20
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
	gSBGC->_api = (serialAPI_General_t*)sbgcMalloc(sizeof(serialAPI_General_t));
 8008d78:	20a8      	movs	r0, #168	; 0xa8
 8008d7a:	f000 ff65 	bl	8009c48 <malloc>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	461a      	mov	r2, r3
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	605a      	str	r2, [r3, #4]

	PrivateSerialAPI_LinkLowLayer(gSBGC);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7ff fa26 	bl	80081d8 <PrivateSerialAPI_LinkLowLayer>
	PrivateSerialAPI_LinkConverter(gSBGC);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f000 f9e1 	bl	8009154 <PrivateSerialAPI_LinkConverter>

	#if (SBGC_USES_LOGS)
		PrivateSerialAPI_LinkDebug(gSBGC);
	#endif

	PrivateSerialAPI_LinkCommandBuild(gSBGC);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7fe ff68 	bl	8007c68 <PrivateSerialAPI_LinkCommandBuild>

	/* Link high-layer service functions */
	gSBGC->_api->saveCmd = SerialAPI_SaveReceivedCommand;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	685b      	ldr	r3, [r3, #4]
 8008d9c:	4a92      	ldr	r2, [pc, #584]	; (8008fe8 <SBGC32_SetupLibrary+0x278>)
 8008d9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	gSBGC->_api->findCmd = SerialAPI_FindCommandByID;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	4a91      	ldr	r2, [pc, #580]	; (8008fec <SBGC32_SetupLibrary+0x27c>)
 8008da8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	#if (SBGC_USES_BLOCKING_MODE || SBGC_SEND_IMMEDIATELY)
		gSBGC->_api->process = SerialAPI_ProcessCommand;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a8f      	ldr	r2, [pc, #572]	; (8008ff0 <SBGC32_SetupLibrary+0x280>)
 8008db2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		SystemSBGC32_CreateMutex(&gSBGC->_api->mutexSerialAPI);
		SystemSBGC32_GiveMutex(&gSBGC->_api->mutexSerialAPI);

	#endif

	gSBGC->_api->serialAPI_Status = serialAPI_OK;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	701a      	strb	r2, [r3, #0]

	gSBGC->_api->boardVersion = 0;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	705a      	strb	r2, [r3, #1]
	gSBGC->_api->firmwareVersion = 0;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	805a      	strh	r2, [r3, #2]
	gSBGC->_api->baseFirmwareVersion = 0;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	685b      	ldr	r3, [r3, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	809a      	strh	r2, [r3, #4]

	#if (SBGC_ADJVAR_MODULE)
		gSBGC->_api->adjVarsNumber = SBGC_ADJ_VARS_MIN_QUANTITY;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	2232      	movs	r2, #50	; 0x32
 8008ddc:	741a      	strb	r2, [r3, #16]
	#endif

	gSBGC->_api->txErrorsCount = 0;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	2200      	movs	r2, #0
 8008de4:	825a      	strh	r2, [r3, #18]
	gSBGC->_api->rxErrorsCount = 0;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	2200      	movs	r2, #0
 8008dec:	829a      	strh	r2, [r3, #20]

	gSBGC->_api->commandBuff = (serialAPI_Command_t*)sbgcMalloc(sizeof(serialAPI_Command_t) * SBGC_MAX_COMMAND_NUM);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	685c      	ldr	r4, [r3, #4]
 8008df2:	2024      	movs	r0, #36	; 0x24
 8008df4:	f000 ff28 	bl	8009c48 <malloc>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	61a3      	str	r3, [r4, #24]
	gSBGC->_api->commandNumber = 0;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	771a      	strb	r2, [r3, #28]
	gSBGC->_api->commandTotalCount = 0;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	685b      	ldr	r3, [r3, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	621a      	str	r2, [r3, #32]

	gSBGC->_api->currentSerialCommand = NULL;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	625a      	str	r2, [r3, #36]	; 0x24

	#if (SBGC_USES_TOKENS)
		gSBGC->_api->lastCommandToken = 0;
	#endif

	gSBGC->_api->txCommandBuff = (ui8*)sbgcMalloc(SBGC_TX_BUFF_TOTAL_SIZE);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	685c      	ldr	r4, [r3, #4]
 8008e18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008e1c:	f000 ff14 	bl	8009c48 <malloc>
 8008e20:	4603      	mov	r3, r0
 8008e22:	62a3      	str	r3, [r4, #40]	; 0x28
	gSBGC->_api->txCommandBuffTail = 0;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	gSBGC->_api->txCommandBuffHead = 0;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

	gSBGC->_api->rxCommandBuff = (ui8*)sbgcMalloc(SBGC_RX_BUFF_TOTAL_SIZE);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685c      	ldr	r4, [r3, #4]
 8008e3c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008e40:	f000 ff02 	bl	8009c48 <malloc>
 8008e44:	4603      	mov	r3, r0
 8008e46:	6323      	str	r3, [r4, #48]	; 0x30
	gSBGC->_api->rxCommandBuffTail = 0;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	gSBGC->_api->rxCommandBuffHead = 0;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	685b      	ldr	r3, [r3, #4]
 8008e56:	2200      	movs	r2, #0
 8008e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	gSBGC->_api->rxCommandBuffCurP = 0;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	gSBGC->_lastSerialCommandStatus = serialAPI_TX_RX_OK;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2200      	movs	r2, #0
 8008e6a:	721a      	strb	r2, [r3, #8]
	gSBGC->_lastCommandStatus = sbgcCOMMAND_OK;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	725a      	strb	r2, [r3, #9]

	/* Startup delay */
	sbgcTicks_t launchTime = serialAPI_GetTick();
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	687a      	ldr	r2, [r7, #4]
 8008e7a:	6812      	ldr	r2, [r2, #0]
 8008e7c:	6812      	ldr	r2, [r2, #0]
 8008e7e:	4610      	mov	r0, r2
 8008e80:	4798      	blx	r3
 8008e82:	60f8      	str	r0, [r7, #12]

	while ((serialAPI_GetTick() - launchTime) < SBGC_STARTUP_DELAY);
 8008e84:	bf00      	nop
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	6812      	ldr	r2, [r2, #0]
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	4610      	mov	r0, r2
 8008e94:	4798      	blx	r3
 8008e96:	4602      	mov	r2, r0
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	1ad3      	subs	r3, r2, r3
 8008e9c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008ea0:	d3f1      	bcc.n	8008e86 <SBGC32_SetupLibrary+0x116>

	/* Getting board information */
	gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO SBGC_DEFAULT_ARGS__);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ea8:	2156      	movs	r1, #86	; 0x56
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	4798      	blx	r3
	gSBGC->_api->writeWord(gSBGC, 0);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	4798      	blx	r3
	serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec0:	781a      	ldrb	r2, [r3, #0]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008ecc:	b2d2      	uxtb	r2, r2
 8008ece:	701a      	strb	r2, [r3, #0]

	#if (SBGC_USES_OS_SUPPORT)
		serialAPI_CurCmd_->priority = SCPrior_SUPREME;
	#endif

	gSBGC->_api->finishWrite(gSBGC);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	4798      	blx	r3

	serialAPI_Unlock()
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
		sbgcBlockQueue(SBGC32_TransmitAllCommands(gSBGC));
	#endif

	serialAPI_LockRead();
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	781b      	ldrb	r3, [r3, #0]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d001      	beq.n	8008ef0 <SBGC32_SetupLibrary+0x180>
 8008eec:	230a      	movs	r3, #10
 8008eee:	e076      	b.n	8008fde <SBGC32_SetupLibrary+0x26e>
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	685b      	ldr	r3, [r3, #4]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	701a      	strb	r2, [r3, #0]

	gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO SBGC_DEFAULT_ARGS__);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008efe:	2156      	movs	r1, #86	; 0x56
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, PostSetupLibrary, gSBGC, SBGC_MAX_PAYLOAD_SIZE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8008f0c:	23ff      	movs	r3, #255	; 0xff
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	4938      	ldr	r1, [pc, #224]	; (8008ff4 <SBGC32_SetupLibrary+0x284>)
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	47a0      	blx	r4
	serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1c:	781a      	ldrb	r2, [r3, #0]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f28:	b2d2      	uxtb	r2, r2
 8008f2a:	701a      	strb	r2, [r3, #0]

	#if (SBGC_USES_OS_SUPPORT)
		serialAPI_CurCmd_->priority = SCPrior_SUPREME;
	#endif

	gSBGC->_api->finishRead(gSBGC);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f34:	6878      	ldr	r0, [r7, #4]
 8008f36:	4798      	blx	r3

	serialAPI_Unlock()
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	701a      	strb	r2, [r3, #0]

	#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
		sbgcBlockQueue(SBGC32_ReceiveAllCommands(gSBGC));
	#endif

	if (gSBGC->_lastCommandStatus == sbgcCOMMAND_OK)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7a5b      	ldrb	r3, [r3, #9]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d148      	bne.n	8008fda <SBGC32_SetupLibrary+0x26a>
	/* Getting the second features part and total adjustable variables number */
	{
		gSBGC->_api->startWrite(gSBGC, CMD_BOARD_INFO_3 SBGC_DEFAULT_ARGS__);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f4e:	2114      	movs	r1, #20
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	4798      	blx	r3
		serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5a:	781a      	ldrb	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f62:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f66:	b2d2      	uxtb	r2, r2
 8008f68:	701a      	strb	r2, [r3, #0]

		#if (SBGC_USES_OS_SUPPORT)
			serialAPI_CurCmd_->priority = SCPrior_SUPREME;
		#endif

		gSBGC->_api->finishWrite(gSBGC);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008f70:	6878      	ldr	r0, [r7, #4]
 8008f72:	4798      	blx	r3

		serialAPI_Unlock()
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	2200      	movs	r2, #0
 8008f7a:	701a      	strb	r2, [r3, #0]

		#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
			sbgcBlockQueue(SBGC32_TransmitAllCommands(gSBGC));
		#endif

		serialAPI_LockRead();
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	781b      	ldrb	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <SBGC32_SetupLibrary+0x21a>
 8008f86:	230a      	movs	r3, #10
 8008f88:	e029      	b.n	8008fde <SBGC32_SetupLibrary+0x26e>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	701a      	strb	r2, [r3, #0]

		gSBGC->_api->startRead(gSBGC, CMD_BOARD_INFO_3 SBGC_DEFAULT_ARGS__);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f98:	2114      	movs	r1, #20
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	4798      	blx	r3
		gSBGC->_api->assignEvent(gSBGC, PostSetupLibrary, gSBGC, SBGC_MAX_PAYLOAD_SIZE);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8008fa6:	23ff      	movs	r3, #255	; 0xff
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	4912      	ldr	r1, [pc, #72]	; (8008ff4 <SBGC32_SetupLibrary+0x284>)
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	47a0      	blx	r4
		serialAPI_CurCmd_->parameters |= SCParam_EVENT_ANYWAY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb6:	781a      	ldrb	r2, [r3, #0]
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fc2:	b2d2      	uxtb	r2, r2
 8008fc4:	701a      	strb	r2, [r3, #0]

		#if (SBGC_USES_OS_SUPPORT)
			serialAPI_CurCmd_->priority = SCPrior_SUPREME;
		#endif

		gSBGC->_api->finishRead(gSBGC);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	4798      	blx	r3

		serialAPI_Unlock()
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	701a      	strb	r2, [r3, #0]
		#if (SBGC_NON_BLOCKING_MODE && (SBGC_USES_OS_SUPPORT == sbgcOFF))
			sbgcBlockQueue(SBGC32_ReceiveAllCommands(gSBGC));
		#endif
	}

	return gSBGC->_lastCommandStatus;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	7a5b      	ldrb	r3, [r3, #9]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3714      	adds	r7, #20
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd90      	pop	{r4, r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	0800832f 	.word	0x0800832f
 8008fec:	080087bd 	.word	0x080087bd
 8008ff0:	08008aeb 	.word	0x08008aeb
 8008ff4:	08008c55 	.word	0x08008c55

08008ff8 <SerialAPI_LinkDriver>:
 *			current time in milliseconds
 */
void SerialAPI_LinkDriver (sbgcGeneral_t *gSBGC, sbgcTx_t tx, sbgcRx_t rx,
						   sbgcAvailableBytes_t availableBytes, sbgcTxDebug_t txDebug,
						   sbgcGetTime_t getTime)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	607a      	str	r2, [r7, #4]
 8009004:	603b      	str	r3, [r7, #0]
	gSBGC->_ll = (sbgcLowLayer_t*)sbgcMalloc(sizeof(sbgcLowLayer_t));
 8009006:	2024      	movs	r0, #36	; 0x24
 8009008:	f000 fe1e 	bl	8009c48 <malloc>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	601a      	str	r2, [r3, #0]

	gSBGC->_ll->drvTx = tx;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68ba      	ldr	r2, [r7, #8]
 800901a:	609a      	str	r2, [r3, #8]
	gSBGC->_ll->drvRx = rx;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	60da      	str	r2, [r3, #12]
	gSBGC->_ll->drvAvailableBytes = availableBytes;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	683a      	ldr	r2, [r7, #0]
 800902a:	611a      	str	r2, [r3, #16]

	#if (SBGC_NEED_DEBUG)
		gSBGC->_ll->drvTxDebug = txDebug;
	#else
		gSBGC->_ll->drvTxDebug = NULL;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2200      	movs	r2, #0
 8009032:	615a      	str	r2, [r3, #20]
	#endif

	gSBGC->_ll->drvGetTime = getTime;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	69fa      	ldr	r2, [r7, #28]
 800903a:	605a      	str	r2, [r3, #4]

	#if (SBGC_USES_CUSTOM_SPRINTF)
		SerialAPI_LinkSprintf(gSBGC);
	#else
		gSBGC->_ll->debugSprintf = sprintf;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	4a02      	ldr	r2, [pc, #8]	; (800904c <SerialAPI_LinkDriver+0x54>)
 8009042:	619a      	str	r2, [r3, #24]
	#endif
}
 8009044:	bf00      	nop
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	0800abb1 	.word	0x0800abb1

08009050 <ParserSBGC32_ConvertTypeToSize>:
 */
/**	@addtogroup	Data_Parse
 *	@{
 */
static ui8 ParserSBGC32_ConvertTypeToSize (sbgcVarType_t varType)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	4603      	mov	r3, r0
 8009058:	71fb      	strb	r3, [r7, #7]
	ui8 res = 0;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]

	switch (varType & CLEAN_TYPE_MASK)
 800905e:	79fb      	ldrb	r3, [r7, #7]
 8009060:	f003 0307 	and.w	r3, r3, #7
 8009064:	2b81      	cmp	r3, #129	; 0x81
 8009066:	d00e      	beq.n	8009086 <ParserSBGC32_ConvertTypeToSize+0x36>
 8009068:	2b81      	cmp	r3, #129	; 0x81
 800906a:	dc15      	bgt.n	8009098 <ParserSBGC32_ConvertTypeToSize+0x48>
 800906c:	2b07      	cmp	r3, #7
 800906e:	dc13      	bgt.n	8009098 <ParserSBGC32_ConvertTypeToSize+0x48>
 8009070:	2b05      	cmp	r3, #5
 8009072:	da0e      	bge.n	8009092 <ParserSBGC32_ConvertTypeToSize+0x42>
 8009074:	2b02      	cmp	r3, #2
 8009076:	dc02      	bgt.n	800907e <ParserSBGC32_ConvertTypeToSize+0x2e>
 8009078:	2b00      	cmp	r3, #0
 800907a:	dc04      	bgt.n	8009086 <ParserSBGC32_ConvertTypeToSize+0x36>
		case sbgcFLOAT :
			res = 4;
			break;

		default :
			break;
 800907c:	e00c      	b.n	8009098 <ParserSBGC32_ConvertTypeToSize+0x48>
 800907e:	3b03      	subs	r3, #3
	switch (varType & CLEAN_TYPE_MASK)
 8009080:	2b01      	cmp	r3, #1
 8009082:	d809      	bhi.n	8009098 <ParserSBGC32_ConvertTypeToSize+0x48>
 8009084:	e002      	b.n	800908c <ParserSBGC32_ConvertTypeToSize+0x3c>
			res = 1;
 8009086:	2301      	movs	r3, #1
 8009088:	73fb      	strb	r3, [r7, #15]
			break;
 800908a:	e006      	b.n	800909a <ParserSBGC32_ConvertTypeToSize+0x4a>
			res = 2;
 800908c:	2302      	movs	r3, #2
 800908e:	73fb      	strb	r3, [r7, #15]
			break;
 8009090:	e003      	b.n	800909a <ParserSBGC32_ConvertTypeToSize+0x4a>
			res = 4;
 8009092:	2304      	movs	r3, #4
 8009094:	73fb      	strb	r3, [r7, #15]
			break;
 8009096:	e000      	b.n	800909a <ParserSBGC32_ConvertTypeToSize+0x4a>
			break;
 8009098:	bf00      	nop
	}

	return res;
 800909a:	7bfb      	ldrb	r3, [r7, #15]
}
 800909c:	4618      	mov	r0, r3
 800909e:	3714      	adds	r7, #20
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <ParserSBGC32_ToLittleEndian>:
 *	@param	*value - writable variable address
 *	@param	*payload - place of data writing
 *	@param	size - variable size
 */
static void ParserSBGC32_ToLittleEndian (const void *value, ui8 *payload, ui8 size)
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b084      	sub	sp, #16
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80090b6:	79fb      	ldrb	r3, [r7, #7]
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	d80b      	bhi.n	80090d4 <ParserSBGC32_ToLittleEndian+0x2c>
	if (size == 3) size = 4;
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b03      	cmp	r3, #3
 80090c0:	d101      	bne.n	80090c6 <ParserSBGC32_ToLittleEndian+0x1e>
 80090c2:	2304      	movs	r3, #4
 80090c4:	71fb      	strb	r3, [r7, #7]

	memcpy(payload, value, size);
 80090c6:	79fb      	ldrb	r3, [r7, #7]
 80090c8:	461a      	mov	r2, r3
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	68b8      	ldr	r0, [r7, #8]
 80090ce:	f001 fe62 	bl	800ad96 <memcpy>
 80090d2:	e000      	b.n	80090d6 <ParserSBGC32_ToLittleEndian+0x2e>
	if (size > 4) return;
 80090d4:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			ParserSBGC32_SwapMemoryContent((ui8*)payload + i, (ui8*)payload + size - 1 - i);

	#endif
}
 80090d6:	3710      	adds	r7, #16
 80090d8:	46bd      	mov	sp, r7
 80090da:	bd80      	pop	{r7, pc}

080090dc <ParserSBGC32_FromLittleEndian>:
 *	@param	*value - variable write address
 *	@param	*payload - place of data reading
 *	@param	size - variable size
 */
static void ParserSBGC32_FromLittleEndian (void *value, ui8 *payload, ui8 size)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	71fb      	strb	r3, [r7, #7]
	if (size > 4) return;
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d80b      	bhi.n	8009108 <ParserSBGC32_FromLittleEndian+0x2c>
	if (size == 3) size = 4;
 80090f0:	79fb      	ldrb	r3, [r7, #7]
 80090f2:	2b03      	cmp	r3, #3
 80090f4:	d101      	bne.n	80090fa <ParserSBGC32_FromLittleEndian+0x1e>
 80090f6:	2304      	movs	r3, #4
 80090f8:	71fb      	strb	r3, [r7, #7]

	memcpy(value, payload, size);
 80090fa:	79fb      	ldrb	r3, [r7, #7]
 80090fc:	461a      	mov	r2, r3
 80090fe:	68b9      	ldr	r1, [r7, #8]
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f001 fe48 	bl	800ad96 <memcpy>
 8009106:	e000      	b.n	800910a <ParserSBGC32_FromLittleEndian+0x2e>
	if (size > 4) return;
 8009108:	bf00      	nop

		for (ui8 i = 0; i < size / 2; i++)
			ParserSBGC32_SwapMemoryContent((ui8*)value + i, (ui8*)value + size - 1 - i);

	#endif
}
 800910a:	3710      	adds	r7, #16
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <ParserSBGC32_GetCommandParserMap>:
 *	@param	*serialCommand - pointer to command
 *
 *	@return	Parser mapping pattern
 */
static sbgcParserMap_t ParserSBGC32_GetCommandParserMap (serialAPI_Command_t *serialCommand)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
	#if (SBGC_SYS_BIG_ENDIAN == sbgcOFF)

		unused_(serialCommand);
		return PM_DEFAULT_8BIT;
 8009118:	2300      	movs	r3, #0

			default :																return PM_DEFAULT_8BIT;
		}

	#endif
}
 800911a:	4618      	mov	r0, r3
 800911c:	370c      	adds	r7, #12
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr

08009126 <ParserSBGC32_ConvertWithPM>:
 *	@param	parserMap - data type required for correct parsing
 *
 *	@return	Size of written data
 */
static ui8 ParserSBGC32_ConvertWithPM (void *pDestination, const void *pSource, ui8 size, sbgcParserMap_t parserMap)
{
 8009126:	b580      	push	{r7, lr}
 8009128:	b084      	sub	sp, #16
 800912a:	af00      	add	r7, sp, #0
 800912c:	60f8      	str	r0, [r7, #12]
 800912e:	60b9      	str	r1, [r7, #8]
 8009130:	4611      	mov	r1, r2
 8009132:	461a      	mov	r2, r3
 8009134:	460b      	mov	r3, r1
 8009136:	71fb      	strb	r3, [r7, #7]
 8009138:	4613      	mov	r3, r2
 800913a:	71bb      	strb	r3, [r7, #6]
	#if (SBGC_NEED_ASSERTS)
		if ((pDestination == NULL) || (size == 0)) return 0;
	#endif

	memcpy(pDestination, pSource, size);
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	461a      	mov	r2, r3
 8009140:	68b9      	ldr	r1, [r7, #8]
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f001 fe27 	bl	800ad96 <memcpy>
		ParserSBGC32_SwapBytesInStruct((ui8*)pDestination, size, parserMap);
	#else
		unused_(parserMap);
	#endif

	return size;
 8009148:	79fb      	ldrb	r3, [r7, #7]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3710      	adds	r7, #16
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
	...

08009154 <PrivateSerialAPI_LinkConverter>:
 *	@note	Quasi-private function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
void PrivateSerialAPI_LinkConverter (sbgcGeneral_t *gSBGC)
{
 8009154:	b480      	push	{r7}
 8009156:	b083      	sub	sp, #12
 8009158:	af00      	add	r7, sp, #0
 800915a:	6078      	str	r0, [r7, #4]
	gSBGC->_api->typeToSize	= ParserSBGC32_ConvertTypeToSize;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	4a0b      	ldr	r2, [pc, #44]	; (8009190 <PrivateSerialAPI_LinkConverter+0x3c>)
 8009162:	639a      	str	r2, [r3, #56]	; 0x38

	#if (SBGC_USES_REF_INFO)
		gSBGC->_api->assignByPM	= ParserSBGC32_AssignStructByParserMap;
	#endif

	gSBGC->_api->toLE		= ParserSBGC32_ToLittleEndian;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	4a0a      	ldr	r2, [pc, #40]	; (8009194 <PrivateSerialAPI_LinkConverter+0x40>)
 800916a:	63da      	str	r2, [r3, #60]	; 0x3c
	gSBGC->_api->fromLE		= ParserSBGC32_FromLittleEndian;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	4a09      	ldr	r2, [pc, #36]	; (8009198 <PrivateSerialAPI_LinkConverter+0x44>)
 8009172:	641a      	str	r2, [r3, #64]	; 0x40
	gSBGC->_api->getCmdPM	= ParserSBGC32_GetCommandParserMap;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	4a08      	ldr	r2, [pc, #32]	; (800919c <PrivateSerialAPI_LinkConverter+0x48>)
 800917a:	645a      	str	r2, [r3, #68]	; 0x44
	gSBGC->_api->convWithPM	= ParserSBGC32_ConvertWithPM;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	4a07      	ldr	r2, [pc, #28]	; (80091a0 <PrivateSerialAPI_LinkConverter+0x4c>)
 8009182:	649a      	str	r2, [r3, #72]	; 0x48
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	08009051 	.word	0x08009051
 8009194:	080090a9 	.word	0x080090a9
 8009198:	080090dd 	.word	0x080090dd
 800919c:	08009111 	.word	0x08009111
 80091a0:	08009127 	.word	0x08009127

080091a4 <DriverSBGC32_Init>:
 *	@param	**driver - main hardware driver object
 *	@param	*uart - user defined UART object
 *	@param	*tim - user defined timer object
 */
void DriverSBGC32_Init (void **driver, SBGC_DRV_UART_TYPE_DEF__ *uart, SBGC_DRV_TIMER_TYPE_DEF__ *tim)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b086      	sub	sp, #24
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
	*driver = sbgcMalloc(sizeof(sbgcDriver_t));
 80091b0:	201c      	movs	r0, #28
 80091b2:	f000 fd49 	bl	8009c48 <malloc>
 80091b6:	4603      	mov	r3, r0
 80091b8:	461a      	mov	r2, r3
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	601a      	str	r2, [r3, #0]

	sbgcDriver_t *drv = (sbgcDriver_t*)(*driver);
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	617b      	str	r3, [r7, #20]

	#if (SBGC_DRV_HAL_TIMER || SBGC_DRV_LL_TIMER)
		/* Timer */
		drv->tim = tim;
 80091c4:	697b      	ldr	r3, [r7, #20]
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	601a      	str	r2, [r3, #0]
		drv->timCount = 0;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	2200      	movs	r2, #0
 80091ce:	605a      	str	r2, [r3, #4]
	#else
		unused_(tim);
	#endif

    /* UART */
	drv->uart = uart;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	609a      	str	r2, [r3, #8]

		DriverSBGC32_UART_Init(drv);

	#endif

	drv->txBuffer = (ui8*)sbgcMalloc(SBGC_DRV_TX_BUFF_TOTAL_SIZE);
 80091d6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80091da:	f000 fd35 	bl	8009c48 <malloc>
 80091de:	4603      	mov	r3, r0
 80091e0:	461a      	mov	r2, r3
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	60da      	str	r2, [r3, #12]
	drv->rxBuffer = (ui8*)sbgcMalloc(SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 80091e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80091ea:	f000 fd2d 	bl	8009c48 <malloc>
 80091ee:	4603      	mov	r3, r0
 80091f0:	461a      	mov	r2, r3
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	615a      	str	r2, [r3, #20]

	DriverSBGC32_ClearTxBuff(drv);
 80091f6:	6978      	ldr	r0, [r7, #20]
 80091f8:	f000 f8da 	bl	80093b0 <DriverSBGC32_ClearTxBuff>
	DriverSBGC32_ClearRxBuff(drv);
 80091fc:	6978      	ldr	r0, [r7, #20]
 80091fe:	f000 f98e 	bl	800951e <DriverSBGC32_ClearRxBuff>

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
		/* UART Interrupts executable code */
		DISABLE_UART_CR1_TCIE(drv->uart);
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	681a      	ldr	r2, [r3, #0]
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009214:	601a      	str	r2, [r3, #0]
		ENABLE_UART_CR1_RXNEIE(drv->uart);
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681a      	ldr	r2, [r3, #0]
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f042 0220 	orr.w	r2, r2, #32
 8009228:	601a      	str	r2, [r3, #0]
		DISABLE_UART_CR1_IDLEIE(drv->uart);
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 0210 	bic.w	r2, r2, #16
 800923c:	601a      	str	r2, [r3, #0]

		(void)READ_UART_BYTE(drv->uart);
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
		CLEAR_UART_ORE(drv->uart);
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	689b      	ldr	r3, [r3, #8]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2208      	movs	r2, #8
 800924e:	621a      	str	r2, [r3, #32]
		LL_DMA_EnableStream(SBGC_DMA_UART_RX, SBGC_DMA_UART_RX_STREAM);

	#endif

	#if (SBGC_DRV_HAL_TIMER || SBGC_DRV_LL_TIMER)
		START_TIMER(drv->tim);
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4618      	mov	r0, r3
 8009256:	f7fc fa31 	bl	80056bc <HAL_TIM_Base_Start_IT>
	#endif
}
 800925a:	bf00      	nop
 800925c:	3718      	adds	r7, #24
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <DriverSBGC32_GetTimeMs>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Current time
 */
sbgcTicks_t DriverSBGC32_GetTimeMs (void *driver)
{
 8009262:	b480      	push	{r7}
 8009264:	b085      	sub	sp, #20
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	60fb      	str	r3, [r7, #12]

	#if (SBGC_USES_OS_SUPPORT)
		drv->timCount = sbgcGetTick();
	#endif

	return drv->timCount;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	685b      	ldr	r3, [r3, #4]
}
 8009272:	4618      	mov	r0, r3
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr

0800927e <DriverSBGC32_TimerCallBack>:
/**	@brief	Timer interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_TimerCallBack (void *driver)
{
 800927e:	b480      	push	{r7}
 8009280:	b085      	sub	sp, #20
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	60fb      	str	r3, [r7, #12]

	drv->timCount++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	605a      	str	r2, [r3, #4]

	#if (SBGC_DRV_LL_TIMER)
		LL_TIM_ClearFlag_UPDATE(drv->tim);
	#endif
}
 8009294:	bf00      	nop
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <DriverSBGC32_UartTransmitData>:
 *	@param	size - size of transferred data
 *
 *	@return	Tx status
 */
ui8 DriverSBGC32_UartTransmitData (void *driver, ui8 *data, ui16 size)
{
 80092a0:	b490      	push	{r4, r7}
 80092a2:	b086      	sub	sp, #24
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	60f8      	str	r0, [r7, #12]
 80092a8:	60b9      	str	r1, [r7, #8]
 80092aa:	4613      	mov	r3, r2
 80092ac:	80fb      	strh	r3, [r7, #6]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	617b      	str	r3, [r7, #20]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->txTail != drv->txHead)
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	7c1a      	ldrb	r2, [r3, #16]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	7c5b      	ldrb	r3, [r3, #17]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d009      	beq.n	80092d2 <DriverSBGC32_UartTransmitData+0x32>
			ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80092d0:	601a      	str	r2, [r3, #0]

		/* Free space check */
		if (calcFreeSpaceFIFO(drv->txTail, drv->txHead, SBGC_DRV_TX_BUFF_TOTAL_SIZE) <= size)
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	7c5a      	ldrb	r2, [r3, #17]
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	7c1b      	ldrb	r3, [r3, #16]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d308      	bcc.n	80092f0 <DriverSBGC32_UartTransmitData+0x50>
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	7c5b      	ldrb	r3, [r3, #17]
 80092e2:	461a      	mov	r2, r3
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	7c1b      	ldrb	r3, [r3, #16]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80092ee:	e005      	b.n	80092fc <DriverSBGC32_UartTransmitData+0x5c>
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	7c1b      	ldrb	r3, [r3, #16]
 80092f4:	461a      	mov	r2, r3
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	7c5b      	ldrb	r3, [r3, #17]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	88fa      	ldrh	r2, [r7, #6]
 80092fe:	4293      	cmp	r3, r2
 8009300:	dc0f      	bgt.n	8009322 <DriverSBGC32_UartTransmitData+0x82>
		{
			/*  - - - User Tx Buffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return SBGC_DRV_TX_BUFF_OVERFLOW_FLAG;
 8009302:	2301      	movs	r3, #1
 8009304:	e025      	b.n	8009352 <DriverSBGC32_UartTransmitData+0xb2>
		}

		while (size--)
			drv->txBuffer[drv->txHead++] = *(data++);
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	60ba      	str	r2, [r7, #8]
 800930c:	697a      	ldr	r2, [r7, #20]
 800930e:	68d1      	ldr	r1, [r2, #12]
 8009310:	697a      	ldr	r2, [r7, #20]
 8009312:	7c52      	ldrb	r2, [r2, #17]
 8009314:	1c50      	adds	r0, r2, #1
 8009316:	b2c4      	uxtb	r4, r0
 8009318:	6978      	ldr	r0, [r7, #20]
 800931a:	7444      	strb	r4, [r0, #17]
 800931c:	440a      	add	r2, r1
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	7013      	strb	r3, [r2, #0]
		while (size--)
 8009322:	88fb      	ldrh	r3, [r7, #6]
 8009324:	1e5a      	subs	r2, r3, #1
 8009326:	80fa      	strh	r2, [r7, #6]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1ec      	bne.n	8009306 <DriverSBGC32_UartTransmitData+0x66>

		if (!GET_FLAG_UART_CR1_TCIE(drv->uart))
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009338:	2b00      	cmp	r3, #0
 800933a:	d109      	bne.n	8009350 <DriverSBGC32_UartTransmitData+0xb0>
			ENABLE_UART_CR1_TCIE(drv->uart);  // Enable transfer completion interrupts
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	689b      	ldr	r3, [r3, #8]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	681a      	ldr	r2, [r3, #0]
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800934e:	601a      	str	r2, [r3, #0]
			LL_DMA_EnableStream(SBGC_DMA_UART_TX, SBGC_DMA_UART_TX_STREAM);
		}

	#endif

	return SBGC_DRV_TX_OK_FLAG;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	3718      	adds	r7, #24
 8009356:	46bd      	mov	sp, r7
 8009358:	bc90      	pop	{r4, r7}
 800935a:	4770      	bx	lr

0800935c <DriverSBGC32_UART_TxCallBack>:
/**	@brief	UART transfer completion interrupts handler
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_UART_TxCallBack (void *driver)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)

		WRITE_UART_BYTE(drv->uart, drv->txBuffer[drv->txTail++] & (ui32)0xFF);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	68da      	ldr	r2, [r3, #12]
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	7c1b      	ldrb	r3, [r3, #16]
 8009370:	1c59      	adds	r1, r3, #1
 8009372:	b2c8      	uxtb	r0, r1
 8009374:	68f9      	ldr	r1, [r7, #12]
 8009376:	7408      	strb	r0, [r1, #16]
 8009378:	4413      	add	r3, r2
 800937a:	781a      	ldrb	r2, [r3, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	629a      	str	r2, [r3, #40]	; 0x28

		if (drv->txTail == drv->txHead)
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	7c1a      	ldrb	r2, [r3, #16]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	7c5b      	ldrb	r3, [r3, #17]
 800938c:	429a      	cmp	r2, r3
 800938e:	d109      	bne.n	80093a4 <DriverSBGC32_UART_TxCallBack+0x48>
		{
			DISABLE_UART_CR1_TCIE(drv->uart);  // Disable transmission complete interrupts
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	681a      	ldr	r2, [r3, #0]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093a2:	601a      	str	r2, [r3, #0]
			drv->txHead = 0;

		drv->txTail = drv->txHead;

	#endif
}
 80093a4:	bf00      	nop
 80093a6:	3714      	adds	r7, #20
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <DriverSBGC32_ClearTxBuff>:
/**	@brief	Service Tx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_ClearTxBuff (void *driver)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	60fb      	str	r3, [r7, #12]

	memset(drv->txBuffer, 0, SBGC_DRV_TX_BUFF_TOTAL_SIZE);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80093c4:	2100      	movs	r1, #0
 80093c6:	4618      	mov	r0, r3
 80093c8:	f001 fc55 	bl	800ac76 <memset>
	drv->txTail = 0;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	741a      	strb	r2, [r3, #16]
	drv->txHead = 0;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	745a      	strb	r2, [r3, #17]
}
 80093d8:	bf00      	nop
 80093da:	3710      	adds	r7, #16
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}

080093e0 <DriverSBGC32_GetAvailableBytes>:
 *	@param	*driver - main hardware driver object
 *
 *	@return	Number of available bytes (0xFFFF - overflow error)
 */
ui16 DriverSBGC32_GetAvailableBytes (void *driver)
{
 80093e0:	b480      	push	{r7}
 80093e2:	b085      	sub	sp, #20
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->rxOverflowFlag)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	7e9b      	ldrb	r3, [r3, #26]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d002      	beq.n	80093fa <DriverSBGC32_GetAvailableBytes+0x1a>
			return SBGC_RX_BUFFER_OVERFLOW_FLAG;
 80093f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80093f8:	e023      	b.n	8009442 <DriverSBGC32_GetAvailableBytes+0x62>

		ui16 availableBytes = calcFreeSpaceFIFO(drv->rxHead, drv->rxTail, SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	7e1a      	ldrb	r2, [r3, #24]
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	7e5b      	ldrb	r3, [r3, #25]
 8009402:	429a      	cmp	r2, r3
 8009404:	d30b      	bcc.n	800941e <DriverSBGC32_GetAvailableBytes+0x3e>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	7e5b      	ldrb	r3, [r3, #25]
 800940a:	b29a      	uxth	r2, r3
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	7e1b      	ldrb	r3, [r3, #24]
 8009410:	b29b      	uxth	r3, r3
 8009412:	1ad3      	subs	r3, r2, r3
 8009414:	b29b      	uxth	r3, r3
 8009416:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800941a:	b29b      	uxth	r3, r3
 800941c:	e007      	b.n	800942e <DriverSBGC32_GetAvailableBytes+0x4e>
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	7e5b      	ldrb	r3, [r3, #25]
 8009422:	b29a      	uxth	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	7e1b      	ldrb	r3, [r3, #24]
 8009428:	b29b      	uxth	r3, r3
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	b29b      	uxth	r3, r3
 800942e:	817b      	strh	r3, [r7, #10]
		availableBytes = (availableBytes == SBGC_DRV_RX_BUFF_TOTAL_SIZE) ? 0 : availableBytes;
 8009430:	897b      	ldrh	r3, [r7, #10]
 8009432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009436:	d001      	beq.n	800943c <DriverSBGC32_GetAvailableBytes+0x5c>
 8009438:	897b      	ldrh	r3, [r7, #10]
 800943a:	e000      	b.n	800943e <DriverSBGC32_GetAvailableBytes+0x5e>
 800943c:	2300      	movs	r3, #0
 800943e:	817b      	strh	r3, [r7, #10]

		return availableBytes;
 8009440:	897b      	ldrh	r3, [r7, #10]

		drv->rxHead = SBGC_DRV_RX_BUFF_TOTAL_SIZE - GET_DMA_RX_COUNTER(SBGC_DMA_UART_RX);
		return (drv->rxHead - drv->rxTail) & SBGC_DRV_RX_BUFF_SIZE_MASK;

	#endif
}
 8009442:	4618      	mov	r0, r3
 8009444:	3714      	adds	r7, #20
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <DriverSBGC32_UartReceiveByte>:
 *	@param	*data - data buffer
 *
 *	@return	Rx status
 */
ui8 DriverSBGC32_UartReceiveByte (void *driver, ui8 *data)
{
 800944e:	b480      	push	{r7}
 8009450:	b085      	sub	sp, #20
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	60fb      	str	r3, [r7, #12]

	#if (SBGC_DRV_HAL_NVIC_UART || SBGC_DRV_LL_NVIC_UART)
	/* UART Interrupts executable code */

		if (drv->rxTail == drv->rxHead)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	7e1a      	ldrb	r2, [r3, #24]
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	7e5b      	ldrb	r3, [r3, #25]
 8009464:	429a      	cmp	r2, r3
 8009466:	d101      	bne.n	800946c <DriverSBGC32_UartReceiveByte+0x1e>
		{
			/*  - - - - User Receive-Complete Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */
			return SBGC_DRV_RX_BUFF_EMPTY_FLAG;
 8009468:	2301      	movs	r3, #1
 800946a:	e013      	b.n	8009494 <DriverSBGC32_UartReceiveByte+0x46>
		}

		*data = drv->rxBuffer[drv->rxTail++];
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	695a      	ldr	r2, [r3, #20]
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	7e1b      	ldrb	r3, [r3, #24]
 8009474:	1c59      	adds	r1, r3, #1
 8009476:	b2c8      	uxtb	r0, r1
 8009478:	68f9      	ldr	r1, [r7, #12]
 800947a:	7608      	strb	r0, [r1, #24]
 800947c:	4413      	add	r3, r2
 800947e:	781a      	ldrb	r2, [r3, #0]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	701a      	strb	r2, [r3, #0]

		if (drv->rxOverflowFlag == 1)  // Reset the overflow flag
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	7e9b      	ldrb	r3, [r3, #26]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d102      	bne.n	8009492 <DriverSBGC32_UartReceiveByte+0x44>
			drv->rxOverflowFlag = 0;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	769a      	strb	r2, [r3, #26]
		if (drv->rxTail != drv->rxHead)
			drv->rxTail++;

	#endif

	return SBGC_DRV_RX_BUSY_FLAG;  // Rx ring buffer isn't empty
 8009492:	2300      	movs	r3, #0
}
 8009494:	4618      	mov	r0, r3
 8009496:	3714      	adds	r7, #20
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <DriverSBGC32_UART_RxCallBack>:
	/**	@brief	UART receive completion interrupts handler
	 *
	 *	@param	*driver - main hardware driver object
	 */
	void DriverSBGC32_UART_RxCallBack (void *driver)
	{
 80094a0:	b490      	push	{r4, r7}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
		sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	60fb      	str	r3, [r7, #12]

		if (!calcFreeSpaceFIFO(drv->rxTail, drv->rxHead, SBGC_DRV_RX_BUFF_TOTAL_SIZE))
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	7e5a      	ldrb	r2, [r3, #25]
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	7e1b      	ldrb	r3, [r3, #24]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d30c      	bcc.n	80094d2 <DriverSBGC32_UART_RxCallBack+0x32>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	7e5b      	ldrb	r3, [r3, #25]
 80094bc:	461a      	mov	r2, r3
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	7e1b      	ldrb	r3, [r3, #24]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80094c8:	bf0c      	ite	eq
 80094ca:	2301      	moveq	r3, #1
 80094cc:	2300      	movne	r3, #0
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	e008      	b.n	80094e4 <DriverSBGC32_UART_RxCallBack+0x44>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	7e1a      	ldrb	r2, [r3, #24]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	7e5b      	ldrb	r3, [r3, #25]
 80094da:	429a      	cmp	r2, r3
 80094dc:	bf0c      	ite	eq
 80094de:	2301      	moveq	r3, #1
 80094e0:	2300      	movne	r3, #0
 80094e2:	b2db      	uxtb	r3, r3
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d007      	beq.n	80094f8 <DriverSBGC32_UART_RxCallBack+0x58>
		{
			/* - - - - User rxBuffer Overflow Handler - - - - */

			/*  - - - - - - - - - - - - - - - - - - - - - - - */

			(void)READ_UART_BYTE(drv->uart);  // Prevent hardware overflow error (USART_ISR_ORE)
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24

			drv->rxOverflowFlag = 1;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2201      	movs	r2, #1
 80094f4:	769a      	strb	r2, [r3, #26]

			return;
 80094f6:	e00e      	b.n	8009516 <DriverSBGC32_UART_RxCallBack+0x76>
		}

		drv->rxBuffer[drv->rxHead++] = READ_UART_BYTE(drv->uart);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	689b      	ldr	r3, [r3, #8]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	695a      	ldr	r2, [r3, #20]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	7e5b      	ldrb	r3, [r3, #25]
 8009508:	1c59      	adds	r1, r3, #1
 800950a:	b2cc      	uxtb	r4, r1
 800950c:	68f9      	ldr	r1, [r7, #12]
 800950e:	764c      	strb	r4, [r1, #25]
 8009510:	4413      	add	r3, r2
 8009512:	b2c2      	uxtb	r2, r0
 8009514:	701a      	strb	r2, [r3, #0]
	}
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bc90      	pop	{r4, r7}
 800951c:	4770      	bx	lr

0800951e <DriverSBGC32_ClearRxBuff>:
/**	@brief	Service Rx buffer cleaner
 *
 *	@param	*driver - main hardware driver object
 */
void DriverSBGC32_ClearRxBuff (void *driver)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b084      	sub	sp, #16
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
	sbgcDriver_t *drv = (sbgcDriver_t*)driver;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	60fb      	str	r3, [r7, #12]

	memset(drv->rxBuffer, 0, SBGC_DRV_RX_BUFF_TOTAL_SIZE);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009532:	2100      	movs	r1, #0
 8009534:	4618      	mov	r0, r3
 8009536:	f001 fb9e 	bl	800ac76 <memset>
	drv->rxTail = 0;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	761a      	strb	r2, [r3, #24]
	drv->rxHead = 0;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	2200      	movs	r2, #0
 8009544:	765a      	strb	r2, [r3, #25]
	drv->rxOverflowFlag = 0;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	769a      	strb	r2, [r3, #26]
}
 800954c:	bf00      	nop
 800954e:	3710      	adds	r7, #16
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <DriverSBGC32_UartTransmitDebugData>:
 *
 *	@param	*data - debug data
 *	@param	length - size of debug data
 */
void DriverSBGC32_UartTransmitDebugData (char *data, ui16 length)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	807b      	strh	r3, [r7, #2]

			LL_USART_TransmitData8(SBGC_DEBUG_SERIAL_PORT, *(data++));
		}

	#endif
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <SerialAPI_EditAdjVarValue>:
 *
 *	@param	*adjVarGeneral - general adjustable variables structure
 *	@param	value - new value of adjustable variable
 */
void SerialAPI_EditAdjVarValue (sbgcAdjVarGeneral_t *adjVarGeneral, i32 value)
{
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	6039      	str	r1, [r7, #0]
		/* Values' borders checking */
		value = constrain_(value, adjVarGeneral->minValue, adjVarGeneral->maxValue);

	#endif

	adjVarGeneral->value = value;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	683a      	ldr	r2, [r7, #0]
 800957a:	60da      	str	r2, [r3, #12]
	adjVarGeneral->syncFlag = AV_NOT_SYNCHRONIZED;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	741a      	strb	r2, [r3, #16]
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <PostSetAdjVarValues>:
 *			See @ref SBGC32_SetAdjVarValues function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostSetAdjVarValues (sbgcGeneral_t *gSBGC)
{
 800958e:	b580      	push	{r7, lr}
 8009590:	b086      	sub	sp, #24
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
	sbgcAdjVarGeneral_t *adjVarGeneral = (sbgcAdjVarGeneral_t*)serialAPI_CurCmdDest_;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	695b      	ldr	r3, [r3, #20]
 800959e:	613b      	str	r3, [r7, #16]

	ui8 adjVarQuan = gSBGC->_api->readByte(gSBGC);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a6:	6878      	ldr	r0, [r7, #4]
 80095a8:	4798      	blx	r3
 80095aa:	4603      	mov	r3, r0
 80095ac:	73fb      	strb	r3, [r7, #15]

	if (serialAPI_CurCmd_->_destinationSize < (sizeof(sbgcAdjVarGeneral_t) * adjVarQuan))
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	8b1b      	ldrh	r3, [r3, #24]
 80095b6:	4619      	mov	r1, r3
 80095b8:	7bfa      	ldrb	r2, [r7, #15]
 80095ba:	4613      	mov	r3, r2
 80095bc:	009b      	lsls	r3, r3, #2
 80095be:	4413      	add	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4299      	cmp	r1, r3
 80095c4:	d201      	bcs.n	80095ca <PostSetAdjVarValues+0x3c>
		SerialAPI_FatalErrorHandler();
 80095c6:	f7f8 fc6d 	bl	8001ea4 <SerialAPI_FatalErrorHandler>

	for (ui8 i = 0; i < adjVarQuan; i++)
 80095ca:	2300      	movs	r3, #0
 80095cc:	75fb      	strb	r3, [r7, #23]
 80095ce:	e016      	b.n	80095fe <PostSetAdjVarValues+0x70>
	{
		adjVarGeneral[i].syncFlag = AV_SYNCHRONIZED;
 80095d0:	7dfa      	ldrb	r2, [r7, #23]
 80095d2:	4613      	mov	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4413      	add	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	461a      	mov	r2, r3
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	4413      	add	r3, r2
 80095e0:	2201      	movs	r2, #1
 80095e2:	741a      	strb	r2, [r3, #16]
		adjVarGeneral[i].saveFlag = AV_NOT_SAVED;
 80095e4:	7dfa      	ldrb	r2, [r7, #23]
 80095e6:	4613      	mov	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4413      	add	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	461a      	mov	r2, r3
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	4413      	add	r3, r2
 80095f4:	2201      	movs	r2, #1
 80095f6:	745a      	strb	r2, [r3, #17]
	for (ui8 i = 0; i < adjVarQuan; i++)
 80095f8:	7dfb      	ldrb	r3, [r7, #23]
 80095fa:	3301      	adds	r3, #1
 80095fc:	75fb      	strb	r3, [r7, #23]
 80095fe:	7dfa      	ldrb	r2, [r7, #23]
 8009600:	7bfb      	ldrb	r3, [r7, #15]
 8009602:	429a      	cmp	r2, r3
 8009604:	d3e4      	bcc.n	80095d0 <PostSetAdjVarValues+0x42>
	}
}
 8009606:	bf00      	nop
 8009608:	bf00      	nop
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <SBGC32_SetAdjVarValues>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_SetAdjVarValues (sbgcGeneral_t *gSBGC, sbgcAdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan, sbgcConfirm_t *confirm
											/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009610:	b590      	push	{r4, r7, lr}
 8009612:	b087      	sub	sp, #28
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	4613      	mov	r3, r2
 800961e:	71fb      	strb	r3, [r7, #7]
	sbgcAssertAdjVars(adjVarGeneral, adjVarQuan)
	sbgcAssertParam(adjVarQuan, 1 , SBGC_ADJ_VARS_MAX_NUM_PACKET)

	ui8 numParams = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	75fb      	strb	r3, [r7, #23]

	for (ui8 i = 0; i < adjVarQuan; i++)
 8009624:	2300      	movs	r3, #0
 8009626:	75bb      	strb	r3, [r7, #22]
 8009628:	e010      	b.n	800964c <SBGC32_SetAdjVarValues+0x3c>
		if (adjVarGeneral[i].syncFlag == AV_NOT_SYNCHRONIZED)
 800962a:	7dba      	ldrb	r2, [r7, #22]
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	461a      	mov	r2, r3
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	4413      	add	r3, r2
 800963a:	7c1b      	ldrb	r3, [r3, #16]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d102      	bne.n	8009646 <SBGC32_SetAdjVarValues+0x36>
			numParams++;
 8009640:	7dfb      	ldrb	r3, [r7, #23]
 8009642:	3301      	adds	r3, #1
 8009644:	75fb      	strb	r3, [r7, #23]
	for (ui8 i = 0; i < adjVarQuan; i++)
 8009646:	7dbb      	ldrb	r3, [r7, #22]
 8009648:	3301      	adds	r3, #1
 800964a:	75bb      	strb	r3, [r7, #22]
 800964c:	7dba      	ldrb	r2, [r7, #22]
 800964e:	79fb      	ldrb	r3, [r7, #7]
 8009650:	429a      	cmp	r2, r3
 8009652:	d3ea      	bcc.n	800962a <SBGC32_SetAdjVarValues+0x1a>

	#if (SBGC_NEED_ASSERTS)
        if (numParams == 0) return sbgcCOMMAND_PARAM_ASSERT_ERROR;
	#endif

	gSBGC->_api->startWrite(gSBGC, CMD_SET_ADJ_VARS_VAL SBGC_ADVANCED_ARGS__);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800965a:	211f      	movs	r1, #31
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, numParams);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009666:	7dfa      	ldrb	r2, [r7, #23]
 8009668:	4611      	mov	r1, r2
 800966a:	68f8      	ldr	r0, [r7, #12]
 800966c:	4798      	blx	r3

	for (ui8 i = 0; i < adjVarQuan; i++)
 800966e:	2300      	movs	r3, #0
 8009670:	757b      	strb	r3, [r7, #21]
 8009672:	e02d      	b.n	80096d0 <SBGC32_SetAdjVarValues+0xc0>
		if (adjVarGeneral[i].syncFlag == AV_NOT_SYNCHRONIZED)
 8009674:	7d7a      	ldrb	r2, [r7, #21]
 8009676:	4613      	mov	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	461a      	mov	r2, r3
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	4413      	add	r3, r2
 8009684:	7c1b      	ldrb	r3, [r3, #16]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d11f      	bne.n	80096ca <SBGC32_SetAdjVarValues+0xba>
		{
			gSBGC->_api->writeByte(gSBGC, adjVarGeneral[i].ID);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009690:	7d7a      	ldrb	r2, [r7, #21]
 8009692:	4613      	mov	r3, r2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	461a      	mov	r2, r3
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	4413      	add	r3, r2
 80096a0:	f993 3000 	ldrsb.w	r3, [r3]
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	4619      	mov	r1, r3
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	47a0      	blx	r4
			gSBGC->_api->writeLong(gSBGC, adjVarGeneral[i].value);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	6d5c      	ldr	r4, [r3, #84]	; 0x54
 80096b2:	7d7a      	ldrb	r2, [r7, #21]
 80096b4:	4613      	mov	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	4413      	add	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	461a      	mov	r2, r3
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	4413      	add	r3, r2
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	4619      	mov	r1, r3
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	47a0      	blx	r4
	for (ui8 i = 0; i < adjVarQuan; i++)
 80096ca:	7d7b      	ldrb	r3, [r7, #21]
 80096cc:	3301      	adds	r3, #1
 80096ce:	757b      	strb	r3, [r7, #21]
 80096d0:	7d7a      	ldrb	r2, [r7, #21]
 80096d2:	79fb      	ldrb	r3, [r7, #7]
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d3cd      	bcc.n	8009674 <SBGC32_SetAdjVarValues+0x64>
		}

	gSBGC->_api->assignEvent(gSBGC, PostSetAdjVarValues, adjVarGeneral, sizeof(sbgcAdjVarGeneral_t) * adjVarQuan);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	461a      	mov	r2, r3
 80096e6:	0092      	lsls	r2, r2, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	4910      	ldr	r1, [pc, #64]	; (8009734 <SBGC32_SetAdjVarValues+0x124>)
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	47a0      	blx	r4
	gSBGC->_api->finishWrite(gSBGC);
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_SET_ADJ_VARS_VAL SBGC_ADVANCED_ARGS__);
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009708:	221f      	movs	r2, #31
 800970a:	6839      	ldr	r1, [r7, #0]
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009718:	68f8      	ldr	r0, [r7, #12]
 800971a:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	4798      	blx	r3
 8009728:	4603      	mov	r3, r0
}
 800972a:	4618      	mov	r0, r3
 800972c:	371c      	adds	r7, #28
 800972e:	46bd      	mov	sp, r7
 8009730:	bd90      	pop	{r4, r7, pc}
 8009732:	bf00      	nop
 8009734:	0800958f 	.word	0x0800958f

08009738 <PostGetAdjVarValues>:
 *			See @ref SBGC32_GetAdjVarValues function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostGetAdjVarValues (sbgcGeneral_t *gSBGC)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
	sbgcAdjVarGeneral_t *adjVarGeneral = (sbgcAdjVarGeneral_t*)serialAPI_CurCmdDest_;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	685b      	ldr	r3, [r3, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	613b      	str	r3, [r7, #16]

	ui8 adjVarQuan = gSBGC->_api->readByte(gSBGC);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	4798      	blx	r3
 8009754:	4603      	mov	r3, r0
 8009756:	73fb      	strb	r3, [r7, #15]

	if (serialAPI_CurCmd_->_destinationSize < (sizeof(sbgcAdjVarGeneral_t) * adjVarQuan))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	8b1b      	ldrh	r3, [r3, #24]
 8009760:	4619      	mov	r1, r3
 8009762:	7bfa      	ldrb	r2, [r7, #15]
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4299      	cmp	r1, r3
 800976e:	d201      	bcs.n	8009774 <PostGetAdjVarValues+0x3c>
		SerialAPI_FatalErrorHandler();
 8009770:	f7f8 fb98 	bl	8001ea4 <SerialAPI_FatalErrorHandler>

	for (ui8 i = 0; i < adjVarQuan; i++)
 8009774:	2300      	movs	r3, #0
 8009776:	75fb      	strb	r3, [r7, #23]
 8009778:	e021      	b.n	80097be <PostGetAdjVarValues+0x86>
				(void)gSBGC->_api->readLong(gSBGC);  // skip
				continue;
			}

		#else
			(void)gSBGC->_api->readByte(gSBGC);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	4798      	blx	r3
		#endif

		adjVarGeneral[i].value = (i32)gSBGC->_api->readLong(gSBGC);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	4798      	blx	r3
 800978e:	4601      	mov	r1, r0
 8009790:	7dfa      	ldrb	r2, [r7, #23]
 8009792:	4613      	mov	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	4413      	add	r3, r2
 8009798:	009b      	lsls	r3, r3, #2
 800979a:	461a      	mov	r2, r3
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	4413      	add	r3, r2
 80097a0:	460a      	mov	r2, r1
 80097a2:	60da      	str	r2, [r3, #12]
		adjVarGeneral[i].syncFlag = AV_SYNCHRONIZED;
 80097a4:	7dfa      	ldrb	r2, [r7, #23]
 80097a6:	4613      	mov	r3, r2
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	461a      	mov	r2, r3
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	4413      	add	r3, r2
 80097b4:	2201      	movs	r2, #1
 80097b6:	741a      	strb	r2, [r3, #16]
	for (ui8 i = 0; i < adjVarQuan; i++)
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	3301      	adds	r3, #1
 80097bc:	75fb      	strb	r3, [r7, #23]
 80097be:	7dfa      	ldrb	r2, [r7, #23]
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d3d9      	bcc.n	800977a <PostGetAdjVarValues+0x42>
	}
}
 80097c6:	bf00      	nop
 80097c8:	bf00      	nop
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <SBGC32_GetAdjVarValues>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_GetAdjVarValues (sbgcGeneral_t *gSBGC, sbgcAdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan
											/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80097d0:	b590      	push	{r4, r7, lr}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	4613      	mov	r3, r2
 80097dc:	71fb      	strb	r3, [r7, #7]
	sbgcAssertAdjVars(adjVarGeneral, adjVarQuan)
	sbgcAssertParam(adjVarQuan, 1, SBGC_ADJ_VARS_MAX_NUM_PACKET)

	gSBGC->_api->startWrite(gSBGC, CMD_GET_ADJ_VARS_VAL SBGC_ADVANCED_ARGS__);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	685b      	ldr	r3, [r3, #4]
 80097e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097e4:	2140      	movs	r1, #64	; 0x40
 80097e6:	68f8      	ldr	r0, [r7, #12]
 80097e8:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, adjVarQuan);
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097f0:	79fa      	ldrb	r2, [r7, #7]
 80097f2:	4611      	mov	r1, r2
 80097f4:	68f8      	ldr	r0, [r7, #12]
 80097f6:	4798      	blx	r3

	for (ui8 i = 0; i < adjVarQuan; i++)
 80097f8:	2300      	movs	r3, #0
 80097fa:	75fb      	strb	r3, [r7, #23]
 80097fc:	e013      	b.n	8009826 <SBGC32_GetAdjVarValues+0x56>
		gSBGC->_api->writeByte(gSBGC, adjVarGeneral[i].ID);
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	685b      	ldr	r3, [r3, #4]
 8009802:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009804:	7dfa      	ldrb	r2, [r7, #23]
 8009806:	4613      	mov	r3, r2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	009b      	lsls	r3, r3, #2
 800980e:	461a      	mov	r2, r3
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4413      	add	r3, r2
 8009814:	f993 3000 	ldrsb.w	r3, [r3]
 8009818:	b2db      	uxtb	r3, r3
 800981a:	4619      	mov	r1, r3
 800981c:	68f8      	ldr	r0, [r7, #12]
 800981e:	47a0      	blx	r4
	for (ui8 i = 0; i < adjVarQuan; i++)
 8009820:	7dfb      	ldrb	r3, [r7, #23]
 8009822:	3301      	adds	r3, #1
 8009824:	75fb      	strb	r3, [r7, #23]
 8009826:	7dfa      	ldrb	r2, [r7, #23]
 8009828:	79fb      	ldrb	r3, [r7, #7]
 800982a:	429a      	cmp	r2, r3
 800982c:	d3e7      	bcc.n	80097fe <SBGC32_GetAdjVarValues+0x2e>

	gSBGC->_api->finishWrite(gSBGC);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009834:	68f8      	ldr	r0, [r7, #12]
 8009836:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_SET_ADJ_VARS_VAL SBGC_ADVANCED_ARGS__);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800983e:	211f      	movs	r1, #31
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, PostGetAdjVarValues, adjVarGeneral, sizeof(sbgcAdjVarGeneral_t) * adjVarQuan);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800984c:	79fb      	ldrb	r3, [r7, #7]
 800984e:	b29b      	uxth	r3, r3
 8009850:	461a      	mov	r2, r3
 8009852:	0092      	lsls	r2, r2, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	b29b      	uxth	r3, r3
 800985a:	68ba      	ldr	r2, [r7, #8]
 800985c:	4913      	ldr	r1, [pc, #76]	; (80098ac <SBGC32_GetAdjVarValues+0xdc>)
 800985e:	68f8      	ldr	r0, [r7, #12]
 8009860:	47a0      	blx	r4
	gSBGC->_api->definePayload(gSBGC, (adjVarQuan * (4 + 1)) + 1);
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	685b      	ldr	r3, [r3, #4]
 8009866:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800986a:	79fb      	ldrb	r3, [r7, #7]
 800986c:	4619      	mov	r1, r3
 800986e:	0089      	lsls	r1, r1, #2
 8009870:	440b      	add	r3, r1
 8009872:	b2db      	uxtb	r3, r3
 8009874:	3301      	adds	r3, #1
 8009876:	b2db      	uxtb	r3, r3
 8009878:	4619      	mov	r1, r3
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	4790      	blx	r2
	gSBGC->_api->finishRead(gSBGC);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	685b      	ldr	r3, [r3, #4]
 8009882:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009892:	68f8      	ldr	r0, [r7, #12]
 8009894:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800989e:	68f8      	ldr	r0, [r7, #12]
 80098a0:	4798      	blx	r3
 80098a2:	4603      	mov	r3, r0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	371c      	adds	r7, #28
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd90      	pop	{r4, r7, pc}
 80098ac:	08009739 	.word	0x08009739

080098b0 <PostSaveAdjVarsToEEPROM>:
 *			See @ref SBGC32_SaveAdjVarsToEEPROM function
 *
 *	@param	*gSBGC - serial connection descriptor
 */
static void PostSaveAdjVarsToEEPROM (sbgcGeneral_t *gSBGC)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
	sbgcAdjVarGeneral_t *adjVarGeneral = (sbgcAdjVarGeneral_t*)serialAPI_CurCmdDest_;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098be:	695b      	ldr	r3, [r3, #20]
 80098c0:	60bb      	str	r3, [r7, #8]

	ui8 adjVarQuan = serialAPI_CurCmd_->_payloadSize;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c8:	7f1b      	ldrb	r3, [r3, #28]
 80098ca:	73fb      	strb	r3, [r7, #15]

	if (serialAPI_CurCmd_->_destinationSize < (sizeof(sbgcAdjVarGeneral_t) * adjVarQuan))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d2:	8b1b      	ldrh	r3, [r3, #24]
 80098d4:	4619      	mov	r1, r3
 80098d6:	7bfa      	ldrb	r2, [r7, #15]
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4299      	cmp	r1, r3
 80098e2:	d201      	bcs.n	80098e8 <PostSaveAdjVarsToEEPROM+0x38>
		SerialAPI_FatalErrorHandler();
 80098e4:	f7f8 fade 	bl	8001ea4 <SerialAPI_FatalErrorHandler>

	ui8 i = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	73bb      	strb	r3, [r7, #14]

	while (adjVarQuan)
 80098ec:	e016      	b.n	800991c <PostSaveAdjVarsToEEPROM+0x6c>
	{
		adjVarGeneral[i++].saveFlag = AV_SAVED;
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	73ba      	strb	r2, [r7, #14]
 80098f4:	461a      	mov	r2, r3
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	461a      	mov	r2, r3
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	4413      	add	r3, r2
 8009904:	2200      	movs	r2, #0
 8009906:	745a      	strb	r2, [r3, #17]
		adjVarQuan--;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	3b01      	subs	r3, #1
 800990c:	73fb      	strb	r3, [r7, #15]

		if (i >= (gSBGC->_api->adjVarsNumber - 1))
 800990e:	7bba      	ldrb	r2, [r7, #14]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	685b      	ldr	r3, [r3, #4]
 8009914:	7c1b      	ldrb	r3, [r3, #16]
 8009916:	3b01      	subs	r3, #1
 8009918:	429a      	cmp	r2, r3
 800991a:	da03      	bge.n	8009924 <PostSaveAdjVarsToEEPROM+0x74>
	while (adjVarQuan)
 800991c:	7bfb      	ldrb	r3, [r7, #15]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1e5      	bne.n	80098ee <PostSaveAdjVarsToEEPROM+0x3e>
 8009922:	e000      	b.n	8009926 <PostSaveAdjVarsToEEPROM+0x76>
			return;
 8009924:	bf00      	nop
	}
}
 8009926:	3710      	adds	r7, #16
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <SBGC32_SaveAdjVarsToEEPROM>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_SaveAdjVarsToEEPROM (sbgcGeneral_t *gSBGC, sbgcAdjVarGeneral_t *adjVarGeneral, ui8 adjVarQuan, sbgcConfirm_t *confirm
												/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 800992c:	b590      	push	{r4, r7, lr}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	603b      	str	r3, [r7, #0]
 8009938:	4613      	mov	r3, r2
 800993a:	71fb      	strb	r3, [r7, #7]
				return sbgcCOMMAND_NOTHING_TO_CHANGE;
		}

	#endif

	gSBGC->_api->startWrite(gSBGC, CMD_SAVE_PARAMS_3 SBGC_ADVANCED_ARGS__);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009942:	2120      	movs	r1, #32
 8009944:	68f8      	ldr	r0, [r7, #12]
 8009946:	4798      	blx	r3

	for (ui8 i = 0; i < adjVarQuan; i++)
 8009948:	2300      	movs	r3, #0
 800994a:	75fb      	strb	r3, [r7, #23]
 800994c:	e01e      	b.n	800998c <SBGC32_SaveAdjVarsToEEPROM+0x60>
		if (adjVarGeneral[i].saveFlag == AV_NOT_SAVED)
 800994e:	7dfa      	ldrb	r2, [r7, #23]
 8009950:	4613      	mov	r3, r2
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	4413      	add	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	461a      	mov	r2, r3
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	4413      	add	r3, r2
 800995e:	7c5b      	ldrb	r3, [r3, #17]
 8009960:	2b01      	cmp	r3, #1
 8009962:	d110      	bne.n	8009986 <SBGC32_SaveAdjVarsToEEPROM+0x5a>
			gSBGC->_api->writeByte(gSBGC, adjVarGeneral[i].ID);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	685b      	ldr	r3, [r3, #4]
 8009968:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800996a:	7dfa      	ldrb	r2, [r7, #23]
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	461a      	mov	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4413      	add	r3, r2
 800997a:	f993 3000 	ldrsb.w	r3, [r3]
 800997e:	b2db      	uxtb	r3, r3
 8009980:	4619      	mov	r1, r3
 8009982:	68f8      	ldr	r0, [r7, #12]
 8009984:	47a0      	blx	r4
	for (ui8 i = 0; i < adjVarQuan; i++)
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	3301      	adds	r3, #1
 800998a:	75fb      	strb	r3, [r7, #23]
 800998c:	7dfa      	ldrb	r2, [r7, #23]
 800998e:	79fb      	ldrb	r3, [r7, #7]
 8009990:	429a      	cmp	r2, r3
 8009992:	d3dc      	bcc.n	800994e <SBGC32_SaveAdjVarsToEEPROM+0x22>

	gSBGC->_api->assignEvent(gSBGC, PostSaveAdjVarsToEEPROM, adjVarGeneral, sizeof(sbgcAdjVarGeneral_t) * adjVarQuan);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 800999c:	79fb      	ldrb	r3, [r7, #7]
 800999e:	b29b      	uxth	r3, r3
 80099a0:	461a      	mov	r2, r3
 80099a2:	0092      	lsls	r2, r2, #2
 80099a4:	4413      	add	r3, r2
 80099a6:	009b      	lsls	r3, r3, #2
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	68ba      	ldr	r2, [r7, #8]
 80099ac:	4910      	ldr	r1, [pc, #64]	; (80099f0 <SBGC32_SaveAdjVarsToEEPROM+0xc4>)
 80099ae:	68f8      	ldr	r0, [r7, #12]
 80099b0:	47a0      	blx	r4
	gSBGC->_api->finishWrite(gSBGC);
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_SAVE_PARAMS_3 SBGC_ADVANCED_ARGS__);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	685b      	ldr	r3, [r3, #4]
 80099c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c4:	2220      	movs	r2, #32
 80099c6:	6839      	ldr	r1, [r7, #0]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099e0:	68f8      	ldr	r0, [r7, #12]
 80099e2:	4798      	blx	r3
 80099e4:	4603      	mov	r3, r0
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	371c      	adds	r7, #28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd90      	pop	{r4, r7, pc}
 80099ee:	bf00      	nop
 80099f0:	080098b1 	.word	0x080098b1

080099f4 <SBGC32_Control>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_Control (sbgcGeneral_t *gSBGC, const sbgcControl_t *control
									/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b082      	sub	sp, #8
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
	gSBGC->_api->startWrite(gSBGC, CMD_CONTROL SBGC_ADVANCED_ARGS__);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a04:	2143      	movs	r1, #67	; 0x43
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	4798      	blx	r3
	gSBGC->_api->writeBuff(gSBGC, control, sizeof(sbgcControl_t));
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a10:	220f      	movs	r2, #15
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685b      	ldr	r3, [r3, #4]
 8009a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	4798      	blx	r3
 8009a2e:	4603      	mov	r3, r0
}
 8009a30:	4618      	mov	r0, r3
 8009a32:	3708      	adds	r7, #8
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <SBGC32_ControlConfig>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ControlConfig (sbgcGeneral_t *gSBGC, const sbgcControlConfig_t *controlConfig, sbgcConfirm_t *confirm
										  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
	sbgcAssertFrwVer(2610)

	gSBGC->_api->startWrite(gSBGC, CMD_CONTROL_CONFIG SBGC_ADVANCED_ARGS__);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a4a:	215a      	movs	r1, #90	; 0x5a
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	4798      	blx	r3
	gSBGC->_api->writeBuff(gSBGC, controlConfig, sizeof(sbgcControlConfig_t));
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009a56:	2229      	movs	r2, #41	; 0x29
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_CONTROL_CONFIG SBGC_ADVANCED_ARGS__);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a70:	225a      	movs	r2, #90	; 0x5a
 8009a72:	6879      	ldr	r1, [r7, #4]
 8009a74:	68f8      	ldr	r0, [r7, #12]
 8009a76:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	685b      	ldr	r3, [r3, #4]
 8009a7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a80:	68f8      	ldr	r0, [r7, #12]
 8009a82:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	685b      	ldr	r3, [r3, #4]
 8009a88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a8c:	68f8      	ldr	r0, [r7, #12]
 8009a8e:	4798      	blx	r3
 8009a90:	4603      	mov	r3, r0
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3710      	adds	r7, #16
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}

08009a9a <SBGC32_ReadRealTimeData4>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ReadRealTimeData4 (sbgcGeneral_t *gSBGC, sbgcRealTimeData_t *realTimeData
											  /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009a9a:	b590      	push	{r4, r7, lr}
 8009a9c:	b083      	sub	sp, #12
 8009a9e:	af00      	add	r7, sp, #0
 8009aa0:	6078      	str	r0, [r7, #4]
 8009aa2:	6039      	str	r1, [r7, #0]
	gSBGC->_api->startWrite(gSBGC, CMD_REALTIME_DATA_4 SBGC_ADVANCED_ARGS__);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009aaa:	2119      	movs	r1, #25
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_REALTIME_DATA_4 SBGC_ADVANCED_ARGS__);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ac0:	2119      	movs	r1, #25
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, NULL, realTimeData, sizeof(sbgcRealTimeData_t));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8009ace:	237c      	movs	r3, #124	; 0x7c
 8009ad0:	683a      	ldr	r2, [r7, #0]
 8009ad2:	2100      	movs	r1, #0
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	4798      	blx	r3
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	370c      	adds	r7, #12
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd90      	pop	{r4, r7, pc}

08009b06 <SBGC32_GetAnglesExt>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_GetAnglesExt (sbgcGeneral_t *gSBGC, sbgcGetAnglesExt_t *getAnglesExt
										 /** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009b06:	b590      	push	{r4, r7, lr}
 8009b08:	b083      	sub	sp, #12
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	6039      	str	r1, [r7, #0]
	gSBGC->_api->startWrite(gSBGC, CMD_GET_ANGLES_EXT SBGC_ADVANCED_ARGS__);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b16:	213d      	movs	r1, #61	; 0x3d
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	4798      	blx	r3

	gSBGC->_api->startRead(gSBGC, CMD_GET_ANGLES_EXT SBGC_ADVANCED_ARGS__);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b2c:	213d      	movs	r1, #61	; 0x3d
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	4798      	blx	r3
	gSBGC->_api->assignEvent(gSBGC, NULL, getAnglesExt, sizeof(sbgcGetAnglesExt_t));
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
 8009b3a:	2336      	movs	r3, #54	; 0x36
 8009b3c:	683a      	ldr	r2, [r7, #0]
 8009b3e:	2100      	movs	r1, #0
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	47a0      	blx	r4
	gSBGC->_api->finishRead(gSBGC);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	685b      	ldr	r3, [r3, #4]
 8009b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	685b      	ldr	r3, [r3, #4]
 8009b60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	4798      	blx	r3
 8009b68:	4603      	mov	r3, r0
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	370c      	adds	r7, #12
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd90      	pop	{r4, r7, pc}

08009b72 <SBGC32_ExecuteMenu>:
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_ExecuteMenu (sbgcGeneral_t *gSBGC, sbgcMenuCommand_t menuCommandID, sbgcConfirm_t *confirm
										/** @cond */ SBGC_ADVANCED_PARAMS__ /** @endcond */ )
{
 8009b72:	b580      	push	{r7, lr}
 8009b74:	b084      	sub	sp, #16
 8009b76:	af00      	add	r7, sp, #0
 8009b78:	60f8      	str	r0, [r7, #12]
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	607a      	str	r2, [r7, #4]
 8009b7e:	72fb      	strb	r3, [r7, #11]
	sbgcAssertParam(menuCommandID, MENU_CMD_NO, MENU_CMD_SET_RC_TRIM)

	gSBGC->_api->startWrite(gSBGC, CMD_EXECUTE_MENU SBGC_ADVANCED_ARGS__);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b86:	2145      	movs	r1, #69	; 0x45
 8009b88:	68f8      	ldr	r0, [r7, #12]
 8009b8a:	4798      	blx	r3
	gSBGC->_api->writeByte(gSBGC, menuCommandID);
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b92:	7afa      	ldrb	r2, [r7, #11]
 8009b94:	4611      	mov	r1, r2
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	4798      	blx	r3
	gSBGC->_api->finishWrite(gSBGC);
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ba0:	68f8      	ldr	r0, [r7, #12]
 8009ba2:	4798      	blx	r3

	gSBGC->_api->addConfirm(gSBGC, confirm, CMD_EXECUTE_MENU SBGC_ADVANCED_ARGS__);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bac:	2245      	movs	r2, #69	; 0x45
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	68f8      	ldr	r0, [r7, #12]
 8009bb2:	4798      	blx	r3

	gSBGC->_api->bound(gSBGC);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	4798      	blx	r3

	serialAPI_GiveToken()

	return gSBGC->_api->exit(gSBGC);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009bc8:	68f8      	ldr	r0, [r7, #12]
 8009bca:	4798      	blx	r3
 8009bcc:	4603      	mov	r3, r0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3710      	adds	r7, #16
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}
	...

08009bd8 <PrivateSBGC32_EnterInit>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t PrivateSBGC32_EnterInit (sbgcGeneral_t *gSBGC)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af02      	add	r7, sp, #8
 8009bde:	6078      	str	r0, [r7, #4]

			DriverSBGC32_Init(&gSBGC->_ll->drv, SBGC_SERIAL_PORT, SBGC_SERIAL_SPEED);

		#elif (SBGC_USE_STM32_DRIVER)

			SerialAPI_LinkDriver(gSBGC, DriverSBGC32_UartTransmitData, DriverSBGC32_UartReceiveByte, DriverSBGC32_GetAvailableBytes,
 8009be0:	4b0c      	ldr	r3, [pc, #48]	; (8009c14 <PrivateSBGC32_EnterInit+0x3c>)
 8009be2:	9301      	str	r3, [sp, #4]
 8009be4:	4b0c      	ldr	r3, [pc, #48]	; (8009c18 <PrivateSBGC32_EnterInit+0x40>)
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	4b0c      	ldr	r3, [pc, #48]	; (8009c1c <PrivateSBGC32_EnterInit+0x44>)
 8009bea:	4a0d      	ldr	r2, [pc, #52]	; (8009c20 <PrivateSBGC32_EnterInit+0x48>)
 8009bec:	490d      	ldr	r1, [pc, #52]	; (8009c24 <PrivateSBGC32_EnterInit+0x4c>)
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f7ff fa02 	bl	8008ff8 <SerialAPI_LinkDriver>
								 DriverSBGC32_UartTransmitDebugData, DriverSBGC32_GetTimeMs);

			DriverSBGC32_Init(&gSBGC->_ll->drv, SBGC_SERIAL_PORT, SBGC_REFERENCE_TIMER);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a0b      	ldr	r2, [pc, #44]	; (8009c28 <PrivateSBGC32_EnterInit+0x50>)
 8009bfa:	490c      	ldr	r1, [pc, #48]	; (8009c2c <PrivateSBGC32_EnterInit+0x54>)
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7ff fad1 	bl	80091a4 <DriverSBGC32_Init>

		#endif
	#endif

	return SBGC32_SetupLibrary(gSBGC);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f7ff f8b4 	bl	8008d70 <SBGC32_SetupLibrary>
 8009c08:	4603      	mov	r3, r0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}
 8009c12:	bf00      	nop
 8009c14:	08009263 	.word	0x08009263
 8009c18:	08009555 	.word	0x08009555
 8009c1c:	080093e1 	.word	0x080093e1
 8009c20:	0800944f 	.word	0x0800944f
 8009c24:	080092a1 	.word	0x080092a1
 8009c28:	200004a4 	.word	0x200004a4
 8009c2c:	200004f0 	.word	0x200004f0

08009c30 <SBGC32_Init>:
 *	@param	*gSBGC - serial connection descriptor
 *
 *	@return	Communication status
 */
sbgcCommandStatus_t SBGC32_Init (sbgcGeneral_t *gSBGC)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b082      	sub	sp, #8
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
	#endif

	#if (SBGC_USES_OS_SUPPORT)
		SystemSBGC32_Init(gSBGC);
	#else
		return PrivateSBGC32_EnterInit(gSBGC);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff ffcd 	bl	8009bd8 <PrivateSBGC32_EnterInit>
 8009c3e:	4603      	mov	r3, r0
	#endif

	return sbgcCOMMAND_OK;
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}

08009c48 <malloc>:
 8009c48:	4b02      	ldr	r3, [pc, #8]	; (8009c54 <malloc+0xc>)
 8009c4a:	4601      	mov	r1, r0
 8009c4c:	6818      	ldr	r0, [r3, #0]
 8009c4e:	f000 b823 	b.w	8009c98 <_malloc_r>
 8009c52:	bf00      	nop
 8009c54:	20000104 	.word	0x20000104

08009c58 <sbrk_aligned>:
 8009c58:	b570      	push	{r4, r5, r6, lr}
 8009c5a:	4e0e      	ldr	r6, [pc, #56]	; (8009c94 <sbrk_aligned+0x3c>)
 8009c5c:	460c      	mov	r4, r1
 8009c5e:	6831      	ldr	r1, [r6, #0]
 8009c60:	4605      	mov	r5, r0
 8009c62:	b911      	cbnz	r1, 8009c6a <sbrk_aligned+0x12>
 8009c64:	f001 f848 	bl	800acf8 <_sbrk_r>
 8009c68:	6030      	str	r0, [r6, #0]
 8009c6a:	4621      	mov	r1, r4
 8009c6c:	4628      	mov	r0, r5
 8009c6e:	f001 f843 	bl	800acf8 <_sbrk_r>
 8009c72:	1c43      	adds	r3, r0, #1
 8009c74:	d00a      	beq.n	8009c8c <sbrk_aligned+0x34>
 8009c76:	1cc4      	adds	r4, r0, #3
 8009c78:	f024 0403 	bic.w	r4, r4, #3
 8009c7c:	42a0      	cmp	r0, r4
 8009c7e:	d007      	beq.n	8009c90 <sbrk_aligned+0x38>
 8009c80:	1a21      	subs	r1, r4, r0
 8009c82:	4628      	mov	r0, r5
 8009c84:	f001 f838 	bl	800acf8 <_sbrk_r>
 8009c88:	3001      	adds	r0, #1
 8009c8a:	d101      	bne.n	8009c90 <sbrk_aligned+0x38>
 8009c8c:	f04f 34ff 	mov.w	r4, #4294967295
 8009c90:	4620      	mov	r0, r4
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	20000610 	.word	0x20000610

08009c98 <_malloc_r>:
 8009c98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c9c:	1ccd      	adds	r5, r1, #3
 8009c9e:	f025 0503 	bic.w	r5, r5, #3
 8009ca2:	3508      	adds	r5, #8
 8009ca4:	2d0c      	cmp	r5, #12
 8009ca6:	bf38      	it	cc
 8009ca8:	250c      	movcc	r5, #12
 8009caa:	2d00      	cmp	r5, #0
 8009cac:	4607      	mov	r7, r0
 8009cae:	db01      	blt.n	8009cb4 <_malloc_r+0x1c>
 8009cb0:	42a9      	cmp	r1, r5
 8009cb2:	d905      	bls.n	8009cc0 <_malloc_r+0x28>
 8009cb4:	230c      	movs	r3, #12
 8009cb6:	603b      	str	r3, [r7, #0]
 8009cb8:	2600      	movs	r6, #0
 8009cba:	4630      	mov	r0, r6
 8009cbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cc0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009d94 <_malloc_r+0xfc>
 8009cc4:	f000 f868 	bl	8009d98 <__malloc_lock>
 8009cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8009ccc:	461c      	mov	r4, r3
 8009cce:	bb5c      	cbnz	r4, 8009d28 <_malloc_r+0x90>
 8009cd0:	4629      	mov	r1, r5
 8009cd2:	4638      	mov	r0, r7
 8009cd4:	f7ff ffc0 	bl	8009c58 <sbrk_aligned>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	4604      	mov	r4, r0
 8009cdc:	d155      	bne.n	8009d8a <_malloc_r+0xf2>
 8009cde:	f8d8 4000 	ldr.w	r4, [r8]
 8009ce2:	4626      	mov	r6, r4
 8009ce4:	2e00      	cmp	r6, #0
 8009ce6:	d145      	bne.n	8009d74 <_malloc_r+0xdc>
 8009ce8:	2c00      	cmp	r4, #0
 8009cea:	d048      	beq.n	8009d7e <_malloc_r+0xe6>
 8009cec:	6823      	ldr	r3, [r4, #0]
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4638      	mov	r0, r7
 8009cf2:	eb04 0903 	add.w	r9, r4, r3
 8009cf6:	f000 ffff 	bl	800acf8 <_sbrk_r>
 8009cfa:	4581      	cmp	r9, r0
 8009cfc:	d13f      	bne.n	8009d7e <_malloc_r+0xe6>
 8009cfe:	6821      	ldr	r1, [r4, #0]
 8009d00:	1a6d      	subs	r5, r5, r1
 8009d02:	4629      	mov	r1, r5
 8009d04:	4638      	mov	r0, r7
 8009d06:	f7ff ffa7 	bl	8009c58 <sbrk_aligned>
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d037      	beq.n	8009d7e <_malloc_r+0xe6>
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	442b      	add	r3, r5
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	f8d8 3000 	ldr.w	r3, [r8]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d038      	beq.n	8009d8e <_malloc_r+0xf6>
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	42a2      	cmp	r2, r4
 8009d20:	d12b      	bne.n	8009d7a <_malloc_r+0xe2>
 8009d22:	2200      	movs	r2, #0
 8009d24:	605a      	str	r2, [r3, #4]
 8009d26:	e00f      	b.n	8009d48 <_malloc_r+0xb0>
 8009d28:	6822      	ldr	r2, [r4, #0]
 8009d2a:	1b52      	subs	r2, r2, r5
 8009d2c:	d41f      	bmi.n	8009d6e <_malloc_r+0xd6>
 8009d2e:	2a0b      	cmp	r2, #11
 8009d30:	d917      	bls.n	8009d62 <_malloc_r+0xca>
 8009d32:	1961      	adds	r1, r4, r5
 8009d34:	42a3      	cmp	r3, r4
 8009d36:	6025      	str	r5, [r4, #0]
 8009d38:	bf18      	it	ne
 8009d3a:	6059      	strne	r1, [r3, #4]
 8009d3c:	6863      	ldr	r3, [r4, #4]
 8009d3e:	bf08      	it	eq
 8009d40:	f8c8 1000 	streq.w	r1, [r8]
 8009d44:	5162      	str	r2, [r4, r5]
 8009d46:	604b      	str	r3, [r1, #4]
 8009d48:	4638      	mov	r0, r7
 8009d4a:	f104 060b 	add.w	r6, r4, #11
 8009d4e:	f000 f829 	bl	8009da4 <__malloc_unlock>
 8009d52:	f026 0607 	bic.w	r6, r6, #7
 8009d56:	1d23      	adds	r3, r4, #4
 8009d58:	1af2      	subs	r2, r6, r3
 8009d5a:	d0ae      	beq.n	8009cba <_malloc_r+0x22>
 8009d5c:	1b9b      	subs	r3, r3, r6
 8009d5e:	50a3      	str	r3, [r4, r2]
 8009d60:	e7ab      	b.n	8009cba <_malloc_r+0x22>
 8009d62:	42a3      	cmp	r3, r4
 8009d64:	6862      	ldr	r2, [r4, #4]
 8009d66:	d1dd      	bne.n	8009d24 <_malloc_r+0x8c>
 8009d68:	f8c8 2000 	str.w	r2, [r8]
 8009d6c:	e7ec      	b.n	8009d48 <_malloc_r+0xb0>
 8009d6e:	4623      	mov	r3, r4
 8009d70:	6864      	ldr	r4, [r4, #4]
 8009d72:	e7ac      	b.n	8009cce <_malloc_r+0x36>
 8009d74:	4634      	mov	r4, r6
 8009d76:	6876      	ldr	r6, [r6, #4]
 8009d78:	e7b4      	b.n	8009ce4 <_malloc_r+0x4c>
 8009d7a:	4613      	mov	r3, r2
 8009d7c:	e7cc      	b.n	8009d18 <_malloc_r+0x80>
 8009d7e:	230c      	movs	r3, #12
 8009d80:	603b      	str	r3, [r7, #0]
 8009d82:	4638      	mov	r0, r7
 8009d84:	f000 f80e 	bl	8009da4 <__malloc_unlock>
 8009d88:	e797      	b.n	8009cba <_malloc_r+0x22>
 8009d8a:	6025      	str	r5, [r4, #0]
 8009d8c:	e7dc      	b.n	8009d48 <_malloc_r+0xb0>
 8009d8e:	605b      	str	r3, [r3, #4]
 8009d90:	deff      	udf	#255	; 0xff
 8009d92:	bf00      	nop
 8009d94:	2000060c 	.word	0x2000060c

08009d98 <__malloc_lock>:
 8009d98:	4801      	ldr	r0, [pc, #4]	; (8009da0 <__malloc_lock+0x8>)
 8009d9a:	f000 bffa 	b.w	800ad92 <__retarget_lock_acquire_recursive>
 8009d9e:	bf00      	nop
 8009da0:	20000754 	.word	0x20000754

08009da4 <__malloc_unlock>:
 8009da4:	4801      	ldr	r0, [pc, #4]	; (8009dac <__malloc_unlock+0x8>)
 8009da6:	f000 bff5 	b.w	800ad94 <__retarget_lock_release_recursive>
 8009daa:	bf00      	nop
 8009dac:	20000754 	.word	0x20000754

08009db0 <__cvt>:
 8009db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009db2:	ed2d 8b02 	vpush	{d8}
 8009db6:	eeb0 8b40 	vmov.f64	d8, d0
 8009dba:	b085      	sub	sp, #20
 8009dbc:	4617      	mov	r7, r2
 8009dbe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009dc0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009dc2:	ee18 2a90 	vmov	r2, s17
 8009dc6:	f025 0520 	bic.w	r5, r5, #32
 8009dca:	2a00      	cmp	r2, #0
 8009dcc:	bfb6      	itet	lt
 8009dce:	222d      	movlt	r2, #45	; 0x2d
 8009dd0:	2200      	movge	r2, #0
 8009dd2:	eeb1 8b40 	vneglt.f64	d8, d0
 8009dd6:	2d46      	cmp	r5, #70	; 0x46
 8009dd8:	460c      	mov	r4, r1
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	d004      	beq.n	8009de8 <__cvt+0x38>
 8009dde:	2d45      	cmp	r5, #69	; 0x45
 8009de0:	d100      	bne.n	8009de4 <__cvt+0x34>
 8009de2:	3401      	adds	r4, #1
 8009de4:	2102      	movs	r1, #2
 8009de6:	e000      	b.n	8009dea <__cvt+0x3a>
 8009de8:	2103      	movs	r1, #3
 8009dea:	ab03      	add	r3, sp, #12
 8009dec:	9301      	str	r3, [sp, #4]
 8009dee:	ab02      	add	r3, sp, #8
 8009df0:	9300      	str	r3, [sp, #0]
 8009df2:	4622      	mov	r2, r4
 8009df4:	4633      	mov	r3, r6
 8009df6:	eeb0 0b48 	vmov.f64	d0, d8
 8009dfa:	f001 f869 	bl	800aed0 <_dtoa_r>
 8009dfe:	2d47      	cmp	r5, #71	; 0x47
 8009e00:	d101      	bne.n	8009e06 <__cvt+0x56>
 8009e02:	07fb      	lsls	r3, r7, #31
 8009e04:	d51a      	bpl.n	8009e3c <__cvt+0x8c>
 8009e06:	2d46      	cmp	r5, #70	; 0x46
 8009e08:	eb00 0204 	add.w	r2, r0, r4
 8009e0c:	d10c      	bne.n	8009e28 <__cvt+0x78>
 8009e0e:	7803      	ldrb	r3, [r0, #0]
 8009e10:	2b30      	cmp	r3, #48	; 0x30
 8009e12:	d107      	bne.n	8009e24 <__cvt+0x74>
 8009e14:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e1c:	bf1c      	itt	ne
 8009e1e:	f1c4 0401 	rsbne	r4, r4, #1
 8009e22:	6034      	strne	r4, [r6, #0]
 8009e24:	6833      	ldr	r3, [r6, #0]
 8009e26:	441a      	add	r2, r3
 8009e28:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009e2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e30:	bf08      	it	eq
 8009e32:	9203      	streq	r2, [sp, #12]
 8009e34:	2130      	movs	r1, #48	; 0x30
 8009e36:	9b03      	ldr	r3, [sp, #12]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d307      	bcc.n	8009e4c <__cvt+0x9c>
 8009e3c:	9b03      	ldr	r3, [sp, #12]
 8009e3e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009e40:	1a1b      	subs	r3, r3, r0
 8009e42:	6013      	str	r3, [r2, #0]
 8009e44:	b005      	add	sp, #20
 8009e46:	ecbd 8b02 	vpop	{d8}
 8009e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009e4c:	1c5c      	adds	r4, r3, #1
 8009e4e:	9403      	str	r4, [sp, #12]
 8009e50:	7019      	strb	r1, [r3, #0]
 8009e52:	e7f0      	b.n	8009e36 <__cvt+0x86>

08009e54 <__exponent>:
 8009e54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e56:	4603      	mov	r3, r0
 8009e58:	2900      	cmp	r1, #0
 8009e5a:	bfb8      	it	lt
 8009e5c:	4249      	neglt	r1, r1
 8009e5e:	f803 2b02 	strb.w	r2, [r3], #2
 8009e62:	bfb4      	ite	lt
 8009e64:	222d      	movlt	r2, #45	; 0x2d
 8009e66:	222b      	movge	r2, #43	; 0x2b
 8009e68:	2909      	cmp	r1, #9
 8009e6a:	7042      	strb	r2, [r0, #1]
 8009e6c:	dd2a      	ble.n	8009ec4 <__exponent+0x70>
 8009e6e:	f10d 0207 	add.w	r2, sp, #7
 8009e72:	4617      	mov	r7, r2
 8009e74:	260a      	movs	r6, #10
 8009e76:	4694      	mov	ip, r2
 8009e78:	fb91 f5f6 	sdiv	r5, r1, r6
 8009e7c:	fb06 1415 	mls	r4, r6, r5, r1
 8009e80:	3430      	adds	r4, #48	; 0x30
 8009e82:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009e86:	460c      	mov	r4, r1
 8009e88:	2c63      	cmp	r4, #99	; 0x63
 8009e8a:	f102 32ff 	add.w	r2, r2, #4294967295
 8009e8e:	4629      	mov	r1, r5
 8009e90:	dcf1      	bgt.n	8009e76 <__exponent+0x22>
 8009e92:	3130      	adds	r1, #48	; 0x30
 8009e94:	f1ac 0402 	sub.w	r4, ip, #2
 8009e98:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009e9c:	1c41      	adds	r1, r0, #1
 8009e9e:	4622      	mov	r2, r4
 8009ea0:	42ba      	cmp	r2, r7
 8009ea2:	d30a      	bcc.n	8009eba <__exponent+0x66>
 8009ea4:	f10d 0209 	add.w	r2, sp, #9
 8009ea8:	eba2 020c 	sub.w	r2, r2, ip
 8009eac:	42bc      	cmp	r4, r7
 8009eae:	bf88      	it	hi
 8009eb0:	2200      	movhi	r2, #0
 8009eb2:	4413      	add	r3, r2
 8009eb4:	1a18      	subs	r0, r3, r0
 8009eb6:	b003      	add	sp, #12
 8009eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eba:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009ebe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009ec2:	e7ed      	b.n	8009ea0 <__exponent+0x4c>
 8009ec4:	2330      	movs	r3, #48	; 0x30
 8009ec6:	3130      	adds	r1, #48	; 0x30
 8009ec8:	7083      	strb	r3, [r0, #2]
 8009eca:	70c1      	strb	r1, [r0, #3]
 8009ecc:	1d03      	adds	r3, r0, #4
 8009ece:	e7f1      	b.n	8009eb4 <__exponent+0x60>

08009ed0 <_printf_float>:
 8009ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ed4:	b08b      	sub	sp, #44	; 0x2c
 8009ed6:	460c      	mov	r4, r1
 8009ed8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009edc:	4616      	mov	r6, r2
 8009ede:	461f      	mov	r7, r3
 8009ee0:	4605      	mov	r5, r0
 8009ee2:	f000 fed1 	bl	800ac88 <_localeconv_r>
 8009ee6:	f8d0 b000 	ldr.w	fp, [r0]
 8009eea:	4658      	mov	r0, fp
 8009eec:	f7f6 f9f8 	bl	80002e0 <strlen>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	9308      	str	r3, [sp, #32]
 8009ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8009ef8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009efc:	6822      	ldr	r2, [r4, #0]
 8009efe:	3307      	adds	r3, #7
 8009f00:	f023 0307 	bic.w	r3, r3, #7
 8009f04:	f103 0108 	add.w	r1, r3, #8
 8009f08:	f8c8 1000 	str.w	r1, [r8]
 8009f0c:	ed93 0b00 	vldr	d0, [r3]
 8009f10:	ed9f 6b97 	vldr	d6, [pc, #604]	; 800a170 <_printf_float+0x2a0>
 8009f14:	eeb0 7bc0 	vabs.f64	d7, d0
 8009f18:	eeb4 7b46 	vcmp.f64	d7, d6
 8009f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f20:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009f24:	4682      	mov	sl, r0
 8009f26:	dd24      	ble.n	8009f72 <_printf_float+0xa2>
 8009f28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f30:	d502      	bpl.n	8009f38 <_printf_float+0x68>
 8009f32:	232d      	movs	r3, #45	; 0x2d
 8009f34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f38:	498f      	ldr	r1, [pc, #572]	; (800a178 <_printf_float+0x2a8>)
 8009f3a:	4b90      	ldr	r3, [pc, #576]	; (800a17c <_printf_float+0x2ac>)
 8009f3c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009f40:	bf94      	ite	ls
 8009f42:	4688      	movls	r8, r1
 8009f44:	4698      	movhi	r8, r3
 8009f46:	2303      	movs	r3, #3
 8009f48:	6123      	str	r3, [r4, #16]
 8009f4a:	f022 0204 	bic.w	r2, r2, #4
 8009f4e:	2300      	movs	r3, #0
 8009f50:	6022      	str	r2, [r4, #0]
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	9700      	str	r7, [sp, #0]
 8009f56:	4633      	mov	r3, r6
 8009f58:	aa09      	add	r2, sp, #36	; 0x24
 8009f5a:	4621      	mov	r1, r4
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	f000 f9d1 	bl	800a304 <_printf_common>
 8009f62:	3001      	adds	r0, #1
 8009f64:	f040 808a 	bne.w	800a07c <_printf_float+0x1ac>
 8009f68:	f04f 30ff 	mov.w	r0, #4294967295
 8009f6c:	b00b      	add	sp, #44	; 0x2c
 8009f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f72:	eeb4 0b40 	vcmp.f64	d0, d0
 8009f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7a:	d709      	bvc.n	8009f90 <_printf_float+0xc0>
 8009f7c:	ee10 3a90 	vmov	r3, s1
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	bfbc      	itt	lt
 8009f84:	232d      	movlt	r3, #45	; 0x2d
 8009f86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009f8a:	497d      	ldr	r1, [pc, #500]	; (800a180 <_printf_float+0x2b0>)
 8009f8c:	4b7d      	ldr	r3, [pc, #500]	; (800a184 <_printf_float+0x2b4>)
 8009f8e:	e7d5      	b.n	8009f3c <_printf_float+0x6c>
 8009f90:	6863      	ldr	r3, [r4, #4]
 8009f92:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009f96:	9104      	str	r1, [sp, #16]
 8009f98:	1c59      	adds	r1, r3, #1
 8009f9a:	d13c      	bne.n	800a016 <_printf_float+0x146>
 8009f9c:	2306      	movs	r3, #6
 8009f9e:	6063      	str	r3, [r4, #4]
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	9303      	str	r3, [sp, #12]
 8009fa4:	ab08      	add	r3, sp, #32
 8009fa6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009faa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009fae:	ab07      	add	r3, sp, #28
 8009fb0:	6861      	ldr	r1, [r4, #4]
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	6022      	str	r2, [r4, #0]
 8009fb6:	f10d 031b 	add.w	r3, sp, #27
 8009fba:	4628      	mov	r0, r5
 8009fbc:	f7ff fef8 	bl	8009db0 <__cvt>
 8009fc0:	9b04      	ldr	r3, [sp, #16]
 8009fc2:	9907      	ldr	r1, [sp, #28]
 8009fc4:	2b47      	cmp	r3, #71	; 0x47
 8009fc6:	4680      	mov	r8, r0
 8009fc8:	d108      	bne.n	8009fdc <_printf_float+0x10c>
 8009fca:	1cc8      	adds	r0, r1, #3
 8009fcc:	db02      	blt.n	8009fd4 <_printf_float+0x104>
 8009fce:	6863      	ldr	r3, [r4, #4]
 8009fd0:	4299      	cmp	r1, r3
 8009fd2:	dd41      	ble.n	800a058 <_printf_float+0x188>
 8009fd4:	f1a9 0902 	sub.w	r9, r9, #2
 8009fd8:	fa5f f989 	uxtb.w	r9, r9
 8009fdc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009fe0:	d820      	bhi.n	800a024 <_printf_float+0x154>
 8009fe2:	3901      	subs	r1, #1
 8009fe4:	464a      	mov	r2, r9
 8009fe6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009fea:	9107      	str	r1, [sp, #28]
 8009fec:	f7ff ff32 	bl	8009e54 <__exponent>
 8009ff0:	9a08      	ldr	r2, [sp, #32]
 8009ff2:	9004      	str	r0, [sp, #16]
 8009ff4:	1813      	adds	r3, r2, r0
 8009ff6:	2a01      	cmp	r2, #1
 8009ff8:	6123      	str	r3, [r4, #16]
 8009ffa:	dc02      	bgt.n	800a002 <_printf_float+0x132>
 8009ffc:	6822      	ldr	r2, [r4, #0]
 8009ffe:	07d2      	lsls	r2, r2, #31
 800a000:	d501      	bpl.n	800a006 <_printf_float+0x136>
 800a002:	3301      	adds	r3, #1
 800a004:	6123      	str	r3, [r4, #16]
 800a006:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d0a2      	beq.n	8009f54 <_printf_float+0x84>
 800a00e:	232d      	movs	r3, #45	; 0x2d
 800a010:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a014:	e79e      	b.n	8009f54 <_printf_float+0x84>
 800a016:	9904      	ldr	r1, [sp, #16]
 800a018:	2947      	cmp	r1, #71	; 0x47
 800a01a:	d1c1      	bne.n	8009fa0 <_printf_float+0xd0>
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d1bf      	bne.n	8009fa0 <_printf_float+0xd0>
 800a020:	2301      	movs	r3, #1
 800a022:	e7bc      	b.n	8009f9e <_printf_float+0xce>
 800a024:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a028:	d118      	bne.n	800a05c <_printf_float+0x18c>
 800a02a:	2900      	cmp	r1, #0
 800a02c:	6863      	ldr	r3, [r4, #4]
 800a02e:	dd0b      	ble.n	800a048 <_printf_float+0x178>
 800a030:	6121      	str	r1, [r4, #16]
 800a032:	b913      	cbnz	r3, 800a03a <_printf_float+0x16a>
 800a034:	6822      	ldr	r2, [r4, #0]
 800a036:	07d0      	lsls	r0, r2, #31
 800a038:	d502      	bpl.n	800a040 <_printf_float+0x170>
 800a03a:	3301      	adds	r3, #1
 800a03c:	440b      	add	r3, r1
 800a03e:	6123      	str	r3, [r4, #16]
 800a040:	2300      	movs	r3, #0
 800a042:	65a1      	str	r1, [r4, #88]	; 0x58
 800a044:	9304      	str	r3, [sp, #16]
 800a046:	e7de      	b.n	800a006 <_printf_float+0x136>
 800a048:	b913      	cbnz	r3, 800a050 <_printf_float+0x180>
 800a04a:	6822      	ldr	r2, [r4, #0]
 800a04c:	07d2      	lsls	r2, r2, #31
 800a04e:	d501      	bpl.n	800a054 <_printf_float+0x184>
 800a050:	3302      	adds	r3, #2
 800a052:	e7f4      	b.n	800a03e <_printf_float+0x16e>
 800a054:	2301      	movs	r3, #1
 800a056:	e7f2      	b.n	800a03e <_printf_float+0x16e>
 800a058:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a05c:	9b08      	ldr	r3, [sp, #32]
 800a05e:	4299      	cmp	r1, r3
 800a060:	db05      	blt.n	800a06e <_printf_float+0x19e>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	6121      	str	r1, [r4, #16]
 800a066:	07d8      	lsls	r0, r3, #31
 800a068:	d5ea      	bpl.n	800a040 <_printf_float+0x170>
 800a06a:	1c4b      	adds	r3, r1, #1
 800a06c:	e7e7      	b.n	800a03e <_printf_float+0x16e>
 800a06e:	2900      	cmp	r1, #0
 800a070:	bfd4      	ite	le
 800a072:	f1c1 0202 	rsble	r2, r1, #2
 800a076:	2201      	movgt	r2, #1
 800a078:	4413      	add	r3, r2
 800a07a:	e7e0      	b.n	800a03e <_printf_float+0x16e>
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	055a      	lsls	r2, r3, #21
 800a080:	d407      	bmi.n	800a092 <_printf_float+0x1c2>
 800a082:	6923      	ldr	r3, [r4, #16]
 800a084:	4642      	mov	r2, r8
 800a086:	4631      	mov	r1, r6
 800a088:	4628      	mov	r0, r5
 800a08a:	47b8      	blx	r7
 800a08c:	3001      	adds	r0, #1
 800a08e:	d12a      	bne.n	800a0e6 <_printf_float+0x216>
 800a090:	e76a      	b.n	8009f68 <_printf_float+0x98>
 800a092:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a096:	f240 80e0 	bls.w	800a25a <_printf_float+0x38a>
 800a09a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a09e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0a6:	d133      	bne.n	800a110 <_printf_float+0x240>
 800a0a8:	4a37      	ldr	r2, [pc, #220]	; (800a188 <_printf_float+0x2b8>)
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4631      	mov	r1, r6
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	47b8      	blx	r7
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	f43f af58 	beq.w	8009f68 <_printf_float+0x98>
 800a0b8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a0bc:	429a      	cmp	r2, r3
 800a0be:	db02      	blt.n	800a0c6 <_printf_float+0x1f6>
 800a0c0:	6823      	ldr	r3, [r4, #0]
 800a0c2:	07d8      	lsls	r0, r3, #31
 800a0c4:	d50f      	bpl.n	800a0e6 <_printf_float+0x216>
 800a0c6:	4653      	mov	r3, sl
 800a0c8:	465a      	mov	r2, fp
 800a0ca:	4631      	mov	r1, r6
 800a0cc:	4628      	mov	r0, r5
 800a0ce:	47b8      	blx	r7
 800a0d0:	3001      	adds	r0, #1
 800a0d2:	f43f af49 	beq.w	8009f68 <_printf_float+0x98>
 800a0d6:	f04f 0800 	mov.w	r8, #0
 800a0da:	f104 091a 	add.w	r9, r4, #26
 800a0de:	9b08      	ldr	r3, [sp, #32]
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	4543      	cmp	r3, r8
 800a0e4:	dc09      	bgt.n	800a0fa <_printf_float+0x22a>
 800a0e6:	6823      	ldr	r3, [r4, #0]
 800a0e8:	079b      	lsls	r3, r3, #30
 800a0ea:	f100 8106 	bmi.w	800a2fa <_printf_float+0x42a>
 800a0ee:	68e0      	ldr	r0, [r4, #12]
 800a0f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0f2:	4298      	cmp	r0, r3
 800a0f4:	bfb8      	it	lt
 800a0f6:	4618      	movlt	r0, r3
 800a0f8:	e738      	b.n	8009f6c <_printf_float+0x9c>
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	464a      	mov	r2, r9
 800a0fe:	4631      	mov	r1, r6
 800a100:	4628      	mov	r0, r5
 800a102:	47b8      	blx	r7
 800a104:	3001      	adds	r0, #1
 800a106:	f43f af2f 	beq.w	8009f68 <_printf_float+0x98>
 800a10a:	f108 0801 	add.w	r8, r8, #1
 800a10e:	e7e6      	b.n	800a0de <_printf_float+0x20e>
 800a110:	9b07      	ldr	r3, [sp, #28]
 800a112:	2b00      	cmp	r3, #0
 800a114:	dc3a      	bgt.n	800a18c <_printf_float+0x2bc>
 800a116:	4a1c      	ldr	r2, [pc, #112]	; (800a188 <_printf_float+0x2b8>)
 800a118:	2301      	movs	r3, #1
 800a11a:	4631      	mov	r1, r6
 800a11c:	4628      	mov	r0, r5
 800a11e:	47b8      	blx	r7
 800a120:	3001      	adds	r0, #1
 800a122:	f43f af21 	beq.w	8009f68 <_printf_float+0x98>
 800a126:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a12a:	4313      	orrs	r3, r2
 800a12c:	d102      	bne.n	800a134 <_printf_float+0x264>
 800a12e:	6823      	ldr	r3, [r4, #0]
 800a130:	07d9      	lsls	r1, r3, #31
 800a132:	d5d8      	bpl.n	800a0e6 <_printf_float+0x216>
 800a134:	4653      	mov	r3, sl
 800a136:	465a      	mov	r2, fp
 800a138:	4631      	mov	r1, r6
 800a13a:	4628      	mov	r0, r5
 800a13c:	47b8      	blx	r7
 800a13e:	3001      	adds	r0, #1
 800a140:	f43f af12 	beq.w	8009f68 <_printf_float+0x98>
 800a144:	f04f 0900 	mov.w	r9, #0
 800a148:	f104 0a1a 	add.w	sl, r4, #26
 800a14c:	9b07      	ldr	r3, [sp, #28]
 800a14e:	425b      	negs	r3, r3
 800a150:	454b      	cmp	r3, r9
 800a152:	dc01      	bgt.n	800a158 <_printf_float+0x288>
 800a154:	9b08      	ldr	r3, [sp, #32]
 800a156:	e795      	b.n	800a084 <_printf_float+0x1b4>
 800a158:	2301      	movs	r3, #1
 800a15a:	4652      	mov	r2, sl
 800a15c:	4631      	mov	r1, r6
 800a15e:	4628      	mov	r0, r5
 800a160:	47b8      	blx	r7
 800a162:	3001      	adds	r0, #1
 800a164:	f43f af00 	beq.w	8009f68 <_printf_float+0x98>
 800a168:	f109 0901 	add.w	r9, r9, #1
 800a16c:	e7ee      	b.n	800a14c <_printf_float+0x27c>
 800a16e:	bf00      	nop
 800a170:	ffffffff 	.word	0xffffffff
 800a174:	7fefffff 	.word	0x7fefffff
 800a178:	0800e3dc 	.word	0x0800e3dc
 800a17c:	0800e3e0 	.word	0x0800e3e0
 800a180:	0800e3e4 	.word	0x0800e3e4
 800a184:	0800e3e8 	.word	0x0800e3e8
 800a188:	0800e3ec 	.word	0x0800e3ec
 800a18c:	9a08      	ldr	r2, [sp, #32]
 800a18e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a190:	429a      	cmp	r2, r3
 800a192:	bfa8      	it	ge
 800a194:	461a      	movge	r2, r3
 800a196:	2a00      	cmp	r2, #0
 800a198:	4691      	mov	r9, r2
 800a19a:	dc38      	bgt.n	800a20e <_printf_float+0x33e>
 800a19c:	2300      	movs	r3, #0
 800a19e:	9305      	str	r3, [sp, #20]
 800a1a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1a4:	f104 021a 	add.w	r2, r4, #26
 800a1a8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a1aa:	9905      	ldr	r1, [sp, #20]
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	eba3 0309 	sub.w	r3, r3, r9
 800a1b2:	428b      	cmp	r3, r1
 800a1b4:	dc33      	bgt.n	800a21e <_printf_float+0x34e>
 800a1b6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	db3c      	blt.n	800a238 <_printf_float+0x368>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	07da      	lsls	r2, r3, #31
 800a1c2:	d439      	bmi.n	800a238 <_printf_float+0x368>
 800a1c4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800a1c8:	eba2 0903 	sub.w	r9, r2, r3
 800a1cc:	9b04      	ldr	r3, [sp, #16]
 800a1ce:	1ad2      	subs	r2, r2, r3
 800a1d0:	4591      	cmp	r9, r2
 800a1d2:	bfa8      	it	ge
 800a1d4:	4691      	movge	r9, r2
 800a1d6:	f1b9 0f00 	cmp.w	r9, #0
 800a1da:	dc35      	bgt.n	800a248 <_printf_float+0x378>
 800a1dc:	f04f 0800 	mov.w	r8, #0
 800a1e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a1e4:	f104 0a1a 	add.w	sl, r4, #26
 800a1e8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800a1ec:	1a9b      	subs	r3, r3, r2
 800a1ee:	eba3 0309 	sub.w	r3, r3, r9
 800a1f2:	4543      	cmp	r3, r8
 800a1f4:	f77f af77 	ble.w	800a0e6 <_printf_float+0x216>
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	4652      	mov	r2, sl
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4628      	mov	r0, r5
 800a200:	47b8      	blx	r7
 800a202:	3001      	adds	r0, #1
 800a204:	f43f aeb0 	beq.w	8009f68 <_printf_float+0x98>
 800a208:	f108 0801 	add.w	r8, r8, #1
 800a20c:	e7ec      	b.n	800a1e8 <_printf_float+0x318>
 800a20e:	4613      	mov	r3, r2
 800a210:	4631      	mov	r1, r6
 800a212:	4642      	mov	r2, r8
 800a214:	4628      	mov	r0, r5
 800a216:	47b8      	blx	r7
 800a218:	3001      	adds	r0, #1
 800a21a:	d1bf      	bne.n	800a19c <_printf_float+0x2cc>
 800a21c:	e6a4      	b.n	8009f68 <_printf_float+0x98>
 800a21e:	2301      	movs	r3, #1
 800a220:	4631      	mov	r1, r6
 800a222:	4628      	mov	r0, r5
 800a224:	9204      	str	r2, [sp, #16]
 800a226:	47b8      	blx	r7
 800a228:	3001      	adds	r0, #1
 800a22a:	f43f ae9d 	beq.w	8009f68 <_printf_float+0x98>
 800a22e:	9b05      	ldr	r3, [sp, #20]
 800a230:	9a04      	ldr	r2, [sp, #16]
 800a232:	3301      	adds	r3, #1
 800a234:	9305      	str	r3, [sp, #20]
 800a236:	e7b7      	b.n	800a1a8 <_printf_float+0x2d8>
 800a238:	4653      	mov	r3, sl
 800a23a:	465a      	mov	r2, fp
 800a23c:	4631      	mov	r1, r6
 800a23e:	4628      	mov	r0, r5
 800a240:	47b8      	blx	r7
 800a242:	3001      	adds	r0, #1
 800a244:	d1be      	bne.n	800a1c4 <_printf_float+0x2f4>
 800a246:	e68f      	b.n	8009f68 <_printf_float+0x98>
 800a248:	9a04      	ldr	r2, [sp, #16]
 800a24a:	464b      	mov	r3, r9
 800a24c:	4442      	add	r2, r8
 800a24e:	4631      	mov	r1, r6
 800a250:	4628      	mov	r0, r5
 800a252:	47b8      	blx	r7
 800a254:	3001      	adds	r0, #1
 800a256:	d1c1      	bne.n	800a1dc <_printf_float+0x30c>
 800a258:	e686      	b.n	8009f68 <_printf_float+0x98>
 800a25a:	9a08      	ldr	r2, [sp, #32]
 800a25c:	2a01      	cmp	r2, #1
 800a25e:	dc01      	bgt.n	800a264 <_printf_float+0x394>
 800a260:	07db      	lsls	r3, r3, #31
 800a262:	d537      	bpl.n	800a2d4 <_printf_float+0x404>
 800a264:	2301      	movs	r3, #1
 800a266:	4642      	mov	r2, r8
 800a268:	4631      	mov	r1, r6
 800a26a:	4628      	mov	r0, r5
 800a26c:	47b8      	blx	r7
 800a26e:	3001      	adds	r0, #1
 800a270:	f43f ae7a 	beq.w	8009f68 <_printf_float+0x98>
 800a274:	4653      	mov	r3, sl
 800a276:	465a      	mov	r2, fp
 800a278:	4631      	mov	r1, r6
 800a27a:	4628      	mov	r0, r5
 800a27c:	47b8      	blx	r7
 800a27e:	3001      	adds	r0, #1
 800a280:	f43f ae72 	beq.w	8009f68 <_printf_float+0x98>
 800a284:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a288:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a28c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a290:	9b08      	ldr	r3, [sp, #32]
 800a292:	d01a      	beq.n	800a2ca <_printf_float+0x3fa>
 800a294:	3b01      	subs	r3, #1
 800a296:	f108 0201 	add.w	r2, r8, #1
 800a29a:	4631      	mov	r1, r6
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b8      	blx	r7
 800a2a0:	3001      	adds	r0, #1
 800a2a2:	d10e      	bne.n	800a2c2 <_printf_float+0x3f2>
 800a2a4:	e660      	b.n	8009f68 <_printf_float+0x98>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	464a      	mov	r2, r9
 800a2aa:	4631      	mov	r1, r6
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	47b8      	blx	r7
 800a2b0:	3001      	adds	r0, #1
 800a2b2:	f43f ae59 	beq.w	8009f68 <_printf_float+0x98>
 800a2b6:	f108 0801 	add.w	r8, r8, #1
 800a2ba:	9b08      	ldr	r3, [sp, #32]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	4543      	cmp	r3, r8
 800a2c0:	dcf1      	bgt.n	800a2a6 <_printf_float+0x3d6>
 800a2c2:	9b04      	ldr	r3, [sp, #16]
 800a2c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a2c8:	e6dd      	b.n	800a086 <_printf_float+0x1b6>
 800a2ca:	f04f 0800 	mov.w	r8, #0
 800a2ce:	f104 091a 	add.w	r9, r4, #26
 800a2d2:	e7f2      	b.n	800a2ba <_printf_float+0x3ea>
 800a2d4:	2301      	movs	r3, #1
 800a2d6:	4642      	mov	r2, r8
 800a2d8:	e7df      	b.n	800a29a <_printf_float+0x3ca>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	464a      	mov	r2, r9
 800a2de:	4631      	mov	r1, r6
 800a2e0:	4628      	mov	r0, r5
 800a2e2:	47b8      	blx	r7
 800a2e4:	3001      	adds	r0, #1
 800a2e6:	f43f ae3f 	beq.w	8009f68 <_printf_float+0x98>
 800a2ea:	f108 0801 	add.w	r8, r8, #1
 800a2ee:	68e3      	ldr	r3, [r4, #12]
 800a2f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a2f2:	1a5b      	subs	r3, r3, r1
 800a2f4:	4543      	cmp	r3, r8
 800a2f6:	dcf0      	bgt.n	800a2da <_printf_float+0x40a>
 800a2f8:	e6f9      	b.n	800a0ee <_printf_float+0x21e>
 800a2fa:	f04f 0800 	mov.w	r8, #0
 800a2fe:	f104 0919 	add.w	r9, r4, #25
 800a302:	e7f4      	b.n	800a2ee <_printf_float+0x41e>

0800a304 <_printf_common>:
 800a304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a308:	4616      	mov	r6, r2
 800a30a:	4699      	mov	r9, r3
 800a30c:	688a      	ldr	r2, [r1, #8]
 800a30e:	690b      	ldr	r3, [r1, #16]
 800a310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a314:	4293      	cmp	r3, r2
 800a316:	bfb8      	it	lt
 800a318:	4613      	movlt	r3, r2
 800a31a:	6033      	str	r3, [r6, #0]
 800a31c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a320:	4607      	mov	r7, r0
 800a322:	460c      	mov	r4, r1
 800a324:	b10a      	cbz	r2, 800a32a <_printf_common+0x26>
 800a326:	3301      	adds	r3, #1
 800a328:	6033      	str	r3, [r6, #0]
 800a32a:	6823      	ldr	r3, [r4, #0]
 800a32c:	0699      	lsls	r1, r3, #26
 800a32e:	bf42      	ittt	mi
 800a330:	6833      	ldrmi	r3, [r6, #0]
 800a332:	3302      	addmi	r3, #2
 800a334:	6033      	strmi	r3, [r6, #0]
 800a336:	6825      	ldr	r5, [r4, #0]
 800a338:	f015 0506 	ands.w	r5, r5, #6
 800a33c:	d106      	bne.n	800a34c <_printf_common+0x48>
 800a33e:	f104 0a19 	add.w	sl, r4, #25
 800a342:	68e3      	ldr	r3, [r4, #12]
 800a344:	6832      	ldr	r2, [r6, #0]
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	42ab      	cmp	r3, r5
 800a34a:	dc26      	bgt.n	800a39a <_printf_common+0x96>
 800a34c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a350:	1e13      	subs	r3, r2, #0
 800a352:	6822      	ldr	r2, [r4, #0]
 800a354:	bf18      	it	ne
 800a356:	2301      	movne	r3, #1
 800a358:	0692      	lsls	r2, r2, #26
 800a35a:	d42b      	bmi.n	800a3b4 <_printf_common+0xb0>
 800a35c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a360:	4649      	mov	r1, r9
 800a362:	4638      	mov	r0, r7
 800a364:	47c0      	blx	r8
 800a366:	3001      	adds	r0, #1
 800a368:	d01e      	beq.n	800a3a8 <_printf_common+0xa4>
 800a36a:	6823      	ldr	r3, [r4, #0]
 800a36c:	6922      	ldr	r2, [r4, #16]
 800a36e:	f003 0306 	and.w	r3, r3, #6
 800a372:	2b04      	cmp	r3, #4
 800a374:	bf02      	ittt	eq
 800a376:	68e5      	ldreq	r5, [r4, #12]
 800a378:	6833      	ldreq	r3, [r6, #0]
 800a37a:	1aed      	subeq	r5, r5, r3
 800a37c:	68a3      	ldr	r3, [r4, #8]
 800a37e:	bf0c      	ite	eq
 800a380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a384:	2500      	movne	r5, #0
 800a386:	4293      	cmp	r3, r2
 800a388:	bfc4      	itt	gt
 800a38a:	1a9b      	subgt	r3, r3, r2
 800a38c:	18ed      	addgt	r5, r5, r3
 800a38e:	2600      	movs	r6, #0
 800a390:	341a      	adds	r4, #26
 800a392:	42b5      	cmp	r5, r6
 800a394:	d11a      	bne.n	800a3cc <_printf_common+0xc8>
 800a396:	2000      	movs	r0, #0
 800a398:	e008      	b.n	800a3ac <_printf_common+0xa8>
 800a39a:	2301      	movs	r3, #1
 800a39c:	4652      	mov	r2, sl
 800a39e:	4649      	mov	r1, r9
 800a3a0:	4638      	mov	r0, r7
 800a3a2:	47c0      	blx	r8
 800a3a4:	3001      	adds	r0, #1
 800a3a6:	d103      	bne.n	800a3b0 <_printf_common+0xac>
 800a3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3b0:	3501      	adds	r5, #1
 800a3b2:	e7c6      	b.n	800a342 <_printf_common+0x3e>
 800a3b4:	18e1      	adds	r1, r4, r3
 800a3b6:	1c5a      	adds	r2, r3, #1
 800a3b8:	2030      	movs	r0, #48	; 0x30
 800a3ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3be:	4422      	add	r2, r4
 800a3c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3c8:	3302      	adds	r3, #2
 800a3ca:	e7c7      	b.n	800a35c <_printf_common+0x58>
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	4622      	mov	r2, r4
 800a3d0:	4649      	mov	r1, r9
 800a3d2:	4638      	mov	r0, r7
 800a3d4:	47c0      	blx	r8
 800a3d6:	3001      	adds	r0, #1
 800a3d8:	d0e6      	beq.n	800a3a8 <_printf_common+0xa4>
 800a3da:	3601      	adds	r6, #1
 800a3dc:	e7d9      	b.n	800a392 <_printf_common+0x8e>
	...

0800a3e0 <_printf_i>:
 800a3e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	7e0f      	ldrb	r7, [r1, #24]
 800a3e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3e8:	2f78      	cmp	r7, #120	; 0x78
 800a3ea:	4691      	mov	r9, r2
 800a3ec:	4680      	mov	r8, r0
 800a3ee:	460c      	mov	r4, r1
 800a3f0:	469a      	mov	sl, r3
 800a3f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3f6:	d807      	bhi.n	800a408 <_printf_i+0x28>
 800a3f8:	2f62      	cmp	r7, #98	; 0x62
 800a3fa:	d80a      	bhi.n	800a412 <_printf_i+0x32>
 800a3fc:	2f00      	cmp	r7, #0
 800a3fe:	f000 80d4 	beq.w	800a5aa <_printf_i+0x1ca>
 800a402:	2f58      	cmp	r7, #88	; 0x58
 800a404:	f000 80c0 	beq.w	800a588 <_printf_i+0x1a8>
 800a408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a40c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a410:	e03a      	b.n	800a488 <_printf_i+0xa8>
 800a412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a416:	2b15      	cmp	r3, #21
 800a418:	d8f6      	bhi.n	800a408 <_printf_i+0x28>
 800a41a:	a101      	add	r1, pc, #4	; (adr r1, 800a420 <_printf_i+0x40>)
 800a41c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a420:	0800a479 	.word	0x0800a479
 800a424:	0800a48d 	.word	0x0800a48d
 800a428:	0800a409 	.word	0x0800a409
 800a42c:	0800a409 	.word	0x0800a409
 800a430:	0800a409 	.word	0x0800a409
 800a434:	0800a409 	.word	0x0800a409
 800a438:	0800a48d 	.word	0x0800a48d
 800a43c:	0800a409 	.word	0x0800a409
 800a440:	0800a409 	.word	0x0800a409
 800a444:	0800a409 	.word	0x0800a409
 800a448:	0800a409 	.word	0x0800a409
 800a44c:	0800a591 	.word	0x0800a591
 800a450:	0800a4b9 	.word	0x0800a4b9
 800a454:	0800a54b 	.word	0x0800a54b
 800a458:	0800a409 	.word	0x0800a409
 800a45c:	0800a409 	.word	0x0800a409
 800a460:	0800a5b3 	.word	0x0800a5b3
 800a464:	0800a409 	.word	0x0800a409
 800a468:	0800a4b9 	.word	0x0800a4b9
 800a46c:	0800a409 	.word	0x0800a409
 800a470:	0800a409 	.word	0x0800a409
 800a474:	0800a553 	.word	0x0800a553
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	1d1a      	adds	r2, r3, #4
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	602a      	str	r2, [r5, #0]
 800a480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a488:	2301      	movs	r3, #1
 800a48a:	e09f      	b.n	800a5cc <_printf_i+0x1ec>
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	0607      	lsls	r7, r0, #24
 800a492:	f103 0104 	add.w	r1, r3, #4
 800a496:	6029      	str	r1, [r5, #0]
 800a498:	d501      	bpl.n	800a49e <_printf_i+0xbe>
 800a49a:	681e      	ldr	r6, [r3, #0]
 800a49c:	e003      	b.n	800a4a6 <_printf_i+0xc6>
 800a49e:	0646      	lsls	r6, r0, #25
 800a4a0:	d5fb      	bpl.n	800a49a <_printf_i+0xba>
 800a4a2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a4a6:	2e00      	cmp	r6, #0
 800a4a8:	da03      	bge.n	800a4b2 <_printf_i+0xd2>
 800a4aa:	232d      	movs	r3, #45	; 0x2d
 800a4ac:	4276      	negs	r6, r6
 800a4ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4b2:	485a      	ldr	r0, [pc, #360]	; (800a61c <_printf_i+0x23c>)
 800a4b4:	230a      	movs	r3, #10
 800a4b6:	e012      	b.n	800a4de <_printf_i+0xfe>
 800a4b8:	682b      	ldr	r3, [r5, #0]
 800a4ba:	6820      	ldr	r0, [r4, #0]
 800a4bc:	1d19      	adds	r1, r3, #4
 800a4be:	6029      	str	r1, [r5, #0]
 800a4c0:	0605      	lsls	r5, r0, #24
 800a4c2:	d501      	bpl.n	800a4c8 <_printf_i+0xe8>
 800a4c4:	681e      	ldr	r6, [r3, #0]
 800a4c6:	e002      	b.n	800a4ce <_printf_i+0xee>
 800a4c8:	0641      	lsls	r1, r0, #25
 800a4ca:	d5fb      	bpl.n	800a4c4 <_printf_i+0xe4>
 800a4cc:	881e      	ldrh	r6, [r3, #0]
 800a4ce:	4853      	ldr	r0, [pc, #332]	; (800a61c <_printf_i+0x23c>)
 800a4d0:	2f6f      	cmp	r7, #111	; 0x6f
 800a4d2:	bf0c      	ite	eq
 800a4d4:	2308      	moveq	r3, #8
 800a4d6:	230a      	movne	r3, #10
 800a4d8:	2100      	movs	r1, #0
 800a4da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4de:	6865      	ldr	r5, [r4, #4]
 800a4e0:	60a5      	str	r5, [r4, #8]
 800a4e2:	2d00      	cmp	r5, #0
 800a4e4:	bfa2      	ittt	ge
 800a4e6:	6821      	ldrge	r1, [r4, #0]
 800a4e8:	f021 0104 	bicge.w	r1, r1, #4
 800a4ec:	6021      	strge	r1, [r4, #0]
 800a4ee:	b90e      	cbnz	r6, 800a4f4 <_printf_i+0x114>
 800a4f0:	2d00      	cmp	r5, #0
 800a4f2:	d04b      	beq.n	800a58c <_printf_i+0x1ac>
 800a4f4:	4615      	mov	r5, r2
 800a4f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4fa:	fb03 6711 	mls	r7, r3, r1, r6
 800a4fe:	5dc7      	ldrb	r7, [r0, r7]
 800a500:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a504:	4637      	mov	r7, r6
 800a506:	42bb      	cmp	r3, r7
 800a508:	460e      	mov	r6, r1
 800a50a:	d9f4      	bls.n	800a4f6 <_printf_i+0x116>
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d10b      	bne.n	800a528 <_printf_i+0x148>
 800a510:	6823      	ldr	r3, [r4, #0]
 800a512:	07de      	lsls	r6, r3, #31
 800a514:	d508      	bpl.n	800a528 <_printf_i+0x148>
 800a516:	6923      	ldr	r3, [r4, #16]
 800a518:	6861      	ldr	r1, [r4, #4]
 800a51a:	4299      	cmp	r1, r3
 800a51c:	bfde      	ittt	le
 800a51e:	2330      	movle	r3, #48	; 0x30
 800a520:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a524:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a528:	1b52      	subs	r2, r2, r5
 800a52a:	6122      	str	r2, [r4, #16]
 800a52c:	f8cd a000 	str.w	sl, [sp]
 800a530:	464b      	mov	r3, r9
 800a532:	aa03      	add	r2, sp, #12
 800a534:	4621      	mov	r1, r4
 800a536:	4640      	mov	r0, r8
 800a538:	f7ff fee4 	bl	800a304 <_printf_common>
 800a53c:	3001      	adds	r0, #1
 800a53e:	d14a      	bne.n	800a5d6 <_printf_i+0x1f6>
 800a540:	f04f 30ff 	mov.w	r0, #4294967295
 800a544:	b004      	add	sp, #16
 800a546:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	f043 0320 	orr.w	r3, r3, #32
 800a550:	6023      	str	r3, [r4, #0]
 800a552:	4833      	ldr	r0, [pc, #204]	; (800a620 <_printf_i+0x240>)
 800a554:	2778      	movs	r7, #120	; 0x78
 800a556:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a55a:	6823      	ldr	r3, [r4, #0]
 800a55c:	6829      	ldr	r1, [r5, #0]
 800a55e:	061f      	lsls	r7, r3, #24
 800a560:	f851 6b04 	ldr.w	r6, [r1], #4
 800a564:	d402      	bmi.n	800a56c <_printf_i+0x18c>
 800a566:	065f      	lsls	r7, r3, #25
 800a568:	bf48      	it	mi
 800a56a:	b2b6      	uxthmi	r6, r6
 800a56c:	07df      	lsls	r7, r3, #31
 800a56e:	bf48      	it	mi
 800a570:	f043 0320 	orrmi.w	r3, r3, #32
 800a574:	6029      	str	r1, [r5, #0]
 800a576:	bf48      	it	mi
 800a578:	6023      	strmi	r3, [r4, #0]
 800a57a:	b91e      	cbnz	r6, 800a584 <_printf_i+0x1a4>
 800a57c:	6823      	ldr	r3, [r4, #0]
 800a57e:	f023 0320 	bic.w	r3, r3, #32
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	2310      	movs	r3, #16
 800a586:	e7a7      	b.n	800a4d8 <_printf_i+0xf8>
 800a588:	4824      	ldr	r0, [pc, #144]	; (800a61c <_printf_i+0x23c>)
 800a58a:	e7e4      	b.n	800a556 <_printf_i+0x176>
 800a58c:	4615      	mov	r5, r2
 800a58e:	e7bd      	b.n	800a50c <_printf_i+0x12c>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	6826      	ldr	r6, [r4, #0]
 800a594:	6961      	ldr	r1, [r4, #20]
 800a596:	1d18      	adds	r0, r3, #4
 800a598:	6028      	str	r0, [r5, #0]
 800a59a:	0635      	lsls	r5, r6, #24
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	d501      	bpl.n	800a5a4 <_printf_i+0x1c4>
 800a5a0:	6019      	str	r1, [r3, #0]
 800a5a2:	e002      	b.n	800a5aa <_printf_i+0x1ca>
 800a5a4:	0670      	lsls	r0, r6, #25
 800a5a6:	d5fb      	bpl.n	800a5a0 <_printf_i+0x1c0>
 800a5a8:	8019      	strh	r1, [r3, #0]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	6123      	str	r3, [r4, #16]
 800a5ae:	4615      	mov	r5, r2
 800a5b0:	e7bc      	b.n	800a52c <_printf_i+0x14c>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	1d1a      	adds	r2, r3, #4
 800a5b6:	602a      	str	r2, [r5, #0]
 800a5b8:	681d      	ldr	r5, [r3, #0]
 800a5ba:	6862      	ldr	r2, [r4, #4]
 800a5bc:	2100      	movs	r1, #0
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f7f5 fe3e 	bl	8000240 <memchr>
 800a5c4:	b108      	cbz	r0, 800a5ca <_printf_i+0x1ea>
 800a5c6:	1b40      	subs	r0, r0, r5
 800a5c8:	6060      	str	r0, [r4, #4]
 800a5ca:	6863      	ldr	r3, [r4, #4]
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d4:	e7aa      	b.n	800a52c <_printf_i+0x14c>
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4640      	mov	r0, r8
 800a5de:	47d0      	blx	sl
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d0ad      	beq.n	800a540 <_printf_i+0x160>
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	079b      	lsls	r3, r3, #30
 800a5e8:	d413      	bmi.n	800a612 <_printf_i+0x232>
 800a5ea:	68e0      	ldr	r0, [r4, #12]
 800a5ec:	9b03      	ldr	r3, [sp, #12]
 800a5ee:	4298      	cmp	r0, r3
 800a5f0:	bfb8      	it	lt
 800a5f2:	4618      	movlt	r0, r3
 800a5f4:	e7a6      	b.n	800a544 <_printf_i+0x164>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	47d0      	blx	sl
 800a600:	3001      	adds	r0, #1
 800a602:	d09d      	beq.n	800a540 <_printf_i+0x160>
 800a604:	3501      	adds	r5, #1
 800a606:	68e3      	ldr	r3, [r4, #12]
 800a608:	9903      	ldr	r1, [sp, #12]
 800a60a:	1a5b      	subs	r3, r3, r1
 800a60c:	42ab      	cmp	r3, r5
 800a60e:	dcf2      	bgt.n	800a5f6 <_printf_i+0x216>
 800a610:	e7eb      	b.n	800a5ea <_printf_i+0x20a>
 800a612:	2500      	movs	r5, #0
 800a614:	f104 0619 	add.w	r6, r4, #25
 800a618:	e7f5      	b.n	800a606 <_printf_i+0x226>
 800a61a:	bf00      	nop
 800a61c:	0800e3ee 	.word	0x0800e3ee
 800a620:	0800e3ff 	.word	0x0800e3ff

0800a624 <_scanf_float>:
 800a624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a628:	b087      	sub	sp, #28
 800a62a:	4617      	mov	r7, r2
 800a62c:	9303      	str	r3, [sp, #12]
 800a62e:	688b      	ldr	r3, [r1, #8]
 800a630:	1e5a      	subs	r2, r3, #1
 800a632:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a636:	bf83      	ittte	hi
 800a638:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a63c:	195b      	addhi	r3, r3, r5
 800a63e:	9302      	strhi	r3, [sp, #8]
 800a640:	2300      	movls	r3, #0
 800a642:	bf86      	itte	hi
 800a644:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a648:	608b      	strhi	r3, [r1, #8]
 800a64a:	9302      	strls	r3, [sp, #8]
 800a64c:	680b      	ldr	r3, [r1, #0]
 800a64e:	468b      	mov	fp, r1
 800a650:	2500      	movs	r5, #0
 800a652:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a656:	f84b 3b1c 	str.w	r3, [fp], #28
 800a65a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a65e:	4680      	mov	r8, r0
 800a660:	460c      	mov	r4, r1
 800a662:	465e      	mov	r6, fp
 800a664:	46aa      	mov	sl, r5
 800a666:	46a9      	mov	r9, r5
 800a668:	9501      	str	r5, [sp, #4]
 800a66a:	68a2      	ldr	r2, [r4, #8]
 800a66c:	b152      	cbz	r2, 800a684 <_scanf_float+0x60>
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	2b4e      	cmp	r3, #78	; 0x4e
 800a674:	d864      	bhi.n	800a740 <_scanf_float+0x11c>
 800a676:	2b40      	cmp	r3, #64	; 0x40
 800a678:	d83c      	bhi.n	800a6f4 <_scanf_float+0xd0>
 800a67a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a67e:	b2c8      	uxtb	r0, r1
 800a680:	280e      	cmp	r0, #14
 800a682:	d93a      	bls.n	800a6fa <_scanf_float+0xd6>
 800a684:	f1b9 0f00 	cmp.w	r9, #0
 800a688:	d003      	beq.n	800a692 <_scanf_float+0x6e>
 800a68a:	6823      	ldr	r3, [r4, #0]
 800a68c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a690:	6023      	str	r3, [r4, #0]
 800a692:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a696:	f1ba 0f01 	cmp.w	sl, #1
 800a69a:	f200 8113 	bhi.w	800a8c4 <_scanf_float+0x2a0>
 800a69e:	455e      	cmp	r6, fp
 800a6a0:	f200 8105 	bhi.w	800a8ae <_scanf_float+0x28a>
 800a6a4:	2501      	movs	r5, #1
 800a6a6:	4628      	mov	r0, r5
 800a6a8:	b007      	add	sp, #28
 800a6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ae:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a6b2:	2a0d      	cmp	r2, #13
 800a6b4:	d8e6      	bhi.n	800a684 <_scanf_float+0x60>
 800a6b6:	a101      	add	r1, pc, #4	; (adr r1, 800a6bc <_scanf_float+0x98>)
 800a6b8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a6bc:	0800a7fb 	.word	0x0800a7fb
 800a6c0:	0800a685 	.word	0x0800a685
 800a6c4:	0800a685 	.word	0x0800a685
 800a6c8:	0800a685 	.word	0x0800a685
 800a6cc:	0800a85b 	.word	0x0800a85b
 800a6d0:	0800a833 	.word	0x0800a833
 800a6d4:	0800a685 	.word	0x0800a685
 800a6d8:	0800a685 	.word	0x0800a685
 800a6dc:	0800a809 	.word	0x0800a809
 800a6e0:	0800a685 	.word	0x0800a685
 800a6e4:	0800a685 	.word	0x0800a685
 800a6e8:	0800a685 	.word	0x0800a685
 800a6ec:	0800a685 	.word	0x0800a685
 800a6f0:	0800a7c1 	.word	0x0800a7c1
 800a6f4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a6f8:	e7db      	b.n	800a6b2 <_scanf_float+0x8e>
 800a6fa:	290e      	cmp	r1, #14
 800a6fc:	d8c2      	bhi.n	800a684 <_scanf_float+0x60>
 800a6fe:	a001      	add	r0, pc, #4	; (adr r0, 800a704 <_scanf_float+0xe0>)
 800a700:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a704:	0800a7b3 	.word	0x0800a7b3
 800a708:	0800a685 	.word	0x0800a685
 800a70c:	0800a7b3 	.word	0x0800a7b3
 800a710:	0800a847 	.word	0x0800a847
 800a714:	0800a685 	.word	0x0800a685
 800a718:	0800a761 	.word	0x0800a761
 800a71c:	0800a79d 	.word	0x0800a79d
 800a720:	0800a79d 	.word	0x0800a79d
 800a724:	0800a79d 	.word	0x0800a79d
 800a728:	0800a79d 	.word	0x0800a79d
 800a72c:	0800a79d 	.word	0x0800a79d
 800a730:	0800a79d 	.word	0x0800a79d
 800a734:	0800a79d 	.word	0x0800a79d
 800a738:	0800a79d 	.word	0x0800a79d
 800a73c:	0800a79d 	.word	0x0800a79d
 800a740:	2b6e      	cmp	r3, #110	; 0x6e
 800a742:	d809      	bhi.n	800a758 <_scanf_float+0x134>
 800a744:	2b60      	cmp	r3, #96	; 0x60
 800a746:	d8b2      	bhi.n	800a6ae <_scanf_float+0x8a>
 800a748:	2b54      	cmp	r3, #84	; 0x54
 800a74a:	d077      	beq.n	800a83c <_scanf_float+0x218>
 800a74c:	2b59      	cmp	r3, #89	; 0x59
 800a74e:	d199      	bne.n	800a684 <_scanf_float+0x60>
 800a750:	2d07      	cmp	r5, #7
 800a752:	d197      	bne.n	800a684 <_scanf_float+0x60>
 800a754:	2508      	movs	r5, #8
 800a756:	e029      	b.n	800a7ac <_scanf_float+0x188>
 800a758:	2b74      	cmp	r3, #116	; 0x74
 800a75a:	d06f      	beq.n	800a83c <_scanf_float+0x218>
 800a75c:	2b79      	cmp	r3, #121	; 0x79
 800a75e:	e7f6      	b.n	800a74e <_scanf_float+0x12a>
 800a760:	6821      	ldr	r1, [r4, #0]
 800a762:	05c8      	lsls	r0, r1, #23
 800a764:	d51a      	bpl.n	800a79c <_scanf_float+0x178>
 800a766:	9b02      	ldr	r3, [sp, #8]
 800a768:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a76c:	6021      	str	r1, [r4, #0]
 800a76e:	f109 0901 	add.w	r9, r9, #1
 800a772:	b11b      	cbz	r3, 800a77c <_scanf_float+0x158>
 800a774:	3b01      	subs	r3, #1
 800a776:	3201      	adds	r2, #1
 800a778:	9302      	str	r3, [sp, #8]
 800a77a:	60a2      	str	r2, [r4, #8]
 800a77c:	68a3      	ldr	r3, [r4, #8]
 800a77e:	3b01      	subs	r3, #1
 800a780:	60a3      	str	r3, [r4, #8]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	3301      	adds	r3, #1
 800a786:	6123      	str	r3, [r4, #16]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3b01      	subs	r3, #1
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	607b      	str	r3, [r7, #4]
 800a790:	f340 8084 	ble.w	800a89c <_scanf_float+0x278>
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	3301      	adds	r3, #1
 800a798:	603b      	str	r3, [r7, #0]
 800a79a:	e766      	b.n	800a66a <_scanf_float+0x46>
 800a79c:	eb1a 0f05 	cmn.w	sl, r5
 800a7a0:	f47f af70 	bne.w	800a684 <_scanf_float+0x60>
 800a7a4:	6822      	ldr	r2, [r4, #0]
 800a7a6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a7aa:	6022      	str	r2, [r4, #0]
 800a7ac:	f806 3b01 	strb.w	r3, [r6], #1
 800a7b0:	e7e4      	b.n	800a77c <_scanf_float+0x158>
 800a7b2:	6822      	ldr	r2, [r4, #0]
 800a7b4:	0610      	lsls	r0, r2, #24
 800a7b6:	f57f af65 	bpl.w	800a684 <_scanf_float+0x60>
 800a7ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7be:	e7f4      	b.n	800a7aa <_scanf_float+0x186>
 800a7c0:	f1ba 0f00 	cmp.w	sl, #0
 800a7c4:	d10e      	bne.n	800a7e4 <_scanf_float+0x1c0>
 800a7c6:	f1b9 0f00 	cmp.w	r9, #0
 800a7ca:	d10e      	bne.n	800a7ea <_scanf_float+0x1c6>
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a7d2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a7d6:	d108      	bne.n	800a7ea <_scanf_float+0x1c6>
 800a7d8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a7dc:	6022      	str	r2, [r4, #0]
 800a7de:	f04f 0a01 	mov.w	sl, #1
 800a7e2:	e7e3      	b.n	800a7ac <_scanf_float+0x188>
 800a7e4:	f1ba 0f02 	cmp.w	sl, #2
 800a7e8:	d055      	beq.n	800a896 <_scanf_float+0x272>
 800a7ea:	2d01      	cmp	r5, #1
 800a7ec:	d002      	beq.n	800a7f4 <_scanf_float+0x1d0>
 800a7ee:	2d04      	cmp	r5, #4
 800a7f0:	f47f af48 	bne.w	800a684 <_scanf_float+0x60>
 800a7f4:	3501      	adds	r5, #1
 800a7f6:	b2ed      	uxtb	r5, r5
 800a7f8:	e7d8      	b.n	800a7ac <_scanf_float+0x188>
 800a7fa:	f1ba 0f01 	cmp.w	sl, #1
 800a7fe:	f47f af41 	bne.w	800a684 <_scanf_float+0x60>
 800a802:	f04f 0a02 	mov.w	sl, #2
 800a806:	e7d1      	b.n	800a7ac <_scanf_float+0x188>
 800a808:	b97d      	cbnz	r5, 800a82a <_scanf_float+0x206>
 800a80a:	f1b9 0f00 	cmp.w	r9, #0
 800a80e:	f47f af3c 	bne.w	800a68a <_scanf_float+0x66>
 800a812:	6822      	ldr	r2, [r4, #0]
 800a814:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a818:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a81c:	f47f af39 	bne.w	800a692 <_scanf_float+0x6e>
 800a820:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a824:	6022      	str	r2, [r4, #0]
 800a826:	2501      	movs	r5, #1
 800a828:	e7c0      	b.n	800a7ac <_scanf_float+0x188>
 800a82a:	2d03      	cmp	r5, #3
 800a82c:	d0e2      	beq.n	800a7f4 <_scanf_float+0x1d0>
 800a82e:	2d05      	cmp	r5, #5
 800a830:	e7de      	b.n	800a7f0 <_scanf_float+0x1cc>
 800a832:	2d02      	cmp	r5, #2
 800a834:	f47f af26 	bne.w	800a684 <_scanf_float+0x60>
 800a838:	2503      	movs	r5, #3
 800a83a:	e7b7      	b.n	800a7ac <_scanf_float+0x188>
 800a83c:	2d06      	cmp	r5, #6
 800a83e:	f47f af21 	bne.w	800a684 <_scanf_float+0x60>
 800a842:	2507      	movs	r5, #7
 800a844:	e7b2      	b.n	800a7ac <_scanf_float+0x188>
 800a846:	6822      	ldr	r2, [r4, #0]
 800a848:	0591      	lsls	r1, r2, #22
 800a84a:	f57f af1b 	bpl.w	800a684 <_scanf_float+0x60>
 800a84e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a852:	6022      	str	r2, [r4, #0]
 800a854:	f8cd 9004 	str.w	r9, [sp, #4]
 800a858:	e7a8      	b.n	800a7ac <_scanf_float+0x188>
 800a85a:	6822      	ldr	r2, [r4, #0]
 800a85c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a860:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800a864:	d006      	beq.n	800a874 <_scanf_float+0x250>
 800a866:	0550      	lsls	r0, r2, #21
 800a868:	f57f af0c 	bpl.w	800a684 <_scanf_float+0x60>
 800a86c:	f1b9 0f00 	cmp.w	r9, #0
 800a870:	f43f af0f 	beq.w	800a692 <_scanf_float+0x6e>
 800a874:	0591      	lsls	r1, r2, #22
 800a876:	bf58      	it	pl
 800a878:	9901      	ldrpl	r1, [sp, #4]
 800a87a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a87e:	bf58      	it	pl
 800a880:	eba9 0101 	subpl.w	r1, r9, r1
 800a884:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800a888:	bf58      	it	pl
 800a88a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800a88e:	6022      	str	r2, [r4, #0]
 800a890:	f04f 0900 	mov.w	r9, #0
 800a894:	e78a      	b.n	800a7ac <_scanf_float+0x188>
 800a896:	f04f 0a03 	mov.w	sl, #3
 800a89a:	e787      	b.n	800a7ac <_scanf_float+0x188>
 800a89c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	4640      	mov	r0, r8
 800a8a4:	4798      	blx	r3
 800a8a6:	2800      	cmp	r0, #0
 800a8a8:	f43f aedf 	beq.w	800a66a <_scanf_float+0x46>
 800a8ac:	e6ea      	b.n	800a684 <_scanf_float+0x60>
 800a8ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8b6:	463a      	mov	r2, r7
 800a8b8:	4640      	mov	r0, r8
 800a8ba:	4798      	blx	r3
 800a8bc:	6923      	ldr	r3, [r4, #16]
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	6123      	str	r3, [r4, #16]
 800a8c2:	e6ec      	b.n	800a69e <_scanf_float+0x7a>
 800a8c4:	1e6b      	subs	r3, r5, #1
 800a8c6:	2b06      	cmp	r3, #6
 800a8c8:	d825      	bhi.n	800a916 <_scanf_float+0x2f2>
 800a8ca:	2d02      	cmp	r5, #2
 800a8cc:	d836      	bhi.n	800a93c <_scanf_float+0x318>
 800a8ce:	455e      	cmp	r6, fp
 800a8d0:	f67f aee8 	bls.w	800a6a4 <_scanf_float+0x80>
 800a8d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8d8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a8dc:	463a      	mov	r2, r7
 800a8de:	4640      	mov	r0, r8
 800a8e0:	4798      	blx	r3
 800a8e2:	6923      	ldr	r3, [r4, #16]
 800a8e4:	3b01      	subs	r3, #1
 800a8e6:	6123      	str	r3, [r4, #16]
 800a8e8:	e7f1      	b.n	800a8ce <_scanf_float+0x2aa>
 800a8ea:	9802      	ldr	r0, [sp, #8]
 800a8ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a8f0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800a8f4:	9002      	str	r0, [sp, #8]
 800a8f6:	463a      	mov	r2, r7
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	4798      	blx	r3
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	6123      	str	r3, [r4, #16]
 800a902:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a906:	fa5f fa8a 	uxtb.w	sl, sl
 800a90a:	f1ba 0f02 	cmp.w	sl, #2
 800a90e:	d1ec      	bne.n	800a8ea <_scanf_float+0x2c6>
 800a910:	3d03      	subs	r5, #3
 800a912:	b2ed      	uxtb	r5, r5
 800a914:	1b76      	subs	r6, r6, r5
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	05da      	lsls	r2, r3, #23
 800a91a:	d52f      	bpl.n	800a97c <_scanf_float+0x358>
 800a91c:	055b      	lsls	r3, r3, #21
 800a91e:	d510      	bpl.n	800a942 <_scanf_float+0x31e>
 800a920:	455e      	cmp	r6, fp
 800a922:	f67f aebf 	bls.w	800a6a4 <_scanf_float+0x80>
 800a926:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a92a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800a92e:	463a      	mov	r2, r7
 800a930:	4640      	mov	r0, r8
 800a932:	4798      	blx	r3
 800a934:	6923      	ldr	r3, [r4, #16]
 800a936:	3b01      	subs	r3, #1
 800a938:	6123      	str	r3, [r4, #16]
 800a93a:	e7f1      	b.n	800a920 <_scanf_float+0x2fc>
 800a93c:	46aa      	mov	sl, r5
 800a93e:	9602      	str	r6, [sp, #8]
 800a940:	e7df      	b.n	800a902 <_scanf_float+0x2de>
 800a942:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800a946:	6923      	ldr	r3, [r4, #16]
 800a948:	2965      	cmp	r1, #101	; 0x65
 800a94a:	f103 33ff 	add.w	r3, r3, #4294967295
 800a94e:	f106 35ff 	add.w	r5, r6, #4294967295
 800a952:	6123      	str	r3, [r4, #16]
 800a954:	d00c      	beq.n	800a970 <_scanf_float+0x34c>
 800a956:	2945      	cmp	r1, #69	; 0x45
 800a958:	d00a      	beq.n	800a970 <_scanf_float+0x34c>
 800a95a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a95e:	463a      	mov	r2, r7
 800a960:	4640      	mov	r0, r8
 800a962:	4798      	blx	r3
 800a964:	6923      	ldr	r3, [r4, #16]
 800a966:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800a96a:	3b01      	subs	r3, #1
 800a96c:	1eb5      	subs	r5, r6, #2
 800a96e:	6123      	str	r3, [r4, #16]
 800a970:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a974:	463a      	mov	r2, r7
 800a976:	4640      	mov	r0, r8
 800a978:	4798      	blx	r3
 800a97a:	462e      	mov	r6, r5
 800a97c:	6825      	ldr	r5, [r4, #0]
 800a97e:	f015 0510 	ands.w	r5, r5, #16
 800a982:	d14d      	bne.n	800aa20 <_scanf_float+0x3fc>
 800a984:	7035      	strb	r5, [r6, #0]
 800a986:	6823      	ldr	r3, [r4, #0]
 800a988:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a98c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a990:	d11a      	bne.n	800a9c8 <_scanf_float+0x3a4>
 800a992:	9b01      	ldr	r3, [sp, #4]
 800a994:	454b      	cmp	r3, r9
 800a996:	eba3 0209 	sub.w	r2, r3, r9
 800a99a:	d122      	bne.n	800a9e2 <_scanf_float+0x3be>
 800a99c:	2200      	movs	r2, #0
 800a99e:	4659      	mov	r1, fp
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	f002 fac3 	bl	800cf2c <_strtod_r>
 800a9a6:	9b03      	ldr	r3, [sp, #12]
 800a9a8:	6821      	ldr	r1, [r4, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f011 0f02 	tst.w	r1, #2
 800a9b0:	f103 0204 	add.w	r2, r3, #4
 800a9b4:	d020      	beq.n	800a9f8 <_scanf_float+0x3d4>
 800a9b6:	9903      	ldr	r1, [sp, #12]
 800a9b8:	600a      	str	r2, [r1, #0]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	ed83 0b00 	vstr	d0, [r3]
 800a9c0:	68e3      	ldr	r3, [r4, #12]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	60e3      	str	r3, [r4, #12]
 800a9c6:	e66e      	b.n	800a6a6 <_scanf_float+0x82>
 800a9c8:	9b04      	ldr	r3, [sp, #16]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d0e6      	beq.n	800a99c <_scanf_float+0x378>
 800a9ce:	9905      	ldr	r1, [sp, #20]
 800a9d0:	230a      	movs	r3, #10
 800a9d2:	462a      	mov	r2, r5
 800a9d4:	3101      	adds	r1, #1
 800a9d6:	4640      	mov	r0, r8
 800a9d8:	f002 fb30 	bl	800d03c <_strtol_r>
 800a9dc:	9b04      	ldr	r3, [sp, #16]
 800a9de:	9e05      	ldr	r6, [sp, #20]
 800a9e0:	1ac2      	subs	r2, r0, r3
 800a9e2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800a9e6:	429e      	cmp	r6, r3
 800a9e8:	bf28      	it	cs
 800a9ea:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800a9ee:	490d      	ldr	r1, [pc, #52]	; (800aa24 <_scanf_float+0x400>)
 800a9f0:	4630      	mov	r0, r6
 800a9f2:	f000 f8dd 	bl	800abb0 <siprintf>
 800a9f6:	e7d1      	b.n	800a99c <_scanf_float+0x378>
 800a9f8:	f011 0f04 	tst.w	r1, #4
 800a9fc:	9903      	ldr	r1, [sp, #12]
 800a9fe:	600a      	str	r2, [r1, #0]
 800aa00:	d1db      	bne.n	800a9ba <_scanf_float+0x396>
 800aa02:	eeb4 0b40 	vcmp.f64	d0, d0
 800aa06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa0a:	681e      	ldr	r6, [r3, #0]
 800aa0c:	d705      	bvc.n	800aa1a <_scanf_float+0x3f6>
 800aa0e:	4806      	ldr	r0, [pc, #24]	; (800aa28 <_scanf_float+0x404>)
 800aa10:	f000 f9d0 	bl	800adb4 <nanf>
 800aa14:	ed86 0a00 	vstr	s0, [r6]
 800aa18:	e7d2      	b.n	800a9c0 <_scanf_float+0x39c>
 800aa1a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800aa1e:	e7f9      	b.n	800aa14 <_scanf_float+0x3f0>
 800aa20:	2500      	movs	r5, #0
 800aa22:	e640      	b.n	800a6a6 <_scanf_float+0x82>
 800aa24:	0800e410 	.word	0x0800e410
 800aa28:	0800e7a5 	.word	0x0800e7a5

0800aa2c <std>:
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	b510      	push	{r4, lr}
 800aa30:	4604      	mov	r4, r0
 800aa32:	e9c0 3300 	strd	r3, r3, [r0]
 800aa36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa3a:	6083      	str	r3, [r0, #8]
 800aa3c:	8181      	strh	r1, [r0, #12]
 800aa3e:	6643      	str	r3, [r0, #100]	; 0x64
 800aa40:	81c2      	strh	r2, [r0, #14]
 800aa42:	6183      	str	r3, [r0, #24]
 800aa44:	4619      	mov	r1, r3
 800aa46:	2208      	movs	r2, #8
 800aa48:	305c      	adds	r0, #92	; 0x5c
 800aa4a:	f000 f914 	bl	800ac76 <memset>
 800aa4e:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <std+0x58>)
 800aa50:	6263      	str	r3, [r4, #36]	; 0x24
 800aa52:	4b0d      	ldr	r3, [pc, #52]	; (800aa88 <std+0x5c>)
 800aa54:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa56:	4b0d      	ldr	r3, [pc, #52]	; (800aa8c <std+0x60>)
 800aa58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa5a:	4b0d      	ldr	r3, [pc, #52]	; (800aa90 <std+0x64>)
 800aa5c:	6323      	str	r3, [r4, #48]	; 0x30
 800aa5e:	4b0d      	ldr	r3, [pc, #52]	; (800aa94 <std+0x68>)
 800aa60:	6224      	str	r4, [r4, #32]
 800aa62:	429c      	cmp	r4, r3
 800aa64:	d006      	beq.n	800aa74 <std+0x48>
 800aa66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800aa6a:	4294      	cmp	r4, r2
 800aa6c:	d002      	beq.n	800aa74 <std+0x48>
 800aa6e:	33d0      	adds	r3, #208	; 0xd0
 800aa70:	429c      	cmp	r4, r3
 800aa72:	d105      	bne.n	800aa80 <std+0x54>
 800aa74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aa78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa7c:	f000 b988 	b.w	800ad90 <__retarget_lock_init_recursive>
 800aa80:	bd10      	pop	{r4, pc}
 800aa82:	bf00      	nop
 800aa84:	0800abf1 	.word	0x0800abf1
 800aa88:	0800ac13 	.word	0x0800ac13
 800aa8c:	0800ac4b 	.word	0x0800ac4b
 800aa90:	0800ac6f 	.word	0x0800ac6f
 800aa94:	20000614 	.word	0x20000614

0800aa98 <stdio_exit_handler>:
 800aa98:	4a02      	ldr	r2, [pc, #8]	; (800aaa4 <stdio_exit_handler+0xc>)
 800aa9a:	4903      	ldr	r1, [pc, #12]	; (800aaa8 <stdio_exit_handler+0x10>)
 800aa9c:	4803      	ldr	r0, [pc, #12]	; (800aaac <stdio_exit_handler+0x14>)
 800aa9e:	f000 b869 	b.w	800ab74 <_fwalk_sglue>
 800aaa2:	bf00      	nop
 800aaa4:	200000ac 	.word	0x200000ac
 800aaa8:	0800d3fd 	.word	0x0800d3fd
 800aaac:	200000b8 	.word	0x200000b8

0800aab0 <cleanup_stdio>:
 800aab0:	6841      	ldr	r1, [r0, #4]
 800aab2:	4b0c      	ldr	r3, [pc, #48]	; (800aae4 <cleanup_stdio+0x34>)
 800aab4:	4299      	cmp	r1, r3
 800aab6:	b510      	push	{r4, lr}
 800aab8:	4604      	mov	r4, r0
 800aaba:	d001      	beq.n	800aac0 <cleanup_stdio+0x10>
 800aabc:	f002 fc9e 	bl	800d3fc <_fflush_r>
 800aac0:	68a1      	ldr	r1, [r4, #8]
 800aac2:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <cleanup_stdio+0x38>)
 800aac4:	4299      	cmp	r1, r3
 800aac6:	d002      	beq.n	800aace <cleanup_stdio+0x1e>
 800aac8:	4620      	mov	r0, r4
 800aaca:	f002 fc97 	bl	800d3fc <_fflush_r>
 800aace:	68e1      	ldr	r1, [r4, #12]
 800aad0:	4b06      	ldr	r3, [pc, #24]	; (800aaec <cleanup_stdio+0x3c>)
 800aad2:	4299      	cmp	r1, r3
 800aad4:	d004      	beq.n	800aae0 <cleanup_stdio+0x30>
 800aad6:	4620      	mov	r0, r4
 800aad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aadc:	f002 bc8e 	b.w	800d3fc <_fflush_r>
 800aae0:	bd10      	pop	{r4, pc}
 800aae2:	bf00      	nop
 800aae4:	20000614 	.word	0x20000614
 800aae8:	2000067c 	.word	0x2000067c
 800aaec:	200006e4 	.word	0x200006e4

0800aaf0 <global_stdio_init.part.0>:
 800aaf0:	b510      	push	{r4, lr}
 800aaf2:	4b0b      	ldr	r3, [pc, #44]	; (800ab20 <global_stdio_init.part.0+0x30>)
 800aaf4:	4c0b      	ldr	r4, [pc, #44]	; (800ab24 <global_stdio_init.part.0+0x34>)
 800aaf6:	4a0c      	ldr	r2, [pc, #48]	; (800ab28 <global_stdio_init.part.0+0x38>)
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	4620      	mov	r0, r4
 800aafc:	2200      	movs	r2, #0
 800aafe:	2104      	movs	r1, #4
 800ab00:	f7ff ff94 	bl	800aa2c <std>
 800ab04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ab08:	2201      	movs	r2, #1
 800ab0a:	2109      	movs	r1, #9
 800ab0c:	f7ff ff8e 	bl	800aa2c <std>
 800ab10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ab14:	2202      	movs	r2, #2
 800ab16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab1a:	2112      	movs	r1, #18
 800ab1c:	f7ff bf86 	b.w	800aa2c <std>
 800ab20:	2000074c 	.word	0x2000074c
 800ab24:	20000614 	.word	0x20000614
 800ab28:	0800aa99 	.word	0x0800aa99

0800ab2c <__sfp_lock_acquire>:
 800ab2c:	4801      	ldr	r0, [pc, #4]	; (800ab34 <__sfp_lock_acquire+0x8>)
 800ab2e:	f000 b930 	b.w	800ad92 <__retarget_lock_acquire_recursive>
 800ab32:	bf00      	nop
 800ab34:	20000755 	.word	0x20000755

0800ab38 <__sfp_lock_release>:
 800ab38:	4801      	ldr	r0, [pc, #4]	; (800ab40 <__sfp_lock_release+0x8>)
 800ab3a:	f000 b92b 	b.w	800ad94 <__retarget_lock_release_recursive>
 800ab3e:	bf00      	nop
 800ab40:	20000755 	.word	0x20000755

0800ab44 <__sinit>:
 800ab44:	b510      	push	{r4, lr}
 800ab46:	4604      	mov	r4, r0
 800ab48:	f7ff fff0 	bl	800ab2c <__sfp_lock_acquire>
 800ab4c:	6a23      	ldr	r3, [r4, #32]
 800ab4e:	b11b      	cbz	r3, 800ab58 <__sinit+0x14>
 800ab50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab54:	f7ff bff0 	b.w	800ab38 <__sfp_lock_release>
 800ab58:	4b04      	ldr	r3, [pc, #16]	; (800ab6c <__sinit+0x28>)
 800ab5a:	6223      	str	r3, [r4, #32]
 800ab5c:	4b04      	ldr	r3, [pc, #16]	; (800ab70 <__sinit+0x2c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d1f5      	bne.n	800ab50 <__sinit+0xc>
 800ab64:	f7ff ffc4 	bl	800aaf0 <global_stdio_init.part.0>
 800ab68:	e7f2      	b.n	800ab50 <__sinit+0xc>
 800ab6a:	bf00      	nop
 800ab6c:	0800aab1 	.word	0x0800aab1
 800ab70:	2000074c 	.word	0x2000074c

0800ab74 <_fwalk_sglue>:
 800ab74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab78:	4607      	mov	r7, r0
 800ab7a:	4688      	mov	r8, r1
 800ab7c:	4614      	mov	r4, r2
 800ab7e:	2600      	movs	r6, #0
 800ab80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab84:	f1b9 0901 	subs.w	r9, r9, #1
 800ab88:	d505      	bpl.n	800ab96 <_fwalk_sglue+0x22>
 800ab8a:	6824      	ldr	r4, [r4, #0]
 800ab8c:	2c00      	cmp	r4, #0
 800ab8e:	d1f7      	bne.n	800ab80 <_fwalk_sglue+0xc>
 800ab90:	4630      	mov	r0, r6
 800ab92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab96:	89ab      	ldrh	r3, [r5, #12]
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d907      	bls.n	800abac <_fwalk_sglue+0x38>
 800ab9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aba0:	3301      	adds	r3, #1
 800aba2:	d003      	beq.n	800abac <_fwalk_sglue+0x38>
 800aba4:	4629      	mov	r1, r5
 800aba6:	4638      	mov	r0, r7
 800aba8:	47c0      	blx	r8
 800abaa:	4306      	orrs	r6, r0
 800abac:	3568      	adds	r5, #104	; 0x68
 800abae:	e7e9      	b.n	800ab84 <_fwalk_sglue+0x10>

0800abb0 <siprintf>:
 800abb0:	b40e      	push	{r1, r2, r3}
 800abb2:	b500      	push	{lr}
 800abb4:	b09c      	sub	sp, #112	; 0x70
 800abb6:	ab1d      	add	r3, sp, #116	; 0x74
 800abb8:	9002      	str	r0, [sp, #8]
 800abba:	9006      	str	r0, [sp, #24]
 800abbc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abc0:	4809      	ldr	r0, [pc, #36]	; (800abe8 <siprintf+0x38>)
 800abc2:	9107      	str	r1, [sp, #28]
 800abc4:	9104      	str	r1, [sp, #16]
 800abc6:	4909      	ldr	r1, [pc, #36]	; (800abec <siprintf+0x3c>)
 800abc8:	f853 2b04 	ldr.w	r2, [r3], #4
 800abcc:	9105      	str	r1, [sp, #20]
 800abce:	6800      	ldr	r0, [r0, #0]
 800abd0:	9301      	str	r3, [sp, #4]
 800abd2:	a902      	add	r1, sp, #8
 800abd4:	f002 fa8e 	bl	800d0f4 <_svfiprintf_r>
 800abd8:	9b02      	ldr	r3, [sp, #8]
 800abda:	2200      	movs	r2, #0
 800abdc:	701a      	strb	r2, [r3, #0]
 800abde:	b01c      	add	sp, #112	; 0x70
 800abe0:	f85d eb04 	ldr.w	lr, [sp], #4
 800abe4:	b003      	add	sp, #12
 800abe6:	4770      	bx	lr
 800abe8:	20000104 	.word	0x20000104
 800abec:	ffff0208 	.word	0xffff0208

0800abf0 <__sread>:
 800abf0:	b510      	push	{r4, lr}
 800abf2:	460c      	mov	r4, r1
 800abf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800abf8:	f000 f86c 	bl	800acd4 <_read_r>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	bfab      	itete	ge
 800ac00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac02:	89a3      	ldrhlt	r3, [r4, #12]
 800ac04:	181b      	addge	r3, r3, r0
 800ac06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ac0a:	bfac      	ite	ge
 800ac0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800ac0e:	81a3      	strhlt	r3, [r4, #12]
 800ac10:	bd10      	pop	{r4, pc}

0800ac12 <__swrite>:
 800ac12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac16:	461f      	mov	r7, r3
 800ac18:	898b      	ldrh	r3, [r1, #12]
 800ac1a:	05db      	lsls	r3, r3, #23
 800ac1c:	4605      	mov	r5, r0
 800ac1e:	460c      	mov	r4, r1
 800ac20:	4616      	mov	r6, r2
 800ac22:	d505      	bpl.n	800ac30 <__swrite+0x1e>
 800ac24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac28:	2302      	movs	r3, #2
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	f000 f840 	bl	800acb0 <_lseek_r>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	463b      	mov	r3, r7
 800ac40:	4628      	mov	r0, r5
 800ac42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ac46:	f000 b867 	b.w	800ad18 <_write_r>

0800ac4a <__sseek>:
 800ac4a:	b510      	push	{r4, lr}
 800ac4c:	460c      	mov	r4, r1
 800ac4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac52:	f000 f82d 	bl	800acb0 <_lseek_r>
 800ac56:	1c43      	adds	r3, r0, #1
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	bf15      	itete	ne
 800ac5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800ac5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ac62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ac66:	81a3      	strheq	r3, [r4, #12]
 800ac68:	bf18      	it	ne
 800ac6a:	81a3      	strhne	r3, [r4, #12]
 800ac6c:	bd10      	pop	{r4, pc}

0800ac6e <__sclose>:
 800ac6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac72:	f000 b80d 	b.w	800ac90 <_close_r>

0800ac76 <memset>:
 800ac76:	4402      	add	r2, r0
 800ac78:	4603      	mov	r3, r0
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d100      	bne.n	800ac80 <memset+0xa>
 800ac7e:	4770      	bx	lr
 800ac80:	f803 1b01 	strb.w	r1, [r3], #1
 800ac84:	e7f9      	b.n	800ac7a <memset+0x4>
	...

0800ac88 <_localeconv_r>:
 800ac88:	4800      	ldr	r0, [pc, #0]	; (800ac8c <_localeconv_r+0x4>)
 800ac8a:	4770      	bx	lr
 800ac8c:	200001f8 	.word	0x200001f8

0800ac90 <_close_r>:
 800ac90:	b538      	push	{r3, r4, r5, lr}
 800ac92:	4d06      	ldr	r5, [pc, #24]	; (800acac <_close_r+0x1c>)
 800ac94:	2300      	movs	r3, #0
 800ac96:	4604      	mov	r4, r0
 800ac98:	4608      	mov	r0, r1
 800ac9a:	602b      	str	r3, [r5, #0]
 800ac9c:	f7f7 fa69 	bl	8002172 <_close>
 800aca0:	1c43      	adds	r3, r0, #1
 800aca2:	d102      	bne.n	800acaa <_close_r+0x1a>
 800aca4:	682b      	ldr	r3, [r5, #0]
 800aca6:	b103      	cbz	r3, 800acaa <_close_r+0x1a>
 800aca8:	6023      	str	r3, [r4, #0]
 800acaa:	bd38      	pop	{r3, r4, r5, pc}
 800acac:	20000750 	.word	0x20000750

0800acb0 <_lseek_r>:
 800acb0:	b538      	push	{r3, r4, r5, lr}
 800acb2:	4d07      	ldr	r5, [pc, #28]	; (800acd0 <_lseek_r+0x20>)
 800acb4:	4604      	mov	r4, r0
 800acb6:	4608      	mov	r0, r1
 800acb8:	4611      	mov	r1, r2
 800acba:	2200      	movs	r2, #0
 800acbc:	602a      	str	r2, [r5, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	f7f7 fa7e 	bl	80021c0 <_lseek>
 800acc4:	1c43      	adds	r3, r0, #1
 800acc6:	d102      	bne.n	800acce <_lseek_r+0x1e>
 800acc8:	682b      	ldr	r3, [r5, #0]
 800acca:	b103      	cbz	r3, 800acce <_lseek_r+0x1e>
 800accc:	6023      	str	r3, [r4, #0]
 800acce:	bd38      	pop	{r3, r4, r5, pc}
 800acd0:	20000750 	.word	0x20000750

0800acd4 <_read_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	4d07      	ldr	r5, [pc, #28]	; (800acf4 <_read_r+0x20>)
 800acd8:	4604      	mov	r4, r0
 800acda:	4608      	mov	r0, r1
 800acdc:	4611      	mov	r1, r2
 800acde:	2200      	movs	r2, #0
 800ace0:	602a      	str	r2, [r5, #0]
 800ace2:	461a      	mov	r2, r3
 800ace4:	f7f7 fa0c 	bl	8002100 <_read>
 800ace8:	1c43      	adds	r3, r0, #1
 800acea:	d102      	bne.n	800acf2 <_read_r+0x1e>
 800acec:	682b      	ldr	r3, [r5, #0]
 800acee:	b103      	cbz	r3, 800acf2 <_read_r+0x1e>
 800acf0:	6023      	str	r3, [r4, #0]
 800acf2:	bd38      	pop	{r3, r4, r5, pc}
 800acf4:	20000750 	.word	0x20000750

0800acf8 <_sbrk_r>:
 800acf8:	b538      	push	{r3, r4, r5, lr}
 800acfa:	4d06      	ldr	r5, [pc, #24]	; (800ad14 <_sbrk_r+0x1c>)
 800acfc:	2300      	movs	r3, #0
 800acfe:	4604      	mov	r4, r0
 800ad00:	4608      	mov	r0, r1
 800ad02:	602b      	str	r3, [r5, #0]
 800ad04:	f7f7 fa6a 	bl	80021dc <_sbrk>
 800ad08:	1c43      	adds	r3, r0, #1
 800ad0a:	d102      	bne.n	800ad12 <_sbrk_r+0x1a>
 800ad0c:	682b      	ldr	r3, [r5, #0]
 800ad0e:	b103      	cbz	r3, 800ad12 <_sbrk_r+0x1a>
 800ad10:	6023      	str	r3, [r4, #0]
 800ad12:	bd38      	pop	{r3, r4, r5, pc}
 800ad14:	20000750 	.word	0x20000750

0800ad18 <_write_r>:
 800ad18:	b538      	push	{r3, r4, r5, lr}
 800ad1a:	4d07      	ldr	r5, [pc, #28]	; (800ad38 <_write_r+0x20>)
 800ad1c:	4604      	mov	r4, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	4611      	mov	r1, r2
 800ad22:	2200      	movs	r2, #0
 800ad24:	602a      	str	r2, [r5, #0]
 800ad26:	461a      	mov	r2, r3
 800ad28:	f7f7 fa07 	bl	800213a <_write>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	d102      	bne.n	800ad36 <_write_r+0x1e>
 800ad30:	682b      	ldr	r3, [r5, #0]
 800ad32:	b103      	cbz	r3, 800ad36 <_write_r+0x1e>
 800ad34:	6023      	str	r3, [r4, #0]
 800ad36:	bd38      	pop	{r3, r4, r5, pc}
 800ad38:	20000750 	.word	0x20000750

0800ad3c <__errno>:
 800ad3c:	4b01      	ldr	r3, [pc, #4]	; (800ad44 <__errno+0x8>)
 800ad3e:	6818      	ldr	r0, [r3, #0]
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	20000104 	.word	0x20000104

0800ad48 <__libc_init_array>:
 800ad48:	b570      	push	{r4, r5, r6, lr}
 800ad4a:	4d0d      	ldr	r5, [pc, #52]	; (800ad80 <__libc_init_array+0x38>)
 800ad4c:	4c0d      	ldr	r4, [pc, #52]	; (800ad84 <__libc_init_array+0x3c>)
 800ad4e:	1b64      	subs	r4, r4, r5
 800ad50:	10a4      	asrs	r4, r4, #2
 800ad52:	2600      	movs	r6, #0
 800ad54:	42a6      	cmp	r6, r4
 800ad56:	d109      	bne.n	800ad6c <__libc_init_array+0x24>
 800ad58:	4d0b      	ldr	r5, [pc, #44]	; (800ad88 <__libc_init_array+0x40>)
 800ad5a:	4c0c      	ldr	r4, [pc, #48]	; (800ad8c <__libc_init_array+0x44>)
 800ad5c:	f003 fa48 	bl	800e1f0 <_init>
 800ad60:	1b64      	subs	r4, r4, r5
 800ad62:	10a4      	asrs	r4, r4, #2
 800ad64:	2600      	movs	r6, #0
 800ad66:	42a6      	cmp	r6, r4
 800ad68:	d105      	bne.n	800ad76 <__libc_init_array+0x2e>
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}
 800ad6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad70:	4798      	blx	r3
 800ad72:	3601      	adds	r6, #1
 800ad74:	e7ee      	b.n	800ad54 <__libc_init_array+0xc>
 800ad76:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad7a:	4798      	blx	r3
 800ad7c:	3601      	adds	r6, #1
 800ad7e:	e7f2      	b.n	800ad66 <__libc_init_array+0x1e>
 800ad80:	0800e810 	.word	0x0800e810
 800ad84:	0800e810 	.word	0x0800e810
 800ad88:	0800e810 	.word	0x0800e810
 800ad8c:	0800e814 	.word	0x0800e814

0800ad90 <__retarget_lock_init_recursive>:
 800ad90:	4770      	bx	lr

0800ad92 <__retarget_lock_acquire_recursive>:
 800ad92:	4770      	bx	lr

0800ad94 <__retarget_lock_release_recursive>:
 800ad94:	4770      	bx	lr

0800ad96 <memcpy>:
 800ad96:	440a      	add	r2, r1
 800ad98:	4291      	cmp	r1, r2
 800ad9a:	f100 33ff 	add.w	r3, r0, #4294967295
 800ad9e:	d100      	bne.n	800ada2 <memcpy+0xc>
 800ada0:	4770      	bx	lr
 800ada2:	b510      	push	{r4, lr}
 800ada4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ada8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adac:	4291      	cmp	r1, r2
 800adae:	d1f9      	bne.n	800ada4 <memcpy+0xe>
 800adb0:	bd10      	pop	{r4, pc}
	...

0800adb4 <nanf>:
 800adb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800adbc <nanf+0x8>
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	7fc00000 	.word	0x7fc00000

0800adc0 <quorem>:
 800adc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	6903      	ldr	r3, [r0, #16]
 800adc6:	690c      	ldr	r4, [r1, #16]
 800adc8:	42a3      	cmp	r3, r4
 800adca:	4607      	mov	r7, r0
 800adcc:	db7e      	blt.n	800aecc <quorem+0x10c>
 800adce:	3c01      	subs	r4, #1
 800add0:	f101 0814 	add.w	r8, r1, #20
 800add4:	f100 0514 	add.w	r5, r0, #20
 800add8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800addc:	9301      	str	r3, [sp, #4]
 800adde:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ade2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ade6:	3301      	adds	r3, #1
 800ade8:	429a      	cmp	r2, r3
 800adea:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800adee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800adf2:	fbb2 f6f3 	udiv	r6, r2, r3
 800adf6:	d331      	bcc.n	800ae5c <quorem+0x9c>
 800adf8:	f04f 0e00 	mov.w	lr, #0
 800adfc:	4640      	mov	r0, r8
 800adfe:	46ac      	mov	ip, r5
 800ae00:	46f2      	mov	sl, lr
 800ae02:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae06:	b293      	uxth	r3, r2
 800ae08:	fb06 e303 	mla	r3, r6, r3, lr
 800ae0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae10:	0c1a      	lsrs	r2, r3, #16
 800ae12:	b29b      	uxth	r3, r3
 800ae14:	ebaa 0303 	sub.w	r3, sl, r3
 800ae18:	f8dc a000 	ldr.w	sl, [ip]
 800ae1c:	fa13 f38a 	uxtah	r3, r3, sl
 800ae20:	fb06 220e 	mla	r2, r6, lr, r2
 800ae24:	9300      	str	r3, [sp, #0]
 800ae26:	9b00      	ldr	r3, [sp, #0]
 800ae28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae2c:	b292      	uxth	r2, r2
 800ae2e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae36:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae3a:	4581      	cmp	r9, r0
 800ae3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae40:	f84c 3b04 	str.w	r3, [ip], #4
 800ae44:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae48:	d2db      	bcs.n	800ae02 <quorem+0x42>
 800ae4a:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae4e:	b92b      	cbnz	r3, 800ae5c <quorem+0x9c>
 800ae50:	9b01      	ldr	r3, [sp, #4]
 800ae52:	3b04      	subs	r3, #4
 800ae54:	429d      	cmp	r5, r3
 800ae56:	461a      	mov	r2, r3
 800ae58:	d32c      	bcc.n	800aeb4 <quorem+0xf4>
 800ae5a:	613c      	str	r4, [r7, #16]
 800ae5c:	4638      	mov	r0, r7
 800ae5e:	f001 f8b5 	bl	800bfcc <__mcmp>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	db22      	blt.n	800aeac <quorem+0xec>
 800ae66:	3601      	adds	r6, #1
 800ae68:	4629      	mov	r1, r5
 800ae6a:	2000      	movs	r0, #0
 800ae6c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ae70:	f8d1 c000 	ldr.w	ip, [r1]
 800ae74:	b293      	uxth	r3, r2
 800ae76:	1ac3      	subs	r3, r0, r3
 800ae78:	0c12      	lsrs	r2, r2, #16
 800ae7a:	fa13 f38c 	uxtah	r3, r3, ip
 800ae7e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ae82:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae8c:	45c1      	cmp	r9, r8
 800ae8e:	f841 3b04 	str.w	r3, [r1], #4
 800ae92:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ae96:	d2e9      	bcs.n	800ae6c <quorem+0xac>
 800ae98:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aea0:	b922      	cbnz	r2, 800aeac <quorem+0xec>
 800aea2:	3b04      	subs	r3, #4
 800aea4:	429d      	cmp	r5, r3
 800aea6:	461a      	mov	r2, r3
 800aea8:	d30a      	bcc.n	800aec0 <quorem+0x100>
 800aeaa:	613c      	str	r4, [r7, #16]
 800aeac:	4630      	mov	r0, r6
 800aeae:	b003      	add	sp, #12
 800aeb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeb4:	6812      	ldr	r2, [r2, #0]
 800aeb6:	3b04      	subs	r3, #4
 800aeb8:	2a00      	cmp	r2, #0
 800aeba:	d1ce      	bne.n	800ae5a <quorem+0x9a>
 800aebc:	3c01      	subs	r4, #1
 800aebe:	e7c9      	b.n	800ae54 <quorem+0x94>
 800aec0:	6812      	ldr	r2, [r2, #0]
 800aec2:	3b04      	subs	r3, #4
 800aec4:	2a00      	cmp	r2, #0
 800aec6:	d1f0      	bne.n	800aeaa <quorem+0xea>
 800aec8:	3c01      	subs	r4, #1
 800aeca:	e7eb      	b.n	800aea4 <quorem+0xe4>
 800aecc:	2000      	movs	r0, #0
 800aece:	e7ee      	b.n	800aeae <quorem+0xee>

0800aed0 <_dtoa_r>:
 800aed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed4:	ed2d 8b02 	vpush	{d8}
 800aed8:	69c5      	ldr	r5, [r0, #28]
 800aeda:	b091      	sub	sp, #68	; 0x44
 800aedc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800aee0:	ec59 8b10 	vmov	r8, r9, d0
 800aee4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800aee6:	9106      	str	r1, [sp, #24]
 800aee8:	4606      	mov	r6, r0
 800aeea:	9208      	str	r2, [sp, #32]
 800aeec:	930c      	str	r3, [sp, #48]	; 0x30
 800aeee:	b975      	cbnz	r5, 800af0e <_dtoa_r+0x3e>
 800aef0:	2010      	movs	r0, #16
 800aef2:	f7fe fea9 	bl	8009c48 <malloc>
 800aef6:	4602      	mov	r2, r0
 800aef8:	61f0      	str	r0, [r6, #28]
 800aefa:	b920      	cbnz	r0, 800af06 <_dtoa_r+0x36>
 800aefc:	4ba6      	ldr	r3, [pc, #664]	; (800b198 <_dtoa_r+0x2c8>)
 800aefe:	21ef      	movs	r1, #239	; 0xef
 800af00:	48a6      	ldr	r0, [pc, #664]	; (800b19c <_dtoa_r+0x2cc>)
 800af02:	f002 fad9 	bl	800d4b8 <__assert_func>
 800af06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af0a:	6005      	str	r5, [r0, #0]
 800af0c:	60c5      	str	r5, [r0, #12]
 800af0e:	69f3      	ldr	r3, [r6, #28]
 800af10:	6819      	ldr	r1, [r3, #0]
 800af12:	b151      	cbz	r1, 800af2a <_dtoa_r+0x5a>
 800af14:	685a      	ldr	r2, [r3, #4]
 800af16:	604a      	str	r2, [r1, #4]
 800af18:	2301      	movs	r3, #1
 800af1a:	4093      	lsls	r3, r2
 800af1c:	608b      	str	r3, [r1, #8]
 800af1e:	4630      	mov	r0, r6
 800af20:	f000 fdce 	bl	800bac0 <_Bfree>
 800af24:	69f3      	ldr	r3, [r6, #28]
 800af26:	2200      	movs	r2, #0
 800af28:	601a      	str	r2, [r3, #0]
 800af2a:	f1b9 0300 	subs.w	r3, r9, #0
 800af2e:	bfbb      	ittet	lt
 800af30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800af34:	9303      	strlt	r3, [sp, #12]
 800af36:	2300      	movge	r3, #0
 800af38:	2201      	movlt	r2, #1
 800af3a:	bfac      	ite	ge
 800af3c:	6023      	strge	r3, [r4, #0]
 800af3e:	6022      	strlt	r2, [r4, #0]
 800af40:	4b97      	ldr	r3, [pc, #604]	; (800b1a0 <_dtoa_r+0x2d0>)
 800af42:	9c03      	ldr	r4, [sp, #12]
 800af44:	43a3      	bics	r3, r4
 800af46:	d11c      	bne.n	800af82 <_dtoa_r+0xb2>
 800af48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af4a:	f242 730f 	movw	r3, #9999	; 0x270f
 800af4e:	6013      	str	r3, [r2, #0]
 800af50:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800af54:	ea53 0308 	orrs.w	r3, r3, r8
 800af58:	f000 84fb 	beq.w	800b952 <_dtoa_r+0xa82>
 800af5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af5e:	b963      	cbnz	r3, 800af7a <_dtoa_r+0xaa>
 800af60:	4b90      	ldr	r3, [pc, #576]	; (800b1a4 <_dtoa_r+0x2d4>)
 800af62:	e020      	b.n	800afa6 <_dtoa_r+0xd6>
 800af64:	4b90      	ldr	r3, [pc, #576]	; (800b1a8 <_dtoa_r+0x2d8>)
 800af66:	9301      	str	r3, [sp, #4]
 800af68:	3308      	adds	r3, #8
 800af6a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800af6c:	6013      	str	r3, [r2, #0]
 800af6e:	9801      	ldr	r0, [sp, #4]
 800af70:	b011      	add	sp, #68	; 0x44
 800af72:	ecbd 8b02 	vpop	{d8}
 800af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7a:	4b8a      	ldr	r3, [pc, #552]	; (800b1a4 <_dtoa_r+0x2d4>)
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	3303      	adds	r3, #3
 800af80:	e7f3      	b.n	800af6a <_dtoa_r+0x9a>
 800af82:	ed9d 8b02 	vldr	d8, [sp, #8]
 800af86:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800af8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af8e:	d10c      	bne.n	800afaa <_dtoa_r+0xda>
 800af90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af92:	2301      	movs	r3, #1
 800af94:	6013      	str	r3, [r2, #0]
 800af96:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800af98:	2b00      	cmp	r3, #0
 800af9a:	f000 84d7 	beq.w	800b94c <_dtoa_r+0xa7c>
 800af9e:	4b83      	ldr	r3, [pc, #524]	; (800b1ac <_dtoa_r+0x2dc>)
 800afa0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	9301      	str	r3, [sp, #4]
 800afa8:	e7e1      	b.n	800af6e <_dtoa_r+0x9e>
 800afaa:	aa0e      	add	r2, sp, #56	; 0x38
 800afac:	a90f      	add	r1, sp, #60	; 0x3c
 800afae:	4630      	mov	r0, r6
 800afb0:	eeb0 0b48 	vmov.f64	d0, d8
 800afb4:	f001 f920 	bl	800c1f8 <__d2b>
 800afb8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800afbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afbe:	4605      	mov	r5, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d046      	beq.n	800b052 <_dtoa_r+0x182>
 800afc4:	eeb0 7b48 	vmov.f64	d7, d8
 800afc8:	ee18 1a90 	vmov	r1, s17
 800afcc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800afd0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800afd4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800afd8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800afdc:	2000      	movs	r0, #0
 800afde:	ee07 1a90 	vmov	s15, r1
 800afe2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800afe6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b180 <_dtoa_r+0x2b0>
 800afea:	ee37 7b46 	vsub.f64	d7, d7, d6
 800afee:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b188 <_dtoa_r+0x2b8>
 800aff2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800aff6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800b190 <_dtoa_r+0x2c0>
 800affa:	ee07 3a90 	vmov	s15, r3
 800affe:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b002:	eeb0 7b46 	vmov.f64	d7, d6
 800b006:	eea4 7b05 	vfma.f64	d7, d4, d5
 800b00a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800b00e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800b012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b016:	ee16 ba90 	vmov	fp, s13
 800b01a:	9009      	str	r0, [sp, #36]	; 0x24
 800b01c:	d508      	bpl.n	800b030 <_dtoa_r+0x160>
 800b01e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800b022:	eeb4 6b47 	vcmp.f64	d6, d7
 800b026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b02a:	bf18      	it	ne
 800b02c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800b030:	f1bb 0f16 	cmp.w	fp, #22
 800b034:	d82b      	bhi.n	800b08e <_dtoa_r+0x1be>
 800b036:	495e      	ldr	r1, [pc, #376]	; (800b1b0 <_dtoa_r+0x2e0>)
 800b038:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800b03c:	ed91 7b00 	vldr	d7, [r1]
 800b040:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b048:	d501      	bpl.n	800b04e <_dtoa_r+0x17e>
 800b04a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b04e:	2100      	movs	r1, #0
 800b050:	e01e      	b.n	800b090 <_dtoa_r+0x1c0>
 800b052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b054:	4413      	add	r3, r2
 800b056:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800b05a:	2920      	cmp	r1, #32
 800b05c:	bfc1      	itttt	gt
 800b05e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800b062:	408c      	lslgt	r4, r1
 800b064:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800b068:	fa28 f101 	lsrgt.w	r1, r8, r1
 800b06c:	bfd6      	itet	le
 800b06e:	f1c1 0120 	rsble	r1, r1, #32
 800b072:	4321      	orrgt	r1, r4
 800b074:	fa08 f101 	lslle.w	r1, r8, r1
 800b078:	ee07 1a90 	vmov	s15, r1
 800b07c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800b080:	3b01      	subs	r3, #1
 800b082:	ee17 1a90 	vmov	r1, s15
 800b086:	2001      	movs	r0, #1
 800b088:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b08c:	e7a7      	b.n	800afde <_dtoa_r+0x10e>
 800b08e:	2101      	movs	r1, #1
 800b090:	1ad2      	subs	r2, r2, r3
 800b092:	1e53      	subs	r3, r2, #1
 800b094:	9305      	str	r3, [sp, #20]
 800b096:	bf45      	ittet	mi
 800b098:	f1c2 0301 	rsbmi	r3, r2, #1
 800b09c:	9304      	strmi	r3, [sp, #16]
 800b09e:	2300      	movpl	r3, #0
 800b0a0:	2300      	movmi	r3, #0
 800b0a2:	bf4c      	ite	mi
 800b0a4:	9305      	strmi	r3, [sp, #20]
 800b0a6:	9304      	strpl	r3, [sp, #16]
 800b0a8:	f1bb 0f00 	cmp.w	fp, #0
 800b0ac:	910b      	str	r1, [sp, #44]	; 0x2c
 800b0ae:	db18      	blt.n	800b0e2 <_dtoa_r+0x212>
 800b0b0:	9b05      	ldr	r3, [sp, #20]
 800b0b2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b0b6:	445b      	add	r3, fp
 800b0b8:	9305      	str	r3, [sp, #20]
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	9a06      	ldr	r2, [sp, #24]
 800b0be:	2a09      	cmp	r2, #9
 800b0c0:	d848      	bhi.n	800b154 <_dtoa_r+0x284>
 800b0c2:	2a05      	cmp	r2, #5
 800b0c4:	bfc4      	itt	gt
 800b0c6:	3a04      	subgt	r2, #4
 800b0c8:	9206      	strgt	r2, [sp, #24]
 800b0ca:	9a06      	ldr	r2, [sp, #24]
 800b0cc:	f1a2 0202 	sub.w	r2, r2, #2
 800b0d0:	bfcc      	ite	gt
 800b0d2:	2400      	movgt	r4, #0
 800b0d4:	2401      	movle	r4, #1
 800b0d6:	2a03      	cmp	r2, #3
 800b0d8:	d847      	bhi.n	800b16a <_dtoa_r+0x29a>
 800b0da:	e8df f002 	tbb	[pc, r2]
 800b0de:	2d0b      	.short	0x2d0b
 800b0e0:	392b      	.short	0x392b
 800b0e2:	9b04      	ldr	r3, [sp, #16]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	eba3 030b 	sub.w	r3, r3, fp
 800b0ea:	9304      	str	r3, [sp, #16]
 800b0ec:	920a      	str	r2, [sp, #40]	; 0x28
 800b0ee:	f1cb 0300 	rsb	r3, fp, #0
 800b0f2:	e7e3      	b.n	800b0bc <_dtoa_r+0x1ec>
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	9207      	str	r2, [sp, #28]
 800b0f8:	9a08      	ldr	r2, [sp, #32]
 800b0fa:	2a00      	cmp	r2, #0
 800b0fc:	dc38      	bgt.n	800b170 <_dtoa_r+0x2a0>
 800b0fe:	f04f 0a01 	mov.w	sl, #1
 800b102:	46d1      	mov	r9, sl
 800b104:	4652      	mov	r2, sl
 800b106:	f8cd a020 	str.w	sl, [sp, #32]
 800b10a:	69f7      	ldr	r7, [r6, #28]
 800b10c:	2100      	movs	r1, #0
 800b10e:	2004      	movs	r0, #4
 800b110:	f100 0c14 	add.w	ip, r0, #20
 800b114:	4594      	cmp	ip, r2
 800b116:	d930      	bls.n	800b17a <_dtoa_r+0x2aa>
 800b118:	6079      	str	r1, [r7, #4]
 800b11a:	4630      	mov	r0, r6
 800b11c:	930d      	str	r3, [sp, #52]	; 0x34
 800b11e:	f000 fc8f 	bl	800ba40 <_Balloc>
 800b122:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b124:	9001      	str	r0, [sp, #4]
 800b126:	4602      	mov	r2, r0
 800b128:	2800      	cmp	r0, #0
 800b12a:	d145      	bne.n	800b1b8 <_dtoa_r+0x2e8>
 800b12c:	4b21      	ldr	r3, [pc, #132]	; (800b1b4 <_dtoa_r+0x2e4>)
 800b12e:	f240 11af 	movw	r1, #431	; 0x1af
 800b132:	e6e5      	b.n	800af00 <_dtoa_r+0x30>
 800b134:	2201      	movs	r2, #1
 800b136:	e7de      	b.n	800b0f6 <_dtoa_r+0x226>
 800b138:	2200      	movs	r2, #0
 800b13a:	9207      	str	r2, [sp, #28]
 800b13c:	9a08      	ldr	r2, [sp, #32]
 800b13e:	eb0b 0a02 	add.w	sl, fp, r2
 800b142:	f10a 0901 	add.w	r9, sl, #1
 800b146:	464a      	mov	r2, r9
 800b148:	2a01      	cmp	r2, #1
 800b14a:	bfb8      	it	lt
 800b14c:	2201      	movlt	r2, #1
 800b14e:	e7dc      	b.n	800b10a <_dtoa_r+0x23a>
 800b150:	2201      	movs	r2, #1
 800b152:	e7f2      	b.n	800b13a <_dtoa_r+0x26a>
 800b154:	2401      	movs	r4, #1
 800b156:	2200      	movs	r2, #0
 800b158:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800b15c:	f04f 3aff 	mov.w	sl, #4294967295
 800b160:	2100      	movs	r1, #0
 800b162:	46d1      	mov	r9, sl
 800b164:	2212      	movs	r2, #18
 800b166:	9108      	str	r1, [sp, #32]
 800b168:	e7cf      	b.n	800b10a <_dtoa_r+0x23a>
 800b16a:	2201      	movs	r2, #1
 800b16c:	9207      	str	r2, [sp, #28]
 800b16e:	e7f5      	b.n	800b15c <_dtoa_r+0x28c>
 800b170:	f8dd a020 	ldr.w	sl, [sp, #32]
 800b174:	46d1      	mov	r9, sl
 800b176:	4652      	mov	r2, sl
 800b178:	e7c7      	b.n	800b10a <_dtoa_r+0x23a>
 800b17a:	3101      	adds	r1, #1
 800b17c:	0040      	lsls	r0, r0, #1
 800b17e:	e7c7      	b.n	800b110 <_dtoa_r+0x240>
 800b180:	636f4361 	.word	0x636f4361
 800b184:	3fd287a7 	.word	0x3fd287a7
 800b188:	8b60c8b3 	.word	0x8b60c8b3
 800b18c:	3fc68a28 	.word	0x3fc68a28
 800b190:	509f79fb 	.word	0x509f79fb
 800b194:	3fd34413 	.word	0x3fd34413
 800b198:	0800e422 	.word	0x0800e422
 800b19c:	0800e439 	.word	0x0800e439
 800b1a0:	7ff00000 	.word	0x7ff00000
 800b1a4:	0800e41e 	.word	0x0800e41e
 800b1a8:	0800e415 	.word	0x0800e415
 800b1ac:	0800e3ed 	.word	0x0800e3ed
 800b1b0:	0800e528 	.word	0x0800e528
 800b1b4:	0800e491 	.word	0x0800e491
 800b1b8:	69f2      	ldr	r2, [r6, #28]
 800b1ba:	9901      	ldr	r1, [sp, #4]
 800b1bc:	6011      	str	r1, [r2, #0]
 800b1be:	f1b9 0f0e 	cmp.w	r9, #14
 800b1c2:	d86c      	bhi.n	800b29e <_dtoa_r+0x3ce>
 800b1c4:	2c00      	cmp	r4, #0
 800b1c6:	d06a      	beq.n	800b29e <_dtoa_r+0x3ce>
 800b1c8:	f1bb 0f00 	cmp.w	fp, #0
 800b1cc:	f340 80a0 	ble.w	800b310 <_dtoa_r+0x440>
 800b1d0:	4ac1      	ldr	r2, [pc, #772]	; (800b4d8 <_dtoa_r+0x608>)
 800b1d2:	f00b 010f 	and.w	r1, fp, #15
 800b1d6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800b1da:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b1de:	ed92 7b00 	vldr	d7, [r2]
 800b1e2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800b1e6:	f000 8087 	beq.w	800b2f8 <_dtoa_r+0x428>
 800b1ea:	49bc      	ldr	r1, [pc, #752]	; (800b4dc <_dtoa_r+0x60c>)
 800b1ec:	ed91 6b08 	vldr	d6, [r1, #32]
 800b1f0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800b1f4:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b1f8:	f002 020f 	and.w	r2, r2, #15
 800b1fc:	2103      	movs	r1, #3
 800b1fe:	48b7      	ldr	r0, [pc, #732]	; (800b4dc <_dtoa_r+0x60c>)
 800b200:	2a00      	cmp	r2, #0
 800b202:	d17b      	bne.n	800b2fc <_dtoa_r+0x42c>
 800b204:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b208:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800b20c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b210:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b212:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b216:	2a00      	cmp	r2, #0
 800b218:	f000 80a0 	beq.w	800b35c <_dtoa_r+0x48c>
 800b21c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800b220:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b228:	f140 8098 	bpl.w	800b35c <_dtoa_r+0x48c>
 800b22c:	f1b9 0f00 	cmp.w	r9, #0
 800b230:	f000 8094 	beq.w	800b35c <_dtoa_r+0x48c>
 800b234:	f1ba 0f00 	cmp.w	sl, #0
 800b238:	dd2f      	ble.n	800b29a <_dtoa_r+0x3ca>
 800b23a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800b23e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b242:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b246:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b24a:	3101      	adds	r1, #1
 800b24c:	4654      	mov	r4, sl
 800b24e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800b252:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800b256:	ee07 1a90 	vmov	s15, r1
 800b25a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b25e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800b262:	ee15 7a90 	vmov	r7, s11
 800b266:	ec51 0b15 	vmov	r0, r1, d5
 800b26a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800b26e:	2c00      	cmp	r4, #0
 800b270:	d177      	bne.n	800b362 <_dtoa_r+0x492>
 800b272:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b276:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b27a:	ec41 0b17 	vmov	d7, r0, r1
 800b27e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b286:	f300 826a 	bgt.w	800b75e <_dtoa_r+0x88e>
 800b28a:	eeb1 7b47 	vneg.f64	d7, d7
 800b28e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b296:	f100 8260 	bmi.w	800b75a <_dtoa_r+0x88a>
 800b29a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b29e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	f2c0 811d 	blt.w	800b4e0 <_dtoa_r+0x610>
 800b2a6:	f1bb 0f0e 	cmp.w	fp, #14
 800b2aa:	f300 8119 	bgt.w	800b4e0 <_dtoa_r+0x610>
 800b2ae:	4b8a      	ldr	r3, [pc, #552]	; (800b4d8 <_dtoa_r+0x608>)
 800b2b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b2b4:	ed93 6b00 	vldr	d6, [r3]
 800b2b8:	9b08      	ldr	r3, [sp, #32]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f280 80b7 	bge.w	800b42e <_dtoa_r+0x55e>
 800b2c0:	f1b9 0f00 	cmp.w	r9, #0
 800b2c4:	f300 80b3 	bgt.w	800b42e <_dtoa_r+0x55e>
 800b2c8:	f040 8246 	bne.w	800b758 <_dtoa_r+0x888>
 800b2cc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800b2d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b2d4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b2d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2e0:	464c      	mov	r4, r9
 800b2e2:	464f      	mov	r7, r9
 800b2e4:	f280 821c 	bge.w	800b720 <_dtoa_r+0x850>
 800b2e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b2ec:	2331      	movs	r3, #49	; 0x31
 800b2ee:	f808 3b01 	strb.w	r3, [r8], #1
 800b2f2:	f10b 0b01 	add.w	fp, fp, #1
 800b2f6:	e218      	b.n	800b72a <_dtoa_r+0x85a>
 800b2f8:	2102      	movs	r1, #2
 800b2fa:	e780      	b.n	800b1fe <_dtoa_r+0x32e>
 800b2fc:	07d4      	lsls	r4, r2, #31
 800b2fe:	d504      	bpl.n	800b30a <_dtoa_r+0x43a>
 800b300:	ed90 6b00 	vldr	d6, [r0]
 800b304:	3101      	adds	r1, #1
 800b306:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b30a:	1052      	asrs	r2, r2, #1
 800b30c:	3008      	adds	r0, #8
 800b30e:	e777      	b.n	800b200 <_dtoa_r+0x330>
 800b310:	d022      	beq.n	800b358 <_dtoa_r+0x488>
 800b312:	f1cb 0200 	rsb	r2, fp, #0
 800b316:	4970      	ldr	r1, [pc, #448]	; (800b4d8 <_dtoa_r+0x608>)
 800b318:	f002 000f 	and.w	r0, r2, #15
 800b31c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800b320:	ed91 7b00 	vldr	d7, [r1]
 800b324:	ee28 7b07 	vmul.f64	d7, d8, d7
 800b328:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b32c:	486b      	ldr	r0, [pc, #428]	; (800b4dc <_dtoa_r+0x60c>)
 800b32e:	1112      	asrs	r2, r2, #4
 800b330:	2400      	movs	r4, #0
 800b332:	2102      	movs	r1, #2
 800b334:	b92a      	cbnz	r2, 800b342 <_dtoa_r+0x472>
 800b336:	2c00      	cmp	r4, #0
 800b338:	f43f af6a 	beq.w	800b210 <_dtoa_r+0x340>
 800b33c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b340:	e766      	b.n	800b210 <_dtoa_r+0x340>
 800b342:	07d7      	lsls	r7, r2, #31
 800b344:	d505      	bpl.n	800b352 <_dtoa_r+0x482>
 800b346:	ed90 6b00 	vldr	d6, [r0]
 800b34a:	3101      	adds	r1, #1
 800b34c:	2401      	movs	r4, #1
 800b34e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800b352:	1052      	asrs	r2, r2, #1
 800b354:	3008      	adds	r0, #8
 800b356:	e7ed      	b.n	800b334 <_dtoa_r+0x464>
 800b358:	2102      	movs	r1, #2
 800b35a:	e759      	b.n	800b210 <_dtoa_r+0x340>
 800b35c:	465a      	mov	r2, fp
 800b35e:	464c      	mov	r4, r9
 800b360:	e775      	b.n	800b24e <_dtoa_r+0x37e>
 800b362:	ec41 0b17 	vmov	d7, r0, r1
 800b366:	495c      	ldr	r1, [pc, #368]	; (800b4d8 <_dtoa_r+0x608>)
 800b368:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800b36c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800b370:	9901      	ldr	r1, [sp, #4]
 800b372:	440c      	add	r4, r1
 800b374:	9907      	ldr	r1, [sp, #28]
 800b376:	b351      	cbz	r1, 800b3ce <_dtoa_r+0x4fe>
 800b378:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800b37c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800b380:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b384:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800b388:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b38c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b390:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b394:	ee14 1a90 	vmov	r1, s9
 800b398:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b39c:	3130      	adds	r1, #48	; 0x30
 800b39e:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b3a2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800b3a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3aa:	f808 1b01 	strb.w	r1, [r8], #1
 800b3ae:	d439      	bmi.n	800b424 <_dtoa_r+0x554>
 800b3b0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800b3b4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800b3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3bc:	d472      	bmi.n	800b4a4 <_dtoa_r+0x5d4>
 800b3be:	45a0      	cmp	r8, r4
 800b3c0:	f43f af6b 	beq.w	800b29a <_dtoa_r+0x3ca>
 800b3c4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800b3c8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b3cc:	e7e0      	b.n	800b390 <_dtoa_r+0x4c0>
 800b3ce:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b3d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b3d6:	4620      	mov	r0, r4
 800b3d8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800b3dc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800b3e0:	ee14 1a90 	vmov	r1, s9
 800b3e4:	3130      	adds	r1, #48	; 0x30
 800b3e6:	f808 1b01 	strb.w	r1, [r8], #1
 800b3ea:	45a0      	cmp	r8, r4
 800b3ec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800b3f0:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b3f4:	d118      	bne.n	800b428 <_dtoa_r+0x558>
 800b3f6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b3fa:	ee37 4b05 	vadd.f64	d4, d7, d5
 800b3fe:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800b402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b406:	dc4d      	bgt.n	800b4a4 <_dtoa_r+0x5d4>
 800b408:	ee35 5b47 	vsub.f64	d5, d5, d7
 800b40c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800b410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b414:	f57f af41 	bpl.w	800b29a <_dtoa_r+0x3ca>
 800b418:	4680      	mov	r8, r0
 800b41a:	3801      	subs	r0, #1
 800b41c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800b420:	2b30      	cmp	r3, #48	; 0x30
 800b422:	d0f9      	beq.n	800b418 <_dtoa_r+0x548>
 800b424:	4693      	mov	fp, r2
 800b426:	e02a      	b.n	800b47e <_dtoa_r+0x5ae>
 800b428:	ee26 6b03 	vmul.f64	d6, d6, d3
 800b42c:	e7d6      	b.n	800b3dc <_dtoa_r+0x50c>
 800b42e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b432:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800b436:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b43a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800b43e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800b442:	ee15 3a10 	vmov	r3, s10
 800b446:	3330      	adds	r3, #48	; 0x30
 800b448:	f808 3b01 	strb.w	r3, [r8], #1
 800b44c:	9b01      	ldr	r3, [sp, #4]
 800b44e:	eba8 0303 	sub.w	r3, r8, r3
 800b452:	4599      	cmp	r9, r3
 800b454:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800b458:	eea3 7b46 	vfms.f64	d7, d3, d6
 800b45c:	d133      	bne.n	800b4c6 <_dtoa_r+0x5f6>
 800b45e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800b462:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800b466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b46a:	dc1a      	bgt.n	800b4a2 <_dtoa_r+0x5d2>
 800b46c:	eeb4 7b46 	vcmp.f64	d7, d6
 800b470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b474:	d103      	bne.n	800b47e <_dtoa_r+0x5ae>
 800b476:	ee15 3a10 	vmov	r3, s10
 800b47a:	07d9      	lsls	r1, r3, #31
 800b47c:	d411      	bmi.n	800b4a2 <_dtoa_r+0x5d2>
 800b47e:	4629      	mov	r1, r5
 800b480:	4630      	mov	r0, r6
 800b482:	f000 fb1d 	bl	800bac0 <_Bfree>
 800b486:	2300      	movs	r3, #0
 800b488:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b48a:	f888 3000 	strb.w	r3, [r8]
 800b48e:	f10b 0301 	add.w	r3, fp, #1
 800b492:	6013      	str	r3, [r2, #0]
 800b494:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b496:	2b00      	cmp	r3, #0
 800b498:	f43f ad69 	beq.w	800af6e <_dtoa_r+0x9e>
 800b49c:	f8c3 8000 	str.w	r8, [r3]
 800b4a0:	e565      	b.n	800af6e <_dtoa_r+0x9e>
 800b4a2:	465a      	mov	r2, fp
 800b4a4:	4643      	mov	r3, r8
 800b4a6:	4698      	mov	r8, r3
 800b4a8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800b4ac:	2939      	cmp	r1, #57	; 0x39
 800b4ae:	d106      	bne.n	800b4be <_dtoa_r+0x5ee>
 800b4b0:	9901      	ldr	r1, [sp, #4]
 800b4b2:	4299      	cmp	r1, r3
 800b4b4:	d1f7      	bne.n	800b4a6 <_dtoa_r+0x5d6>
 800b4b6:	9801      	ldr	r0, [sp, #4]
 800b4b8:	2130      	movs	r1, #48	; 0x30
 800b4ba:	3201      	adds	r2, #1
 800b4bc:	7001      	strb	r1, [r0, #0]
 800b4be:	7819      	ldrb	r1, [r3, #0]
 800b4c0:	3101      	adds	r1, #1
 800b4c2:	7019      	strb	r1, [r3, #0]
 800b4c4:	e7ae      	b.n	800b424 <_dtoa_r+0x554>
 800b4c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b4ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4d2:	d1b2      	bne.n	800b43a <_dtoa_r+0x56a>
 800b4d4:	e7d3      	b.n	800b47e <_dtoa_r+0x5ae>
 800b4d6:	bf00      	nop
 800b4d8:	0800e528 	.word	0x0800e528
 800b4dc:	0800e500 	.word	0x0800e500
 800b4e0:	9907      	ldr	r1, [sp, #28]
 800b4e2:	2900      	cmp	r1, #0
 800b4e4:	f000 80d0 	beq.w	800b688 <_dtoa_r+0x7b8>
 800b4e8:	9906      	ldr	r1, [sp, #24]
 800b4ea:	2901      	cmp	r1, #1
 800b4ec:	f300 80b4 	bgt.w	800b658 <_dtoa_r+0x788>
 800b4f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b4f2:	2900      	cmp	r1, #0
 800b4f4:	f000 80ac 	beq.w	800b650 <_dtoa_r+0x780>
 800b4f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b4fc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b500:	461c      	mov	r4, r3
 800b502:	9309      	str	r3, [sp, #36]	; 0x24
 800b504:	9b04      	ldr	r3, [sp, #16]
 800b506:	4413      	add	r3, r2
 800b508:	9304      	str	r3, [sp, #16]
 800b50a:	9b05      	ldr	r3, [sp, #20]
 800b50c:	2101      	movs	r1, #1
 800b50e:	4413      	add	r3, r2
 800b510:	4630      	mov	r0, r6
 800b512:	9305      	str	r3, [sp, #20]
 800b514:	f000 fbd4 	bl	800bcc0 <__i2b>
 800b518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51a:	4607      	mov	r7, r0
 800b51c:	f1b8 0f00 	cmp.w	r8, #0
 800b520:	d00d      	beq.n	800b53e <_dtoa_r+0x66e>
 800b522:	9a05      	ldr	r2, [sp, #20]
 800b524:	2a00      	cmp	r2, #0
 800b526:	dd0a      	ble.n	800b53e <_dtoa_r+0x66e>
 800b528:	4542      	cmp	r2, r8
 800b52a:	9904      	ldr	r1, [sp, #16]
 800b52c:	bfa8      	it	ge
 800b52e:	4642      	movge	r2, r8
 800b530:	1a89      	subs	r1, r1, r2
 800b532:	9104      	str	r1, [sp, #16]
 800b534:	9905      	ldr	r1, [sp, #20]
 800b536:	eba8 0802 	sub.w	r8, r8, r2
 800b53a:	1a8a      	subs	r2, r1, r2
 800b53c:	9205      	str	r2, [sp, #20]
 800b53e:	b303      	cbz	r3, 800b582 <_dtoa_r+0x6b2>
 800b540:	9a07      	ldr	r2, [sp, #28]
 800b542:	2a00      	cmp	r2, #0
 800b544:	f000 80a5 	beq.w	800b692 <_dtoa_r+0x7c2>
 800b548:	2c00      	cmp	r4, #0
 800b54a:	dd13      	ble.n	800b574 <_dtoa_r+0x6a4>
 800b54c:	4639      	mov	r1, r7
 800b54e:	4622      	mov	r2, r4
 800b550:	4630      	mov	r0, r6
 800b552:	930d      	str	r3, [sp, #52]	; 0x34
 800b554:	f000 fc74 	bl	800be40 <__pow5mult>
 800b558:	462a      	mov	r2, r5
 800b55a:	4601      	mov	r1, r0
 800b55c:	4607      	mov	r7, r0
 800b55e:	4630      	mov	r0, r6
 800b560:	f000 fbc4 	bl	800bcec <__multiply>
 800b564:	4629      	mov	r1, r5
 800b566:	9009      	str	r0, [sp, #36]	; 0x24
 800b568:	4630      	mov	r0, r6
 800b56a:	f000 faa9 	bl	800bac0 <_Bfree>
 800b56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b572:	4615      	mov	r5, r2
 800b574:	1b1a      	subs	r2, r3, r4
 800b576:	d004      	beq.n	800b582 <_dtoa_r+0x6b2>
 800b578:	4629      	mov	r1, r5
 800b57a:	4630      	mov	r0, r6
 800b57c:	f000 fc60 	bl	800be40 <__pow5mult>
 800b580:	4605      	mov	r5, r0
 800b582:	2101      	movs	r1, #1
 800b584:	4630      	mov	r0, r6
 800b586:	f000 fb9b 	bl	800bcc0 <__i2b>
 800b58a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	4604      	mov	r4, r0
 800b590:	f340 8081 	ble.w	800b696 <_dtoa_r+0x7c6>
 800b594:	461a      	mov	r2, r3
 800b596:	4601      	mov	r1, r0
 800b598:	4630      	mov	r0, r6
 800b59a:	f000 fc51 	bl	800be40 <__pow5mult>
 800b59e:	9b06      	ldr	r3, [sp, #24]
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	dd7a      	ble.n	800b69c <_dtoa_r+0x7cc>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5aa:	6922      	ldr	r2, [r4, #16]
 800b5ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800b5b0:	6910      	ldr	r0, [r2, #16]
 800b5b2:	f000 fb37 	bl	800bc24 <__hi0bits>
 800b5b6:	f1c0 0020 	rsb	r0, r0, #32
 800b5ba:	9b05      	ldr	r3, [sp, #20]
 800b5bc:	4418      	add	r0, r3
 800b5be:	f010 001f 	ands.w	r0, r0, #31
 800b5c2:	f000 8093 	beq.w	800b6ec <_dtoa_r+0x81c>
 800b5c6:	f1c0 0220 	rsb	r2, r0, #32
 800b5ca:	2a04      	cmp	r2, #4
 800b5cc:	f340 8085 	ble.w	800b6da <_dtoa_r+0x80a>
 800b5d0:	9b04      	ldr	r3, [sp, #16]
 800b5d2:	f1c0 001c 	rsb	r0, r0, #28
 800b5d6:	4403      	add	r3, r0
 800b5d8:	9304      	str	r3, [sp, #16]
 800b5da:	9b05      	ldr	r3, [sp, #20]
 800b5dc:	4480      	add	r8, r0
 800b5de:	4403      	add	r3, r0
 800b5e0:	9305      	str	r3, [sp, #20]
 800b5e2:	9b04      	ldr	r3, [sp, #16]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	dd05      	ble.n	800b5f4 <_dtoa_r+0x724>
 800b5e8:	4629      	mov	r1, r5
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	4630      	mov	r0, r6
 800b5ee:	f000 fc81 	bl	800bef4 <__lshift>
 800b5f2:	4605      	mov	r5, r0
 800b5f4:	9b05      	ldr	r3, [sp, #20]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	dd05      	ble.n	800b606 <_dtoa_r+0x736>
 800b5fa:	4621      	mov	r1, r4
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	4630      	mov	r0, r6
 800b600:	f000 fc78 	bl	800bef4 <__lshift>
 800b604:	4604      	mov	r4, r0
 800b606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d071      	beq.n	800b6f0 <_dtoa_r+0x820>
 800b60c:	4621      	mov	r1, r4
 800b60e:	4628      	mov	r0, r5
 800b610:	f000 fcdc 	bl	800bfcc <__mcmp>
 800b614:	2800      	cmp	r0, #0
 800b616:	da6b      	bge.n	800b6f0 <_dtoa_r+0x820>
 800b618:	2300      	movs	r3, #0
 800b61a:	4629      	mov	r1, r5
 800b61c:	220a      	movs	r2, #10
 800b61e:	4630      	mov	r0, r6
 800b620:	f000 fa70 	bl	800bb04 <__multadd>
 800b624:	9b07      	ldr	r3, [sp, #28]
 800b626:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b62a:	4605      	mov	r5, r0
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	f000 8197 	beq.w	800b960 <_dtoa_r+0xa90>
 800b632:	4639      	mov	r1, r7
 800b634:	2300      	movs	r3, #0
 800b636:	220a      	movs	r2, #10
 800b638:	4630      	mov	r0, r6
 800b63a:	f000 fa63 	bl	800bb04 <__multadd>
 800b63e:	f1ba 0f00 	cmp.w	sl, #0
 800b642:	4607      	mov	r7, r0
 800b644:	f300 8093 	bgt.w	800b76e <_dtoa_r+0x89e>
 800b648:	9b06      	ldr	r3, [sp, #24]
 800b64a:	2b02      	cmp	r3, #2
 800b64c:	dc57      	bgt.n	800b6fe <_dtoa_r+0x82e>
 800b64e:	e08e      	b.n	800b76e <_dtoa_r+0x89e>
 800b650:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b652:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b656:	e751      	b.n	800b4fc <_dtoa_r+0x62c>
 800b658:	f109 34ff 	add.w	r4, r9, #4294967295
 800b65c:	42a3      	cmp	r3, r4
 800b65e:	bfbf      	itttt	lt
 800b660:	1ae2      	sublt	r2, r4, r3
 800b662:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b664:	189b      	addlt	r3, r3, r2
 800b666:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b668:	bfae      	itee	ge
 800b66a:	1b1c      	subge	r4, r3, r4
 800b66c:	4623      	movlt	r3, r4
 800b66e:	2400      	movlt	r4, #0
 800b670:	f1b9 0f00 	cmp.w	r9, #0
 800b674:	bfb5      	itete	lt
 800b676:	9a04      	ldrlt	r2, [sp, #16]
 800b678:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800b67c:	eba2 0809 	sublt.w	r8, r2, r9
 800b680:	464a      	movge	r2, r9
 800b682:	bfb8      	it	lt
 800b684:	2200      	movlt	r2, #0
 800b686:	e73c      	b.n	800b502 <_dtoa_r+0x632>
 800b688:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b68c:	9f07      	ldr	r7, [sp, #28]
 800b68e:	461c      	mov	r4, r3
 800b690:	e744      	b.n	800b51c <_dtoa_r+0x64c>
 800b692:	461a      	mov	r2, r3
 800b694:	e770      	b.n	800b578 <_dtoa_r+0x6a8>
 800b696:	9b06      	ldr	r3, [sp, #24]
 800b698:	2b01      	cmp	r3, #1
 800b69a:	dc18      	bgt.n	800b6ce <_dtoa_r+0x7fe>
 800b69c:	9b02      	ldr	r3, [sp, #8]
 800b69e:	b9b3      	cbnz	r3, 800b6ce <_dtoa_r+0x7fe>
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800b6a6:	b9a2      	cbnz	r2, 800b6d2 <_dtoa_r+0x802>
 800b6a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b6ac:	0d12      	lsrs	r2, r2, #20
 800b6ae:	0512      	lsls	r2, r2, #20
 800b6b0:	b18a      	cbz	r2, 800b6d6 <_dtoa_r+0x806>
 800b6b2:	9b04      	ldr	r3, [sp, #16]
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	9304      	str	r3, [sp, #16]
 800b6b8:	9b05      	ldr	r3, [sp, #20]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	9305      	str	r3, [sp, #20]
 800b6be:	2301      	movs	r3, #1
 800b6c0:	9309      	str	r3, [sp, #36]	; 0x24
 800b6c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	f47f af70 	bne.w	800b5aa <_dtoa_r+0x6da>
 800b6ca:	2001      	movs	r0, #1
 800b6cc:	e775      	b.n	800b5ba <_dtoa_r+0x6ea>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	e7f6      	b.n	800b6c0 <_dtoa_r+0x7f0>
 800b6d2:	9b02      	ldr	r3, [sp, #8]
 800b6d4:	e7f4      	b.n	800b6c0 <_dtoa_r+0x7f0>
 800b6d6:	9209      	str	r2, [sp, #36]	; 0x24
 800b6d8:	e7f3      	b.n	800b6c2 <_dtoa_r+0x7f2>
 800b6da:	d082      	beq.n	800b5e2 <_dtoa_r+0x712>
 800b6dc:	9b04      	ldr	r3, [sp, #16]
 800b6de:	321c      	adds	r2, #28
 800b6e0:	4413      	add	r3, r2
 800b6e2:	9304      	str	r3, [sp, #16]
 800b6e4:	9b05      	ldr	r3, [sp, #20]
 800b6e6:	4490      	add	r8, r2
 800b6e8:	4413      	add	r3, r2
 800b6ea:	e779      	b.n	800b5e0 <_dtoa_r+0x710>
 800b6ec:	4602      	mov	r2, r0
 800b6ee:	e7f5      	b.n	800b6dc <_dtoa_r+0x80c>
 800b6f0:	f1b9 0f00 	cmp.w	r9, #0
 800b6f4:	dc36      	bgt.n	800b764 <_dtoa_r+0x894>
 800b6f6:	9b06      	ldr	r3, [sp, #24]
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	dd33      	ble.n	800b764 <_dtoa_r+0x894>
 800b6fc:	46ca      	mov	sl, r9
 800b6fe:	f1ba 0f00 	cmp.w	sl, #0
 800b702:	d10d      	bne.n	800b720 <_dtoa_r+0x850>
 800b704:	4621      	mov	r1, r4
 800b706:	4653      	mov	r3, sl
 800b708:	2205      	movs	r2, #5
 800b70a:	4630      	mov	r0, r6
 800b70c:	f000 f9fa 	bl	800bb04 <__multadd>
 800b710:	4601      	mov	r1, r0
 800b712:	4604      	mov	r4, r0
 800b714:	4628      	mov	r0, r5
 800b716:	f000 fc59 	bl	800bfcc <__mcmp>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	f73f ade4 	bgt.w	800b2e8 <_dtoa_r+0x418>
 800b720:	9b08      	ldr	r3, [sp, #32]
 800b722:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b726:	ea6f 0b03 	mvn.w	fp, r3
 800b72a:	f04f 0900 	mov.w	r9, #0
 800b72e:	4621      	mov	r1, r4
 800b730:	4630      	mov	r0, r6
 800b732:	f000 f9c5 	bl	800bac0 <_Bfree>
 800b736:	2f00      	cmp	r7, #0
 800b738:	f43f aea1 	beq.w	800b47e <_dtoa_r+0x5ae>
 800b73c:	f1b9 0f00 	cmp.w	r9, #0
 800b740:	d005      	beq.n	800b74e <_dtoa_r+0x87e>
 800b742:	45b9      	cmp	r9, r7
 800b744:	d003      	beq.n	800b74e <_dtoa_r+0x87e>
 800b746:	4649      	mov	r1, r9
 800b748:	4630      	mov	r0, r6
 800b74a:	f000 f9b9 	bl	800bac0 <_Bfree>
 800b74e:	4639      	mov	r1, r7
 800b750:	4630      	mov	r0, r6
 800b752:	f000 f9b5 	bl	800bac0 <_Bfree>
 800b756:	e692      	b.n	800b47e <_dtoa_r+0x5ae>
 800b758:	2400      	movs	r4, #0
 800b75a:	4627      	mov	r7, r4
 800b75c:	e7e0      	b.n	800b720 <_dtoa_r+0x850>
 800b75e:	4693      	mov	fp, r2
 800b760:	4627      	mov	r7, r4
 800b762:	e5c1      	b.n	800b2e8 <_dtoa_r+0x418>
 800b764:	9b07      	ldr	r3, [sp, #28]
 800b766:	46ca      	mov	sl, r9
 800b768:	2b00      	cmp	r3, #0
 800b76a:	f000 8100 	beq.w	800b96e <_dtoa_r+0xa9e>
 800b76e:	f1b8 0f00 	cmp.w	r8, #0
 800b772:	dd05      	ble.n	800b780 <_dtoa_r+0x8b0>
 800b774:	4639      	mov	r1, r7
 800b776:	4642      	mov	r2, r8
 800b778:	4630      	mov	r0, r6
 800b77a:	f000 fbbb 	bl	800bef4 <__lshift>
 800b77e:	4607      	mov	r7, r0
 800b780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b782:	2b00      	cmp	r3, #0
 800b784:	d05d      	beq.n	800b842 <_dtoa_r+0x972>
 800b786:	6879      	ldr	r1, [r7, #4]
 800b788:	4630      	mov	r0, r6
 800b78a:	f000 f959 	bl	800ba40 <_Balloc>
 800b78e:	4680      	mov	r8, r0
 800b790:	b928      	cbnz	r0, 800b79e <_dtoa_r+0x8ce>
 800b792:	4b82      	ldr	r3, [pc, #520]	; (800b99c <_dtoa_r+0xacc>)
 800b794:	4602      	mov	r2, r0
 800b796:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b79a:	f7ff bbb1 	b.w	800af00 <_dtoa_r+0x30>
 800b79e:	693a      	ldr	r2, [r7, #16]
 800b7a0:	3202      	adds	r2, #2
 800b7a2:	0092      	lsls	r2, r2, #2
 800b7a4:	f107 010c 	add.w	r1, r7, #12
 800b7a8:	300c      	adds	r0, #12
 800b7aa:	f7ff faf4 	bl	800ad96 <memcpy>
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	4641      	mov	r1, r8
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f000 fb9e 	bl	800bef4 <__lshift>
 800b7b8:	9b01      	ldr	r3, [sp, #4]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	9304      	str	r3, [sp, #16]
 800b7be:	9b01      	ldr	r3, [sp, #4]
 800b7c0:	4453      	add	r3, sl
 800b7c2:	9308      	str	r3, [sp, #32]
 800b7c4:	9b02      	ldr	r3, [sp, #8]
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	46b9      	mov	r9, r7
 800b7cc:	9307      	str	r3, [sp, #28]
 800b7ce:	4607      	mov	r7, r0
 800b7d0:	9b04      	ldr	r3, [sp, #16]
 800b7d2:	4621      	mov	r1, r4
 800b7d4:	3b01      	subs	r3, #1
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	9302      	str	r3, [sp, #8]
 800b7da:	f7ff faf1 	bl	800adc0 <quorem>
 800b7de:	4603      	mov	r3, r0
 800b7e0:	3330      	adds	r3, #48	; 0x30
 800b7e2:	9005      	str	r0, [sp, #20]
 800b7e4:	4649      	mov	r1, r9
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ea:	f000 fbef 	bl	800bfcc <__mcmp>
 800b7ee:	463a      	mov	r2, r7
 800b7f0:	4682      	mov	sl, r0
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	4630      	mov	r0, r6
 800b7f6:	f000 fc05 	bl	800c004 <__mdiff>
 800b7fa:	68c2      	ldr	r2, [r0, #12]
 800b7fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7fe:	4680      	mov	r8, r0
 800b800:	bb0a      	cbnz	r2, 800b846 <_dtoa_r+0x976>
 800b802:	4601      	mov	r1, r0
 800b804:	4628      	mov	r0, r5
 800b806:	f000 fbe1 	bl	800bfcc <__mcmp>
 800b80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b80c:	4602      	mov	r2, r0
 800b80e:	4641      	mov	r1, r8
 800b810:	4630      	mov	r0, r6
 800b812:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b816:	f000 f953 	bl	800bac0 <_Bfree>
 800b81a:	9b06      	ldr	r3, [sp, #24]
 800b81c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b81e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b822:	ea43 0102 	orr.w	r1, r3, r2
 800b826:	9b07      	ldr	r3, [sp, #28]
 800b828:	4319      	orrs	r1, r3
 800b82a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b82c:	d10d      	bne.n	800b84a <_dtoa_r+0x97a>
 800b82e:	2b39      	cmp	r3, #57	; 0x39
 800b830:	d029      	beq.n	800b886 <_dtoa_r+0x9b6>
 800b832:	f1ba 0f00 	cmp.w	sl, #0
 800b836:	dd01      	ble.n	800b83c <_dtoa_r+0x96c>
 800b838:	9b05      	ldr	r3, [sp, #20]
 800b83a:	3331      	adds	r3, #49	; 0x31
 800b83c:	9a02      	ldr	r2, [sp, #8]
 800b83e:	7013      	strb	r3, [r2, #0]
 800b840:	e775      	b.n	800b72e <_dtoa_r+0x85e>
 800b842:	4638      	mov	r0, r7
 800b844:	e7b8      	b.n	800b7b8 <_dtoa_r+0x8e8>
 800b846:	2201      	movs	r2, #1
 800b848:	e7e1      	b.n	800b80e <_dtoa_r+0x93e>
 800b84a:	f1ba 0f00 	cmp.w	sl, #0
 800b84e:	db06      	blt.n	800b85e <_dtoa_r+0x98e>
 800b850:	9906      	ldr	r1, [sp, #24]
 800b852:	ea41 0a0a 	orr.w	sl, r1, sl
 800b856:	9907      	ldr	r1, [sp, #28]
 800b858:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b85c:	d120      	bne.n	800b8a0 <_dtoa_r+0x9d0>
 800b85e:	2a00      	cmp	r2, #0
 800b860:	ddec      	ble.n	800b83c <_dtoa_r+0x96c>
 800b862:	4629      	mov	r1, r5
 800b864:	2201      	movs	r2, #1
 800b866:	4630      	mov	r0, r6
 800b868:	9304      	str	r3, [sp, #16]
 800b86a:	f000 fb43 	bl	800bef4 <__lshift>
 800b86e:	4621      	mov	r1, r4
 800b870:	4605      	mov	r5, r0
 800b872:	f000 fbab 	bl	800bfcc <__mcmp>
 800b876:	2800      	cmp	r0, #0
 800b878:	9b04      	ldr	r3, [sp, #16]
 800b87a:	dc02      	bgt.n	800b882 <_dtoa_r+0x9b2>
 800b87c:	d1de      	bne.n	800b83c <_dtoa_r+0x96c>
 800b87e:	07da      	lsls	r2, r3, #31
 800b880:	d5dc      	bpl.n	800b83c <_dtoa_r+0x96c>
 800b882:	2b39      	cmp	r3, #57	; 0x39
 800b884:	d1d8      	bne.n	800b838 <_dtoa_r+0x968>
 800b886:	9a02      	ldr	r2, [sp, #8]
 800b888:	2339      	movs	r3, #57	; 0x39
 800b88a:	7013      	strb	r3, [r2, #0]
 800b88c:	4643      	mov	r3, r8
 800b88e:	4698      	mov	r8, r3
 800b890:	3b01      	subs	r3, #1
 800b892:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b896:	2a39      	cmp	r2, #57	; 0x39
 800b898:	d051      	beq.n	800b93e <_dtoa_r+0xa6e>
 800b89a:	3201      	adds	r2, #1
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	e746      	b.n	800b72e <_dtoa_r+0x85e>
 800b8a0:	2a00      	cmp	r2, #0
 800b8a2:	dd03      	ble.n	800b8ac <_dtoa_r+0x9dc>
 800b8a4:	2b39      	cmp	r3, #57	; 0x39
 800b8a6:	d0ee      	beq.n	800b886 <_dtoa_r+0x9b6>
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	e7c7      	b.n	800b83c <_dtoa_r+0x96c>
 800b8ac:	9a04      	ldr	r2, [sp, #16]
 800b8ae:	9908      	ldr	r1, [sp, #32]
 800b8b0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b8b4:	428a      	cmp	r2, r1
 800b8b6:	d02b      	beq.n	800b910 <_dtoa_r+0xa40>
 800b8b8:	4629      	mov	r1, r5
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	220a      	movs	r2, #10
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f000 f920 	bl	800bb04 <__multadd>
 800b8c4:	45b9      	cmp	r9, r7
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	f04f 0300 	mov.w	r3, #0
 800b8cc:	f04f 020a 	mov.w	r2, #10
 800b8d0:	4649      	mov	r1, r9
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	d107      	bne.n	800b8e6 <_dtoa_r+0xa16>
 800b8d6:	f000 f915 	bl	800bb04 <__multadd>
 800b8da:	4681      	mov	r9, r0
 800b8dc:	4607      	mov	r7, r0
 800b8de:	9b04      	ldr	r3, [sp, #16]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	9304      	str	r3, [sp, #16]
 800b8e4:	e774      	b.n	800b7d0 <_dtoa_r+0x900>
 800b8e6:	f000 f90d 	bl	800bb04 <__multadd>
 800b8ea:	4639      	mov	r1, r7
 800b8ec:	4681      	mov	r9, r0
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	220a      	movs	r2, #10
 800b8f2:	4630      	mov	r0, r6
 800b8f4:	f000 f906 	bl	800bb04 <__multadd>
 800b8f8:	4607      	mov	r7, r0
 800b8fa:	e7f0      	b.n	800b8de <_dtoa_r+0xa0e>
 800b8fc:	f1ba 0f00 	cmp.w	sl, #0
 800b900:	9a01      	ldr	r2, [sp, #4]
 800b902:	bfcc      	ite	gt
 800b904:	46d0      	movgt	r8, sl
 800b906:	f04f 0801 	movle.w	r8, #1
 800b90a:	4490      	add	r8, r2
 800b90c:	f04f 0900 	mov.w	r9, #0
 800b910:	4629      	mov	r1, r5
 800b912:	2201      	movs	r2, #1
 800b914:	4630      	mov	r0, r6
 800b916:	9302      	str	r3, [sp, #8]
 800b918:	f000 faec 	bl	800bef4 <__lshift>
 800b91c:	4621      	mov	r1, r4
 800b91e:	4605      	mov	r5, r0
 800b920:	f000 fb54 	bl	800bfcc <__mcmp>
 800b924:	2800      	cmp	r0, #0
 800b926:	dcb1      	bgt.n	800b88c <_dtoa_r+0x9bc>
 800b928:	d102      	bne.n	800b930 <_dtoa_r+0xa60>
 800b92a:	9b02      	ldr	r3, [sp, #8]
 800b92c:	07db      	lsls	r3, r3, #31
 800b92e:	d4ad      	bmi.n	800b88c <_dtoa_r+0x9bc>
 800b930:	4643      	mov	r3, r8
 800b932:	4698      	mov	r8, r3
 800b934:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b938:	2a30      	cmp	r2, #48	; 0x30
 800b93a:	d0fa      	beq.n	800b932 <_dtoa_r+0xa62>
 800b93c:	e6f7      	b.n	800b72e <_dtoa_r+0x85e>
 800b93e:	9a01      	ldr	r2, [sp, #4]
 800b940:	429a      	cmp	r2, r3
 800b942:	d1a4      	bne.n	800b88e <_dtoa_r+0x9be>
 800b944:	f10b 0b01 	add.w	fp, fp, #1
 800b948:	2331      	movs	r3, #49	; 0x31
 800b94a:	e778      	b.n	800b83e <_dtoa_r+0x96e>
 800b94c:	4b14      	ldr	r3, [pc, #80]	; (800b9a0 <_dtoa_r+0xad0>)
 800b94e:	f7ff bb2a 	b.w	800afa6 <_dtoa_r+0xd6>
 800b952:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b954:	2b00      	cmp	r3, #0
 800b956:	f47f ab05 	bne.w	800af64 <_dtoa_r+0x94>
 800b95a:	4b12      	ldr	r3, [pc, #72]	; (800b9a4 <_dtoa_r+0xad4>)
 800b95c:	f7ff bb23 	b.w	800afa6 <_dtoa_r+0xd6>
 800b960:	f1ba 0f00 	cmp.w	sl, #0
 800b964:	dc03      	bgt.n	800b96e <_dtoa_r+0xa9e>
 800b966:	9b06      	ldr	r3, [sp, #24]
 800b968:	2b02      	cmp	r3, #2
 800b96a:	f73f aec8 	bgt.w	800b6fe <_dtoa_r+0x82e>
 800b96e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b972:	4621      	mov	r1, r4
 800b974:	4628      	mov	r0, r5
 800b976:	f7ff fa23 	bl	800adc0 <quorem>
 800b97a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b97e:	f808 3b01 	strb.w	r3, [r8], #1
 800b982:	9a01      	ldr	r2, [sp, #4]
 800b984:	eba8 0202 	sub.w	r2, r8, r2
 800b988:	4592      	cmp	sl, r2
 800b98a:	ddb7      	ble.n	800b8fc <_dtoa_r+0xa2c>
 800b98c:	4629      	mov	r1, r5
 800b98e:	2300      	movs	r3, #0
 800b990:	220a      	movs	r2, #10
 800b992:	4630      	mov	r0, r6
 800b994:	f000 f8b6 	bl	800bb04 <__multadd>
 800b998:	4605      	mov	r5, r0
 800b99a:	e7ea      	b.n	800b972 <_dtoa_r+0xaa2>
 800b99c:	0800e491 	.word	0x0800e491
 800b9a0:	0800e3ec 	.word	0x0800e3ec
 800b9a4:	0800e415 	.word	0x0800e415

0800b9a8 <_free_r>:
 800b9a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b9aa:	2900      	cmp	r1, #0
 800b9ac:	d044      	beq.n	800ba38 <_free_r+0x90>
 800b9ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9b2:	9001      	str	r0, [sp, #4]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f1a1 0404 	sub.w	r4, r1, #4
 800b9ba:	bfb8      	it	lt
 800b9bc:	18e4      	addlt	r4, r4, r3
 800b9be:	f7fe f9eb 	bl	8009d98 <__malloc_lock>
 800b9c2:	4a1e      	ldr	r2, [pc, #120]	; (800ba3c <_free_r+0x94>)
 800b9c4:	9801      	ldr	r0, [sp, #4]
 800b9c6:	6813      	ldr	r3, [r2, #0]
 800b9c8:	b933      	cbnz	r3, 800b9d8 <_free_r+0x30>
 800b9ca:	6063      	str	r3, [r4, #4]
 800b9cc:	6014      	str	r4, [r2, #0]
 800b9ce:	b003      	add	sp, #12
 800b9d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9d4:	f7fe b9e6 	b.w	8009da4 <__malloc_unlock>
 800b9d8:	42a3      	cmp	r3, r4
 800b9da:	d908      	bls.n	800b9ee <_free_r+0x46>
 800b9dc:	6825      	ldr	r5, [r4, #0]
 800b9de:	1961      	adds	r1, r4, r5
 800b9e0:	428b      	cmp	r3, r1
 800b9e2:	bf01      	itttt	eq
 800b9e4:	6819      	ldreq	r1, [r3, #0]
 800b9e6:	685b      	ldreq	r3, [r3, #4]
 800b9e8:	1949      	addeq	r1, r1, r5
 800b9ea:	6021      	streq	r1, [r4, #0]
 800b9ec:	e7ed      	b.n	800b9ca <_free_r+0x22>
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	b10b      	cbz	r3, 800b9f8 <_free_r+0x50>
 800b9f4:	42a3      	cmp	r3, r4
 800b9f6:	d9fa      	bls.n	800b9ee <_free_r+0x46>
 800b9f8:	6811      	ldr	r1, [r2, #0]
 800b9fa:	1855      	adds	r5, r2, r1
 800b9fc:	42a5      	cmp	r5, r4
 800b9fe:	d10b      	bne.n	800ba18 <_free_r+0x70>
 800ba00:	6824      	ldr	r4, [r4, #0]
 800ba02:	4421      	add	r1, r4
 800ba04:	1854      	adds	r4, r2, r1
 800ba06:	42a3      	cmp	r3, r4
 800ba08:	6011      	str	r1, [r2, #0]
 800ba0a:	d1e0      	bne.n	800b9ce <_free_r+0x26>
 800ba0c:	681c      	ldr	r4, [r3, #0]
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	6053      	str	r3, [r2, #4]
 800ba12:	440c      	add	r4, r1
 800ba14:	6014      	str	r4, [r2, #0]
 800ba16:	e7da      	b.n	800b9ce <_free_r+0x26>
 800ba18:	d902      	bls.n	800ba20 <_free_r+0x78>
 800ba1a:	230c      	movs	r3, #12
 800ba1c:	6003      	str	r3, [r0, #0]
 800ba1e:	e7d6      	b.n	800b9ce <_free_r+0x26>
 800ba20:	6825      	ldr	r5, [r4, #0]
 800ba22:	1961      	adds	r1, r4, r5
 800ba24:	428b      	cmp	r3, r1
 800ba26:	bf04      	itt	eq
 800ba28:	6819      	ldreq	r1, [r3, #0]
 800ba2a:	685b      	ldreq	r3, [r3, #4]
 800ba2c:	6063      	str	r3, [r4, #4]
 800ba2e:	bf04      	itt	eq
 800ba30:	1949      	addeq	r1, r1, r5
 800ba32:	6021      	streq	r1, [r4, #0]
 800ba34:	6054      	str	r4, [r2, #4]
 800ba36:	e7ca      	b.n	800b9ce <_free_r+0x26>
 800ba38:	b003      	add	sp, #12
 800ba3a:	bd30      	pop	{r4, r5, pc}
 800ba3c:	2000060c 	.word	0x2000060c

0800ba40 <_Balloc>:
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	69c6      	ldr	r6, [r0, #28]
 800ba44:	4604      	mov	r4, r0
 800ba46:	460d      	mov	r5, r1
 800ba48:	b976      	cbnz	r6, 800ba68 <_Balloc+0x28>
 800ba4a:	2010      	movs	r0, #16
 800ba4c:	f7fe f8fc 	bl	8009c48 <malloc>
 800ba50:	4602      	mov	r2, r0
 800ba52:	61e0      	str	r0, [r4, #28]
 800ba54:	b920      	cbnz	r0, 800ba60 <_Balloc+0x20>
 800ba56:	4b18      	ldr	r3, [pc, #96]	; (800bab8 <_Balloc+0x78>)
 800ba58:	4818      	ldr	r0, [pc, #96]	; (800babc <_Balloc+0x7c>)
 800ba5a:	216b      	movs	r1, #107	; 0x6b
 800ba5c:	f001 fd2c 	bl	800d4b8 <__assert_func>
 800ba60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba64:	6006      	str	r6, [r0, #0]
 800ba66:	60c6      	str	r6, [r0, #12]
 800ba68:	69e6      	ldr	r6, [r4, #28]
 800ba6a:	68f3      	ldr	r3, [r6, #12]
 800ba6c:	b183      	cbz	r3, 800ba90 <_Balloc+0x50>
 800ba6e:	69e3      	ldr	r3, [r4, #28]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba76:	b9b8      	cbnz	r0, 800baa8 <_Balloc+0x68>
 800ba78:	2101      	movs	r1, #1
 800ba7a:	fa01 f605 	lsl.w	r6, r1, r5
 800ba7e:	1d72      	adds	r2, r6, #5
 800ba80:	0092      	lsls	r2, r2, #2
 800ba82:	4620      	mov	r0, r4
 800ba84:	f001 fd36 	bl	800d4f4 <_calloc_r>
 800ba88:	b160      	cbz	r0, 800baa4 <_Balloc+0x64>
 800ba8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba8e:	e00e      	b.n	800baae <_Balloc+0x6e>
 800ba90:	2221      	movs	r2, #33	; 0x21
 800ba92:	2104      	movs	r1, #4
 800ba94:	4620      	mov	r0, r4
 800ba96:	f001 fd2d 	bl	800d4f4 <_calloc_r>
 800ba9a:	69e3      	ldr	r3, [r4, #28]
 800ba9c:	60f0      	str	r0, [r6, #12]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d1e4      	bne.n	800ba6e <_Balloc+0x2e>
 800baa4:	2000      	movs	r0, #0
 800baa6:	bd70      	pop	{r4, r5, r6, pc}
 800baa8:	6802      	ldr	r2, [r0, #0]
 800baaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800baae:	2300      	movs	r3, #0
 800bab0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bab4:	e7f7      	b.n	800baa6 <_Balloc+0x66>
 800bab6:	bf00      	nop
 800bab8:	0800e422 	.word	0x0800e422
 800babc:	0800e4a2 	.word	0x0800e4a2

0800bac0 <_Bfree>:
 800bac0:	b570      	push	{r4, r5, r6, lr}
 800bac2:	69c6      	ldr	r6, [r0, #28]
 800bac4:	4605      	mov	r5, r0
 800bac6:	460c      	mov	r4, r1
 800bac8:	b976      	cbnz	r6, 800bae8 <_Bfree+0x28>
 800baca:	2010      	movs	r0, #16
 800bacc:	f7fe f8bc 	bl	8009c48 <malloc>
 800bad0:	4602      	mov	r2, r0
 800bad2:	61e8      	str	r0, [r5, #28]
 800bad4:	b920      	cbnz	r0, 800bae0 <_Bfree+0x20>
 800bad6:	4b09      	ldr	r3, [pc, #36]	; (800bafc <_Bfree+0x3c>)
 800bad8:	4809      	ldr	r0, [pc, #36]	; (800bb00 <_Bfree+0x40>)
 800bada:	218f      	movs	r1, #143	; 0x8f
 800badc:	f001 fcec 	bl	800d4b8 <__assert_func>
 800bae0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bae4:	6006      	str	r6, [r0, #0]
 800bae6:	60c6      	str	r6, [r0, #12]
 800bae8:	b13c      	cbz	r4, 800bafa <_Bfree+0x3a>
 800baea:	69eb      	ldr	r3, [r5, #28]
 800baec:	6862      	ldr	r2, [r4, #4]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baf4:	6021      	str	r1, [r4, #0]
 800baf6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bafa:	bd70      	pop	{r4, r5, r6, pc}
 800bafc:	0800e422 	.word	0x0800e422
 800bb00:	0800e4a2 	.word	0x0800e4a2

0800bb04 <__multadd>:
 800bb04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb08:	690d      	ldr	r5, [r1, #16]
 800bb0a:	4607      	mov	r7, r0
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	461e      	mov	r6, r3
 800bb10:	f101 0c14 	add.w	ip, r1, #20
 800bb14:	2000      	movs	r0, #0
 800bb16:	f8dc 3000 	ldr.w	r3, [ip]
 800bb1a:	b299      	uxth	r1, r3
 800bb1c:	fb02 6101 	mla	r1, r2, r1, r6
 800bb20:	0c1e      	lsrs	r6, r3, #16
 800bb22:	0c0b      	lsrs	r3, r1, #16
 800bb24:	fb02 3306 	mla	r3, r2, r6, r3
 800bb28:	b289      	uxth	r1, r1
 800bb2a:	3001      	adds	r0, #1
 800bb2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb30:	4285      	cmp	r5, r0
 800bb32:	f84c 1b04 	str.w	r1, [ip], #4
 800bb36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb3a:	dcec      	bgt.n	800bb16 <__multadd+0x12>
 800bb3c:	b30e      	cbz	r6, 800bb82 <__multadd+0x7e>
 800bb3e:	68a3      	ldr	r3, [r4, #8]
 800bb40:	42ab      	cmp	r3, r5
 800bb42:	dc19      	bgt.n	800bb78 <__multadd+0x74>
 800bb44:	6861      	ldr	r1, [r4, #4]
 800bb46:	4638      	mov	r0, r7
 800bb48:	3101      	adds	r1, #1
 800bb4a:	f7ff ff79 	bl	800ba40 <_Balloc>
 800bb4e:	4680      	mov	r8, r0
 800bb50:	b928      	cbnz	r0, 800bb5e <__multadd+0x5a>
 800bb52:	4602      	mov	r2, r0
 800bb54:	4b0c      	ldr	r3, [pc, #48]	; (800bb88 <__multadd+0x84>)
 800bb56:	480d      	ldr	r0, [pc, #52]	; (800bb8c <__multadd+0x88>)
 800bb58:	21ba      	movs	r1, #186	; 0xba
 800bb5a:	f001 fcad 	bl	800d4b8 <__assert_func>
 800bb5e:	6922      	ldr	r2, [r4, #16]
 800bb60:	3202      	adds	r2, #2
 800bb62:	f104 010c 	add.w	r1, r4, #12
 800bb66:	0092      	lsls	r2, r2, #2
 800bb68:	300c      	adds	r0, #12
 800bb6a:	f7ff f914 	bl	800ad96 <memcpy>
 800bb6e:	4621      	mov	r1, r4
 800bb70:	4638      	mov	r0, r7
 800bb72:	f7ff ffa5 	bl	800bac0 <_Bfree>
 800bb76:	4644      	mov	r4, r8
 800bb78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb7c:	3501      	adds	r5, #1
 800bb7e:	615e      	str	r6, [r3, #20]
 800bb80:	6125      	str	r5, [r4, #16]
 800bb82:	4620      	mov	r0, r4
 800bb84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb88:	0800e491 	.word	0x0800e491
 800bb8c:	0800e4a2 	.word	0x0800e4a2

0800bb90 <__s2b>:
 800bb90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb94:	460c      	mov	r4, r1
 800bb96:	4615      	mov	r5, r2
 800bb98:	461f      	mov	r7, r3
 800bb9a:	2209      	movs	r2, #9
 800bb9c:	3308      	adds	r3, #8
 800bb9e:	4606      	mov	r6, r0
 800bba0:	fb93 f3f2 	sdiv	r3, r3, r2
 800bba4:	2100      	movs	r1, #0
 800bba6:	2201      	movs	r2, #1
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	db09      	blt.n	800bbc0 <__s2b+0x30>
 800bbac:	4630      	mov	r0, r6
 800bbae:	f7ff ff47 	bl	800ba40 <_Balloc>
 800bbb2:	b940      	cbnz	r0, 800bbc6 <__s2b+0x36>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	4b19      	ldr	r3, [pc, #100]	; (800bc1c <__s2b+0x8c>)
 800bbb8:	4819      	ldr	r0, [pc, #100]	; (800bc20 <__s2b+0x90>)
 800bbba:	21d3      	movs	r1, #211	; 0xd3
 800bbbc:	f001 fc7c 	bl	800d4b8 <__assert_func>
 800bbc0:	0052      	lsls	r2, r2, #1
 800bbc2:	3101      	adds	r1, #1
 800bbc4:	e7f0      	b.n	800bba8 <__s2b+0x18>
 800bbc6:	9b08      	ldr	r3, [sp, #32]
 800bbc8:	6143      	str	r3, [r0, #20]
 800bbca:	2d09      	cmp	r5, #9
 800bbcc:	f04f 0301 	mov.w	r3, #1
 800bbd0:	6103      	str	r3, [r0, #16]
 800bbd2:	dd16      	ble.n	800bc02 <__s2b+0x72>
 800bbd4:	f104 0909 	add.w	r9, r4, #9
 800bbd8:	46c8      	mov	r8, r9
 800bbda:	442c      	add	r4, r5
 800bbdc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bbe0:	4601      	mov	r1, r0
 800bbe2:	3b30      	subs	r3, #48	; 0x30
 800bbe4:	220a      	movs	r2, #10
 800bbe6:	4630      	mov	r0, r6
 800bbe8:	f7ff ff8c 	bl	800bb04 <__multadd>
 800bbec:	45a0      	cmp	r8, r4
 800bbee:	d1f5      	bne.n	800bbdc <__s2b+0x4c>
 800bbf0:	f1a5 0408 	sub.w	r4, r5, #8
 800bbf4:	444c      	add	r4, r9
 800bbf6:	1b2d      	subs	r5, r5, r4
 800bbf8:	1963      	adds	r3, r4, r5
 800bbfa:	42bb      	cmp	r3, r7
 800bbfc:	db04      	blt.n	800bc08 <__s2b+0x78>
 800bbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc02:	340a      	adds	r4, #10
 800bc04:	2509      	movs	r5, #9
 800bc06:	e7f6      	b.n	800bbf6 <__s2b+0x66>
 800bc08:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bc0c:	4601      	mov	r1, r0
 800bc0e:	3b30      	subs	r3, #48	; 0x30
 800bc10:	220a      	movs	r2, #10
 800bc12:	4630      	mov	r0, r6
 800bc14:	f7ff ff76 	bl	800bb04 <__multadd>
 800bc18:	e7ee      	b.n	800bbf8 <__s2b+0x68>
 800bc1a:	bf00      	nop
 800bc1c:	0800e491 	.word	0x0800e491
 800bc20:	0800e4a2 	.word	0x0800e4a2

0800bc24 <__hi0bits>:
 800bc24:	0c03      	lsrs	r3, r0, #16
 800bc26:	041b      	lsls	r3, r3, #16
 800bc28:	b9d3      	cbnz	r3, 800bc60 <__hi0bits+0x3c>
 800bc2a:	0400      	lsls	r0, r0, #16
 800bc2c:	2310      	movs	r3, #16
 800bc2e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc32:	bf04      	itt	eq
 800bc34:	0200      	lsleq	r0, r0, #8
 800bc36:	3308      	addeq	r3, #8
 800bc38:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc3c:	bf04      	itt	eq
 800bc3e:	0100      	lsleq	r0, r0, #4
 800bc40:	3304      	addeq	r3, #4
 800bc42:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc46:	bf04      	itt	eq
 800bc48:	0080      	lsleq	r0, r0, #2
 800bc4a:	3302      	addeq	r3, #2
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	db05      	blt.n	800bc5c <__hi0bits+0x38>
 800bc50:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc54:	f103 0301 	add.w	r3, r3, #1
 800bc58:	bf08      	it	eq
 800bc5a:	2320      	moveq	r3, #32
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	4770      	bx	lr
 800bc60:	2300      	movs	r3, #0
 800bc62:	e7e4      	b.n	800bc2e <__hi0bits+0xa>

0800bc64 <__lo0bits>:
 800bc64:	6803      	ldr	r3, [r0, #0]
 800bc66:	f013 0207 	ands.w	r2, r3, #7
 800bc6a:	d00c      	beq.n	800bc86 <__lo0bits+0x22>
 800bc6c:	07d9      	lsls	r1, r3, #31
 800bc6e:	d422      	bmi.n	800bcb6 <__lo0bits+0x52>
 800bc70:	079a      	lsls	r2, r3, #30
 800bc72:	bf49      	itett	mi
 800bc74:	085b      	lsrmi	r3, r3, #1
 800bc76:	089b      	lsrpl	r3, r3, #2
 800bc78:	6003      	strmi	r3, [r0, #0]
 800bc7a:	2201      	movmi	r2, #1
 800bc7c:	bf5c      	itt	pl
 800bc7e:	6003      	strpl	r3, [r0, #0]
 800bc80:	2202      	movpl	r2, #2
 800bc82:	4610      	mov	r0, r2
 800bc84:	4770      	bx	lr
 800bc86:	b299      	uxth	r1, r3
 800bc88:	b909      	cbnz	r1, 800bc8e <__lo0bits+0x2a>
 800bc8a:	0c1b      	lsrs	r3, r3, #16
 800bc8c:	2210      	movs	r2, #16
 800bc8e:	b2d9      	uxtb	r1, r3
 800bc90:	b909      	cbnz	r1, 800bc96 <__lo0bits+0x32>
 800bc92:	3208      	adds	r2, #8
 800bc94:	0a1b      	lsrs	r3, r3, #8
 800bc96:	0719      	lsls	r1, r3, #28
 800bc98:	bf04      	itt	eq
 800bc9a:	091b      	lsreq	r3, r3, #4
 800bc9c:	3204      	addeq	r2, #4
 800bc9e:	0799      	lsls	r1, r3, #30
 800bca0:	bf04      	itt	eq
 800bca2:	089b      	lsreq	r3, r3, #2
 800bca4:	3202      	addeq	r2, #2
 800bca6:	07d9      	lsls	r1, r3, #31
 800bca8:	d403      	bmi.n	800bcb2 <__lo0bits+0x4e>
 800bcaa:	085b      	lsrs	r3, r3, #1
 800bcac:	f102 0201 	add.w	r2, r2, #1
 800bcb0:	d003      	beq.n	800bcba <__lo0bits+0x56>
 800bcb2:	6003      	str	r3, [r0, #0]
 800bcb4:	e7e5      	b.n	800bc82 <__lo0bits+0x1e>
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	e7e3      	b.n	800bc82 <__lo0bits+0x1e>
 800bcba:	2220      	movs	r2, #32
 800bcbc:	e7e1      	b.n	800bc82 <__lo0bits+0x1e>
	...

0800bcc0 <__i2b>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	460c      	mov	r4, r1
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	f7ff febb 	bl	800ba40 <_Balloc>
 800bcca:	4602      	mov	r2, r0
 800bccc:	b928      	cbnz	r0, 800bcda <__i2b+0x1a>
 800bcce:	4b05      	ldr	r3, [pc, #20]	; (800bce4 <__i2b+0x24>)
 800bcd0:	4805      	ldr	r0, [pc, #20]	; (800bce8 <__i2b+0x28>)
 800bcd2:	f240 1145 	movw	r1, #325	; 0x145
 800bcd6:	f001 fbef 	bl	800d4b8 <__assert_func>
 800bcda:	2301      	movs	r3, #1
 800bcdc:	6144      	str	r4, [r0, #20]
 800bcde:	6103      	str	r3, [r0, #16]
 800bce0:	bd10      	pop	{r4, pc}
 800bce2:	bf00      	nop
 800bce4:	0800e491 	.word	0x0800e491
 800bce8:	0800e4a2 	.word	0x0800e4a2

0800bcec <__multiply>:
 800bcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	4691      	mov	r9, r2
 800bcf2:	690a      	ldr	r2, [r1, #16]
 800bcf4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcf8:	429a      	cmp	r2, r3
 800bcfa:	bfb8      	it	lt
 800bcfc:	460b      	movlt	r3, r1
 800bcfe:	460c      	mov	r4, r1
 800bd00:	bfbc      	itt	lt
 800bd02:	464c      	movlt	r4, r9
 800bd04:	4699      	movlt	r9, r3
 800bd06:	6927      	ldr	r7, [r4, #16]
 800bd08:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd0c:	68a3      	ldr	r3, [r4, #8]
 800bd0e:	6861      	ldr	r1, [r4, #4]
 800bd10:	eb07 060a 	add.w	r6, r7, sl
 800bd14:	42b3      	cmp	r3, r6
 800bd16:	b085      	sub	sp, #20
 800bd18:	bfb8      	it	lt
 800bd1a:	3101      	addlt	r1, #1
 800bd1c:	f7ff fe90 	bl	800ba40 <_Balloc>
 800bd20:	b930      	cbnz	r0, 800bd30 <__multiply+0x44>
 800bd22:	4602      	mov	r2, r0
 800bd24:	4b44      	ldr	r3, [pc, #272]	; (800be38 <__multiply+0x14c>)
 800bd26:	4845      	ldr	r0, [pc, #276]	; (800be3c <__multiply+0x150>)
 800bd28:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bd2c:	f001 fbc4 	bl	800d4b8 <__assert_func>
 800bd30:	f100 0514 	add.w	r5, r0, #20
 800bd34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd38:	462b      	mov	r3, r5
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	4543      	cmp	r3, r8
 800bd3e:	d321      	bcc.n	800bd84 <__multiply+0x98>
 800bd40:	f104 0314 	add.w	r3, r4, #20
 800bd44:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd48:	f109 0314 	add.w	r3, r9, #20
 800bd4c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd50:	9202      	str	r2, [sp, #8]
 800bd52:	1b3a      	subs	r2, r7, r4
 800bd54:	3a15      	subs	r2, #21
 800bd56:	f022 0203 	bic.w	r2, r2, #3
 800bd5a:	3204      	adds	r2, #4
 800bd5c:	f104 0115 	add.w	r1, r4, #21
 800bd60:	428f      	cmp	r7, r1
 800bd62:	bf38      	it	cc
 800bd64:	2204      	movcc	r2, #4
 800bd66:	9201      	str	r2, [sp, #4]
 800bd68:	9a02      	ldr	r2, [sp, #8]
 800bd6a:	9303      	str	r3, [sp, #12]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d80c      	bhi.n	800bd8a <__multiply+0x9e>
 800bd70:	2e00      	cmp	r6, #0
 800bd72:	dd03      	ble.n	800bd7c <__multiply+0x90>
 800bd74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d05b      	beq.n	800be34 <__multiply+0x148>
 800bd7c:	6106      	str	r6, [r0, #16]
 800bd7e:	b005      	add	sp, #20
 800bd80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd84:	f843 2b04 	str.w	r2, [r3], #4
 800bd88:	e7d8      	b.n	800bd3c <__multiply+0x50>
 800bd8a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd8e:	f1ba 0f00 	cmp.w	sl, #0
 800bd92:	d024      	beq.n	800bdde <__multiply+0xf2>
 800bd94:	f104 0e14 	add.w	lr, r4, #20
 800bd98:	46a9      	mov	r9, r5
 800bd9a:	f04f 0c00 	mov.w	ip, #0
 800bd9e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bda2:	f8d9 1000 	ldr.w	r1, [r9]
 800bda6:	fa1f fb82 	uxth.w	fp, r2
 800bdaa:	b289      	uxth	r1, r1
 800bdac:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdb0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bdb4:	f8d9 2000 	ldr.w	r2, [r9]
 800bdb8:	4461      	add	r1, ip
 800bdba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdbe:	fb0a c20b 	mla	r2, sl, fp, ip
 800bdc2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bdc6:	b289      	uxth	r1, r1
 800bdc8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bdcc:	4577      	cmp	r7, lr
 800bdce:	f849 1b04 	str.w	r1, [r9], #4
 800bdd2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bdd6:	d8e2      	bhi.n	800bd9e <__multiply+0xb2>
 800bdd8:	9a01      	ldr	r2, [sp, #4]
 800bdda:	f845 c002 	str.w	ip, [r5, r2]
 800bdde:	9a03      	ldr	r2, [sp, #12]
 800bde0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bde4:	3304      	adds	r3, #4
 800bde6:	f1b9 0f00 	cmp.w	r9, #0
 800bdea:	d021      	beq.n	800be30 <__multiply+0x144>
 800bdec:	6829      	ldr	r1, [r5, #0]
 800bdee:	f104 0c14 	add.w	ip, r4, #20
 800bdf2:	46ae      	mov	lr, r5
 800bdf4:	f04f 0a00 	mov.w	sl, #0
 800bdf8:	f8bc b000 	ldrh.w	fp, [ip]
 800bdfc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be00:	fb09 220b 	mla	r2, r9, fp, r2
 800be04:	4452      	add	r2, sl
 800be06:	b289      	uxth	r1, r1
 800be08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be0c:	f84e 1b04 	str.w	r1, [lr], #4
 800be10:	f85c 1b04 	ldr.w	r1, [ip], #4
 800be14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be18:	f8be 1000 	ldrh.w	r1, [lr]
 800be1c:	fb09 110a 	mla	r1, r9, sl, r1
 800be20:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800be24:	4567      	cmp	r7, ip
 800be26:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be2a:	d8e5      	bhi.n	800bdf8 <__multiply+0x10c>
 800be2c:	9a01      	ldr	r2, [sp, #4]
 800be2e:	50a9      	str	r1, [r5, r2]
 800be30:	3504      	adds	r5, #4
 800be32:	e799      	b.n	800bd68 <__multiply+0x7c>
 800be34:	3e01      	subs	r6, #1
 800be36:	e79b      	b.n	800bd70 <__multiply+0x84>
 800be38:	0800e491 	.word	0x0800e491
 800be3c:	0800e4a2 	.word	0x0800e4a2

0800be40 <__pow5mult>:
 800be40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be44:	4615      	mov	r5, r2
 800be46:	f012 0203 	ands.w	r2, r2, #3
 800be4a:	4606      	mov	r6, r0
 800be4c:	460f      	mov	r7, r1
 800be4e:	d007      	beq.n	800be60 <__pow5mult+0x20>
 800be50:	4c25      	ldr	r4, [pc, #148]	; (800bee8 <__pow5mult+0xa8>)
 800be52:	3a01      	subs	r2, #1
 800be54:	2300      	movs	r3, #0
 800be56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be5a:	f7ff fe53 	bl	800bb04 <__multadd>
 800be5e:	4607      	mov	r7, r0
 800be60:	10ad      	asrs	r5, r5, #2
 800be62:	d03d      	beq.n	800bee0 <__pow5mult+0xa0>
 800be64:	69f4      	ldr	r4, [r6, #28]
 800be66:	b97c      	cbnz	r4, 800be88 <__pow5mult+0x48>
 800be68:	2010      	movs	r0, #16
 800be6a:	f7fd feed 	bl	8009c48 <malloc>
 800be6e:	4602      	mov	r2, r0
 800be70:	61f0      	str	r0, [r6, #28]
 800be72:	b928      	cbnz	r0, 800be80 <__pow5mult+0x40>
 800be74:	4b1d      	ldr	r3, [pc, #116]	; (800beec <__pow5mult+0xac>)
 800be76:	481e      	ldr	r0, [pc, #120]	; (800bef0 <__pow5mult+0xb0>)
 800be78:	f240 11b3 	movw	r1, #435	; 0x1b3
 800be7c:	f001 fb1c 	bl	800d4b8 <__assert_func>
 800be80:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be84:	6004      	str	r4, [r0, #0]
 800be86:	60c4      	str	r4, [r0, #12]
 800be88:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be8c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be90:	b94c      	cbnz	r4, 800bea6 <__pow5mult+0x66>
 800be92:	f240 2171 	movw	r1, #625	; 0x271
 800be96:	4630      	mov	r0, r6
 800be98:	f7ff ff12 	bl	800bcc0 <__i2b>
 800be9c:	2300      	movs	r3, #0
 800be9e:	f8c8 0008 	str.w	r0, [r8, #8]
 800bea2:	4604      	mov	r4, r0
 800bea4:	6003      	str	r3, [r0, #0]
 800bea6:	f04f 0900 	mov.w	r9, #0
 800beaa:	07eb      	lsls	r3, r5, #31
 800beac:	d50a      	bpl.n	800bec4 <__pow5mult+0x84>
 800beae:	4639      	mov	r1, r7
 800beb0:	4622      	mov	r2, r4
 800beb2:	4630      	mov	r0, r6
 800beb4:	f7ff ff1a 	bl	800bcec <__multiply>
 800beb8:	4639      	mov	r1, r7
 800beba:	4680      	mov	r8, r0
 800bebc:	4630      	mov	r0, r6
 800bebe:	f7ff fdff 	bl	800bac0 <_Bfree>
 800bec2:	4647      	mov	r7, r8
 800bec4:	106d      	asrs	r5, r5, #1
 800bec6:	d00b      	beq.n	800bee0 <__pow5mult+0xa0>
 800bec8:	6820      	ldr	r0, [r4, #0]
 800beca:	b938      	cbnz	r0, 800bedc <__pow5mult+0x9c>
 800becc:	4622      	mov	r2, r4
 800bece:	4621      	mov	r1, r4
 800bed0:	4630      	mov	r0, r6
 800bed2:	f7ff ff0b 	bl	800bcec <__multiply>
 800bed6:	6020      	str	r0, [r4, #0]
 800bed8:	f8c0 9000 	str.w	r9, [r0]
 800bedc:	4604      	mov	r4, r0
 800bede:	e7e4      	b.n	800beaa <__pow5mult+0x6a>
 800bee0:	4638      	mov	r0, r7
 800bee2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bee6:	bf00      	nop
 800bee8:	0800e5f0 	.word	0x0800e5f0
 800beec:	0800e422 	.word	0x0800e422
 800bef0:	0800e4a2 	.word	0x0800e4a2

0800bef4 <__lshift>:
 800bef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef8:	460c      	mov	r4, r1
 800befa:	6849      	ldr	r1, [r1, #4]
 800befc:	6923      	ldr	r3, [r4, #16]
 800befe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf02:	68a3      	ldr	r3, [r4, #8]
 800bf04:	4607      	mov	r7, r0
 800bf06:	4691      	mov	r9, r2
 800bf08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf0c:	f108 0601 	add.w	r6, r8, #1
 800bf10:	42b3      	cmp	r3, r6
 800bf12:	db0b      	blt.n	800bf2c <__lshift+0x38>
 800bf14:	4638      	mov	r0, r7
 800bf16:	f7ff fd93 	bl	800ba40 <_Balloc>
 800bf1a:	4605      	mov	r5, r0
 800bf1c:	b948      	cbnz	r0, 800bf32 <__lshift+0x3e>
 800bf1e:	4602      	mov	r2, r0
 800bf20:	4b28      	ldr	r3, [pc, #160]	; (800bfc4 <__lshift+0xd0>)
 800bf22:	4829      	ldr	r0, [pc, #164]	; (800bfc8 <__lshift+0xd4>)
 800bf24:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bf28:	f001 fac6 	bl	800d4b8 <__assert_func>
 800bf2c:	3101      	adds	r1, #1
 800bf2e:	005b      	lsls	r3, r3, #1
 800bf30:	e7ee      	b.n	800bf10 <__lshift+0x1c>
 800bf32:	2300      	movs	r3, #0
 800bf34:	f100 0114 	add.w	r1, r0, #20
 800bf38:	f100 0210 	add.w	r2, r0, #16
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	4553      	cmp	r3, sl
 800bf40:	db33      	blt.n	800bfaa <__lshift+0xb6>
 800bf42:	6920      	ldr	r0, [r4, #16]
 800bf44:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf48:	f104 0314 	add.w	r3, r4, #20
 800bf4c:	f019 091f 	ands.w	r9, r9, #31
 800bf50:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf54:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf58:	d02b      	beq.n	800bfb2 <__lshift+0xbe>
 800bf5a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf5e:	468a      	mov	sl, r1
 800bf60:	2200      	movs	r2, #0
 800bf62:	6818      	ldr	r0, [r3, #0]
 800bf64:	fa00 f009 	lsl.w	r0, r0, r9
 800bf68:	4310      	orrs	r0, r2
 800bf6a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf6e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf72:	459c      	cmp	ip, r3
 800bf74:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf78:	d8f3      	bhi.n	800bf62 <__lshift+0x6e>
 800bf7a:	ebac 0304 	sub.w	r3, ip, r4
 800bf7e:	3b15      	subs	r3, #21
 800bf80:	f023 0303 	bic.w	r3, r3, #3
 800bf84:	3304      	adds	r3, #4
 800bf86:	f104 0015 	add.w	r0, r4, #21
 800bf8a:	4584      	cmp	ip, r0
 800bf8c:	bf38      	it	cc
 800bf8e:	2304      	movcc	r3, #4
 800bf90:	50ca      	str	r2, [r1, r3]
 800bf92:	b10a      	cbz	r2, 800bf98 <__lshift+0xa4>
 800bf94:	f108 0602 	add.w	r6, r8, #2
 800bf98:	3e01      	subs	r6, #1
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	612e      	str	r6, [r5, #16]
 800bf9e:	4621      	mov	r1, r4
 800bfa0:	f7ff fd8e 	bl	800bac0 <_Bfree>
 800bfa4:	4628      	mov	r0, r5
 800bfa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfaa:	f842 0f04 	str.w	r0, [r2, #4]!
 800bfae:	3301      	adds	r3, #1
 800bfb0:	e7c5      	b.n	800bf3e <__lshift+0x4a>
 800bfb2:	3904      	subs	r1, #4
 800bfb4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfb8:	f841 2f04 	str.w	r2, [r1, #4]!
 800bfbc:	459c      	cmp	ip, r3
 800bfbe:	d8f9      	bhi.n	800bfb4 <__lshift+0xc0>
 800bfc0:	e7ea      	b.n	800bf98 <__lshift+0xa4>
 800bfc2:	bf00      	nop
 800bfc4:	0800e491 	.word	0x0800e491
 800bfc8:	0800e4a2 	.word	0x0800e4a2

0800bfcc <__mcmp>:
 800bfcc:	b530      	push	{r4, r5, lr}
 800bfce:	6902      	ldr	r2, [r0, #16]
 800bfd0:	690c      	ldr	r4, [r1, #16]
 800bfd2:	1b12      	subs	r2, r2, r4
 800bfd4:	d10e      	bne.n	800bff4 <__mcmp+0x28>
 800bfd6:	f100 0314 	add.w	r3, r0, #20
 800bfda:	3114      	adds	r1, #20
 800bfdc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfe0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfe4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfe8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfec:	42a5      	cmp	r5, r4
 800bfee:	d003      	beq.n	800bff8 <__mcmp+0x2c>
 800bff0:	d305      	bcc.n	800bffe <__mcmp+0x32>
 800bff2:	2201      	movs	r2, #1
 800bff4:	4610      	mov	r0, r2
 800bff6:	bd30      	pop	{r4, r5, pc}
 800bff8:	4283      	cmp	r3, r0
 800bffa:	d3f3      	bcc.n	800bfe4 <__mcmp+0x18>
 800bffc:	e7fa      	b.n	800bff4 <__mcmp+0x28>
 800bffe:	f04f 32ff 	mov.w	r2, #4294967295
 800c002:	e7f7      	b.n	800bff4 <__mcmp+0x28>

0800c004 <__mdiff>:
 800c004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c008:	460c      	mov	r4, r1
 800c00a:	4606      	mov	r6, r0
 800c00c:	4611      	mov	r1, r2
 800c00e:	4620      	mov	r0, r4
 800c010:	4690      	mov	r8, r2
 800c012:	f7ff ffdb 	bl	800bfcc <__mcmp>
 800c016:	1e05      	subs	r5, r0, #0
 800c018:	d110      	bne.n	800c03c <__mdiff+0x38>
 800c01a:	4629      	mov	r1, r5
 800c01c:	4630      	mov	r0, r6
 800c01e:	f7ff fd0f 	bl	800ba40 <_Balloc>
 800c022:	b930      	cbnz	r0, 800c032 <__mdiff+0x2e>
 800c024:	4b3a      	ldr	r3, [pc, #232]	; (800c110 <__mdiff+0x10c>)
 800c026:	4602      	mov	r2, r0
 800c028:	f240 2137 	movw	r1, #567	; 0x237
 800c02c:	4839      	ldr	r0, [pc, #228]	; (800c114 <__mdiff+0x110>)
 800c02e:	f001 fa43 	bl	800d4b8 <__assert_func>
 800c032:	2301      	movs	r3, #1
 800c034:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c038:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03c:	bfa4      	itt	ge
 800c03e:	4643      	movge	r3, r8
 800c040:	46a0      	movge	r8, r4
 800c042:	4630      	mov	r0, r6
 800c044:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c048:	bfa6      	itte	ge
 800c04a:	461c      	movge	r4, r3
 800c04c:	2500      	movge	r5, #0
 800c04e:	2501      	movlt	r5, #1
 800c050:	f7ff fcf6 	bl	800ba40 <_Balloc>
 800c054:	b920      	cbnz	r0, 800c060 <__mdiff+0x5c>
 800c056:	4b2e      	ldr	r3, [pc, #184]	; (800c110 <__mdiff+0x10c>)
 800c058:	4602      	mov	r2, r0
 800c05a:	f240 2145 	movw	r1, #581	; 0x245
 800c05e:	e7e5      	b.n	800c02c <__mdiff+0x28>
 800c060:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c064:	6926      	ldr	r6, [r4, #16]
 800c066:	60c5      	str	r5, [r0, #12]
 800c068:	f104 0914 	add.w	r9, r4, #20
 800c06c:	f108 0514 	add.w	r5, r8, #20
 800c070:	f100 0e14 	add.w	lr, r0, #20
 800c074:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c078:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c07c:	f108 0210 	add.w	r2, r8, #16
 800c080:	46f2      	mov	sl, lr
 800c082:	2100      	movs	r1, #0
 800c084:	f859 3b04 	ldr.w	r3, [r9], #4
 800c088:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c08c:	fa11 f88b 	uxtah	r8, r1, fp
 800c090:	b299      	uxth	r1, r3
 800c092:	0c1b      	lsrs	r3, r3, #16
 800c094:	eba8 0801 	sub.w	r8, r8, r1
 800c098:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c09c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0a0:	fa1f f888 	uxth.w	r8, r8
 800c0a4:	1419      	asrs	r1, r3, #16
 800c0a6:	454e      	cmp	r6, r9
 800c0a8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c0ac:	f84a 3b04 	str.w	r3, [sl], #4
 800c0b0:	d8e8      	bhi.n	800c084 <__mdiff+0x80>
 800c0b2:	1b33      	subs	r3, r6, r4
 800c0b4:	3b15      	subs	r3, #21
 800c0b6:	f023 0303 	bic.w	r3, r3, #3
 800c0ba:	3304      	adds	r3, #4
 800c0bc:	3415      	adds	r4, #21
 800c0be:	42a6      	cmp	r6, r4
 800c0c0:	bf38      	it	cc
 800c0c2:	2304      	movcc	r3, #4
 800c0c4:	441d      	add	r5, r3
 800c0c6:	4473      	add	r3, lr
 800c0c8:	469e      	mov	lr, r3
 800c0ca:	462e      	mov	r6, r5
 800c0cc:	4566      	cmp	r6, ip
 800c0ce:	d30e      	bcc.n	800c0ee <__mdiff+0xea>
 800c0d0:	f10c 0203 	add.w	r2, ip, #3
 800c0d4:	1b52      	subs	r2, r2, r5
 800c0d6:	f022 0203 	bic.w	r2, r2, #3
 800c0da:	3d03      	subs	r5, #3
 800c0dc:	45ac      	cmp	ip, r5
 800c0de:	bf38      	it	cc
 800c0e0:	2200      	movcc	r2, #0
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0e8:	b17a      	cbz	r2, 800c10a <__mdiff+0x106>
 800c0ea:	6107      	str	r7, [r0, #16]
 800c0ec:	e7a4      	b.n	800c038 <__mdiff+0x34>
 800c0ee:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0f2:	fa11 f288 	uxtah	r2, r1, r8
 800c0f6:	1414      	asrs	r4, r2, #16
 800c0f8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0fc:	b292      	uxth	r2, r2
 800c0fe:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c102:	f84e 2b04 	str.w	r2, [lr], #4
 800c106:	1421      	asrs	r1, r4, #16
 800c108:	e7e0      	b.n	800c0cc <__mdiff+0xc8>
 800c10a:	3f01      	subs	r7, #1
 800c10c:	e7ea      	b.n	800c0e4 <__mdiff+0xe0>
 800c10e:	bf00      	nop
 800c110:	0800e491 	.word	0x0800e491
 800c114:	0800e4a2 	.word	0x0800e4a2

0800c118 <__ulp>:
 800c118:	b082      	sub	sp, #8
 800c11a:	ed8d 0b00 	vstr	d0, [sp]
 800c11e:	9a01      	ldr	r2, [sp, #4]
 800c120:	4b0f      	ldr	r3, [pc, #60]	; (800c160 <__ulp+0x48>)
 800c122:	4013      	ands	r3, r2
 800c124:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800c128:	2b00      	cmp	r3, #0
 800c12a:	dc08      	bgt.n	800c13e <__ulp+0x26>
 800c12c:	425b      	negs	r3, r3
 800c12e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800c132:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c136:	da04      	bge.n	800c142 <__ulp+0x2a>
 800c138:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c13c:	4113      	asrs	r3, r2
 800c13e:	2200      	movs	r2, #0
 800c140:	e008      	b.n	800c154 <__ulp+0x3c>
 800c142:	f1a2 0314 	sub.w	r3, r2, #20
 800c146:	2b1e      	cmp	r3, #30
 800c148:	bfda      	itte	le
 800c14a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800c14e:	40da      	lsrle	r2, r3
 800c150:	2201      	movgt	r2, #1
 800c152:	2300      	movs	r3, #0
 800c154:	4619      	mov	r1, r3
 800c156:	4610      	mov	r0, r2
 800c158:	ec41 0b10 	vmov	d0, r0, r1
 800c15c:	b002      	add	sp, #8
 800c15e:	4770      	bx	lr
 800c160:	7ff00000 	.word	0x7ff00000

0800c164 <__b2d>:
 800c164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c168:	6906      	ldr	r6, [r0, #16]
 800c16a:	f100 0814 	add.w	r8, r0, #20
 800c16e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c172:	1f37      	subs	r7, r6, #4
 800c174:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c178:	4610      	mov	r0, r2
 800c17a:	f7ff fd53 	bl	800bc24 <__hi0bits>
 800c17e:	f1c0 0320 	rsb	r3, r0, #32
 800c182:	280a      	cmp	r0, #10
 800c184:	600b      	str	r3, [r1, #0]
 800c186:	491b      	ldr	r1, [pc, #108]	; (800c1f4 <__b2d+0x90>)
 800c188:	dc15      	bgt.n	800c1b6 <__b2d+0x52>
 800c18a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c18e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c192:	45b8      	cmp	r8, r7
 800c194:	ea43 0501 	orr.w	r5, r3, r1
 800c198:	bf34      	ite	cc
 800c19a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c19e:	2300      	movcs	r3, #0
 800c1a0:	3015      	adds	r0, #21
 800c1a2:	fa02 f000 	lsl.w	r0, r2, r0
 800c1a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c1aa:	4303      	orrs	r3, r0
 800c1ac:	461c      	mov	r4, r3
 800c1ae:	ec45 4b10 	vmov	d0, r4, r5
 800c1b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1b6:	45b8      	cmp	r8, r7
 800c1b8:	bf3a      	itte	cc
 800c1ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c1be:	f1a6 0708 	subcc.w	r7, r6, #8
 800c1c2:	2300      	movcs	r3, #0
 800c1c4:	380b      	subs	r0, #11
 800c1c6:	d012      	beq.n	800c1ee <__b2d+0x8a>
 800c1c8:	f1c0 0120 	rsb	r1, r0, #32
 800c1cc:	fa23 f401 	lsr.w	r4, r3, r1
 800c1d0:	4082      	lsls	r2, r0
 800c1d2:	4322      	orrs	r2, r4
 800c1d4:	4547      	cmp	r7, r8
 800c1d6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c1da:	bf8c      	ite	hi
 800c1dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c1e0:	2200      	movls	r2, #0
 800c1e2:	4083      	lsls	r3, r0
 800c1e4:	40ca      	lsrs	r2, r1
 800c1e6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	e7de      	b.n	800c1ac <__b2d+0x48>
 800c1ee:	ea42 0501 	orr.w	r5, r2, r1
 800c1f2:	e7db      	b.n	800c1ac <__b2d+0x48>
 800c1f4:	3ff00000 	.word	0x3ff00000

0800c1f8 <__d2b>:
 800c1f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1fc:	460f      	mov	r7, r1
 800c1fe:	2101      	movs	r1, #1
 800c200:	ec59 8b10 	vmov	r8, r9, d0
 800c204:	4616      	mov	r6, r2
 800c206:	f7ff fc1b 	bl	800ba40 <_Balloc>
 800c20a:	4604      	mov	r4, r0
 800c20c:	b930      	cbnz	r0, 800c21c <__d2b+0x24>
 800c20e:	4602      	mov	r2, r0
 800c210:	4b24      	ldr	r3, [pc, #144]	; (800c2a4 <__d2b+0xac>)
 800c212:	4825      	ldr	r0, [pc, #148]	; (800c2a8 <__d2b+0xb0>)
 800c214:	f240 310f 	movw	r1, #783	; 0x30f
 800c218:	f001 f94e 	bl	800d4b8 <__assert_func>
 800c21c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c220:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c224:	bb2d      	cbnz	r5, 800c272 <__d2b+0x7a>
 800c226:	9301      	str	r3, [sp, #4]
 800c228:	f1b8 0300 	subs.w	r3, r8, #0
 800c22c:	d026      	beq.n	800c27c <__d2b+0x84>
 800c22e:	4668      	mov	r0, sp
 800c230:	9300      	str	r3, [sp, #0]
 800c232:	f7ff fd17 	bl	800bc64 <__lo0bits>
 800c236:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c23a:	b1e8      	cbz	r0, 800c278 <__d2b+0x80>
 800c23c:	f1c0 0320 	rsb	r3, r0, #32
 800c240:	fa02 f303 	lsl.w	r3, r2, r3
 800c244:	430b      	orrs	r3, r1
 800c246:	40c2      	lsrs	r2, r0
 800c248:	6163      	str	r3, [r4, #20]
 800c24a:	9201      	str	r2, [sp, #4]
 800c24c:	9b01      	ldr	r3, [sp, #4]
 800c24e:	61a3      	str	r3, [r4, #24]
 800c250:	2b00      	cmp	r3, #0
 800c252:	bf14      	ite	ne
 800c254:	2202      	movne	r2, #2
 800c256:	2201      	moveq	r2, #1
 800c258:	6122      	str	r2, [r4, #16]
 800c25a:	b1bd      	cbz	r5, 800c28c <__d2b+0x94>
 800c25c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c260:	4405      	add	r5, r0
 800c262:	603d      	str	r5, [r7, #0]
 800c264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c268:	6030      	str	r0, [r6, #0]
 800c26a:	4620      	mov	r0, r4
 800c26c:	b003      	add	sp, #12
 800c26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c276:	e7d6      	b.n	800c226 <__d2b+0x2e>
 800c278:	6161      	str	r1, [r4, #20]
 800c27a:	e7e7      	b.n	800c24c <__d2b+0x54>
 800c27c:	a801      	add	r0, sp, #4
 800c27e:	f7ff fcf1 	bl	800bc64 <__lo0bits>
 800c282:	9b01      	ldr	r3, [sp, #4]
 800c284:	6163      	str	r3, [r4, #20]
 800c286:	3020      	adds	r0, #32
 800c288:	2201      	movs	r2, #1
 800c28a:	e7e5      	b.n	800c258 <__d2b+0x60>
 800c28c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c290:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c294:	6038      	str	r0, [r7, #0]
 800c296:	6918      	ldr	r0, [r3, #16]
 800c298:	f7ff fcc4 	bl	800bc24 <__hi0bits>
 800c29c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c2a0:	e7e2      	b.n	800c268 <__d2b+0x70>
 800c2a2:	bf00      	nop
 800c2a4:	0800e491 	.word	0x0800e491
 800c2a8:	0800e4a2 	.word	0x0800e4a2

0800c2ac <__ratio>:
 800c2ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2b0:	4688      	mov	r8, r1
 800c2b2:	4669      	mov	r1, sp
 800c2b4:	4681      	mov	r9, r0
 800c2b6:	f7ff ff55 	bl	800c164 <__b2d>
 800c2ba:	a901      	add	r1, sp, #4
 800c2bc:	4640      	mov	r0, r8
 800c2be:	ec55 4b10 	vmov	r4, r5, d0
 800c2c2:	ee10 aa10 	vmov	sl, s0
 800c2c6:	f7ff ff4d 	bl	800c164 <__b2d>
 800c2ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800c2ce:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800c2d2:	1ad2      	subs	r2, r2, r3
 800c2d4:	e9dd 3100 	ldrd	r3, r1, [sp]
 800c2d8:	1a5b      	subs	r3, r3, r1
 800c2da:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800c2de:	ec57 6b10 	vmov	r6, r7, d0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	bfd6      	itet	le
 800c2e6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2ea:	462a      	movgt	r2, r5
 800c2ec:	463a      	movle	r2, r7
 800c2ee:	46ab      	mov	fp, r5
 800c2f0:	bfd6      	itet	le
 800c2f2:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800c2f6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c2fa:	ee00 3a90 	vmovle	s1, r3
 800c2fe:	ec4b ab17 	vmov	d7, sl, fp
 800c302:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800c306:	b003      	add	sp, #12
 800c308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c30c <__copybits>:
 800c30c:	3901      	subs	r1, #1
 800c30e:	b570      	push	{r4, r5, r6, lr}
 800c310:	1149      	asrs	r1, r1, #5
 800c312:	6914      	ldr	r4, [r2, #16]
 800c314:	3101      	adds	r1, #1
 800c316:	f102 0314 	add.w	r3, r2, #20
 800c31a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c31e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c322:	1f05      	subs	r5, r0, #4
 800c324:	42a3      	cmp	r3, r4
 800c326:	d30c      	bcc.n	800c342 <__copybits+0x36>
 800c328:	1aa3      	subs	r3, r4, r2
 800c32a:	3b11      	subs	r3, #17
 800c32c:	f023 0303 	bic.w	r3, r3, #3
 800c330:	3211      	adds	r2, #17
 800c332:	42a2      	cmp	r2, r4
 800c334:	bf88      	it	hi
 800c336:	2300      	movhi	r3, #0
 800c338:	4418      	add	r0, r3
 800c33a:	2300      	movs	r3, #0
 800c33c:	4288      	cmp	r0, r1
 800c33e:	d305      	bcc.n	800c34c <__copybits+0x40>
 800c340:	bd70      	pop	{r4, r5, r6, pc}
 800c342:	f853 6b04 	ldr.w	r6, [r3], #4
 800c346:	f845 6f04 	str.w	r6, [r5, #4]!
 800c34a:	e7eb      	b.n	800c324 <__copybits+0x18>
 800c34c:	f840 3b04 	str.w	r3, [r0], #4
 800c350:	e7f4      	b.n	800c33c <__copybits+0x30>

0800c352 <__any_on>:
 800c352:	f100 0214 	add.w	r2, r0, #20
 800c356:	6900      	ldr	r0, [r0, #16]
 800c358:	114b      	asrs	r3, r1, #5
 800c35a:	4298      	cmp	r0, r3
 800c35c:	b510      	push	{r4, lr}
 800c35e:	db11      	blt.n	800c384 <__any_on+0x32>
 800c360:	dd0a      	ble.n	800c378 <__any_on+0x26>
 800c362:	f011 011f 	ands.w	r1, r1, #31
 800c366:	d007      	beq.n	800c378 <__any_on+0x26>
 800c368:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c36c:	fa24 f001 	lsr.w	r0, r4, r1
 800c370:	fa00 f101 	lsl.w	r1, r0, r1
 800c374:	428c      	cmp	r4, r1
 800c376:	d10b      	bne.n	800c390 <__any_on+0x3e>
 800c378:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d803      	bhi.n	800c388 <__any_on+0x36>
 800c380:	2000      	movs	r0, #0
 800c382:	bd10      	pop	{r4, pc}
 800c384:	4603      	mov	r3, r0
 800c386:	e7f7      	b.n	800c378 <__any_on+0x26>
 800c388:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c38c:	2900      	cmp	r1, #0
 800c38e:	d0f5      	beq.n	800c37c <__any_on+0x2a>
 800c390:	2001      	movs	r0, #1
 800c392:	e7f6      	b.n	800c382 <__any_on+0x30>

0800c394 <sulp>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	4604      	mov	r4, r0
 800c398:	460d      	mov	r5, r1
 800c39a:	4616      	mov	r6, r2
 800c39c:	ec45 4b10 	vmov	d0, r4, r5
 800c3a0:	f7ff feba 	bl	800c118 <__ulp>
 800c3a4:	b17e      	cbz	r6, 800c3c6 <sulp+0x32>
 800c3a6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c3aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	dd09      	ble.n	800c3c6 <sulp+0x32>
 800c3b2:	051b      	lsls	r3, r3, #20
 800c3b4:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	f501 1140 	add.w	r1, r1, #3145728	; 0x300000
 800c3be:	ec41 0b17 	vmov	d7, r0, r1
 800c3c2:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c3c6:	bd70      	pop	{r4, r5, r6, pc}

0800c3c8 <_strtod_l>:
 800c3c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3cc:	ed2d 8b0e 	vpush	{d8-d14}
 800c3d0:	b097      	sub	sp, #92	; 0x5c
 800c3d2:	4604      	mov	r4, r0
 800c3d4:	920d      	str	r2, [sp, #52]	; 0x34
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	9212      	str	r2, [sp, #72]	; 0x48
 800c3da:	468a      	mov	sl, r1
 800c3dc:	f04f 0800 	mov.w	r8, #0
 800c3e0:	f04f 0900 	mov.w	r9, #0
 800c3e4:	460a      	mov	r2, r1
 800c3e6:	9211      	str	r2, [sp, #68]	; 0x44
 800c3e8:	7811      	ldrb	r1, [r2, #0]
 800c3ea:	292b      	cmp	r1, #43	; 0x2b
 800c3ec:	d04c      	beq.n	800c488 <_strtod_l+0xc0>
 800c3ee:	d839      	bhi.n	800c464 <_strtod_l+0x9c>
 800c3f0:	290d      	cmp	r1, #13
 800c3f2:	d833      	bhi.n	800c45c <_strtod_l+0x94>
 800c3f4:	2908      	cmp	r1, #8
 800c3f6:	d833      	bhi.n	800c460 <_strtod_l+0x98>
 800c3f8:	2900      	cmp	r1, #0
 800c3fa:	d03c      	beq.n	800c476 <_strtod_l+0xae>
 800c3fc:	2200      	movs	r2, #0
 800c3fe:	9208      	str	r2, [sp, #32]
 800c400:	9e11      	ldr	r6, [sp, #68]	; 0x44
 800c402:	7832      	ldrb	r2, [r6, #0]
 800c404:	2a30      	cmp	r2, #48	; 0x30
 800c406:	f040 80b8 	bne.w	800c57a <_strtod_l+0x1b2>
 800c40a:	7872      	ldrb	r2, [r6, #1]
 800c40c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c410:	2a58      	cmp	r2, #88	; 0x58
 800c412:	d170      	bne.n	800c4f6 <_strtod_l+0x12e>
 800c414:	9302      	str	r3, [sp, #8]
 800c416:	9b08      	ldr	r3, [sp, #32]
 800c418:	9301      	str	r3, [sp, #4]
 800c41a:	ab12      	add	r3, sp, #72	; 0x48
 800c41c:	9300      	str	r3, [sp, #0]
 800c41e:	4a91      	ldr	r2, [pc, #580]	; (800c664 <_strtod_l+0x29c>)
 800c420:	ab13      	add	r3, sp, #76	; 0x4c
 800c422:	a911      	add	r1, sp, #68	; 0x44
 800c424:	4620      	mov	r0, r4
 800c426:	f001 f8e3 	bl	800d5f0 <__gethex>
 800c42a:	f010 070f 	ands.w	r7, r0, #15
 800c42e:	4605      	mov	r5, r0
 800c430:	d005      	beq.n	800c43e <_strtod_l+0x76>
 800c432:	2f06      	cmp	r7, #6
 800c434:	d12a      	bne.n	800c48c <_strtod_l+0xc4>
 800c436:	3601      	adds	r6, #1
 800c438:	2300      	movs	r3, #0
 800c43a:	9611      	str	r6, [sp, #68]	; 0x44
 800c43c:	9308      	str	r3, [sp, #32]
 800c43e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c440:	2b00      	cmp	r3, #0
 800c442:	f040 8555 	bne.w	800cef0 <_strtod_l+0xb28>
 800c446:	9b08      	ldr	r3, [sp, #32]
 800c448:	ec49 8b10 	vmov	d0, r8, r9
 800c44c:	b1cb      	cbz	r3, 800c482 <_strtod_l+0xba>
 800c44e:	eeb1 0b40 	vneg.f64	d0, d0
 800c452:	b017      	add	sp, #92	; 0x5c
 800c454:	ecbd 8b0e 	vpop	{d8-d14}
 800c458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c45c:	2920      	cmp	r1, #32
 800c45e:	d1cd      	bne.n	800c3fc <_strtod_l+0x34>
 800c460:	3201      	adds	r2, #1
 800c462:	e7c0      	b.n	800c3e6 <_strtod_l+0x1e>
 800c464:	292d      	cmp	r1, #45	; 0x2d
 800c466:	d1c9      	bne.n	800c3fc <_strtod_l+0x34>
 800c468:	2101      	movs	r1, #1
 800c46a:	9108      	str	r1, [sp, #32]
 800c46c:	1c51      	adds	r1, r2, #1
 800c46e:	9111      	str	r1, [sp, #68]	; 0x44
 800c470:	7852      	ldrb	r2, [r2, #1]
 800c472:	2a00      	cmp	r2, #0
 800c474:	d1c4      	bne.n	800c400 <_strtod_l+0x38>
 800c476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c478:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f040 8535 	bne.w	800ceec <_strtod_l+0xb24>
 800c482:	ec49 8b10 	vmov	d0, r8, r9
 800c486:	e7e4      	b.n	800c452 <_strtod_l+0x8a>
 800c488:	2100      	movs	r1, #0
 800c48a:	e7ee      	b.n	800c46a <_strtod_l+0xa2>
 800c48c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c48e:	b13a      	cbz	r2, 800c4a0 <_strtod_l+0xd8>
 800c490:	2135      	movs	r1, #53	; 0x35
 800c492:	a814      	add	r0, sp, #80	; 0x50
 800c494:	f7ff ff3a 	bl	800c30c <__copybits>
 800c498:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c49a:	4620      	mov	r0, r4
 800c49c:	f7ff fb10 	bl	800bac0 <_Bfree>
 800c4a0:	1e7b      	subs	r3, r7, #1
 800c4a2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c4a4:	2b04      	cmp	r3, #4
 800c4a6:	d806      	bhi.n	800c4b6 <_strtod_l+0xee>
 800c4a8:	e8df f003 	tbb	[pc, r3]
 800c4ac:	201d0314 	.word	0x201d0314
 800c4b0:	14          	.byte	0x14
 800c4b1:	00          	.byte	0x00
 800c4b2:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
 800c4b6:	05eb      	lsls	r3, r5, #23
 800c4b8:	bf48      	it	mi
 800c4ba:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800c4be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c4c2:	0d1b      	lsrs	r3, r3, #20
 800c4c4:	051b      	lsls	r3, r3, #20
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1b9      	bne.n	800c43e <_strtod_l+0x76>
 800c4ca:	f7fe fc37 	bl	800ad3c <__errno>
 800c4ce:	2322      	movs	r3, #34	; 0x22
 800c4d0:	6003      	str	r3, [r0, #0]
 800c4d2:	e7b4      	b.n	800c43e <_strtod_l+0x76>
 800c4d4:	e9dd 8314 	ldrd	r8, r3, [sp, #80]	; 0x50
 800c4d8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c4dc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c4e0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800c4e4:	e7e7      	b.n	800c4b6 <_strtod_l+0xee>
 800c4e6:	f8df 9184 	ldr.w	r9, [pc, #388]	; 800c66c <_strtod_l+0x2a4>
 800c4ea:	e7e4      	b.n	800c4b6 <_strtod_l+0xee>
 800c4ec:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800c4f0:	f04f 38ff 	mov.w	r8, #4294967295
 800c4f4:	e7df      	b.n	800c4b6 <_strtod_l+0xee>
 800c4f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4f8:	1c5a      	adds	r2, r3, #1
 800c4fa:	9211      	str	r2, [sp, #68]	; 0x44
 800c4fc:	785b      	ldrb	r3, [r3, #1]
 800c4fe:	2b30      	cmp	r3, #48	; 0x30
 800c500:	d0f9      	beq.n	800c4f6 <_strtod_l+0x12e>
 800c502:	2b00      	cmp	r3, #0
 800c504:	d09b      	beq.n	800c43e <_strtod_l+0x76>
 800c506:	2301      	movs	r3, #1
 800c508:	9306      	str	r3, [sp, #24]
 800c50a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c50c:	9309      	str	r3, [sp, #36]	; 0x24
 800c50e:	2300      	movs	r3, #0
 800c510:	9305      	str	r3, [sp, #20]
 800c512:	9307      	str	r3, [sp, #28]
 800c514:	461e      	mov	r6, r3
 800c516:	220a      	movs	r2, #10
 800c518:	9811      	ldr	r0, [sp, #68]	; 0x44
 800c51a:	7805      	ldrb	r5, [r0, #0]
 800c51c:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800c520:	b2d9      	uxtb	r1, r3
 800c522:	2909      	cmp	r1, #9
 800c524:	d92b      	bls.n	800c57e <_strtod_l+0x1b6>
 800c526:	4950      	ldr	r1, [pc, #320]	; (800c668 <_strtod_l+0x2a0>)
 800c528:	2201      	movs	r2, #1
 800c52a:	f000 ffa9 	bl	800d480 <strncmp>
 800c52e:	2800      	cmp	r0, #0
 800c530:	d035      	beq.n	800c59e <_strtod_l+0x1d6>
 800c532:	2000      	movs	r0, #0
 800c534:	462a      	mov	r2, r5
 800c536:	4633      	mov	r3, r6
 800c538:	4683      	mov	fp, r0
 800c53a:	4601      	mov	r1, r0
 800c53c:	2a65      	cmp	r2, #101	; 0x65
 800c53e:	d001      	beq.n	800c544 <_strtod_l+0x17c>
 800c540:	2a45      	cmp	r2, #69	; 0x45
 800c542:	d118      	bne.n	800c576 <_strtod_l+0x1ae>
 800c544:	b91b      	cbnz	r3, 800c54e <_strtod_l+0x186>
 800c546:	9b06      	ldr	r3, [sp, #24]
 800c548:	4303      	orrs	r3, r0
 800c54a:	d094      	beq.n	800c476 <_strtod_l+0xae>
 800c54c:	2300      	movs	r3, #0
 800c54e:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
 800c552:	f10a 0201 	add.w	r2, sl, #1
 800c556:	9211      	str	r2, [sp, #68]	; 0x44
 800c558:	f89a 2001 	ldrb.w	r2, [sl, #1]
 800c55c:	2a2b      	cmp	r2, #43	; 0x2b
 800c55e:	d075      	beq.n	800c64c <_strtod_l+0x284>
 800c560:	2a2d      	cmp	r2, #45	; 0x2d
 800c562:	d07b      	beq.n	800c65c <_strtod_l+0x294>
 800c564:	f04f 0e00 	mov.w	lr, #0
 800c568:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800c56c:	2d09      	cmp	r5, #9
 800c56e:	f240 8083 	bls.w	800c678 <_strtod_l+0x2b0>
 800c572:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 800c576:	2500      	movs	r5, #0
 800c578:	e09e      	b.n	800c6b8 <_strtod_l+0x2f0>
 800c57a:	2300      	movs	r3, #0
 800c57c:	e7c4      	b.n	800c508 <_strtod_l+0x140>
 800c57e:	2e08      	cmp	r6, #8
 800c580:	bfd5      	itete	le
 800c582:	9907      	ldrle	r1, [sp, #28]
 800c584:	9905      	ldrgt	r1, [sp, #20]
 800c586:	fb02 3301 	mlale	r3, r2, r1, r3
 800c58a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c58e:	f100 0001 	add.w	r0, r0, #1
 800c592:	bfd4      	ite	le
 800c594:	9307      	strle	r3, [sp, #28]
 800c596:	9305      	strgt	r3, [sp, #20]
 800c598:	3601      	adds	r6, #1
 800c59a:	9011      	str	r0, [sp, #68]	; 0x44
 800c59c:	e7bc      	b.n	800c518 <_strtod_l+0x150>
 800c59e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	9211      	str	r2, [sp, #68]	; 0x44
 800c5a4:	785a      	ldrb	r2, [r3, #1]
 800c5a6:	b3ae      	cbz	r6, 800c614 <_strtod_l+0x24c>
 800c5a8:	4683      	mov	fp, r0
 800c5aa:	4633      	mov	r3, r6
 800c5ac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c5b0:	2909      	cmp	r1, #9
 800c5b2:	d912      	bls.n	800c5da <_strtod_l+0x212>
 800c5b4:	2101      	movs	r1, #1
 800c5b6:	e7c1      	b.n	800c53c <_strtod_l+0x174>
 800c5b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	9211      	str	r2, [sp, #68]	; 0x44
 800c5be:	785a      	ldrb	r2, [r3, #1]
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	2a30      	cmp	r2, #48	; 0x30
 800c5c4:	d0f8      	beq.n	800c5b8 <_strtod_l+0x1f0>
 800c5c6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c5ca:	2b08      	cmp	r3, #8
 800c5cc:	f200 8495 	bhi.w	800cefa <_strtod_l+0xb32>
 800c5d0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d4:	4683      	mov	fp, r0
 800c5d6:	2000      	movs	r0, #0
 800c5d8:	4603      	mov	r3, r0
 800c5da:	3a30      	subs	r2, #48	; 0x30
 800c5dc:	f100 0101 	add.w	r1, r0, #1
 800c5e0:	d012      	beq.n	800c608 <_strtod_l+0x240>
 800c5e2:	448b      	add	fp, r1
 800c5e4:	eb00 0c03 	add.w	ip, r0, r3
 800c5e8:	4619      	mov	r1, r3
 800c5ea:	250a      	movs	r5, #10
 800c5ec:	4561      	cmp	r1, ip
 800c5ee:	d113      	bne.n	800c618 <_strtod_l+0x250>
 800c5f0:	1819      	adds	r1, r3, r0
 800c5f2:	2908      	cmp	r1, #8
 800c5f4:	f103 0301 	add.w	r3, r3, #1
 800c5f8:	4403      	add	r3, r0
 800c5fa:	dc1b      	bgt.n	800c634 <_strtod_l+0x26c>
 800c5fc:	9807      	ldr	r0, [sp, #28]
 800c5fe:	210a      	movs	r1, #10
 800c600:	fb01 2200 	mla	r2, r1, r0, r2
 800c604:	9207      	str	r2, [sp, #28]
 800c606:	2100      	movs	r1, #0
 800c608:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c60a:	1c50      	adds	r0, r2, #1
 800c60c:	9011      	str	r0, [sp, #68]	; 0x44
 800c60e:	7852      	ldrb	r2, [r2, #1]
 800c610:	4608      	mov	r0, r1
 800c612:	e7cb      	b.n	800c5ac <_strtod_l+0x1e4>
 800c614:	4630      	mov	r0, r6
 800c616:	e7d4      	b.n	800c5c2 <_strtod_l+0x1fa>
 800c618:	2908      	cmp	r1, #8
 800c61a:	f101 0101 	add.w	r1, r1, #1
 800c61e:	dc03      	bgt.n	800c628 <_strtod_l+0x260>
 800c620:	9f07      	ldr	r7, [sp, #28]
 800c622:	436f      	muls	r7, r5
 800c624:	9707      	str	r7, [sp, #28]
 800c626:	e7e1      	b.n	800c5ec <_strtod_l+0x224>
 800c628:	2910      	cmp	r1, #16
 800c62a:	bfde      	ittt	le
 800c62c:	9f05      	ldrle	r7, [sp, #20]
 800c62e:	436f      	mulle	r7, r5
 800c630:	9705      	strle	r7, [sp, #20]
 800c632:	e7db      	b.n	800c5ec <_strtod_l+0x224>
 800c634:	2b10      	cmp	r3, #16
 800c636:	bfdf      	itttt	le
 800c638:	9805      	ldrle	r0, [sp, #20]
 800c63a:	210a      	movle	r1, #10
 800c63c:	fb01 2200 	mlale	r2, r1, r0, r2
 800c640:	9205      	strle	r2, [sp, #20]
 800c642:	e7e0      	b.n	800c606 <_strtod_l+0x23e>
 800c644:	f04f 0b00 	mov.w	fp, #0
 800c648:	2101      	movs	r1, #1
 800c64a:	e77c      	b.n	800c546 <_strtod_l+0x17e>
 800c64c:	f04f 0e00 	mov.w	lr, #0
 800c650:	f10a 0202 	add.w	r2, sl, #2
 800c654:	9211      	str	r2, [sp, #68]	; 0x44
 800c656:	f89a 2002 	ldrb.w	r2, [sl, #2]
 800c65a:	e785      	b.n	800c568 <_strtod_l+0x1a0>
 800c65c:	f04f 0e01 	mov.w	lr, #1
 800c660:	e7f6      	b.n	800c650 <_strtod_l+0x288>
 800c662:	bf00      	nop
 800c664:	0800e600 	.word	0x0800e600
 800c668:	0800e5fc 	.word	0x0800e5fc
 800c66c:	7ff00000 	.word	0x7ff00000
 800c670:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c672:	1c55      	adds	r5, r2, #1
 800c674:	9511      	str	r5, [sp, #68]	; 0x44
 800c676:	7852      	ldrb	r2, [r2, #1]
 800c678:	2a30      	cmp	r2, #48	; 0x30
 800c67a:	d0f9      	beq.n	800c670 <_strtod_l+0x2a8>
 800c67c:	f1a2 0531 	sub.w	r5, r2, #49	; 0x31
 800c680:	2d08      	cmp	r5, #8
 800c682:	f63f af78 	bhi.w	800c576 <_strtod_l+0x1ae>
 800c686:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800c68a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c68c:	920a      	str	r2, [sp, #40]	; 0x28
 800c68e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800c690:	1c55      	adds	r5, r2, #1
 800c692:	9511      	str	r5, [sp, #68]	; 0x44
 800c694:	7852      	ldrb	r2, [r2, #1]
 800c696:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
 800c69a:	2f09      	cmp	r7, #9
 800c69c:	d937      	bls.n	800c70e <_strtod_l+0x346>
 800c69e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800c6a0:	1bed      	subs	r5, r5, r7
 800c6a2:	2d08      	cmp	r5, #8
 800c6a4:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800c6a8:	dc02      	bgt.n	800c6b0 <_strtod_l+0x2e8>
 800c6aa:	4565      	cmp	r5, ip
 800c6ac:	bfa8      	it	ge
 800c6ae:	4665      	movge	r5, ip
 800c6b0:	f1be 0f00 	cmp.w	lr, #0
 800c6b4:	d000      	beq.n	800c6b8 <_strtod_l+0x2f0>
 800c6b6:	426d      	negs	r5, r5
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d14d      	bne.n	800c758 <_strtod_l+0x390>
 800c6bc:	9b06      	ldr	r3, [sp, #24]
 800c6be:	4303      	orrs	r3, r0
 800c6c0:	f47f aebd 	bne.w	800c43e <_strtod_l+0x76>
 800c6c4:	2900      	cmp	r1, #0
 800c6c6:	f47f aed6 	bne.w	800c476 <_strtod_l+0xae>
 800c6ca:	2a69      	cmp	r2, #105	; 0x69
 800c6cc:	d027      	beq.n	800c71e <_strtod_l+0x356>
 800c6ce:	dc24      	bgt.n	800c71a <_strtod_l+0x352>
 800c6d0:	2a49      	cmp	r2, #73	; 0x49
 800c6d2:	d024      	beq.n	800c71e <_strtod_l+0x356>
 800c6d4:	2a4e      	cmp	r2, #78	; 0x4e
 800c6d6:	f47f aece 	bne.w	800c476 <_strtod_l+0xae>
 800c6da:	4995      	ldr	r1, [pc, #596]	; (800c930 <_strtod_l+0x568>)
 800c6dc:	a811      	add	r0, sp, #68	; 0x44
 800c6de:	f001 f9c7 	bl	800da70 <__match>
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	f43f aec7 	beq.w	800c476 <_strtod_l+0xae>
 800c6e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c6ea:	781b      	ldrb	r3, [r3, #0]
 800c6ec:	2b28      	cmp	r3, #40	; 0x28
 800c6ee:	d12d      	bne.n	800c74c <_strtod_l+0x384>
 800c6f0:	4990      	ldr	r1, [pc, #576]	; (800c934 <_strtod_l+0x56c>)
 800c6f2:	aa14      	add	r2, sp, #80	; 0x50
 800c6f4:	a811      	add	r0, sp, #68	; 0x44
 800c6f6:	f001 f9cf 	bl	800da98 <__hexnan>
 800c6fa:	2805      	cmp	r0, #5
 800c6fc:	d126      	bne.n	800c74c <_strtod_l+0x384>
 800c6fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c700:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800c704:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800c708:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800c70c:	e697      	b.n	800c43e <_strtod_l+0x76>
 800c70e:	250a      	movs	r5, #10
 800c710:	fb05 2c0c 	mla	ip, r5, ip, r2
 800c714:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800c718:	e7b9      	b.n	800c68e <_strtod_l+0x2c6>
 800c71a:	2a6e      	cmp	r2, #110	; 0x6e
 800c71c:	e7db      	b.n	800c6d6 <_strtod_l+0x30e>
 800c71e:	4986      	ldr	r1, [pc, #536]	; (800c938 <_strtod_l+0x570>)
 800c720:	a811      	add	r0, sp, #68	; 0x44
 800c722:	f001 f9a5 	bl	800da70 <__match>
 800c726:	2800      	cmp	r0, #0
 800c728:	f43f aea5 	beq.w	800c476 <_strtod_l+0xae>
 800c72c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c72e:	4983      	ldr	r1, [pc, #524]	; (800c93c <_strtod_l+0x574>)
 800c730:	3b01      	subs	r3, #1
 800c732:	a811      	add	r0, sp, #68	; 0x44
 800c734:	9311      	str	r3, [sp, #68]	; 0x44
 800c736:	f001 f99b 	bl	800da70 <__match>
 800c73a:	b910      	cbnz	r0, 800c742 <_strtod_l+0x37a>
 800c73c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c73e:	3301      	adds	r3, #1
 800c740:	9311      	str	r3, [sp, #68]	; 0x44
 800c742:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800c950 <_strtod_l+0x588>
 800c746:	f04f 0800 	mov.w	r8, #0
 800c74a:	e678      	b.n	800c43e <_strtod_l+0x76>
 800c74c:	487c      	ldr	r0, [pc, #496]	; (800c940 <_strtod_l+0x578>)
 800c74e:	f000 feab 	bl	800d4a8 <nan>
 800c752:	ec59 8b10 	vmov	r8, r9, d0
 800c756:	e672      	b.n	800c43e <_strtod_l+0x76>
 800c758:	eddd 7a07 	vldr	s15, [sp, #28]
 800c75c:	eba5 020b 	sub.w	r2, r5, fp
 800c760:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c764:	2e00      	cmp	r6, #0
 800c766:	bf08      	it	eq
 800c768:	461e      	moveq	r6, r3
 800c76a:	2b10      	cmp	r3, #16
 800c76c:	9206      	str	r2, [sp, #24]
 800c76e:	461a      	mov	r2, r3
 800c770:	bfa8      	it	ge
 800c772:	2210      	movge	r2, #16
 800c774:	2b09      	cmp	r3, #9
 800c776:	ec59 8b17 	vmov	r8, r9, d7
 800c77a:	dd0c      	ble.n	800c796 <_strtod_l+0x3ce>
 800c77c:	4971      	ldr	r1, [pc, #452]	; (800c944 <_strtod_l+0x57c>)
 800c77e:	eddd 6a05 	vldr	s13, [sp, #20]
 800c782:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800c786:	ed11 5b12 	vldr	d5, [r1, #-72]	; 0xffffffb8
 800c78a:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800c78e:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c792:	ec59 8b16 	vmov	r8, r9, d6
 800c796:	2b0f      	cmp	r3, #15
 800c798:	dc37      	bgt.n	800c80a <_strtod_l+0x442>
 800c79a:	9906      	ldr	r1, [sp, #24]
 800c79c:	2900      	cmp	r1, #0
 800c79e:	f43f ae4e 	beq.w	800c43e <_strtod_l+0x76>
 800c7a2:	dd23      	ble.n	800c7ec <_strtod_l+0x424>
 800c7a4:	2916      	cmp	r1, #22
 800c7a6:	dc0b      	bgt.n	800c7c0 <_strtod_l+0x3f8>
 800c7a8:	4b66      	ldr	r3, [pc, #408]	; (800c944 <_strtod_l+0x57c>)
 800c7aa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800c7ae:	ed93 7b00 	vldr	d7, [r3]
 800c7b2:	ec49 8b16 	vmov	d6, r8, r9
 800c7b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7ba:	ec59 8b17 	vmov	r8, r9, d7
 800c7be:	e63e      	b.n	800c43e <_strtod_l+0x76>
 800c7c0:	9806      	ldr	r0, [sp, #24]
 800c7c2:	f1c3 0125 	rsb	r1, r3, #37	; 0x25
 800c7c6:	4281      	cmp	r1, r0
 800c7c8:	db1f      	blt.n	800c80a <_strtod_l+0x442>
 800c7ca:	4a5e      	ldr	r2, [pc, #376]	; (800c944 <_strtod_l+0x57c>)
 800c7cc:	f1c3 030f 	rsb	r3, r3, #15
 800c7d0:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c7d4:	ed91 7b00 	vldr	d7, [r1]
 800c7d8:	ec49 8b16 	vmov	d6, r8, r9
 800c7dc:	1ac3      	subs	r3, r0, r3
 800c7de:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800c7e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c7e6:	ed92 6b00 	vldr	d6, [r2]
 800c7ea:	e7e4      	b.n	800c7b6 <_strtod_l+0x3ee>
 800c7ec:	9906      	ldr	r1, [sp, #24]
 800c7ee:	3116      	adds	r1, #22
 800c7f0:	db0b      	blt.n	800c80a <_strtod_l+0x442>
 800c7f2:	4b54      	ldr	r3, [pc, #336]	; (800c944 <_strtod_l+0x57c>)
 800c7f4:	ebab 0505 	sub.w	r5, fp, r5
 800c7f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800c7fc:	ed95 7b00 	vldr	d7, [r5]
 800c800:	ec49 8b16 	vmov	d6, r8, r9
 800c804:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c808:	e7d7      	b.n	800c7ba <_strtod_l+0x3f2>
 800c80a:	9906      	ldr	r1, [sp, #24]
 800c80c:	1a9a      	subs	r2, r3, r2
 800c80e:	440a      	add	r2, r1
 800c810:	2a00      	cmp	r2, #0
 800c812:	dd6e      	ble.n	800c8f2 <_strtod_l+0x52a>
 800c814:	f012 000f 	ands.w	r0, r2, #15
 800c818:	d00a      	beq.n	800c830 <_strtod_l+0x468>
 800c81a:	494a      	ldr	r1, [pc, #296]	; (800c944 <_strtod_l+0x57c>)
 800c81c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c820:	ed91 7b00 	vldr	d7, [r1]
 800c824:	ec49 8b16 	vmov	d6, r8, r9
 800c828:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c82c:	ec59 8b17 	vmov	r8, r9, d7
 800c830:	f032 020f 	bics.w	r2, r2, #15
 800c834:	d04e      	beq.n	800c8d4 <_strtod_l+0x50c>
 800c836:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 800c83a:	dd22      	ble.n	800c882 <_strtod_l+0x4ba>
 800c83c:	2500      	movs	r5, #0
 800c83e:	462e      	mov	r6, r5
 800c840:	9507      	str	r5, [sp, #28]
 800c842:	462f      	mov	r7, r5
 800c844:	2322      	movs	r3, #34	; 0x22
 800c846:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800c950 <_strtod_l+0x588>
 800c84a:	6023      	str	r3, [r4, #0]
 800c84c:	f04f 0800 	mov.w	r8, #0
 800c850:	9b07      	ldr	r3, [sp, #28]
 800c852:	2b00      	cmp	r3, #0
 800c854:	f43f adf3 	beq.w	800c43e <_strtod_l+0x76>
 800c858:	9912      	ldr	r1, [sp, #72]	; 0x48
 800c85a:	4620      	mov	r0, r4
 800c85c:	f7ff f930 	bl	800bac0 <_Bfree>
 800c860:	4639      	mov	r1, r7
 800c862:	4620      	mov	r0, r4
 800c864:	f7ff f92c 	bl	800bac0 <_Bfree>
 800c868:	4631      	mov	r1, r6
 800c86a:	4620      	mov	r0, r4
 800c86c:	f7ff f928 	bl	800bac0 <_Bfree>
 800c870:	9907      	ldr	r1, [sp, #28]
 800c872:	4620      	mov	r0, r4
 800c874:	f7ff f924 	bl	800bac0 <_Bfree>
 800c878:	4629      	mov	r1, r5
 800c87a:	4620      	mov	r0, r4
 800c87c:	f7ff f920 	bl	800bac0 <_Bfree>
 800c880:	e5dd      	b.n	800c43e <_strtod_l+0x76>
 800c882:	2000      	movs	r0, #0
 800c884:	ec49 8b17 	vmov	d7, r8, r9
 800c888:	4f2f      	ldr	r7, [pc, #188]	; (800c948 <_strtod_l+0x580>)
 800c88a:	1112      	asrs	r2, r2, #4
 800c88c:	4601      	mov	r1, r0
 800c88e:	2a01      	cmp	r2, #1
 800c890:	dc23      	bgt.n	800c8da <_strtod_l+0x512>
 800c892:	b108      	cbz	r0, 800c898 <_strtod_l+0x4d0>
 800c894:	ec59 8b17 	vmov	r8, r9, d7
 800c898:	4a2b      	ldr	r2, [pc, #172]	; (800c948 <_strtod_l+0x580>)
 800c89a:	482c      	ldr	r0, [pc, #176]	; (800c94c <_strtod_l+0x584>)
 800c89c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c8a0:	ed92 7b00 	vldr	d7, [r2]
 800c8a4:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800c8a8:	ec49 8b16 	vmov	d6, r8, r9
 800c8ac:	4a28      	ldr	r2, [pc, #160]	; (800c950 <_strtod_l+0x588>)
 800c8ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8b2:	ee17 1a90 	vmov	r1, s15
 800c8b6:	400a      	ands	r2, r1
 800c8b8:	4282      	cmp	r2, r0
 800c8ba:	ec59 8b17 	vmov	r8, r9, d7
 800c8be:	d8bd      	bhi.n	800c83c <_strtod_l+0x474>
 800c8c0:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 800c8c4:	4282      	cmp	r2, r0
 800c8c6:	bf86      	itte	hi
 800c8c8:	f8df 9088 	ldrhi.w	r9, [pc, #136]	; 800c954 <_strtod_l+0x58c>
 800c8cc:	f04f 38ff 	movhi.w	r8, #4294967295
 800c8d0:	f101 7954 	addls.w	r9, r1, #55574528	; 0x3500000
 800c8d4:	2200      	movs	r2, #0
 800c8d6:	9205      	str	r2, [sp, #20]
 800c8d8:	e076      	b.n	800c9c8 <_strtod_l+0x600>
 800c8da:	f012 0f01 	tst.w	r2, #1
 800c8de:	d004      	beq.n	800c8ea <_strtod_l+0x522>
 800c8e0:	ed97 6b00 	vldr	d6, [r7]
 800c8e4:	2001      	movs	r0, #1
 800c8e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c8ea:	3101      	adds	r1, #1
 800c8ec:	1052      	asrs	r2, r2, #1
 800c8ee:	3708      	adds	r7, #8
 800c8f0:	e7cd      	b.n	800c88e <_strtod_l+0x4c6>
 800c8f2:	d0ef      	beq.n	800c8d4 <_strtod_l+0x50c>
 800c8f4:	4252      	negs	r2, r2
 800c8f6:	f012 000f 	ands.w	r0, r2, #15
 800c8fa:	d00a      	beq.n	800c912 <_strtod_l+0x54a>
 800c8fc:	4911      	ldr	r1, [pc, #68]	; (800c944 <_strtod_l+0x57c>)
 800c8fe:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800c902:	ed91 7b00 	vldr	d7, [r1]
 800c906:	ec49 8b16 	vmov	d6, r8, r9
 800c90a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c90e:	ec59 8b17 	vmov	r8, r9, d7
 800c912:	1112      	asrs	r2, r2, #4
 800c914:	d0de      	beq.n	800c8d4 <_strtod_l+0x50c>
 800c916:	2a1f      	cmp	r2, #31
 800c918:	dd1e      	ble.n	800c958 <_strtod_l+0x590>
 800c91a:	2500      	movs	r5, #0
 800c91c:	462e      	mov	r6, r5
 800c91e:	9507      	str	r5, [sp, #28]
 800c920:	462f      	mov	r7, r5
 800c922:	2322      	movs	r3, #34	; 0x22
 800c924:	f04f 0800 	mov.w	r8, #0
 800c928:	f04f 0900 	mov.w	r9, #0
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	e78f      	b.n	800c850 <_strtod_l+0x488>
 800c930:	0800e3e9 	.word	0x0800e3e9
 800c934:	0800e614 	.word	0x0800e614
 800c938:	0800e3e1 	.word	0x0800e3e1
 800c93c:	0800e418 	.word	0x0800e418
 800c940:	0800e7a5 	.word	0x0800e7a5
 800c944:	0800e528 	.word	0x0800e528
 800c948:	0800e500 	.word	0x0800e500
 800c94c:	7ca00000 	.word	0x7ca00000
 800c950:	7ff00000 	.word	0x7ff00000
 800c954:	7fefffff 	.word	0x7fefffff
 800c958:	f012 0110 	ands.w	r1, r2, #16
 800c95c:	bf18      	it	ne
 800c95e:	216a      	movne	r1, #106	; 0x6a
 800c960:	9105      	str	r1, [sp, #20]
 800c962:	ec49 8b17 	vmov	d7, r8, r9
 800c966:	49be      	ldr	r1, [pc, #760]	; (800cc60 <_strtod_l+0x898>)
 800c968:	2000      	movs	r0, #0
 800c96a:	07d7      	lsls	r7, r2, #31
 800c96c:	d504      	bpl.n	800c978 <_strtod_l+0x5b0>
 800c96e:	ed91 6b00 	vldr	d6, [r1]
 800c972:	2001      	movs	r0, #1
 800c974:	ee27 7b06 	vmul.f64	d7, d7, d6
 800c978:	1052      	asrs	r2, r2, #1
 800c97a:	f101 0108 	add.w	r1, r1, #8
 800c97e:	d1f4      	bne.n	800c96a <_strtod_l+0x5a2>
 800c980:	b108      	cbz	r0, 800c986 <_strtod_l+0x5be>
 800c982:	ec59 8b17 	vmov	r8, r9, d7
 800c986:	9a05      	ldr	r2, [sp, #20]
 800c988:	b1ba      	cbz	r2, 800c9ba <_strtod_l+0x5f2>
 800c98a:	f3c9 510a 	ubfx	r1, r9, #20, #11
 800c98e:	f1c1 026b 	rsb	r2, r1, #107	; 0x6b
 800c992:	2a00      	cmp	r2, #0
 800c994:	4648      	mov	r0, r9
 800c996:	dd10      	ble.n	800c9ba <_strtod_l+0x5f2>
 800c998:	2a1f      	cmp	r2, #31
 800c99a:	f340 812c 	ble.w	800cbf6 <_strtod_l+0x82e>
 800c99e:	2a34      	cmp	r2, #52	; 0x34
 800c9a0:	bfde      	ittt	le
 800c9a2:	f04f 32ff 	movle.w	r2, #4294967295
 800c9a6:	f1c1 014b 	rsble	r1, r1, #75	; 0x4b
 800c9aa:	408a      	lslle	r2, r1
 800c9ac:	f04f 0800 	mov.w	r8, #0
 800c9b0:	bfcc      	ite	gt
 800c9b2:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800c9b6:	ea02 0900 	andle.w	r9, r2, r0
 800c9ba:	ec49 8b17 	vmov	d7, r8, r9
 800c9be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9c6:	d0a8      	beq.n	800c91a <_strtod_l+0x552>
 800c9c8:	9a07      	ldr	r2, [sp, #28]
 800c9ca:	9200      	str	r2, [sp, #0]
 800c9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9ce:	4632      	mov	r2, r6
 800c9d0:	4620      	mov	r0, r4
 800c9d2:	f7ff f8dd 	bl	800bb90 <__s2b>
 800c9d6:	9007      	str	r0, [sp, #28]
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	f43f af2f 	beq.w	800c83c <_strtod_l+0x474>
 800c9de:	9a06      	ldr	r2, [sp, #24]
 800c9e0:	2a00      	cmp	r2, #0
 800c9e2:	ebab 0305 	sub.w	r3, fp, r5
 800c9e6:	ed9f 9b96 	vldr	d9, [pc, #600]	; 800cc40 <_strtod_l+0x878>
 800c9ea:	bfa8      	it	ge
 800c9ec:	2300      	movge	r3, #0
 800c9ee:	ed9f ab96 	vldr	d10, [pc, #600]	; 800cc48 <_strtod_l+0x880>
 800c9f2:	ed9f bb97 	vldr	d11, [pc, #604]	; 800cc50 <_strtod_l+0x888>
 800c9f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c9f8:	2500      	movs	r5, #0
 800c9fa:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800c9fe:	930c      	str	r3, [sp, #48]	; 0x30
 800ca00:	462e      	mov	r6, r5
 800ca02:	9b07      	ldr	r3, [sp, #28]
 800ca04:	4620      	mov	r0, r4
 800ca06:	6859      	ldr	r1, [r3, #4]
 800ca08:	f7ff f81a 	bl	800ba40 <_Balloc>
 800ca0c:	4607      	mov	r7, r0
 800ca0e:	2800      	cmp	r0, #0
 800ca10:	f43f af18 	beq.w	800c844 <_strtod_l+0x47c>
 800ca14:	9b07      	ldr	r3, [sp, #28]
 800ca16:	691a      	ldr	r2, [r3, #16]
 800ca18:	3202      	adds	r2, #2
 800ca1a:	f103 010c 	add.w	r1, r3, #12
 800ca1e:	0092      	lsls	r2, r2, #2
 800ca20:	300c      	adds	r0, #12
 800ca22:	f7fe f9b8 	bl	800ad96 <memcpy>
 800ca26:	ec49 8b10 	vmov	d0, r8, r9
 800ca2a:	aa14      	add	r2, sp, #80	; 0x50
 800ca2c:	a913      	add	r1, sp, #76	; 0x4c
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f7ff fbe2 	bl	800c1f8 <__d2b>
 800ca34:	ec49 8b18 	vmov	d8, r8, r9
 800ca38:	9012      	str	r0, [sp, #72]	; 0x48
 800ca3a:	2800      	cmp	r0, #0
 800ca3c:	f43f af02 	beq.w	800c844 <_strtod_l+0x47c>
 800ca40:	2101      	movs	r1, #1
 800ca42:	4620      	mov	r0, r4
 800ca44:	f7ff f93c 	bl	800bcc0 <__i2b>
 800ca48:	4606      	mov	r6, r0
 800ca4a:	2800      	cmp	r0, #0
 800ca4c:	f43f aefa 	beq.w	800c844 <_strtod_l+0x47c>
 800ca50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ca52:	9914      	ldr	r1, [sp, #80]	; 0x50
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	bfab      	itete	ge
 800ca58:	9a09      	ldrge	r2, [sp, #36]	; 0x24
 800ca5a:	9a0c      	ldrlt	r2, [sp, #48]	; 0x30
 800ca5c:	f8dd a030 	ldrge.w	sl, [sp, #48]	; 0x30
 800ca60:	f8dd b024 	ldrlt.w	fp, [sp, #36]	; 0x24
 800ca64:	bfac      	ite	ge
 800ca66:	eb03 0b02 	addge.w	fp, r3, r2
 800ca6a:	eba2 0a03 	sublt.w	sl, r2, r3
 800ca6e:	9a05      	ldr	r2, [sp, #20]
 800ca70:	1a9b      	subs	r3, r3, r2
 800ca72:	440b      	add	r3, r1
 800ca74:	4a7b      	ldr	r2, [pc, #492]	; (800cc64 <_strtod_l+0x89c>)
 800ca76:	3b01      	subs	r3, #1
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	f1c1 0136 	rsb	r1, r1, #54	; 0x36
 800ca7e:	f280 80cd 	bge.w	800cc1c <_strtod_l+0x854>
 800ca82:	1ad2      	subs	r2, r2, r3
 800ca84:	2a1f      	cmp	r2, #31
 800ca86:	eba1 0102 	sub.w	r1, r1, r2
 800ca8a:	f04f 0001 	mov.w	r0, #1
 800ca8e:	f300 80b9 	bgt.w	800cc04 <_strtod_l+0x83c>
 800ca92:	fa00 f302 	lsl.w	r3, r0, r2
 800ca96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca98:	2300      	movs	r3, #0
 800ca9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ca9c:	eb0b 0301 	add.w	r3, fp, r1
 800caa0:	9a05      	ldr	r2, [sp, #20]
 800caa2:	459b      	cmp	fp, r3
 800caa4:	448a      	add	sl, r1
 800caa6:	4492      	add	sl, r2
 800caa8:	465a      	mov	r2, fp
 800caaa:	bfa8      	it	ge
 800caac:	461a      	movge	r2, r3
 800caae:	4552      	cmp	r2, sl
 800cab0:	bfa8      	it	ge
 800cab2:	4652      	movge	r2, sl
 800cab4:	2a00      	cmp	r2, #0
 800cab6:	bfc2      	ittt	gt
 800cab8:	1a9b      	subgt	r3, r3, r2
 800caba:	ebaa 0a02 	subgt.w	sl, sl, r2
 800cabe:	ebab 0b02 	subgt.w	fp, fp, r2
 800cac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cac4:	2a00      	cmp	r2, #0
 800cac6:	dd18      	ble.n	800cafa <_strtod_l+0x732>
 800cac8:	4631      	mov	r1, r6
 800caca:	4620      	mov	r0, r4
 800cacc:	930f      	str	r3, [sp, #60]	; 0x3c
 800cace:	f7ff f9b7 	bl	800be40 <__pow5mult>
 800cad2:	4606      	mov	r6, r0
 800cad4:	2800      	cmp	r0, #0
 800cad6:	f43f aeb5 	beq.w	800c844 <_strtod_l+0x47c>
 800cada:	4601      	mov	r1, r0
 800cadc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cade:	4620      	mov	r0, r4
 800cae0:	f7ff f904 	bl	800bcec <__multiply>
 800cae4:	900e      	str	r0, [sp, #56]	; 0x38
 800cae6:	2800      	cmp	r0, #0
 800cae8:	f43f aeac 	beq.w	800c844 <_strtod_l+0x47c>
 800caec:	9912      	ldr	r1, [sp, #72]	; 0x48
 800caee:	4620      	mov	r0, r4
 800caf0:	f7fe ffe6 	bl	800bac0 <_Bfree>
 800caf4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800caf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800caf8:	9212      	str	r2, [sp, #72]	; 0x48
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	f300 8093 	bgt.w	800cc26 <_strtod_l+0x85e>
 800cb00:	9b06      	ldr	r3, [sp, #24]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dd08      	ble.n	800cb18 <_strtod_l+0x750>
 800cb06:	4639      	mov	r1, r7
 800cb08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb0a:	4620      	mov	r0, r4
 800cb0c:	f7ff f998 	bl	800be40 <__pow5mult>
 800cb10:	4607      	mov	r7, r0
 800cb12:	2800      	cmp	r0, #0
 800cb14:	f43f ae96 	beq.w	800c844 <_strtod_l+0x47c>
 800cb18:	f1ba 0f00 	cmp.w	sl, #0
 800cb1c:	dd08      	ble.n	800cb30 <_strtod_l+0x768>
 800cb1e:	4639      	mov	r1, r7
 800cb20:	4652      	mov	r2, sl
 800cb22:	4620      	mov	r0, r4
 800cb24:	f7ff f9e6 	bl	800bef4 <__lshift>
 800cb28:	4607      	mov	r7, r0
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	f43f ae8a 	beq.w	800c844 <_strtod_l+0x47c>
 800cb30:	f1bb 0f00 	cmp.w	fp, #0
 800cb34:	dd08      	ble.n	800cb48 <_strtod_l+0x780>
 800cb36:	4631      	mov	r1, r6
 800cb38:	465a      	mov	r2, fp
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f7ff f9da 	bl	800bef4 <__lshift>
 800cb40:	4606      	mov	r6, r0
 800cb42:	2800      	cmp	r0, #0
 800cb44:	f43f ae7e 	beq.w	800c844 <_strtod_l+0x47c>
 800cb48:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cb4a:	463a      	mov	r2, r7
 800cb4c:	4620      	mov	r0, r4
 800cb4e:	f7ff fa59 	bl	800c004 <__mdiff>
 800cb52:	4605      	mov	r5, r0
 800cb54:	2800      	cmp	r0, #0
 800cb56:	f43f ae75 	beq.w	800c844 <_strtod_l+0x47c>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	f8d0 a00c 	ldr.w	sl, [r0, #12]
 800cb60:	60c3      	str	r3, [r0, #12]
 800cb62:	4631      	mov	r1, r6
 800cb64:	f7ff fa32 	bl	800bfcc <__mcmp>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	da7f      	bge.n	800cc6c <_strtod_l+0x8a4>
 800cb6c:	ea5a 0a08 	orrs.w	sl, sl, r8
 800cb70:	f040 80a5 	bne.w	800ccbe <_strtod_l+0x8f6>
 800cb74:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	f040 80a0 	bne.w	800ccbe <_strtod_l+0x8f6>
 800cb7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cb82:	0d1b      	lsrs	r3, r3, #20
 800cb84:	051b      	lsls	r3, r3, #20
 800cb86:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cb8a:	f240 8098 	bls.w	800ccbe <_strtod_l+0x8f6>
 800cb8e:	696b      	ldr	r3, [r5, #20]
 800cb90:	b91b      	cbnz	r3, 800cb9a <_strtod_l+0x7d2>
 800cb92:	692b      	ldr	r3, [r5, #16]
 800cb94:	2b01      	cmp	r3, #1
 800cb96:	f340 8092 	ble.w	800ccbe <_strtod_l+0x8f6>
 800cb9a:	4629      	mov	r1, r5
 800cb9c:	2201      	movs	r2, #1
 800cb9e:	4620      	mov	r0, r4
 800cba0:	f7ff f9a8 	bl	800bef4 <__lshift>
 800cba4:	4631      	mov	r1, r6
 800cba6:	4605      	mov	r5, r0
 800cba8:	f7ff fa10 	bl	800bfcc <__mcmp>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	f340 8086 	ble.w	800ccbe <_strtod_l+0x8f6>
 800cbb2:	9905      	ldr	r1, [sp, #20]
 800cbb4:	4a2c      	ldr	r2, [pc, #176]	; (800cc68 <_strtod_l+0x8a0>)
 800cbb6:	464b      	mov	r3, r9
 800cbb8:	2900      	cmp	r1, #0
 800cbba:	f000 809f 	beq.w	800ccfc <_strtod_l+0x934>
 800cbbe:	ea02 0109 	and.w	r1, r2, r9
 800cbc2:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cbc6:	f300 8099 	bgt.w	800ccfc <_strtod_l+0x934>
 800cbca:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cbce:	f77f aea8 	ble.w	800c922 <_strtod_l+0x55a>
 800cbd2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800cc58 <_strtod_l+0x890>
 800cbd6:	ec49 8b16 	vmov	d6, r8, r9
 800cbda:	4b23      	ldr	r3, [pc, #140]	; (800cc68 <_strtod_l+0x8a0>)
 800cbdc:	ee26 7b07 	vmul.f64	d7, d6, d7
 800cbe0:	ee17 2a90 	vmov	r2, s15
 800cbe4:	4013      	ands	r3, r2
 800cbe6:	ec59 8b17 	vmov	r8, r9, d7
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f47f ae34 	bne.w	800c858 <_strtod_l+0x490>
 800cbf0:	2322      	movs	r3, #34	; 0x22
 800cbf2:	6023      	str	r3, [r4, #0]
 800cbf4:	e630      	b.n	800c858 <_strtod_l+0x490>
 800cbf6:	f04f 31ff 	mov.w	r1, #4294967295
 800cbfa:	fa01 f202 	lsl.w	r2, r1, r2
 800cbfe:	ea02 0808 	and.w	r8, r2, r8
 800cc02:	e6da      	b.n	800c9ba <_strtod_l+0x5f2>
 800cc04:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 800cc08:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 800cc0c:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 800cc10:	33e2      	adds	r3, #226	; 0xe2
 800cc12:	fa00 f303 	lsl.w	r3, r0, r3
 800cc16:	e9cd 300a 	strd	r3, r0, [sp, #40]	; 0x28
 800cc1a:	e73f      	b.n	800ca9c <_strtod_l+0x6d4>
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800cc24:	e73a      	b.n	800ca9c <_strtod_l+0x6d4>
 800cc26:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cc28:	461a      	mov	r2, r3
 800cc2a:	4620      	mov	r0, r4
 800cc2c:	f7ff f962 	bl	800bef4 <__lshift>
 800cc30:	9012      	str	r0, [sp, #72]	; 0x48
 800cc32:	2800      	cmp	r0, #0
 800cc34:	f47f af64 	bne.w	800cb00 <_strtod_l+0x738>
 800cc38:	e604      	b.n	800c844 <_strtod_l+0x47c>
 800cc3a:	bf00      	nop
 800cc3c:	f3af 8000 	nop.w
 800cc40:	94a03595 	.word	0x94a03595
 800cc44:	3fcfffff 	.word	0x3fcfffff
 800cc48:	94a03595 	.word	0x94a03595
 800cc4c:	3fdfffff 	.word	0x3fdfffff
 800cc50:	35afe535 	.word	0x35afe535
 800cc54:	3fe00000 	.word	0x3fe00000
 800cc58:	00000000 	.word	0x00000000
 800cc5c:	39500000 	.word	0x39500000
 800cc60:	0800e628 	.word	0x0800e628
 800cc64:	fffffc02 	.word	0xfffffc02
 800cc68:	7ff00000 	.word	0x7ff00000
 800cc6c:	46cb      	mov	fp, r9
 800cc6e:	d15f      	bne.n	800cd30 <_strtod_l+0x968>
 800cc70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cc74:	f1ba 0f00 	cmp.w	sl, #0
 800cc78:	d02a      	beq.n	800ccd0 <_strtod_l+0x908>
 800cc7a:	4aa7      	ldr	r2, [pc, #668]	; (800cf18 <_strtod_l+0xb50>)
 800cc7c:	4293      	cmp	r3, r2
 800cc7e:	d12b      	bne.n	800ccd8 <_strtod_l+0x910>
 800cc80:	9b05      	ldr	r3, [sp, #20]
 800cc82:	4642      	mov	r2, r8
 800cc84:	b1fb      	cbz	r3, 800ccc6 <_strtod_l+0x8fe>
 800cc86:	4ba5      	ldr	r3, [pc, #660]	; (800cf1c <_strtod_l+0xb54>)
 800cc88:	ea09 0303 	and.w	r3, r9, r3
 800cc8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cc90:	f04f 31ff 	mov.w	r1, #4294967295
 800cc94:	d81a      	bhi.n	800cccc <_strtod_l+0x904>
 800cc96:	0d1b      	lsrs	r3, r3, #20
 800cc98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d119      	bne.n	800ccd8 <_strtod_l+0x910>
 800cca4:	4b9e      	ldr	r3, [pc, #632]	; (800cf20 <_strtod_l+0xb58>)
 800cca6:	459b      	cmp	fp, r3
 800cca8:	d102      	bne.n	800ccb0 <_strtod_l+0x8e8>
 800ccaa:	3201      	adds	r2, #1
 800ccac:	f43f adca 	beq.w	800c844 <_strtod_l+0x47c>
 800ccb0:	4b9a      	ldr	r3, [pc, #616]	; (800cf1c <_strtod_l+0xb54>)
 800ccb2:	ea0b 0303 	and.w	r3, fp, r3
 800ccb6:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800ccba:	f04f 0800 	mov.w	r8, #0
 800ccbe:	9b05      	ldr	r3, [sp, #20]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d186      	bne.n	800cbd2 <_strtod_l+0x80a>
 800ccc4:	e5c8      	b.n	800c858 <_strtod_l+0x490>
 800ccc6:	f04f 33ff 	mov.w	r3, #4294967295
 800ccca:	e7e9      	b.n	800cca0 <_strtod_l+0x8d8>
 800cccc:	460b      	mov	r3, r1
 800ccce:	e7e7      	b.n	800cca0 <_strtod_l+0x8d8>
 800ccd0:	ea53 0308 	orrs.w	r3, r3, r8
 800ccd4:	f43f af6d 	beq.w	800cbb2 <_strtod_l+0x7ea>
 800ccd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccda:	b1cb      	cbz	r3, 800cd10 <_strtod_l+0x948>
 800ccdc:	ea13 0f0b 	tst.w	r3, fp
 800cce0:	d0ed      	beq.n	800ccbe <_strtod_l+0x8f6>
 800cce2:	9a05      	ldr	r2, [sp, #20]
 800cce4:	4640      	mov	r0, r8
 800cce6:	4649      	mov	r1, r9
 800cce8:	f1ba 0f00 	cmp.w	sl, #0
 800ccec:	d014      	beq.n	800cd18 <_strtod_l+0x950>
 800ccee:	f7ff fb51 	bl	800c394 <sulp>
 800ccf2:	ee38 7b00 	vadd.f64	d7, d8, d0
 800ccf6:	ec59 8b17 	vmov	r8, r9, d7
 800ccfa:	e7e0      	b.n	800ccbe <_strtod_l+0x8f6>
 800ccfc:	4013      	ands	r3, r2
 800ccfe:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800cd02:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800cd06:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800cd0a:	f04f 38ff 	mov.w	r8, #4294967295
 800cd0e:	e7d6      	b.n	800ccbe <_strtod_l+0x8f6>
 800cd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd12:	ea13 0f08 	tst.w	r3, r8
 800cd16:	e7e3      	b.n	800cce0 <_strtod_l+0x918>
 800cd18:	f7ff fb3c 	bl	800c394 <sulp>
 800cd1c:	ee38 0b40 	vsub.f64	d0, d8, d0
 800cd20:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800cd24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd28:	ec59 8b10 	vmov	r8, r9, d0
 800cd2c:	d1c7      	bne.n	800ccbe <_strtod_l+0x8f6>
 800cd2e:	e5f8      	b.n	800c922 <_strtod_l+0x55a>
 800cd30:	4631      	mov	r1, r6
 800cd32:	4628      	mov	r0, r5
 800cd34:	f7ff faba 	bl	800c2ac <__ratio>
 800cd38:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800cd3c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800cd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd44:	d85f      	bhi.n	800ce06 <_strtod_l+0xa3e>
 800cd46:	f1ba 0f00 	cmp.w	sl, #0
 800cd4a:	d166      	bne.n	800ce1a <_strtod_l+0xa52>
 800cd4c:	f1b8 0f00 	cmp.w	r8, #0
 800cd50:	d14d      	bne.n	800cdee <_strtod_l+0xa26>
 800cd52:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cd56:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d162      	bne.n	800ce24 <_strtod_l+0xa5c>
 800cd5e:	eeb4 0bcd 	vcmpe.f64	d0, d13
 800cd62:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800cd66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd6a:	d401      	bmi.n	800cd70 <_strtod_l+0x9a8>
 800cd6c:	ee20 db0d 	vmul.f64	d13, d0, d13
 800cd70:	eeb1 cb4d 	vneg.f64	d12, d13
 800cd74:	4869      	ldr	r0, [pc, #420]	; (800cf1c <_strtod_l+0xb54>)
 800cd76:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 800cf28 <_strtod_l+0xb60>
 800cd7a:	ea0b 0100 	and.w	r1, fp, r0
 800cd7e:	4561      	cmp	r1, ip
 800cd80:	ec53 2b1c 	vmov	r2, r3, d12
 800cd84:	d17a      	bne.n	800ce7c <_strtod_l+0xab4>
 800cd86:	f1ab 7954 	sub.w	r9, fp, #55574528	; 0x3500000
 800cd8a:	ec49 8b10 	vmov	d0, r8, r9
 800cd8e:	910a      	str	r1, [sp, #40]	; 0x28
 800cd90:	f7ff f9c2 	bl	800c118 <__ulp>
 800cd94:	ec49 8b1e 	vmov	d14, r8, r9
 800cd98:	4860      	ldr	r0, [pc, #384]	; (800cf1c <_strtod_l+0xb54>)
 800cd9a:	eea0 eb0c 	vfma.f64	d14, d0, d12
 800cd9e:	ee1e 3a90 	vmov	r3, s29
 800cda2:	4a60      	ldr	r2, [pc, #384]	; (800cf24 <_strtod_l+0xb5c>)
 800cda4:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cda6:	4018      	ands	r0, r3
 800cda8:	4290      	cmp	r0, r2
 800cdaa:	ec59 8b1e 	vmov	r8, r9, d14
 800cdae:	d93c      	bls.n	800ce2a <_strtod_l+0xa62>
 800cdb0:	ee18 2a90 	vmov	r2, s17
 800cdb4:	4b5a      	ldr	r3, [pc, #360]	; (800cf20 <_strtod_l+0xb58>)
 800cdb6:	429a      	cmp	r2, r3
 800cdb8:	d104      	bne.n	800cdc4 <_strtod_l+0x9fc>
 800cdba:	ee18 3a10 	vmov	r3, s16
 800cdbe:	3301      	adds	r3, #1
 800cdc0:	f43f ad40 	beq.w	800c844 <_strtod_l+0x47c>
 800cdc4:	f8df 9158 	ldr.w	r9, [pc, #344]	; 800cf20 <_strtod_l+0xb58>
 800cdc8:	f04f 38ff 	mov.w	r8, #4294967295
 800cdcc:	9912      	ldr	r1, [sp, #72]	; 0x48
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f7fe fe76 	bl	800bac0 <_Bfree>
 800cdd4:	4639      	mov	r1, r7
 800cdd6:	4620      	mov	r0, r4
 800cdd8:	f7fe fe72 	bl	800bac0 <_Bfree>
 800cddc:	4631      	mov	r1, r6
 800cdde:	4620      	mov	r0, r4
 800cde0:	f7fe fe6e 	bl	800bac0 <_Bfree>
 800cde4:	4629      	mov	r1, r5
 800cde6:	4620      	mov	r0, r4
 800cde8:	f7fe fe6a 	bl	800bac0 <_Bfree>
 800cdec:	e609      	b.n	800ca02 <_strtod_l+0x63a>
 800cdee:	f1b8 0f01 	cmp.w	r8, #1
 800cdf2:	d103      	bne.n	800cdfc <_strtod_l+0xa34>
 800cdf4:	f1b9 0f00 	cmp.w	r9, #0
 800cdf8:	f43f ad93 	beq.w	800c922 <_strtod_l+0x55a>
 800cdfc:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800ce00:	eeb7 db00 	vmov.f64	d13, #112	; 0x3f800000  1.0
 800ce04:	e7b6      	b.n	800cd74 <_strtod_l+0x9ac>
 800ce06:	eeb6 db00 	vmov.f64	d13, #96	; 0x3f000000  0.5
 800ce0a:	ee20 db0d 	vmul.f64	d13, d0, d13
 800ce0e:	f1ba 0f00 	cmp.w	sl, #0
 800ce12:	d0ad      	beq.n	800cd70 <_strtod_l+0x9a8>
 800ce14:	eeb0 cb4d 	vmov.f64	d12, d13
 800ce18:	e7ac      	b.n	800cd74 <_strtod_l+0x9ac>
 800ce1a:	eeb7 cb00 	vmov.f64	d12, #112	; 0x3f800000  1.0
 800ce1e:	eeb0 db4c 	vmov.f64	d13, d12
 800ce22:	e7a7      	b.n	800cd74 <_strtod_l+0x9ac>
 800ce24:	eebf cb00 	vmov.f64	d12, #240	; 0xbf800000 -1.0
 800ce28:	e7a4      	b.n	800cd74 <_strtod_l+0x9ac>
 800ce2a:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ce2e:	9b05      	ldr	r3, [sp, #20]
 800ce30:	46cb      	mov	fp, r9
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d1ca      	bne.n	800cdcc <_strtod_l+0xa04>
 800ce36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ce3a:	0d1b      	lsrs	r3, r3, #20
 800ce3c:	051b      	lsls	r3, r3, #20
 800ce3e:	4299      	cmp	r1, r3
 800ce40:	d1c4      	bne.n	800cdcc <_strtod_l+0xa04>
 800ce42:	ec51 0b1d 	vmov	r0, r1, d13
 800ce46:	f7f3 fc27 	bl	8000698 <__aeabi_d2lz>
 800ce4a:	f7f3 fbdf 	bl	800060c <__aeabi_l2d>
 800ce4e:	f3c9 0b13 	ubfx	fp, r9, #0, #20
 800ce52:	ec41 0b17 	vmov	d7, r0, r1
 800ce56:	ea4b 0b08 	orr.w	fp, fp, r8
 800ce5a:	ea5b 0b0a 	orrs.w	fp, fp, sl
 800ce5e:	ee3d db47 	vsub.f64	d13, d13, d7
 800ce62:	d03c      	beq.n	800cede <_strtod_l+0xb16>
 800ce64:	eeb4 dbca 	vcmpe.f64	d13, d10
 800ce68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce6c:	f53f acf4 	bmi.w	800c858 <_strtod_l+0x490>
 800ce70:	eeb4 dbcb 	vcmpe.f64	d13, d11
 800ce74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce78:	dda8      	ble.n	800cdcc <_strtod_l+0xa04>
 800ce7a:	e4ed      	b.n	800c858 <_strtod_l+0x490>
 800ce7c:	9805      	ldr	r0, [sp, #20]
 800ce7e:	b1f0      	cbz	r0, 800cebe <_strtod_l+0xaf6>
 800ce80:	f1b1 6fd4 	cmp.w	r1, #111149056	; 0x6a00000
 800ce84:	d81b      	bhi.n	800cebe <_strtod_l+0xaf6>
 800ce86:	ed9f 7b22 	vldr	d7, [pc, #136]	; 800cf10 <_strtod_l+0xb48>
 800ce8a:	eeb4 dbc7 	vcmpe.f64	d13, d7
 800ce8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce92:	d811      	bhi.n	800ceb8 <_strtod_l+0xaf0>
 800ce94:	eebc dbcd 	vcvt.u32.f64	s26, d13
 800ce98:	ee1d 3a10 	vmov	r3, s26
 800ce9c:	2b01      	cmp	r3, #1
 800ce9e:	bf38      	it	cc
 800cea0:	2301      	movcc	r3, #1
 800cea2:	ee0d 3a10 	vmov	s26, r3
 800cea6:	eeb8 db4d 	vcvt.f64.u32	d13, s26
 800ceaa:	f1ba 0f00 	cmp.w	sl, #0
 800ceae:	d113      	bne.n	800ced8 <_strtod_l+0xb10>
 800ceb0:	eeb1 7b4d 	vneg.f64	d7, d13
 800ceb4:	ec53 2b17 	vmov	r2, r3, d7
 800ceb8:	f103 60d6 	add.w	r0, r3, #112197632	; 0x6b00000
 800cebc:	1a43      	subs	r3, r0, r1
 800cebe:	eeb0 0b48 	vmov.f64	d0, d8
 800cec2:	ec43 2b1c 	vmov	d12, r2, r3
 800cec6:	910a      	str	r1, [sp, #40]	; 0x28
 800cec8:	f7ff f926 	bl	800c118 <__ulp>
 800cecc:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cece:	eeac 8b00 	vfma.f64	d8, d12, d0
 800ced2:	ec59 8b18 	vmov	r8, r9, d8
 800ced6:	e7aa      	b.n	800ce2e <_strtod_l+0xa66>
 800ced8:	eeb0 7b4d 	vmov.f64	d7, d13
 800cedc:	e7ea      	b.n	800ceb4 <_strtod_l+0xaec>
 800cede:	eeb4 dbc9 	vcmpe.f64	d13, d9
 800cee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cee6:	f57f af71 	bpl.w	800cdcc <_strtod_l+0xa04>
 800ceea:	e4b5      	b.n	800c858 <_strtod_l+0x490>
 800ceec:	2300      	movs	r3, #0
 800ceee:	9308      	str	r3, [sp, #32]
 800cef0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cef2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cef4:	6013      	str	r3, [r2, #0]
 800cef6:	f7ff baa6 	b.w	800c446 <_strtod_l+0x7e>
 800cefa:	2a65      	cmp	r2, #101	; 0x65
 800cefc:	f43f aba2 	beq.w	800c644 <_strtod_l+0x27c>
 800cf00:	2a45      	cmp	r2, #69	; 0x45
 800cf02:	f43f ab9f 	beq.w	800c644 <_strtod_l+0x27c>
 800cf06:	2101      	movs	r1, #1
 800cf08:	f7ff bbd8 	b.w	800c6bc <_strtod_l+0x2f4>
 800cf0c:	f3af 8000 	nop.w
 800cf10:	ffc00000 	.word	0xffc00000
 800cf14:	41dfffff 	.word	0x41dfffff
 800cf18:	000fffff 	.word	0x000fffff
 800cf1c:	7ff00000 	.word	0x7ff00000
 800cf20:	7fefffff 	.word	0x7fefffff
 800cf24:	7c9fffff 	.word	0x7c9fffff
 800cf28:	7fe00000 	.word	0x7fe00000

0800cf2c <_strtod_r>:
 800cf2c:	4b01      	ldr	r3, [pc, #4]	; (800cf34 <_strtod_r+0x8>)
 800cf2e:	f7ff ba4b 	b.w	800c3c8 <_strtod_l>
 800cf32:	bf00      	nop
 800cf34:	20000108 	.word	0x20000108

0800cf38 <_strtol_l.constprop.0>:
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf3e:	d001      	beq.n	800cf44 <_strtol_l.constprop.0+0xc>
 800cf40:	2b24      	cmp	r3, #36	; 0x24
 800cf42:	d906      	bls.n	800cf52 <_strtol_l.constprop.0+0x1a>
 800cf44:	f7fd fefa 	bl	800ad3c <__errno>
 800cf48:	2316      	movs	r3, #22
 800cf4a:	6003      	str	r3, [r0, #0]
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf52:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d038 <_strtol_l.constprop.0+0x100>
 800cf56:	460d      	mov	r5, r1
 800cf58:	462e      	mov	r6, r5
 800cf5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf5e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cf62:	f017 0708 	ands.w	r7, r7, #8
 800cf66:	d1f7      	bne.n	800cf58 <_strtol_l.constprop.0+0x20>
 800cf68:	2c2d      	cmp	r4, #45	; 0x2d
 800cf6a:	d132      	bne.n	800cfd2 <_strtol_l.constprop.0+0x9a>
 800cf6c:	782c      	ldrb	r4, [r5, #0]
 800cf6e:	2701      	movs	r7, #1
 800cf70:	1cb5      	adds	r5, r6, #2
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d05b      	beq.n	800d02e <_strtol_l.constprop.0+0xf6>
 800cf76:	2b10      	cmp	r3, #16
 800cf78:	d109      	bne.n	800cf8e <_strtol_l.constprop.0+0x56>
 800cf7a:	2c30      	cmp	r4, #48	; 0x30
 800cf7c:	d107      	bne.n	800cf8e <_strtol_l.constprop.0+0x56>
 800cf7e:	782c      	ldrb	r4, [r5, #0]
 800cf80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cf84:	2c58      	cmp	r4, #88	; 0x58
 800cf86:	d14d      	bne.n	800d024 <_strtol_l.constprop.0+0xec>
 800cf88:	786c      	ldrb	r4, [r5, #1]
 800cf8a:	2310      	movs	r3, #16
 800cf8c:	3502      	adds	r5, #2
 800cf8e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cf92:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf96:	f04f 0e00 	mov.w	lr, #0
 800cf9a:	fbb8 f9f3 	udiv	r9, r8, r3
 800cf9e:	4676      	mov	r6, lr
 800cfa0:	fb03 8a19 	mls	sl, r3, r9, r8
 800cfa4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cfa8:	f1bc 0f09 	cmp.w	ip, #9
 800cfac:	d816      	bhi.n	800cfdc <_strtol_l.constprop.0+0xa4>
 800cfae:	4664      	mov	r4, ip
 800cfb0:	42a3      	cmp	r3, r4
 800cfb2:	dd24      	ble.n	800cffe <_strtol_l.constprop.0+0xc6>
 800cfb4:	f1be 3fff 	cmp.w	lr, #4294967295
 800cfb8:	d008      	beq.n	800cfcc <_strtol_l.constprop.0+0x94>
 800cfba:	45b1      	cmp	r9, r6
 800cfbc:	d31c      	bcc.n	800cff8 <_strtol_l.constprop.0+0xc0>
 800cfbe:	d101      	bne.n	800cfc4 <_strtol_l.constprop.0+0x8c>
 800cfc0:	45a2      	cmp	sl, r4
 800cfc2:	db19      	blt.n	800cff8 <_strtol_l.constprop.0+0xc0>
 800cfc4:	fb06 4603 	mla	r6, r6, r3, r4
 800cfc8:	f04f 0e01 	mov.w	lr, #1
 800cfcc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cfd0:	e7e8      	b.n	800cfa4 <_strtol_l.constprop.0+0x6c>
 800cfd2:	2c2b      	cmp	r4, #43	; 0x2b
 800cfd4:	bf04      	itt	eq
 800cfd6:	782c      	ldrbeq	r4, [r5, #0]
 800cfd8:	1cb5      	addeq	r5, r6, #2
 800cfda:	e7ca      	b.n	800cf72 <_strtol_l.constprop.0+0x3a>
 800cfdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800cfe0:	f1bc 0f19 	cmp.w	ip, #25
 800cfe4:	d801      	bhi.n	800cfea <_strtol_l.constprop.0+0xb2>
 800cfe6:	3c37      	subs	r4, #55	; 0x37
 800cfe8:	e7e2      	b.n	800cfb0 <_strtol_l.constprop.0+0x78>
 800cfea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800cfee:	f1bc 0f19 	cmp.w	ip, #25
 800cff2:	d804      	bhi.n	800cffe <_strtol_l.constprop.0+0xc6>
 800cff4:	3c57      	subs	r4, #87	; 0x57
 800cff6:	e7db      	b.n	800cfb0 <_strtol_l.constprop.0+0x78>
 800cff8:	f04f 3eff 	mov.w	lr, #4294967295
 800cffc:	e7e6      	b.n	800cfcc <_strtol_l.constprop.0+0x94>
 800cffe:	f1be 3fff 	cmp.w	lr, #4294967295
 800d002:	d105      	bne.n	800d010 <_strtol_l.constprop.0+0xd8>
 800d004:	2322      	movs	r3, #34	; 0x22
 800d006:	6003      	str	r3, [r0, #0]
 800d008:	4646      	mov	r6, r8
 800d00a:	b942      	cbnz	r2, 800d01e <_strtol_l.constprop.0+0xe6>
 800d00c:	4630      	mov	r0, r6
 800d00e:	e79e      	b.n	800cf4e <_strtol_l.constprop.0+0x16>
 800d010:	b107      	cbz	r7, 800d014 <_strtol_l.constprop.0+0xdc>
 800d012:	4276      	negs	r6, r6
 800d014:	2a00      	cmp	r2, #0
 800d016:	d0f9      	beq.n	800d00c <_strtol_l.constprop.0+0xd4>
 800d018:	f1be 0f00 	cmp.w	lr, #0
 800d01c:	d000      	beq.n	800d020 <_strtol_l.constprop.0+0xe8>
 800d01e:	1e69      	subs	r1, r5, #1
 800d020:	6011      	str	r1, [r2, #0]
 800d022:	e7f3      	b.n	800d00c <_strtol_l.constprop.0+0xd4>
 800d024:	2430      	movs	r4, #48	; 0x30
 800d026:	2b00      	cmp	r3, #0
 800d028:	d1b1      	bne.n	800cf8e <_strtol_l.constprop.0+0x56>
 800d02a:	2308      	movs	r3, #8
 800d02c:	e7af      	b.n	800cf8e <_strtol_l.constprop.0+0x56>
 800d02e:	2c30      	cmp	r4, #48	; 0x30
 800d030:	d0a5      	beq.n	800cf7e <_strtol_l.constprop.0+0x46>
 800d032:	230a      	movs	r3, #10
 800d034:	e7ab      	b.n	800cf8e <_strtol_l.constprop.0+0x56>
 800d036:	bf00      	nop
 800d038:	0800e651 	.word	0x0800e651

0800d03c <_strtol_r>:
 800d03c:	f7ff bf7c 	b.w	800cf38 <_strtol_l.constprop.0>

0800d040 <__ssputs_r>:
 800d040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d044:	688e      	ldr	r6, [r1, #8]
 800d046:	461f      	mov	r7, r3
 800d048:	42be      	cmp	r6, r7
 800d04a:	680b      	ldr	r3, [r1, #0]
 800d04c:	4682      	mov	sl, r0
 800d04e:	460c      	mov	r4, r1
 800d050:	4690      	mov	r8, r2
 800d052:	d82c      	bhi.n	800d0ae <__ssputs_r+0x6e>
 800d054:	898a      	ldrh	r2, [r1, #12]
 800d056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d05a:	d026      	beq.n	800d0aa <__ssputs_r+0x6a>
 800d05c:	6965      	ldr	r5, [r4, #20]
 800d05e:	6909      	ldr	r1, [r1, #16]
 800d060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d064:	eba3 0901 	sub.w	r9, r3, r1
 800d068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d06c:	1c7b      	adds	r3, r7, #1
 800d06e:	444b      	add	r3, r9
 800d070:	106d      	asrs	r5, r5, #1
 800d072:	429d      	cmp	r5, r3
 800d074:	bf38      	it	cc
 800d076:	461d      	movcc	r5, r3
 800d078:	0553      	lsls	r3, r2, #21
 800d07a:	d527      	bpl.n	800d0cc <__ssputs_r+0x8c>
 800d07c:	4629      	mov	r1, r5
 800d07e:	f7fc fe0b 	bl	8009c98 <_malloc_r>
 800d082:	4606      	mov	r6, r0
 800d084:	b360      	cbz	r0, 800d0e0 <__ssputs_r+0xa0>
 800d086:	6921      	ldr	r1, [r4, #16]
 800d088:	464a      	mov	r2, r9
 800d08a:	f7fd fe84 	bl	800ad96 <memcpy>
 800d08e:	89a3      	ldrh	r3, [r4, #12]
 800d090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	6126      	str	r6, [r4, #16]
 800d09c:	6165      	str	r5, [r4, #20]
 800d09e:	444e      	add	r6, r9
 800d0a0:	eba5 0509 	sub.w	r5, r5, r9
 800d0a4:	6026      	str	r6, [r4, #0]
 800d0a6:	60a5      	str	r5, [r4, #8]
 800d0a8:	463e      	mov	r6, r7
 800d0aa:	42be      	cmp	r6, r7
 800d0ac:	d900      	bls.n	800d0b0 <__ssputs_r+0x70>
 800d0ae:	463e      	mov	r6, r7
 800d0b0:	6820      	ldr	r0, [r4, #0]
 800d0b2:	4632      	mov	r2, r6
 800d0b4:	4641      	mov	r1, r8
 800d0b6:	f000 f9c9 	bl	800d44c <memmove>
 800d0ba:	68a3      	ldr	r3, [r4, #8]
 800d0bc:	1b9b      	subs	r3, r3, r6
 800d0be:	60a3      	str	r3, [r4, #8]
 800d0c0:	6823      	ldr	r3, [r4, #0]
 800d0c2:	4433      	add	r3, r6
 800d0c4:	6023      	str	r3, [r4, #0]
 800d0c6:	2000      	movs	r0, #0
 800d0c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0cc:	462a      	mov	r2, r5
 800d0ce:	f000 fd90 	bl	800dbf2 <_realloc_r>
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	2800      	cmp	r0, #0
 800d0d6:	d1e0      	bne.n	800d09a <__ssputs_r+0x5a>
 800d0d8:	6921      	ldr	r1, [r4, #16]
 800d0da:	4650      	mov	r0, sl
 800d0dc:	f7fe fc64 	bl	800b9a8 <_free_r>
 800d0e0:	230c      	movs	r3, #12
 800d0e2:	f8ca 3000 	str.w	r3, [sl]
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ec:	81a3      	strh	r3, [r4, #12]
 800d0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800d0f2:	e7e9      	b.n	800d0c8 <__ssputs_r+0x88>

0800d0f4 <_svfiprintf_r>:
 800d0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f8:	4698      	mov	r8, r3
 800d0fa:	898b      	ldrh	r3, [r1, #12]
 800d0fc:	061b      	lsls	r3, r3, #24
 800d0fe:	b09d      	sub	sp, #116	; 0x74
 800d100:	4607      	mov	r7, r0
 800d102:	460d      	mov	r5, r1
 800d104:	4614      	mov	r4, r2
 800d106:	d50e      	bpl.n	800d126 <_svfiprintf_r+0x32>
 800d108:	690b      	ldr	r3, [r1, #16]
 800d10a:	b963      	cbnz	r3, 800d126 <_svfiprintf_r+0x32>
 800d10c:	2140      	movs	r1, #64	; 0x40
 800d10e:	f7fc fdc3 	bl	8009c98 <_malloc_r>
 800d112:	6028      	str	r0, [r5, #0]
 800d114:	6128      	str	r0, [r5, #16]
 800d116:	b920      	cbnz	r0, 800d122 <_svfiprintf_r+0x2e>
 800d118:	230c      	movs	r3, #12
 800d11a:	603b      	str	r3, [r7, #0]
 800d11c:	f04f 30ff 	mov.w	r0, #4294967295
 800d120:	e0d0      	b.n	800d2c4 <_svfiprintf_r+0x1d0>
 800d122:	2340      	movs	r3, #64	; 0x40
 800d124:	616b      	str	r3, [r5, #20]
 800d126:	2300      	movs	r3, #0
 800d128:	9309      	str	r3, [sp, #36]	; 0x24
 800d12a:	2320      	movs	r3, #32
 800d12c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d130:	f8cd 800c 	str.w	r8, [sp, #12]
 800d134:	2330      	movs	r3, #48	; 0x30
 800d136:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d2dc <_svfiprintf_r+0x1e8>
 800d13a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d13e:	f04f 0901 	mov.w	r9, #1
 800d142:	4623      	mov	r3, r4
 800d144:	469a      	mov	sl, r3
 800d146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d14a:	b10a      	cbz	r2, 800d150 <_svfiprintf_r+0x5c>
 800d14c:	2a25      	cmp	r2, #37	; 0x25
 800d14e:	d1f9      	bne.n	800d144 <_svfiprintf_r+0x50>
 800d150:	ebba 0b04 	subs.w	fp, sl, r4
 800d154:	d00b      	beq.n	800d16e <_svfiprintf_r+0x7a>
 800d156:	465b      	mov	r3, fp
 800d158:	4622      	mov	r2, r4
 800d15a:	4629      	mov	r1, r5
 800d15c:	4638      	mov	r0, r7
 800d15e:	f7ff ff6f 	bl	800d040 <__ssputs_r>
 800d162:	3001      	adds	r0, #1
 800d164:	f000 80a9 	beq.w	800d2ba <_svfiprintf_r+0x1c6>
 800d168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d16a:	445a      	add	r2, fp
 800d16c:	9209      	str	r2, [sp, #36]	; 0x24
 800d16e:	f89a 3000 	ldrb.w	r3, [sl]
 800d172:	2b00      	cmp	r3, #0
 800d174:	f000 80a1 	beq.w	800d2ba <_svfiprintf_r+0x1c6>
 800d178:	2300      	movs	r3, #0
 800d17a:	f04f 32ff 	mov.w	r2, #4294967295
 800d17e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d182:	f10a 0a01 	add.w	sl, sl, #1
 800d186:	9304      	str	r3, [sp, #16]
 800d188:	9307      	str	r3, [sp, #28]
 800d18a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d18e:	931a      	str	r3, [sp, #104]	; 0x68
 800d190:	4654      	mov	r4, sl
 800d192:	2205      	movs	r2, #5
 800d194:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d198:	4850      	ldr	r0, [pc, #320]	; (800d2dc <_svfiprintf_r+0x1e8>)
 800d19a:	f7f3 f851 	bl	8000240 <memchr>
 800d19e:	9a04      	ldr	r2, [sp, #16]
 800d1a0:	b9d8      	cbnz	r0, 800d1da <_svfiprintf_r+0xe6>
 800d1a2:	06d0      	lsls	r0, r2, #27
 800d1a4:	bf44      	itt	mi
 800d1a6:	2320      	movmi	r3, #32
 800d1a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ac:	0711      	lsls	r1, r2, #28
 800d1ae:	bf44      	itt	mi
 800d1b0:	232b      	movmi	r3, #43	; 0x2b
 800d1b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1b6:	f89a 3000 	ldrb.w	r3, [sl]
 800d1ba:	2b2a      	cmp	r3, #42	; 0x2a
 800d1bc:	d015      	beq.n	800d1ea <_svfiprintf_r+0xf6>
 800d1be:	9a07      	ldr	r2, [sp, #28]
 800d1c0:	4654      	mov	r4, sl
 800d1c2:	2000      	movs	r0, #0
 800d1c4:	f04f 0c0a 	mov.w	ip, #10
 800d1c8:	4621      	mov	r1, r4
 800d1ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1ce:	3b30      	subs	r3, #48	; 0x30
 800d1d0:	2b09      	cmp	r3, #9
 800d1d2:	d94d      	bls.n	800d270 <_svfiprintf_r+0x17c>
 800d1d4:	b1b0      	cbz	r0, 800d204 <_svfiprintf_r+0x110>
 800d1d6:	9207      	str	r2, [sp, #28]
 800d1d8:	e014      	b.n	800d204 <_svfiprintf_r+0x110>
 800d1da:	eba0 0308 	sub.w	r3, r0, r8
 800d1de:	fa09 f303 	lsl.w	r3, r9, r3
 800d1e2:	4313      	orrs	r3, r2
 800d1e4:	9304      	str	r3, [sp, #16]
 800d1e6:	46a2      	mov	sl, r4
 800d1e8:	e7d2      	b.n	800d190 <_svfiprintf_r+0x9c>
 800d1ea:	9b03      	ldr	r3, [sp, #12]
 800d1ec:	1d19      	adds	r1, r3, #4
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	9103      	str	r1, [sp, #12]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	bfbb      	ittet	lt
 800d1f6:	425b      	neglt	r3, r3
 800d1f8:	f042 0202 	orrlt.w	r2, r2, #2
 800d1fc:	9307      	strge	r3, [sp, #28]
 800d1fe:	9307      	strlt	r3, [sp, #28]
 800d200:	bfb8      	it	lt
 800d202:	9204      	strlt	r2, [sp, #16]
 800d204:	7823      	ldrb	r3, [r4, #0]
 800d206:	2b2e      	cmp	r3, #46	; 0x2e
 800d208:	d10c      	bne.n	800d224 <_svfiprintf_r+0x130>
 800d20a:	7863      	ldrb	r3, [r4, #1]
 800d20c:	2b2a      	cmp	r3, #42	; 0x2a
 800d20e:	d134      	bne.n	800d27a <_svfiprintf_r+0x186>
 800d210:	9b03      	ldr	r3, [sp, #12]
 800d212:	1d1a      	adds	r2, r3, #4
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	9203      	str	r2, [sp, #12]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	bfb8      	it	lt
 800d21c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d220:	3402      	adds	r4, #2
 800d222:	9305      	str	r3, [sp, #20]
 800d224:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d2ec <_svfiprintf_r+0x1f8>
 800d228:	7821      	ldrb	r1, [r4, #0]
 800d22a:	2203      	movs	r2, #3
 800d22c:	4650      	mov	r0, sl
 800d22e:	f7f3 f807 	bl	8000240 <memchr>
 800d232:	b138      	cbz	r0, 800d244 <_svfiprintf_r+0x150>
 800d234:	9b04      	ldr	r3, [sp, #16]
 800d236:	eba0 000a 	sub.w	r0, r0, sl
 800d23a:	2240      	movs	r2, #64	; 0x40
 800d23c:	4082      	lsls	r2, r0
 800d23e:	4313      	orrs	r3, r2
 800d240:	3401      	adds	r4, #1
 800d242:	9304      	str	r3, [sp, #16]
 800d244:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d248:	4825      	ldr	r0, [pc, #148]	; (800d2e0 <_svfiprintf_r+0x1ec>)
 800d24a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d24e:	2206      	movs	r2, #6
 800d250:	f7f2 fff6 	bl	8000240 <memchr>
 800d254:	2800      	cmp	r0, #0
 800d256:	d038      	beq.n	800d2ca <_svfiprintf_r+0x1d6>
 800d258:	4b22      	ldr	r3, [pc, #136]	; (800d2e4 <_svfiprintf_r+0x1f0>)
 800d25a:	bb1b      	cbnz	r3, 800d2a4 <_svfiprintf_r+0x1b0>
 800d25c:	9b03      	ldr	r3, [sp, #12]
 800d25e:	3307      	adds	r3, #7
 800d260:	f023 0307 	bic.w	r3, r3, #7
 800d264:	3308      	adds	r3, #8
 800d266:	9303      	str	r3, [sp, #12]
 800d268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d26a:	4433      	add	r3, r6
 800d26c:	9309      	str	r3, [sp, #36]	; 0x24
 800d26e:	e768      	b.n	800d142 <_svfiprintf_r+0x4e>
 800d270:	fb0c 3202 	mla	r2, ip, r2, r3
 800d274:	460c      	mov	r4, r1
 800d276:	2001      	movs	r0, #1
 800d278:	e7a6      	b.n	800d1c8 <_svfiprintf_r+0xd4>
 800d27a:	2300      	movs	r3, #0
 800d27c:	3401      	adds	r4, #1
 800d27e:	9305      	str	r3, [sp, #20]
 800d280:	4619      	mov	r1, r3
 800d282:	f04f 0c0a 	mov.w	ip, #10
 800d286:	4620      	mov	r0, r4
 800d288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d28c:	3a30      	subs	r2, #48	; 0x30
 800d28e:	2a09      	cmp	r2, #9
 800d290:	d903      	bls.n	800d29a <_svfiprintf_r+0x1a6>
 800d292:	2b00      	cmp	r3, #0
 800d294:	d0c6      	beq.n	800d224 <_svfiprintf_r+0x130>
 800d296:	9105      	str	r1, [sp, #20]
 800d298:	e7c4      	b.n	800d224 <_svfiprintf_r+0x130>
 800d29a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d29e:	4604      	mov	r4, r0
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e7f0      	b.n	800d286 <_svfiprintf_r+0x192>
 800d2a4:	ab03      	add	r3, sp, #12
 800d2a6:	9300      	str	r3, [sp, #0]
 800d2a8:	462a      	mov	r2, r5
 800d2aa:	4b0f      	ldr	r3, [pc, #60]	; (800d2e8 <_svfiprintf_r+0x1f4>)
 800d2ac:	a904      	add	r1, sp, #16
 800d2ae:	4638      	mov	r0, r7
 800d2b0:	f7fc fe0e 	bl	8009ed0 <_printf_float>
 800d2b4:	1c42      	adds	r2, r0, #1
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	d1d6      	bne.n	800d268 <_svfiprintf_r+0x174>
 800d2ba:	89ab      	ldrh	r3, [r5, #12]
 800d2bc:	065b      	lsls	r3, r3, #25
 800d2be:	f53f af2d 	bmi.w	800d11c <_svfiprintf_r+0x28>
 800d2c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2c4:	b01d      	add	sp, #116	; 0x74
 800d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2ca:	ab03      	add	r3, sp, #12
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	462a      	mov	r2, r5
 800d2d0:	4b05      	ldr	r3, [pc, #20]	; (800d2e8 <_svfiprintf_r+0x1f4>)
 800d2d2:	a904      	add	r1, sp, #16
 800d2d4:	4638      	mov	r0, r7
 800d2d6:	f7fd f883 	bl	800a3e0 <_printf_i>
 800d2da:	e7eb      	b.n	800d2b4 <_svfiprintf_r+0x1c0>
 800d2dc:	0800e751 	.word	0x0800e751
 800d2e0:	0800e75b 	.word	0x0800e75b
 800d2e4:	08009ed1 	.word	0x08009ed1
 800d2e8:	0800d041 	.word	0x0800d041
 800d2ec:	0800e757 	.word	0x0800e757

0800d2f0 <__sflush_r>:
 800d2f0:	898a      	ldrh	r2, [r1, #12]
 800d2f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	0710      	lsls	r0, r2, #28
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	d458      	bmi.n	800d3b0 <__sflush_r+0xc0>
 800d2fe:	684b      	ldr	r3, [r1, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	dc05      	bgt.n	800d310 <__sflush_r+0x20>
 800d304:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d306:	2b00      	cmp	r3, #0
 800d308:	dc02      	bgt.n	800d310 <__sflush_r+0x20>
 800d30a:	2000      	movs	r0, #0
 800d30c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d310:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d312:	2e00      	cmp	r6, #0
 800d314:	d0f9      	beq.n	800d30a <__sflush_r+0x1a>
 800d316:	2300      	movs	r3, #0
 800d318:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d31c:	682f      	ldr	r7, [r5, #0]
 800d31e:	6a21      	ldr	r1, [r4, #32]
 800d320:	602b      	str	r3, [r5, #0]
 800d322:	d032      	beq.n	800d38a <__sflush_r+0x9a>
 800d324:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d326:	89a3      	ldrh	r3, [r4, #12]
 800d328:	075a      	lsls	r2, r3, #29
 800d32a:	d505      	bpl.n	800d338 <__sflush_r+0x48>
 800d32c:	6863      	ldr	r3, [r4, #4]
 800d32e:	1ac0      	subs	r0, r0, r3
 800d330:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d332:	b10b      	cbz	r3, 800d338 <__sflush_r+0x48>
 800d334:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d336:	1ac0      	subs	r0, r0, r3
 800d338:	2300      	movs	r3, #0
 800d33a:	4602      	mov	r2, r0
 800d33c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d33e:	6a21      	ldr	r1, [r4, #32]
 800d340:	4628      	mov	r0, r5
 800d342:	47b0      	blx	r6
 800d344:	1c43      	adds	r3, r0, #1
 800d346:	89a3      	ldrh	r3, [r4, #12]
 800d348:	d106      	bne.n	800d358 <__sflush_r+0x68>
 800d34a:	6829      	ldr	r1, [r5, #0]
 800d34c:	291d      	cmp	r1, #29
 800d34e:	d82b      	bhi.n	800d3a8 <__sflush_r+0xb8>
 800d350:	4a29      	ldr	r2, [pc, #164]	; (800d3f8 <__sflush_r+0x108>)
 800d352:	410a      	asrs	r2, r1
 800d354:	07d6      	lsls	r6, r2, #31
 800d356:	d427      	bmi.n	800d3a8 <__sflush_r+0xb8>
 800d358:	2200      	movs	r2, #0
 800d35a:	6062      	str	r2, [r4, #4]
 800d35c:	04d9      	lsls	r1, r3, #19
 800d35e:	6922      	ldr	r2, [r4, #16]
 800d360:	6022      	str	r2, [r4, #0]
 800d362:	d504      	bpl.n	800d36e <__sflush_r+0x7e>
 800d364:	1c42      	adds	r2, r0, #1
 800d366:	d101      	bne.n	800d36c <__sflush_r+0x7c>
 800d368:	682b      	ldr	r3, [r5, #0]
 800d36a:	b903      	cbnz	r3, 800d36e <__sflush_r+0x7e>
 800d36c:	6560      	str	r0, [r4, #84]	; 0x54
 800d36e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d370:	602f      	str	r7, [r5, #0]
 800d372:	2900      	cmp	r1, #0
 800d374:	d0c9      	beq.n	800d30a <__sflush_r+0x1a>
 800d376:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d37a:	4299      	cmp	r1, r3
 800d37c:	d002      	beq.n	800d384 <__sflush_r+0x94>
 800d37e:	4628      	mov	r0, r5
 800d380:	f7fe fb12 	bl	800b9a8 <_free_r>
 800d384:	2000      	movs	r0, #0
 800d386:	6360      	str	r0, [r4, #52]	; 0x34
 800d388:	e7c0      	b.n	800d30c <__sflush_r+0x1c>
 800d38a:	2301      	movs	r3, #1
 800d38c:	4628      	mov	r0, r5
 800d38e:	47b0      	blx	r6
 800d390:	1c41      	adds	r1, r0, #1
 800d392:	d1c8      	bne.n	800d326 <__sflush_r+0x36>
 800d394:	682b      	ldr	r3, [r5, #0]
 800d396:	2b00      	cmp	r3, #0
 800d398:	d0c5      	beq.n	800d326 <__sflush_r+0x36>
 800d39a:	2b1d      	cmp	r3, #29
 800d39c:	d001      	beq.n	800d3a2 <__sflush_r+0xb2>
 800d39e:	2b16      	cmp	r3, #22
 800d3a0:	d101      	bne.n	800d3a6 <__sflush_r+0xb6>
 800d3a2:	602f      	str	r7, [r5, #0]
 800d3a4:	e7b1      	b.n	800d30a <__sflush_r+0x1a>
 800d3a6:	89a3      	ldrh	r3, [r4, #12]
 800d3a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ac:	81a3      	strh	r3, [r4, #12]
 800d3ae:	e7ad      	b.n	800d30c <__sflush_r+0x1c>
 800d3b0:	690f      	ldr	r7, [r1, #16]
 800d3b2:	2f00      	cmp	r7, #0
 800d3b4:	d0a9      	beq.n	800d30a <__sflush_r+0x1a>
 800d3b6:	0793      	lsls	r3, r2, #30
 800d3b8:	680e      	ldr	r6, [r1, #0]
 800d3ba:	bf08      	it	eq
 800d3bc:	694b      	ldreq	r3, [r1, #20]
 800d3be:	600f      	str	r7, [r1, #0]
 800d3c0:	bf18      	it	ne
 800d3c2:	2300      	movne	r3, #0
 800d3c4:	eba6 0807 	sub.w	r8, r6, r7
 800d3c8:	608b      	str	r3, [r1, #8]
 800d3ca:	f1b8 0f00 	cmp.w	r8, #0
 800d3ce:	dd9c      	ble.n	800d30a <__sflush_r+0x1a>
 800d3d0:	6a21      	ldr	r1, [r4, #32]
 800d3d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d3d4:	4643      	mov	r3, r8
 800d3d6:	463a      	mov	r2, r7
 800d3d8:	4628      	mov	r0, r5
 800d3da:	47b0      	blx	r6
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	dc06      	bgt.n	800d3ee <__sflush_r+0xfe>
 800d3e0:	89a3      	ldrh	r3, [r4, #12]
 800d3e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e6:	81a3      	strh	r3, [r4, #12]
 800d3e8:	f04f 30ff 	mov.w	r0, #4294967295
 800d3ec:	e78e      	b.n	800d30c <__sflush_r+0x1c>
 800d3ee:	4407      	add	r7, r0
 800d3f0:	eba8 0800 	sub.w	r8, r8, r0
 800d3f4:	e7e9      	b.n	800d3ca <__sflush_r+0xda>
 800d3f6:	bf00      	nop
 800d3f8:	dfbffffe 	.word	0xdfbffffe

0800d3fc <_fflush_r>:
 800d3fc:	b538      	push	{r3, r4, r5, lr}
 800d3fe:	690b      	ldr	r3, [r1, #16]
 800d400:	4605      	mov	r5, r0
 800d402:	460c      	mov	r4, r1
 800d404:	b913      	cbnz	r3, 800d40c <_fflush_r+0x10>
 800d406:	2500      	movs	r5, #0
 800d408:	4628      	mov	r0, r5
 800d40a:	bd38      	pop	{r3, r4, r5, pc}
 800d40c:	b118      	cbz	r0, 800d416 <_fflush_r+0x1a>
 800d40e:	6a03      	ldr	r3, [r0, #32]
 800d410:	b90b      	cbnz	r3, 800d416 <_fflush_r+0x1a>
 800d412:	f7fd fb97 	bl	800ab44 <__sinit>
 800d416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d0f3      	beq.n	800d406 <_fflush_r+0xa>
 800d41e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d420:	07d0      	lsls	r0, r2, #31
 800d422:	d404      	bmi.n	800d42e <_fflush_r+0x32>
 800d424:	0599      	lsls	r1, r3, #22
 800d426:	d402      	bmi.n	800d42e <_fflush_r+0x32>
 800d428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d42a:	f7fd fcb2 	bl	800ad92 <__retarget_lock_acquire_recursive>
 800d42e:	4628      	mov	r0, r5
 800d430:	4621      	mov	r1, r4
 800d432:	f7ff ff5d 	bl	800d2f0 <__sflush_r>
 800d436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d438:	07da      	lsls	r2, r3, #31
 800d43a:	4605      	mov	r5, r0
 800d43c:	d4e4      	bmi.n	800d408 <_fflush_r+0xc>
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	059b      	lsls	r3, r3, #22
 800d442:	d4e1      	bmi.n	800d408 <_fflush_r+0xc>
 800d444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d446:	f7fd fca5 	bl	800ad94 <__retarget_lock_release_recursive>
 800d44a:	e7dd      	b.n	800d408 <_fflush_r+0xc>

0800d44c <memmove>:
 800d44c:	4288      	cmp	r0, r1
 800d44e:	b510      	push	{r4, lr}
 800d450:	eb01 0402 	add.w	r4, r1, r2
 800d454:	d902      	bls.n	800d45c <memmove+0x10>
 800d456:	4284      	cmp	r4, r0
 800d458:	4623      	mov	r3, r4
 800d45a:	d807      	bhi.n	800d46c <memmove+0x20>
 800d45c:	1e43      	subs	r3, r0, #1
 800d45e:	42a1      	cmp	r1, r4
 800d460:	d008      	beq.n	800d474 <memmove+0x28>
 800d462:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d466:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d46a:	e7f8      	b.n	800d45e <memmove+0x12>
 800d46c:	4402      	add	r2, r0
 800d46e:	4601      	mov	r1, r0
 800d470:	428a      	cmp	r2, r1
 800d472:	d100      	bne.n	800d476 <memmove+0x2a>
 800d474:	bd10      	pop	{r4, pc}
 800d476:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d47a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d47e:	e7f7      	b.n	800d470 <memmove+0x24>

0800d480 <strncmp>:
 800d480:	b510      	push	{r4, lr}
 800d482:	b16a      	cbz	r2, 800d4a0 <strncmp+0x20>
 800d484:	3901      	subs	r1, #1
 800d486:	1884      	adds	r4, r0, r2
 800d488:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d48c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d490:	429a      	cmp	r2, r3
 800d492:	d103      	bne.n	800d49c <strncmp+0x1c>
 800d494:	42a0      	cmp	r0, r4
 800d496:	d001      	beq.n	800d49c <strncmp+0x1c>
 800d498:	2a00      	cmp	r2, #0
 800d49a:	d1f5      	bne.n	800d488 <strncmp+0x8>
 800d49c:	1ad0      	subs	r0, r2, r3
 800d49e:	bd10      	pop	{r4, pc}
 800d4a0:	4610      	mov	r0, r2
 800d4a2:	e7fc      	b.n	800d49e <strncmp+0x1e>
 800d4a4:	0000      	movs	r0, r0
	...

0800d4a8 <nan>:
 800d4a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d4b0 <nan+0x8>
 800d4ac:	4770      	bx	lr
 800d4ae:	bf00      	nop
 800d4b0:	00000000 	.word	0x00000000
 800d4b4:	7ff80000 	.word	0x7ff80000

0800d4b8 <__assert_func>:
 800d4b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4ba:	4614      	mov	r4, r2
 800d4bc:	461a      	mov	r2, r3
 800d4be:	4b09      	ldr	r3, [pc, #36]	; (800d4e4 <__assert_func+0x2c>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	4605      	mov	r5, r0
 800d4c4:	68d8      	ldr	r0, [r3, #12]
 800d4c6:	b14c      	cbz	r4, 800d4dc <__assert_func+0x24>
 800d4c8:	4b07      	ldr	r3, [pc, #28]	; (800d4e8 <__assert_func+0x30>)
 800d4ca:	9100      	str	r1, [sp, #0]
 800d4cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4d0:	4906      	ldr	r1, [pc, #24]	; (800d4ec <__assert_func+0x34>)
 800d4d2:	462b      	mov	r3, r5
 800d4d4:	f000 fbca 	bl	800dc6c <fiprintf>
 800d4d8:	f000 fbda 	bl	800dc90 <abort>
 800d4dc:	4b04      	ldr	r3, [pc, #16]	; (800d4f0 <__assert_func+0x38>)
 800d4de:	461c      	mov	r4, r3
 800d4e0:	e7f3      	b.n	800d4ca <__assert_func+0x12>
 800d4e2:	bf00      	nop
 800d4e4:	20000104 	.word	0x20000104
 800d4e8:	0800e76a 	.word	0x0800e76a
 800d4ec:	0800e777 	.word	0x0800e777
 800d4f0:	0800e7a5 	.word	0x0800e7a5

0800d4f4 <_calloc_r>:
 800d4f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d4f6:	fba1 2402 	umull	r2, r4, r1, r2
 800d4fa:	b94c      	cbnz	r4, 800d510 <_calloc_r+0x1c>
 800d4fc:	4611      	mov	r1, r2
 800d4fe:	9201      	str	r2, [sp, #4]
 800d500:	f7fc fbca 	bl	8009c98 <_malloc_r>
 800d504:	9a01      	ldr	r2, [sp, #4]
 800d506:	4605      	mov	r5, r0
 800d508:	b930      	cbnz	r0, 800d518 <_calloc_r+0x24>
 800d50a:	4628      	mov	r0, r5
 800d50c:	b003      	add	sp, #12
 800d50e:	bd30      	pop	{r4, r5, pc}
 800d510:	220c      	movs	r2, #12
 800d512:	6002      	str	r2, [r0, #0]
 800d514:	2500      	movs	r5, #0
 800d516:	e7f8      	b.n	800d50a <_calloc_r+0x16>
 800d518:	4621      	mov	r1, r4
 800d51a:	f7fd fbac 	bl	800ac76 <memset>
 800d51e:	e7f4      	b.n	800d50a <_calloc_r+0x16>

0800d520 <rshift>:
 800d520:	6903      	ldr	r3, [r0, #16]
 800d522:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d526:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d52a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d52e:	f100 0414 	add.w	r4, r0, #20
 800d532:	dd45      	ble.n	800d5c0 <rshift+0xa0>
 800d534:	f011 011f 	ands.w	r1, r1, #31
 800d538:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d53c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d540:	d10c      	bne.n	800d55c <rshift+0x3c>
 800d542:	f100 0710 	add.w	r7, r0, #16
 800d546:	4629      	mov	r1, r5
 800d548:	42b1      	cmp	r1, r6
 800d54a:	d334      	bcc.n	800d5b6 <rshift+0x96>
 800d54c:	1a9b      	subs	r3, r3, r2
 800d54e:	009b      	lsls	r3, r3, #2
 800d550:	1eea      	subs	r2, r5, #3
 800d552:	4296      	cmp	r6, r2
 800d554:	bf38      	it	cc
 800d556:	2300      	movcc	r3, #0
 800d558:	4423      	add	r3, r4
 800d55a:	e015      	b.n	800d588 <rshift+0x68>
 800d55c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d560:	f1c1 0820 	rsb	r8, r1, #32
 800d564:	40cf      	lsrs	r7, r1
 800d566:	f105 0e04 	add.w	lr, r5, #4
 800d56a:	46a1      	mov	r9, r4
 800d56c:	4576      	cmp	r6, lr
 800d56e:	46f4      	mov	ip, lr
 800d570:	d815      	bhi.n	800d59e <rshift+0x7e>
 800d572:	1a9a      	subs	r2, r3, r2
 800d574:	0092      	lsls	r2, r2, #2
 800d576:	3a04      	subs	r2, #4
 800d578:	3501      	adds	r5, #1
 800d57a:	42ae      	cmp	r6, r5
 800d57c:	bf38      	it	cc
 800d57e:	2200      	movcc	r2, #0
 800d580:	18a3      	adds	r3, r4, r2
 800d582:	50a7      	str	r7, [r4, r2]
 800d584:	b107      	cbz	r7, 800d588 <rshift+0x68>
 800d586:	3304      	adds	r3, #4
 800d588:	1b1a      	subs	r2, r3, r4
 800d58a:	42a3      	cmp	r3, r4
 800d58c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d590:	bf08      	it	eq
 800d592:	2300      	moveq	r3, #0
 800d594:	6102      	str	r2, [r0, #16]
 800d596:	bf08      	it	eq
 800d598:	6143      	streq	r3, [r0, #20]
 800d59a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d59e:	f8dc c000 	ldr.w	ip, [ip]
 800d5a2:	fa0c fc08 	lsl.w	ip, ip, r8
 800d5a6:	ea4c 0707 	orr.w	r7, ip, r7
 800d5aa:	f849 7b04 	str.w	r7, [r9], #4
 800d5ae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d5b2:	40cf      	lsrs	r7, r1
 800d5b4:	e7da      	b.n	800d56c <rshift+0x4c>
 800d5b6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d5ba:	f847 cf04 	str.w	ip, [r7, #4]!
 800d5be:	e7c3      	b.n	800d548 <rshift+0x28>
 800d5c0:	4623      	mov	r3, r4
 800d5c2:	e7e1      	b.n	800d588 <rshift+0x68>

0800d5c4 <__hexdig_fun>:
 800d5c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d5c8:	2b09      	cmp	r3, #9
 800d5ca:	d802      	bhi.n	800d5d2 <__hexdig_fun+0xe>
 800d5cc:	3820      	subs	r0, #32
 800d5ce:	b2c0      	uxtb	r0, r0
 800d5d0:	4770      	bx	lr
 800d5d2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d5d6:	2b05      	cmp	r3, #5
 800d5d8:	d801      	bhi.n	800d5de <__hexdig_fun+0x1a>
 800d5da:	3847      	subs	r0, #71	; 0x47
 800d5dc:	e7f7      	b.n	800d5ce <__hexdig_fun+0xa>
 800d5de:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d5e2:	2b05      	cmp	r3, #5
 800d5e4:	d801      	bhi.n	800d5ea <__hexdig_fun+0x26>
 800d5e6:	3827      	subs	r0, #39	; 0x27
 800d5e8:	e7f1      	b.n	800d5ce <__hexdig_fun+0xa>
 800d5ea:	2000      	movs	r0, #0
 800d5ec:	4770      	bx	lr
	...

0800d5f0 <__gethex>:
 800d5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5f4:	4617      	mov	r7, r2
 800d5f6:	680a      	ldr	r2, [r1, #0]
 800d5f8:	b085      	sub	sp, #20
 800d5fa:	f102 0b02 	add.w	fp, r2, #2
 800d5fe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d602:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d606:	4681      	mov	r9, r0
 800d608:	468a      	mov	sl, r1
 800d60a:	9302      	str	r3, [sp, #8]
 800d60c:	32fe      	adds	r2, #254	; 0xfe
 800d60e:	eb02 030b 	add.w	r3, r2, fp
 800d612:	46d8      	mov	r8, fp
 800d614:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800d618:	9301      	str	r3, [sp, #4]
 800d61a:	2830      	cmp	r0, #48	; 0x30
 800d61c:	d0f7      	beq.n	800d60e <__gethex+0x1e>
 800d61e:	f7ff ffd1 	bl	800d5c4 <__hexdig_fun>
 800d622:	4604      	mov	r4, r0
 800d624:	2800      	cmp	r0, #0
 800d626:	d138      	bne.n	800d69a <__gethex+0xaa>
 800d628:	49a7      	ldr	r1, [pc, #668]	; (800d8c8 <__gethex+0x2d8>)
 800d62a:	2201      	movs	r2, #1
 800d62c:	4640      	mov	r0, r8
 800d62e:	f7ff ff27 	bl	800d480 <strncmp>
 800d632:	4606      	mov	r6, r0
 800d634:	2800      	cmp	r0, #0
 800d636:	d169      	bne.n	800d70c <__gethex+0x11c>
 800d638:	f898 0001 	ldrb.w	r0, [r8, #1]
 800d63c:	465d      	mov	r5, fp
 800d63e:	f7ff ffc1 	bl	800d5c4 <__hexdig_fun>
 800d642:	2800      	cmp	r0, #0
 800d644:	d064      	beq.n	800d710 <__gethex+0x120>
 800d646:	465a      	mov	r2, fp
 800d648:	7810      	ldrb	r0, [r2, #0]
 800d64a:	2830      	cmp	r0, #48	; 0x30
 800d64c:	4690      	mov	r8, r2
 800d64e:	f102 0201 	add.w	r2, r2, #1
 800d652:	d0f9      	beq.n	800d648 <__gethex+0x58>
 800d654:	f7ff ffb6 	bl	800d5c4 <__hexdig_fun>
 800d658:	2301      	movs	r3, #1
 800d65a:	fab0 f480 	clz	r4, r0
 800d65e:	0964      	lsrs	r4, r4, #5
 800d660:	465e      	mov	r6, fp
 800d662:	9301      	str	r3, [sp, #4]
 800d664:	4642      	mov	r2, r8
 800d666:	4615      	mov	r5, r2
 800d668:	3201      	adds	r2, #1
 800d66a:	7828      	ldrb	r0, [r5, #0]
 800d66c:	f7ff ffaa 	bl	800d5c4 <__hexdig_fun>
 800d670:	2800      	cmp	r0, #0
 800d672:	d1f8      	bne.n	800d666 <__gethex+0x76>
 800d674:	4994      	ldr	r1, [pc, #592]	; (800d8c8 <__gethex+0x2d8>)
 800d676:	2201      	movs	r2, #1
 800d678:	4628      	mov	r0, r5
 800d67a:	f7ff ff01 	bl	800d480 <strncmp>
 800d67e:	b978      	cbnz	r0, 800d6a0 <__gethex+0xb0>
 800d680:	b946      	cbnz	r6, 800d694 <__gethex+0xa4>
 800d682:	1c6e      	adds	r6, r5, #1
 800d684:	4632      	mov	r2, r6
 800d686:	4615      	mov	r5, r2
 800d688:	3201      	adds	r2, #1
 800d68a:	7828      	ldrb	r0, [r5, #0]
 800d68c:	f7ff ff9a 	bl	800d5c4 <__hexdig_fun>
 800d690:	2800      	cmp	r0, #0
 800d692:	d1f8      	bne.n	800d686 <__gethex+0x96>
 800d694:	1b73      	subs	r3, r6, r5
 800d696:	009e      	lsls	r6, r3, #2
 800d698:	e004      	b.n	800d6a4 <__gethex+0xb4>
 800d69a:	2400      	movs	r4, #0
 800d69c:	4626      	mov	r6, r4
 800d69e:	e7e1      	b.n	800d664 <__gethex+0x74>
 800d6a0:	2e00      	cmp	r6, #0
 800d6a2:	d1f7      	bne.n	800d694 <__gethex+0xa4>
 800d6a4:	782b      	ldrb	r3, [r5, #0]
 800d6a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d6aa:	2b50      	cmp	r3, #80	; 0x50
 800d6ac:	d13d      	bne.n	800d72a <__gethex+0x13a>
 800d6ae:	786b      	ldrb	r3, [r5, #1]
 800d6b0:	2b2b      	cmp	r3, #43	; 0x2b
 800d6b2:	d02f      	beq.n	800d714 <__gethex+0x124>
 800d6b4:	2b2d      	cmp	r3, #45	; 0x2d
 800d6b6:	d031      	beq.n	800d71c <__gethex+0x12c>
 800d6b8:	1c69      	adds	r1, r5, #1
 800d6ba:	f04f 0b00 	mov.w	fp, #0
 800d6be:	7808      	ldrb	r0, [r1, #0]
 800d6c0:	f7ff ff80 	bl	800d5c4 <__hexdig_fun>
 800d6c4:	1e42      	subs	r2, r0, #1
 800d6c6:	b2d2      	uxtb	r2, r2
 800d6c8:	2a18      	cmp	r2, #24
 800d6ca:	d82e      	bhi.n	800d72a <__gethex+0x13a>
 800d6cc:	f1a0 0210 	sub.w	r2, r0, #16
 800d6d0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d6d4:	f7ff ff76 	bl	800d5c4 <__hexdig_fun>
 800d6d8:	f100 3cff 	add.w	ip, r0, #4294967295
 800d6dc:	fa5f fc8c 	uxtb.w	ip, ip
 800d6e0:	f1bc 0f18 	cmp.w	ip, #24
 800d6e4:	d91d      	bls.n	800d722 <__gethex+0x132>
 800d6e6:	f1bb 0f00 	cmp.w	fp, #0
 800d6ea:	d000      	beq.n	800d6ee <__gethex+0xfe>
 800d6ec:	4252      	negs	r2, r2
 800d6ee:	4416      	add	r6, r2
 800d6f0:	f8ca 1000 	str.w	r1, [sl]
 800d6f4:	b1dc      	cbz	r4, 800d72e <__gethex+0x13e>
 800d6f6:	9b01      	ldr	r3, [sp, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	bf14      	ite	ne
 800d6fc:	f04f 0800 	movne.w	r8, #0
 800d700:	f04f 0806 	moveq.w	r8, #6
 800d704:	4640      	mov	r0, r8
 800d706:	b005      	add	sp, #20
 800d708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70c:	4645      	mov	r5, r8
 800d70e:	4626      	mov	r6, r4
 800d710:	2401      	movs	r4, #1
 800d712:	e7c7      	b.n	800d6a4 <__gethex+0xb4>
 800d714:	f04f 0b00 	mov.w	fp, #0
 800d718:	1ca9      	adds	r1, r5, #2
 800d71a:	e7d0      	b.n	800d6be <__gethex+0xce>
 800d71c:	f04f 0b01 	mov.w	fp, #1
 800d720:	e7fa      	b.n	800d718 <__gethex+0x128>
 800d722:	230a      	movs	r3, #10
 800d724:	fb03 0002 	mla	r0, r3, r2, r0
 800d728:	e7d0      	b.n	800d6cc <__gethex+0xdc>
 800d72a:	4629      	mov	r1, r5
 800d72c:	e7e0      	b.n	800d6f0 <__gethex+0x100>
 800d72e:	eba5 0308 	sub.w	r3, r5, r8
 800d732:	3b01      	subs	r3, #1
 800d734:	4621      	mov	r1, r4
 800d736:	2b07      	cmp	r3, #7
 800d738:	dc0a      	bgt.n	800d750 <__gethex+0x160>
 800d73a:	4648      	mov	r0, r9
 800d73c:	f7fe f980 	bl	800ba40 <_Balloc>
 800d740:	4604      	mov	r4, r0
 800d742:	b940      	cbnz	r0, 800d756 <__gethex+0x166>
 800d744:	4b61      	ldr	r3, [pc, #388]	; (800d8cc <__gethex+0x2dc>)
 800d746:	4602      	mov	r2, r0
 800d748:	21e4      	movs	r1, #228	; 0xe4
 800d74a:	4861      	ldr	r0, [pc, #388]	; (800d8d0 <__gethex+0x2e0>)
 800d74c:	f7ff feb4 	bl	800d4b8 <__assert_func>
 800d750:	3101      	adds	r1, #1
 800d752:	105b      	asrs	r3, r3, #1
 800d754:	e7ef      	b.n	800d736 <__gethex+0x146>
 800d756:	f100 0a14 	add.w	sl, r0, #20
 800d75a:	2300      	movs	r3, #0
 800d75c:	495a      	ldr	r1, [pc, #360]	; (800d8c8 <__gethex+0x2d8>)
 800d75e:	f8cd a004 	str.w	sl, [sp, #4]
 800d762:	469b      	mov	fp, r3
 800d764:	45a8      	cmp	r8, r5
 800d766:	d342      	bcc.n	800d7ee <__gethex+0x1fe>
 800d768:	9801      	ldr	r0, [sp, #4]
 800d76a:	f840 bb04 	str.w	fp, [r0], #4
 800d76e:	eba0 000a 	sub.w	r0, r0, sl
 800d772:	1080      	asrs	r0, r0, #2
 800d774:	6120      	str	r0, [r4, #16]
 800d776:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800d77a:	4658      	mov	r0, fp
 800d77c:	f7fe fa52 	bl	800bc24 <__hi0bits>
 800d780:	683d      	ldr	r5, [r7, #0]
 800d782:	eba8 0000 	sub.w	r0, r8, r0
 800d786:	42a8      	cmp	r0, r5
 800d788:	dd59      	ble.n	800d83e <__gethex+0x24e>
 800d78a:	eba0 0805 	sub.w	r8, r0, r5
 800d78e:	4641      	mov	r1, r8
 800d790:	4620      	mov	r0, r4
 800d792:	f7fe fdde 	bl	800c352 <__any_on>
 800d796:	4683      	mov	fp, r0
 800d798:	b1b8      	cbz	r0, 800d7ca <__gethex+0x1da>
 800d79a:	f108 33ff 	add.w	r3, r8, #4294967295
 800d79e:	1159      	asrs	r1, r3, #5
 800d7a0:	f003 021f 	and.w	r2, r3, #31
 800d7a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800d7a8:	f04f 0b01 	mov.w	fp, #1
 800d7ac:	fa0b f202 	lsl.w	r2, fp, r2
 800d7b0:	420a      	tst	r2, r1
 800d7b2:	d00a      	beq.n	800d7ca <__gethex+0x1da>
 800d7b4:	455b      	cmp	r3, fp
 800d7b6:	dd06      	ble.n	800d7c6 <__gethex+0x1d6>
 800d7b8:	f1a8 0102 	sub.w	r1, r8, #2
 800d7bc:	4620      	mov	r0, r4
 800d7be:	f7fe fdc8 	bl	800c352 <__any_on>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d138      	bne.n	800d838 <__gethex+0x248>
 800d7c6:	f04f 0b02 	mov.w	fp, #2
 800d7ca:	4641      	mov	r1, r8
 800d7cc:	4620      	mov	r0, r4
 800d7ce:	f7ff fea7 	bl	800d520 <rshift>
 800d7d2:	4446      	add	r6, r8
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	42b3      	cmp	r3, r6
 800d7d8:	da41      	bge.n	800d85e <__gethex+0x26e>
 800d7da:	4621      	mov	r1, r4
 800d7dc:	4648      	mov	r0, r9
 800d7de:	f7fe f96f 	bl	800bac0 <_Bfree>
 800d7e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	6013      	str	r3, [r2, #0]
 800d7e8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800d7ec:	e78a      	b.n	800d704 <__gethex+0x114>
 800d7ee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800d7f2:	2a2e      	cmp	r2, #46	; 0x2e
 800d7f4:	d014      	beq.n	800d820 <__gethex+0x230>
 800d7f6:	2b20      	cmp	r3, #32
 800d7f8:	d106      	bne.n	800d808 <__gethex+0x218>
 800d7fa:	9b01      	ldr	r3, [sp, #4]
 800d7fc:	f843 bb04 	str.w	fp, [r3], #4
 800d800:	f04f 0b00 	mov.w	fp, #0
 800d804:	9301      	str	r3, [sp, #4]
 800d806:	465b      	mov	r3, fp
 800d808:	7828      	ldrb	r0, [r5, #0]
 800d80a:	9303      	str	r3, [sp, #12]
 800d80c:	f7ff feda 	bl	800d5c4 <__hexdig_fun>
 800d810:	9b03      	ldr	r3, [sp, #12]
 800d812:	f000 000f 	and.w	r0, r0, #15
 800d816:	4098      	lsls	r0, r3
 800d818:	ea4b 0b00 	orr.w	fp, fp, r0
 800d81c:	3304      	adds	r3, #4
 800d81e:	e7a1      	b.n	800d764 <__gethex+0x174>
 800d820:	45a8      	cmp	r8, r5
 800d822:	d8e8      	bhi.n	800d7f6 <__gethex+0x206>
 800d824:	2201      	movs	r2, #1
 800d826:	4628      	mov	r0, r5
 800d828:	9303      	str	r3, [sp, #12]
 800d82a:	f7ff fe29 	bl	800d480 <strncmp>
 800d82e:	4926      	ldr	r1, [pc, #152]	; (800d8c8 <__gethex+0x2d8>)
 800d830:	9b03      	ldr	r3, [sp, #12]
 800d832:	2800      	cmp	r0, #0
 800d834:	d1df      	bne.n	800d7f6 <__gethex+0x206>
 800d836:	e795      	b.n	800d764 <__gethex+0x174>
 800d838:	f04f 0b03 	mov.w	fp, #3
 800d83c:	e7c5      	b.n	800d7ca <__gethex+0x1da>
 800d83e:	da0b      	bge.n	800d858 <__gethex+0x268>
 800d840:	eba5 0800 	sub.w	r8, r5, r0
 800d844:	4621      	mov	r1, r4
 800d846:	4642      	mov	r2, r8
 800d848:	4648      	mov	r0, r9
 800d84a:	f7fe fb53 	bl	800bef4 <__lshift>
 800d84e:	eba6 0608 	sub.w	r6, r6, r8
 800d852:	4604      	mov	r4, r0
 800d854:	f100 0a14 	add.w	sl, r0, #20
 800d858:	f04f 0b00 	mov.w	fp, #0
 800d85c:	e7ba      	b.n	800d7d4 <__gethex+0x1e4>
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	42b3      	cmp	r3, r6
 800d862:	dd73      	ble.n	800d94c <__gethex+0x35c>
 800d864:	1b9e      	subs	r6, r3, r6
 800d866:	42b5      	cmp	r5, r6
 800d868:	dc34      	bgt.n	800d8d4 <__gethex+0x2e4>
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2b02      	cmp	r3, #2
 800d86e:	d023      	beq.n	800d8b8 <__gethex+0x2c8>
 800d870:	2b03      	cmp	r3, #3
 800d872:	d025      	beq.n	800d8c0 <__gethex+0x2d0>
 800d874:	2b01      	cmp	r3, #1
 800d876:	d115      	bne.n	800d8a4 <__gethex+0x2b4>
 800d878:	42b5      	cmp	r5, r6
 800d87a:	d113      	bne.n	800d8a4 <__gethex+0x2b4>
 800d87c:	2d01      	cmp	r5, #1
 800d87e:	d10b      	bne.n	800d898 <__gethex+0x2a8>
 800d880:	9a02      	ldr	r2, [sp, #8]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	6013      	str	r3, [r2, #0]
 800d886:	2301      	movs	r3, #1
 800d888:	6123      	str	r3, [r4, #16]
 800d88a:	f8ca 3000 	str.w	r3, [sl]
 800d88e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d890:	f04f 0862 	mov.w	r8, #98	; 0x62
 800d894:	601c      	str	r4, [r3, #0]
 800d896:	e735      	b.n	800d704 <__gethex+0x114>
 800d898:	1e69      	subs	r1, r5, #1
 800d89a:	4620      	mov	r0, r4
 800d89c:	f7fe fd59 	bl	800c352 <__any_on>
 800d8a0:	2800      	cmp	r0, #0
 800d8a2:	d1ed      	bne.n	800d880 <__gethex+0x290>
 800d8a4:	4621      	mov	r1, r4
 800d8a6:	4648      	mov	r0, r9
 800d8a8:	f7fe f90a 	bl	800bac0 <_Bfree>
 800d8ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	6013      	str	r3, [r2, #0]
 800d8b2:	f04f 0850 	mov.w	r8, #80	; 0x50
 800d8b6:	e725      	b.n	800d704 <__gethex+0x114>
 800d8b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d1f2      	bne.n	800d8a4 <__gethex+0x2b4>
 800d8be:	e7df      	b.n	800d880 <__gethex+0x290>
 800d8c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d1dc      	bne.n	800d880 <__gethex+0x290>
 800d8c6:	e7ed      	b.n	800d8a4 <__gethex+0x2b4>
 800d8c8:	0800e5fc 	.word	0x0800e5fc
 800d8cc:	0800e491 	.word	0x0800e491
 800d8d0:	0800e7a6 	.word	0x0800e7a6
 800d8d4:	f106 38ff 	add.w	r8, r6, #4294967295
 800d8d8:	f1bb 0f00 	cmp.w	fp, #0
 800d8dc:	d133      	bne.n	800d946 <__gethex+0x356>
 800d8de:	f1b8 0f00 	cmp.w	r8, #0
 800d8e2:	d004      	beq.n	800d8ee <__gethex+0x2fe>
 800d8e4:	4641      	mov	r1, r8
 800d8e6:	4620      	mov	r0, r4
 800d8e8:	f7fe fd33 	bl	800c352 <__any_on>
 800d8ec:	4683      	mov	fp, r0
 800d8ee:	ea4f 1268 	mov.w	r2, r8, asr #5
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800d8f8:	f008 081f 	and.w	r8, r8, #31
 800d8fc:	fa03 f308 	lsl.w	r3, r3, r8
 800d900:	4213      	tst	r3, r2
 800d902:	4631      	mov	r1, r6
 800d904:	4620      	mov	r0, r4
 800d906:	bf18      	it	ne
 800d908:	f04b 0b02 	orrne.w	fp, fp, #2
 800d90c:	1bad      	subs	r5, r5, r6
 800d90e:	f7ff fe07 	bl	800d520 <rshift>
 800d912:	687e      	ldr	r6, [r7, #4]
 800d914:	f04f 0802 	mov.w	r8, #2
 800d918:	f1bb 0f00 	cmp.w	fp, #0
 800d91c:	d04a      	beq.n	800d9b4 <__gethex+0x3c4>
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2b02      	cmp	r3, #2
 800d922:	d016      	beq.n	800d952 <__gethex+0x362>
 800d924:	2b03      	cmp	r3, #3
 800d926:	d018      	beq.n	800d95a <__gethex+0x36a>
 800d928:	2b01      	cmp	r3, #1
 800d92a:	d109      	bne.n	800d940 <__gethex+0x350>
 800d92c:	f01b 0f02 	tst.w	fp, #2
 800d930:	d006      	beq.n	800d940 <__gethex+0x350>
 800d932:	f8da 3000 	ldr.w	r3, [sl]
 800d936:	ea4b 0b03 	orr.w	fp, fp, r3
 800d93a:	f01b 0f01 	tst.w	fp, #1
 800d93e:	d10f      	bne.n	800d960 <__gethex+0x370>
 800d940:	f048 0810 	orr.w	r8, r8, #16
 800d944:	e036      	b.n	800d9b4 <__gethex+0x3c4>
 800d946:	f04f 0b01 	mov.w	fp, #1
 800d94a:	e7d0      	b.n	800d8ee <__gethex+0x2fe>
 800d94c:	f04f 0801 	mov.w	r8, #1
 800d950:	e7e2      	b.n	800d918 <__gethex+0x328>
 800d952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d954:	f1c3 0301 	rsb	r3, r3, #1
 800d958:	930f      	str	r3, [sp, #60]	; 0x3c
 800d95a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d0ef      	beq.n	800d940 <__gethex+0x350>
 800d960:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d964:	f104 0214 	add.w	r2, r4, #20
 800d968:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800d972:	2300      	movs	r3, #0
 800d974:	4694      	mov	ip, r2
 800d976:	f852 1b04 	ldr.w	r1, [r2], #4
 800d97a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800d97e:	d01e      	beq.n	800d9be <__gethex+0x3ce>
 800d980:	3101      	adds	r1, #1
 800d982:	f8cc 1000 	str.w	r1, [ip]
 800d986:	f1b8 0f02 	cmp.w	r8, #2
 800d98a:	f104 0214 	add.w	r2, r4, #20
 800d98e:	d13d      	bne.n	800da0c <__gethex+0x41c>
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	3b01      	subs	r3, #1
 800d994:	42ab      	cmp	r3, r5
 800d996:	d10b      	bne.n	800d9b0 <__gethex+0x3c0>
 800d998:	1169      	asrs	r1, r5, #5
 800d99a:	2301      	movs	r3, #1
 800d99c:	f005 051f 	and.w	r5, r5, #31
 800d9a0:	fa03 f505 	lsl.w	r5, r3, r5
 800d9a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9a8:	421d      	tst	r5, r3
 800d9aa:	bf18      	it	ne
 800d9ac:	f04f 0801 	movne.w	r8, #1
 800d9b0:	f048 0820 	orr.w	r8, r8, #32
 800d9b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9b6:	601c      	str	r4, [r3, #0]
 800d9b8:	9b02      	ldr	r3, [sp, #8]
 800d9ba:	601e      	str	r6, [r3, #0]
 800d9bc:	e6a2      	b.n	800d704 <__gethex+0x114>
 800d9be:	4290      	cmp	r0, r2
 800d9c0:	f842 3c04 	str.w	r3, [r2, #-4]
 800d9c4:	d8d6      	bhi.n	800d974 <__gethex+0x384>
 800d9c6:	68a2      	ldr	r2, [r4, #8]
 800d9c8:	4593      	cmp	fp, r2
 800d9ca:	db17      	blt.n	800d9fc <__gethex+0x40c>
 800d9cc:	6861      	ldr	r1, [r4, #4]
 800d9ce:	4648      	mov	r0, r9
 800d9d0:	3101      	adds	r1, #1
 800d9d2:	f7fe f835 	bl	800ba40 <_Balloc>
 800d9d6:	4682      	mov	sl, r0
 800d9d8:	b918      	cbnz	r0, 800d9e2 <__gethex+0x3f2>
 800d9da:	4b1b      	ldr	r3, [pc, #108]	; (800da48 <__gethex+0x458>)
 800d9dc:	4602      	mov	r2, r0
 800d9de:	2184      	movs	r1, #132	; 0x84
 800d9e0:	e6b3      	b.n	800d74a <__gethex+0x15a>
 800d9e2:	6922      	ldr	r2, [r4, #16]
 800d9e4:	3202      	adds	r2, #2
 800d9e6:	f104 010c 	add.w	r1, r4, #12
 800d9ea:	0092      	lsls	r2, r2, #2
 800d9ec:	300c      	adds	r0, #12
 800d9ee:	f7fd f9d2 	bl	800ad96 <memcpy>
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	4648      	mov	r0, r9
 800d9f6:	f7fe f863 	bl	800bac0 <_Bfree>
 800d9fa:	4654      	mov	r4, sl
 800d9fc:	6922      	ldr	r2, [r4, #16]
 800d9fe:	1c51      	adds	r1, r2, #1
 800da00:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800da04:	6121      	str	r1, [r4, #16]
 800da06:	2101      	movs	r1, #1
 800da08:	6151      	str	r1, [r2, #20]
 800da0a:	e7bc      	b.n	800d986 <__gethex+0x396>
 800da0c:	6921      	ldr	r1, [r4, #16]
 800da0e:	4559      	cmp	r1, fp
 800da10:	dd0b      	ble.n	800da2a <__gethex+0x43a>
 800da12:	2101      	movs	r1, #1
 800da14:	4620      	mov	r0, r4
 800da16:	f7ff fd83 	bl	800d520 <rshift>
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	3601      	adds	r6, #1
 800da1e:	42b3      	cmp	r3, r6
 800da20:	f6ff aedb 	blt.w	800d7da <__gethex+0x1ea>
 800da24:	f04f 0801 	mov.w	r8, #1
 800da28:	e7c2      	b.n	800d9b0 <__gethex+0x3c0>
 800da2a:	f015 051f 	ands.w	r5, r5, #31
 800da2e:	d0f9      	beq.n	800da24 <__gethex+0x434>
 800da30:	9b01      	ldr	r3, [sp, #4]
 800da32:	441a      	add	r2, r3
 800da34:	f1c5 0520 	rsb	r5, r5, #32
 800da38:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800da3c:	f7fe f8f2 	bl	800bc24 <__hi0bits>
 800da40:	42a8      	cmp	r0, r5
 800da42:	dbe6      	blt.n	800da12 <__gethex+0x422>
 800da44:	e7ee      	b.n	800da24 <__gethex+0x434>
 800da46:	bf00      	nop
 800da48:	0800e491 	.word	0x0800e491

0800da4c <L_shift>:
 800da4c:	f1c2 0208 	rsb	r2, r2, #8
 800da50:	0092      	lsls	r2, r2, #2
 800da52:	b570      	push	{r4, r5, r6, lr}
 800da54:	f1c2 0620 	rsb	r6, r2, #32
 800da58:	6843      	ldr	r3, [r0, #4]
 800da5a:	6804      	ldr	r4, [r0, #0]
 800da5c:	fa03 f506 	lsl.w	r5, r3, r6
 800da60:	432c      	orrs	r4, r5
 800da62:	40d3      	lsrs	r3, r2
 800da64:	6004      	str	r4, [r0, #0]
 800da66:	f840 3f04 	str.w	r3, [r0, #4]!
 800da6a:	4288      	cmp	r0, r1
 800da6c:	d3f4      	bcc.n	800da58 <L_shift+0xc>
 800da6e:	bd70      	pop	{r4, r5, r6, pc}

0800da70 <__match>:
 800da70:	b530      	push	{r4, r5, lr}
 800da72:	6803      	ldr	r3, [r0, #0]
 800da74:	3301      	adds	r3, #1
 800da76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da7a:	b914      	cbnz	r4, 800da82 <__match+0x12>
 800da7c:	6003      	str	r3, [r0, #0]
 800da7e:	2001      	movs	r0, #1
 800da80:	bd30      	pop	{r4, r5, pc}
 800da82:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800da8a:	2d19      	cmp	r5, #25
 800da8c:	bf98      	it	ls
 800da8e:	3220      	addls	r2, #32
 800da90:	42a2      	cmp	r2, r4
 800da92:	d0f0      	beq.n	800da76 <__match+0x6>
 800da94:	2000      	movs	r0, #0
 800da96:	e7f3      	b.n	800da80 <__match+0x10>

0800da98 <__hexnan>:
 800da98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da9c:	680b      	ldr	r3, [r1, #0]
 800da9e:	6801      	ldr	r1, [r0, #0]
 800daa0:	115e      	asrs	r6, r3, #5
 800daa2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800daa6:	f013 031f 	ands.w	r3, r3, #31
 800daaa:	b087      	sub	sp, #28
 800daac:	bf18      	it	ne
 800daae:	3604      	addne	r6, #4
 800dab0:	2500      	movs	r5, #0
 800dab2:	1f37      	subs	r7, r6, #4
 800dab4:	4682      	mov	sl, r0
 800dab6:	4690      	mov	r8, r2
 800dab8:	9301      	str	r3, [sp, #4]
 800daba:	f846 5c04 	str.w	r5, [r6, #-4]
 800dabe:	46b9      	mov	r9, r7
 800dac0:	463c      	mov	r4, r7
 800dac2:	9502      	str	r5, [sp, #8]
 800dac4:	46ab      	mov	fp, r5
 800dac6:	784a      	ldrb	r2, [r1, #1]
 800dac8:	1c4b      	adds	r3, r1, #1
 800daca:	9303      	str	r3, [sp, #12]
 800dacc:	b342      	cbz	r2, 800db20 <__hexnan+0x88>
 800dace:	4610      	mov	r0, r2
 800dad0:	9105      	str	r1, [sp, #20]
 800dad2:	9204      	str	r2, [sp, #16]
 800dad4:	f7ff fd76 	bl	800d5c4 <__hexdig_fun>
 800dad8:	2800      	cmp	r0, #0
 800dada:	d14f      	bne.n	800db7c <__hexnan+0xe4>
 800dadc:	9a04      	ldr	r2, [sp, #16]
 800dade:	9905      	ldr	r1, [sp, #20]
 800dae0:	2a20      	cmp	r2, #32
 800dae2:	d818      	bhi.n	800db16 <__hexnan+0x7e>
 800dae4:	9b02      	ldr	r3, [sp, #8]
 800dae6:	459b      	cmp	fp, r3
 800dae8:	dd13      	ble.n	800db12 <__hexnan+0x7a>
 800daea:	454c      	cmp	r4, r9
 800daec:	d206      	bcs.n	800dafc <__hexnan+0x64>
 800daee:	2d07      	cmp	r5, #7
 800daf0:	dc04      	bgt.n	800dafc <__hexnan+0x64>
 800daf2:	462a      	mov	r2, r5
 800daf4:	4649      	mov	r1, r9
 800daf6:	4620      	mov	r0, r4
 800daf8:	f7ff ffa8 	bl	800da4c <L_shift>
 800dafc:	4544      	cmp	r4, r8
 800dafe:	d950      	bls.n	800dba2 <__hexnan+0x10a>
 800db00:	2300      	movs	r3, #0
 800db02:	f1a4 0904 	sub.w	r9, r4, #4
 800db06:	f844 3c04 	str.w	r3, [r4, #-4]
 800db0a:	f8cd b008 	str.w	fp, [sp, #8]
 800db0e:	464c      	mov	r4, r9
 800db10:	461d      	mov	r5, r3
 800db12:	9903      	ldr	r1, [sp, #12]
 800db14:	e7d7      	b.n	800dac6 <__hexnan+0x2e>
 800db16:	2a29      	cmp	r2, #41	; 0x29
 800db18:	d155      	bne.n	800dbc6 <__hexnan+0x12e>
 800db1a:	3102      	adds	r1, #2
 800db1c:	f8ca 1000 	str.w	r1, [sl]
 800db20:	f1bb 0f00 	cmp.w	fp, #0
 800db24:	d04f      	beq.n	800dbc6 <__hexnan+0x12e>
 800db26:	454c      	cmp	r4, r9
 800db28:	d206      	bcs.n	800db38 <__hexnan+0xa0>
 800db2a:	2d07      	cmp	r5, #7
 800db2c:	dc04      	bgt.n	800db38 <__hexnan+0xa0>
 800db2e:	462a      	mov	r2, r5
 800db30:	4649      	mov	r1, r9
 800db32:	4620      	mov	r0, r4
 800db34:	f7ff ff8a 	bl	800da4c <L_shift>
 800db38:	4544      	cmp	r4, r8
 800db3a:	d934      	bls.n	800dba6 <__hexnan+0x10e>
 800db3c:	f1a8 0204 	sub.w	r2, r8, #4
 800db40:	4623      	mov	r3, r4
 800db42:	f853 1b04 	ldr.w	r1, [r3], #4
 800db46:	f842 1f04 	str.w	r1, [r2, #4]!
 800db4a:	429f      	cmp	r7, r3
 800db4c:	d2f9      	bcs.n	800db42 <__hexnan+0xaa>
 800db4e:	1b3b      	subs	r3, r7, r4
 800db50:	f023 0303 	bic.w	r3, r3, #3
 800db54:	3304      	adds	r3, #4
 800db56:	3e03      	subs	r6, #3
 800db58:	3401      	adds	r4, #1
 800db5a:	42a6      	cmp	r6, r4
 800db5c:	bf38      	it	cc
 800db5e:	2304      	movcc	r3, #4
 800db60:	4443      	add	r3, r8
 800db62:	2200      	movs	r2, #0
 800db64:	f843 2b04 	str.w	r2, [r3], #4
 800db68:	429f      	cmp	r7, r3
 800db6a:	d2fb      	bcs.n	800db64 <__hexnan+0xcc>
 800db6c:	683b      	ldr	r3, [r7, #0]
 800db6e:	b91b      	cbnz	r3, 800db78 <__hexnan+0xe0>
 800db70:	4547      	cmp	r7, r8
 800db72:	d126      	bne.n	800dbc2 <__hexnan+0x12a>
 800db74:	2301      	movs	r3, #1
 800db76:	603b      	str	r3, [r7, #0]
 800db78:	2005      	movs	r0, #5
 800db7a:	e025      	b.n	800dbc8 <__hexnan+0x130>
 800db7c:	3501      	adds	r5, #1
 800db7e:	2d08      	cmp	r5, #8
 800db80:	f10b 0b01 	add.w	fp, fp, #1
 800db84:	dd06      	ble.n	800db94 <__hexnan+0xfc>
 800db86:	4544      	cmp	r4, r8
 800db88:	d9c3      	bls.n	800db12 <__hexnan+0x7a>
 800db8a:	2300      	movs	r3, #0
 800db8c:	f844 3c04 	str.w	r3, [r4, #-4]
 800db90:	2501      	movs	r5, #1
 800db92:	3c04      	subs	r4, #4
 800db94:	6822      	ldr	r2, [r4, #0]
 800db96:	f000 000f 	and.w	r0, r0, #15
 800db9a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800db9e:	6020      	str	r0, [r4, #0]
 800dba0:	e7b7      	b.n	800db12 <__hexnan+0x7a>
 800dba2:	2508      	movs	r5, #8
 800dba4:	e7b5      	b.n	800db12 <__hexnan+0x7a>
 800dba6:	9b01      	ldr	r3, [sp, #4]
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d0df      	beq.n	800db6c <__hexnan+0xd4>
 800dbac:	f1c3 0320 	rsb	r3, r3, #32
 800dbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb4:	40da      	lsrs	r2, r3
 800dbb6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800dbba:	4013      	ands	r3, r2
 800dbbc:	f846 3c04 	str.w	r3, [r6, #-4]
 800dbc0:	e7d4      	b.n	800db6c <__hexnan+0xd4>
 800dbc2:	3f04      	subs	r7, #4
 800dbc4:	e7d2      	b.n	800db6c <__hexnan+0xd4>
 800dbc6:	2004      	movs	r0, #4
 800dbc8:	b007      	add	sp, #28
 800dbca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dbce <__ascii_mbtowc>:
 800dbce:	b082      	sub	sp, #8
 800dbd0:	b901      	cbnz	r1, 800dbd4 <__ascii_mbtowc+0x6>
 800dbd2:	a901      	add	r1, sp, #4
 800dbd4:	b142      	cbz	r2, 800dbe8 <__ascii_mbtowc+0x1a>
 800dbd6:	b14b      	cbz	r3, 800dbec <__ascii_mbtowc+0x1e>
 800dbd8:	7813      	ldrb	r3, [r2, #0]
 800dbda:	600b      	str	r3, [r1, #0]
 800dbdc:	7812      	ldrb	r2, [r2, #0]
 800dbde:	1e10      	subs	r0, r2, #0
 800dbe0:	bf18      	it	ne
 800dbe2:	2001      	movne	r0, #1
 800dbe4:	b002      	add	sp, #8
 800dbe6:	4770      	bx	lr
 800dbe8:	4610      	mov	r0, r2
 800dbea:	e7fb      	b.n	800dbe4 <__ascii_mbtowc+0x16>
 800dbec:	f06f 0001 	mvn.w	r0, #1
 800dbf0:	e7f8      	b.n	800dbe4 <__ascii_mbtowc+0x16>

0800dbf2 <_realloc_r>:
 800dbf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dbf6:	4680      	mov	r8, r0
 800dbf8:	4614      	mov	r4, r2
 800dbfa:	460e      	mov	r6, r1
 800dbfc:	b921      	cbnz	r1, 800dc08 <_realloc_r+0x16>
 800dbfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dc02:	4611      	mov	r1, r2
 800dc04:	f7fc b848 	b.w	8009c98 <_malloc_r>
 800dc08:	b92a      	cbnz	r2, 800dc16 <_realloc_r+0x24>
 800dc0a:	f7fd fecd 	bl	800b9a8 <_free_r>
 800dc0e:	4625      	mov	r5, r4
 800dc10:	4628      	mov	r0, r5
 800dc12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc16:	f000 f842 	bl	800dc9e <_malloc_usable_size_r>
 800dc1a:	4284      	cmp	r4, r0
 800dc1c:	4607      	mov	r7, r0
 800dc1e:	d802      	bhi.n	800dc26 <_realloc_r+0x34>
 800dc20:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dc24:	d812      	bhi.n	800dc4c <_realloc_r+0x5a>
 800dc26:	4621      	mov	r1, r4
 800dc28:	4640      	mov	r0, r8
 800dc2a:	f7fc f835 	bl	8009c98 <_malloc_r>
 800dc2e:	4605      	mov	r5, r0
 800dc30:	2800      	cmp	r0, #0
 800dc32:	d0ed      	beq.n	800dc10 <_realloc_r+0x1e>
 800dc34:	42bc      	cmp	r4, r7
 800dc36:	4622      	mov	r2, r4
 800dc38:	4631      	mov	r1, r6
 800dc3a:	bf28      	it	cs
 800dc3c:	463a      	movcs	r2, r7
 800dc3e:	f7fd f8aa 	bl	800ad96 <memcpy>
 800dc42:	4631      	mov	r1, r6
 800dc44:	4640      	mov	r0, r8
 800dc46:	f7fd feaf 	bl	800b9a8 <_free_r>
 800dc4a:	e7e1      	b.n	800dc10 <_realloc_r+0x1e>
 800dc4c:	4635      	mov	r5, r6
 800dc4e:	e7df      	b.n	800dc10 <_realloc_r+0x1e>

0800dc50 <__ascii_wctomb>:
 800dc50:	b149      	cbz	r1, 800dc66 <__ascii_wctomb+0x16>
 800dc52:	2aff      	cmp	r2, #255	; 0xff
 800dc54:	bf85      	ittet	hi
 800dc56:	238a      	movhi	r3, #138	; 0x8a
 800dc58:	6003      	strhi	r3, [r0, #0]
 800dc5a:	700a      	strbls	r2, [r1, #0]
 800dc5c:	f04f 30ff 	movhi.w	r0, #4294967295
 800dc60:	bf98      	it	ls
 800dc62:	2001      	movls	r0, #1
 800dc64:	4770      	bx	lr
 800dc66:	4608      	mov	r0, r1
 800dc68:	4770      	bx	lr
	...

0800dc6c <fiprintf>:
 800dc6c:	b40e      	push	{r1, r2, r3}
 800dc6e:	b503      	push	{r0, r1, lr}
 800dc70:	4601      	mov	r1, r0
 800dc72:	ab03      	add	r3, sp, #12
 800dc74:	4805      	ldr	r0, [pc, #20]	; (800dc8c <fiprintf+0x20>)
 800dc76:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc7a:	6800      	ldr	r0, [r0, #0]
 800dc7c:	9301      	str	r3, [sp, #4]
 800dc7e:	f000 f83f 	bl	800dd00 <_vfiprintf_r>
 800dc82:	b002      	add	sp, #8
 800dc84:	f85d eb04 	ldr.w	lr, [sp], #4
 800dc88:	b003      	add	sp, #12
 800dc8a:	4770      	bx	lr
 800dc8c:	20000104 	.word	0x20000104

0800dc90 <abort>:
 800dc90:	b508      	push	{r3, lr}
 800dc92:	2006      	movs	r0, #6
 800dc94:	f000 fa0c 	bl	800e0b0 <raise>
 800dc98:	2001      	movs	r0, #1
 800dc9a:	f7f4 fa27 	bl	80020ec <_exit>

0800dc9e <_malloc_usable_size_r>:
 800dc9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dca2:	1f18      	subs	r0, r3, #4
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	bfbc      	itt	lt
 800dca8:	580b      	ldrlt	r3, [r1, r0]
 800dcaa:	18c0      	addlt	r0, r0, r3
 800dcac:	4770      	bx	lr

0800dcae <__sfputc_r>:
 800dcae:	6893      	ldr	r3, [r2, #8]
 800dcb0:	3b01      	subs	r3, #1
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	b410      	push	{r4}
 800dcb6:	6093      	str	r3, [r2, #8]
 800dcb8:	da08      	bge.n	800dccc <__sfputc_r+0x1e>
 800dcba:	6994      	ldr	r4, [r2, #24]
 800dcbc:	42a3      	cmp	r3, r4
 800dcbe:	db01      	blt.n	800dcc4 <__sfputc_r+0x16>
 800dcc0:	290a      	cmp	r1, #10
 800dcc2:	d103      	bne.n	800dccc <__sfputc_r+0x1e>
 800dcc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcc8:	f000 b934 	b.w	800df34 <__swbuf_r>
 800dccc:	6813      	ldr	r3, [r2, #0]
 800dcce:	1c58      	adds	r0, r3, #1
 800dcd0:	6010      	str	r0, [r2, #0]
 800dcd2:	7019      	strb	r1, [r3, #0]
 800dcd4:	4608      	mov	r0, r1
 800dcd6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dcda:	4770      	bx	lr

0800dcdc <__sfputs_r>:
 800dcdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcde:	4606      	mov	r6, r0
 800dce0:	460f      	mov	r7, r1
 800dce2:	4614      	mov	r4, r2
 800dce4:	18d5      	adds	r5, r2, r3
 800dce6:	42ac      	cmp	r4, r5
 800dce8:	d101      	bne.n	800dcee <__sfputs_r+0x12>
 800dcea:	2000      	movs	r0, #0
 800dcec:	e007      	b.n	800dcfe <__sfputs_r+0x22>
 800dcee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcf2:	463a      	mov	r2, r7
 800dcf4:	4630      	mov	r0, r6
 800dcf6:	f7ff ffda 	bl	800dcae <__sfputc_r>
 800dcfa:	1c43      	adds	r3, r0, #1
 800dcfc:	d1f3      	bne.n	800dce6 <__sfputs_r+0xa>
 800dcfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800dd00 <_vfiprintf_r>:
 800dd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd04:	460d      	mov	r5, r1
 800dd06:	b09d      	sub	sp, #116	; 0x74
 800dd08:	4614      	mov	r4, r2
 800dd0a:	4698      	mov	r8, r3
 800dd0c:	4606      	mov	r6, r0
 800dd0e:	b118      	cbz	r0, 800dd18 <_vfiprintf_r+0x18>
 800dd10:	6a03      	ldr	r3, [r0, #32]
 800dd12:	b90b      	cbnz	r3, 800dd18 <_vfiprintf_r+0x18>
 800dd14:	f7fc ff16 	bl	800ab44 <__sinit>
 800dd18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd1a:	07d9      	lsls	r1, r3, #31
 800dd1c:	d405      	bmi.n	800dd2a <_vfiprintf_r+0x2a>
 800dd1e:	89ab      	ldrh	r3, [r5, #12]
 800dd20:	059a      	lsls	r2, r3, #22
 800dd22:	d402      	bmi.n	800dd2a <_vfiprintf_r+0x2a>
 800dd24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd26:	f7fd f834 	bl	800ad92 <__retarget_lock_acquire_recursive>
 800dd2a:	89ab      	ldrh	r3, [r5, #12]
 800dd2c:	071b      	lsls	r3, r3, #28
 800dd2e:	d501      	bpl.n	800dd34 <_vfiprintf_r+0x34>
 800dd30:	692b      	ldr	r3, [r5, #16]
 800dd32:	b99b      	cbnz	r3, 800dd5c <_vfiprintf_r+0x5c>
 800dd34:	4629      	mov	r1, r5
 800dd36:	4630      	mov	r0, r6
 800dd38:	f000 f93a 	bl	800dfb0 <__swsetup_r>
 800dd3c:	b170      	cbz	r0, 800dd5c <_vfiprintf_r+0x5c>
 800dd3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd40:	07dc      	lsls	r4, r3, #31
 800dd42:	d504      	bpl.n	800dd4e <_vfiprintf_r+0x4e>
 800dd44:	f04f 30ff 	mov.w	r0, #4294967295
 800dd48:	b01d      	add	sp, #116	; 0x74
 800dd4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd4e:	89ab      	ldrh	r3, [r5, #12]
 800dd50:	0598      	lsls	r0, r3, #22
 800dd52:	d4f7      	bmi.n	800dd44 <_vfiprintf_r+0x44>
 800dd54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd56:	f7fd f81d 	bl	800ad94 <__retarget_lock_release_recursive>
 800dd5a:	e7f3      	b.n	800dd44 <_vfiprintf_r+0x44>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	9309      	str	r3, [sp, #36]	; 0x24
 800dd60:	2320      	movs	r3, #32
 800dd62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dd66:	f8cd 800c 	str.w	r8, [sp, #12]
 800dd6a:	2330      	movs	r3, #48	; 0x30
 800dd6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800df20 <_vfiprintf_r+0x220>
 800dd70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dd74:	f04f 0901 	mov.w	r9, #1
 800dd78:	4623      	mov	r3, r4
 800dd7a:	469a      	mov	sl, r3
 800dd7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dd80:	b10a      	cbz	r2, 800dd86 <_vfiprintf_r+0x86>
 800dd82:	2a25      	cmp	r2, #37	; 0x25
 800dd84:	d1f9      	bne.n	800dd7a <_vfiprintf_r+0x7a>
 800dd86:	ebba 0b04 	subs.w	fp, sl, r4
 800dd8a:	d00b      	beq.n	800dda4 <_vfiprintf_r+0xa4>
 800dd8c:	465b      	mov	r3, fp
 800dd8e:	4622      	mov	r2, r4
 800dd90:	4629      	mov	r1, r5
 800dd92:	4630      	mov	r0, r6
 800dd94:	f7ff ffa2 	bl	800dcdc <__sfputs_r>
 800dd98:	3001      	adds	r0, #1
 800dd9a:	f000 80a9 	beq.w	800def0 <_vfiprintf_r+0x1f0>
 800dd9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dda0:	445a      	add	r2, fp
 800dda2:	9209      	str	r2, [sp, #36]	; 0x24
 800dda4:	f89a 3000 	ldrb.w	r3, [sl]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	f000 80a1 	beq.w	800def0 <_vfiprintf_r+0x1f0>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	f04f 32ff 	mov.w	r2, #4294967295
 800ddb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ddb8:	f10a 0a01 	add.w	sl, sl, #1
 800ddbc:	9304      	str	r3, [sp, #16]
 800ddbe:	9307      	str	r3, [sp, #28]
 800ddc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ddc4:	931a      	str	r3, [sp, #104]	; 0x68
 800ddc6:	4654      	mov	r4, sl
 800ddc8:	2205      	movs	r2, #5
 800ddca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddce:	4854      	ldr	r0, [pc, #336]	; (800df20 <_vfiprintf_r+0x220>)
 800ddd0:	f7f2 fa36 	bl	8000240 <memchr>
 800ddd4:	9a04      	ldr	r2, [sp, #16]
 800ddd6:	b9d8      	cbnz	r0, 800de10 <_vfiprintf_r+0x110>
 800ddd8:	06d1      	lsls	r1, r2, #27
 800ddda:	bf44      	itt	mi
 800dddc:	2320      	movmi	r3, #32
 800ddde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dde2:	0713      	lsls	r3, r2, #28
 800dde4:	bf44      	itt	mi
 800dde6:	232b      	movmi	r3, #43	; 0x2b
 800dde8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ddec:	f89a 3000 	ldrb.w	r3, [sl]
 800ddf0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddf2:	d015      	beq.n	800de20 <_vfiprintf_r+0x120>
 800ddf4:	9a07      	ldr	r2, [sp, #28]
 800ddf6:	4654      	mov	r4, sl
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	f04f 0c0a 	mov.w	ip, #10
 800ddfe:	4621      	mov	r1, r4
 800de00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de04:	3b30      	subs	r3, #48	; 0x30
 800de06:	2b09      	cmp	r3, #9
 800de08:	d94d      	bls.n	800dea6 <_vfiprintf_r+0x1a6>
 800de0a:	b1b0      	cbz	r0, 800de3a <_vfiprintf_r+0x13a>
 800de0c:	9207      	str	r2, [sp, #28]
 800de0e:	e014      	b.n	800de3a <_vfiprintf_r+0x13a>
 800de10:	eba0 0308 	sub.w	r3, r0, r8
 800de14:	fa09 f303 	lsl.w	r3, r9, r3
 800de18:	4313      	orrs	r3, r2
 800de1a:	9304      	str	r3, [sp, #16]
 800de1c:	46a2      	mov	sl, r4
 800de1e:	e7d2      	b.n	800ddc6 <_vfiprintf_r+0xc6>
 800de20:	9b03      	ldr	r3, [sp, #12]
 800de22:	1d19      	adds	r1, r3, #4
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	9103      	str	r1, [sp, #12]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	bfbb      	ittet	lt
 800de2c:	425b      	neglt	r3, r3
 800de2e:	f042 0202 	orrlt.w	r2, r2, #2
 800de32:	9307      	strge	r3, [sp, #28]
 800de34:	9307      	strlt	r3, [sp, #28]
 800de36:	bfb8      	it	lt
 800de38:	9204      	strlt	r2, [sp, #16]
 800de3a:	7823      	ldrb	r3, [r4, #0]
 800de3c:	2b2e      	cmp	r3, #46	; 0x2e
 800de3e:	d10c      	bne.n	800de5a <_vfiprintf_r+0x15a>
 800de40:	7863      	ldrb	r3, [r4, #1]
 800de42:	2b2a      	cmp	r3, #42	; 0x2a
 800de44:	d134      	bne.n	800deb0 <_vfiprintf_r+0x1b0>
 800de46:	9b03      	ldr	r3, [sp, #12]
 800de48:	1d1a      	adds	r2, r3, #4
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	9203      	str	r2, [sp, #12]
 800de4e:	2b00      	cmp	r3, #0
 800de50:	bfb8      	it	lt
 800de52:	f04f 33ff 	movlt.w	r3, #4294967295
 800de56:	3402      	adds	r4, #2
 800de58:	9305      	str	r3, [sp, #20]
 800de5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800df30 <_vfiprintf_r+0x230>
 800de5e:	7821      	ldrb	r1, [r4, #0]
 800de60:	2203      	movs	r2, #3
 800de62:	4650      	mov	r0, sl
 800de64:	f7f2 f9ec 	bl	8000240 <memchr>
 800de68:	b138      	cbz	r0, 800de7a <_vfiprintf_r+0x17a>
 800de6a:	9b04      	ldr	r3, [sp, #16]
 800de6c:	eba0 000a 	sub.w	r0, r0, sl
 800de70:	2240      	movs	r2, #64	; 0x40
 800de72:	4082      	lsls	r2, r0
 800de74:	4313      	orrs	r3, r2
 800de76:	3401      	adds	r4, #1
 800de78:	9304      	str	r3, [sp, #16]
 800de7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de7e:	4829      	ldr	r0, [pc, #164]	; (800df24 <_vfiprintf_r+0x224>)
 800de80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800de84:	2206      	movs	r2, #6
 800de86:	f7f2 f9db 	bl	8000240 <memchr>
 800de8a:	2800      	cmp	r0, #0
 800de8c:	d03f      	beq.n	800df0e <_vfiprintf_r+0x20e>
 800de8e:	4b26      	ldr	r3, [pc, #152]	; (800df28 <_vfiprintf_r+0x228>)
 800de90:	bb1b      	cbnz	r3, 800deda <_vfiprintf_r+0x1da>
 800de92:	9b03      	ldr	r3, [sp, #12]
 800de94:	3307      	adds	r3, #7
 800de96:	f023 0307 	bic.w	r3, r3, #7
 800de9a:	3308      	adds	r3, #8
 800de9c:	9303      	str	r3, [sp, #12]
 800de9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dea0:	443b      	add	r3, r7
 800dea2:	9309      	str	r3, [sp, #36]	; 0x24
 800dea4:	e768      	b.n	800dd78 <_vfiprintf_r+0x78>
 800dea6:	fb0c 3202 	mla	r2, ip, r2, r3
 800deaa:	460c      	mov	r4, r1
 800deac:	2001      	movs	r0, #1
 800deae:	e7a6      	b.n	800ddfe <_vfiprintf_r+0xfe>
 800deb0:	2300      	movs	r3, #0
 800deb2:	3401      	adds	r4, #1
 800deb4:	9305      	str	r3, [sp, #20]
 800deb6:	4619      	mov	r1, r3
 800deb8:	f04f 0c0a 	mov.w	ip, #10
 800debc:	4620      	mov	r0, r4
 800debe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dec2:	3a30      	subs	r2, #48	; 0x30
 800dec4:	2a09      	cmp	r2, #9
 800dec6:	d903      	bls.n	800ded0 <_vfiprintf_r+0x1d0>
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d0c6      	beq.n	800de5a <_vfiprintf_r+0x15a>
 800decc:	9105      	str	r1, [sp, #20]
 800dece:	e7c4      	b.n	800de5a <_vfiprintf_r+0x15a>
 800ded0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ded4:	4604      	mov	r4, r0
 800ded6:	2301      	movs	r3, #1
 800ded8:	e7f0      	b.n	800debc <_vfiprintf_r+0x1bc>
 800deda:	ab03      	add	r3, sp, #12
 800dedc:	9300      	str	r3, [sp, #0]
 800dede:	462a      	mov	r2, r5
 800dee0:	4b12      	ldr	r3, [pc, #72]	; (800df2c <_vfiprintf_r+0x22c>)
 800dee2:	a904      	add	r1, sp, #16
 800dee4:	4630      	mov	r0, r6
 800dee6:	f7fb fff3 	bl	8009ed0 <_printf_float>
 800deea:	4607      	mov	r7, r0
 800deec:	1c78      	adds	r0, r7, #1
 800deee:	d1d6      	bne.n	800de9e <_vfiprintf_r+0x19e>
 800def0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800def2:	07d9      	lsls	r1, r3, #31
 800def4:	d405      	bmi.n	800df02 <_vfiprintf_r+0x202>
 800def6:	89ab      	ldrh	r3, [r5, #12]
 800def8:	059a      	lsls	r2, r3, #22
 800defa:	d402      	bmi.n	800df02 <_vfiprintf_r+0x202>
 800defc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800defe:	f7fc ff49 	bl	800ad94 <__retarget_lock_release_recursive>
 800df02:	89ab      	ldrh	r3, [r5, #12]
 800df04:	065b      	lsls	r3, r3, #25
 800df06:	f53f af1d 	bmi.w	800dd44 <_vfiprintf_r+0x44>
 800df0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df0c:	e71c      	b.n	800dd48 <_vfiprintf_r+0x48>
 800df0e:	ab03      	add	r3, sp, #12
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	462a      	mov	r2, r5
 800df14:	4b05      	ldr	r3, [pc, #20]	; (800df2c <_vfiprintf_r+0x22c>)
 800df16:	a904      	add	r1, sp, #16
 800df18:	4630      	mov	r0, r6
 800df1a:	f7fc fa61 	bl	800a3e0 <_printf_i>
 800df1e:	e7e4      	b.n	800deea <_vfiprintf_r+0x1ea>
 800df20:	0800e751 	.word	0x0800e751
 800df24:	0800e75b 	.word	0x0800e75b
 800df28:	08009ed1 	.word	0x08009ed1
 800df2c:	0800dcdd 	.word	0x0800dcdd
 800df30:	0800e757 	.word	0x0800e757

0800df34 <__swbuf_r>:
 800df34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df36:	460e      	mov	r6, r1
 800df38:	4614      	mov	r4, r2
 800df3a:	4605      	mov	r5, r0
 800df3c:	b118      	cbz	r0, 800df46 <__swbuf_r+0x12>
 800df3e:	6a03      	ldr	r3, [r0, #32]
 800df40:	b90b      	cbnz	r3, 800df46 <__swbuf_r+0x12>
 800df42:	f7fc fdff 	bl	800ab44 <__sinit>
 800df46:	69a3      	ldr	r3, [r4, #24]
 800df48:	60a3      	str	r3, [r4, #8]
 800df4a:	89a3      	ldrh	r3, [r4, #12]
 800df4c:	071a      	lsls	r2, r3, #28
 800df4e:	d525      	bpl.n	800df9c <__swbuf_r+0x68>
 800df50:	6923      	ldr	r3, [r4, #16]
 800df52:	b31b      	cbz	r3, 800df9c <__swbuf_r+0x68>
 800df54:	6823      	ldr	r3, [r4, #0]
 800df56:	6922      	ldr	r2, [r4, #16]
 800df58:	1a98      	subs	r0, r3, r2
 800df5a:	6963      	ldr	r3, [r4, #20]
 800df5c:	b2f6      	uxtb	r6, r6
 800df5e:	4283      	cmp	r3, r0
 800df60:	4637      	mov	r7, r6
 800df62:	dc04      	bgt.n	800df6e <__swbuf_r+0x3a>
 800df64:	4621      	mov	r1, r4
 800df66:	4628      	mov	r0, r5
 800df68:	f7ff fa48 	bl	800d3fc <_fflush_r>
 800df6c:	b9e0      	cbnz	r0, 800dfa8 <__swbuf_r+0x74>
 800df6e:	68a3      	ldr	r3, [r4, #8]
 800df70:	3b01      	subs	r3, #1
 800df72:	60a3      	str	r3, [r4, #8]
 800df74:	6823      	ldr	r3, [r4, #0]
 800df76:	1c5a      	adds	r2, r3, #1
 800df78:	6022      	str	r2, [r4, #0]
 800df7a:	701e      	strb	r6, [r3, #0]
 800df7c:	6962      	ldr	r2, [r4, #20]
 800df7e:	1c43      	adds	r3, r0, #1
 800df80:	429a      	cmp	r2, r3
 800df82:	d004      	beq.n	800df8e <__swbuf_r+0x5a>
 800df84:	89a3      	ldrh	r3, [r4, #12]
 800df86:	07db      	lsls	r3, r3, #31
 800df88:	d506      	bpl.n	800df98 <__swbuf_r+0x64>
 800df8a:	2e0a      	cmp	r6, #10
 800df8c:	d104      	bne.n	800df98 <__swbuf_r+0x64>
 800df8e:	4621      	mov	r1, r4
 800df90:	4628      	mov	r0, r5
 800df92:	f7ff fa33 	bl	800d3fc <_fflush_r>
 800df96:	b938      	cbnz	r0, 800dfa8 <__swbuf_r+0x74>
 800df98:	4638      	mov	r0, r7
 800df9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df9c:	4621      	mov	r1, r4
 800df9e:	4628      	mov	r0, r5
 800dfa0:	f000 f806 	bl	800dfb0 <__swsetup_r>
 800dfa4:	2800      	cmp	r0, #0
 800dfa6:	d0d5      	beq.n	800df54 <__swbuf_r+0x20>
 800dfa8:	f04f 37ff 	mov.w	r7, #4294967295
 800dfac:	e7f4      	b.n	800df98 <__swbuf_r+0x64>
	...

0800dfb0 <__swsetup_r>:
 800dfb0:	b538      	push	{r3, r4, r5, lr}
 800dfb2:	4b2a      	ldr	r3, [pc, #168]	; (800e05c <__swsetup_r+0xac>)
 800dfb4:	4605      	mov	r5, r0
 800dfb6:	6818      	ldr	r0, [r3, #0]
 800dfb8:	460c      	mov	r4, r1
 800dfba:	b118      	cbz	r0, 800dfc4 <__swsetup_r+0x14>
 800dfbc:	6a03      	ldr	r3, [r0, #32]
 800dfbe:	b90b      	cbnz	r3, 800dfc4 <__swsetup_r+0x14>
 800dfc0:	f7fc fdc0 	bl	800ab44 <__sinit>
 800dfc4:	89a3      	ldrh	r3, [r4, #12]
 800dfc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dfca:	0718      	lsls	r0, r3, #28
 800dfcc:	d422      	bmi.n	800e014 <__swsetup_r+0x64>
 800dfce:	06d9      	lsls	r1, r3, #27
 800dfd0:	d407      	bmi.n	800dfe2 <__swsetup_r+0x32>
 800dfd2:	2309      	movs	r3, #9
 800dfd4:	602b      	str	r3, [r5, #0]
 800dfd6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dfda:	81a3      	strh	r3, [r4, #12]
 800dfdc:	f04f 30ff 	mov.w	r0, #4294967295
 800dfe0:	e034      	b.n	800e04c <__swsetup_r+0x9c>
 800dfe2:	0758      	lsls	r0, r3, #29
 800dfe4:	d512      	bpl.n	800e00c <__swsetup_r+0x5c>
 800dfe6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dfe8:	b141      	cbz	r1, 800dffc <__swsetup_r+0x4c>
 800dfea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dfee:	4299      	cmp	r1, r3
 800dff0:	d002      	beq.n	800dff8 <__swsetup_r+0x48>
 800dff2:	4628      	mov	r0, r5
 800dff4:	f7fd fcd8 	bl	800b9a8 <_free_r>
 800dff8:	2300      	movs	r3, #0
 800dffa:	6363      	str	r3, [r4, #52]	; 0x34
 800dffc:	89a3      	ldrh	r3, [r4, #12]
 800dffe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e002:	81a3      	strh	r3, [r4, #12]
 800e004:	2300      	movs	r3, #0
 800e006:	6063      	str	r3, [r4, #4]
 800e008:	6923      	ldr	r3, [r4, #16]
 800e00a:	6023      	str	r3, [r4, #0]
 800e00c:	89a3      	ldrh	r3, [r4, #12]
 800e00e:	f043 0308 	orr.w	r3, r3, #8
 800e012:	81a3      	strh	r3, [r4, #12]
 800e014:	6923      	ldr	r3, [r4, #16]
 800e016:	b94b      	cbnz	r3, 800e02c <__swsetup_r+0x7c>
 800e018:	89a3      	ldrh	r3, [r4, #12]
 800e01a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e01e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e022:	d003      	beq.n	800e02c <__swsetup_r+0x7c>
 800e024:	4621      	mov	r1, r4
 800e026:	4628      	mov	r0, r5
 800e028:	f000 f884 	bl	800e134 <__smakebuf_r>
 800e02c:	89a0      	ldrh	r0, [r4, #12]
 800e02e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e032:	f010 0301 	ands.w	r3, r0, #1
 800e036:	d00a      	beq.n	800e04e <__swsetup_r+0x9e>
 800e038:	2300      	movs	r3, #0
 800e03a:	60a3      	str	r3, [r4, #8]
 800e03c:	6963      	ldr	r3, [r4, #20]
 800e03e:	425b      	negs	r3, r3
 800e040:	61a3      	str	r3, [r4, #24]
 800e042:	6923      	ldr	r3, [r4, #16]
 800e044:	b943      	cbnz	r3, 800e058 <__swsetup_r+0xa8>
 800e046:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e04a:	d1c4      	bne.n	800dfd6 <__swsetup_r+0x26>
 800e04c:	bd38      	pop	{r3, r4, r5, pc}
 800e04e:	0781      	lsls	r1, r0, #30
 800e050:	bf58      	it	pl
 800e052:	6963      	ldrpl	r3, [r4, #20]
 800e054:	60a3      	str	r3, [r4, #8]
 800e056:	e7f4      	b.n	800e042 <__swsetup_r+0x92>
 800e058:	2000      	movs	r0, #0
 800e05a:	e7f7      	b.n	800e04c <__swsetup_r+0x9c>
 800e05c:	20000104 	.word	0x20000104

0800e060 <_raise_r>:
 800e060:	291f      	cmp	r1, #31
 800e062:	b538      	push	{r3, r4, r5, lr}
 800e064:	4604      	mov	r4, r0
 800e066:	460d      	mov	r5, r1
 800e068:	d904      	bls.n	800e074 <_raise_r+0x14>
 800e06a:	2316      	movs	r3, #22
 800e06c:	6003      	str	r3, [r0, #0]
 800e06e:	f04f 30ff 	mov.w	r0, #4294967295
 800e072:	bd38      	pop	{r3, r4, r5, pc}
 800e074:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e076:	b112      	cbz	r2, 800e07e <_raise_r+0x1e>
 800e078:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e07c:	b94b      	cbnz	r3, 800e092 <_raise_r+0x32>
 800e07e:	4620      	mov	r0, r4
 800e080:	f000 f830 	bl	800e0e4 <_getpid_r>
 800e084:	462a      	mov	r2, r5
 800e086:	4601      	mov	r1, r0
 800e088:	4620      	mov	r0, r4
 800e08a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e08e:	f000 b817 	b.w	800e0c0 <_kill_r>
 800e092:	2b01      	cmp	r3, #1
 800e094:	d00a      	beq.n	800e0ac <_raise_r+0x4c>
 800e096:	1c59      	adds	r1, r3, #1
 800e098:	d103      	bne.n	800e0a2 <_raise_r+0x42>
 800e09a:	2316      	movs	r3, #22
 800e09c:	6003      	str	r3, [r0, #0]
 800e09e:	2001      	movs	r0, #1
 800e0a0:	e7e7      	b.n	800e072 <_raise_r+0x12>
 800e0a2:	2400      	movs	r4, #0
 800e0a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e0a8:	4628      	mov	r0, r5
 800e0aa:	4798      	blx	r3
 800e0ac:	2000      	movs	r0, #0
 800e0ae:	e7e0      	b.n	800e072 <_raise_r+0x12>

0800e0b0 <raise>:
 800e0b0:	4b02      	ldr	r3, [pc, #8]	; (800e0bc <raise+0xc>)
 800e0b2:	4601      	mov	r1, r0
 800e0b4:	6818      	ldr	r0, [r3, #0]
 800e0b6:	f7ff bfd3 	b.w	800e060 <_raise_r>
 800e0ba:	bf00      	nop
 800e0bc:	20000104 	.word	0x20000104

0800e0c0 <_kill_r>:
 800e0c0:	b538      	push	{r3, r4, r5, lr}
 800e0c2:	4d07      	ldr	r5, [pc, #28]	; (800e0e0 <_kill_r+0x20>)
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	4604      	mov	r4, r0
 800e0c8:	4608      	mov	r0, r1
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	602b      	str	r3, [r5, #0]
 800e0ce:	f7f3 fffd 	bl	80020cc <_kill>
 800e0d2:	1c43      	adds	r3, r0, #1
 800e0d4:	d102      	bne.n	800e0dc <_kill_r+0x1c>
 800e0d6:	682b      	ldr	r3, [r5, #0]
 800e0d8:	b103      	cbz	r3, 800e0dc <_kill_r+0x1c>
 800e0da:	6023      	str	r3, [r4, #0]
 800e0dc:	bd38      	pop	{r3, r4, r5, pc}
 800e0de:	bf00      	nop
 800e0e0:	20000750 	.word	0x20000750

0800e0e4 <_getpid_r>:
 800e0e4:	f7f3 bfea 	b.w	80020bc <_getpid>

0800e0e8 <__swhatbuf_r>:
 800e0e8:	b570      	push	{r4, r5, r6, lr}
 800e0ea:	460c      	mov	r4, r1
 800e0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0f0:	2900      	cmp	r1, #0
 800e0f2:	b096      	sub	sp, #88	; 0x58
 800e0f4:	4615      	mov	r5, r2
 800e0f6:	461e      	mov	r6, r3
 800e0f8:	da0d      	bge.n	800e116 <__swhatbuf_r+0x2e>
 800e0fa:	89a3      	ldrh	r3, [r4, #12]
 800e0fc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e100:	f04f 0100 	mov.w	r1, #0
 800e104:	bf0c      	ite	eq
 800e106:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e10a:	2340      	movne	r3, #64	; 0x40
 800e10c:	2000      	movs	r0, #0
 800e10e:	6031      	str	r1, [r6, #0]
 800e110:	602b      	str	r3, [r5, #0]
 800e112:	b016      	add	sp, #88	; 0x58
 800e114:	bd70      	pop	{r4, r5, r6, pc}
 800e116:	466a      	mov	r2, sp
 800e118:	f000 f848 	bl	800e1ac <_fstat_r>
 800e11c:	2800      	cmp	r0, #0
 800e11e:	dbec      	blt.n	800e0fa <__swhatbuf_r+0x12>
 800e120:	9901      	ldr	r1, [sp, #4]
 800e122:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e126:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e12a:	4259      	negs	r1, r3
 800e12c:	4159      	adcs	r1, r3
 800e12e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e132:	e7eb      	b.n	800e10c <__swhatbuf_r+0x24>

0800e134 <__smakebuf_r>:
 800e134:	898b      	ldrh	r3, [r1, #12]
 800e136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e138:	079d      	lsls	r5, r3, #30
 800e13a:	4606      	mov	r6, r0
 800e13c:	460c      	mov	r4, r1
 800e13e:	d507      	bpl.n	800e150 <__smakebuf_r+0x1c>
 800e140:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e144:	6023      	str	r3, [r4, #0]
 800e146:	6123      	str	r3, [r4, #16]
 800e148:	2301      	movs	r3, #1
 800e14a:	6163      	str	r3, [r4, #20]
 800e14c:	b002      	add	sp, #8
 800e14e:	bd70      	pop	{r4, r5, r6, pc}
 800e150:	ab01      	add	r3, sp, #4
 800e152:	466a      	mov	r2, sp
 800e154:	f7ff ffc8 	bl	800e0e8 <__swhatbuf_r>
 800e158:	9900      	ldr	r1, [sp, #0]
 800e15a:	4605      	mov	r5, r0
 800e15c:	4630      	mov	r0, r6
 800e15e:	f7fb fd9b 	bl	8009c98 <_malloc_r>
 800e162:	b948      	cbnz	r0, 800e178 <__smakebuf_r+0x44>
 800e164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e168:	059a      	lsls	r2, r3, #22
 800e16a:	d4ef      	bmi.n	800e14c <__smakebuf_r+0x18>
 800e16c:	f023 0303 	bic.w	r3, r3, #3
 800e170:	f043 0302 	orr.w	r3, r3, #2
 800e174:	81a3      	strh	r3, [r4, #12]
 800e176:	e7e3      	b.n	800e140 <__smakebuf_r+0xc>
 800e178:	89a3      	ldrh	r3, [r4, #12]
 800e17a:	6020      	str	r0, [r4, #0]
 800e17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e180:	81a3      	strh	r3, [r4, #12]
 800e182:	9b00      	ldr	r3, [sp, #0]
 800e184:	6163      	str	r3, [r4, #20]
 800e186:	9b01      	ldr	r3, [sp, #4]
 800e188:	6120      	str	r0, [r4, #16]
 800e18a:	b15b      	cbz	r3, 800e1a4 <__smakebuf_r+0x70>
 800e18c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e190:	4630      	mov	r0, r6
 800e192:	f000 f81d 	bl	800e1d0 <_isatty_r>
 800e196:	b128      	cbz	r0, 800e1a4 <__smakebuf_r+0x70>
 800e198:	89a3      	ldrh	r3, [r4, #12]
 800e19a:	f023 0303 	bic.w	r3, r3, #3
 800e19e:	f043 0301 	orr.w	r3, r3, #1
 800e1a2:	81a3      	strh	r3, [r4, #12]
 800e1a4:	89a3      	ldrh	r3, [r4, #12]
 800e1a6:	431d      	orrs	r5, r3
 800e1a8:	81a5      	strh	r5, [r4, #12]
 800e1aa:	e7cf      	b.n	800e14c <__smakebuf_r+0x18>

0800e1ac <_fstat_r>:
 800e1ac:	b538      	push	{r3, r4, r5, lr}
 800e1ae:	4d07      	ldr	r5, [pc, #28]	; (800e1cc <_fstat_r+0x20>)
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	4608      	mov	r0, r1
 800e1b6:	4611      	mov	r1, r2
 800e1b8:	602b      	str	r3, [r5, #0]
 800e1ba:	f7f3 ffe6 	bl	800218a <_fstat>
 800e1be:	1c43      	adds	r3, r0, #1
 800e1c0:	d102      	bne.n	800e1c8 <_fstat_r+0x1c>
 800e1c2:	682b      	ldr	r3, [r5, #0]
 800e1c4:	b103      	cbz	r3, 800e1c8 <_fstat_r+0x1c>
 800e1c6:	6023      	str	r3, [r4, #0]
 800e1c8:	bd38      	pop	{r3, r4, r5, pc}
 800e1ca:	bf00      	nop
 800e1cc:	20000750 	.word	0x20000750

0800e1d0 <_isatty_r>:
 800e1d0:	b538      	push	{r3, r4, r5, lr}
 800e1d2:	4d06      	ldr	r5, [pc, #24]	; (800e1ec <_isatty_r+0x1c>)
 800e1d4:	2300      	movs	r3, #0
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	4608      	mov	r0, r1
 800e1da:	602b      	str	r3, [r5, #0]
 800e1dc:	f7f3 ffe5 	bl	80021aa <_isatty>
 800e1e0:	1c43      	adds	r3, r0, #1
 800e1e2:	d102      	bne.n	800e1ea <_isatty_r+0x1a>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	b103      	cbz	r3, 800e1ea <_isatty_r+0x1a>
 800e1e8:	6023      	str	r3, [r4, #0]
 800e1ea:	bd38      	pop	{r3, r4, r5, pc}
 800e1ec:	20000750 	.word	0x20000750

0800e1f0 <_init>:
 800e1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1f2:	bf00      	nop
 800e1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e1f6:	bc08      	pop	{r3}
 800e1f8:	469e      	mov	lr, r3
 800e1fa:	4770      	bx	lr

0800e1fc <_fini>:
 800e1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e1fe:	bf00      	nop
 800e200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e202:	bc08      	pop	{r3}
 800e204:	469e      	mov	lr, r3
 800e206:	4770      	bx	lr
